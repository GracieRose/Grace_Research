Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-40.405631615082015 -48] -88.40563161508202]
Train Case:   1 | Input/Output: [[67.12325141282165 51] 118.12325141282165]
Train Case:   2 | Input/Output: [[98.63744301998736 50] 148.63744301998736]
Train Case:   3 | Input/Output: [[77.41537587726032 53] 130.41537587726032]
Train Case:   4 | Input/Output: [[91.25364045071908 -26] 65.25364045071908]
Train Case:   5 | Input/Output: [[17.86551881877925 -13] 4.86551881877925]
Train Case:   6 | Input/Output: [[-52.09601084703268 -10] -62.09601084703268]
Train Case:   7 | Input/Output: [[96.88463413445686 -45] 51.88463413445686]
Train Case:   8 | Input/Output: [[-76.90639925777123 -80] -156.90639925777123]
Train Case:   9 | Input/Output: [[40.32537990017272 8] 48.32537990017272]
Train Case:  10 | Input/Output: [[88.71962834866775 56] 144.71962834866775]
Train Case:  11 | Input/Output: [[-50.830471233193734 -4] -54.830471233193734]
Train Case:  12 | Input/Output: [[-81.77159955964643 49] -32.77159955964643]
Train Case:  13 | Input/Output: [[-58.775520720239015 68] 9.224479279760985]
Train Case:  14 | Input/Output: [[-55.822392976708834 99] 43.177607023291166]
Train Case:  15 | Input/Output: [[-43.52164702847106 98] 54.47835297152894]
Train Case:  16 | Input/Output: [[17.775344143899787 99] 116.77534414389979]
Train Case:  17 | Input/Output: [[-50.00301295070524 36] -14.00301295070524]
Train Case:  18 | Input/Output: [[-18.229153117123346 -79] -97.22915311712335]
Train Case:  19 | Input/Output: [[49.37184238167532 46] 95.37184238167532]
Train Case:  20 | Input/Output: [[75.92700888530865 -7] 68.92700888530865]
Train Case:  21 | Input/Output: [[12.764776547280277 35] 47.76477654728028]
Train Case:  22 | Input/Output: [[-38.928968630361304 -10] -48.928968630361304]
Train Case:  23 | Input/Output: [[66.51939134124464 43] 109.51939134124464]
Train Case:  24 | Input/Output: [[-45.125074036508096 -80] -125.1250740365081]
Test Case:   0 | Input/Output: [[20.67110779260301 6] 26.67110779260301]
Test Case:   1 | Input/Output: [[-68.32586851703147 -3] -71.32586851703147]
Test Case:   2 | Input/Output: [[-61.442057801985015 -8] -69.44205780198502]
Test Case:   3 | Input/Output: [[-3.4292498130570266 85] 81.57075018694297]
Test Case:   4 | Input/Output: [[-49.328760636034154 6] -43.328760636034154]
Test Case:   5 | Input/Output: [[57.51864876428397 -66] -8.481351235716033]
Test Case:   6 | Input/Output: [[-23.78457215782346 -7] -30.78457215782346]
Test Case:   7 | Input/Output: [[-46.93728680537428 -70] -116.93728680537427]
Test Case:   8 | Input/Output: [[-46.827491566566735 7] -39.827491566566735]
Test Case:   9 | Input/Output: [[-38.34983633548361 -30] -68.34983633548362]
Test Case:  10 | Input/Output: [[7.086018878782909 -65] -57.91398112121709]
Test Case:  11 | Input/Output: [[51.27663943508682 90] 141.27663943508682]
Test Case:  12 | Input/Output: [[59.884918123087516 10] 69.88491812308752]
Test Case:  13 | Input/Output: [[45.395087520233545 69] 114.39508752023355]
Test Case:  14 | Input/Output: [[76.8892635232697 49] 125.8892635232697]
Test Case:  15 | Input/Output: [[-5.128407132444181 15] 9.871592867555819]
Test Case:  16 | Input/Output: [[53.04030340995823 -26] 27.040303409958227]
Test Case:  17 | Input/Output: [[-43.085330223776516 -28] -71.08533022377651]
Test Case:  18 | Input/Output: [[-87.46849931582406 -36] -123.46849931582406]
Test Case:  19 | Input/Output: [[-92.65604342284523 93] 0.34395657715477057]
Test Case:  20 | Input/Output: [[53.5799839288496 -6] 47.5799839288496]
Test Case:  21 | Input/Output: [[-55.762942048732086 -88] -143.7629420487321]
Test Case:  22 | Input/Output: [[66.78158108020224 63] 129.78158108020224]
Test Case:  23 | Input/Output: [[-69.83684034120346 -76] -145.83684034120347]
Test Case:  24 | Input/Output: [[-29.49804425491142 -80] -109.49804425491142]
Test Case:  25 | Input/Output: [[-70.28643902364784 -35] -105.28643902364784]
Test Case:  26 | Input/Output: [[85.91144241216315 56] 141.91144241216315]
Test Case:  27 | Input/Output: [[-88.33285052766027 -46] -134.33285052766027]
Test Case:  28 | Input/Output: [[-40.475235773487995 36] -4.475235773487995]
Test Case:  29 | Input/Output: [[84.61003740884175 48] 132.61003740884175]
Test Case:  30 | Input/Output: [[-51.02440100804137 74] 22.975598991958627]
Test Case:  31 | Input/Output: [[-32.931683148226256 99] 66.06831685177374]
Test Case:  32 | Input/Output: [[-21.259095298175936 89] 67.74090470182406]
Test Case:  33 | Input/Output: [[63.707022948921264 -3] 60.707022948921264]
Test Case:  34 | Input/Output: [[-11.232981595384132 43] 31.767018404615868]
Test Case:  35 | Input/Output: [[-60.89342971835809 39] -21.893429718358092]
Test Case:  36 | Input/Output: [[-31.68804664584887 -6] -37.68804664584887]
Test Case:  37 | Input/Output: [[47.755086940658714 -56] -8.244913059341286]
Test Case:  38 | Input/Output: [[-80.43937849823573 8] -72.43937849823573]
Test Case:  39 | Input/Output: [[-8.77211216322533 96] 87.22788783677467]
Test Case:  40 | Input/Output: [[7.364337175261753 -63] -55.63566282473825]
Test Case:  41 | Input/Output: [[4.626469913751436 70] 74.62646991375144]
Test Case:  42 | Input/Output: [[21.04287347511 17] 38.04287347511]
Test Case:  43 | Input/Output: [[46.76366466577281 32] 78.76366466577281]
Test Case:  44 | Input/Output: [[-19.847246113831147 -74] -93.84724611383115]
Test Case:  45 | Input/Output: [[97.3360895452179 -7] 90.3360895452179]
Test Case:  46 | Input/Output: [[2.8173303297461416 5] 7.817330329746142]
Test Case:  47 | Input/Output: [[-33.695505890766 -21] -54.695505890766]
Test Case:  48 | Input/Output: [[-78.65985329046678 76] -2.659853290466785]
Test Case:  49 | Input/Output: [[10.124491616383352 23] 33.12449161638335]
Test Case:  50 | Input/Output: [[-60.281751994548706 -93] -153.2817519945487]
Test Case:  51 | Input/Output: [[-45.80136063328535 20] -25.80136063328535]
Test Case:  52 | Input/Output: [[60.479125764738114 -44] 16.479125764738114]
Test Case:  53 | Input/Output: [[-14.588119786813209 95] 80.41188021318679]
Test Case:  54 | Input/Output: [[93.04165292236476 -84] 9.041652922364761]
Test Case:  55 | Input/Output: [[99.34697755414433 40] 139.34697755414433]
Test Case:  56 | Input/Output: [[-82.52220972546966 -69] -151.52220972546968]
Test Case:  57 | Input/Output: [[84.38309787001273 39] 123.38309787001273]
Test Case:  58 | Input/Output: [[17.68932145193918 77] 94.68932145193918]
Test Case:  59 | Input/Output: [[-65.95151713692984 42] -23.951517136929837]
Test Case:  60 | Input/Output: [[8.823424775304531 47] 55.82342477530453]
Test Case:  61 | Input/Output: [[-16.067526068983938 52] 35.93247393101606]
Test Case:  62 | Input/Output: [[10.470726185758508 -11] -0.5292738142414919]
Test Case:  63 | Input/Output: [[40.70830642127726 98] 138.70830642127726]
Test Case:  64 | Input/Output: [[6.649422213616646 14] 20.649422213616646]
Test Case:  65 | Input/Output: [[70.73201196304336 91] 161.73201196304336]
Test Case:  66 | Input/Output: [[17.606197055840838 1] 18.606197055840838]
Test Case:  67 | Input/Output: [[90.2514886363796 54] 144.2514886363796]
Test Case:  68 | Input/Output: [[81.68467320731406 48] 129.68467320731406]
Test Case:  69 | Input/Output: [[80.61379184686706 90] 170.61379184686706]
Test Case:  70 | Input/Output: [[18.08014998452863 57] 75.08014998452863]
Test Case:  71 | Input/Output: [[5.146251583900693 -96] -90.85374841609931]
Test Case:  72 | Input/Output: [[62.44454668743836 79] 141.44454668743836]
Test Case:  73 | Input/Output: [[-35.03039168721615 -77] -112.03039168721615]
Test Case:  74 | Input/Output: [[-59.55840855150516 0] -59.55840855150516]
Test Case:  75 | Input/Output: [[-8.307543526270123 34] 25.692456473729877]
Test Case:  76 | Input/Output: [[-93.34330076882603 89] -4.343300768826026]
Test Case:  77 | Input/Output: [[-40.727965433080286 -31] -71.72796543308029]
Test Case:  78 | Input/Output: [[-28.366819946597403 -31] -59.3668199465974]
Test Case:  79 | Input/Output: [[80.90062583187034 -58] 22.900625831870343]
Test Case:  80 | Input/Output: [[68.73326002196077 -99] -30.266739978039226]
Test Case:  81 | Input/Output: [[55.1589668105014 72] 127.1589668105014]
Test Case:  82 | Input/Output: [[87.2343107145077 58] 145.2343107145077]
Test Case:  83 | Input/Output: [[67.13079021822537 -45] 22.13079021822537]
Test Case:  84 | Input/Output: [[14.103794707168888 33] 47.10379470716889]
Test Case:  85 | Input/Output: [[87.62397124558476 95] 182.62397124558476]
Test Case:  86 | Input/Output: [[92.75090144755654 -97] -4.249098552443456]
Test Case:  87 | Input/Output: [[-6.769257742216439 1] -5.769257742216439]
Test Case:  88 | Input/Output: [[-57.96484733494265 -55] -112.96484733494265]
Test Case:  89 | Input/Output: [[12.057334515321898 -19] -6.942665484678102]
Test Case:  90 | Input/Output: [[-81.9098672333724 23] -58.909867233372395]
Test Case:  91 | Input/Output: [[-35.88243638668153 80] 44.11756361331847]
Test Case:  92 | Input/Output: [[-67.63510142253907 -88] -155.63510142253907]
Test Case:  93 | Input/Output: [[-79.30748739335607 0] -79.30748739335607]
Test Case:  94 | Input/Output: [[70.1410452117004 62] 132.1410452117004]
Test Case:  95 | Input/Output: [[-53.36102646684486 12] -41.36102646684486]
Test Case:  96 | Input/Output: [[19.857569117721184 59] 78.85756911772118]
Test Case:  97 | Input/Output: [[-15.20952492859297 8] -7.20952492859297]
Test Case:  98 | Input/Output: [[-3.8504283025101245 42] 38.149571697489876]
Test Case:  99 | Input/Output: [[89.00328701751266 21] 110.00328701751266]
Test Case: 100 | Input/Output: [[-64.95355671084882 -17] -81.95355671084882]
Test Case: 101 | Input/Output: [[19.01278862907148 -59] -39.98721137092852]
Test Case: 102 | Input/Output: [[-76.56969829820115 23] -53.569698298201146]
Test Case: 103 | Input/Output: [[-68.34574637884856 -100] -168.34574637884856]
Test Case: 104 | Input/Output: [[59.945546901682576 -16] 43.945546901682576]
Test Case: 105 | Input/Output: [[-86.70267124198439 13] -73.70267124198439]
Test Case: 106 | Input/Output: [[-5.900249390356535 -8] -13.900249390356535]
Test Case: 107 | Input/Output: [[-39.14469694309848 -59] -98.14469694309848]
Test Case: 108 | Input/Output: [[64.7645407386403 28] 92.7645407386403]
Test Case: 109 | Input/Output: [[28.761398350432927 8] 36.76139835043293]
Test Case: 110 | Input/Output: [[20.803665494343647 -91] -70.19633450565635]
Test Case: 111 | Input/Output: [[42.854144132450244 -82] -39.145855867549756]
Test Case: 112 | Input/Output: [[-46.4990946975941 -71] -117.4990946975941]
Test Case: 113 | Input/Output: [[-43.31478041295902 1] -42.31478041295902]
Test Case: 114 | Input/Output: [[82.45367259911174 79] 161.45367259911174]
Test Case: 115 | Input/Output: [[-21.27332928388914 19] -2.27332928388914]
Test Case: 116 | Input/Output: [[25.272681665466706 -1] 24.272681665466706]
Test Case: 117 | Input/Output: [[-6.342852724426791 54] 47.65714727557321]
Test Case: 118 | Input/Output: [[-78.73080237782673 -88] -166.73080237782673]
Test Case: 119 | Input/Output: [[-67.99672960566818 30] -37.99672960566818]
Test Case: 120 | Input/Output: [[97.50352976864772 75] 172.50352976864772]
Test Case: 121 | Input/Output: [[-79.64558100671664 -23] -102.64558100671664]
Test Case: 122 | Input/Output: [[5.601829806594694 -88] -82.3981701934053]
Test Case: 123 | Input/Output: [[73.4692899177422 -50] 23.469289917742202]
Test Case: 124 | Input/Output: [[-92.13050071938022 23] -69.13050071938022]
Test Case: 125 | Input/Output: [[-56.809031223700266 -2] -58.809031223700266]
Test Case: 126 | Input/Output: [[45.67579271579331 88] 133.6757927157933]
Test Case: 127 | Input/Output: [[95.13401520029424 -78] 17.134015200294243]
Test Case: 128 | Input/Output: [[-72.87677829062314 23] -49.876778290623136]
Test Case: 129 | Input/Output: [[-34.669374636304156 12] -22.669374636304156]
Test Case: 130 | Input/Output: [[-11.772108971352708 -5] -16.772108971352708]
Test Case: 131 | Input/Output: [[-1.684616923744997 41] 39.315383076255]
Test Case: 132 | Input/Output: [[-66.60967302063794 -60] -126.60967302063794]
Test Case: 133 | Input/Output: [[40.06802789094144 -61] -20.931972109058563]
Test Case: 134 | Input/Output: [[-30.86032969740748 74] 43.13967030259252]
Test Case: 135 | Input/Output: [[-33.38551828517369 42] 8.614481714826312]
Test Case: 136 | Input/Output: [[11.16402848407607 -49] -37.83597151592393]
Test Case: 137 | Input/Output: [[31.04509668914227 45] 76.04509668914227]
Test Case: 138 | Input/Output: [[64.00810377133007 15] 79.00810377133007]
Test Case: 139 | Input/Output: [[-30.17801984228143 -84] -114.17801984228143]
Test Case: 140 | Input/Output: [[-25.45200848271891 5] -20.45200848271891]
Test Case: 141 | Input/Output: [[-3.47948226940386 -47] -50.47948226940386]
Test Case: 142 | Input/Output: [[-48.34427020848033 38] -10.344270208480332]
Test Case: 143 | Input/Output: [[-17.998253842773153 23] 5.001746157226847]
Test Case: 144 | Input/Output: [[64.4023628653087 -70] -5.597637134691297]
Test Case: 145 | Input/Output: [[53.59118109368123 -80] -26.40881890631877]
Test Case: 146 | Input/Output: [[30.42782669307806 7] 37.42782669307806]
Test Case: 147 | Input/Output: [[35.59116161322194 4] 39.59116161322194]
Test Case: 148 | Input/Output: [[-46.188638731454425 -40] -86.18863873145443]
Test Case: 149 | Input/Output: [[-55.213723486044806 -21] -76.21372348604481]
Test Case: 150 | Input/Output: [[43.480192014800764 -76] -32.519807985199236]
Test Case: 151 | Input/Output: [[-71.54397862007475 -25] -96.54397862007475]
Test Case: 152 | Input/Output: [[27.627536332176888 82] 109.62753633217689]
Test Case: 153 | Input/Output: [[-62.58646403169619 -55] -117.58646403169618]
Test Case: 154 | Input/Output: [[43.756434376868526 25] 68.75643437686853]
Test Case: 155 | Input/Output: [[44.851727851366235 -61] -16.148272148633765]
Test Case: 156 | Input/Output: [[48.034867270803545 52] 100.03486727080355]
Test Case: 157 | Input/Output: [[6.237445329792578 -15] -8.762554670207422]
Test Case: 158 | Input/Output: [[-3.096209987474623 -55] -58.09620998747462]
Test Case: 159 | Input/Output: [[82.42857404821956 72] 154.42857404821956]
Test Case: 160 | Input/Output: [[-45.87172984375787 -33] -78.87172984375786]
Test Case: 161 | Input/Output: [[9.602562720958744 48] 57.602562720958744]
Test Case: 162 | Input/Output: [[-84.45586022546684 -72] -156.45586022546684]
Test Case: 163 | Input/Output: [[-29.344179386192266 97] 67.65582061380773]
Test Case: 164 | Input/Output: [[-84.21309882864433 27] -57.213098828644334]
Test Case: 165 | Input/Output: [[-39.564300627027336 -35] -74.56430062702734]
Test Case: 166 | Input/Output: [[-51.133007342804994 60] 8.866992657195006]
Test Case: 167 | Input/Output: [[-30.402455107581616 17] -13.402455107581616]
Test Case: 168 | Input/Output: [[-71.89565136988716 98] 26.10434863011284]
Test Case: 169 | Input/Output: [[-90.55275788515866 -17] -107.55275788515866]
Test Case: 170 | Input/Output: [[62.72297656409779 63] 125.72297656409779]
Test Case: 171 | Input/Output: [[-55.59304154782485 25] -30.593041547824853]
Test Case: 172 | Input/Output: [[87.22348726671757 -77] 10.22348726671757]
Test Case: 173 | Input/Output: [[-9.76993424266719 4] -5.7699342426671905]
Test Case: 174 | Input/Output: [[59.978427511635374 -46] 13.978427511635374]
Test Case: 175 | Input/Output: [[-24.581408492130493 -24] -48.58140849213049]
Test Case: 176 | Input/Output: [[-40.959006127990264 95] 54.040993872009736]
Test Case: 177 | Input/Output: [[-15.81713767487858 19] 3.1828623251214196]
Test Case: 178 | Input/Output: [[-23.18189105325537 -24] -47.18189105325537]
Test Case: 179 | Input/Output: [[96.30415114239307 -77] 19.304151142393067]
Test Case: 180 | Input/Output: [[-56.64868454842669 14] -42.64868454842669]
Test Case: 181 | Input/Output: [[65.1697652694171 85] 150.1697652694171]
Test Case: 182 | Input/Output: [[23.892488144857694 35] 58.892488144857694]
Test Case: 183 | Input/Output: [[37.451317478435186 76] 113.45131747843519]
Test Case: 184 | Input/Output: [[-46.965798446827 1] -45.965798446827]
Test Case: 185 | Input/Output: [[-73.44954959383305 24] -49.449549593833055]
Test Case: 186 | Input/Output: [[71.67073652559844 29] 100.67073652559844]
Test Case: 187 | Input/Output: [[-51.96231744696522 -99] -150.96231744696522]
Test Case: 188 | Input/Output: [[92.6695047643444 -73] 19.669504764344396]
Test Case: 189 | Input/Output: [[-20.9438190486257 -26] -46.9438190486257]
Test Case: 190 | Input/Output: [[-21.345962164955452 71] 49.65403783504455]
Test Case: 191 | Input/Output: [[-44.85875638914716 -37] -81.85875638914716]
Test Case: 192 | Input/Output: [[-92.45901966991535 60] -32.45901966991535]
Test Case: 193 | Input/Output: [[13.846748423759479 52] 65.84674842375948]
Test Case: 194 | Input/Output: [[74.02244615803201 -67] 7.022446158032011]
Test Case: 195 | Input/Output: [[18.718837233635384 -59] -40.281162766364616]
Test Case: 196 | Input/Output: [[21.743287343993217 -61] -39.25671265600678]
Test Case: 197 | Input/Output: [[-43.81157252261729 15] -28.81157252261729]
Test Case: 198 | Input/Output: [[76.66957058711606 15] 91.66957058711606]
Test Case: 199 | Input/Output: [[77.53612075032788 -26] 51.53612075032788]
Test Case: 200 | Input/Output: [[56.024944419038235 -9] 47.024944419038235]
Test Case: 201 | Input/Output: [[-18.516089037003056 18] -0.5160890370030558]
Test Case: 202 | Input/Output: [[-75.83132889039075 -75] -150.83132889039075]
Test Case: 203 | Input/Output: [[-14.59431023877002 55] 40.40568976122998]
Test Case: 204 | Input/Output: [[-53.656855925042215 17] -36.656855925042215]
Test Case: 205 | Input/Output: [[-71.57062666853889 87] 15.429373331461107]
Test Case: 206 | Input/Output: [[83.664398377662 -51] 32.664398377661996]
Test Case: 207 | Input/Output: [[23.421921080018947 -79] -55.57807891998105]
Test Case: 208 | Input/Output: [[3.0188884267508627 12] 15.018888426750863]
Test Case: 209 | Input/Output: [[-13.646692970990898 -38] -51.6466929709909]
Test Case: 210 | Input/Output: [[-96.82131057056604 59] -37.82131057056604]
Test Case: 211 | Input/Output: [[60.34028625823146 95] 155.34028625823146]
Test Case: 212 | Input/Output: [[74.45158104745124 -93] -18.548418952548758]
Test Case: 213 | Input/Output: [[-62.34672932549217 32] -30.34672932549217]
Test Case: 214 | Input/Output: [[-66.5761391912615 -37] -103.5761391912615]
Test Case: 215 | Input/Output: [[58.1063880006993 -39] 19.106388000699297]
Test Case: 216 | Input/Output: [[80.58431361712965 -37] 43.58431361712965]
Test Case: 217 | Input/Output: [[71.11111526197513 67] 138.11111526197513]
Test Case: 218 | Input/Output: [[0.5265977180360295 92] 92.52659771803603]
Test Case: 219 | Input/Output: [[41.060076646049254 -85] -43.939923353950746]
Test Case: 220 | Input/Output: [[-92.20133197657336 4] -88.20133197657336]
Test Case: 221 | Input/Output: [[15.696781832128522 22] 37.69678183212852]
Test Case: 222 | Input/Output: [[-94.23183023076498 10] -84.23183023076498]
Test Case: 223 | Input/Output: [[52.81181985273349 50] 102.81181985273349]
Test Case: 224 | Input/Output: [[37.52877902398757 -31] 6.528779023987568]
Test Case: 225 | Input/Output: [[25.85403918604932 20] 45.85403918604932]
Test Case: 226 | Input/Output: [[-3.072510016036972 83] 79.92748998396303]
Test Case: 227 | Input/Output: [[6.872802666228665 65] 71.87280266622867]
Test Case: 228 | Input/Output: [[-10.002826407869165 96] 85.99717359213084]
Test Case: 229 | Input/Output: [[-60.317023027847874 -35] -95.31702302784788]
Test Case: 230 | Input/Output: [[-64.67109857967708 3] -61.67109857967708]
Test Case: 231 | Input/Output: [[54.69274855065149 -79] -24.307251449348513]
Test Case: 232 | Input/Output: [[89.39431596746095 79] 168.39431596746095]
Test Case: 233 | Input/Output: [[-78.41427521016587 -15] -93.41427521016587]
Test Case: 234 | Input/Output: [[29.89093455527299 -95] -65.10906544472701]
Test Case: 235 | Input/Output: [[-58.53699595266622 64] 5.463004047333783]
Test Case: 236 | Input/Output: [[76.35514862878793 -21] 55.35514862878793]
Test Case: 237 | Input/Output: [[45.68722879725354 70] 115.68722879725354]
Test Case: 238 | Input/Output: [[33.97532147307078 -38] -4.024678526929222]
Test Case: 239 | Input/Output: [[16.8154771934702 19] 35.8154771934702]
Test Case: 240 | Input/Output: [[60.05636348852437 -8] 52.05636348852437]
Test Case: 241 | Input/Output: [[-93.97055334093648 -45] -138.97055334093648]
Test Case: 242 | Input/Output: [[40.258742455549935 -60] -19.741257544450065]
Test Case: 243 | Input/Output: [[-48.44591315461333 -31] -79.44591315461332]
Test Case: 244 | Input/Output: [[61.3434371216959 82] 143.3434371216959]
Test Case: 245 | Input/Output: [[45.06403220664069 91] 136.0640322066407]
Test Case: 246 | Input/Output: [[70.2596640190039 52] 122.2596640190039]
Test Case: 247 | Input/Output: [[-7.978944298023578 -93] -100.97894429802358]
Test Case: 248 | Input/Output: [[-84.55853641299531 97] 12.44146358700469]
Test Case: 249 | Input/Output: [[77.66777174225717 50] 127.66777174225717]
Test Case: 250 | Input/Output: [[84.44162090514163 51] 135.44162090514163]
Test Case: 251 | Input/Output: [[80.55993197813268 75] 155.55993197813268]
Test Case: 252 | Input/Output: [[-80.98984744411173 75] -5.9898474441117315]
Test Case: 253 | Input/Output: [[10.05655066983961 -28] -17.94344933016039]
Test Case: 254 | Input/Output: [[-71.72708865749749 23] -48.72708865749749]
Test Case: 255 | Input/Output: [[73.56121551153433 -83] -9.438784488465672]
Test Case: 256 | Input/Output: [[-14.04508375073057 81] 66.95491624926943]
Test Case: 257 | Input/Output: [[-25.369488769250893 18] -7.369488769250893]
Test Case: 258 | Input/Output: [[64.72611481061301 -90] -25.273885189386988]
Test Case: 259 | Input/Output: [[45.970930187860034 6] 51.970930187860034]
Test Case: 260 | Input/Output: [[-56.58338035049846 -27] -83.58338035049846]
Test Case: 261 | Input/Output: [[69.0477792642402 27] 96.0477792642402]
Test Case: 262 | Input/Output: [[-99.04863351111646 -34] -133.04863351111646]
Test Case: 263 | Input/Output: [[-35.79388276928512 -63] -98.79388276928512]
Test Case: 264 | Input/Output: [[40.28118200297365 -70] -29.71881799702635]
Test Case: 265 | Input/Output: [[71.60419428468538 28] 99.60419428468538]
Test Case: 266 | Input/Output: [[93.04214487735251 -86] 7.042144877352513]
Test Case: 267 | Input/Output: [[42.83665795393844 2] 44.83665795393844]
Test Case: 268 | Input/Output: [[-85.66543686230166 -3] -88.66543686230166]
Test Case: 269 | Input/Output: [[69.9956073139139 -88] -18.004392686086106]
Test Case: 270 | Input/Output: [[-40.74202740625073 61] 20.257972593749273]
Test Case: 271 | Input/Output: [[-39.118048702291205 75] 35.881951297708795]
Test Case: 272 | Input/Output: [[59.082672857014956 -70] -10.917327142985044]
Test Case: 273 | Input/Output: [[-62.10817056142184 71] 8.891829438578164]
Test Case: 274 | Input/Output: [[-22.581867073525473 -90] -112.58186707352547]
Test Case: 275 | Input/Output: [[-32.962414963176315 -11] -43.962414963176315]
Test Case: 276 | Input/Output: [[-29.550382428546257 -19] -48.55038242854626]
Test Case: 277 | Input/Output: [[12.417148970352926 82] 94.41714897035293]
Test Case: 278 | Input/Output: [[-76.82591507028306 92] 15.17408492971694]
Test Case: 279 | Input/Output: [[10.006586106789612 100] 110.00658610678961]
Test Case: 280 | Input/Output: [[-0.8361018217285476 -43] -43.83610182172855]
Test Case: 281 | Input/Output: [[33.64733927267426 -43] -9.352660727325741]
Test Case: 282 | Input/Output: [[30.268137134186446 50] 80.26813713418645]
Test Case: 283 | Input/Output: [[-2.7233470484817985 -56] -58.7233470484818]
Test Case: 284 | Input/Output: [[-6.256724880492641 88] 81.74327511950736]
Test Case: 285 | Input/Output: [[86.68400694273373 10] 96.68400694273373]
Test Case: 286 | Input/Output: [[-34.25876807017099 25] -9.258768070170987]
Test Case: 287 | Input/Output: [[54.968641892039585 -45] 9.968641892039585]
Test Case: 288 | Input/Output: [[49.29424500565648 -26] 23.294245005656478]
Test Case: 289 | Input/Output: [[-66.26817451151791 -26] -92.26817451151791]
Test Case: 290 | Input/Output: [[87.15907173533708 25] 112.15907173533708]
Test Case: 291 | Input/Output: [[-17.85275245497418 19] 1.1472475450258202]
Test Case: 292 | Input/Output: [[23.58099828189725 94] 117.58099828189725]
Test Case: 293 | Input/Output: [[9.918600922661795 84] 93.9186009226618]
Test Case: 294 | Input/Output: [[81.30941879202774 33] 114.30941879202774]
Test Case: 295 | Input/Output: [[98.22451607042055 -100] -1.7754839295794511]
Test Case: 296 | Input/Output: [[-11.089634495351405 98] 86.9103655046486]
Test Case: 297 | Input/Output: [[-48.68390956033988 43] -5.6839095603398775]
Test Case: 298 | Input/Output: [[-66.77492385658717 83] 16.225076143412835]
Test Case: 299 | Input/Output: [[-27.68017229410067 83] 55.31982770589933]
Test Case: 300 | Input/Output: [[14.442768812893945 76] 90.44276881289395]
Test Case: 301 | Input/Output: [[-26.65531348754419 55] 28.34468651245581]
Test Case: 302 | Input/Output: [[71.6293202036689 63] 134.6293202036689]
Test Case: 303 | Input/Output: [[-26.552934084963 -10] -36.552934084963]
Test Case: 304 | Input/Output: [[11.462851121437879 -26] -14.537148878562121]
Test Case: 305 | Input/Output: [[-75.04983757641641 -33] -108.04983757641641]
Test Case: 306 | Input/Output: [[12.924786961166859 -4] 8.924786961166859]
Test Case: 307 | Input/Output: [[-29.443387008353383 42] 12.556612991646617]
Test Case: 308 | Input/Output: [[-95.46908024418725 -21] -116.46908024418725]
Test Case: 309 | Input/Output: [[-39.84426003556298 37] -2.844260035562982]
Test Case: 310 | Input/Output: [[-98.87039952075307 77] -21.870399520753068]
Test Case: 311 | Input/Output: [[-42.47485151953321 54] 11.52514848046679]
Test Case: 312 | Input/Output: [[71.96107566281108 29] 100.96107566281108]
Test Case: 313 | Input/Output: [[-28.29431531204945 88] 59.70568468795055]
Test Case: 314 | Input/Output: [[-14.577640542464977 77] 62.42235945753502]
Test Case: 315 | Input/Output: [[27.9914104206771 -2] 25.9914104206771]
Test Case: 316 | Input/Output: [[21.33264818961908 -76] -54.66735181038092]
Test Case: 317 | Input/Output: [[-0.9579556492914492 -66] -66.95795564929145]
Test Case: 318 | Input/Output: [[82.91962211912363 -29] 53.91962211912363]
Test Case: 319 | Input/Output: [[-51.584382341850656 -15] -66.58438234185066]
Test Case: 320 | Input/Output: [[70.6858685120614 -46] 24.685868512061404]
Test Case: 321 | Input/Output: [[89.36967716280063 -23] 66.36967716280063]
Test Case: 322 | Input/Output: [[18.43492745188668 -41] -22.56507254811332]
Test Case: 323 | Input/Output: [[0.3323771978381558 6] 6.332377197838156]
Test Case: 324 | Input/Output: [[-33.07855751069381 -61] -94.07855751069381]
Test Case: 325 | Input/Output: [[67.66614602200059 12] 79.66614602200059]
Test Case: 326 | Input/Output: [[-52.29871730800291 -66] -118.2987173080029]
Test Case: 327 | Input/Output: [[46.424061060143146 96] 142.42406106014315]
Test Case: 328 | Input/Output: [[-38.93479875209016 12] -26.93479875209016]
Test Case: 329 | Input/Output: [[-20.845644321014035 -58] -78.84564432101403]
Test Case: 330 | Input/Output: [[12.402783304969844 -38] -25.597216695030156]
Test Case: 331 | Input/Output: [[31.857212846358095 -94] -62.142787153641905]
Test Case: 332 | Input/Output: [[-87.71291877552409 -55] -142.7129187755241]
Test Case: 333 | Input/Output: [[-74.68343871261843 -34] -108.68343871261843]
Test Case: 334 | Input/Output: [[80.73548877616781 -92] -11.264511223832187]
Test Case: 335 | Input/Output: [[92.6936865565298 -2] 90.6936865565298]
Test Case: 336 | Input/Output: [[6.77265166036905 -7] -0.22734833963095014]
Test Case: 337 | Input/Output: [[-88.13502828746145 17] -71.13502828746145]
Test Case: 338 | Input/Output: [[50.394171956368325 86] 136.39417195636833]
Test Case: 339 | Input/Output: [[-77.09323488707025 -48] -125.09323488707025]
Test Case: 340 | Input/Output: [[89.41149848877353 -85] 4.411498488773532]
Test Case: 341 | Input/Output: [[12.735775021024565 -47] -34.264224978975435]
Test Case: 342 | Input/Output: [[-63.86696982786968 -45] -108.86696982786968]
Test Case: 343 | Input/Output: [[-11.996721024724039 -3] -14.996721024724039]
Test Case: 344 | Input/Output: [[87.77338601670581 74] 161.7733860167058]
Test Case: 345 | Input/Output: [[-70.51087876699424 -12] -82.51087876699424]
Test Case: 346 | Input/Output: [[-28.235723160260108 29] 0.7642768397398925]
Test Case: 347 | Input/Output: [[68.18484835370708 -39] 29.184848353707082]
Test Case: 348 | Input/Output: [[56.2820969017593 -13] 43.2820969017593]
Test Case: 349 | Input/Output: [[36.335788014079526 52] 88.33578801407953]
Test Case: 350 | Input/Output: [[-22.400656942482144 74] 51.599343057517856]
Test Case: 351 | Input/Output: [[79.94711996005634 7] 86.94711996005634]
Test Case: 352 | Input/Output: [[-56.25971564342136 -39] -95.25971564342136]
Test Case: 353 | Input/Output: [[14.82337692189644 -90] -75.17662307810356]
Test Case: 354 | Input/Output: [[39.380570779994116 27] 66.38057077999412]
Test Case: 355 | Input/Output: [[-21.21801304601935 -67] -88.21801304601935]
Test Case: 356 | Input/Output: [[-76.5879450417885 2] -74.5879450417885]
Test Case: 357 | Input/Output: [[-99.12943309902926 86] -13.129433099029256]
Test Case: 358 | Input/Output: [[56.019704466279165 85] 141.01970446627917]
Test Case: 359 | Input/Output: [[82.34653055790798 -91] -8.653469442092018]
Test Case: 360 | Input/Output: [[-47.84362975089811 55] 7.15637024910189]
Test Case: 361 | Input/Output: [[72.67767699787393 42] 114.67767699787393]
Test Case: 362 | Input/Output: [[45.05943657746673 -79] -33.94056342253327]
Test Case: 363 | Input/Output: [[-54.138354593845506 -98] -152.13835459384552]
Test Case: 364 | Input/Output: [[-31.584424073194256 7] -24.584424073194256]
Test Case: 365 | Input/Output: [[-38.25282178361604 7] -31.252821783616042]
Test Case: 366 | Input/Output: [[98.00256751348499 56] 154.002567513485]
Test Case: 367 | Input/Output: [[9.822162787317353 95] 104.82216278731735]
Test Case: 368 | Input/Output: [[-32.41751180220034 82] 49.58248819779966]
Test Case: 369 | Input/Output: [[91.41697536509659 -64] 27.41697536509659]
Test Case: 370 | Input/Output: [[-68.19097164586447 58] -10.190971645864465]
Test Case: 371 | Input/Output: [[68.28521366565388 58] 126.28521366565388]
Test Case: 372 | Input/Output: [[17.870847289025832 14] 31.870847289025832]
Test Case: 373 | Input/Output: [[79.89990868535818 1] 80.89990868535818]
Test Case: 374 | Input/Output: [[24.977152030311572 30] 54.97715203031157]
Test Case: 375 | Input/Output: [[-74.15644226612417 55] -19.156442266124174]
Test Case: 376 | Input/Output: [[-73.55895646495914 11] -62.55895646495914]
Test Case: 377 | Input/Output: [[66.53272994510962 90] 156.53272994510962]
Test Case: 378 | Input/Output: [[-14.42936310089597 -20] -34.42936310089597]
Test Case: 379 | Input/Output: [[39.94102551496573 -54] -14.05897448503427]
Test Case: 380 | Input/Output: [[72.45459085993613 3] 75.45459085993613]
Test Case: 381 | Input/Output: [[21.03211936746625 5] 26.03211936746625]
Test Case: 382 | Input/Output: [[85.13904622701972 -15] 70.13904622701972]
Test Case: 383 | Input/Output: [[90.79094120144538 -97] -6.209058798554622]
Test Case: 384 | Input/Output: [[1.3020289006883274 -58] -56.69797109931167]
Test Case: 385 | Input/Output: [[9.954551315511367 -4] 5.954551315511367]
Test Case: 386 | Input/Output: [[39.27979968126249 -56] -16.72020031873751]
Test Case: 387 | Input/Output: [[13.112121618562696 29] 42.112121618562696]
Test Case: 388 | Input/Output: [[82.77990853712788 -1] 81.77990853712788]
Test Case: 389 | Input/Output: [[-47.01475193651594 -98] -145.01475193651595]
Test Case: 390 | Input/Output: [[-85.22354907104177 42] -43.223549071041774]
Test Case: 391 | Input/Output: [[12.15488309066832 32] 44.15488309066832]
Test Case: 392 | Input/Output: [[-90.25779333802375 80] -10.257793338023745]
Test Case: 393 | Input/Output: [[-42.895043706438685 -52] -94.89504370643868]
Test Case: 394 | Input/Output: [[51.565563629193804 -55] -3.4344363708061962]
Test Case: 395 | Input/Output: [[15.205297348563192 -92] -76.79470265143681]
Test Case: 396 | Input/Output: [[-71.95852939921845 27] -44.95852939921845]
Test Case: 397 | Input/Output: [[-96.87747075793223 -78] -174.87747075793223]
Test Case: 398 | Input/Output: [[94.64264908943431 40] 134.64264908943431]
Test Case: 399 | Input/Output: [[-75.61751318023562 90] 14.382486819764381]
Test Case: 400 | Input/Output: [[81.65626745177738 -95] -13.343732548222619]
Test Case: 401 | Input/Output: [[95.08447159072853 51] 146.08447159072853]
Test Case: 402 | Input/Output: [[57.28250301261812 -49] 8.282503012618122]
Test Case: 403 | Input/Output: [[-1.302873654792208 86] 84.69712634520779]
Test Case: 404 | Input/Output: [[23.695467269529985 44] 67.69546726952998]
Test Case: 405 | Input/Output: [[63.69646442872039 89] 152.6964644287204]
Test Case: 406 | Input/Output: [[-98.38141002252483 14] -84.38141002252483]
Test Case: 407 | Input/Output: [[-47.09449383341695 54] 6.905506166583052]
Test Case: 408 | Input/Output: [[57.073489542635656 -46] 11.073489542635656]
Test Case: 409 | Input/Output: [[-37.596947404859904 -81] -118.5969474048599]
Test Case: 410 | Input/Output: [[73.8007753840921 64] 137.8007753840921]
Test Case: 411 | Input/Output: [[31.605025784806315 -41] -9.394974215193685]
Test Case: 412 | Input/Output: [[-8.962670937072616 27] 18.037329062927384]
Test Case: 413 | Input/Output: [[65.5457078464232 -60] 5.545707846423198]
Test Case: 414 | Input/Output: [[31.694860797308934 49] 80.69486079730893]
Test Case: 415 | Input/Output: [[11.204422921321466 34] 45.204422921321466]
Test Case: 416 | Input/Output: [[-76.66588242911044 -91] -167.66588242911044]
Test Case: 417 | Input/Output: [[-83.6918371223871 -96] -179.69183712238708]
Test Case: 418 | Input/Output: [[62.92653774055853 57] 119.92653774055853]
Test Case: 419 | Input/Output: [[-69.22353188184518 -59] -128.2235318818452]
Test Case: 420 | Input/Output: [[-0.5199109912022095 -49] -49.51991099120221]
Test Case: 421 | Input/Output: [[76.26210238838618 -26] 50.26210238838618]
Test Case: 422 | Input/Output: [[21.877753952421926 -87] -65.12224604757807]
Test Case: 423 | Input/Output: [[-93.33823497275988 -80] -173.3382349727599]
Test Case: 424 | Input/Output: [[-27.921149899215436 -18] -45.921149899215436]
Test Case: 425 | Input/Output: [[-4.296740659812556 69] 64.70325934018744]
Test Case: 426 | Input/Output: [[60.56207065133839 -3] 57.56207065133839]
Test Case: 427 | Input/Output: [[98.13434069220901 11] 109.13434069220901]
Test Case: 428 | Input/Output: [[-86.8188054775687 -23] -109.8188054775687]
Test Case: 429 | Input/Output: [[-15.004808941429616 -26] -41.004808941429616]
Test Case: 430 | Input/Output: [[-54.68641382602839 -41] -95.6864138260284]
Test Case: 431 | Input/Output: [[-95.50354016365783 46] -49.50354016365783]
Test Case: 432 | Input/Output: [[59.38184111862711 81] 140.3818411186271]
Test Case: 433 | Input/Output: [[98.79061885256982 20] 118.79061885256982]
Test Case: 434 | Input/Output: [[38.86546032292978 -39] -0.1345396770702223]
Test Case: 435 | Input/Output: [[-65.75964307067805 91] 25.240356929321948]
Test Case: 436 | Input/Output: [[8.904462837560118 -76] -67.09553716243988]
Test Case: 437 | Input/Output: [[74.49103848163173 88] 162.49103848163173]
Test Case: 438 | Input/Output: [[-45.99321142846655 -44] -89.99321142846655]
Test Case: 439 | Input/Output: [[-12.395217523555175 -27] -39.395217523555175]
Test Case: 440 | Input/Output: [[80.14140562798352 -92] -11.858594372016483]
Test Case: 441 | Input/Output: [[-76.39149692984608 -53] -129.39149692984608]
Test Case: 442 | Input/Output: [[32.49559959958404 -23] 9.49559959958404]
Test Case: 443 | Input/Output: [[37.97783646968921 -57] -19.02216353031079]
Test Case: 444 | Input/Output: [[-48.493853039027336 -72] -120.49385303902733]
Test Case: 445 | Input/Output: [[73.8798522283972 -82] -8.120147771602802]
Test Case: 446 | Input/Output: [[86.30816026142568 4] 90.30816026142568]
Test Case: 447 | Input/Output: [[-75.44604561253847 56] -19.44604561253847]
Test Case: 448 | Input/Output: [[12.09539269804776 78] 90.09539269804776]
Test Case: 449 | Input/Output: [[-58.8076094706786 60] 1.1923905293214005]
Test Case: 450 | Input/Output: [[-48.10315804033279 -78] -126.10315804033279]
Test Case: 451 | Input/Output: [[51.22282233167914 -67] -15.77717766832086]
Test Case: 452 | Input/Output: [[41.20726382870396 -94] -52.79273617129604]
Test Case: 453 | Input/Output: [[47.67154252281108 16] 63.67154252281108]
Test Case: 454 | Input/Output: [[11.545654097250562 -84] -72.45434590274944]
Test Case: 455 | Input/Output: [[-16.859855263394678 8] -8.859855263394678]
Test Case: 456 | Input/Output: [[-54.89432950660908 95] 40.10567049339092]
Test Case: 457 | Input/Output: [[56.17476816721887 -21] 35.17476816721887]
Test Case: 458 | Input/Output: [[75.24348349869402 15] 90.24348349869402]
Test Case: 459 | Input/Output: [[69.13307255715031 -61] 8.133072557150314]
Test Case: 460 | Input/Output: [[-26.888615977204736 62] 35.111384022795264]
Test Case: 461 | Input/Output: [[95.03938683345316 -82] 13.039386833453165]
Test Case: 462 | Input/Output: [[16.931548803401625 43] 59.931548803401625]
Test Case: 463 | Input/Output: [[50.01732562440148 -63] -12.98267437559852]
Test Case: 464 | Input/Output: [[69.08117347300805 -63] 6.08117347300805]
Test Case: 465 | Input/Output: [[-91.1555614767048 -56] -147.1555614767048]
Test Case: 466 | Input/Output: [[-80.56023700734592 -99] -179.5602370073459]
Test Case: 467 | Input/Output: [[-38.928668684410006 50] 11.071331315589994]
Test Case: 468 | Input/Output: [[-88.95468399304517 74] -14.954683993045165]
Test Case: 469 | Input/Output: [[58.38027263015121 9] 67.38027263015121]
Test Case: 470 | Input/Output: [[-48.493543483635726 -11] -59.493543483635726]
Test Case: 471 | Input/Output: [[-71.30929974019303 -62] -133.309299740193]
Test Case: 472 | Input/Output: [[-11.30292822378567 -30] -41.30292822378567]
Test Case: 473 | Input/Output: [[-8.948944166853394 56] 47.051055833146606]
Test Case: 474 | Input/Output: [[77.59350453823834 -42] 35.593504538238335]
Test Case: 475 | Input/Output: [[-6.244085660025817 -76] -82.24408566002582]
Test Case: 476 | Input/Output: [[57.630914043394625 16] 73.63091404339463]
Test Case: 477 | Input/Output: [[99.06784590300208 -43] 56.06784590300208]
Test Case: 478 | Input/Output: [[-93.56968963701998 12] -81.56968963701998]
Test Case: 479 | Input/Output: [[2.5576682844526744 56] 58.557668284452674]
Test Case: 480 | Input/Output: [[-55.0558339601946 -45] -100.0558339601946]
Test Case: 481 | Input/Output: [[9.418781593838403 -3] 6.418781593838403]
Test Case: 482 | Input/Output: [[-40.80766478200077 7] -33.80766478200077]
Test Case: 483 | Input/Output: [[-25.446189776778198 61] 35.5538102232218]
Test Case: 484 | Input/Output: [[57.74998437884932 -39] 18.74998437884932]
Test Case: 485 | Input/Output: [[30.818852819604956 37] 67.81885281960496]
Test Case: 486 | Input/Output: [[85.21140272589366 36] 121.21140272589366]
Test Case: 487 | Input/Output: [[-35.40347236186328 -48] -83.40347236186328]
Test Case: 488 | Input/Output: [[25.93334515741239 -32] -6.06665484258761]
Test Case: 489 | Input/Output: [[35.21255253023301 -67] -31.787447469766988]
Test Case: 490 | Input/Output: [[66.97978629159826 -42] 24.97978629159826]
Test Case: 491 | Input/Output: [[-18.253765991968862 -44] -62.25376599196886]
Test Case: 492 | Input/Output: [[47.457484232048955 69] 116.45748423204896]
Test Case: 493 | Input/Output: [[-71.94012180259065 -85] -156.94012180259065]
Test Case: 494 | Input/Output: [[73.32710151097601 -3] 70.32710151097601]
Test Case: 495 | Input/Output: [[2.9184555523371642 43] 45.918455552337164]
Test Case: 496 | Input/Output: [[65.95500939699107 82] 147.95500939699107]
Test Case: 497 | Input/Output: [[95.07000740170301 21] 116.07000740170301]
Test Case: 498 | Input/Output: [[-63.912614091854095 -63] -126.9126140918541]
Test Case: 499 | Input/Output: [[-91.73749962960292 46] -45.73749962960292]
Test Case: 500 | Input/Output: [[-17.16289807246403 -8] -25.16289807246403]
Test Case: 501 | Input/Output: [[63.9972337352298 86] 149.9972337352298]
Test Case: 502 | Input/Output: [[22.690262275951184 -53] -30.309737724048816]
Test Case: 503 | Input/Output: [[4.784884088333158 -8] -3.2151159116668424]
Test Case: 504 | Input/Output: [[81.97858293044303 24] 105.97858293044303]
Test Case: 505 | Input/Output: [[67.39885136498091 67] 134.3988513649809]
Test Case: 506 | Input/Output: [[-43.758999322560356 -70] -113.75899932256036]
Test Case: 507 | Input/Output: [[84.34684795841281 83] 167.3468479584128]
Test Case: 508 | Input/Output: [[-5.849654071615149 57] 51.15034592838485]
Test Case: 509 | Input/Output: [[-32.12853721843739 33] 0.871462781562613]
Test Case: 510 | Input/Output: [[-71.26293112727231 -20] -91.26293112727231]
Test Case: 511 | Input/Output: [[58.507194356382 71] 129.507194356382]
Test Case: 512 | Input/Output: [[-33.363556627548036 21] -12.363556627548036]
Test Case: 513 | Input/Output: [[-21.40938372987044 29] 7.5906162701295585]
Test Case: 514 | Input/Output: [[4.859955534836004 -49] -44.140044465163996]
Test Case: 515 | Input/Output: [[41.015336351535296 65] 106.0153363515353]
Test Case: 516 | Input/Output: [[19.561324339582313 -94] -74.43867566041769]
Test Case: 517 | Input/Output: [[69.51298081438827 -97] -27.48701918561173]
Test Case: 518 | Input/Output: [[-87.07190681286052 17] -70.07190681286052]
Test Case: 519 | Input/Output: [[68.82244527898533 54] 122.82244527898533]
Test Case: 520 | Input/Output: [[-57.607801347846 39] -18.607801347846]
Test Case: 521 | Input/Output: [[-72.09493484501283 -37] -109.09493484501283]
Test Case: 522 | Input/Output: [[59.35974835363666 -93] -33.64025164636334]
Test Case: 523 | Input/Output: [[5.977050881621636 18] 23.977050881621636]
Test Case: 524 | Input/Output: [[-32.66057103680194 -9] -41.66057103680194]
Test Case: 525 | Input/Output: [[-51.17396578386888 -28] -79.17396578386888]
Test Case: 526 | Input/Output: [[-72.86142463551244 2] -70.86142463551244]
Test Case: 527 | Input/Output: [[87.53854601209704 -51] 36.538546012097044]
Test Case: 528 | Input/Output: [[-12.742126543195326 -63] -75.74212654319533]
Test Case: 529 | Input/Output: [[93.71335595930131 -34] 59.71335595930131]
Test Case: 530 | Input/Output: [[53.22392290109249 90] 143.2239229010925]
Test Case: 531 | Input/Output: [[1.4955688304775947 42] 43.495568830477595]
Test Case: 532 | Input/Output: [[59.9008385753817 -77] -17.099161424618302]
Test Case: 533 | Input/Output: [[-72.91695631590112 -10] -82.91695631590112]
Test Case: 534 | Input/Output: [[-22.113515038708528 34] 11.886484961291472]
Test Case: 535 | Input/Output: [[-37.62885386120898 66] 28.37114613879102]
Test Case: 536 | Input/Output: [[15.756495511202331 33] 48.75649551120233]
Test Case: 537 | Input/Output: [[-22.83807648863558 -26] -48.83807648863558]
Test Case: 538 | Input/Output: [[3.257921449979378 68] 71.25792144997938]
Test Case: 539 | Input/Output: [[44.18450339028561 -79] -34.81549660971439]
Test Case: 540 | Input/Output: [[59.262888135242264 -22] 37.262888135242264]
Test Case: 541 | Input/Output: [[77.98223363980827 -57] 20.98223363980827]
Test Case: 542 | Input/Output: [[-29.634191841592212 -18] -47.63419184159221]
Test Case: 543 | Input/Output: [[-67.90563695481117 -97] -164.90563695481117]
Test Case: 544 | Input/Output: [[-50.399673567566026 25] -25.399673567566026]
Test Case: 545 | Input/Output: [[81.52708766400804 96] 177.52708766400804]
Test Case: 546 | Input/Output: [[-54.88973343824104 -18] -72.88973343824104]
Test Case: 547 | Input/Output: [[-45.099569243047256 -47] -92.09956924304726]
Test Case: 548 | Input/Output: [[30.9589685156501 -21] 9.958968515650099]
Test Case: 549 | Input/Output: [[-6.618636736842646 -55] -61.618636736842646]
Test Case: 550 | Input/Output: [[-56.494818799480015 -13] -69.49481879948002]
Test Case: 551 | Input/Output: [[-55.18149078335277 -6] -61.18149078335277]
Test Case: 552 | Input/Output: [[25.205244925285967 73] 98.20524492528597]
Test Case: 553 | Input/Output: [[-68.21114436264347 75] 6.788855637356534]
Test Case: 554 | Input/Output: [[-16.602055696245046 63] 46.397944303754954]
Test Case: 555 | Input/Output: [[76.53604483016707 80] 156.53604483016707]
Test Case: 556 | Input/Output: [[-22.484936212582895 -50] -72.4849362125829]
Test Case: 557 | Input/Output: [[-1.375730712396944 -68] -69.37573071239694]
Test Case: 558 | Input/Output: [[-97.35573963154192 -47] -144.35573963154192]
Test Case: 559 | Input/Output: [[72.43228300476227 -6] 66.43228300476227]
Test Case: 560 | Input/Output: [[22.886508226801382 -5] 17.886508226801382]
Test Case: 561 | Input/Output: [[-45.68550644270526 -27] -72.68550644270526]
Test Case: 562 | Input/Output: [[74.74623352495772 -90] -15.253766475042283]
Test Case: 563 | Input/Output: [[-28.371587104691898 -93] -121.3715871046919]
Test Case: 564 | Input/Output: [[86.300354982528 -38] 48.300354982528006]
Test Case: 565 | Input/Output: [[-72.76452977890585 -76] -148.76452977890585]
Test Case: 566 | Input/Output: [[-59.72660997074155 72] 12.27339002925845]
Test Case: 567 | Input/Output: [[-91.67984054469642 71] -20.679840544696418]
Test Case: 568 | Input/Output: [[88.5568365688211 -9] 79.5568365688211]
Test Case: 569 | Input/Output: [[-16.24383062225607 -52] -68.24383062225607]
Test Case: 570 | Input/Output: [[-3.5702001028794115 60] 56.42979989712059]
Test Case: 571 | Input/Output: [[-23.24712056548448 -99] -122.24712056548448]
Test Case: 572 | Input/Output: [[69.00221483507627 -91] -21.997785164923727]
Test Case: 573 | Input/Output: [[7.95105106693768 -52] -44.04894893306232]
Test Case: 574 | Input/Output: [[27.490846013228108 8] 35.49084601322811]
Test Case: 575 | Input/Output: [[-87.68676711735151 90] 2.3132328826484923]
Test Case: 576 | Input/Output: [[43.59179177833602 11] 54.59179177833602]
Test Case: 577 | Input/Output: [[73.97468940908155 -84] -10.025310590918451]
Test Case: 578 | Input/Output: [[-87.39623857114205 84] -3.3962385711420495]
Test Case: 579 | Input/Output: [[12.702693635747764 -66] -53.297306364252236]
Test Case: 580 | Input/Output: [[75.14978712385332 96] 171.14978712385332]
Test Case: 581 | Input/Output: [[5.995227614019825 31] 36.995227614019825]
Test Case: 582 | Input/Output: [[13.76119940186193 51] 64.76119940186193]
Test Case: 583 | Input/Output: [[-37.0903356136082 27] -10.090335613608197]
Test Case: 584 | Input/Output: [[-31.693440667960914 -27] -58.693440667960914]
Test Case: 585 | Input/Output: [[-58.59088717807121 -59] -117.59088717807121]
Test Case: 586 | Input/Output: [[-70.31610575002514 -91] -161.31610575002514]
Test Case: 587 | Input/Output: [[-26.687326691574782 16] -10.687326691574782]
Test Case: 588 | Input/Output: [[-55.79145435778028 100] 44.20854564221972]
Test Case: 589 | Input/Output: [[14.203003420756204 -11] 3.203003420756204]
Test Case: 590 | Input/Output: [[-71.18084948223147 -22] -93.18084948223147]
Test Case: 591 | Input/Output: [[70.07537678688499 13] 83.07537678688499]
Test Case: 592 | Input/Output: [[46.13784191809273 -11] 35.13784191809273]
Test Case: 593 | Input/Output: [[42.108746957619246 -87] -44.891253042380754]
Test Case: 594 | Input/Output: [[72.91255920126204 -26] 46.91255920126204]
Test Case: 595 | Input/Output: [[72.10142135990273 -48] 24.10142135990273]
Test Case: 596 | Input/Output: [[49.97566489467485 86] 135.97566489467485]
Test Case: 597 | Input/Output: [[-44.3272707208612 71] 26.6727292791388]
Test Case: 598 | Input/Output: [[-19.195231892278912 -46] -65.19523189227891]
Test Case: 599 | Input/Output: [[-51.49331092618108 60] 8.506689073818919]
Test Case: 600 | Input/Output: [[-57.858953720706864 20] -37.858953720706864]
Test Case: 601 | Input/Output: [[68.57743182133481 -75] -6.422568178665188]
Test Case: 602 | Input/Output: [[-37.27794267897806 -8] -45.27794267897806]
Test Case: 603 | Input/Output: [[45.75035611700403 90] 135.75035611700403]
Test Case: 604 | Input/Output: [[-91.24754734484458 -3] -94.24754734484458]
Test Case: 605 | Input/Output: [[-13.959156727674937 -100] -113.95915672767494]
Test Case: 606 | Input/Output: [[-69.00929558965828 92] 22.99070441034172]
Test Case: 607 | Input/Output: [[75.17229460749692 -25] 50.17229460749692]
Test Case: 608 | Input/Output: [[90.74674093278122 -34] 56.74674093278122]
Test Case: 609 | Input/Output: [[32.234660519945294 -68] -35.765339480054706]
Test Case: 610 | Input/Output: [[-60.94917069661161 -25] -85.94917069661162]
Test Case: 611 | Input/Output: [[50.411061719526685 97] 147.41106171952669]
Test Case: 612 | Input/Output: [[33.94989955200768 -34] -0.05010044799232105]
Test Case: 613 | Input/Output: [[-88.12137429508739 -5] -93.12137429508739]
Test Case: 614 | Input/Output: [[5.763057158633615 -9] -3.2369428413663854]
Test Case: 615 | Input/Output: [[-73.8145319721188 -45] -118.8145319721188]
Test Case: 616 | Input/Output: [[-65.8719083406101 -52] -117.8719083406101]
Test Case: 617 | Input/Output: [[-12.515902870264853 6] -6.515902870264853]
Test Case: 618 | Input/Output: [[-79.62788166620311 -60] -139.6278816662031]
Test Case: 619 | Input/Output: [[-10.877660657534932 29] 18.122339342465068]
Test Case: 620 | Input/Output: [[76.59032076501688 -69] 7.590320765016884]
Test Case: 621 | Input/Output: [[-50.622534246852084 -39] -89.62253424685208]
Test Case: 622 | Input/Output: [[-79.49621741992847 -55] -134.49621741992848]
Test Case: 623 | Input/Output: [[-12.074434259566573 -44] -56.07443425956657]
Test Case: 624 | Input/Output: [[-31.36943917918731 -93] -124.36943917918731]
Test Case: 625 | Input/Output: [[-2.226946784484184 83] 80.77305321551582]
Test Case: 626 | Input/Output: [[-78.59187308072306 -6] -84.59187308072306]
Test Case: 627 | Input/Output: [[-13.831751044454023 -44] -57.83175104445402]
Test Case: 628 | Input/Output: [[-11.073458250674008 42] 30.92654174932599]
Test Case: 629 | Input/Output: [[86.22607854898331 12] 98.22607854898331]
Test Case: 630 | Input/Output: [[95.95373689125626 20] 115.95373689125626]
Test Case: 631 | Input/Output: [[98.58402077550795 -17] 81.58402077550795]
Test Case: 632 | Input/Output: [[68.9414290624077 32] 100.9414290624077]
Test Case: 633 | Input/Output: [[46.91995059432179 20] 66.91995059432179]
Test Case: 634 | Input/Output: [[57.46649814494478 64] 121.46649814494478]
Test Case: 635 | Input/Output: [[0.1301097111702063 -94] -93.8698902888298]
Test Case: 636 | Input/Output: [[40.23517797530556 -48] -7.764822024694439]
Test Case: 637 | Input/Output: [[29.408429303563707 -28] 1.4084293035637074]
Test Case: 638 | Input/Output: [[84.2381077571921 -74] 10.238107757192097]
Test Case: 639 | Input/Output: [[91.99839001132361 1] 92.99839001132361]
Test Case: 640 | Input/Output: [[-12.295311064092829 42] 29.70468893590717]
Test Case: 641 | Input/Output: [[-55.06923806363044 28] -27.069238063630443]
Test Case: 642 | Input/Output: [[-28.716489528027893 72] 43.28351047197211]
Test Case: 643 | Input/Output: [[56.13993393887233 -35] 21.139933938872332]
Test Case: 644 | Input/Output: [[85.60414594677997 59] 144.60414594677997]
Test Case: 645 | Input/Output: [[78.44773309589357 -2] 76.44773309589357]
Test Case: 646 | Input/Output: [[-38.48611115733438 71] 32.51388884266562]
Test Case: 647 | Input/Output: [[81.52833191805263 -10] 71.52833191805263]
Test Case: 648 | Input/Output: [[78.18221853647972 -6] 72.18221853647972]
Test Case: 649 | Input/Output: [[57.589677877624155 -32] 25.589677877624155]
Test Case: 650 | Input/Output: [[36.08849742265829 -84] -47.91150257734171]
Test Case: 651 | Input/Output: [[-21.9760905294289 20] -1.9760905294289017]
Test Case: 652 | Input/Output: [[46.31524826151042 -34] 12.315248261510419]
Test Case: 653 | Input/Output: [[-33.27436529418783 -88] -121.27436529418783]
Test Case: 654 | Input/Output: [[-83.5440676964401 31] -52.544067696440095]
Test Case: 655 | Input/Output: [[79.29428103444673 -96] -16.705718965553274]
Test Case: 656 | Input/Output: [[-40.28202815028061 31] -9.28202815028061]
Test Case: 657 | Input/Output: [[-3.6096069650250087 -89] -92.60960696502501]
Test Case: 658 | Input/Output: [[93.87232965443363 -39] 54.87232965443363]
Test Case: 659 | Input/Output: [[58.15922087089069 11] 69.15922087089069]
Test Case: 660 | Input/Output: [[-82.66669453296412 27] -55.666694532964115]
Test Case: 661 | Input/Output: [[26.937088393696996 53] 79.937088393697]
Test Case: 662 | Input/Output: [[-60.83451177604498 -58] -118.83451177604498]
Test Case: 663 | Input/Output: [[61.86220450091838 -94] -32.13779549908162]
Test Case: 664 | Input/Output: [[-85.2922628349728 -63] -148.2922628349728]
Test Case: 665 | Input/Output: [[2.6957264599199107 -35] -32.30427354008009]
Test Case: 666 | Input/Output: [[87.92235764563478 -6] 81.92235764563478]
Test Case: 667 | Input/Output: [[12.397428237943615 -47] -34.602571762056385]
Test Case: 668 | Input/Output: [[-12.295642574426651 -68] -80.29564257442665]
Test Case: 669 | Input/Output: [[-83.34772907791417 -44] -127.34772907791417]
Test Case: 670 | Input/Output: [[-48.14279715802181 -12] -60.14279715802181]
Test Case: 671 | Input/Output: [[41.483228765974644 64] 105.48322876597464]
Test Case: 672 | Input/Output: [[35.17988842851105 -43] -7.820111571488951]
Test Case: 673 | Input/Output: [[41.45076583888002 -76] -34.54923416111998]
Test Case: 674 | Input/Output: [[-9.338748445508898 -2] -11.338748445508898]
Test Case: 675 | Input/Output: [[34.558731252007874 45] 79.55873125200787]
Test Case: 676 | Input/Output: [[-32.89670295997 -71] -103.89670295997]
Test Case: 677 | Input/Output: [[-82.04606187987267 -66] -148.04606187987267]
Test Case: 678 | Input/Output: [[-53.725446088506935 77] 23.274553911493065]
Test Case: 679 | Input/Output: [[-90.56860654440678 -74] -164.56860654440678]
Test Case: 680 | Input/Output: [[1.780300808406679 -92] -90.21969919159332]
Test Case: 681 | Input/Output: [[-9.677101915642666 -73] -82.67710191564267]
Test Case: 682 | Input/Output: [[-31.769645449483903 -58] -89.7696454494839]
Test Case: 683 | Input/Output: [[-84.52591499426836 36] -48.52591499426836]
Test Case: 684 | Input/Output: [[24.37265568693651 -44] -19.62734431306349]
Test Case: 685 | Input/Output: [[89.22286934773103 -30] 59.222869347731034]
Test Case: 686 | Input/Output: [[9.197092367466553 32] 41.19709236746655]
Test Case: 687 | Input/Output: [[-49.469766682591285 -93] -142.46976668259128]
Test Case: 688 | Input/Output: [[-29.581359577717265 -93] -122.58135957771727]
Test Case: 689 | Input/Output: [[47.36651163976117 42] 89.36651163976117]
Test Case: 690 | Input/Output: [[-54.36657944404861 53] -1.366579444048611]
Test Case: 691 | Input/Output: [[-34.72312087059983 41] 6.276879129400172]
Test Case: 692 | Input/Output: [[67.6954557188314 76] 143.6954557188314]
Test Case: 693 | Input/Output: [[-43.86613633290206 -32] -75.86613633290206]
Test Case: 694 | Input/Output: [[-50.927073426374456 -70] -120.92707342637445]
Test Case: 695 | Input/Output: [[77.94718863618084 96] 173.94718863618084]
Test Case: 696 | Input/Output: [[90.2064594260909 2] 92.2064594260909]
Test Case: 697 | Input/Output: [[-52.558464753116205 67] 14.441535246883795]
Test Case: 698 | Input/Output: [[-90.21341164349595 90] -0.2134116434959452]
Test Case: 699 | Input/Output: [[30.70288275651211 -53] -22.29711724348789]
Test Case: 700 | Input/Output: [[-5.686806482965551 -20] -25.68680648296555]
Test Case: 701 | Input/Output: [[48.05500181800633 -37] 11.055001818006332]
Test Case: 702 | Input/Output: [[-6.632017299116953 44] 37.36798270088305]
Test Case: 703 | Input/Output: [[55.06659172779612 -35] 20.066591727796123]
Test Case: 704 | Input/Output: [[55.46048663800423 90] 145.46048663800423]
Test Case: 705 | Input/Output: [[68.93470818393806 -25] 43.934708183938056]
Test Case: 706 | Input/Output: [[44.662390438019685 69] 113.66239043801968]
Test Case: 707 | Input/Output: [[-80.89964354726476 -31] -111.89964354726476]
Test Case: 708 | Input/Output: [[-90.6550354153733 5] -85.6550354153733]
Test Case: 709 | Input/Output: [[-55.09873365985991 22] -33.09873365985991]
Test Case: 710 | Input/Output: [[-55.97961946203516 -15] -70.97961946203516]
Test Case: 711 | Input/Output: [[-13.2802438825411 84] 70.7197561174589]
Test Case: 712 | Input/Output: [[-33.42557218164259 -40] -73.4255721816426]
Test Case: 713 | Input/Output: [[47.933425678369815 69] 116.93342567836982]
Test Case: 714 | Input/Output: [[81.62547484934461 -42] 39.62547484934461]
Test Case: 715 | Input/Output: [[-32.36105340892372 -17] -49.36105340892372]
Test Case: 716 | Input/Output: [[-74.39065975716572 97] 22.60934024283428]
Test Case: 717 | Input/Output: [[34.13620313141544 72] 106.13620313141544]
Test Case: 718 | Input/Output: [[-63.42206930341108 99] 35.57793069658892]
Test Case: 719 | Input/Output: [[57.97568153606602 7] 64.97568153606602]
Test Case: 720 | Input/Output: [[67.53168464224822 -21] 46.53168464224822]
Test Case: 721 | Input/Output: [[-37.98018444366815 -42] -79.98018444366815]
Test Case: 722 | Input/Output: [[41.28235681746841 -90] -48.71764318253159]
Test Case: 723 | Input/Output: [[-27.836672395161983 24] -3.836672395161983]
Test Case: 724 | Input/Output: [[15.601414597955895 -76] -60.398585402044105]
Test Case: 725 | Input/Output: [[94.50858111937055 8] 102.50858111937055]
Test Case: 726 | Input/Output: [[-95.35287075853532 52] -43.35287075853532]
Test Case: 727 | Input/Output: [[33.73752764068638 57] 90.73752764068638]
Test Case: 728 | Input/Output: [[-3.446991432001596 -84] -87.4469914320016]
Test Case: 729 | Input/Output: [[61.77429564838829 -1] 60.77429564838829]
Test Case: 730 | Input/Output: [[-88.15555972196647 -60] -148.15555972196648]
Test Case: 731 | Input/Output: [[-75.6014821113929 46] -29.601482111392897]
Test Case: 732 | Input/Output: [[-27.258987535901724 -29] -56.258987535901724]
Test Case: 733 | Input/Output: [[-49.02876805315781 32] -17.028768053157812]
Test Case: 734 | Input/Output: [[-70.77261613318493 -76] -146.77261613318493]
Test Case: 735 | Input/Output: [[12.95521864099807 64] 76.95521864099807]
Test Case: 736 | Input/Output: [[-51.09492882311819 63] 11.905071176881812]
Test Case: 737 | Input/Output: [[-75.64229371756537 -24] -99.64229371756537]
Test Case: 738 | Input/Output: [[73.70452543106353 65] 138.70452543106353]
Test Case: 739 | Input/Output: [[14.851517817428814 54] 68.85151781742881]
Test Case: 740 | Input/Output: [[34.07414334112781 -12] 22.074143341127808]
Test Case: 741 | Input/Output: [[68.33492533070728 -53] 15.334925330707279]
Test Case: 742 | Input/Output: [[-22.71448931456328 31] 8.28551068543672]
Test Case: 743 | Input/Output: [[-89.99097233236506 90] 0.009027667634939007]
Test Case: 744 | Input/Output: [[94.38621704592904 -44] 50.386217045929044]
Test Case: 745 | Input/Output: [[95.27802178918222 -15] 80.27802178918222]
Test Case: 746 | Input/Output: [[-78.08171447632057 69] -9.08171447632057]
Test Case: 747 | Input/Output: [[-33.45870905205868 48] 14.54129094794132]
Test Case: 748 | Input/Output: [[68.19835611335944 -68] 0.1983561133594378]
Test Case: 749 | Input/Output: [[-50.147548935903366 30] -20.147548935903366]
Test Case: 750 | Input/Output: [[79.70475288909097 75] 154.70475288909097]
Test Case: 751 | Input/Output: [[9.25707087370671 -43] -33.74292912629329]
Test Case: 752 | Input/Output: [[-28.170395664637013 17] -11.170395664637013]
Test Case: 753 | Input/Output: [[98.54515093304505 -49] 49.54515093304505]
Test Case: 754 | Input/Output: [[-98.91615821878132 95] -3.9161582187813195]
Test Case: 755 | Input/Output: [[62.505577638556076 88] 150.50557763855608]
Test Case: 756 | Input/Output: [[-26.572945054460178 77] 50.42705494553982]
Test Case: 757 | Input/Output: [[-91.31016093309631 -78] -169.3101609330963]
Test Case: 758 | Input/Output: [[53.170566589474504 -85] -31.829433410525496]
Test Case: 759 | Input/Output: [[78.21348119219502 0] 78.21348119219502]
Test Case: 760 | Input/Output: [[-89.39946145404947 41] -48.39946145404947]
Test Case: 761 | Input/Output: [[-94.38706559065653 47] -47.38706559065653]
Test Case: 762 | Input/Output: [[-95.02282859870847 2] -93.02282859870847]
Test Case: 763 | Input/Output: [[-1.7078156497750427 49] 47.29218435022496]
Test Case: 764 | Input/Output: [[33.943794862042665 28] 61.943794862042665]
Test Case: 765 | Input/Output: [[-47.31174185598994 -76] -123.31174185598994]
Test Case: 766 | Input/Output: [[-34.07962512095868 -97] -131.07962512095867]
Test Case: 767 | Input/Output: [[29.726255387411925 26] 55.726255387411925]
Test Case: 768 | Input/Output: [[-24.421880269623443 -53] -77.42188026962344]
Test Case: 769 | Input/Output: [[-48.739261755966254 -53] -101.73926175596625]
Test Case: 770 | Input/Output: [[53.965175149909356 4] 57.965175149909356]
Test Case: 771 | Input/Output: [[54.80420771591068 86] 140.80420771591068]
Test Case: 772 | Input/Output: [[48.44526205707504 -33] 15.445262057075041]
Test Case: 773 | Input/Output: [[-61.23393623660189 -91] -152.2339362366019]
Test Case: 774 | Input/Output: [[53.04213496631124 -59] -5.957865033688762]
Test Case: 775 | Input/Output: [[59.57764360416692 41] 100.57764360416692]
Test Case: 776 | Input/Output: [[-50.765693726569495 -4] -54.765693726569495]
Test Case: 777 | Input/Output: [[28.2517935265287 3] 31.2517935265287]
Test Case: 778 | Input/Output: [[73.80053576199623 86] 159.80053576199623]
Test Case: 779 | Input/Output: [[48.853134193554695 19] 67.8531341935547]
Test Case: 780 | Input/Output: [[-29.602525867639457 77] 47.39747413236054]
Test Case: 781 | Input/Output: [[73.59466124237645 27] 100.59466124237645]
Test Case: 782 | Input/Output: [[31.96480319785948 4] 35.96480319785948]
Test Case: 783 | Input/Output: [[-81.58155008359935 86] 4.418449916400647]
Test Case: 784 | Input/Output: [[6.308202470690972 64] 70.30820247069097]
Test Case: 785 | Input/Output: [[24.19797636588524 78] 102.19797636588524]
Test Case: 786 | Input/Output: [[-43.564285793596326 18] -25.564285793596326]
Test Case: 787 | Input/Output: [[30.89533688463385 -79] -48.10466311536615]
Test Case: 788 | Input/Output: [[83.6093664963644 -1] 82.6093664963644]
Test Case: 789 | Input/Output: [[21.405555070417265 -54] -32.594444929582735]
Test Case: 790 | Input/Output: [[13.750198709974185 47] 60.750198709974185]
Test Case: 791 | Input/Output: [[-13.118435231608899 55] 41.8815647683911]
Test Case: 792 | Input/Output: [[31.641291763518552 -65] -33.35870823648145]
Test Case: 793 | Input/Output: [[-90.99575505317333 -62] -152.99575505317333]
Test Case: 794 | Input/Output: [[-24.152450885574694 52] 27.847549114425306]
Test Case: 795 | Input/Output: [[-75.39039234651237 54] -21.39039234651237]
Test Case: 796 | Input/Output: [[42.967880105085726 18] 60.967880105085726]
Test Case: 797 | Input/Output: [[35.79080573205911 93] 128.7908057320591]
Test Case: 798 | Input/Output: [[-80.79438579029785 82] 1.2056142097021478]
Test Case: 799 | Input/Output: [[-3.9424978671606823 59] 55.05750213283932]
Test Case: 800 | Input/Output: [[-26.976850976494248 41] 14.023149023505752]
Test Case: 801 | Input/Output: [[-14.346720990509795 -79] -93.3467209905098]
Test Case: 802 | Input/Output: [[75.79275424804484 -71] 4.792754248044844]
Test Case: 803 | Input/Output: [[-71.07080288916374 33] -38.070802889163744]
Test Case: 804 | Input/Output: [[68.71298184627733 -83] -14.28701815372267]
Test Case: 805 | Input/Output: [[-40.73181628698694 84] 43.26818371301306]
Test Case: 806 | Input/Output: [[91.72056863556404 -74] 17.720568635564035]
Test Case: 807 | Input/Output: [[37.09867463023903 -43] -5.901325369760968]
Test Case: 808 | Input/Output: [[28.383214320796696 45] 73.3832143207967]
Test Case: 809 | Input/Output: [[-26.400764513051072 -60] -86.40076451305107]
Test Case: 810 | Input/Output: [[83.50150024566187 97] 180.50150024566187]
Test Case: 811 | Input/Output: [[50.33667068268244 -91] -40.66332931731756]
Test Case: 812 | Input/Output: [[66.50416693950638 40] 106.50416693950638]
Test Case: 813 | Input/Output: [[-35.49146334000784 -1] -36.49146334000784]
Test Case: 814 | Input/Output: [[-78.92158542936059 -43] -121.92158542936059]
Test Case: 815 | Input/Output: [[-64.30199472343467 -42] -106.30199472343467]
Test Case: 816 | Input/Output: [[60.86095858482099 100] 160.860958584821]
Test Case: 817 | Input/Output: [[-93.05075146103823 68] -25.05075146103823]
Test Case: 818 | Input/Output: [[59.75451379191267 74] 133.75451379191267]
Test Case: 819 | Input/Output: [[13.14387746643908 -88] -74.85612253356092]
Test Case: 820 | Input/Output: [[-49.98008077968969 -71] -120.9800807796897]
Test Case: 821 | Input/Output: [[-42.5724979888346 -88] -130.57249798883458]
Test Case: 822 | Input/Output: [[21.286324755662605 -90] -68.7136752443374]
Test Case: 823 | Input/Output: [[-46.71086369938926 -84] -130.71086369938925]
Test Case: 824 | Input/Output: [[-25.132077707942983 -80] -105.13207770794298]
Test Case: 825 | Input/Output: [[-2.5882316504862075 -40] -42.58823165048621]
Test Case: 826 | Input/Output: [[23.320156159285972 42] 65.32015615928597]
Test Case: 827 | Input/Output: [[97.71403858548206 -16] 81.71403858548206]
Test Case: 828 | Input/Output: [[45.229878180139565 -62] -16.770121819860435]
Test Case: 829 | Input/Output: [[-54.496163751110124 90] 35.503836248889876]
Test Case: 830 | Input/Output: [[-25.52430359372309 -59] -84.52430359372309]
Test Case: 831 | Input/Output: [[55.12006565765506 96] 151.12006565765506]
Test Case: 832 | Input/Output: [[-15.656691298821698 -53] -68.6566912988217]
Test Case: 833 | Input/Output: [[18.04861484488673 -23] -4.951385155113272]
Test Case: 834 | Input/Output: [[11.791325984334392 60] 71.79132598433439]
Test Case: 835 | Input/Output: [[-13.333797662841732 4] -9.333797662841732]
Test Case: 836 | Input/Output: [[-90.68302219304022 -32] -122.68302219304022]
Test Case: 837 | Input/Output: [[99.67088331427931 -54] 45.67088331427931]
Test Case: 838 | Input/Output: [[-5.267503696639125 58] 52.732496303360875]
Test Case: 839 | Input/Output: [[-91.21113604649534 -66] -157.21113604649534]
Test Case: 840 | Input/Output: [[-86.01138157520325 -47] -133.01138157520325]
Test Case: 841 | Input/Output: [[1.5143378180857212 95] 96.51433781808572]
Test Case: 842 | Input/Output: [[-14.715566978677003 48] 33.284433021323]
Test Case: 843 | Input/Output: [[-46.640921021994686 -75] -121.64092102199469]
Test Case: 844 | Input/Output: [[22.873889232403457 40] 62.87388923240346]
Test Case: 845 | Input/Output: [[0.32435082069477517 57] 57.324350820694775]
Test Case: 846 | Input/Output: [[-61.37976471874573 39] -22.379764718745733]
Test Case: 847 | Input/Output: [[-48.37048154863388 59] 10.629518451366117]
Test Case: 848 | Input/Output: [[45.0571932722618 -60] -14.942806727738201]
Test Case: 849 | Input/Output: [[48.49109869381715 48] 96.49109869381715]
Test Case: 850 | Input/Output: [[6.6565483637331795 27] 33.65654836373318]
Test Case: 851 | Input/Output: [[82.81203123085942 -41] 41.81203123085942]
Test Case: 852 | Input/Output: [[26.522193753957552 -98] -71.47780624604245]
Test Case: 853 | Input/Output: [[-72.60774338683666 78] 5.39225661316334]
Test Case: 854 | Input/Output: [[-33.50001279945157 79] 45.49998720054843]
Test Case: 855 | Input/Output: [[84.40918517348607 40] 124.40918517348607]
Test Case: 856 | Input/Output: [[-33.7725250793508 30] -3.7725250793507996]
Test Case: 857 | Input/Output: [[-16.049116905883423 87] 70.95088309411658]
Test Case: 858 | Input/Output: [[92.01464110575259 -8] 84.01464110575259]
Test Case: 859 | Input/Output: [[68.68348195528185 91] 159.68348195528185]
Test Case: 860 | Input/Output: [[20.65898067462244 29] 49.65898067462244]
Test Case: 861 | Input/Output: [[74.4212772178798 -92] -17.578722782120195]
Test Case: 862 | Input/Output: [[39.767419550846284 -39] 0.7674195508462844]
Test Case: 863 | Input/Output: [[26.99672629581798 -13] 13.996726295817979]
Test Case: 864 | Input/Output: [[-93.06565713270518 -89] -182.06565713270518]
Test Case: 865 | Input/Output: [[64.22200607451259 -61] 3.222006074512592]
Test Case: 866 | Input/Output: [[-24.276545559742743 50] 25.723454440257257]
Test Case: 867 | Input/Output: [[-19.728751556213567 -63] -82.72875155621357]
Test Case: 868 | Input/Output: [[73.28434332988485 -6] 67.28434332988485]
Test Case: 869 | Input/Output: [[16.80467037830286 -62] -45.19532962169714]
Test Case: 870 | Input/Output: [[38.67393070673802 58] 96.67393070673802]
Test Case: 871 | Input/Output: [[78.06635857144781 87] 165.0663585714478]
Test Case: 872 | Input/Output: [[84.10946664574891 42] 126.10946664574891]
Test Case: 873 | Input/Output: [[8.282873734328035 89] 97.28287373432804]
Test Case: 874 | Input/Output: [[-43.26786161889271 -91] -134.2678616188927]
Test Case: 875 | Input/Output: [[-40.1374070228768 -89] -129.1374070228768]
Test Case: 876 | Input/Output: [[91.6194144480194 -69] 22.6194144480194]
Test Case: 877 | Input/Output: [[77.02644567132415 -94] -16.973554328675846]
Test Case: 878 | Input/Output: [[-65.56413584303598 -50] -115.56413584303598]
Test Case: 879 | Input/Output: [[91.44953758000739 58] 149.4495375800074]
Test Case: 880 | Input/Output: [[77.7058165049367 -70] 7.705816504936706]
Test Case: 881 | Input/Output: [[-75.83594386952146 94] 18.164056130478542]
Test Case: 882 | Input/Output: [[-15.833888800080118 -51] -66.83388880008012]
Test Case: 883 | Input/Output: [[11.016731313244321 -13] -1.9832686867556788]
Test Case: 884 | Input/Output: [[83.49489430022425 -49] 34.494894300224246]
Test Case: 885 | Input/Output: [[43.01647971391574 20] 63.01647971391574]
Test Case: 886 | Input/Output: [[56.88341117248385 17] 73.88341117248385]
Test Case: 887 | Input/Output: [[-65.82827362213555 34] -31.828273622135555]
Test Case: 888 | Input/Output: [[-96.45031147037963 -87] -183.45031147037963]
Test Case: 889 | Input/Output: [[-69.16121880290704 -38] -107.16121880290704]
Test Case: 890 | Input/Output: [[-82.67085629138462 54] -28.670856291384624]
Test Case: 891 | Input/Output: [[-77.56805140458368 88] 10.431948595416316]
Test Case: 892 | Input/Output: [[59.60816245540127 30] 89.60816245540127]
Test Case: 893 | Input/Output: [[-42.81134826703943 92] 49.18865173296057]
Test Case: 894 | Input/Output: [[-72.02267528974502 59] -13.022675289745024]
Test Case: 895 | Input/Output: [[68.36126068006817 84] 152.36126068006817]
Test Case: 896 | Input/Output: [[42.44253110489552 50] 92.44253110489552]
Test Case: 897 | Input/Output: [[3.983943652183356 27] 30.983943652183356]
Test Case: 898 | Input/Output: [[4.5849463599481055 32] 36.584946359948106]
Test Case: 899 | Input/Output: [[-6.065804687259941 24] 17.93419531274006]
Test Case: 900 | Input/Output: [[3.3978886070307794 78] 81.39788860703078]
Test Case: 901 | Input/Output: [[84.13266275630889 -60] 24.13266275630889]
Test Case: 902 | Input/Output: [[8.180229029745135 -49] -40.819770970254865]
Test Case: 903 | Input/Output: [[-79.44731275539856 49] -30.447312755398556]
Test Case: 904 | Input/Output: [[-48.1014577765241 33] -15.1014577765241]
Test Case: 905 | Input/Output: [[58.05517664300436 -40] 18.05517664300436]
Test Case: 906 | Input/Output: [[46.049899608681926 50] 96.04989960868193]
Test Case: 907 | Input/Output: [[-46.27154053951552 -2] -48.27154053951552]
Test Case: 908 | Input/Output: [[-62.27083631980999 21] -41.27083631980999]
Test Case: 909 | Input/Output: [[-14.893433865175169 3] -11.893433865175169]
Test Case: 910 | Input/Output: [[18.484295193846776 23] 41.484295193846776]
Test Case: 911 | Input/Output: [[80.84972413226947 -45] 35.84972413226947]
Test Case: 912 | Input/Output: [[-68.4799932621206 58] -10.479993262120601]
Test Case: 913 | Input/Output: [[-91.66544183073628 -77] -168.66544183073628]
Test Case: 914 | Input/Output: [[83.37943713084286 23] 106.37943713084286]
Test Case: 915 | Input/Output: [[-42.74659084605818 -69] -111.74659084605818]
Test Case: 916 | Input/Output: [[3.27775490914091 -77] -73.72224509085909]
Test Case: 917 | Input/Output: [[-46.53834009056743 -58] -104.53834009056743]
Test Case: 918 | Input/Output: [[-27.012116910586357 94] 66.98788308941364]
Test Case: 919 | Input/Output: [[71.18205893339996 -40] 31.182058933399958]
Test Case: 920 | Input/Output: [[-29.540182032353798 -4] -33.5401820323538]
Test Case: 921 | Input/Output: [[74.36401214447886 92] 166.36401214447886]
Test Case: 922 | Input/Output: [[54.89701436942576 -82] -27.10298563057424]
Test Case: 923 | Input/Output: [[-85.94815915359042 -19] -104.94815915359042]
Test Case: 924 | Input/Output: [[-47.58440128920063 -32] -79.58440128920063]
Test Case: 925 | Input/Output: [[22.463625454462502 -9] 13.463625454462502]
Test Case: 926 | Input/Output: [[-38.470688323903104 45] 6.529311676096896]
Test Case: 927 | Input/Output: [[-30.335638767182772 50] 19.664361232817228]
Test Case: 928 | Input/Output: [[61.80990831048484 15] 76.80990831048484]
Test Case: 929 | Input/Output: [[67.29128055138963 60] 127.29128055138963]
Test Case: 930 | Input/Output: [[-19.00364713030089 -93] -112.00364713030089]
Test Case: 931 | Input/Output: [[2.452037160532214 -34] -31.547962839467786]
Test Case: 932 | Input/Output: [[-36.07955354566925 44] 7.920446454330751]
Test Case: 933 | Input/Output: [[70.71716252769846 -18] 52.71716252769846]
Test Case: 934 | Input/Output: [[48.11030071674415 61] 109.11030071674415]
Test Case: 935 | Input/Output: [[-47.74387439397745 2] -45.74387439397745]
Test Case: 936 | Input/Output: [[75.5056162677449 94] 169.5056162677449]
Test Case: 937 | Input/Output: [[34.53035163187741 9] 43.53035163187741]
Test Case: 938 | Input/Output: [[26.65731293435431 3] 29.65731293435431]
Test Case: 939 | Input/Output: [[-99.18158771463573 -91] -190.18158771463573]
Test Case: 940 | Input/Output: [[-24.717152309631814 69] 44.282847690368186]
Test Case: 941 | Input/Output: [[-5.384178392577482 6] 0.615821607422518]
Test Case: 942 | Input/Output: [[-89.92337295791226 -19] -108.92337295791226]
Test Case: 943 | Input/Output: [[-88.84665146033038 93] 4.153348539669622]
Test Case: 944 | Input/Output: [[66.5831476224644 94] 160.5831476224644]
Test Case: 945 | Input/Output: [[14.301767944374348 -28] -13.698232055625652]
Test Case: 946 | Input/Output: [[-18.946701878497024 -5] -23.946701878497024]
Test Case: 947 | Input/Output: [[-66.35373324538017 -21] -87.35373324538017]
Test Case: 948 | Input/Output: [[87.55257029103251 -12] 75.55257029103251]
Test Case: 949 | Input/Output: [[8.355776375396303 71] 79.3557763753963]
Test Case: 950 | Input/Output: [[7.106512563041349 57] 64.10651256304135]
Test Case: 951 | Input/Output: [[-31.192085908105383 60] 28.807914091894617]
Test Case: 952 | Input/Output: [[36.193980781262695 76] 112.1939807812627]
Test Case: 953 | Input/Output: [[92.59430498623786 -61] 31.59430498623786]
Test Case: 954 | Input/Output: [[22.58327724910356 -61] -38.41672275089644]
Test Case: 955 | Input/Output: [[33.341502114347975 -13] 20.341502114347975]
Test Case: 956 | Input/Output: [[39.10099685298883 -82] -42.89900314701117]
Test Case: 957 | Input/Output: [[-27.743290533175326 -19] -46.743290533175326]
Test Case: 958 | Input/Output: [[87.36600824471748 -94] -6.633991755282523]
Test Case: 959 | Input/Output: [[62.46976649759861 56] 118.46976649759861]
Test Case: 960 | Input/Output: [[3.6471913589620755 68] 71.64719135896208]
Test Case: 961 | Input/Output: [[-59.09740649659696 25] -34.09740649659696]
Test Case: 962 | Input/Output: [[70.42793392324961 99] 169.4279339232496]
Test Case: 963 | Input/Output: [[83.99080421820918 -87] -3.0091957817908224]
Test Case: 964 | Input/Output: [[82.82738985012335 82] 164.82738985012335]
Test Case: 965 | Input/Output: [[48.86836370288313 -17] 31.86836370288313]
Test Case: 966 | Input/Output: [[48.2063747508862 87] 135.2063747508862]
Test Case: 967 | Input/Output: [[-28.12950681211545 -42] -70.12950681211545]
Test Case: 968 | Input/Output: [[-87.22918636397183 7] -80.22918636397183]
Test Case: 969 | Input/Output: [[87.56699280975613 46] 133.56699280975613]
Test Case: 970 | Input/Output: [[-2.8673227825706533 43] 40.13267721742935]
Test Case: 971 | Input/Output: [[-0.1554690287383096 -69] -69.15546902873831]
Test Case: 972 | Input/Output: [[33.00207079491156 96] 129.00207079491156]
Test Case: 973 | Input/Output: [[-62.74468441027538 -9] -71.74468441027538]
Test Case: 974 | Input/Output: [[11.97313142920018 -68] -56.02686857079982]
Test Case: 975 | Input/Output: [[33.50295822366235 17] 50.50295822366235]
Test Case: 976 | Input/Output: [[-63.64900959122013 -2] -65.64900959122014]
Test Case: 977 | Input/Output: [[-32.27209889986827 -99] -131.27209889986827]
Test Case: 978 | Input/Output: [[22.92165532249264 -97] -74.07834467750736]
Test Case: 979 | Input/Output: [[-16.49850866606839 -95] -111.49850866606839]
Test Case: 980 | Input/Output: [[0.5081531371365315 -48] -47.49184686286347]
Test Case: 981 | Input/Output: [[90.4680567131739 -64] 26.468056713173894]
Test Case: 982 | Input/Output: [[-7.834684913272412 19] 11.165315086727588]
Test Case: 983 | Input/Output: [[-12.267181339147342 60] 47.73281866085266]
Test Case: 984 | Input/Output: [[-52.614801988965155 13] -39.614801988965155]
Test Case: 985 | Input/Output: [[-80.22762522854609 76] -4.2276252285460885]
Test Case: 986 | Input/Output: [[-90.50888677380192 64] -26.50888677380192]
Test Case: 987 | Input/Output: [[-99.2789556743177 87] -12.2789556743177]
Test Case: 988 | Input/Output: [[-88.73111936343803 15] -73.73111936343803]
Test Case: 989 | Input/Output: [[-31.42225573211563 -10] -41.42225573211563]
Test Case: 990 | Input/Output: [[-43.273454034949935 -7] -50.273454034949935]
Test Case: 991 | Input/Output: [[-18.36216585484256 -41] -59.36216585484256]
Test Case: 992 | Input/Output: [[-80.48458973088985 43] -37.48458973088985]
Test Case: 993 | Input/Output: [[92.50535273092467 -63] 29.50535273092467]
Test Case: 994 | Input/Output: [[25.55390103928623 -26] -0.4460989607137691]
Test Case: 995 | Input/Output: [[-56.854119006464934 83] 26.145880993535066]
Test Case: 996 | Input/Output: [[62.69407462992345 55] 117.69407462992345]
Test Case: 997 | Input/Output: [[-3.6441528251165494 -90] -93.64415282511655]
Test Case: 998 | Input/Output: [[-7.35663825082122 42] 34.64336174917878]
Test Case: 999 | Input/Output: [[58.76876244758603 37] 95.76876244758603]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 34 90 -59 90 75 32 -57 9 -28 -21 -8 -70 -24 -31 111 103
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_dup_items} {:instruction integer_add} {:instruction print_integer} {:instruction integer_inc} {:instruction float_sin} {:instruction integer_rot} {:instruction float_pop} {:instruction float_sub} {:instruction float_max} {:instruction 31} {:instruction integer_div} {:instruction integer_shove} {:instruction tagged_856} {:instruction float_min} {:instruction float_add} {:instruction integer_pop} {:instruction float_add} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_dup_times} {:instruction tag_integer_171} {:instruction integer_add} {:instruction float_min} {:instruction tagged_161} {:instruction float_shove} {:instruction integer_swap} {:instruction float_flush} {:instruction in1} {:instruction integer_add} {:instruction integer_mod} {:instruction print_float} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_pop} {:instruction float_div} {:instruction 71.95086351361795} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_min} {:instruction float_add} {:instruction float_mod} {:instruction integer_div} {:instruction float_mod} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_max} {:instruction float_tan} {:instruction float_dup_times} {:instruction float_shove} {:instruction 13})
Best program: (float_tan float_dup_items integer_add print_integer integer_inc float_sin integer_rot float_pop float_sub float_max 31 integer_div integer_shove tagged_856 float_min float_add integer_pop float_add float_flush integer_swap integer_flush integer_swap float_dup_times tag_integer_171 integer_add float_min tagged_161 float_shove integer_swap float_flush in1 integer_add integer_mod print_float float_pop float_yankdup float_dup float_flush integer_shove integer_swap integer_swap float_pop float_div 71.95086351361795 float_rot in2 float_add float_min float_add float_mod integer_div float_mod integer_sub float_yankdup float_yank float_max float_tan float_dup_times float_shove 13)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 18369.1176372
Median total errors in population: 25337.0
Error averages by case: (730.7246817000026 13.263 724.9897224999983 13.324 733.2517510000015 11.7 727.7647766000025 13.266 724.5462214000022 12.51 706.9339569999992 11.909 722.9892194000016 12.304 724.795659999999 12.539 748.8676368999979 14.039 704.7638865999976 12.429 729.7221684999985 13.359 718.8144834000011 13.138 713.6518724999984 13.379 711.7796602000004 12.559 716.3109319000015 13.276 717.413966600001 13.11 726.9516295999979 13.346 705.5539182000017 13.189 730.7410016999976 13.319 717.826153399999 12.549 718.4858559000024 12.546 703.5341286000005 12.649 720.2439125000005 13.254 723.0280466999986 13.3 741.122394399998 14.054)
Error minima by case: (1.4056 2 14.1233 2 1.3626 1 22.4154 2 2.161 2 1.8655 2 4.904 1 1.6116 2 1.0936 2 1.1503 1 11.2804 2 0.9802 1 0.1836 1 0.54 8 1.5854 9 0.9821 8 1.0 1 2.1088 2 0.7829 2 0.3718 2 1.5124 2 0.7648 2 0.0981 1 8.5194 2 25.1251 2)
Average genome size in population (length): 50.109
Average program size in population (points): 51.109
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.305
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.354
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1256804
--- Timings ---
Current time: 1529615976312 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 16.4%
Fitness Testing:      2.8 seconds, 80.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction in1} {:instruction in2} {:instruction integer_sub} {:instruction integer_add} {:instruction float_min} {:instruction float_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_min} {:instruction float_cos} {:instruction integer_shove})
Best program: (float_tan in1 in2 integer_sub integer_add float_min float_max integer_mod print_float integer_inc float_inc integer_shove integer_fromfloat float_frominteger integer_rot integer_max integer_dup_items integer_inc float_yank integer_min float_cos integer_shove)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 7110.592719
Median total errors in population: 2218.1743
Error averages by case: (283.9604565999995 10.827 282.931015100001 11.07 301.30459900000204 9.77 290.9811013999992 10.977 268.90069389999877 10.356 232.00822420000148 10.066 265.44162129999853 9.907 270.98937389999867 10.403 326.3902466000006 11.504 237.94497510000042 10.215 299.6139750000019 11.205 259.6978156000012 10.658 266.9637402000006 11.185 257.52054729999963 12.133 273.3701553999999 12.701 273.9952485000003 12.202 287.51386670000073 11.058 250.0472310999992 10.951 291.6814116000006 10.976 268.5194308999985 10.527 260.533572499999 10.502 242.88961190000097 10.621 258.05295590000094 10.799 277.95372339999847 11.116 308.1051259000012 11.553)
Error minima by case: (0.4056 2 14.1233 2 18.8578 1 15.8578 2 2.161 2 1.8655 2 4.904 1 1.6116 2 1.0936 2 1.1503 1 12.8578 2 0.8305 1 0.1836 1 0.54 9 1.8224 9 0.9821 8 1.0 1 2.1088 2 1.7468 2 0.3718 2 1.5124 2 1.7109 2 3.1601 1 12.5194 2 26.1491 2)
Average genome size in population (length): 58.856
Average program size in population (points): 59.856
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.287
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2733804
--- Timings ---
Current time: 1529615980163 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.5 seconds, 33.2%
Fitness Testing:      4.3 seconds, 57.6%
Report:               0.6 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction in1} {:instruction in2} {:instruction integer_sub} {:instruction integer_add} {:instruction float_min} {:instruction float_max} {:instruction integer_mod} {:instruction print_float} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_min} {:instruction float_cos} {:instruction integer_shove})
Best program: (float_tan in1 in2 integer_sub integer_add float_min float_max integer_mod print_float integer_inc float_inc integer_shove integer_fromfloat float_frominteger integer_rot integer_max integer_dup_items integer_inc float_yank integer_min float_cos integer_shove)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 4816.139821999993
Median total errors in population: 1315.0
Error averages by case: (187.7320477999997 6.742 188.2527131000008 7.186 193.70588190000083 6.134 190.8447361999997 7.173 175.0198184999997 6.474 151.92719230000014 6.3 160.52442899999997 5.8 188.44722309999995 6.515 219.47894100000084 7.159 149.84966260000022 5.96 196.24308990000026 7.247 156.28597549999978 6.186 187.42118179999977 6.874 196.33490809999984 12.375 218.6374570000001 13.312 216.71176340000002 11.954 215.21721740000018 6.665 172.6444677999998 6.821 207.72430950000015 6.712 180.31819949999925 6.537 160.26292829999986 6.591 165.21311110000042 6.595 158.8868912000003 6.212 182.10306589999976 7.348 212.36261010000055 7.118)
Error minima by case: (5.5944 2 14.1233 2 1.6374 2 16.5846 3 7.7736 2 1.8655 2 8.048 1 0.5994 2 1.0936 2 2.9599 1 3.2804 3 3.0 1 10.7716 1 0.54 9 1.8224 9 0.9821 8 16.7593 1 3.997 2 17.2292 1 1.3718 2 5.2687 2 2.7648 2 2.8918 1 21.5194 3 32.8749 2)
Average genome size in population (length): 54.903
Average program size in population (points): 55.903
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9445
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.14
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4110229
--- Timings ---
Current time: 1529615983307 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         3.8 seconds, 35.7%
Fitness Testing:      5.9 seconds, 54.7%
Report:               0.9 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction integer_min} {:instruction integer_pop} {:instruction integer_max} {:instruction float_mult} {:instruction float_sin} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_div} {:instruction float_max} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_add} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_tan} {:instruction float_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_min} {:instruction -6} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction 69} {:instruction integer_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_add} {:instruction integer_min} {:instruction float_flush} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_dup_items} {:instruction in1})
Best program: (integer_dup integer_min integer_pop integer_max float_mult float_sin integer_flush float_yankdup integer_pop float_swap float_inc float_max float_add float_div float_max integer_flush float_yankdup float_dec integer_pop integer_dup_items integer_min float_add float_inc integer_yankdup float_dup float_tan float_dup_items in1 float_mod float_mod float_mod integer_inc print_integer print_float float_min -6 float_dec integer_div float_sub float_dup_times 69 integer_pop integer_min integer_fromfloat integer_dec float_rot float_dec float_inc integer_flush integer_inc integer_dup_items integer_fromfloat float_tan integer_add integer_min float_flush integer_dec integer_dup_times float_sin float_dup_items in1)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4343.6281326
Median total errors in population: 1273.0
Error averages by case: (170.5757863 3.8 171.5276842 4.548 171.2292416 3.484 173.48824359999998 4.552 149.32916550000002 3.635 136.7874677 3.57 137.6111349 2.807 165.45283680000003 3.655 198.96186780000005 3.875 133.7016206 2.809 176.29272809999998 4.57 132.33493049999996 2.888 170.75695979999998 3.774 186.7156946 12.331 213.53126059999997 13.319 212.7094784 11.494 211.8125599 3.685 159.35733489999998 3.78 196.62471770000002 3.75 166.8619813 3.661 133.04852499999996 3.66 155.7664273 3.625 137.4984754 2.914 164.50968110000002 4.571 198.52332900000002 3.862)
Error minima by case: (22.9696 2 31.1233 2 30.4196 2 33.4196 3 15.5877 2 0.3077 2 3.3401 1 19.8232 2 77.9064 2 7.0 1 36.4196 3 3.0 1 14.0791 1 8.2953 9 13.3089 10 10.5122 9 16.7753 1 9.2635 2 19.2292 1 8.3718 2 6.0 2 11.7648 2 9.0 1 22.5194 3 46.1251 2)
Average genome size in population (length): 48.811
Average program size in population (points): 49.811
Average percent parens in population: 0.026
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.42075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.05
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5334429
--- Timings ---
Current time: 1529615986500 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 37.1%
Fitness Testing:      7.4 seconds, 53.2%
Report:               1.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction tagged_920} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_rot} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_flush} {:instruction print_float} {:instruction integer_pop} {:instruction float_swap} {:instruction float_mult} {:instruction integer_mult} {:instruction float_yank} {:instruction float_pop} {:instruction integer_flush} {:instruction float_min} {:instruction float_yank} {:instruction tag_float_543} {:instruction float_dec} {:instruction integer_pop} {:instruction float_add} {:instruction integer_min} {:instruction tagged_286} {:instruction float_max} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_mod} {:instruction float_inc} {:instruction -19} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_mod} {:instruction in1} {:instruction integer_stackdepth} {:instruction print_float} {:instruction -7} {:instruction float_yank} {:instruction integer_dec} {:instruction float_add})
Best program: (float_dup_items tagged_920 float_dup_items float_mult float_yankdup float_mod integer_rot float_flush integer_flush integer_flush print_float integer_pop float_swap float_mult integer_mult float_yank float_pop integer_flush float_min float_yank tag_float_543 float_dec integer_pop float_add integer_min tagged_286 float_max integer_fromfloat float_cos float_mod float_inc -19 integer_stackdepth float_yankdup float_mod in1 integer_stackdepth print_float -7 float_yank integer_dec float_add)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 4546.9829313
Median total errors in population: 1273.0
Error averages by case: (179.0743933 3.765 179.4015841 4.486 179.11447310000003 3.429 181.24778319999996 4.535 157.4852451 3.568 145.3103466 3.541 146.50574450000002 2.71 173.4510302 3.603 207.16792760000004 3.8 141.11895920000003 2.758 184.1249822 4.535 141.31428809999997 2.829 179.3398286 3.783 195.08643310000002 12.34 221.4659651 13.329 220.77695109999993 11.455 219.29956380000004 3.685 167.9341337 3.745 205.4705958 3.693 174.7016124 3.623 140.87832349999996 3.607 163.7188054 3.599 146.25840169999998 2.839 172.425486 4.535 206.73507389999997 3.783)
Error minima by case: (40.4056 2 49.0 2 49.0 1 47.0 2 25.0 2 0.3077 2 9.0 1 6.4412 2 76.9064 2 7.0 1 44.0 2 3.0 1 17.8515 1 8.9301 7 6.9052 8 10.1162 9 1.0 1 0.9171 2 18.2292 1 45.0 2 6.0 2 12.7648 2 9.0 1 42.0 2 45.1251 2)
Average genome size in population (length): 45.434
Average program size in population (points): 46.434
Average percent parens in population: 0.027
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.878125
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.035
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6472979
--- Timings ---
Current time: 1529615989545 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.4 seconds, 37.7%
Fitness Testing:      8.8 seconds, 52.0%
Report:               1.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction integer_min} {:instruction integer_pop} {:instruction integer_max} {:instruction float_mult} {:instruction float_sin} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_div} {:instruction float_max} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_add} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_tan} {:instruction float_dup_items} {:instruction in1} {:instruction float_mod} {:instruction float_mod} {:instruction float_mod} {:instruction integer_inc} {:instruction print_integer} {:instruction print_float} {:instruction float_min} {:instruction -6} {:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction 69} {:instruction integer_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_pop} {:instruction float_dec} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_tan} {:instruction integer_add} {:instruction integer_min} {:instruction float_flush} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_sin} {:instruction tagged_940} {:instruction float_pop} {:instruction print_integer} {:instruction integer_shove} {:instruction float_flush} {:instruction -69.75511963013798} {:instruction float_pop} {:instruction integer_div})
Best program: (integer_dup integer_min integer_pop integer_max float_mult float_sin integer_flush float_yankdup integer_pop float_swap float_inc float_inc float_add float_div float_max integer_flush float_yankdup float_dec float_mult integer_dup_items integer_min float_add float_inc integer_yankdup float_dup float_tan float_dup_items in1 float_mod float_mod float_mod integer_inc print_integer print_float float_min -6 float_dec integer_div float_sub float_dup_times 69 integer_pop integer_min integer_fromfloat integer_dec float_pop float_dec float_inc integer_flush integer_inc integer_dup_items float_dup float_tan integer_add integer_min float_flush integer_dec integer_dup_times float_sin tagged_940 float_pop print_integer integer_shove float_flush -69.75511963013798 float_pop integer_div)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 5002.190055000001
Median total errors in population: 1273.0
Error averages by case: (197.23740709999998 4.01 197.3495026 4.739 197.10183030000005 3.647 199.24196909999998 4.776 175.78335989999997 3.811 164.0741127 3.748 165.3429713 2.98 191.33284519999995 3.84 224.74629090000002 4.061 159.4286631 3.009 201.9859022 4.785 160.2557028 3.115 197.29903579999998 4.026 212.50531759999998 12.366 238.41802349999998 13.352 237.52836240000002 11.512 236.3619199 3.928 185.97400589999998 3.998 223.0725969 3.948 192.62592299999997 3.857 159.3387279 3.836 182.04017090000002 3.83 165.1338254 3.121 190.580502 4.775 224.3090866 4.052)
Error minima by case: (47.0 2 49.0 2 49.0 1 47.0 2 16.3865 2 3.3615 2 9.0 1 3.0175 2 79.0 2 0.5418 1 44.0 2 3.0 1 31.7864 1 7.9254 9 5.6896 9 5.6112 9 1.0 1 13.0179 2 78.0 1 45.0 2 6.0 2 1.1024 2 9.0 1 42.0 2 79.0 2)
Average genome size in population (length): 43.4
Average program size in population (points): 44.4
Average percent parens in population: 0.028
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.365625
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.043
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7560543
--- Timings ---
Current time: 1529615992622 milliseconds
Total Time:          19.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.6 seconds, 38.1%
Fitness Testing:     10.2 seconds, 51.4%
Report:               2.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction 48.86718411496065} {:instruction tag_integer_129} {:instruction print_integer} {:instruction integer_sub} {:instruction integer_add} {:instruction float_min} {:instruction integer_div} {:instruction integer_shove} {:instruction tagged_856} {:instruction float_min} {:instruction float_add} {:instruction integer_pop} {:instruction float_add} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_dup_times} {:instruction tag_integer_171} {:instruction integer_add} {:instruction float_min} {:instruction tagged_161} {:instruction float_shove} {:instruction integer_swap} {:instruction float_flush} {:instruction in1} {:instruction integer_add} {:instruction integer_mod} {:instruction print_float} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_swap} {:instruction float_pop} {:instruction float_div} {:instruction 71.95086351361795} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_min} {:instruction float_add} {:instruction float_yank} {:instruction integer_div} {:instruction float_mod} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_max} {:instruction float_tan})
Best program: (float_inc 48.86718411496065 tag_integer_129 print_integer integer_sub integer_add float_min integer_div integer_shove tagged_856 float_min float_add integer_pop float_add float_flush integer_swap integer_flush integer_swap float_dup_times tag_integer_171 integer_add float_min tagged_161 float_shove integer_swap float_flush in1 integer_add integer_mod print_float float_pop float_yankdup float_dup float_flush integer_shove integer_swap integer_swap float_pop float_div 71.95086351361795 float_rot in2 float_add float_min float_add float_yank integer_div float_mod integer_sub float_yankdup float_yank float_max float_tan)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4112.947766699999
Median total errors in population: 1273.0
Error averages by case: (161.5651149 3.555 162.04746570000003 4.288 161.4778176 3.234 163.9106057 4.339 139.7920715 3.378 127.8254275 3.369 128.15279439999998 2.497 156.26325379999997 3.418 189.9622434 3.563 123.8516382 2.538 166.67169289999998 4.342 122.86374639999998 2.61 162.03550160000003 3.557 178.5223134 12.389 205.8042407 13.376 205.03413 11.452 203.88823059999999 3.462 150.54546789999998 3.522 188.74012930000004 3.482 157.4586973 3.415 123.221655 3.417 147.3907957 3.382 128.0753155 2.608 154.98485920000002 4.343 189.78355850000003 3.543)
Error minima by case: (47.0 2 50.0 2 49.0 2 52.0 3 25.0 2 3.3615 2 9.0 1 44.0 2 79.0 2 7.0 1 55.0 3 3.0 1 26.1153 1 8.2245 10 42.1776 10 53.4784 9 98.0 1 13.003 2 78.0 1 45.0 2 6.0 2 34.0 2 9.0 1 42.0 3 79.0 2)
Average genome size in population (length): 42.061
Average program size in population (points): 43.061
Average percent parens in population: 0.029
Minimum age in population: 6.0
Maximum age in population: 10.6875
Average age in population: 8.857125
Median age in population: 8.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.026
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8614068
--- Timings ---
Current time: 1529615995716 milliseconds
Total Time:          23.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.8 seconds, 38.4%
Fitness Testing:     11.7 seconds, 50.7%
Report:               2.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction 75} {:instruction float_min} {:instruction float_mod} {:instruction integer_mult} {:instruction float_min} {:instruction float_max} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_min} {:instruction float_div} {:instruction float_cos} {:instruction in1} {:instruction print_float} {:instruction integer_swap} {:instruction float_sin})
Best program: (integer_max float_sub integer_dup_items print_integer integer_mod integer_stackdepth 75 float_min float_mod integer_mult float_min float_max integer_dup_times integer_fromfloat float_min float_div float_cos in1 print_float integer_swap float_sin)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 4315.138773199999
Median total errors in population: 1273.0
Error averages by case: (170.29368949999997 3.698 169.9875103 4.487 169.77223930000005 3.405 171.95255519999995 4.522 149.47850459999998 3.548 136.67881680000002 3.485 137.34482870000002 2.678 165.6039604 3.571 198.58011260000006 3.763 131.66272400000003 2.7 174.8071382 4.518 132.1059824 2.791 168.7641008 3.697 184.68572550000002 12.24 211.58018810000002 13.219 210.8761507 11.395 210.1836133 3.638 157.2749705 3.684 196.42354369999998 3.651 165.24624849999995 3.571 133.0367919 3.556 153.99569910000002 3.551 137.18280239999999 2.802 162.9876624 4.516 198.1932143 3.754)
Error minima by case: (39.4056 2 28.5766 2 27.5766 2 30.5766 3 25.0 2 3.3615 2 9.0 1 29.4613 2 75.9064 2 7.0 1 33.5766 3 3.0 1 15.0791 1 1.9358 9 13.3089 10 10.5122 9 18.7753 1 13.003 2 17.2292 1 23.5766 2 6.0 2 12.5766 2 1.0782 1 20.5766 3 44.1251 2)
Average genome size in population (length): 40.155
Average program size in population (points): 41.155
Average percent parens in population: 0.030
Minimum age in population: 7.875
Maximum age in population: 12.1875
Average age in population: 10.34375
Median age in population: 10.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.039
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9619568
--- Timings ---
Current time: 1529615998560 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.0 seconds, 38.6%
Fitness Testing:     13.0 seconds, 50.2%
Report:               2.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54510.0
Test mean error for best: 27.25500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -81.7715995596
Correct output: 9.2244792798   | Program output: -58.7755207202
Correct output: 43.1776070233  | Program output: -55.8223929767
Correct output: 54.4783529715  | Program output: -43.5216470285
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -50.0030129507
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_yank} {:instruction in1} {:instruction print_float} {:instruction integer_max} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction tagged_483} {:instruction integer_sub} {:instruction -55} {:instruction integer_div} {:instruction float_div} {:instruction float_sub} {:instruction float_shove} {:instruction in1} {:instruction integer_mult} {:instruction integer_min} {:instruction tagged_483} {:instruction integer_sub} {:instruction -55} {:instruction integer_div} {:instruction float_div} {:instruction float_sub} {:instruction float_rot} {:instruction 16.04366224879152} {:instruction integer_max} {:instruction tagged_291} {:instruction 53.01880251599397} {:instruction integer_add} {:instruction in2} {:instruction float_min} {:instruction integer_pop} {:instruction float_sub} {:instruction float_shove} {:instruction float_div} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_mult} {:instruction float_rot} {:instruction float_dup_times} {:instruction integer_yank})
Best program: (integer_div integer_yank in1 print_float integer_max float_dec float_dup_items float_shove integer_yankdup tagged_483 integer_sub -55 integer_div float_div float_sub float_shove in1 integer_mult integer_min tagged_483 integer_sub -55 integer_div float_div float_sub float_rot 16.04366224879152 integer_max tagged_291 53.01880251599397 integer_add in2 float_min integer_pop float_sub float_shove float_div integer_sub float_tan integer_mult float_dup_times integer_mult float_mult float_rot float_dup_times integer_yank)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 49.0 2 68.0 12 99.0 13 98.0 11 99.0 2 36.0 2 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1273.0
Mean: 25.46
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4369.0763201
Median total errors in population: 1273.0
Error averages by case: (172.4158114 3.759 171.934026 4.474 171.69208580000003 3.418 173.8714696 4.519 150.50706280000003 3.583 138.2694543 3.546 139.62711859999996 2.71 166.41734770000002 3.618 200.90784209999998 3.789 133.70425659999995 2.729 176.79277899999997 4.538 134.2914534 2.828 171.3545694 3.761 187.252475 12.35 214.24897379999996 13.33 213.64437730000006 11.453 212.87273220000003 3.667 159.8966342 3.725 198.96918380000002 3.692 167.22381019999997 3.605 134.2237503 3.612 156.88499690000003 3.578 139.35784220000002 2.841 164.9448824 4.534 200.3253851 3.787)
Error minima by case: (18.1023 2 50.0 2 49.0 2 52.0 3 1.1788 2 0.463 2 8.2073 1 1.6198 2 80.0 2 7.0 1 55.0 3 4.0 1 17.0132 2 7.9254 9 42.1776 9 43.5216 9 17.7753 2 0.4721 2 26.9258 1 45.0 2 0.8714 2 12.7648 2 10.0 1 42.0 3 54.8217 2)
Average genome size in population (length): 37.891
Average program size in population (points): 38.891
Average percent parens in population: 0.032
Minimum age in population: 8.875
Maximum age in population: 13.921875
Average age in population: 11.7565546875
Median age in population: 11.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.042
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10568568
--- Timings ---
Current time: 1529616001509 milliseconds
Total Time:          28.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.3 seconds, 39.0%
Fitness Testing:     14.4 seconds, 50.0%
Report:               3.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 59292.52859999999
Test mean error for best: 29.64626
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 81.681531217  
Correct output: 9.2244792798   | Program output: 57.9831168899 
Correct output: 43.1776070233  | Program output: 56.4864820583 
Correct output: 54.4783529715  | Program output: 43.9661775848 
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: 50.2624792228 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_div} {:instruction float_yankdup} {:instruction in1} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_sin} {:instruction in1} {:instruction integer_swap} {:instruction float_sub} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_min} {:instruction float_pop} {:instruction in1} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_216} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_div} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_max} {:instruction integer_dup} {:instruction 70} {:instruction float_frominteger} {:instruction tag_integer_234} {:instruction float_inc} {:instruction integer_min} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_min} {:instruction float_div} {:instruction float_sub} {:instruction in1} {:instruction float_mult} {:instruction tag_integer_949} {:instruction tagged_245} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_rot})
Best program: (print_float integer_dup_items integer_fromfloat float_tan integer_div float_yankdup in1 in2 float_div float_dup_items integer_swap float_sin in1 integer_swap float_sub integer_dup_times float_swap integer_min float_pop in1 float_shove integer_yankdup float_shove integer_yankdup integer_max float_stackdepth float_shove float_stackdepth float_max tag_float_216 float_yankdup integer_min float_dup_times integer_min integer_shove float_stackdepth float_min float_div float_rot integer_stackdepth integer_div integer_max integer_dup 70 float_frominteger tag_integer_234 float_inc integer_min integer_sub float_mult integer_mult integer_dup_items float_dec float_pop float_yankdup float_add integer_min float_div float_sub in1 float_mult tag_integer_949 tagged_245 print_float integer_stackdepth float_rot)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 114.4531 11 48.7586 11 13.3089 10 10.5122 12 99.0 2 64.2655 13 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1191.2983
Mean: 23.825966
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3698.08903
Median total errors in population: 1273.0
Error averages by case: (145.62434879999998 3.305 145.9037758 4.095 145.4738574 3.062 147.85761879999998 4.135 123.08580759999998 3.171 110.09224370000001 3.139 111.6932535 2.287 139.7768084 3.187 174.79734360000003 3.347 105.80509060000001 2.279 150.7226091 4.142 106.25046389999999 2.368 145.9328871 3.316 162.36258999999995 12.222 190.06779579999997 13.207 189.2966468 11.319 187.82985190000002 3.242 134.1334066 3.298 172.3859089 3.257 141.1867424 3.186 105.48336900000005 3.189 129.9381195 3.18 111.52487109999997 2.381 138.6702316 4.138 174.39638810000002 3.345)
Error minima by case: (40.4056 2 50.0 2 49.0 2 52.0 3 11.0799 2 1.9201 2 9.0 1 2.0175 2 76.9064 2 0.5418 1 55.0 3 3.0 1 17.8515 1 7.2245 10 5.6896 10 5.6112 9 17.7753 1 0.9171 2 18.2292 1 45.0 2 6.0 2 1.1024 2 9.0 1 42.0 3 45.1251 2)
Average genome size in population (length): 36.029
Average program size in population (points): 37.029
Average percent parens in population: 0.034
Minimum age in population: 10.375
Maximum age in population: 15.6953125
Average age in population: 13.24098828125
Median age in population: 13.283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.03
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11470968
--- Timings ---
Current time: 1529616004524 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.4 seconds, 39.2%
Fitness Testing:     15.8 seconds, 49.7%
Report:               3.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 51164.62429999999
Test mean error for best: 25.58231
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 0.8405249143  
Correct output: 9.2244792798   | Program output: 0.8405249143  
Correct output: 43.1776070233  | Program output: 0.8405249143  
Correct output: 54.4783529715  | Program output: 0.8405249143  
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: 0.8405249143  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction -31.356780412517054} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_42} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (float_mod -31.356780412517054 float_dup_items float_cos tag_integer_42 integer_max integer_sub integer_dec float_min integer_dup_items integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 33.6121 12 8.384 10 42.3371 11 53.6378 10 99.0 2 14.8435 11 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1089.8145
Mean: 21.79629
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3483.8784611000005
Median total errors in population: 1273.0
Error averages by case: (136.0531828 3.226 138.00552140000002 4.033 137.50194929999998 3.01 139.94911709999997 4.082 115.1944798 3.108 103.00252130000001 3.08 101.744193 2.209 132.1076815 3.132 165.39707760000002 3.26 98.73735870000002 2.209 142.8192642 4.084 96.31116990000001 2.298 136.67941079999997 3.25 153.1938194 12.187 180.8653676 13.154 179.5138685 11.285 180.96093510000003 3.174 123.96267239999999 3.255 163.90090940000002 3.171 133.27985999999999 3.11 98.16936330000001 3.126 122.85721910000001 3.107 101.63944760000001 2.304 130.7413722 4.078 165.0936991 3.265)
Error minima by case: (25.5815 2 46.1724 2 49.0 2 52.0 2 6.6972 2 0.3077 1 0.7281 1 3.0175 2 75.9064 2 0.963 1 55.0 3 4.0 1 26.5766 2 8.384 10 4.1848 10 7.116 8 16.7753 2 8.2635 2 17.2292 1 23.421 2 3.0239 2 0.4024 2 10.0 1 37.5685 2 44.1251 2)
Average genome size in population (length): 34.999
Average program size in population (points): 35.999
Average percent parens in population: 0.035
Minimum age in population: 11.375
Maximum age in population: 16.767578125
Average age in population: 14.7414453125
Median age in population: 14.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.031
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12347368
--- Timings ---
Current time: 1529616007476 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.7 seconds, 39.2%
Fitness Testing:     17.2 seconds, 49.3%
Report:               3.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 51164.62429999999
Test mean error for best: 25.58231
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 0.8405249143  
Correct output: 9.2244792798   | Program output: 0.8405249143  
Correct output: 43.1776070233  | Program output: 0.8405249143  
Correct output: 54.4783529715  | Program output: 0.8405249143  
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: 0.8405249143  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction -31.356780412517054} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_42} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (float_mod -31.356780412517054 float_dup_items float_cos tag_integer_42 integer_max integer_sub integer_dec float_min integer_dup_items integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 33.6121 12 8.384 10 42.3371 11 53.6378 10 99.0 2 14.8435 11 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1089.8145
Mean: 21.79629
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3648.735802
Median total errors in population: 1273.0
Error averages by case: (143.08478000000002 3.335 144.2338763 4.126 143.8650889 3.096 145.93456779999997 4.16 122.19006070000002 3.198 109.78254440000002 3.168 109.7401492 2.317 138.85370280000004 3.225 173.1576934 3.357 104.42945320000001 2.316 148.85375049999996 4.173 103.77530339999998 2.408 142.95104940000002 3.441 158.97198129999998 12.214 186.08231540000006 13.193 185.2757584 11.327 186.65950500000002 3.266 130.62075199999995 3.422 170.3867758 3.268 138.88075659999996 3.222 105.23805279999999 3.213 127.98002240000002 3.196 109.5500734 2.414 137.01532840000002 4.16 172.64846050000006 3.359)
Error minima by case: (40.5549 2 49.0 2 49.0 1 47.0 2 24.005 2 3.3141 2 9.0 1 21.7535 2 79.0 2 7.0 1 44.0 2 3.0 1 7.1652 1 8.2072 9 13.3089 9 10.1152 9 1.0 1 8.2635 2 49.3784 1 45.0 2 6.0 2 34.0 2 1.0782 1 42.0 2 77.2743 2)
Average genome size in population (length): 34.714
Average program size in population (points): 35.714
Average percent parens in population: 0.035
Minimum age in population: 13.515625
Maximum age in population: 18.142578125
Average age in population: 16.266353515625
Median age in population: 16.30712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.038
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13216443
--- Timings ---
Current time: 1529616010418 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.8 seconds, 39.3%
Fitness Testing:     18.5 seconds, 49.0%
Report:               4.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 51098.65229999997
Test mean error for best: 25.54933
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 1.222237E-4   
Correct output: 9.2244792798   | Program output: 0.9907191118  
Correct output: 43.1776070233  | Program output: -0.0621456347 
Correct output: 54.4783529715  | Program output: -0.0161188674 
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -0.0030032301 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction in1} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_sin} {:instruction in1} {:instruction integer_swap} {:instruction float_sub} {:instruction float_sin} {:instruction float_swap} {:instruction integer_min} {:instruction float_pop} {:instruction in1} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_yankdup} {:instruction in2} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_216} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_div} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction integer_max} {:instruction integer_dup} {:instruction 70} {:instruction float_frominteger} {:instruction tag_integer_234} {:instruction float_inc} {:instruction integer_min} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_pop} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_min} {:instruction float_div} {:instruction float_sub} {:instruction in1} {:instruction float_mult} {:instruction tag_integer_1076} {:instruction tagged_245} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_rot})
Best program: (print_float in1 in2 float_div float_dup_items integer_swap float_sin in1 integer_swap float_sub float_sin float_swap integer_min float_pop in1 float_shove integer_yankdup float_shove integer_yankdup in2 float_stackdepth float_shove float_stackdepth float_max tag_float_216 float_yankdup integer_min float_dup_times integer_min integer_shove float_stackdepth float_min float_div float_rot integer_stackdepth integer_div integer_max integer_dup 70 float_frominteger tag_integer_234 float_inc integer_min integer_sub float_mult integer_mult integer_dup_items float_dec float_pop float_yankdup float_add integer_min float_div float_sub in1 float_mult tag_integer_1076 tagged_245 print_float integer_stackdepth float_rot)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 32.7717 13 8.2338 9 43.2398 12 54.4945 12 99.0 2 14.0 7 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1088.7398
Mean: 21.774796
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3796.3196035000005
Median total errors in population: 1273.0
Error averages by case: (150.15678709999995 3.36 149.4902889 4.123 148.9399804 3.103 151.3956875 4.177 127.6244232 3.206 115.6873068 3.195 116.31519600000001 2.323 144.39783749999998 3.232 178.9863776 3.373 110.10019039999999 2.354 154.2112508 4.183 110.9451352 2.415 150.86763729999998 3.966 163.73615360000002 12.209 189.67138610000012 13.143 189.29634519999988 11.384 192.00342820000003 3.275 138.02529759999996 3.952 177.6972899 3.285 144.8098898 3.252 110.228686 3.23 134.52904519999998 3.219 116.21206060000002 2.423 142.30725280000001 4.177 178.7626698 3.363)
Error minima by case: (40.5549 2 50.0 2 49.0 2 52.0 3 12.7106 2 0.2894 2 9.0 1 3.0175 2 79.0 2 0.5418 1 55.0 3 3.0 1 15.0791 1 8.2338 9 5.6896 9 5.6112 10 67.9082 1 0.9171 2 49.3784 1 45.0 2 2.5571 2 1.1024 2 1.0782 1 42.0 3 77.2743 2)
Average genome size in population (length): 34.696
Average program size in population (points): 35.696
Average percent parens in population: 0.035
Minimum age in population: 15.125
Maximum age in population: 19.87890625
Average age in population: 17.67238330078125
Median age in population: 17.714111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14085843
--- Timings ---
Current time: 1529616013408 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.0 seconds, 39.4%
Fitness Testing:     19.9 seconds, 48.8%
Report:               4.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 51140.47029999997
Test mean error for best: 25.57024
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.9247511281 
Correct output: 9.2244792798   | Program output: 0.7375799281  
Correct output: 43.1776070233  | Program output: 0.4372598761  
Correct output: 54.4783529715  | Program output: -0.0786185418 
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -0.4573926812 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction float_dec} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max float_sub integer_dup_items print_integer integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min float_dec in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 31.8468 12 8.4869 9 42.7403 11 54.557 9 99.0 2 13.5456 11 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1086.1766000000002
Mean: 21.723532
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3835.1741533000004
Median total errors in population: 1273.0
Error averages by case: (152.5017109 3.506 153.1769952 4.306 152.99832660000007 3.254 155.1220341 4.326 130.89397219999998 3.316 117.90677219999999 3.268 118.88598739999999 2.495 147.3708848 3.337 181.76150610000008 3.559 113.8786278 2.508 158.05085529999997 4.341 113.58952749999997 2.598 155.12813439999994 6.185 155.2751879000002 11.819 176.89191050000042 12.569 178.19175409999949 11.363 194.16375 3.455 138.79373109999995 6.201 179.12688200000005 3.47 148.30131039999998 3.393 114.1085589 3.331 136.73783410000004 3.379 118.7203392 2.604 145.96627939999996 4.334 181.1542812 3.56)
Error minima by case: (3.3193 2 38.2645 2 31.2852 2 38.3118 3 22.6369 2 2.9684 2 0.1157 1 29.4613 2 65.4083 2 0.349 1 39.167 3 3.0 1 13.0914 1 7.2245 9 13.3089 10 10.5122 9 94.352 1 8.2635 2 12.1429 1 36.6325 2 5.964 2 25.3414 2 2.6139 1 30.3791 3 40.0388 2)
Average genome size in population (length): 39.611
Average program size in population (points): 40.611
Average percent parens in population: 0.030
Minimum age in population: 16.1982421875
Maximum age in population: 20.89697265625
Average age in population: 19.09836206054688
Median age in population: 19.15234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.063
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 15080993
--- Timings ---
Current time: 1529616016533 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.3 seconds, 39.5%
Fitness Testing:     21.3 seconds, 48.5%
Report:               5.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 51140.47029999997
Test mean error for best: 25.57024
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.9247511281 
Correct output: 9.2244792798   | Program output: 0.7375799281  
Correct output: 43.1776070233  | Program output: 0.4372598761  
Correct output: 54.4783529715  | Program output: -0.0786185418 
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: -0.4573926812 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction float_dec} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max float_sub integer_dup_items print_integer integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min float_dec in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 31.8468 12 8.4869 9 42.7403 11 54.557 9 99.0 2 13.5456 11 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1086.1766000000002
Mean: 21.723532
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3810.8367916999973
Median total errors in population: 1095.1255
Error averages by case: (157.90160659999995 3.661 153.87422830000003 4.232 153.6480056 3.169 155.8626949 4.245 137.87939360000001 3.245 123.80319099999998 3.207 124.81356269999998 2.707 154.3369597 3.258 188.199852 3.803 115.30328679999997 2.392 158.76341879999998 4.248 119.42521740000001 2.773 145.31332389999938 10.424 126.90560740000085 10.992 149.34068640000098 11.745 155.70470659999884 11.054 193.11553390000003 3.35 126.39729960000047 10.057 183.58910339999994 3.702 149.0601462 3.285 121.3106454 3.249 136.00681030000004 3.289 124.12223449999996 2.793 146.75720610000002 4.231 186.50207059999997 3.789)
Error minima by case: (40.4056 2 43.7281 2 49.0 2 52.0 3 4.7464 2 1.8655 2 10.0 1 18.1154 2 76.9064 2 7.0 1 55.0 3 4.0 1 1.3837 2 6.2245 8 12.3089 9 10.1162 9 42.3802 2 5.1906 2 18.2292 1 20.9767 2 1.073 2 22.2352 2 10.0 1 35.1242 3 45.1251 2)
Average genome size in population (length): 45.628
Average program size in population (points): 46.628
Average percent parens in population: 0.023
Minimum age in population: 18.07421875
Maximum age in population: 22.20849609375
Average age in population: 20.46554235839844
Median age in population: 20.5260009765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 214
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.106
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16227568
--- Timings ---
Current time: 1529616019647 milliseconds
Total Time:          47.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.5 seconds, 39.4%
Fitness Testing:     22.8 seconds, 48.5%
Report:               5.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 51195.6244
Test mean error for best: 25.59781
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 67.1232514128 
Correct output: 148.63744302   | Program output: 98.63744302   
Correct output: 130.4153758773 | Program output: 77.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 40.3253799002 
Correct output: 144.7196283487 | Program output: 88.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 0.8719377279  
Correct output: 9.2244792798   | Program output: 0.8719377279  
Correct output: 43.1776070233  | Program output: 0.8719377279  
Correct output: 54.4783529715  | Program output: 0.8719377279  
Correct output: 116.7753441439 | Program output: 17.7753441439 
Correct output: -14.0030129507 | Program output: 0.8719377279  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 49.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 12.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 66.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction -31.356780412517054} {:instruction float_dup_items} {:instruction float_inc} {:instruction tag_integer_42} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction tag_integer_981} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (float_mod -31.356780412517054 float_dup_items float_inc tag_integer_42 integer_max integer_sub integer_dec float_min integer_dup_items tag_integer_981 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 51.0 3 50.0 2 53.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 8.0 1 56.0 3 4.0 1 33.6435 11 8.3525 8 42.3057 9 53.6064 10 99.0 2 14.875 12 79.0 2 46.0 2 7.0 2 35.0 2 10.0 1 43.0 3 80.0 2]
Total: 1085.7831
Mean: 21.715662
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2668.98536609999
Median total errors in population: 1089.8145
Error averages by case: (113.13606639999998 3.187 111.4765875 3.928 111.80103900000002 2.932 113.77224310000004 3.941 91.99998939999998 2.786 78.35837969999997 2.764 78.41026090000004 2.264 109.21485740000003 2.788 145.1189129 3.326 69.91471710000002 2.077 117.0275634 3.958 72.73956880000001 2.291 91.07802139999912 11.196 71.8101774999996 10.467 103.34769460000021 11.564 112.79215829999872 10.558 151.25245310000005 3.026 73.9508132000009 10.265 140.71680899999996 3.244 106.09172670000004 2.997 74.4631166 2.786 90.75216769999994 3.001 77.6290403 2.336 103.95684069999997 3.944 143.23716140000002 3.311)
Error minima by case: (40.4056 2 50.0 2 49.0 2 52.0 3 25.0 2 1.8655 2 9.0 1 44.0 2 76.9064 2 7.0 1 55.0 3 3.0 1 1.3837 2 7.2245 8 13.3089 8 10.4806 8 17.7753 1 5.1906 2 18.2292 1 45.0 2 6.0 2 12.7648 2 9.0 1 42.0 3 45.1251 2)
Average genome size in population (length): 43.627
Average program size in population (points): 44.627
Average percent parens in population: 0.023
Minimum age in population: 19.175537109375
Maximum age in population: 23.825927734375
Average age in population: 21.87673626708984
Median age in population: 21.92242431640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 196
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.11
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17320693
--- Timings ---
Current time: 1529616022740 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.7 seconds, 39.4%
Fitness Testing:     24.3 seconds, 48.5%
Report:               6.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 51081.216199999995
Test mean error for best: 25.54061
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 68.1232514128 
Correct output: 148.63744302   | Program output: 99.63744302   
Correct output: 130.4153758773 | Program output: 78.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 41.3253799002 
Correct output: 144.7196283487 | Program output: 89.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.1794045353 
Correct output: 9.2244792798   | Program output: 0.9667276973  
Correct output: 43.1776070233  | Program output: 0.9930169952  
Correct output: 54.4783529715  | Program output: 0.796388661   
Correct output: 116.7753441439 | Program output: 18.7753441439 
Correct output: -14.0030129507 | Program output: 0.5011602306  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 50.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 13.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 67.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_div} {:instruction float_yankdup} {:instruction in1} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_flush} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (print_float integer_dup_items integer_fromfloat float_tan integer_div float_yankdup in1 in2 float_div float_dup_items integer_swap float_shove integer_dup_items integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_inc float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_flush print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [48.0 2 50.0 2 49.0 3 52.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 7.0 1 55.0 3 4.0 1 32.5922 10 8.2578 9 42.1846 12 53.682 10 98.0 2 14.5042 11 79.0 2 45.0 2 7.0 2 34.0 2 10.0 1 42.0 3 80.0 2]
Total: 1077.2208
Mean: 21.544416
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3137.1640732999927
Median total errors in population: 1089.8145
Error averages by case: (129.20197210000003 3.38 130.77950620000004 4.128 130.91853300000008 3.099 132.9474102 4.128 109.74268889999996 3.024 94.7271895 3.002 95.31311850000002 2.415 126.48662540000002 3.034 160.63339789999998 3.455 90.79450250000001 2.285 136.04379869999994 4.146 89.68287339999998 2.464 112.67311819999927 11.407 92.59547100000067 10.333 124.5134231000004 11.57 134.00521519999958 10.506 170.41288420000006 3.237 95.91933820000017 10.417 155.05724730000009 3.388 125.64174620000001 3.191 92.28102669999998 3.034 111.12710479999997 3.205 94.48896320000003 2.491 123.48177489999998 4.134 158.76814400000004 3.454)
Error minima by case: (40.4056 2 16.1233 2 48.6374 2 24.4154 3 4.7464 2 2.8655 2 9.0 1 18.1154 2 76.9064 2 7.0 1 32.7196 3 3.0 1 17.8515 2 7.2245 7 26.8224 8 15.5216 7 17.7753 1 0.9171 2 18.2292 2 3.3718 2 1.073 2 12.7648 2 9.0 1 23.5194 3 45.1251 2)
Average genome size in population (length): 45.758
Average program size in population (points): 46.758
Average percent parens in population: 0.022
Minimum age in population: 21.15478515625
Maximum age in population: 25.11288452148438
Average age in population: 23.32426037597656
Median age in population: 23.35922241210938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 18468043
--- Timings ---
Current time: 1529616025856 milliseconds
Total Time:          53.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.9 seconds, 39.3%
Fitness Testing:     25.8 seconds, 48.5%
Report:               6.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 51081.216199999995
Test mean error for best: 25.54061
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 68.1232514128 
Correct output: 148.63744302   | Program output: 99.63744302   
Correct output: 130.4153758773 | Program output: 78.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 41.3253799002 
Correct output: 144.7196283487 | Program output: 89.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.1794045353 
Correct output: 9.2244792798   | Program output: 0.9667276973  
Correct output: 43.1776070233  | Program output: 0.9930169952  
Correct output: 54.4783529715  | Program output: 0.796388661   
Correct output: 116.7753441439 | Program output: 18.7753441439 
Correct output: -14.0030129507 | Program output: 0.5011602306  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 50.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 13.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 67.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_div} {:instruction float_yankdup} {:instruction in1} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_flush} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (print_float integer_dup_items integer_fromfloat float_tan integer_div float_yankdup in1 in2 float_div float_dup_items integer_swap float_shove integer_dup_items integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_inc float_max float_dup_times integer_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_flush print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [48.0 2 50.0 2 49.0 3 52.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 7.0 1 55.0 3 4.0 1 32.5922 10 8.2578 9 42.1846 12 53.682 10 98.0 2 14.5042 11 79.0 2 45.0 2 7.0 2 34.0 2 10.0 1 42.0 3 80.0 2]
Total: 1077.2208
Mean: 21.544416
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2731.1142114000013
Median total errors in population: 1086.1766000000002
Error averages by case: (115.54949560000001 3.155 112.7454142 3.932 112.68398920000006 2.897 114.90530070000005 3.941 92.94888499999999 2.759 80.3679028 2.747 80.94314460000002 2.181 110.32052700000001 2.771 146.96058729999993 3.216 71.84713849999999 2.035 118.01533989999997 3.933 75.31532739999999 2.252 95.41288719999962 11.357 75.95609540000116 9.885 107.66485400000077 11.357 117.75211630000038 9.929 156.21665920000007 2.997 78.38974389999943 10.694 143.39307220000006 3.164 107.59005280000001 2.969 75.47085649999998 2.756 96.29912559999997 2.982 80.27152720000001 2.261 105.25903709999999 3.943 145.52613180000006 3.196)
Error minima by case: (6.5944 2 50.0 2 49.0 2 52.0 3 11.913 2 4.8655 2 9.0 1 13.202 2 2.0936 2 7.0 1 55.0 3 3.0 1 1.4148 1 7.4869 7 4.4949 8 15.7957 8 17.7753 1 0.9171 2 18.2292 2 45.0 2 6.0 2 9.0821 2 9.0 1 42.0 3 33.8749 2)
Average genome size in population (length): 45.163
Average program size in population (points): 46.163
Average percent parens in population: 0.022
Minimum age in population: 22.445556640625
Maximum age in population: 26.53080749511719
Average age in population: 24.68843432617188
Median age in population: 24.71813201904297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 181
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.119
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 19597868
--- Timings ---
Current time: 1529616029006 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 39.3%
Fitness Testing:     27.4 seconds, 48.6%
Report:               6.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 50935.91139999998
Test mean error for best: 25.46796
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 68.1232514128 
Correct output: 148.63744302   | Program output: 99.63744302   
Correct output: 130.4153758773 | Program output: 78.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 41.3253799002 
Correct output: 144.7196283487 | Program output: 89.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 0.8205954647  
Correct output: 9.2244792798   | Program output: 1.9667276973  
Correct output: 43.1776070233  | Program output: 1.9930169952  
Correct output: 54.4783529715  | Program output: 1.796388661   
Correct output: 116.7753441439 | Program output: 18.7753441439 
Correct output: -14.0030129507 | Program output: 1.5011602306  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 50.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 13.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 67.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction float_inc} {:instruction float_dec} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max float_sub integer_dup_items print_integer integer_dup_items -14.92010430989157 integer_div integer_inc in1 float_inc float_dec in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times float_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 50.0 2 49.0 3 52.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 7.0 1 55.0 3 4.0 1 33.5922 11 7.2578 9 41.1846 12 52.682 10 98.0 2 15.5042 10 79.0 2 45.0 2 7.0 2 34.0 2 10.0 1 42.0 3 80.0 2]
Total: 1076.2208
Mean: 21.524416
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2815.015136600002
Median total errors in population: 1086.1766000000002
Error averages by case: (119.85566750000002 3.323 116.59452560000004 3.961 116.86569060000005 3.03 118.85688440000006 4.004 98.18386269999998 2.899 83.72181229999998 2.896 85.46989980000006 2.337 115.12199350000004 2.905 151.69675230000004 3.365 75.72818440000003 2.155 122.03999959999992 4.014 79.9542302 2.393 95.38568930000011 11.162 74.48297120000105 9.87 108.28719620000057 11.195 120.1742784000007 10.057 156.79994030000006 3.076 80.74375999999906 10.076 147.1367549000001 3.305 111.31731740000004 3.053 80.8791121 2.908 97.19547339999995 3.072 84.70009480000009 2.433 109.19675429999998 4.005 149.7822914000001 3.35)
Error minima by case: (40.4056 2 15.1233 2 47.6374 2 23.4154 3 1.6094 2 3.8655 2 9.0 1 11.7596 2 76.9064 2 7.0 1 31.7196 3 3.0 1 1.4148 1 7.2332 7 7.2597 9 9.1659 9 17.7753 1 11.0565 2 18.2292 1 2.3718 2 5.2827 2 12.7648 2 9.0 1 22.5194 3 45.1251 2)
Average genome size in population (length): 45.612
Average program size in population (points): 46.612
Average percent parens in population: 0.022
Minimum age in population: 23.95846557617188
Maximum age in population: 28.01869201660156
Average age in population: 26.25691246795654
Median age in population: 26.32558441162109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.119
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 20739093
--- Timings ---
Current time: 1529616032236 milliseconds
Total Time:          59.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.3 seconds, 39.2%
Fitness Testing:     29.0 seconds, 48.7%
Report:               7.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 50934.76539999999
Test mean error for best: 25.46738
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 68.1232514128 
Correct output: 148.63744302   | Program output: 99.63744302   
Correct output: 130.4153758773 | Program output: 78.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 41.3253799002 
Correct output: 144.7196283487 | Program output: 89.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 1.8719377279  
Correct output: 9.2244792798   | Program output: 1.8719377279  
Correct output: 43.1776070233  | Program output: 1.8719377279  
Correct output: 54.4783529715  | Program output: 1.8719377279  
Correct output: 116.7753441439 | Program output: 18.7753441439 
Correct output: -14.0030129507 | Program output: 1.8719377279  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 50.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 13.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 67.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction -31.356780412517054} {:instruction float_dup_items} {:instruction float_inc} {:instruction tag_integer_42} {:instruction integer_max} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_min} {:instruction integer_dup_items} {:instruction tag_integer_981} {:instruction in2} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction tagged_873} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (float_mod -31.356780412517054 float_dup_items float_inc tag_integer_42 integer_max integer_sub integer_dec float_min integer_dup_items tag_integer_981 in2 float_min float_sin in1 float_stackdepth float_max float_dup_times float_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float tagged_873 float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 50.0 2 49.0 3 52.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 7.0 1 55.0 3 4.0 1 34.6435 11 7.3525 8 41.3057 9 52.6064 10 98.0 2 15.875 12 79.0 2 45.0 2 7.0 2 34.0 2 10.0 1 42.0 3 80.0 2]
Total: 1075.7831
Mean: 21.515661
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2591.104830299997
Median total errors in population: 1084.9940000000001
Error averages by case: (106.90588249999993 3.249 109.49744380000003 3.646 109.42778570000004 3.062 111.66127280000002 3.874 85.20264519999998 2.685 71.66031480000001 2.683 72.69253290000003 2.237 102.7023413 2.71 139.80799059999998 3.289 68.55050770000001 1.995 114.75421259999999 3.873 67.0034194 2.317 92.48237090000049 11.044 71.9830589000005 10.146 103.57373599999991 10.968 113.3377923000008 10.602 152.3353064 2.966 75.1390850999999 9.386 134.49402840000005 3.23 104.34866730000002 2.929 67.47764200000002 2.706 92.3535383 2.941 71.82938560000002 2.342 102.036675 3.878 137.77919479999994 3.31)
Error minima by case: (32.0799 2 15.1233 2 1.3626 2 22.5846 3 10.0799 2 2.9201 2 5.9201 1 29.0799 2 64.0799 2 7.0 1 11.2804 3 4.0 1 8.4244 2 7.2245 7 15.7252 8 25.0918 9 17.7753 2 0.9171 2 18.2292 2 2.3718 2 7.0 2 12.7648 2 5.9201 1 22.5194 3 45.1251 2)
Average genome size in population (length): 44.923
Average program size in population (points): 45.923
Average percent parens in population: 0.022
Minimum age in population: 25.24176025390625
Maximum age in population: 29.57597351074219
Average age in population: 27.80507183456421
Median age in population: 27.84120559692383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.154
Error (vector) diversity:			 0.157
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 21862818
--- Timings ---
Current time: 1529616035359 milliseconds
Total Time:          62.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.6 seconds, 39.2%
Fitness Testing:     30.5 seconds, 48.6%
Report:               7.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 50661.010699999984
Test mean error for best: 25.33051
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 69.1232514128 
Correct output: 148.63744302   | Program output: 100.63744302  
Correct output: 130.4153758773 | Program output: 79.4153758773 
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 42.3253799002 
Correct output: 144.7196283487 | Program output: 90.7196283487 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 1.0752488719  
Correct output: 9.2244792798   | Program output: 2.7375799281  
Correct output: 43.1776070233  | Program output: 2.4372598761  
Correct output: 54.4783529715  | Program output: 1.9213814582  
Correct output: 116.7753441439 | Program output: 19.7753441439 
Correct output: -14.0030129507 | Program output: 1.5426073188  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 51.3718423817 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 14.7647765473 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 68.5193913412 
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction float_dec} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max float_sub integer_dup_items print_integer integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min float_dec in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times float_inc float_stackdepth float_max float_dup_times float_inc in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_dup_items tag_float_932 float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 49.0 3 48.0 2 51.0 3 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 6.0 1 54.0 3 4.0 1 33.8468 12 6.4869 9 40.7403 11 52.557 11 97.0 2 15.5456 12 79.0 2 44.0 2 7.0 2 33.0 2 10.0 1 41.0 3 80.0 2]
Total: 1069.1766000000002
Mean: 21.383532
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2702.108739199993
Median total errors in population: 1079.1766000000002
Error averages by case: (110.61321830000004 3.129 114.78323660000001 3.159 114.85266680000002 3.512 116.87770989999997 3.866 88.67628209999998 2.834 74.77075479999999 2.843 75.83870230000002 2.155 105.93216490000002 2.854 142.02867279999992 3.184 73.89283350000001 1.985 120.07210609999997 3.864 70.19197839999998 2.233 97.45085549999999 10.937 77.56065190000093 10.018 109.77845030000006 11.42 119.28209120000068 10.989 156.5382392 2.947 80.21681749999932 10.399 138.68131610000006 3.144 109.66984299999996 2.918 70.8956504 2.86 96.78542559999998 2.938 75.18830940000002 2.244 107.35982809999999 3.87 140.7039345 3.165)
Error minima by case: (6.5944 2 15.1233 1 47.6374 2 23.4154 2 10.0799 2 2.9201 2 5.9201 1 27.995 2 2.0936 2 6.0 1 31.7196 2 3.0 1 17.8515 1 6.4869 7 14.6378 8 9.1603 7 2.0 1 0.9171 2 21.2292 1 2.3718 2 6.0 2 9.7648 2 5.9201 1 22.5194 2 33.8749 2)
Average genome size in population (length): 45.0
Average program size in population (points): 46.0
Average percent parens in population: 0.022
Minimum age in population: 26.75341796875
Maximum age in population: 31.34365844726562
Average age in population: 29.08137938308716
Median age in population: 29.10720348358154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.147
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 22987968
--- Timings ---
Current time: 1529616038445 milliseconds
Total Time:          65.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.7 seconds, 39.1%
Fitness Testing:     32.0 seconds, 48.7%
Report:               7.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 48613.59549999998
Test mean error for best: 24.30680
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 136.2465028256
Correct output: 148.63744302   | Program output: 199.27488604  
Correct output: 130.4153758773 | Program output: 156.8307517545
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 82.6507598003 
Correct output: 144.7196283487 | Program output: 179.4392566973
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: 1.6411909293  
Correct output: 9.2244792798   | Program output: 3.9334553947  
Correct output: 43.1776070233  | Program output: 3.9860339903  
Correct output: 54.4783529715  | Program output: 3.5927773221  
Correct output: 116.7753441439 | Program output: 37.5506882878 
Correct output: -14.0030129507 | Program output: 3.0023204613  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 100.7436847634
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 27.5295530946 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 135.0387826825
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items print_integer integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [48.0 2 18.1233 10 50.6374 8 26.4154 10 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 34.3254 8 34.7196 10 4.0 1 34.4128 10 5.291 10 39.1916 9 50.8856 10 79.2247 13 17.0053 11 79.0 2 5.3718 12 7.0 2 20.2352 11 10.0 1 25.5194 12 80.0 2]
Total: 1006.3585
Mean: 20.12717
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2130.9582958000055
Median total errors in population: 1077.2873
Error averages by case: (90.52527780000005 2.967 89.29914820000002 2.816 89.32881860000002 3.457 91.61375459999996 3.65 68.10396309999999 2.627 54.001393 2.635 53.91757200000003 1.919 85.80614460000001 2.634 122.36716580000001 2.996 48.121745300000015 1.753 94.61894289999998 3.656 48.16474939999998 2.018 74.87879979999958 10.247 55.364567900000004 9.689 87.50813769999944 11.735 97.10755650000041 10.538 133.22318429999999 2.731 57.746133200000294 10.201 119.07193900000004 2.929 84.17008449999996 2.699 49.95989720000001 2.639 72.0923395 2.711 53.354410900000005 2.004 81.7687151 3.663 120.95085490000002 2.979)
Error minima by case: (17.113 2 15.1233 1 47.6374 1 23.4154 2 26.0 2 2.8655 2 1.539 1 45.0 2 76.9064 2 6.0 1 31.7196 2 4.0 1 17.8515 1 5.291 7 39.1916 8 43.5216 8 1.0 1 0.0829 2 18.2292 1 2.3718 2 7.0 2 8.7648 2 10.0 1 22.5194 2 45.1251 2)
Average genome size in population (length): 44.854
Average program size in population (points): 45.854
Average percent parens in population: 0.022
Minimum age in population: 27.75341796875
Maximum age in population: 32.73729610443115
Average age in population: 30.55939496898651
Median age in population: 30.63361024856567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.127
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 24109493
--- Timings ---
Current time: 1529616041574 milliseconds
Total Time:          68.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 39.0%
Fitness Testing:     33.6 seconds, 48.7%
Report:               8.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 48527.933899999975
Test mean error for best: 24.26397
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -1.9524971813 
Correct output: 9.2244792798   | Program output: 1.4125905609  
Correct output: 43.1776070233  | Program output: -1.6528361528 
Correct output: 54.4783529715  | Program output: -1.8904875668 
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: -1.9819973109 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.265361497914306} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction 75} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_min} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max integer_max float_sub integer_dup_items print_integer integer_dup_items -14.265361497914306 integer_div integer_inc in1 integer_min 75 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_min tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 16.1233 10 48.6374 8 24.4154 10 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 32.3254 8 32.7196 10 4.0 1 30.8191 11 7.8119 10 44.8304 12 56.3688 12 81.2247 13 12.021 10 79.0 2 3.3718 10 7.0 2 22.2352 12 10.0 1 23.5194 12 80.0 2]
Total: 1005.4233999999999
Mean: 20.108467
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2638.3898661000053
Median total errors in population: 1076.2208
Error averages by case: (110.35970740000005 3.202 108.94016450000002 3.128 109.00049380000003 3.641 111.0975919 3.914 90.2892595 2.826 76.61050780000001 2.817 75.58713819999998 2.115 107.74496219999999 2.846 141.68845240000002 3.246 68.72629530000003 2.056 114.19005559999995 3.926 69.91796109999999 2.27 93.95765919999968 10.42 73.7582973000005 9.639 105.41766269999877 11.895 114.88965860000043 10.435 152.6530812 3.042 76.91851170000005 10.02 138.29667510000002 3.149 103.81460569999997 2.993 72.52124350000003 2.843 92.25708039999998 2.989 75.00782579999998 2.247 101.59497160000001 3.939 140.3350036 3.217)
Error minima by case: (7.5944 2 16.1233 2 48.0 2 24.4154 3 25.0 2 3.8655 2 7.0321 1 24.3799 2 3.0936 2 6.0 1 32.7196 3 3.0 1 3.4148 1 5.291 7 15.6729 8 26.9736 8 17.7753 1 0.0829 2 18.2292 2 3.3718 2 6.0 2 9.4704 2 9.0 1 23.5194 3 34.8749 2)
Average genome size in population (length): 45.225
Average program size in population (points): 46.225
Average percent parens in population: 0.022
Minimum age in population: 29.70612144470215
Maximum age in population: 34.11742305755615
Average age in population: 32.13485617017746
Median age in population: 32.16696429252625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.114
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 25240293
--- Timings ---
Current time: 1529616044773 milliseconds
Total Time:          72.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 39.0%
Fitness Testing:     35.1 seconds, 48.7%
Report:               8.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 48527.933899999975
Test mean error for best: 24.26397
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -1.9524971813 
Correct output: 9.2244792798   | Program output: 1.4125905609  
Correct output: 43.1776070233  | Program output: -1.6528361528 
Correct output: 54.4783529715  | Program output: -1.8904875668 
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: -1.9819973109 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.265361497914306} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction 75} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_min} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max integer_max float_sub integer_dup_items print_integer integer_dup_items -14.265361497914306 integer_div integer_inc in1 integer_min 75 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_min tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 16.1233 10 48.6374 8 24.4154 10 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 32.3254 8 32.7196 10 4.0 1 30.8191 11 7.8119 10 44.8304 12 56.3688 12 81.2247 13 12.021 10 79.0 2 3.3718 10 7.0 2 22.2352 12 10.0 1 23.5194 12 80.0 2]
Total: 1005.4233999999999
Mean: 20.108467
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2225.939781900001
Median total errors in population: 1075.7831
Error averages by case: (95.53832920000004 2.994 91.77982730000005 3.15 92.41540670000008 3.388 94.20853009999999 3.787 72.7365875 2.629 59.52325059999999 2.632 59.890050400000014 1.964 90.38910220000001 2.638 127.71688549999999 2.998 51.11294160000003 1.901 97.46556369999993 3.796 54.08546609999999 2.036 77.76299450000009 10.357 56.71114490000024 9.455 89.38027279999967 11.304 99.36657080000022 10.3 136.4920724000001 2.943 60.63147400000041 10.163 123.99624150000002 2.949 86.44126559999997 2.9 54.87921890000001 2.633 74.87050669999999 2.899 59.273544300000005 2.047 84.38470380000003 3.837 126.20683080000002 2.981)
Error minima by case: (40.4056 1 16.1233 2 47.0 1 24.4154 2 25.0 2 2.8655 2 10.0 1 30.8846 2 76.9064 2 3.8719 1 32.7196 2 4.0 1 3.0439 2 5.2578 7 1.2759 8 10.0248 7 1.0 1 0.0829 2 18.2292 1 3.3718 2 7.0 2 3.3113 2 10.0 1 23.5194 2 45.1251 2)
Average genome size in population (length): 45.978
Average program size in population (points): 46.978
Average percent parens in population: 0.022
Minimum age in population: 31.47757148742676
Maximum age in population: 35.44293308258057
Average age in population: 33.56124300026894
Median age in population: 33.57453107833862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.158
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 26389943
--- Timings ---
Current time: 1529616047998 milliseconds
Total Time:          75.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.3 seconds, 39.0%
Fitness Testing:     36.8 seconds, 48.8%
Report:               9.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 48527.933899999975
Test mean error for best: 24.26397
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -1.9524971813 
Correct output: 9.2244792798   | Program output: 1.4125905609  
Correct output: 43.1776070233  | Program output: -1.6528361528 
Correct output: 54.4783529715  | Program output: -1.8904875668 
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: -1.9819973109 
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.265361497914306} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction 75} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_min} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1} {:instruction integer_max})
Best program: (integer_max integer_max float_sub integer_dup_items print_integer integer_dup_items -14.265361497914306 integer_div integer_inc in1 integer_min 75 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_min tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1 integer_max)
Errors: [48.0 2 16.1233 10 48.6374 8 24.4154 10 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 32.3254 8 32.7196 10 4.0 1 30.8191 11 7.8119 10 44.8304 12 56.3688 12 81.2247 13 12.021 10 79.0 2 3.3718 10 7.0 2 22.2352 12 10.0 1 23.5194 12 80.0 2]
Total: 1005.4233999999999
Mean: 20.108467
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2543.802895700001
Median total errors in population: 1067.7719000000002
Error averages by case: (108.3869125000001 3.264 100.60336320000025 4.374 104.04266390000032 3.625 103.4173866999999 4.562 88.47031419999998 2.811 74.65170110000001 2.803 73.526487 2.229 105.78960580000002 2.827 140.44396219999996 3.289 65.95415080000012 2.678 107.05168519999974 4.583 67.81767310000004 2.333 90.50091719999993 10.264 69.21205390000027 9.777 100.84482689999948 11.505 111.31625290000011 10.36 145.3269378000001 4.084 73.60367990000013 10.061 136.0887519 3.238 94.6833880999998 3.925 70.8099265 2.82 85.56630729999995 3.849 72.68100449999997 2.344 94.77517430000013 4.792 138.5697688 3.271)
Error minima by case: (40.4056 1 16.1233 1 47.0 2 24.4154 2 26.0 2 0.1345 2 10.0 1 45.0 2 26.6071 2 5.0 1 32.7196 2 4.0 1 16.2922 2 1.448 7 32.7541 8 43.5216 8 2.0 1 0.0829 2 18.2292 1 3.3718 2 7.0 2 12.7648 2 1.9787 1 23.5194 2 45.1251 2)
Average genome size in population (length): 47.749
Average program size in population (points): 48.749
Average percent parens in population: 0.021
Minimum age in population: 32.89932155609131
Maximum age in population: 36.84065043926239
Average age in population: 34.97787991404533
Median age in population: 35.00730711221695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.167
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 27583818
--- Timings ---
Current time: 1529616051256 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.5 seconds, 38.9%
Fitness Testing:     38.4 seconds, 48.9%
Report:               9.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 48579.768099999994
Test mean error for best: 24.28988
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.3588090707 
Correct output: 9.2244792798   | Program output: 1.9334553947  
Correct output: 43.1776070233  | Program output: 1.9860339903  
Correct output: 54.4783529715  | Program output: 1.5927773221  
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: 1.0023204613  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_times print_integer integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [48.0 2 16.1233 10 48.6374 8 24.4154 10 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 32.3254 8 32.7196 10 4.0 1 32.4128 11 7.291 10 41.1916 10 52.8856 10 81.2247 13 15.0053 10 79.0 2 3.3718 10 7.0 2 22.2352 12 10.0 1 23.5194 12 80.0 2]
Total: 998.3585
Mean: 19.96717
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2101.018640399999
Median total errors in population: 1067.2208
Error averages by case: (91.43239520000006 2.944 74.38821159999999 6.769 89.4555807000007 5.367 79.44665699999969 6.778 69.48913619999998 2.631 55.88167329999999 2.621 55.7693926 1.891 87.4562542 2.65 123.4088016 2.975 58.84041760000045 4.883 85.05417459999916 6.81 50.021606399999975 2.005 74.71181349999955 10.1 52.40709489999968 9.994 84.76583909999977 10.935 94.58781799999983 10.401 124.00658130000099 7.664 57.706391700000054 10.075 120.18177549999999 2.914 65.57676410000032 7.077 51.19908100000002 2.633 64.79841090000038 6.793 55.212300399999975 1.985 73.51005729999973 7.687 122.1754117 2.953)
Error minima by case: (7.5944 2 16.1233 2 47.0 2 24.4154 2 11.0799 2 1.9201 2 0.6281 1 30.0799 2 3.0936 2 5.0 1 32.7196 3 3.0 1 4.9314 2 3.291 7 14.4536 8 3.1529 8 17.7753 2 0.0829 2 18.2292 1 3.3718 2 6.0 1 3.2943 2 9.0 1 23.5194 2 34.8749 2)
Average genome size in population (length): 48.362
Average program size in population (points): 49.362
Average percent parens in population: 0.020
Minimum age in population: 34.5097439289093
Maximum age in population: 38.3450328707695
Average age in population: 36.5368151025176
Median age in population: 36.60340738296509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.158
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 28792968
--- Timings ---
Current time: 1529616054505 milliseconds
Total Time:          81.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.8 seconds, 38.8%
Fitness Testing:     40.0 seconds, 48.9%
Report:               9.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 48017.70949999999
Test mean error for best: 24.00885
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -41.4056316151
Correct output: 118.1232514128 | Program output: 135.2465028256
Correct output: 148.63744302   | Program output: 198.27488604  
Correct output: 130.4153758773 | Program output: 155.8307517545
Correct output: 65.2536404507  | Program output: 90.2536404507 
Correct output: 4.8655188188   | Program output: 16.8655188188 
Correct output: -62.096010847  | Program output: -53.096010847 
Correct output: 51.8846341345  | Program output: 95.8846341345 
Correct output: -156.9063992578 | Program output: -77.9063992578
Correct output: 48.3253799002  | Program output: 81.6507598003 
Correct output: 144.7196283487 | Program output: 178.4392566973
Correct output: -54.8304712332 | Program output: -51.8304712332
Correct output: -32.7715995596 | Program output: -0.2848652508 
Correct output: 9.2244792798   | Program output: 2.9826532799  
Correct output: 43.1776070233  | Program output: -0.9967902109 
Correct output: 54.4783529715  | Program output: -0.8970268887 
Correct output: 116.7753441439 | Program output: 36.5506882878 
Correct output: -14.0030129507 | Program output: -0.7351732267 
Correct output: -97.2291531171 | Program output: -19.2291531171
Correct output: 95.3718423817  | Program output: 99.7436847634 
Correct output: 68.9270088853  | Program output: 74.9270088853 
Correct output: 47.7647765473  | Program output: 26.5295530946 
Correct output: -48.9289686304 | Program output: -39.9289686304
Correct output: 109.5193913412 | Program output: 134.0387826825
Correct output: -125.1250740365 | Program output: -46.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [47.0 2 17.1233 10 49.6374 7 25.4154 10 25.0 2 12.0 2 9.0 2 44.0 2 79.0 3 33.3254 8 33.7196 10 3.0 1 32.4867 11 6.2418 8 44.1744 10 55.3754 12 80.2247 12 13.2678 10 78.0 2 4.3718 10 6.0 2 21.2352 12 9.0 2 24.5194 12 79.0 3]
Total: 997.1183
Mean: 19.942366
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1967.310653499986
Median total errors in population: 1006.3585
Error averages by case: (84.48415670000009 3.016 60.06134739999956 9.343 87.39630940000143 7.523 67.43302599999959 9.33 64.67322759999993 2.884 49.0710561 2.85 48.505408100000004 1.97 82.81239490000003 2.915 117.18466380000004 3.059 65.93760010000092 7.432 75.01152919999873 9.343 42.56527799999999 2.063 70.23179849999963 9.855 49.09490019999968 10.364 81.96792540000044 10.447 91.52879509999896 10.678 115.59325980000177 11.65 53.19653679999961 10.092 113.11773449999995 2.995 48.37249870000052 10.324 46.11903660000005 2.877 57.70503380000072 10.244 47.7106893 2.06 64.77471049999923 10.949 115.43873700000002 3.06)
Error minima by case: (33.7346 2 10.4075 2 22.1067 2 2.1153 2 11.7346 2 0.9201 2 4.2654 1 30.7346 2 65.7346 2 5.0 1 6.1889 3 2.4616 1 4.9314 1 3.291 7 37.1916 9 43.5216 8 17.7753 1 0.3424 2 18.2292 1 3.3718 2 6.0 2 3.2943 2 4.2654 1 3.0113 2 45.1251 2)
Average genome size in population (length): 47.491
Average program size in population (points): 48.491
Average percent parens in population: 0.021
Minimum age in population: 35.85175442695618
Maximum age in population: 40.05569314956665
Average age in population: 38.13253401482105
Median age in population: 38.20155531167984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 133
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.123
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 29980268
--- Timings ---
Current time: 1529616057701 milliseconds
Total Time:          85.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.0 seconds, 38.8%
Fitness Testing:     41.6 seconds, 49.0%
Report:              10.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 48648.81740000002
Test mean error for best: 24.32441
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.7176181414 
Correct output: 9.2244792798   | Program output: 3.8669107894  
Correct output: 43.1776070233  | Program output: 3.9720679807  
Correct output: 54.4783529715  | Program output: 3.1855546442  
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: 2.0046409225  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_min} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction in1})
Best program: (print_float integer_dup_items integer_fromfloat float_tan integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_swap float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_stackdepth float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_min tag_float_932 integer_add integer_inc float_sub integer_pop in1)
Errors: [48.0 2 16.1233 10 48.6374 8 24.4154 10 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 32.3254 8 32.7196 10 4.0 1 32.054 11 5.3576 10 39.2055 9 51.2928 11 81.2247 13 16.0077 10 79.0 2 3.3718 10 7.0 2 22.2352 12 10.0 1 23.5194 12 80.0 2]
Total: 993.4898000000001
Mean: 19.869797
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2467.0925271000006
Median total errors in population: 1005.4233999999999
Error averages by case: (104.70247260000001 3.064 79.66990780000047 9.703 107.96230100000164 7.849 87.23945799999929 9.681 84.71971519999998 2.967 69.91256529999998 2.926 69.5698137 2.066 102.20474670000002 2.975 136.38847010000003 3.099 87.09344190000098 7.852 94.96178609999828 9.699 63.943039800000015 2.107 88.73908459999971 10.383 67.96078290000001 10.404 100.9707833000007 11.236 110.42397439999868 11.222 133.63917140000186 12.053 70.38185219999983 9.936 132.95078089999998 3.046 67.74997120000046 9.903 66.95104820000002 2.967 77.08713089999996 11.059 69.06879949999998 2.143 84.87968400000017 11.359 135.1397454 3.083)
Error minima by case: (7.5944 2 1.8579 2 34.3721 1 10.15 2 11.7346 2 1.2654 2 4.2654 1 30.7346 2 3.0936 2 7.0 1 18.4543 2 3.0 1 2.9314 1 1.3576 7 10.9919 9 11.1139 7 1.0 1 0.9171 2 18.2292 2 2.3282 2 6.0 2 3.2943 2 4.2654 1 9.254 2 34.8749 2)
Average genome size in population (length): 46.301
Average program size in population (points): 47.301
Average percent parens in population: 0.021
Minimum age in population: 37.24405425786972
Maximum age in population: 42.05569314956665
Average age in population: 39.79738850456476
Median age in population: 39.83587618917227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.138
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 31137868
--- Timings ---
Current time: 1529616060920 milliseconds
Total Time:          88.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.2 seconds, 38.8%
Fitness Testing:     43.2 seconds, 49.0%
Report:              10.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 48043.5274
Test mean error for best: 24.02176
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -41.4056316151
Correct output: 118.1232514128 | Program output: 135.2465028256
Correct output: 148.63744302   | Program output: 198.27488604  
Correct output: 130.4153758773 | Program output: 155.8307517545
Correct output: 65.2536404507  | Program output: 90.2536404507 
Correct output: 4.8655188188   | Program output: 16.8655188188 
Correct output: -62.096010847  | Program output: -53.096010847 
Correct output: 51.8846341345  | Program output: 95.8846341345 
Correct output: -156.9063992578 | Program output: -77.9063992578
Correct output: 48.3253799002  | Program output: 81.6507598003 
Correct output: 144.7196283487 | Program output: 178.4392566973
Correct output: -54.8304712332 | Program output: -51.8304712332
Correct output: -32.7715995596 | Program output: 0.6411909293  
Correct output: 9.2244792798   | Program output: 2.9334553947  
Correct output: 43.1776070233  | Program output: 2.9860339903  
Correct output: 54.4783529715  | Program output: 2.5927773221  
Correct output: 116.7753441439 | Program output: 36.5506882878 
Correct output: -14.0030129507 | Program output: 2.0023204613  
Correct output: -97.2291531171 | Program output: -19.2291531171
Correct output: 95.3718423817  | Program output: 99.7436847634 
Correct output: 68.9270088853  | Program output: 74.9270088853 
Correct output: 47.7647765473  | Program output: 26.5295530946 
Correct output: -48.9289686304 | Program output: -39.9289686304
Correct output: 109.5193913412 | Program output: 134.0387826825
Correct output: -125.1250740365 | Program output: -46.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items float_mod integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 tag_integer_621 integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_swap integer_pop print_integer integer_sub in1)
Errors: [47.0 2 17.1233 10 49.6374 7 25.4154 10 25.0 2 12.0 2 9.0 2 44.0 2 79.0 3 33.3254 8 33.7196 10 3.0 1 33.4128 10 6.291 10 40.1916 10 51.8856 10 80.2247 12 16.0053 11 78.0 2 4.3718 10 6.0 2 21.2352 12 9.0 2 24.5194 12 79.0 3]
Total: 993.3585
Mean: 19.86717
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1955.908065699988
Median total errors in population: 998.3585
Error averages by case: (87.49033770000003 2.898 54.59737129999953 9.623 83.32425510000128 7.713 62.24187009999943 9.595 67.26244549999997 2.756 52.74269069999999 2.735 51.69536479999999 1.898 85.26284420000002 2.77 122.2539076 2.916 62.9249032000009 7.721 70.03767479999857 9.622 45.86785069999997 1.894 66.34128139999953 10.479 46.060853699999896 10.212 79.04450370000029 10.739 89.04302839999926 10.722 113.38270170000199 12.022 49.21482379999964 9.73 118.97942299999997 2.855 42.576619500000504 9.489 48.95258750000002 2.766 55.984266500000835 11.198 51.10263969999998 1.956 60.037865799999054 11.321 120.96895530000003 2.887)
Error minima by case: (7.5944 2 16.1233 2 48.0 2 24.4154 3 25.0 2 3.8655 2 9.0 1 31.6382 2 3.0936 2 6.0 1 32.7196 3 3.0 1 2.9314 1 5.2418 7 14.6308 9 9.3639 7 16.7753 1 0.2623 2 18.2292 1 3.3718 2 6.0 2 3.2943 2 9.0 1 23.5194 3 34.8749 2)
Average genome size in population (length): 46.447
Average program size in population (points): 47.447
Average percent parens in population: 0.021
Minimum age in population: 38.92475080490112
Maximum age in population: 43.24375700205564
Average age in population: 41.34015699832886
Median age in population: 41.40427067875862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.121
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 32299143
--- Timings ---
Current time: 1529616064153 milliseconds
Total Time:          91.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.4 seconds, 38.7%
Fitness Testing:     44.9 seconds, 49.1%
Report:              11.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 48127.92280000003
Test mean error for best: 24.06396
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -41.4056316151
Correct output: 118.1232514128 | Program output: 135.2465028256
Correct output: 148.63744302   | Program output: 198.27488604  
Correct output: 130.4153758773 | Program output: 155.8307517545
Correct output: 65.2536404507  | Program output: 90.2536404507 
Correct output: 4.8655188188   | Program output: 16.8655188188 
Correct output: -62.096010847  | Program output: -53.096010847 
Correct output: 51.8846341345  | Program output: 95.8846341345 
Correct output: -156.9063992578 | Program output: -77.9063992578
Correct output: 48.3253799002  | Program output: 81.6507598003 
Correct output: 144.7196283487 | Program output: 178.4392566973
Correct output: -54.8304712332 | Program output: -51.8304712332
Correct output: -32.7715995596 | Program output: 0.2823818586  
Correct output: 9.2244792798   | Program output: 4.8669107894  
Correct output: 43.1776070233  | Program output: 4.9720679807  
Correct output: 54.4783529715  | Program output: 4.1855546442  
Correct output: 116.7753441439 | Program output: 36.5506882878 
Correct output: -14.0030129507 | Program output: 3.0046409225  
Correct output: -97.2291531171 | Program output: -19.2291531171
Correct output: 95.3718423817  | Program output: 99.7436847634 
Correct output: 68.9270088853  | Program output: 74.9270088853 
Correct output: 47.7647765473  | Program output: 26.5295530946 
Correct output: -48.9289686304 | Program output: -39.9289686304
Correct output: 109.5193913412 | Program output: 134.0387826825
Correct output: -125.1250740365 | Program output: -46.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction float_min} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (print_float integer_dup_items integer_fromfloat float_tan integer_dup_items float_tan integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_swap float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_stackdepth float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add float_min float_sub integer_pop print_integer integer_sub in1)
Errors: [47.0 2 17.1233 10 49.6374 7 25.4154 10 25.0 2 12.0 2 9.0 2 44.0 2 79.0 3 33.3254 8 33.7196 10 3.0 1 33.054 11 4.3576 10 38.2055 9 50.2928 10 80.2247 12 17.0077 10 78.0 2 4.3718 10 6.0 2 21.2352 12 9.0 2 24.5194 12 79.0 3]
Total: 987.4898000000001
Mean: 19.749796
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1826.5527680999853
Median total errors in population: 998.3585
Error averages by case: (79.12145600000004 2.854 52.80986699999952 9.597 81.66453430000115 7.59 60.49963629999939 9.588 59.81470909999998 2.773 44.54049979999999 2.759 43.10596070000002 2.006 77.8421505 2.8 111.69789580000005 3.048 61.017446000000916 7.71 68.33689939999849 9.599 37.2316904 1.861 64.00777839999931 10.394 43.08741189999988 10.058 76.23269100000023 10.472 86.10347169999939 10.608 111.01780240000191 11.873 46.309335499999726 9.627 108.10179039999996 2.837 40.7143235000005 9.469 41.266306700000015 2.791 53.30583070000083 11.181 42.4134326 2.083 58.249680799999055 11.303 110.2421672 2.937)
Error minima by case: (6.5944 2 15.1233 2 47.6374 2 23.4154 3 10.7464 2 2.8655 2 6.5557 1 24.1154 2 2.0936 2 7.0 1 31.7196 3 0.7098 1 2.9314 1 4.3576 7 20.9159 9 17.4395 7 16.7753 1 0.2623 2 18.2292 1 2.3718 2 6.0 2 3.2943 2 6.6113 1 22.5194 3 33.8749 2)
Average genome size in population (length): 46.423
Average program size in population (points): 47.423
Average percent parens in population: 0.021
Minimum age in population: 40.17470587790012
Maximum age in population: 44.65694219619036
Average age in population: 42.88291231714934
Median age in population: 42.94102452136576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.106
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 33459768
--- Timings ---
Current time: 1529616067370 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.6 seconds, 38.6%
Fitness Testing:     46.5 seconds, 49.1%
Report:              11.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 47506.263499999994
Test mean error for best: 23.75313
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -42.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 89.2536404507 
Correct output: 4.8655188188   | Program output: 15.8655188188 
Correct output: -62.096010847  | Program output: -54.096010847 
Correct output: 51.8846341345  | Program output: 94.8846341345 
Correct output: -156.9063992578 | Program output: -78.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -52.8304712332
Correct output: -32.7715995596 | Program output: -1.2848652508 
Correct output: 9.2244792798   | Program output: 1.9826532799  
Correct output: 43.1776070233  | Program output: -1.9967902109 
Correct output: 54.4783529715  | Program output: -1.8970268887 
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: -1.7351732267 
Correct output: -97.2291531171 | Program output: -20.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 73.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -40.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -47.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction float_flush} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer float_flush in1)
Errors: [46.0 2 16.1233 10 48.6374 8 24.4154 10 24.0 2 11.0 2 8.0 2 43.0 2 78.0 3 32.3254 8 32.7196 10 2.0 1 31.4867 11 7.2418 8 45.1744 10 56.3754 12 81.2247 13 12.2678 9 77.0 2 3.3718 10 5.0 2 22.2352 12 8.0 1 23.5194 12 78.0 3]
Total: 982.1183
Mean: 19.642366
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2449.495769799988
Median total errors in population: 997.1183
Error averages by case: (103.94833090000002 3.117 77.17095350000066 9.584 104.8114407000017 7.393 84.57435309999946 9.562 85.072851 3.052 69.9609835 3.02 69.1732788 2.592 102.65175920000001 3.07 136.36254160000004 3.634 84.04228000000097 7.727 92.1437119999984 9.582 63.9540845 2.218 89.29737189999962 10.308 68.8633061000006 9.937 101.7208629000005 10.546 110.93126749999969 11.161 132.98197340000186 11.484 71.34655460000042 9.662 133.26090839999998 3.147 65.52710030000058 9.432 66.80910770000003 3.07 76.75954909999977 11.051 68.75110969999999 2.668 82.22810090000043 11.209 135.32798849999995 3.598)
Error minima by case: (7.5944 2 0.8579 2 33.3721 1 9.15 2 10.7464 2 1.9201 2 4.9201 1 24.1154 2 3.0936 2 7.0 1 17.4543 2 2.0 1 2.9314 1 0.2592 7 32.1846 8 21.5216 7 1.0 1 0.9171 2 18.2292 2 2.3718 2 5.0 2 3.2943 2 4.9201 1 8.254 2 19.6096 2)
Average genome size in population (length): 47.527
Average program size in population (points): 48.527
Average percent parens in population: 0.021
Minimum age in population: 42.00876700878143
Maximum age in population: 46.13558527454734
Average age in population: 44.47418595035747
Median age in population: 44.51931979786605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.131
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 34647993
--- Timings ---
Current time: 1529616070592 milliseconds
Total Time:          97.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.8 seconds, 38.6%
Fitness Testing:     48.1 seconds, 49.1%
Report:              11.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 48683.36469999998
Test mean error for best: 24.34168
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -40.4056316151
Correct output: 118.1232514128 | Program output: 131.4111240933
Correct output: 148.63744302   | Program output: 194.4395073077
Correct output: 130.4153758773 | Program output: 151.9953730222
Correct output: 65.2536404507  | Program output: 91.2536404507 
Correct output: 4.8655188188   | Program output: 17.8655188188 
Correct output: -62.096010847  | Program output: -52.096010847 
Correct output: 51.8846341345  | Program output: 96.8846341345 
Correct output: -156.9063992578 | Program output: -76.9063992578
Correct output: 48.3253799002  | Program output: 77.815381068  
Correct output: 144.7196283487 | Program output: 174.603877965 
Correct output: -54.8304712332 | Program output: -50.8304712332
Correct output: -32.7715995596 | Program output: -0.3588090707 
Correct output: 9.2244792798   | Program output: 1.9334553947  
Correct output: 43.1776070233  | Program output: 1.9860339903  
Correct output: 54.4783529715  | Program output: 1.5927773221  
Correct output: 116.7753441439 | Program output: 32.7153095555 
Correct output: -14.0030129507 | Program output: 1.0023204613  
Correct output: -97.2291531171 | Program output: -18.2291531171
Correct output: 95.3718423817  | Program output: 95.908306031  
Correct output: 68.9270088853  | Program output: 75.9270088853 
Correct output: 47.7647765473  | Program output: 22.6941743623 
Correct output: -48.9289686304 | Program output: -38.9289686304
Correct output: 109.5193913412 | Program output: 130.2034039502
Correct output: -125.1250740365 | Program output: -45.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction in1} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_mod} {:instruction float_mod} {:instruction integer_dup} {:instruction float_min} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction in1})
Best program: (float_yankdup in1 -14.92010430989157 integer_div integer_fromfloat float_tan integer_dup_items -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_swap float_dup_times float_add in1 integer_dup_times float_stackdepth float_mod float_stackdepth float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove integer_add integer_dup_times print_float integer_mod float_mod integer_dup float_min tag_float_932 integer_add integer_inc float_sub integer_pop in1)
Errors: [48.0 2 13.2879 11 45.8021 9 21.58 9 26.0 2 13.0 2 10.0 1 45.0 2 80.0 2 29.49 9 29.8842 11 4.0 1 32.4128 11 7.291 10 41.1916 10 52.8856 10 84.06 10 15.0053 10 79.0 2 0.5365 9 7.0 2 25.0706 9 10.0 1 20.684 10 80.0 2]
Total: 978.1816
Mean: 19.563631
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2115.0290047999906
Median total errors in population: 993.4898000000001
Error averages by case: (90.55444690000004 2.851 65.23159919999954 9.427 92.86680890000169 7.324 72.68080299999934 9.392 69.90933770000001 2.765 55.14028009999999 2.736 54.8632559 2.314 88.02770720000001 2.78 122.2747888 3.35 71.46166710000087 7.572 80.31627269999858 9.42 49.26601499999997 1.91 76.82244579999958 10.022 56.12654100000041 10.249 88.68038409999957 10.279 98.11952909999934 10.89 121.78238890000203 11.366 59.20490740000011 9.667 119.51524049999995 2.851 53.44196870000049 9.259 51.541149800000014 2.768 64.49898750000101 10.881 54.4441309 2.362 70.13907519999925 11.02 121.38327339999998 3.281)
Error minima by case: (6.5944 2 13.2879 2 45.8021 1 21.58 2 10.0799 2 1.2654 2 4.2654 1 29.0799 2 2.0936 2 7.0 1 29.8842 2 2.0 1 4.2409 1 1.3576 8 32.1846 8 43.682 7 1.0 1 1.9171 2 28.2467 1 0.5365 2 5.0 2 2.2943 2 4.2654 1 20.684 2 33.8749 2)
Average genome size in population (length): 48.739
Average program size in population (points): 49.739
Average percent parens in population: 0.020
Minimum age in population: 44.00743603333831
Maximum age in population: 47.69538370147347
Average age in population: 45.99578333939984
Median age in population: 46.03992731729522
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.137
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 35866543
--- Timings ---
Current time: 1529616073911 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 38.5%
Fitness Testing:     49.7 seconds, 49.2%
Report:              12.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 47577.80470000001
Test mean error for best: 23.78890
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -42.4056316151
Correct output: 118.1232514128 | Program output: 134.2465028256
Correct output: 148.63744302   | Program output: 197.27488604  
Correct output: 130.4153758773 | Program output: 154.8307517545
Correct output: 65.2536404507  | Program output: 89.2536404507 
Correct output: 4.8655188188   | Program output: 15.8655188188 
Correct output: -62.096010847  | Program output: -54.096010847 
Correct output: 51.8846341345  | Program output: 94.8846341345 
Correct output: -156.9063992578 | Program output: -78.9063992578
Correct output: 48.3253799002  | Program output: 80.6507598003 
Correct output: 144.7196283487 | Program output: 177.4392566973
Correct output: -54.8304712332 | Program output: -52.8304712332
Correct output: -32.7715995596 | Program output: -0.7137747903 
Correct output: 9.2244792798   | Program output: 3.2921258762  
Correct output: 43.1776070233  | Program output: 3.3507102636  
Correct output: 54.4783529715  | Program output: 2.859341498   
Correct output: 116.7753441439 | Program output: 35.5506882878 
Correct output: -14.0030129507 | Program output: 1.9217736554  
Correct output: -97.2291531171 | Program output: -20.2291531171
Correct output: 95.3718423817  | Program output: 98.7436847634 
Correct output: 68.9270088853  | Program output: 73.9270088853 
Correct output: 47.7647765473  | Program output: 25.5295530946 
Correct output: -48.9289686304 | Program output: -40.9289686304
Correct output: 109.5193913412 | Program output: 133.0387826825
Correct output: -125.1250740365 | Program output: -47.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction tagged_520} {:instruction integer_div} {:instruction float_yankdup} {:instruction in1} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction float_min} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (print_float integer_dup_items integer_fromfloat tagged_520 integer_div float_yankdup in1 -14.92010430989157 integer_div integer_inc in1 integer_min integer_inc in1 tag_integer_621 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_sin in1 float_stackdepth float_swap float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_stackdepth float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 float_shove float_dec integer_flush integer_pop float_shove float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add float_min float_sub integer_pop print_integer integer_sub in1)
Errors: [46.0 2 16.1233 10 48.6374 8 24.4154 10 24.0 2 11.0 2 8.0 2 43.0 2 78.0 3 32.3254 8 32.7196 10 2.0 1 32.0578 10 5.9324 9 39.8269 8 51.619 11 81.2247 13 15.9248 11 77.0 2 3.3718 10 5.0 2 22.2352 12 8.0 1 23.5194 12 78.0 3]
Total: 973.9331
Mean: 19.478662
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2645.446952299989
Median total errors in population: 993.3585
Error averages by case: (111.19980020000003 3.122 86.71414290000097 9.53 114.26336650000233 7.436 94.05677309999923 9.508 90.09365269999996 2.964 75.64709899999998 2.93 76.48454039999999 2.913 107.95169650000004 2.99 142.22364130000003 3.964 91.82865280000095 7.71 101.79448279999833 9.529 70.86425889999997 2.189 99.09346029999999 10.044 79.03267950000021 10.231 110.86437070000046 10.547 120.0028678999992 10.855 140.60000150000153 11.343 81.60532060000021 9.806 139.28464329999997 3.121 74.24504859999973 9.353 71.68384530000006 2.981 85.41766069999973 10.925 75.91129749999999 2.911 91.59719610000036 11.108 141.07845319999998 3.898)
Error minima by case: (6.5944 2 13.2879 2 33.9037 2 16.0571 3 24.0 2 4.5744 2 8.0 1 43.0 2 2.0936 2 7.0 1 29.8842 3 2.0 1 3.9314 1 0.3576 7 28.0797 8 2.7247 9 10.1233 1 0.5841 2 17.2292 2 0.5365 2 5.0 2 2.2943 2 8.0 1 20.684 3 33.8749 2)
Average genome size in population (length): 48.716
Average program size in population (points): 49.716
Average percent parens in population: 0.020
Minimum age in population: 45.21637715771794
Maximum age in population: 49.25957048498094
Average age in population: 47.48299594674446
Median age in population: 47.53729101479985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.157
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 37084568
--- Timings ---
Current time: 1529616077227 milliseconds
Total Time:         104.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.2 seconds, 38.5%
Fitness Testing:     51.4 seconds, 49.2%
Report:              12.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 46566.42869999999
Test mean error for best: 23.28321
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -44.4056316151
Correct output: 118.1232514128 | Program output: 132.2465028256
Correct output: 148.63744302   | Program output: 195.27488604  
Correct output: 130.4153758773 | Program output: 152.8307517545
Correct output: 65.2536404507  | Program output: 87.2536404507 
Correct output: 4.8655188188   | Program output: 13.8655188188 
Correct output: -62.096010847  | Program output: -56.096010847 
Correct output: 51.8846341345  | Program output: 92.8846341345 
Correct output: -156.9063992578 | Program output: -80.9063992578
Correct output: 48.3253799002  | Program output: 78.6507598003 
Correct output: 144.7196283487 | Program output: 175.4392566973
Correct output: -54.8304712332 | Program output: -54.8304712332
Correct output: -32.7715995596 | Program output: -3.2848652508 
Correct output: 9.2244792798   | Program output: -0.0173467201 
Correct output: 43.1776070233  | Program output: -3.9967902109 
Correct output: 54.4783529715  | Program output: -3.8970268887 
Correct output: 116.7753441439 | Program output: 33.5506882878 
Correct output: -14.0030129507 | Program output: -3.7351732267 
Correct output: -97.2291531171 | Program output: -22.2291531171
Correct output: 95.3718423817  | Program output: 96.7436847634 
Correct output: 68.9270088853  | Program output: 71.9270088853 
Correct output: 47.7647765473  | Program output: 23.5295530946 
Correct output: -48.9289686304 | Program output: -42.9289686304
Correct output: 109.5193913412 | Program output: 131.0387826825
Correct output: -125.1250740365 | Program output: -49.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [44.0 2 14.1233 10 46.6374 8 22.4154 10 22.0 2 9.0 2 6.0 2 41.0 2 76.0 3 30.3254 7 30.7196 10 0.0 0 29.4867 10 9.2418 11 47.1744 9 58.3754 12 83.2247 13 10.2678 10 75.0 2 1.3718 10 3.0 2 24.2352 12 6.0 1 21.5194 12 76.0 3]
Total: 952.1183
Mean: 19.042366
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2553.0583018999905
Median total errors in population: 987.4898000000001
Error averages by case: (106.13788990000003 3.323 84.34568300000082 9.416 111.60602260000216 7.528 91.81524779999938 9.395 87.76956169999997 3.154 71.8133316 3.115 71.3627683 3.148 105.43887010000007 3.194 138.18740080000003 4.167 88.60113980000101 7.599 99.46757269999843 9.415 65.79447529999997 2.425 92.91329899999987 10.216 74.36963480000061 10.162 106.67775750000025 10.572 115.82956419999971 10.944 137.93196520000146 11.269 76.47041110000039 9.186 133.98825429999997 3.327 72.54753869999976 9.24 69.46608810000004 3.175 81.93680379999996 10.755 70.5676576 2.899 88.90210420000042 10.94 136.4682598 4.085)
Error minima by case: (6.5944 2 12.2879 2 44.8021 2 20.58 3 22.0 2 4.5744 1 4.3278 1 41.0 2 2.0936 2 7.0 1 28.8842 3 0.0 0 16.8515 1 0.2592 8 27.2335 8 40.1072 9 9.1233 1 1.9171 2 18.2292 2 0.4635 2 3.0 2 2.2943 2 6.0 1 19.684 3 33.8749 2)
Average genome size in population (length): 51.195
Average program size in population (points): 52.195
Average percent parens in population: 0.019
Minimum age in population: 46.86875656619668
Maximum age in population: 50.73769803950563
Average age in population: 48.85938601003285
Median age in population: 48.89005217142403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.187
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 38364443
--- Timings ---
Current time: 1529616080485 milliseconds
Total Time:         107.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.4 seconds, 38.4%
Fitness Testing:     53.0 seconds, 49.2%
Report:              13.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 46566.42869999999
Test mean error for best: 23.28321
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -44.4056316151
Correct output: 118.1232514128 | Program output: 132.2465028256
Correct output: 148.63744302   | Program output: 195.27488604  
Correct output: 130.4153758773 | Program output: 152.8307517545
Correct output: 65.2536404507  | Program output: 87.2536404507 
Correct output: 4.8655188188   | Program output: 13.8655188188 
Correct output: -62.096010847  | Program output: -56.096010847 
Correct output: 51.8846341345  | Program output: 92.8846341345 
Correct output: -156.9063992578 | Program output: -80.9063992578
Correct output: 48.3253799002  | Program output: 78.6507598003 
Correct output: 144.7196283487 | Program output: 175.4392566973
Correct output: -54.8304712332 | Program output: -54.8304712332
Correct output: -32.7715995596 | Program output: -3.2848652508 
Correct output: 9.2244792798   | Program output: -0.0173467201 
Correct output: 43.1776070233  | Program output: -3.9967902109 
Correct output: 54.4783529715  | Program output: -3.8970268887 
Correct output: 116.7753441439 | Program output: 33.5506882878 
Correct output: -14.0030129507 | Program output: -3.7351732267 
Correct output: -97.2291531171 | Program output: -22.2291531171
Correct output: 95.3718423817  | Program output: 96.7436847634 
Correct output: 68.9270088853  | Program output: 71.9270088853 
Correct output: 47.7647765473  | Program output: 23.5295530946 
Correct output: -48.9289686304 | Program output: -42.9289686304
Correct output: 109.5193913412 | Program output: 131.0387826825
Correct output: -125.1250740365 | Program output: -49.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [44.0 2 14.1233 10 46.6374 8 22.4154 10 22.0 2 9.0 2 6.0 2 41.0 2 76.0 3 30.3254 7 30.7196 10 0.0 0 29.4867 10 9.2418 11 47.1744 9 58.3754 12 83.2247 13 10.2678 10 75.0 2 1.3718 10 3.0 2 24.2352 12 6.0 1 21.5194 12 76.0 3]
Total: 952.1183
Mean: 19.042366
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2511.487080699989
Median total errors in population: 982.1183
Error averages by case: (104.0559696 3.188 84.40777360000055 9.525 111.57022520000174 7.764 91.75500949999943 9.483 85.28683329999997 3.098 68.26126169999998 3.047 69.0911765 3.099 102.77751770000005 3.128 136.05869170000005 4.112 86.86091950000088 7.688 99.28896079999856 9.534 63.31980700000002 2.3 91.53234080000004 10.281 72.78991150000022 10.159 106.16016070000123 10.685 115.34205459999967 11.014 136.15544250000124 11.595 74.4508388000003 8.597 131.7344346 3.231 69.89517800000002 9.316 67.18264310000005 3.121 79.5071238 10.874 68.18475819999998 2.411 89.0911655000002 11.024 134.37588249999996 4.077)
Error minima by case: (18.1162 2 12.2879 2 18.7972 2 5.4248 2 9.0799 2 3.9201 1 6.0 1 28.0799 2 76.0 2 2.4852 1 2.8794 2 0.0 0 6.926 1 0.4907 8 4.2753 8 2.7247 8 33.4274 1 1.2391 1 26.9397 2 0.3718 1 3.0 2 2.2943 2 6.0 1 6.3208 3 1.5118 2)
Average genome size in population (length): 50.93
Average program size in population (points): 51.93
Average percent parens in population: 0.019
Minimum age in population: 48.28530767560005
Maximum age in population: 52.53447534202132
Average age in population: 50.28805086148542
Median age in population: 50.31159398000455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.177
Error (vector) diversity:			 0.18
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 39637693
--- Timings ---
Current time: 1529616083762 milliseconds
Total Time:         111.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.6 seconds, 38.4%
Fitness Testing:     54.7 seconds, 49.2%
Report:              13.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 46716.469000000056
Test mean error for best: 23.35823
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -44.4056316151
Correct output: 118.1232514128 | Program output: 130.2465028256
Correct output: 148.63744302   | Program output: 193.27488604  
Correct output: 130.4153758773 | Program output: 150.8307517545
Correct output: 65.2536404507  | Program output: 87.2536404507 
Correct output: 4.8655188188   | Program output: 13.8655188188 
Correct output: -62.096010847  | Program output: -56.096010847 
Correct output: 51.8846341345  | Program output: 92.8846341345 
Correct output: -156.9063992578 | Program output: -80.9063992578
Correct output: 48.3253799002  | Program output: 76.6507598003 
Correct output: 144.7196283487 | Program output: 173.4392566973
Correct output: -54.8304712332 | Program output: -54.8304712332
Correct output: -32.7715995596 | Program output: -5.5389893317 
Correct output: 9.2244792798   | Program output: -4.2530811551 
Correct output: 43.1776070233  | Program output: -4.1230905001 
Correct output: 54.4783529715  | Program output: -4.642802421  
Correct output: 116.7753441439 | Program output: 31.5506882878 
Correct output: -14.0030129507 | Program output: -5.0030999364 
Correct output: -97.2291531171 | Program output: -22.2291531171
Correct output: 95.3718423817  | Program output: 94.7436847634 
Correct output: 68.9270088853  | Program output: 71.9270088853 
Correct output: 47.7647765473  | Program output: 21.5295530946 
Correct output: -48.9289686304 | Program output: -42.9289686304
Correct output: 109.5193913412 | Program output: 129.0387826825
Correct output: -125.1250740365 | Program output: -49.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction integer_mult} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction float_sub} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc integer_mult tag_integer_621 integer_min in2 float_add integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 float_sub in2 float_add integer_stackdepth float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [44.0 2 12.1233 10 44.6374 8 20.4154 9 22.0 2 9.0 2 6.0 2 41.0 2 76.0 3 28.3254 8 28.7196 10 0.0 0 27.2326 11 13.4776 11 47.3007 10 59.1212 8 85.2247 12 8.9999 7 75.0 2 0.6282 10 3.0 2 26.2352 12 6.0 1 19.5194 11 76.0 3]
Total: 937.9606
Mean: 18.759212
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2018.9296064999924
Median total errors in population: 978.7042
Error averages by case: (85.54901490000003 3.08 61.573894099999634 9.503 89.95397410000132 7.826 69.57216079999958 9.326 67.03084950000002 2.996 50.17643049999998 2.863 50.226365200000004 2.944 84.77297959999999 3.0 118.08898120000002 3.958 66.14175600000085 7.595 77.63484099999859 9.539 44.4137428 2.138 70.7654700000006 9.985 54.999315199999685 10.698 87.04972250000094 10.496 96.13048589999948 10.398 117.4104102000015 11.441 54.80552620000031 8.134 113.99453649999998 3.114 49.15240640000047 9.227 48.51119610000002 3.009 60.046380200000605 10.69 49.30250019999998 2.243 66.33567019999944 10.866 116.27699720000003 3.945)
Error minima by case: (6.5944 2 11.4725 3 43.8439 2 15.0571 2 22.0 2 0.1345 1 6.0 1 38.8708 2 0.5969 2 8.0 1 28.7196 2 0.0 0 2.9314 1 0.4907 8 9.6448 7 2.7247 8 16.7753 1 1.4159 1 18.2292 2 0.2544 1 3.0 2 2.2943 2 6.0 1 18.7639 2 1.1832 2)
Average genome size in population (length): 52.212
Average program size in population (points): 53.212
Average percent parens in population: 0.019
Minimum age in population: 49.64007398486137
Maximum age in population: 53.83124688977841
Average age in population: 51.82452027950692
Median age in population: 51.82963651928003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.207
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 40942993
--- Timings ---
Current time: 1529616087101 milliseconds
Total Time:         114.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.8 seconds, 38.3%
Fitness Testing:     56.4 seconds, 49.3%
Report:              14.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 45772.46900000005
Test mean error for best: 22.88623
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -46.4056316151
Correct output: 118.1232514128 | Program output: 130.2465028256
Correct output: 148.63744302   | Program output: 193.27488604  
Correct output: 130.4153758773 | Program output: 150.8307517545
Correct output: 65.2536404507  | Program output: 85.2536404507 
Correct output: 4.8655188188   | Program output: 11.8655188188 
Correct output: -62.096010847  | Program output: -58.096010847 
Correct output: 51.8846341345  | Program output: 90.8846341345 
Correct output: -156.9063992578 | Program output: -82.9063992578
Correct output: 48.3253799002  | Program output: 76.6507598003 
Correct output: 144.7196283487 | Program output: 173.4392566973
Correct output: -54.8304712332 | Program output: -56.8304712332
Correct output: -32.7715995596 | Program output: -5.5389893317 
Correct output: 9.2244792798   | Program output: -4.2530811551 
Correct output: 43.1776070233  | Program output: -4.1230905001 
Correct output: 54.4783529715  | Program output: -4.642802421  
Correct output: 116.7753441439 | Program output: 31.5506882878 
Correct output: -14.0030129507 | Program output: -5.0030999364 
Correct output: -97.2291531171 | Program output: -24.2291531171
Correct output: 95.3718423817  | Program output: 94.7436847634 
Correct output: 68.9270088853  | Program output: 69.9270088853 
Correct output: 47.7647765473  | Program output: 21.5295530946 
Correct output: -48.9289686304 | Program output: -44.9289686304
Correct output: 109.5193913412 | Program output: 129.0387826825
Correct output: -125.1250740365 | Program output: -51.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_581} {:instruction float_sub} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction float_flush} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_581 float_sub in2 float_add integer_stackdepth float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec integer_dup_times float_stackdepth integer_pop float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer float_flush in1)
Errors: [42.0 2 12.1233 10 44.6374 8 20.4154 9 20.0 1 7.0 2 4.0 2 39.0 2 74.0 3 28.3254 8 28.7196 10 2.0 1 27.2326 11 13.4776 11 47.3007 10 59.1212 8 85.2247 12 8.9999 7 73.0 2 0.6282 10 1.0 1 26.2352 12 4.0 1 19.5194 11 74.0 3]
Total: 918.9606
Mean: 18.379211
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2411.378564999997
Median total errors in population: 970.9336
Error averages by case: (101.1927214 3.228 77.94827790000043 9.463 104.64980340000173 7.761 85.34285999999939 9.216 81.59955279999996 3.149 65.18545490000001 2.796 66.5390337 3.101 98.93920450000003 3.168 133.5159959 4.145 80.69307270000088 7.466 92.8800645999986 9.498 60.709536799999974 2.124 87.4577847 9.671 71.90514560000017 10.557 103.85456960000126 10.478 112.5880279999997 10.96 133.40767360000163 11.214 69.62030430000024 9.078 128.9158607 3.245 65.49749610000046 9.154 63.12474270000003 3.158 76.11784990000007 10.5 65.63268729999999 2.403 82.32777959999997 10.688 131.38106429999996 4.131)
Error minima by case: (4.5944 2 11.1233 2 43.6374 2 19.4154 2 16.6266 1 0.1345 1 2.4156 1 3.2576 1 0.0936 2 0.3017 1 27.7196 2 0.0 0 14.7611 1 1.2245 8 5.4494 8 5.8513 8 1.0 1 3.6484 1 15.2292 2 0.128 1 1.0 1 0.8623 2 4.0 1 12.6298 2 31.8749 2)
Average genome size in population (length): 53.803
Average program size in population (points): 54.803
Average percent parens in population: 0.018
Minimum age in population: 50.64007398486137
Maximum age in population: 55.59279608019278
Average age in population: 53.27599989823246
Median age in population: 53.32491939669126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.209
Error (vector) diversity:			 0.215
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 42288068
--- Timings ---
Current time: 1529616090443 milliseconds
Total Time:         117.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.0 seconds, 38.2%
Fitness Testing:     58.1 seconds, 49.3%
Report:              14.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 44668.37209999998
Test mean error for best: 22.33419
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -49.4056316151
Correct output: 118.1232514128 | Program output: 127.2465028256
Correct output: 148.63744302   | Program output: 190.27488604  
Correct output: 130.4153758773 | Program output: 147.8307517545
Correct output: 65.2536404507  | Program output: 82.2536404507 
Correct output: 4.8655188188   | Program output: 8.8655188188  
Correct output: -62.096010847  | Program output: -61.096010847 
Correct output: 51.8846341345  | Program output: 87.8846341345 
Correct output: -156.9063992578 | Program output: -85.9063992578
Correct output: 48.3253799002  | Program output: 73.6507598003 
Correct output: 144.7196283487 | Program output: 170.4392566973
Correct output: -54.8304712332 | Program output: -59.8304712332
Correct output: -32.7715995596 | Program output: -8.2848652508 
Correct output: 9.2244792798   | Program output: -5.0173467201 
Correct output: 43.1776070233  | Program output: -8.9967902109 
Correct output: 54.4783529715  | Program output: -8.8970268887 
Correct output: 116.7753441439 | Program output: 28.5506882878 
Correct output: -14.0030129507 | Program output: -8.7351732267 
Correct output: -97.2291531171 | Program output: -27.2291531171
Correct output: 95.3718423817  | Program output: 91.7436847634 
Correct output: 68.9270088853  | Program output: 66.9270088853 
Correct output: 47.7647765473  | Program output: 18.5295530946 
Correct output: -48.9289686304 | Program output: -47.9289686304
Correct output: 109.5193913412 | Program output: 126.0387826825
Correct output: -125.1250740365 | Program output: -54.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_swap} {:instruction float_min} {:instruction float_sub} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_stackdepth integer_pop float_shove float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_swap float_min float_sub integer_pop float_pop integer_sub in1)
Errors: [39.0 2 9.1233 10 41.6374 8 17.4154 10 17.0 2 4.0 1 1.0 1 36.0 2 71.0 2 25.3254 8 25.7196 10 5.0 1 24.4867 11 14.2418 11 52.1744 10 63.3754 12 88.2247 13 5.2678 10 70.0 1 3.6282 10 2.0 1 29.2352 12 1.0 1 16.5194 12 71.0 3]
Total: 897.3747
Mean: 17.947495
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2195.578506899994
Median total errors in population: 954.9653000000001
Error averages by case: (92.31692859999998 2.995 68.93897799999962 9.247 95.34450420000131 7.506 76.10879299999942 9.091 72.68433559999997 2.9 57.13012279999999 2.657 56.79251599999999 2.978 90.5007568 2.898 124.67866870000003 4.024 73.39006010000091 6.997 83.48287719999847 9.15 51.17506460000001 1.545 77.22616330000014 9.484 64.2385458000003 10.903 96.54492280000137 10.377 105.69064749999995 11.005 128.59367120000198 11.325 59.666576800000286 8.903 120.56294690000001 3.068 57.672906700000404 8.931 54.13894370000002 2.889 69.76891250000067 10.589 56.114263600000015 2.148 73.46194599999963 10.717 123.01045450000004 4.017)
Error minima by case: (26.0181 2 9.1233 2 41.6374 2 17.4154 2 17.0 1 3.8655 1 1.0 1 36.0 1 71.0 2 8.0 1 25.7196 2 0.0 0 1.9314 1 5.2592 8 8.648 8 14.8537 8 17.7753 1 1.9171 1 14.2292 1 0.3718 1 0.0 0 3.2943 1 1.0 1 16.5194 2 41.1251 2)
Average genome size in population (length): 54.553
Average program size in population (points): 55.553
Average percent parens in population: 0.018
Minimum age in population: 52.20673283026554
Maximum age in population: 56.95732135228172
Average age in population: 54.84301470339537
Median age in population: 54.87280199800443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.193
Error (vector) diversity:			 0.195
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 43651918
--- Timings ---
Current time: 1529616093821 milliseconds
Total Time:         121.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.2 seconds, 38.2%
Fitness Testing:     59.8 seconds, 49.4%
Report:              15.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 44134.48949999998
Test mean error for best: 22.06724
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -51.4056316151
Correct output: 118.1232514128 | Program output: 125.2465028256
Correct output: 148.63744302   | Program output: 188.27488604  
Correct output: 130.4153758773 | Program output: 145.8307517545
Correct output: 65.2536404507  | Program output: 80.2536404507 
Correct output: 4.8655188188   | Program output: 6.8655188188  
Correct output: -62.096010847  | Program output: -63.096010847 
Correct output: 51.8846341345  | Program output: 85.8846341345 
Correct output: -156.9063992578 | Program output: -87.9063992578
Correct output: 48.3253799002  | Program output: 71.6507598003 
Correct output: 144.7196283487 | Program output: 168.4392566973
Correct output: -54.8304712332 | Program output: -61.8304712332
Correct output: -32.7715995596 | Program output: -10.2848652508
Correct output: 9.2244792798   | Program output: -7.0173467201 
Correct output: 43.1776070233  | Program output: -10.9967902109
Correct output: 54.4783529715  | Program output: -10.8970268887
Correct output: 116.7753441439 | Program output: 26.5506882878 
Correct output: -14.0030129507 | Program output: -10.7351732267
Correct output: -97.2291531171 | Program output: -29.2291531171
Correct output: 95.3718423817  | Program output: 89.7436847634 
Correct output: 68.9270088853  | Program output: 64.9270088853 
Correct output: 47.7647765473  | Program output: 16.5295530946 
Correct output: -48.9289686304 | Program output: -49.9289686304
Correct output: 109.5193913412 | Program output: 124.0387826825
Correct output: -125.1250740365 | Program output: -56.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_621} {:instruction integer_min} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_621 integer_min in2 float_add integer_stackdepth float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec float_stackdepth float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_stackdepth integer_pop float_shove float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_flush print_float float_flush print_integer float_flush in1)
Errors: [37.0 2 7.1233 10 39.6374 7 15.4154 10 15.0 2 2.0 1 1.0 1 34.0 2 69.0 3 23.3254 8 23.7196 10 7.0 2 22.4867 11 16.2418 11 54.1744 11 65.3754 13 90.2247 12 3.2678 9 68.0 2 5.6282 11 4.0 1 31.2352 12 1.0 1 14.5194 12 69.0 3]
Total: 886.3747
Mean: 17.727493
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2192.4503931999902
Median total errors in population: 947.3585
Error averages by case: (90.61177769999998 3.028 69.7328755 9.271 96.45661550000175 7.541 77.00018499999935 8.963 72.50805049999995 2.801 56.721097300000004 2.821 55.15170639999997 2.949 90.36293230000001 2.761 123.03076560000005 3.98 74.817615800001 7.158 84.46285409999845 9.091 50.22620610000002 1.512 76.35013590000035 9.738 63.81351000000009 11.179 96.59613390000152 10.573 105.83656109999973 10.486 129.5491095000023 11.224 59.159873400000414 8.492 119.03403049999999 3.062 58.69718100000014 8.905 54.353760600000015 2.763 72.19763150000028 10.626 54.48406859999999 2.129 74.27669419999977 10.583 121.40702119999997 3.976)
Error minima by case: (3.5944 1 7.1233 2 16.7972 2 7.4248 2 5.5536 1 1.1345 1 1.0 1 18.9226 1 0.9064 2 0.4852 1 0.8794 2 0.0 0 0.9314 1 3.2592 8 5.2753 8 1.2753 8 14.5626 1 3.2678 1 52.8524 1 0.3718 1 0.0 0 1.2943 1 1.0 1 8.3208 2 30.8749 2)
Average genome size in population (length): 56.725
Average program size in population (points): 57.725
Average percent parens in population: 0.018
Minimum age in population: 53.20673283026554
Maximum age in population: 58.31341903584689
Average age in population: 56.35659510428064
Median age in population: 56.38079336334704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.202
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 45070118
--- Timings ---
Current time: 1529616097177 milliseconds
Total Time:         124.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.4 seconds, 38.1%
Fitness Testing:     61.5 seconds, 49.4%
Report:              15.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 44176.5991
Test mean error for best: 22.08830
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -51.4056316151
Correct output: 118.1232514128 | Program output: 125.2465028256
Correct output: 148.63744302   | Program output: 188.27488604  
Correct output: 130.4153758773 | Program output: 145.8307517545
Correct output: 65.2536404507  | Program output: 80.2536404507 
Correct output: 4.8655188188   | Program output: 6.8655188188  
Correct output: -62.096010847  | Program output: -63.096010847 
Correct output: 51.8846341345  | Program output: 85.8846341345 
Correct output: -156.9063992578 | Program output: -87.9063992578
Correct output: 48.3253799002  | Program output: 71.6507598003 
Correct output: 144.7196283487 | Program output: 168.4392566973
Correct output: -54.8304712332 | Program output: -61.8304712332
Correct output: -32.7715995596 | Program output: -9.3588090707 
Correct output: 9.2244792798   | Program output: -7.0665446053 
Correct output: 43.1776070233  | Program output: -7.0139660097 
Correct output: 54.4783529715  | Program output: -7.4072226779 
Correct output: 116.7753441439 | Program output: 26.5506882878 
Correct output: -14.0030129507 | Program output: -7.9976795387 
Correct output: -97.2291531171 | Program output: -29.2291531171
Correct output: 95.3718423817  | Program output: 89.7436847634 
Correct output: 68.9270088853  | Program output: 64.9270088853 
Correct output: 47.7647765473  | Program output: 16.5295530946 
Correct output: -48.9289686304 | Program output: -49.9289686304
Correct output: 109.5193913412 | Program output: 124.0387826825
Correct output: -125.1250740365 | Program output: -56.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [37.0 2 7.1233 10 39.6374 7 15.4154 10 15.0 2 2.0 1 1.0 1 34.0 2 69.0 3 23.3254 8 23.7196 10 7.0 2 23.4128 11 16.291 12 50.1916 10 61.8856 9 90.2247 12 6.0053 10 68.0 2 5.6282 11 4.0 1 31.2352 12 1.0 1 14.5194 12 69.0 3]
Total: 879.6149
Mean: 17.592299
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2066.1401909999936
Median total errors in population: 937.3927
Error averages by case: (85.32973129999996 2.99 63.97792439999954 9.344 91.26408290000117 7.638 71.41787659999946 8.887 65.91840779999995 2.602 49.9882414 2.878 49.79689499999999 2.916 83.90174779999998 2.743 118.11209430000004 3.987 69.06951120000089 7.571 78.87529129999865 9.139 46.3755738 1.908 71.62388290000052 10.113 60.23753339999989 11.242 93.91669780000132 10.512 102.99542789999954 10.196 127.00666620000204 11.175 54.96827020000035 8.216 113.62162699999996 3.051 53.51084989999979 8.99 47.47376380000002 2.455 67.10428290000068 10.778 48.915721399999995 2.132 68.76980949999941 10.496 116.10128030000004 3.908)
Error minima by case: (3.6969 1 7.1233 2 16.7972 2 7.4248 2 8.0799 1 1.9201 1 0.0 0 27.0799 1 62.0799 2 0.4852 1 0.8794 2 0.0 0 1.0686 1 1.6741 8 6.2753 8 1.2753 8 43.674 1 0.0599 1 12.5204 1 0.3718 1 0.0 0 0.7057 1 0.0 0 8.3208 2 2.4882 2)
Average genome size in population (length): 58.872
Average program size in population (points): 59.872
Average percent parens in population: 0.017
Minimum age in population: 54.69066808850039
Maximum age in population: 59.86003513995456
Average age in population: 57.75218563897282
Median age in population: 57.77302856599999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.206
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 46541943
--- Timings ---
Current time: 1529616100583 milliseconds
Total Time:         127.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 38.0%
Fitness Testing:     63.2 seconds, 49.4%
Report:              15.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 44201.75800000003
Test mean error for best: 22.10088
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -51.4056316151
Correct output: 118.1232514128 | Program output: 125.2465028256
Correct output: 148.63744302   | Program output: 188.27488604  
Correct output: 130.4153758773 | Program output: 145.8307517545
Correct output: 65.2536404507  | Program output: 80.2536404507 
Correct output: 4.8655188188   | Program output: 6.8655188188  
Correct output: -62.096010847  | Program output: -63.096010847 
Correct output: 51.8846341345  | Program output: 85.8846341345 
Correct output: -156.9063992578 | Program output: -87.9063992578
Correct output: 48.3253799002  | Program output: 71.6507598003 
Correct output: 144.7196283487 | Program output: 168.4392566973
Correct output: -54.8304712332 | Program output: -61.8304712332
Correct output: -32.7715995596 | Program output: -10.5389893317
Correct output: 9.2244792798   | Program output: -9.2530811551 
Correct output: 43.1776070233  | Program output: -9.1230905001 
Correct output: 54.4783529715  | Program output: -9.642802421  
Correct output: 116.7753441439 | Program output: 26.5506882878 
Correct output: -14.0030129507 | Program output: -10.0030999364
Correct output: -97.2291531171 | Program output: -29.2291531171
Correct output: 95.3718423817  | Program output: 89.7436847634 
Correct output: 68.9270088853  | Program output: 64.9270088853 
Correct output: 47.7647765473  | Program output: 16.5295530946 
Correct output: -48.9289686304 | Program output: -49.9289686304
Correct output: 109.5193913412 | Program output: 124.0387826825
Correct output: -125.1250740365 | Program output: -56.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction tag_integer_581} {:instruction float_sub} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_sub} {:instruction in1})
Best program: (integer_max float_yankdup integer_dup_items -14.92010430989157 integer_div integer_inc integer_dec integer_min integer_inc in1 tag_integer_581 float_sub in2 float_add integer_stackdepth float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_flush float_shove float_dec float_dec float_dec integer_dup_times integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec integer_flush print_float integer_dup float_dup_items tag_float_932 integer_add integer_inc float_sub integer_pop print_integer integer_sub in1)
Errors: [37.0 2 7.1233 10 39.6374 7 15.4154 10 15.0 2 2.0 1 1.0 1 34.0 2 69.0 3 23.3254 8 23.7196 10 7.0 2 22.2326 11 18.4776 10 52.3007 10 64.1212 9 90.2247 12 3.9999 6 68.0 2 5.6282 11 4.0 1 31.2352 12 1.0 1 14.5194 12 69.0 3]
Total: 876.9606
Mean: 17.539211
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2107.4455395
Median total errors in population: 920.6149
Error averages by case: (82.96473749999997 3.106 70.04295189999984 9.009 95.20207730000163 7.384 76.76871189999933 8.719 67.97650829999996 2.635 49.414505599999984 2.829 47.81539219999999 2.946 85.70671890000003 3.022 116.45369510000002 4.075 71.51856160000091 7.372 83.77429429999853 9.011 46.277947099999984 2.301 73.3303476000003 9.968 62.998222099999865 11.423 95.61077910000138 10.583 104.50716139999932 10.226 130.16707090000216 10.752 55.53221220000012 8.525 110.95859589999996 3.184 60.6477895999996 8.885 50.266780700000034 1.994 70.59217140000078 10.353 46.599840799999974 2.299 73.82297579999948 10.13 113.90049030000003 3.864)
Error minima by case: (28.0181 1 5.1233 2 14.7972 2 6.4248 2 5.0799 1 0.0 0 0.0 0 24.0799 1 13.3063 2 0.4852 1 0.8794 2 0.0 0 9.387 1 2.6505 8 7.2753 8 1.2753 7 14.7753 1 2.2678 1 8.7113 1 0.3718 1 0.0 0 0.2943 1 0.0 0 7.3208 2 9.9633 2)
Average genome size in population (length): 60.984
Average program size in population (points): 61.984
Average percent parens in population: 0.016
Minimum age in population: 55.69066808850039
Maximum age in population: 61.20319660455607
Average age in population: 59.15792499778939
Median age in population: 59.25300075808354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.24
Error (vector) diversity:			 0.248
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 48066543
--- Timings ---
Current time: 1529616104069 milliseconds
Total Time:         131.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 38.0%
Fitness Testing:     65.0 seconds, 49.5%
Report:              16.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 43473.0629
Test mean error for best: 21.73653
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -54.4056316151
Correct output: 118.1232514128 | Program output: 122.2465028256
Correct output: 148.63744302   | Program output: 185.27488604  
Correct output: 130.4153758773 | Program output: 142.8307517545
Correct output: 65.2536404507  | Program output: 77.2536404507 
Correct output: 4.8655188188   | Program output: 3.8655188188  
Correct output: -62.096010847  | Program output: -66.096010847 
Correct output: 51.8846341345  | Program output: 82.8846341345 
Correct output: -156.9063992578 | Program output: -90.9063992578
Correct output: 48.3253799002  | Program output: 68.6507598003 
Correct output: 144.7196283487 | Program output: 165.4392566973
Correct output: -54.8304712332 | Program output: -64.8304712332
Correct output: -32.7715995596 | Program output: -12.3588090707
Correct output: 9.2244792798   | Program output: -10.0665446053
Correct output: 43.1776070233  | Program output: -10.0139660097
Correct output: 54.4783529715  | Program output: -10.4072226779
Correct output: 116.7753441439 | Program output: 23.5506882878 
Correct output: -14.0030129507 | Program output: -10.9976795387
Correct output: -97.2291531171 | Program output: -32.2291531171
Correct output: 95.3718423817  | Program output: 86.7436847634 
Correct output: 68.9270088853  | Program output: 61.9270088853 
Correct output: 47.7647765473  | Program output: 13.5295530946 
Correct output: -48.9289686304 | Program output: -52.9289686304
Correct output: 109.5193913412 | Program output: 121.0387826825
Correct output: -125.1250740365 | Program output: -59.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec float_stackdepth integer_pop float_shove float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_flush print_float float_flush print_integer float_flush in1)
Errors: [34.0 2 4.1233 10 36.6374 8 12.4154 10 12.0 2 1.0 1 4.0 1 31.0 2 66.0 3 20.3254 7 20.7196 10 10.0 1 20.4128 10 19.291 13 53.1916 11 64.8856 10 93.2247 13 3.0053 9 65.0 2 8.6282 11 7.0 1 34.2352 12 4.0 2 11.5194 12 66.0 3]
Total: 868.6149
Mean: 17.372297
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2263.5452629999954
Median total errors in population: 910.6149
Error averages by case: (90.74964790000003 3.101 72.33700350000021 9.075 98.09195610000164 7.434 79.35431479999934 9.15 72.92728519999994 3.068 53.451904099999986 2.546 56.20843109999998 2.622 90.51304460000001 3.164 123.49394310000005 3.995 74.71361030000091 7.507 86.61713689999847 9.206 57.38533949999999 2.562 79.1273083000001 10.14 71.63574480000003 11.508 104.30862680000128 10.69 113.33974329999955 10.598 137.2835842000018 11.161 61.64911050000003 8.932 118.01253679999998 3.105 65.93707959999959 9.158 57.07216880000006 2.02 78.63501740000004 10.472 55.093169200000006 2.359 76.30302469999982 10.592 121.25053149999997 3.889)
Error minima by case: (2.4056 1 2.1233 2 16.7972 2 7.4248 2 3.972 1 0.0 0 0.0 0 17.341 1 0.9064 2 0.4852 1 0.8794 2 0.0 0 4.0686 1 7.6264 8 8.2753 8 1.2753 7 47.5497 1 0.5219 1 49.4407 1 0.3718 1 0.0 0 1.7057 1 0.0 0 8.3208 2 24.8749 2)
Average genome size in population (length): 63.742
Average program size in population (points): 64.742
Average percent parens in population: 0.016
Minimum age in population: 57.77887791108515
Maximum age in population: 62.65968390984835
Average age in population: 60.66974293379233
Median age in population: 60.70696594924402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.254
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 49660143
--- Timings ---
Current time: 1529616107560 milliseconds
Total Time:         134.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 37.9%
Fitness Testing:     66.8 seconds, 49.5%
Report:              16.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 43043.90689999999
Test mean error for best: 21.52195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -56.4056316151
Correct output: 118.1232514128 | Program output: 120.2465028256
Correct output: 148.63744302   | Program output: 183.27488604  
Correct output: 130.4153758773 | Program output: 140.8307517545
Correct output: 65.2536404507  | Program output: 75.2536404507 
Correct output: 4.8655188188   | Program output: 1.8655188188  
Correct output: -62.096010847  | Program output: -68.096010847 
Correct output: 51.8846341345  | Program output: 80.8846341345 
Correct output: -156.9063992578 | Program output: -92.9063992578
Correct output: 48.3253799002  | Program output: 66.6507598003 
Correct output: 144.7196283487 | Program output: 163.4392566973
Correct output: -54.8304712332 | Program output: -66.8304712332
Correct output: -32.7715995596 | Program output: -14.3588090707
Correct output: 9.2244792798   | Program output: -12.0665446053
Correct output: 43.1776070233  | Program output: -12.0139660097
Correct output: 54.4783529715  | Program output: -12.4072226779
Correct output: 116.7753441439 | Program output: 21.5506882878 
Correct output: -14.0030129507 | Program output: -12.9976795387
Correct output: -97.2291531171 | Program output: -34.2291531171
Correct output: 95.3718423817  | Program output: 84.7436847634 
Correct output: 68.9270088853  | Program output: 59.9270088853 
Correct output: 47.7647765473  | Program output: 11.5295530946 
Correct output: -48.9289686304 | Program output: -54.9289686304
Correct output: 109.5193913412 | Program output: 119.0387826825
Correct output: -125.1250740365 | Program output: -61.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_min} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction print_integer} {:instruction float_flush} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times integer_min integer_pop float_shove float_dec float_stackdepth float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_stackdepth integer_pop float_shove float_shove float_dec integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_flush print_float float_flush print_integer float_flush in1)
Errors: [32.0 2 2.1233 10 34.6374 8 10.4154 9 10.0 1 3.0 1 6.0 1 29.0 2 64.0 3 18.3254 8 18.7196 10 12.0 2 18.4128 11 21.291 13 55.1916 11 66.8856 10 95.2247 12 1.0053 9 63.0 2 10.6282 11 9.0 2 36.2352 12 6.0 2 9.5194 11 64.0 3]
Total: 862.6149
Mean: 17.252298
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2643.8505747999993
Median total errors in population: 891.6149
Error averages by case: (103.66416239999998 3.602 88.72793880000064 8.916 113.06610950000177 7.144 95.56452849999923 8.972 87.93452349999991 3.466 67.90069770000001 2.581 71.44985889999998 2.702 104.77454510000005 3.512 136.81259050000006 4.366 88.9945874000009 7.308 102.66619269999849 9.002 74.45624039999994 3.411 91.81068749999974 9.861 88.57320510000034 11.48 120.38945360000122 11.159 128.75364159999978 11.056 151.59483640000067 10.753 74.76675280000022 8.785 130.07057689999993 3.556 84.95963940000041 9.147 76.10037820000005 2.607 93.99959149999972 10.223 69.73790079999999 2.903 92.14057160000016 10.386 133.56436399999998 4.479)
Error minima by case: (3.4973 1 0.1233 2 32.6374 2 8.4154 1 8.0 1 0.0 0 0.0 0 9.9866 1 2.9981 2 6.4273 1 16.7196 2 0.0 0 5.0686 1 0.825 8 1.2795 7 1.7247 8 6.0 1 0.0987 1 1.9143 1 0.3718 1 0.0 0 5.8667 1 0.0 0 7.5194 1 8.4882 2)
Average genome size in population (length): 66.312
Average program size in population (points): 67.312
Average percent parens in population: 0.015
Minimum age in population: 58.77887791108515
Maximum age in population: 64.14910471557823
Average age in population: 62.29191030538372
Median age in population: 62.32341948865428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.294
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 51317968
--- Timings ---
Current time: 1529616111126 milliseconds
Total Time:         138.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 37.8%
Fitness Testing:     68.6 seconds, 49.6%
Report:              17.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 42911.392499999994
Test mean error for best: 21.45570
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -57.4056316151
Correct output: 118.1232514128 | Program output: 119.2465028256
Correct output: 148.63744302   | Program output: 182.27488604  
Correct output: 130.4153758773 | Program output: 139.8307517545
Correct output: 65.2536404507  | Program output: 74.2536404507 
Correct output: 4.8655188188   | Program output: 0.8655188188  
Correct output: -62.096010847  | Program output: -69.096010847 
Correct output: 51.8846341345  | Program output: 79.8846341345 
Correct output: -156.9063992578 | Program output: -93.9063992578
Correct output: 48.3253799002  | Program output: 65.6507598003 
Correct output: 144.7196283487 | Program output: 162.4392566973
Correct output: -54.8304712332 | Program output: -67.8304712332
Correct output: -32.7715995596 | Program output: -15.3588090707
Correct output: 9.2244792798   | Program output: -13.0665446053
Correct output: 43.1776070233  | Program output: -13.0139660097
Correct output: 54.4783529715  | Program output: -13.4072226779
Correct output: 116.7753441439 | Program output: 20.5506882878 
Correct output: -14.0030129507 | Program output: -13.9976795387
Correct output: -97.2291531171 | Program output: -35.2291531171
Correct output: 95.3718423817  | Program output: 83.7436847634 
Correct output: 68.9270088853  | Program output: 58.9270088853 
Correct output: 47.7647765473  | Program output: 10.5295530946 
Correct output: -48.9289686304 | Program output: -55.9289686304
Correct output: 109.5193913412 | Program output: 118.0387826825
Correct output: -125.1250740365 | Program output: -62.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [31.0 2 1.1233 9 33.6374 8 9.4154 9 9.0 2 4.0 1 7.0 1 28.0 2 63.0 3 17.3254 8 17.7196 10 13.0 2 17.4128 11 22.291 13 56.1916 10 67.8856 10 96.2247 13 0.0053 9 62.0 2 11.6282 11 10.0 1 37.2352 12 7.0 2 8.5194 12 63.0 2]
Total: 858.6149
Mean: 17.172298
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3106.619457599998
Median total errors in population: 880.6149
Error averages by case: (119.8725843 3.795 108.04471780000141 9.299 132.57553660000193 7.443 114.84001249999912 9.266 106.39379459999986 3.697 86.55912039999998 2.712 90.01332429999998 2.811 123.05793360000008 3.727 151.7557369 4.649 108.02106350000095 7.606 122.04868749999827 9.294 93.84315219999993 3.671 109.13878180000025 9.986 107.28120359999993 11.743 137.9786487000009 11.348 146.29078229999968 10.915 169.20975790000026 11.08 91.98567080000012 8.765 145.56027959999992 3.822 105.41584680000115 9.626 97.23573890000004 2.927 112.6761549999993 10.778 88.50819819999997 3.272 111.55031800000067 10.687 149.23541180000007 4.608)
Error minima by case: (3.4056 1 0.1233 2 32.6374 2 8.4154 2 7.0 1 0.0 0 0.0 0 1.3016 1 1.8053 2 2.2576 1 16.7196 2 1.0 1 4.8708 1 0.907 8 2.648 7 3.8953 7 14.7753 1 1.0E-4 1 0.2292 1 0.3718 1 0.0 0 2.8182 1 0.0 0 7.5194 2 9.4882 2)
Average genome size in population (length): 68.881
Average program size in population (points): 69.881
Average percent parens in population: 0.014
Minimum age in population: 61.52797042360999
Maximum age in population: 65.65751600016665
Average age in population: 63.77054478219035
Median age in population: 63.85280762615048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.302
Error (vector) diversity:			 0.32
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 53040043
--- Timings ---
Current time: 1529616114697 milliseconds
Total Time:         141.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 37.7%
Fitness Testing:     70.5 seconds, 49.7%
Report:              17.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 43404.99649999999
Test mean error for best: 21.70250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -56.4056316151
Correct output: 118.1232514128 | Program output: 118.2465028256
Correct output: 148.63744302   | Program output: 181.27488604  
Correct output: 130.4153758773 | Program output: 138.8307517545
Correct output: 65.2536404507  | Program output: 75.2536404507 
Correct output: 4.8655188188   | Program output: 1.8655188188  
Correct output: -62.096010847  | Program output: -68.096010847 
Correct output: 51.8846341345  | Program output: 80.8846341345 
Correct output: -156.9063992578 | Program output: -92.9063992578
Correct output: 48.3253799002  | Program output: 64.6507598003 
Correct output: 144.7196283487 | Program output: 161.4392566973
Correct output: -54.8304712332 | Program output: -66.8304712332
Correct output: -32.7715995596 | Program output: -16.3588090707
Correct output: 9.2244792798   | Program output: -14.0665446053
Correct output: 43.1776070233  | Program output: -14.0139660097
Correct output: 54.4783529715  | Program output: -14.4072226779
Correct output: 116.7753441439 | Program output: 19.5506882878 
Correct output: -14.0030129507 | Program output: -14.9976795387
Correct output: -97.2291531171 | Program output: -34.2291531171
Correct output: 95.3718423817  | Program output: 82.7436847634 
Correct output: 68.9270088853  | Program output: 59.9270088853 
Correct output: 47.7647765473  | Program output: 9.5295530946  
Correct output: -48.9289686304 | Program output: -54.9289686304
Correct output: 109.5193913412 | Program output: 117.0387826825
Correct output: -125.1250740365 | Program output: -61.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_mod} {:instruction integer_min} {:instruction float_flush} {:instruction in1})
Best program: (integer_max float_sub integer_dup_items -14.92010430989157 integer_inc in1 integer_min integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times integer_inc float_inc float_dec float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_stackdepth float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_stackdepth integer_pop float_shove float_shove float_dec integer_dup_times float_stackdepth integer_pop integer_dup float_dec float_dec integer_flush print_float integer_mod integer_min float_flush in1)
Errors: [32.0 2 0.1233 8 32.6374 8 8.4154 9 10.0 1 3.0 1 6.0 1 29.0 2 64.0 3 16.3254 8 16.7196 10 12.0 2 16.4128 11 23.291 13 57.1916 11 68.8856 9 97.2247 12 0.9947 8 63.0 2 12.6282 11 9.0 2 38.2352 12 6.0 2 7.5194 12 64.0 3]
Total: 857.6043
Mean: 17.152086
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2387.356277499999
Median total errors in population: 876.3747
Error averages by case: (91.31338320000005 3.583 75.90460550000023 9.025 101.45121820000146 7.443 82.9804584999995 8.994 72.42123069999995 3.272 54.981658299999985 2.425 63.203412 2.69 89.68147560000001 3.292 124.85698149999999 4.487 77.09184880000085 7.286 90.3902294999987 9.005 67.14636439999992 3.38 81.9487172 9.932 82.85121449999971 11.905 114.29263680000084 11.284 123.01925409999912 10.783 143.9280561000011 11.077 65.15609709999987 8.525 118.12337939999996 3.637 76.44980740000021 9.469 65.63764090000004 2.621 88.13108449999969 11.046 61.59843059999994 3.465 79.55556099999987 10.466 121.75153170000003 4.398)
Error minima by case: (5.4056 1 0.1233 2 17.7173 2 3.4154 2 2.0799 1 0.0 0 0.0 0 2.9479 1 2.0936 2 0.4227 1 1.7995 1 0.0 0 5.8515 1 0.405 8 2.6512 8 0.3542 7 16.7753 1 1.0E-4 1 2.7113 1 0.6282 1 0.0 0 7.0678 1 0.0 0 2.5194 2 12.8783 2)
Average genome size in population (length): 71.022
Average program size in population (points): 72.022
Average percent parens in population: 0.014
Minimum age in population: 62.52797042360999
Maximum age in population: 67.13132347078408
Average age in population: 65.1115178048153
Median age in population: 65.13250954411342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.302
Error (vector) diversity:			 0.32
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 54815593
--- Timings ---
Current time: 1529616118271 milliseconds
Total Time:         145.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.8 seconds, 37.6%
Fitness Testing:     72.4 seconds, 49.8%
Report:              18.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 42761.88339999995
Test mean error for best: 21.38094
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -55.4056316151
Correct output: 118.1232514128 | Program output: 119.2465028256
Correct output: 148.63744302   | Program output: 182.27488604  
Correct output: 130.4153758773 | Program output: 139.8307517545
Correct output: 65.2536404507  | Program output: 76.2536404507 
Correct output: 4.8655188188   | Program output: 2.8655188188  
Correct output: -62.096010847  | Program output: -67.096010847 
Correct output: 51.8846341345  | Program output: 81.8846341345 
Correct output: -156.9063992578 | Program output: -91.9063992578
Correct output: 48.3253799002  | Program output: 65.6507598003 
Correct output: 144.7196283487 | Program output: 162.4392566973
Correct output: -54.8304712332 | Program output: -65.8304712332
Correct output: -32.7715995596 | Program output: 23.8965047106 
Correct output: 9.2244792798   | Program output: 25.0426369433 
Correct output: 43.1776070233  | Program output: 25.0689262411 
Correct output: 54.4783529715  | Program output: 24.872297907  
Correct output: 116.7753441439 | Program output: 41.8512533899 
Correct output: -14.0030129507 | Program output: 24.5770694766 
Correct output: -97.2291531171 | Program output: -33.2291531171
Correct output: 95.3718423817  | Program output: 83.7436847634 
Correct output: 68.9270088853  | Program output: 60.9270088853 
Correct output: 47.7647765473  | Program output: 36.8406857932 
Correct output: -48.9289686304 | Program output: -53.9289686304
Correct output: 109.5193913412 | Program output: 118.0387826825
Correct output: -125.1250740365 | Program output: -60.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_mod} {:instruction integer_min} {:instruction float_flush} {:instruction in1})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times float_stackdepth integer_pop integer_dup float_dec float_dec integer_flush print_float integer_mod integer_min float_flush in1)
Errors: [33.0 2 1.1233 9 33.6374 8 9.4154 9 11.0 2 2.0 1 5.0 1 30.0 1 65.0 3 17.3254 8 17.7196 10 11.0 2 56.6681 10 15.8182 11 18.1087 12 29.6061 8 74.9241 11 38.5801 11 64.0 2 11.6282 11 8.0 1 10.9241 10 5.0 2 8.5194 12 65.0 3]
Total: 802.9981
Mean: 16.059961
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2115.882190999996
Median total errors in population: 868.6149
Error averages by case: (78.15809610000008 3.634 65.09685699999966 8.88 91.01906520000095 7.456 72.30127719999957 8.742 63.65454529999994 3.266 46.11725380000001 2.984 52.1137845 2.737 80.69450100000002 3.294 112.69296710000008 4.532 65.56469760000066 7.258 79.89751299999882 8.855 56.07300509999995 3.443 68.52107889999952 9.854 71.64899949999932 12.397 103.34038570000055 11.319 111.88768919999909 10.489 135.22863370000152 10.955 52.00069719999986 8.363 105.01929569999994 3.676 67.33381439999965 9.34 59.06633140000006 2.869 76.7707457000003 11.152 50.28277949999998 3.588 68.61619539999951 10.287 109.0749818 4.337)
Error minima by case: (2.113 1 0.1233 2 23.0799 2 3.4154 2 1.2753 1 0.0 0 0.0 0 0.2221 1 2.695 2 0.6868 1 11.7196 2 0.0 0 0.6721 1 3.9422 8 5.8346 8 2.3716 7 18.78 1 1.0E-4 1 2.1808 1 1.3718 1 1.0 1 1.2474 1 0.0 0 2.5194 2 12.8749 2)
Average genome size in population (length): 72.436
Average program size in population (points): 73.436
Average percent parens in population: 0.014
Minimum age in population: 64.47135989161552
Maximum age in population: 68.39486439796167
Average age in population: 66.49889279077902
Median age in population: 66.55159444748412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.265
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 56626518
--- Timings ---
Current time: 1529616121875 milliseconds
Total Time:         149.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 37.5%
Fitness Testing:     74.3 seconds, 49.9%
Report:              18.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 42346.26639999995
Test mean error for best: 21.17313
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -56.4056316151
Correct output: 118.1232514128 | Program output: 118.2465028256
Correct output: 148.63744302   | Program output: 181.27488604  
Correct output: 130.4153758773 | Program output: 138.8307517545
Correct output: 65.2536404507  | Program output: 75.2536404507 
Correct output: 4.8655188188   | Program output: 1.8655188188  
Correct output: -62.096010847  | Program output: -68.096010847 
Correct output: 51.8846341345  | Program output: 80.8846341345 
Correct output: -156.9063992578 | Program output: -92.9063992578
Correct output: 48.3253799002  | Program output: 64.6507598003 
Correct output: 144.7196283487 | Program output: 161.4392566973
Correct output: -54.8304712332 | Program output: -66.8304712332
Correct output: -32.7715995596 | Program output: 22.8965047106 
Correct output: 9.2244792798   | Program output: 24.0426369433 
Correct output: 43.1776070233  | Program output: 24.0689262411 
Correct output: 54.4783529715  | Program output: 23.872297907  
Correct output: 116.7753441439 | Program output: 40.8512533899 
Correct output: -14.0030129507 | Program output: 23.5770694766 
Correct output: -97.2291531171 | Program output: -34.2291531171
Correct output: 95.3718423817  | Program output: 82.7436847634 
Correct output: 68.9270088853  | Program output: 59.9270088853 
Correct output: 47.7647765473  | Program output: 35.8406857932 
Correct output: -48.9289686304 | Program output: -54.9289686304
Correct output: 109.5193913412 | Program output: 117.0387826825
Correct output: -125.1250740365 | Program output: -61.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_mod} {:instruction integer_min} {:instruction float_flush} {:instruction in1})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_dec float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times float_stackdepth integer_pop integer_dup float_dec float_dec integer_flush print_float integer_mod integer_min float_flush in1)
Errors: [32.0 2 0.1233 8 32.6374 8 8.4154 9 10.0 1 3.0 1 6.0 1 29.0 2 64.0 3 16.3254 8 16.7196 10 12.0 2 55.6681 10 14.8182 11 19.1087 12 30.6061 9 75.9241 12 37.5801 12 63.0 2 12.6282 11 9.0 2 11.9241 10 6.0 2 7.5194 12 64.0 3]
Total: 800.9981
Mean: 16.019962
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2333.2690997999985
Median total errors in population: 863.7878499999999
Error averages by case: (85.15124500000007 3.447 73.60993029999997 8.914 99.97873650000139 7.63 80.83251459999953 8.668 71.48893919999993 2.925 55.7531413 2.962 61.60700839999999 2.586 88.3995026 3.195 118.89346250000003 4.358 75.60440290000086 7.567 88.42749849999863 9.19 65.45173959999994 3.377 77.21033949999963 10.149 79.92500849999927 12.621 110.82490240000077 11.222 119.88773409999891 10.48 145.4730153000011 11.169 60.09058289999964 8.539 112.34593619999987 3.462 77.80765240000011 9.72 69.54445720000005 2.82 88.20805969999977 11.51 58.899623499999976 3.437 77.47113119999983 10.424 115.97153550000003 4.039)
Error minima by case: (8.4645 1 0.1233 2 17.7173 2 3.4154 2 0.0 0 0.0 0 0.0 0 19.0 1 0.4431 2 1.4053 1 1.7995 2 2.0 1 0.6721 1 1.1568 9 0.3692 7 4.2337 8 58.674 1 1.0E-4 1 0.359 1 2.3718 1 0.0 0 9.7057 1 0.0 0 2.5194 2 28.2549 2)
Average genome size in population (length): 73.221
Average program size in population (points): 74.221
Average percent parens in population: 0.014
Minimum age in population: 65.7074204005196
Maximum age in population: 69.62093598417692
Average age in population: 67.97170242233386
Median age in population: 68.00197132674798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.219
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 58457043
--- Timings ---
Current time: 1529616125476 milliseconds
Total Time:         152.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 37.4%
Fitness Testing:     76.3 seconds, 49.9%
Report:              19.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 40902.11459999994
Test mean error for best: 20.45106
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -60.4056316151
Correct output: 118.1232514128 | Program output: 114.2465028256
Correct output: 148.63744302   | Program output: 177.27488604  
Correct output: 130.4153758773 | Program output: 134.8307517545
Correct output: 65.2536404507  | Program output: 71.2536404507 
Correct output: 4.8655188188   | Program output: -2.1344811812 
Correct output: -62.096010847  | Program output: -72.096010847 
Correct output: 51.8846341345  | Program output: 76.8846341345 
Correct output: -156.9063992578 | Program output: -96.9063992578
Correct output: 48.3253799002  | Program output: 60.6507598003 
Correct output: 144.7196283487 | Program output: 157.4392566973
Correct output: -54.8304712332 | Program output: -70.8304712332
Correct output: -32.7715995596 | Program output: 18.8965047106 
Correct output: 9.2244792798   | Program output: 20.0426369433 
Correct output: 43.1776070233  | Program output: 20.0689262411 
Correct output: 54.4783529715  | Program output: 19.872297907  
Correct output: 116.7753441439 | Program output: 36.8512533899 
Correct output: -14.0030129507 | Program output: 19.5770694766 
Correct output: -97.2291531171 | Program output: -38.2291531171
Correct output: 95.3718423817  | Program output: 78.7436847634 
Correct output: 68.9270088853  | Program output: 55.9270088853 
Correct output: 47.7647765473  | Program output: 31.8406857932 
Correct output: -48.9289686304 | Program output: -58.9289686304
Correct output: 109.5193913412 | Program output: 113.0387826825
Correct output: -125.1250740365 | Program output: -65.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_dec float_shove float_dec integer_flush float_dec float_shove float_dec float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [28.0 2 3.8767 9 28.6374 8 4.4154 9 6.0 2 7.0 10 10.0 1 25.0 2 60.0 2 12.3254 8 12.7196 10 16.0 2 51.6681 11 10.8182 11 23.1087 12 34.6061 9 79.9241 11 33.5801 11 59.0 2 16.6282 11 13.0 2 15.9241 10 10.0 1 3.5194 12 60.0 2]
Total: 795.7515
Mean: 15.91503
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2442.2477494999957
Median total errors in population: 862.6149
Error averages by case: (89.56899620000009 3.549 78.1517385000006 8.438 103.00339740000203 7.449 84.71293899999932 8.374 74.20195229999993 3.172 57.5476393 3.118 65.95247039999998 2.681 91.46705110000005 3.347 122.9563103 4.464 77.88451300000085 7.384 92.0807894999985 9.031 70.27810789999994 3.507 84.44682340000011 9.918 87.59211409999912 12.613 118.48689090000114 11.204 126.98650519999855 10.501 148.58060720000094 10.923 68.11659269999952 8.423 116.4129865999999 3.587 81.96812290000086 9.518 71.93570300000005 2.861 90.70283409999958 11.366 64.53593139999997 3.555 81.25604040000022 10.284 120.2026927 3.951)
Error minima by case: (3.4302 1 0.1233 2 24.6374 2 0.4154 2 0.0 0 0.0 0 0.0 0 14.0 1 1.1947 2 8.0 1 8.7196 2 2.0 1 0.8515 1 4.1912 9 1.7423 8 20.2846 8 33.7753 2 1.0E-4 1 1.2292 1 4.6282 1 0.0 0 8.2352 1 0.0 0 0.4806 1 18.8749 2)
Average genome size in population (length): 73.199
Average program size in population (points): 74.199
Average percent parens in population: 0.014
Minimum age in population: 67.17152200995793
Maximum age in population: 71.35911083980702
Average age in population: 69.52221491742527
Median age in population: 69.60094758957126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.23
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 60287018
--- Timings ---
Current time: 1529616129134 milliseconds
Total Time:         156.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.4 seconds, 37.4%
Fitness Testing:     78.2 seconds, 50.0%
Report:              19.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 40218.81839999995
Test mean error for best: 20.10941
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -62.4056316151
Correct output: 118.1232514128 | Program output: 112.2465028256
Correct output: 148.63744302   | Program output: 175.27488604  
Correct output: 130.4153758773 | Program output: 132.8307517545
Correct output: 65.2536404507  | Program output: 69.2536404507 
Correct output: 4.8655188188   | Program output: -4.1344811812 
Correct output: -62.096010847  | Program output: -74.096010847 
Correct output: 51.8846341345  | Program output: 74.8846341345 
Correct output: -156.9063992578 | Program output: -98.9063992578
Correct output: 48.3253799002  | Program output: 58.6507598003 
Correct output: 144.7196283487 | Program output: 155.4392566973
Correct output: -54.8304712332 | Program output: -72.8304712332
Correct output: -32.7715995596 | Program output: 16.8965047106 
Correct output: 9.2244792798   | Program output: 18.0426369433 
Correct output: 43.1776070233  | Program output: 18.0689262411 
Correct output: 54.4783529715  | Program output: 17.872297907  
Correct output: 116.7753441439 | Program output: 34.8512533899 
Correct output: -14.0030129507 | Program output: 17.5770694766 
Correct output: -97.2291531171 | Program output: -40.2291531171
Correct output: 95.3718423817  | Program output: 76.7436847634 
Correct output: 68.9270088853  | Program output: 53.9270088853 
Correct output: 47.7647765473  | Program output: 29.8406857932 
Correct output: -48.9289686304 | Program output: -60.9289686304
Correct output: 109.5193913412 | Program output: 111.0387826825
Correct output: -125.1250740365 | Program output: -67.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec print_integer float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times integer_mult integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [26.0 2 5.8767 9 26.6374 8 2.4154 9 4.0 1 9.0 9 12.0 2 23.0 2 58.0 3 10.3254 7 10.7196 10 18.0 2 49.6681 11 8.8182 11 25.1087 12 36.6061 9 81.9241 12 31.5801 11 57.0 2 18.6282 11 15.0 2 17.9241 10 12.0 2 1.5194 12 58.0 3]
Total: 791.7515
Mean: 15.83503
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2078.904899299997
Median total errors in population: 858.6149
Error averages by case: (78.15207080000008 3.485 62.61962079999963 8.23 88.00036520000113 7.413 69.50232399999962 8.304 62.20766269999993 3.103 45.5389523 3.061 53.82642280000002 2.638 78.80539900000001 3.209 113.112467 4.377 62.22121420000075 7.343 77.04776089999879 8.966 58.356889799999955 3.453 68.36797779999975 9.988 68.41978279999945 12.285 96.54739380000022 11.196 105.56267889999936 10.245 132.3045999000015 10.851 52.67793119999972 8.575 105.26129049999989 3.513 67.39899259999986 9.474 58.85799390000004 2.737 74.8194052 11.047 52.59144269999996 3.457 65.77493129999928 10.345 109.66432919999998 3.97)
Error minima by case: (3.7347 1 0.1233 2 26.6374 2 2.4154 1 1.6638 1 0.0 0 0.0 0 11.6795 1 5.307 2 1.6768 1 10.7196 2 0.0 0 1.6721 1 0.1912 8 6.8245 8 3.3639 7 18.0728 1 0.0053 1 5.0889 1 0.6282 1 0.0 0 0.8407 1 0.0 0 1.5194 1 5.8749 2)
Average genome size in population (length): 72.888
Average program size in population (points): 73.888
Average percent parens in population: 0.014
Minimum age in population: 68.17152200995793
Maximum age in population: 72.86657694297331
Average age in population: 70.98842152635285
Median age in population: 71.07376935860694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.293
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 62109218
--- Timings ---
Current time: 1529616132800 milliseconds
Total Time:         160.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 37.3%
Fitness Testing:     80.2 seconds, 50.1%
Report:              20.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 40218.81839999995
Test mean error for best: 20.10941
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -62.4056316151
Correct output: 118.1232514128 | Program output: 112.2465028256
Correct output: 148.63744302   | Program output: 175.27488604  
Correct output: 130.4153758773 | Program output: 132.8307517545
Correct output: 65.2536404507  | Program output: 69.2536404507 
Correct output: 4.8655188188   | Program output: -4.1344811812 
Correct output: -62.096010847  | Program output: -74.096010847 
Correct output: 51.8846341345  | Program output: 74.8846341345 
Correct output: -156.9063992578 | Program output: -98.9063992578
Correct output: 48.3253799002  | Program output: 58.6507598003 
Correct output: 144.7196283487 | Program output: 155.4392566973
Correct output: -54.8304712332 | Program output: -72.8304712332
Correct output: -32.7715995596 | Program output: 16.8965047106 
Correct output: 9.2244792798   | Program output: 18.0426369433 
Correct output: 43.1776070233  | Program output: 18.0689262411 
Correct output: 54.4783529715  | Program output: 17.872297907  
Correct output: 116.7753441439 | Program output: 34.8512533899 
Correct output: -14.0030129507 | Program output: 17.5770694766 
Correct output: -97.2291531171 | Program output: -40.2291531171
Correct output: 95.3718423817  | Program output: 76.7436847634 
Correct output: 68.9270088853  | Program output: 53.9270088853 
Correct output: 47.7647765473  | Program output: 29.8406857932 
Correct output: -48.9289686304 | Program output: -60.9289686304
Correct output: 109.5193913412 | Program output: 111.0387826825
Correct output: -125.1250740365 | Program output: -67.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times integer_mult integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [26.0 2 5.8767 9 26.6374 8 2.4154 9 4.0 1 9.0 9 12.0 2 23.0 2 58.0 3 10.3254 7 10.7196 10 18.0 2 49.6681 11 8.8182 11 25.1087 12 36.6061 9 81.9241 12 31.5801 11 57.0 2 18.6282 11 15.0 2 17.9241 10 12.0 2 1.5194 12 58.0 3]
Total: 791.7515
Mean: 15.83503
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2882.5933696000034
Median total errors in population: 858.0065000000001
Error averages by case: (111.40391710000006 3.85 94.44474000000089 8.39 118.63883110000218 7.579 100.74668319999928 8.528 92.72724039999989 3.379 80.09429500000002 3.701 87.2643536 3.09 109.53313640000006 3.477 144.8675913 4.725 94.40909390000088 7.57 108.0077279999985 9.206 91.14168929999992 3.824 113.24574119999984 10.115 100.83182309999906 11.902 119.75910519999998 11.711 128.26434149999986 10.133 159.3312810000008 10.659 97.72198750000045 9.411 137.48072779999987 3.851 99.8653647000015 9.667 89.8102013 3.186 101.19717949999989 10.532 85.69258959999998 3.854 97.27685160000085 10.544 141.38387630000003 4.569)
Error minima by case: (4.4056 1 0.1233 2 25.9241 2 2.4154 2 1.0 1 0.0 0 0.0 0 1.8074 1 3.8067 2 4.8264 1 10.7196 2 0.0 0 3.8515 1 0.1912 7 1.3755 8 1.3265 8 33.7753 1 0.0053 1 2.2292 1 1.6282 1 0.0 0 1.8407 1 0.0 0 1.5194 2 22.8749 2)
Average genome size in population (length): 71.815
Average program size in population (points): 72.815
Average percent parens in population: 0.014
Minimum age in population: 69.17152200995793
Maximum age in population: 74.40847902401688
Average age in population: 72.52779105662363
Median age in population: 72.60250760165081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.289
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 63904618
--- Timings ---
Current time: 1529616136549 milliseconds
Total Time:         163.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 37.2%
Fitness Testing:     82.2 seconds, 50.2%
Report:              20.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 39652.23579999995
Test mean error for best: 19.82612
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 14.8965047106 
Correct output: 9.2244792798   | Program output: 16.0426369433 
Correct output: 43.1776070233  | Program output: 16.0689262411 
Correct output: 54.4783529715  | Program output: 15.872297907  
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 15.5770694766 
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_dec float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times float_stackdepth integer_pop integer_dup float_dec float_dec float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod float_stackdepth float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 47.6681 11 6.8182 11 27.1087 12 38.6061 9 83.9241 12 29.5801 11 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 782.7126999999999
Mean: 15.654254
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2276.511929400006
Median total errors in population: 802.9981
Error averages by case: (89.33108969999996 3.352 67.7741100999999 8.312 92.55196260000129 7.539 73.43638269999936 8.517 67.06140349999995 2.967 56.71071160000005 4.079 65.71439339999998 2.732 84.3537252 3.118 122.81567429999993 4.24 69.69996960000084 7.494 80.90985049999854 9.216 70.07026460000002 3.417 104.61209989999973 10.061 76.5930034 11.32 86.60853119999881 11.857 95.30405360000036 9.936 130.55322500000085 10.768 89.13025740000059 10.246 115.73105679999989 3.338 74.61957080000013 9.789 65.56047430000007 2.843 68.99561889999897 10.054 64.44791840000003 3.427 70.38233469999923 10.665 120.11024719999989 4.147)
Error minima by case: (6.4056 1 0.1233 2 18.7173 2 0.4154 2 1.0 1 0.0 0 0.0 0 18.8087 1 10.9064 2 2.0 1 2.7995 2 2.0 1 2.8515 1 0.0687 8 9.9742 8 1.3265 8 28.8388 1 0.0053 1 44.7708 1 3.3718 1 0.0 0 0.1593 1 0.0 0 0.4806 2 18.8749 2)
Average genome size in population (length): 71.741
Average program size in population (points): 72.741
Average percent parens in population: 0.014
Minimum age in population: 71.61594238265275
Maximum age in population: 75.8724176202012
Average age in population: 74.02447545002225
Median age in population: 74.07703898423146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.256
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 65698143
--- Timings ---
Current time: 1529616140229 milliseconds
Total Time:         167.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 37.1%
Fitness Testing:     84.1 seconds, 50.2%
Report:              21.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 39675.87929999992
Test mean error for best: 19.83794
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 14.1511581178 
Correct output: 9.2244792798   | Program output: 15.813489174  
Correct output: 43.1776070233  | Program output: 15.513169122  
Correct output: 54.4783529715  | Program output: 14.9972907042 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 14.6185165648 
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod float_dec in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_dec float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times float_stackdepth integer_pop integer_dup float_dec float_dec float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 46.9228 12 6.589 9 27.6644 10 39.4811 10 83.9241 12 28.6215 10 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 779.2103
Mean: 15.584206
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2788.2976742000087
Median total errors in population: 800.9981
Error averages by case: (106.73607200000001 3.571 91.3847870999994 8.443 113.17115510000221 7.603 94.81673069999914 8.551 86.9781927999999 3.156 77.25296970000008 5.95 86.55831930000001 3.037 103.42022600000008 3.477 139.74599569999998 4.379 90.50292080000101 7.51 101.95321859999822 9.26 91.21004819999995 3.622 123.64974229999912 10.196 95.0553279999991 11.195 106.55317939999864 11.801 115.1401424000009 10.01 151.5957701000012 11.206 107.6198425000013 10.46 133.07468969999994 3.558 98.67304590000151 9.78 87.71978150000005 3.182 92.57177100000003 10.214 85.7630878 3.548 91.89191170000043 10.683 136.65074589999992 4.216)
Error minima by case: (0.2419 1 0.1233 2 19.6374 2 0.4154 2 0.0 0 0.0 0 0.0 0 5.2155 1 9.9064 2 3.3254 1 3.7196 2 0.0 0 2.3043 2 1.059 7 4.1017 8 0.3265 8 37.7753 1 0.0053 1 1.7708 1 0.3718 1 0.0 0 0.8407 1 0.0 0 0.4806 2 21.8749 2)
Average genome size in population (length): 75.911
Average program size in population (points): 76.911
Average percent parens in population: 0.013
Minimum age in population: 73.12058339683117
Maximum age in population: 77.22570073393332
Average age in population: 75.49262269041807
Median age in population: 75.53207371440946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.264
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 67595918
--- Timings ---
Current time: 1529616143927 milliseconds
Total Time:         171.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 37.0%
Fitness Testing:     86.1 seconds, 50.3%
Report:              21.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 39675.87929999992
Test mean error for best: 19.83794
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 14.1511581178 
Correct output: 9.2244792798   | Program output: 15.813489174  
Correct output: 43.1776070233  | Program output: 15.513169122  
Correct output: 54.4783529715  | Program output: 14.9972907042 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 14.6185165648 
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in1} {:instruction integer_mod} {:instruction float_dec} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc in1 integer_mod float_dec in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec print_integer float_dec integer_dup_times float_shove float_dec float_dec integer_sub float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec float_shove float_dec integer_dup_times integer_mult integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 46.9228 12 6.589 9 27.6644 10 39.4811 10 83.9241 12 28.6215 10 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 779.2103
Mean: 15.584206
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2834.565199400006
Median total errors in population: 796.7515
Error averages by case: (106.52293239999999 3.782 97.08387069999867 8.504 115.40499860000224 7.581 96.69826789999924 8.525 87.2371131999999 3.224 81.36502540000009 8.961 90.662791 3.561 103.24140150000008 3.704 139.67195429999992 4.475 89.95991010000098 7.376 104.6223168999982 9.042 93.50701059999986 3.823 120.50467579999915 10.28 93.9562546999991 11.25 110.31829129999873 11.856 118.81904480000088 10.103 154.31728490000114 11.452 104.95512640000126 10.126 131.89791829999984 3.801 102.54819190000167 9.533 92.17077070000003 3.627 96.16387630000027 10.223 89.37538589999994 3.733 93.53677130000031 10.459 136.50801449999992 4.515)
Error minima by case: (12.336 1 0.1233 2 17.6374 2 0.4154 2 0.0 0 0.0 0 1.0 1 14.0 1 49.0 2 1.3254 1 1.7196 2 1.0 1 1.4303 1 0.059 9 10.9742 7 0.3265 7 17.7753 1 0.1656 1 21.1595 1 0.3718 1 2.0 1 0.1593 1 1.0 1 0.4806 2 49.0 2)
Average genome size in population (length): 82.31
Average program size in population (points): 83.31
Average percent parens in population: 0.012
Minimum age in population: 74.65817555345508
Maximum age in population: 78.79972873304958
Average age in population: 76.98162223166983
Median age in population: 77.02158369186323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.275
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 69653668
--- Timings ---
Current time: 1529616147760 milliseconds
Total Time:         174.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 36.9%
Fitness Testing:     88.1 seconds, 50.4%
Report:              22.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 39641.27030000001
Test mean error for best: 19.82064
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 14.1361520894 
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 4.9117 11 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 776.0389
Mean: 15.520778
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2818.601265400006
Median total errors in population: 791.7515
Error averages by case: (104.78000139999999 3.932 97.19856069999878 8.534 112.55806700000193 7.551 95.10244969999962 8.48 83.14654249999991 3.027 79.32440760000001 9.915 92.17692680000002 3.898 99.62412280000005 3.756 138.98951919999996 4.537 87.31808350000095 7.383 101.99829609999844 8.909 95.9826460999999 3.907 119.92688619999949 10.181 94.05868469999938 11.301 113.27222689999896 11.895 121.1962276000006 10.217 155.47497820000092 11.484 104.2603475000008 9.883 129.94270129999987 3.969 103.31151440000133 9.385 91.34574679999996 3.747 95.34818110000005 10.22 90.46578979999991 4.012 91.76880400000016 10.115 135.0105535 4.781)
Error minima by case: (11.4247 1 0.1233 2 6.915 2 0.4154 2 0.0 0 1.0 1 3.0 1 7.8846 1 17.9064 1 0.3254 1 0.7196 1 1.0 1 2.4128 1 0.1572 8 5.9742 8 0.2662 7 26.0728 1 0.0729 1 2.6012 1 2.6282 1 0.0 0 1.387 1 0.699 1 0.4806 2 10.8749 2)
Average genome size in population (length): 85.668
Average program size in population (points): 86.668
Average percent parens in population: 0.012
Minimum age in population: 76.02723550110223
Maximum age in population: 80.36331627540926
Average age in population: 78.47876496287272
Median age in population: 78.51576935394606
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.299
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 71795368
--- Timings ---
Current time: 1529616151615 milliseconds
Total Time:         178.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.8 seconds, 36.8%
Fitness Testing:     90.2 seconds, 50.4%
Report:              22.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 39641.27030000001
Test mean error for best: 19.82064
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 14.1361520894 
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 4.9117 11 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 776.0389
Mean: 15.520778
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2748.7205447000033
Median total errors in population: 788.7515
Error averages by case: (103.05886789999997 3.82 92.8995147999992 8.691 107.10238270000139 7.602 89.55119829999975 8.458 80.56520739999998 2.882 81.60904090000004 10.131 91.52866100000003 3.817 96.9238631 3.616 137.1179558999999 4.18 82.88684070000086 7.566 96.27030669999847 9.082 95.55627709999989 3.602 116.78850379999959 10.264 89.43697509999981 11.232 109.54694409999887 11.8 118.18024320000065 10.07 153.61927950000089 11.597 100.40520190000046 9.896 128.9775729999999 3.828 98.79478890000091 9.605 90.46594730000002 3.694 93.20282699999974 10.091 90.0548292 3.912 86.76778449999999 9.915 133.3435306999999 4.715)
Error minima by case: (16.0 1 0.8767 1 16.6374 2 0.4154 2 0.0 0 0.8651 1 1.0 1 2.9694 1 48.0 1 0.3254 1 0.7196 2 2.0 1 0.1485 1 0.059 8 5.7376 7 0.3265 8 41.6235 1 0.2336 1 47.0 1 0.3718 1 1.0 1 1.1504 1 1.0 1 0.4806 2 48.0 2)
Average genome size in population (length): 87.049
Average program size in population (points): 88.049
Average percent parens in population: 0.011
Minimum age in population: 77.42642529732258
Maximum age in population: 81.85431462478986
Average age in population: 79.8739793802103
Median age in population: 79.88403745522614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.282
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 73971593
--- Timings ---
Current time: 1529616155485 milliseconds
Total Time:         182.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 36.7%
Fitness Testing:     92.3 seconds, 50.5%
Report:              23.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 39641.27030000001
Test mean error for best: 19.82064
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 14.1361520894 
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec float_yank float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 4.9117 11 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 776.0389
Mean: 15.520778
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2659.2473908
Median total errors in population: 788.7515
Error averages by case: (95.48530159999997 3.712 93.33625939999857 8.554 107.08020740000207 7.509 90.00129169999961 8.145 76.61062809999993 2.756 74.75765390000005 10.204 84.37322609999998 3.708 93.23203430000004 3.55 129.3487916999999 4.018 80.77813860000086 7.438 96.56432789999853 9.0 88.75149729999995 3.342 113.5688659999994 10.194 87.19121359999973 11.142 107.57618289999901 11.681 115.89678190000086 10.136 151.07151460000122 11.655 97.75400440000071 9.671 121.42153439999989 3.75 99.98062770000156 9.492 87.2236364 3.556 90.00584200000014 9.971 83.11190179999996 3.782 86.97549940000002 9.594 125.96342769999993 4.627)
Error minima by case: (2.128 1 0.1233 2 9.7173 2 0.4154 2 0.0 0 0.0 0 1.0 1 13.0 1 11.3176 1 0.8264 1 1.7196 2 7.0 1 4.1518 1 0.1279 8 5.9742 8 0.3265 8 27.0728 1 0.3625 1 12.684 1 0.3718 1 3.0 1 1.0759 1 1.0 1 0.4806 2 26.4878 2)
Average genome size in population (length): 88.198
Average program size in population (points): 89.198
Average percent parens in population: 0.011
Minimum age in population: 79.25858949284846
Maximum age in population: 83.19303355814831
Average age in population: 81.32435596600438
Median age in population: 81.33123159813411
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.291
Error (vector) diversity:			 0.297
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 76176543
--- Timings ---
Current time: 1529616159445 milliseconds
Total Time:         186.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.3 seconds, 36.6%
Fitness Testing:     94.4 seconds, 50.6%
Report:              23.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 39641.27030000001
Test mean error for best: 19.82064
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 14.1361520894 
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_dec float_dec integer_flush integer_flush float_shove float_dec integer_dup_times float_dec float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_dec float_shove integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 4.9117 11 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 776.0389
Mean: 15.520778
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2785.6846783999995
Median total errors in population: 786.8819
Error averages by case: (101.38191739999996 3.796 98.63211379999858 8.358 112.44190040000187 7.376 95.37392019999955 7.905 82.47032879999989 2.88 77.92739879999999 10.084 90.2952068 3.722 98.77235390000006 3.661 135.83450710000002 4.079 84.66514980000076 7.322 102.26621589999863 8.83 94.55650950000003 3.342 118.01639280000006 10.093 92.31224609999994 10.886 113.18156869999919 11.215 121.09969530000077 10.256 155.77897370000107 11.575 102.17210239999964 9.192 127.23743999999999 3.837 103.29059720000139 9.3 91.81119779999999 3.651 95.3670195000002 9.94 87.94961319999999 3.823 92.04699699999948 9.355 131.6363123 4.689)
Error minima by case: (14.0 1 0.1233 2 16.6374 2 0.4154 2 0.0 0 0.0 0 1.0558 1 8.043 1 46.0 1 0.3254 1 0.7196 2 0.0 0 0.8515 1 0.0066 8 6.1017 8 0.3265 7 0.2247 1 0.0406 1 7.6442 1 0.3718 1 1.0 1 0.0759 1 2.0 1 0.4806 2 20.2517 2)
Average genome size in population (length): 88.99
Average program size in population (points): 89.99
Average percent parens in population: 0.011
Minimum age in population: 80.58664702970937
Maximum age in population: 84.61632856370183
Average age in population: 82.795953567304
Median age in population: 82.84658478231567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.324
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 78401293
--- Timings ---
Current time: 1529616163382 milliseconds
Total Time:         190.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.5 seconds, 36.5%
Fitness Testing:     96.6 seconds, 50.7%
Report:              24.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 39641.27030000001
Test mean error for best: 19.82064
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 14.1361520894 
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction tagged_764} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush integer_pop float_shove float_dec print_integer float_dec integer_dup_times float_shove float_dec float_dec integer_sub float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec tagged_764 float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 4.9117 11 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 776.0389
Mean: 15.520778
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2593.5066655999995
Median total errors in population: 787.2490999999999
Error averages by case: (94.08731890000001 3.987 92.14814989999896 8.359 105.66728390000182 7.357 88.9717658999996 7.956 75.97561589999981 2.977 70.23904200000014 10.164 82.3109855 3.805 92.33301110000004 3.793 128.79046890000006 4.208 78.9319637000008 7.329 95.57165789999863 8.785 86.05699519999996 3.527 107.20256380000043 10.17 81.34106710000023 10.63 102.76358289999969 10.78 111.14270340000066 10.356 148.03400210000112 11.61 91.39234589999927 8.925 119.88754210000006 4.015 97.66185700000132 9.259 84.80759110000005 3.759 87.49964109999976 9.966 80.51681539999994 3.934 85.7154901 9.361 124.64820480000006 4.797)
Error minima by case: (4.1614 1 0.8767 2 13.7173 1 0.4154 2 0.0 0 1.0 1 3.0 1 3.2672 1 15.9064 1 1.3254 1 1.2804 2 0.0 0 0.1194 1 0.0696 7 4.9742 8 0.3265 7 15.5283 1 0.7916 1 4.6621 1 3.6282 1 0.0 0 0.387 1 3.0 1 0.4806 2 12.8749 2)
Average genome size in population (length): 90.879
Average program size in population (points): 91.879
Average percent parens in population: 0.011
Minimum age in population: 82.08336452394605
Maximum age in population: 86.22383824964518
Average age in population: 84.18421518991924
Median age in population: 84.2591874448319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.357
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 80673268
--- Timings ---
Current time: 1529616167364 milliseconds
Total Time:         194.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.8 seconds, 36.4%
Fitness Testing:     98.8 seconds, 50.8%
Report:              24.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 39641.27030000001
Test mean error for best: 19.82064
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 14.1361520894 
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_pop float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec float_yank float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec in2 float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 4.9117 11 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 776.0389
Mean: 15.520778
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2491.8733317999995
Median total errors in population: 784.78855
Error averages by case: (92.22910159999995 4.023 84.65262419999956 8.395 98.35244980000104 7.422 81.36298329999967 7.979 72.4323609999999 3.014 69.45719800000006 10.097 80.3426633 3.834 88.97196449999998 3.827 127.2722114 4.187 73.00096370000072 7.346 87.98017799999884 8.882 84.1077038 3.525 104.30449830000019 10.243 77.04913610000017 10.675 98.17347669999992 10.551 106.84580580000028 10.151 143.6718024000008 11.692 88.4655420999997 8.626 117.91276470000008 4.043 91.2913480000007 9.402 81.24220830000003 3.8 83.11974349999966 9.891 78.52857369999998 3.952 78.43541000000009 9.456 122.84561959999996 4.812)
Error minima by case: (4.5944 1 0.1233 2 14.4385 2 0.4154 2 0.0 0 1.0 1 2.0 1 11.0 1 0.0936 1 0.3254 1 0.2804 1 2.0 1 2.6957 1 0.0462 8 1.2764 7 0.3265 7 1.6994 1 0.2487 1 7.0731 1 1.3718 1 0.0 0 0.9241 1 1.6738 1 0.4806 2 6.9056 2)
Average genome size in population (length): 90.401
Average program size in population (points): 91.401
Average percent parens in population: 0.011
Minimum age in population: 83.2414152574278
Maximum age in population: 87.3801227285803
Average age in population: 85.5897245232042
Median age in population: 85.65251847060311
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.325
Error (vector) diversity:			 0.34
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 82933293
--- Timings ---
Current time: 1529616171343 milliseconds
Total Time:         198.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.0 seconds, 36.3%
Fitness Testing:    101.0 seconds, 50.9%
Report:              25.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2363.0287167000006
Median total errors in population: 782.7183
Error averages by case: (86.13647129999998 3.909 81.42878919999967 8.413 95.94121370000117 7.428 78.27377039999958 7.937 66.34049739999996 2.814 63.311185100000095 10.052 73.80912820000006 3.719 82.77656870000004 3.64 121.1117521 4.074 69.98208870000077 7.368 85.26350399999866 8.895 77.90110889999997 3.311 98.19118369999984 10.351 70.79572019999999 10.885 92.42522990000008 10.459 101.20900530000009 10.028 139.3382709000009 11.611 82.3140738999999 8.371 112.44889270000004 3.92 87.64249250000054 9.398 75.99938090000005 3.579 78.14421699999937 9.802 72.22358799999992 3.812 75.05422380000032 9.449 117.06336019999992 4.678)
Error minima by case: (15.0 1 0.1233 2 14.4385 2 0.4154 2 0.0 0 0.1345 1 1.0584 1 11.0 1 47.0 1 0.0 0 0.2804 2 1.0 1 0.3043 1 0.0696 8 6.9742 8 0.3265 7 27.0728 1 0.4342 1 27.0623 1 0.6282 1 0.0 0 0.0759 1 1.7887 1 0.4806 2 47.0 2)
Average genome size in population (length): 90.072
Average program size in population (points): 91.072
Average percent parens in population: 0.011
Minimum age in population: 84.60684654601026
Maximum age in population: 88.82256357379283
Average age in population: 86.87421550732441
Median age in population: 86.88776206588322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.316
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 85185118
--- Timings ---
Current time: 1529616175308 milliseconds
Total Time:         202.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.3 seconds, 36.2%
Fitness Testing:    103.1 seconds, 50.9%
Report:              26.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2515.142681200005
Median total errors in population: 782.7183
Error averages by case: (93.66050519999993 4.001 85.68796649999918 8.441 100.46027040000143 7.479 82.82387779999951 7.984 71.9134647999999 2.89 71.2449186000001 10.134 81.68774800000001 3.824 87.84995260000002 3.706 128.43966239999997 4.181 73.43643170000078 7.427 89.86503679999865 8.907 85.57219179999998 3.442 106.05630199999933 10.3 77.96310509999941 11.161 99.429704 10.341 107.78586749999974 9.958 144.10965880000103 11.665 89.97500779999962 8.137 119.75565319999995 4.031 90.58859330000097 9.442 80.24106850000005 3.648 83.7009117999997 9.919 80.0382809999999 3.931 79.48809019999996 9.456 124.2474114 4.716)
Error minima by case: (8.1962 1 0.1233 2 13.6374 2 0.4154 2 0.0 0 0.2163 1 2.0032 1 6.8575 1 19.9064 1 0.6746 1 0.2804 1 2.0 1 3.9898 2 0.0696 8 1.8496 8 0.3265 7 1.6994 1 0.1346 1 10.5819 1 4.6282 1 0.0 0 2.1593 1 4.0 1 0.4806 2 11.8749 2)
Average genome size in population (length): 88.415
Average program size in population (points): 89.415
Average percent parens in population: 0.011
Minimum age in population: 86.0217864440528
Maximum age in population: 90.14972449427249
Average age in population: 88.13136521833586
Median age in population: 88.18131805897713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.284
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 87395493
--- Timings ---
Current time: 1529616179247 milliseconds
Total Time:         206.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.5 seconds, 36.1%
Fitness Testing:    105.3 seconds, 51.0%
Report:              26.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_add} {:instruction in1} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_add in1 float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_dup_times float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2258.169864400004
Median total errors in population: 782.0777
Error averages by case: (82.65426539999996 3.777 74.2070094999999 8.681 88.77444300000126 7.701 70.28916639999947 8.218 63.92174089999992 2.76 60.798824600000124 10.224 70.84786640000002 3.595 80.44914070000003 3.664 117.04648779999997 3.884 63.883792000000874 7.652 77.31191309999858 9.21 75.23198279999994 3.181 98.5858140999992 10.334 67.20447679999909 11.221 88.9845389000001 10.033 97.68898069999987 9.808 134.0263365000009 11.807 81.61925840000019 8.082 108.43345230000001 3.797 80.65300200000037 9.821 73.67414300000007 3.641 72.33428749999887 9.846 69.39500409999994 3.691 67.75083110000035 9.798 113.51510639999992 4.462)
Error minima by case: (12.9241 1 0.1233 2 16.6374 2 0.4154 2 0.0 0 1.1461 1 0.0 0 4.1913 1 44.9241 1 0.3254 1 0.7196 1 1.0 1 7.564 1 0.0883 8 0.0039 6 0.3265 8 7.4341 2 0.3732 1 43.9241 1 1.6282 1 2.0 1 1.613 1 0.0 0 0.4806 2 44.9241 2)
Average genome size in population (length): 87.467
Average program size in population (points): 88.467
Average percent parens in population: 0.011
Minimum age in population: 87.22869339351644
Maximum age in population: 91.36063369933045
Average age in population: 89.49761669478994
Median age in population: 89.54780095942559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.261
Error (vector) diversity:			 0.265
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 89582168
--- Timings ---
Current time: 1529616183144 milliseconds
Total Time:         210.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 36.0%
Fitness Testing:    107.4 seconds, 51.1%
Report:              27.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2294.6412453000034
Median total errors in population: 782.0777
Error averages by case: (85.12616629999997 3.906 75.29785459999967 8.523 89.60533080000121 7.522 71.48264629999952 8.077 64.69081089999995 2.835 60.84731030000011 10.089 73.38988629999999 3.703 81.68007600000001 3.701 120.04647220000003 4.004 64.80463990000075 7.466 78.51999899999869 9.035 77.54751119999997 3.296 99.61135079999914 10.109 69.40741829999907 11.152 90.99315519999993 10.058 99.71673629999971 9.829 134.93349310000104 11.688 83.22556699999976 7.938 110.19921070000001 3.924 81.8592315000005 9.589 73.89548090000005 3.655 73.58239089999934 9.81 71.67004889999994 3.794 68.60720680000047 9.598 116.03325109999983 4.567)
Error minima by case: (16.4056 1 0.1233 2 18.6374 2 0.4154 2 0.0 0 1.0 1 0.8948 1 5.4884 1 42.8842 1 1.9291 1 2.7196 2 1.0 1 6.3049 1 0.0883 7 3.1145 8 0.3265 8 17.7753 1 0.2191 1 4.7708 1 1.3718 1 1.0 1 1.3685 1 4.0 1 0.4806 2 11.1029 2)
Average genome size in population (length): 87.426
Average program size in population (points): 88.426
Average percent parens in population: 0.011
Minimum age in population: 88.22869339351644
Maximum age in population: 92.90004004495479
Average age in population: 90.86445732553301
Median age in population: 90.93115657165296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.253
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 91767818
--- Timings ---
Current time: 1529616187048 milliseconds
Total Time:         214.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.0 seconds, 35.9%
Fitness Testing:    109.6 seconds, 51.1%
Report:              27.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2279.0419164000027
Median total errors in population: 781.4169499999999
Error averages by case: (84.11183650000001 3.821 74.12583119999962 8.658 89.0739208000013 7.64 70.29312259999962 8.191 63.88373799999992 2.836 61.1786702000001 10.195 72.47086160000002 3.638 80.5781945 3.674 118.9147666 3.91 64.65441730000096 7.583 77.39275419999856 9.16 75.97610399999998 3.23 99.49691979999913 10.175 68.5660295999991 11.096 90.16598379999998 10.0 98.95305429999976 9.81 135.27559190000088 11.743 83.00151019999971 7.989 110.51765329999995 3.82 81.13938950000069 9.809 73.55690680000006 3.648 73.59292619999924 9.776 70.96148189999995 3.747 67.66041510000039 9.754 115.05983650000002 4.537)
Error minima by case: (3.6141 1 0.1233 2 15.6374 2 0.4154 2 0.0 0 1.0 1 4.2134 1 1.9954 1 47.0 1 0.3254 1 0.2804 2 0.0 0 2.564 1 0.059 7 1.2135 7 0.3265 8 20.0728 2 0.7859 1 12.4376 1 11.6282 1 3.0 1 1.1593 1 6.0 1 0.4806 2 40.3335 2)
Average genome size in population (length): 88.118
Average program size in population (points): 89.118
Average percent parens in population: 0.011
Minimum age in population: 89.67304495481484
Maximum age in population: 94.03962515768696
Average age in population: 92.1438429222347
Median age in population: 92.13369026733344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.257
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 93970768
--- Timings ---
Current time: 1529616191022 milliseconds
Total Time:         218.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.2 seconds, 35.8%
Fitness Testing:    111.7 seconds, 51.2%
Report:              28.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_max} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_max -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2621.2963531000028
Median total errors in population: 782.0174000000002
Error averages by case: (97.29511609999992 3.973 91.27320489999886 8.821 107.71186550000175 7.862 88.32451619999964 8.397 79.00493279999995 3.059 72.76851330000004 10.268 85.31054390000003 3.748 93.94022680000003 3.873 131.58383050000003 4.06 80.23757100000091 7.813 95.83857849999863 9.367 89.23656509999996 3.387 110.50413689999887 10.327 79.53873019999935 10.923 100.1476359999997 10.075 108.71194249999945 9.917 146.09052940000078 11.787 94.0224173999994 8.159 123.24378229999998 4.006 95.57022710000126 9.985 86.63617890000005 3.829 85.24635739999975 9.869 83.75475089999998 3.903 85.35736279999972 9.876 127.97983669999996 4.683)
Error minima by case: (15.0 1 0.8767 2 0.0751 2 0.4154 2 0.0 0 0.0 0 1.0 1 1.0769 1 47.0 1 0.6746 1 0.2804 2 0.0 0 0.9249 1 0.0883 8 1.7493 7 0.2175 8 2.063 1 0.7084 1 37.3386 1 1.6282 1 1.0 1 0.9241 1 1.0 1 0.2878 2 47.0 2)
Average genome size in population (length): 88.76
Average program size in population (points): 89.76
Average percent parens in population: 0.011
Minimum age in population: 91.14752478807588
Maximum age in population: 95.42162953601347
Average age in population: 93.47147319683151
Median age in population: 93.48007340234813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.278
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 96189793
--- Timings ---
Current time: 1529616194961 milliseconds
Total Time:         222.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.4 seconds, 35.8%
Fitness Testing:    113.9 seconds, 51.3%
Report:              28.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_pop float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2454.3458438000025
Median total errors in population: 782.0174000000002
Error averages by case: (91.69942810000003 3.8 81.22479209999948 8.595 97.54681240000151 7.644 78.3971872999995 8.17 71.60168049999986 2.907 68.69304700000012 10.149 79.9659384 3.577 88.2431538 3.739 125.50370260000011 3.92 71.62622800000088 7.516 85.69044989999864 9.089 84.11800320000002 3.265 107.13113519999875 10.012 76.73549219999956 10.72 96.45866479999971 10.082 104.01300329999953 9.892 137.8549978000009 11.662 90.11167429999958 7.831 117.80649609999995 3.85 87.26735580000073 9.662 81.1972035000001 3.705 77.78591489999934 9.856 78.64076019999997 3.74 75.19293890000016 9.707 122.20378350000004 4.546)
Error minima by case: (14.0 1 0.1233 2 14.6374 2 0.4154 2 0.0 0 2.0 1 0.0 0 9.2784 1 46.0 1 0.3254 1 0.7196 2 2.0 1 4.1485 1 0.0883 8 5.1145 7 0.3265 8 0.6994 1 0.0743 1 28.3404 1 0.6282 1 0.0 0 0.0759 1 0.0 0 0.4806 2 46.0 2)
Average genome size in population (length): 90.985
Average program size in population (points): 91.985
Average percent parens in population: 0.011
Minimum age in population: 92.78077007905134
Maximum age in population: 96.91743514823399
Average age in population: 94.77764920046248
Median age in population: 94.8251808318521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.261
Error (vector) diversity:			 0.27
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 98464443
--- Timings ---
Current time: 1529616198895 milliseconds
Total Time:         226.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.7 seconds, 35.7%
Fitness Testing:    116.1 seconds, 51.4%
Report:              29.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_dup_times float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2502.0147089999996
Median total errors in population: 782.0174000000002
Error averages by case: (92.50146849999996 3.927 83.62526439999878 8.683 99.5698152000018 7.712 80.56714449999957 8.225 72.95608999999989 3.029 71.89532100000005 10.156 80.50218760000013 3.688 89.5194230000001 3.841 127.21735620000011 4.018 73.28866860000089 7.646 87.98250379999847 9.162 83.83486689999991 3.341 108.40713869999874 10.069 78.5866827999996 10.621 98.57462409999938 10.045 106.79423929999936 9.881 143.28427240000087 11.651 91.95225869999906 7.91 117.68865799999988 3.979 89.3874245000015 9.78 81.66724829999998 3.811 83.41572690000012 9.751 78.9344211 3.88 77.49830559999958 9.736 123.1585989 4.663)
Error minima by case: (2.1247 1 0.8767 2 16.6374 2 0.4154 2 0.0 0 1.0 1 0.0 0 13.0 1 48.0 1 0.3254 1 0.7196 1 0.0 0 0.962 2 0.0883 7 5.9614 7 0.3265 8 14.0728 1 0.4206 1 10.9483 1 2.6183 1 0.0 0 1.9241 1 0.0 0 0.4806 2 38.8442 2)
Average genome size in population (length): 91.628
Average program size in population (points): 92.628
Average percent parens in population: 0.011
Minimum age in population: 94.20409334417134
Maximum age in population: 97.87223195803486
Average age in population: 96.09223771438835
Median age in population: 96.15104005978857
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.267
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 100755143
--- Timings ---
Current time: 1529616202841 milliseconds
Total Time:         230.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.9 seconds, 35.6%
Fitness Testing:    118.3 seconds, 51.4%
Report:              29.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_rot} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction tag_integer_741} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_rot float_add in1 integer_dup_times float_stackdepth tag_integer_741 float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_rot float_dec integer_flush float_dec float_stackdepth float_dec integer_flush float_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush integer_pop float_dec integer_dup float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2338.1963732
Median total errors in population: 782.0174000000002
Error averages by case: (86.39465849999993 3.556 77.61733739999931 8.694 94.80347920000155 7.811 74.85839339999951 8.263 65.29549609999998 2.642 62.942800900000094 10.121 74.68518420000007 3.373 81.42424170000005 3.474 119.91873570000006 3.716 67.10295160000082 7.692 82.71152659999849 9.219 78.7789176 2.973 103.45711209999894 10.129 72.3501879999996 10.511 91.57913099999966 9.938 99.9855621999996 9.765 134.55946250000088 11.696 86.86306579999952 7.99 112.55988699999995 3.578 83.29092680000096 9.827 74.52643970000004 3.465 74.29508299999944 9.88 73.52128630000003 3.534 71.67905570000013 9.774 117.00245020000004 4.372)
Error minima by case: (4.8762 1 0.8767 2 16.6374 2 0.0851 2 0.0 0 2.0 1 4.0 1 7.2054 1 48.0 1 0.3254 1 0.7196 1 1.0 1 2.5615 1 0.1486 8 6.1145 7 0.3265 8 12.0728 1 0.7983 1 3.9474 1 0.3718 1 0.0 0 1.0759 1 4.0 1 0.3635 2 31.8433 2)
Average genome size in population (length): 91.849
Average program size in population (points): 92.849
Average percent parens in population: 0.011
Minimum age in population: 95.45059231938389
Maximum age in population: 99.51905220062118
Average age in population: 97.45880371876245
Median age in population: 97.50316186771866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.263
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 103051418
--- Timings ---
Current time: 1529616206852 milliseconds
Total Time:         234.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        83.1 seconds, 35.5%
Fitness Testing:    120.5 seconds, 51.5%
Report:              30.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 39616.69809999998
Test mean error for best: 19.80835
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 110.2465028256
Correct output: 148.63744302   | Program output: 173.27488604  
Correct output: 130.4153758773 | Program output: 130.8307517545
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 56.6507598003 
Correct output: 144.7196283487 | Program output: 153.4392566973
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: 15.8683151966 
Correct output: 9.2244792798   | Program output: 15.075909246  
Correct output: 43.1776070233  | Program output: 16.0630707743 
Correct output: 54.4783529715  | Program output: 16.0703795184 
Correct output: 116.7753441439 | Program output: 32.8512533899 
Correct output: -14.0030129507 | Program output: 16.030237514  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 74.7436847634 
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 27.8406857932 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 109.0387826825
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 float_max float_dup_times 38.07590924596505 float_inc float_max float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_dup_times float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 7.8767 9 24.6374 8 0.4154 8 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 8.3254 8 8.7196 10 20.0 1 48.6399 11 5.8514 10 27.1145 9 38.408 9 83.9241 12 30.0333 8 55.0 2 20.6282 11 17.0 2 19.9241 9 14.0 2 0.4806 10 56.0 3]
Total: 775.9786000000001
Mean: 15.519572
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2255.4752061
Median total errors in population: 782.0174000000002
Error averages by case: (81.11445130000001 3.733 75.95083419999982 8.639 93.3503968000011 7.737 73.48234509999956 8.235 62.91496029999995 2.828 58.77864360000011 10.253 69.16980220000008 3.52 78.60369209999999 3.656 115.71026770000016 3.825 65.02287540000084 7.609 81.3753195999986 9.113 73.34641230000001 3.156 99.9726372999993 10.069 69.44212749999967 10.542 88.75176820000021 10.017 96.56440479999998 9.847 130.9306316000007 11.644 83.2720208 7.983 107.40497599999989 3.809 80.82126210000033 9.7 70.86121090000012 3.661 71.60750649999912 9.897 67.66017800000002 3.696 69.89617470000042 9.67 112.11630710000004 4.515)
Error minima by case: (16.0 1 0.8767 2 16.6374 2 0.2935 2 0.0 0 4.0 1 1.0 1 6.873 1 48.0 1 0.3254 1 0.7196 2 2.0 1 1.8515 1 0.1486 7 1.8341 8 0.2662 7 4.2975 1 0.0421 1 47.0 1 3.3843 1 2.0 1 2.7531 1 0.7499 1 0.4806 2 48.0 2)
Average genome size in population (length): 92.05
Average program size in population (points): 93.05
Average percent parens in population: 0.011
Minimum age in population: 96.6595065959871
Maximum age in population: 100.4931927986457
Average age in population: 98.78079802818286
Median age in population: 98.80334335071055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.266
Error (vector) diversity:			 0.271
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 105352668
--- Timings ---
Current time: 1529616210861 milliseconds
Total Time:         238.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.4 seconds, 35.4%
Fitness Testing:    122.7 seconds, 51.6%
Report:              30.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 35882.98279999999
Test mean error for best: 17.94149
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 121.2750699048
Correct output: 148.63744302   | Program output: 152.7892615119
Correct output: 130.4153758773 | Program output: 131.5671943692
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 94.4771983921 
Correct output: 144.7196283487 | Program output: 142.8714468406
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: -27.6197810677
Correct output: 9.2244792798   | Program output: -4.6237022283 
Correct output: 43.1776070233  | Program output: -1.6705744848 
Correct output: 54.4783529715  | Program output: 10.6301714635 
Correct output: 116.7753441439 | Program output: 71.9271626358 
Correct output: -14.0030129507 | Program output: 4.1488055412  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 103.5236608736
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 66.9165950392 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 120.6712098332
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_sub float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 3.1518 11 4.1518 12 1.1518 11 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 46.1518 11 1.8482 8 20.0 1 5.1518 11 13.8482 9 44.8482 11 43.8482 11 44.8482 12 18.1518 11 55.0 2 8.1518 13 17.0 2 19.1518 12 14.0 2 11.1518 9 56.0 3]
Total: 736.6072
Mean: 14.732144
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2232.5869386
Median total errors in population: 782.0174000000002
Error averages by case: (82.49546459999999 3.595 73.412121 8.609 90.43596950000088 7.679 70.70354439999973 8.191 59.69178349999997 2.673 62.746894400000095 10.205 70.88559620000005 3.394 76.53177369999999 3.51 116.67254410000011 3.724 62.17548160000069 7.548 78.41978919999887 9.076 75.15538940000002 3.062 98.25999569999954 9.983 67.30640129999969 10.494 86.57753210000024 9.977 94.40118870000013 9.82 131.21705890000052 11.693 81.26591869999994 7.874 109.03910899999997 3.654 77.87407360000024 9.661 69.57034980000005 3.495 71.95943439999915 9.87 69.55531510000002 3.59 67.4207020000003 9.704 113.32450770000005 4.408)
Error minima by case: (9.0759 1 0.1233 2 4.1518 2 0.4154 2 0.0 0 1.8655 1 1.0 1 0.4886 1 22.9241 1 0.3254 1 0.2804 1 1.3213 1 5.1518 1 0.1486 8 3.9614 7 0.3265 8 0.3006 1 1.4206 1 20.9256 1 3.3718 1 1.0 1 1.1593 2 1.0 1 0.4806 2 22.9241 2)
Average genome size in population (length): 92.037
Average program size in population (points): 93.037
Average percent parens in population: 0.011
Minimum age in population: 97.67544557798774
Maximum age in population: 102.0026538200157
Average age in population: 100.112258339097
Median age in population: 100.1504108314757
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.251
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 107653643
--- Timings ---
Current time: 1529616214864 milliseconds
Total Time:         242.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.6 seconds, 35.4%
Fitness Testing:    124.9 seconds, 51.6%
Report:              31.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 35882.98279999999
Test mean error for best: 17.94149
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 121.2750699048
Correct output: 148.63744302   | Program output: 152.7892615119
Correct output: 130.4153758773 | Program output: 131.5671943692
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 94.4771983921 
Correct output: 144.7196283487 | Program output: 142.8714468406
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: -27.6197810677
Correct output: 9.2244792798   | Program output: -4.6237022283 
Correct output: 43.1776070233  | Program output: -1.6705744848 
Correct output: 54.4783529715  | Program output: 10.6301714635 
Correct output: 116.7753441439 | Program output: 71.9271626358 
Correct output: -14.0030129507 | Program output: 4.1488055412  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 103.5236608736
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 66.9165950392 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 120.6712098332
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_sub float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 3.1518 11 4.1518 12 1.1518 11 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 46.1518 11 1.8482 8 20.0 1 5.1518 11 13.8482 9 44.8482 11 43.8482 11 44.8482 12 18.1518 11 55.0 2 8.1518 13 17.0 2 19.1518 12 14.0 2 11.1518 9 56.0 3]
Total: 736.6072
Mean: 14.732144
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2352.7405776999994
Median total errors in population: 782.0174000000002
Error averages by case: (87.14022709999998 3.537 78.70993509999968 8.752 94.87947370000114 7.803 75.72783259999963 8.342 65.27149849999996 2.635 65.08677190000009 10.102 75.55119810000004 3.35 82.136606 3.484 119.58667570000011 3.704 68.63579680000076 7.71 83.09231749999871 9.211 80.26281659999998 2.98 102.74010739999923 10.092 71.41297159999965 10.514 90.98955359999998 9.962 99.18742289999979 9.813 135.59868390000065 11.707 85.6105953999998 7.96 114.32147129999994 3.557 83.70332510000051 9.869 75.12428910000006 3.451 76.93096389999924 9.867 74.45123579999998 3.494 72.79693340000031 9.825 117.71387470000005 4.357)
Error minima by case: (14.0 1 0.8767 2 4.1518 2 0.4154 2 0.0 0 1.0 1 0.0 0 2.1683 1 32.7081 1 0.3254 1 0.1518 2 0.0 0 5.1518 1 0.0883 8 3.1145 7 0.1169 8 21.0728 1 0.3379 1 34.8377 1 1.3718 1 1.0 1 1.387 1 0.0 0 0.4806 2 46.0 2)
Average genome size in population (length): 92.059
Average program size in population (points): 93.059
Average percent parens in population: 0.011
Minimum age in population: 98.6830120824302
Maximum age in population: 103.4367153674538
Average age in population: 101.5075418897013
Median age in population: 101.5387124871274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.26
Error (vector) diversity:			 0.266
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 109955143
--- Timings ---
Current time: 1529616218867 milliseconds
Total Time:         246.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.9 seconds, 35.3%
Fitness Testing:    127.1 seconds, 51.7%
Report:              31.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 35882.98279999999
Test mean error for best: 17.94149
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -64.4056316151
Correct output: 118.1232514128 | Program output: 121.2750699048
Correct output: 148.63744302   | Program output: 152.7892615119
Correct output: 130.4153758773 | Program output: 131.5671943692
Correct output: 65.2536404507  | Program output: 67.2536404507 
Correct output: 4.8655188188   | Program output: -6.1344811812 
Correct output: -62.096010847  | Program output: -76.096010847 
Correct output: 51.8846341345  | Program output: 72.8846341345 
Correct output: -156.9063992578 | Program output: -100.9063992578
Correct output: 48.3253799002  | Program output: 94.4771983921 
Correct output: 144.7196283487 | Program output: 142.8714468406
Correct output: -54.8304712332 | Program output: -74.8304712332
Correct output: -32.7715995596 | Program output: -27.6197810677
Correct output: 9.2244792798   | Program output: -4.6237022283 
Correct output: 43.1776070233  | Program output: -1.6705744848 
Correct output: 54.4783529715  | Program output: 10.6301714635 
Correct output: 116.7753441439 | Program output: 71.9271626358 
Correct output: -14.0030129507 | Program output: 4.1488055412  
Correct output: -97.2291531171 | Program output: -42.2291531171
Correct output: 95.3718423817  | Program output: 103.5236608736
Correct output: 68.9270088853  | Program output: 51.9270088853 
Correct output: 47.7647765473  | Program output: 66.9165950392 
Correct output: -48.9289686304 | Program output: -62.9289686304
Correct output: 109.5193913412 | Program output: 120.6712098332
Correct output: -125.1250740365 | Program output: -69.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_sub float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dec float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [24.0 2 3.1518 11 4.1518 12 1.1518 11 2.0 1 11.0 10 14.0 2 21.0 2 56.0 2 46.1518 11 1.8482 8 20.0 1 5.1518 11 13.8482 9 44.8482 11 43.8482 11 44.8482 12 18.1518 11 55.0 2 8.1518 13 17.0 2 19.1518 12 14.0 2 11.1518 9 56.0 3]
Total: 736.6072
Mean: 14.732144
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2320.3756712999993
Median total errors in population: 782.0174000000002
Error averages by case: (84.83419209999995 3.652 77.31517249999996 8.528 92.96219010000095 7.691 74.71298919999964 8.136 63.22759849999998 2.743 63.69600190000009 10.154 73.05531040000008 3.429 79.77911120000002 3.535 118.43290410000014 3.769 68.02728320000081 7.564 81.9386072999987 8.914 76.84406689999999 3.095 100.97600579999957 9.855 73.60015739999965 10.546 93.73870580000012 10.207 100.9297803999998 10.001 133.45749590000057 11.677 85.35929780000022 7.94 111.50809529999998 3.701 82.2322015000003 9.6 73.52920190000003 3.517 75.3649691999991 9.972 71.94763640000001 3.642 71.7231973000004 9.442 115.43649920000004 4.437)
Error minima by case: (2.7992 1 0.8767 2 4.1518 2 0.4154 2 0.0 0 1.0 1 0.0 0 2.2672 1 46.0 1 1.0759 1 0.1518 1 1.0 1 2.6957 1 0.1486 7 7.9742 8 0.3265 8 20.063 1 0.5792 1 2.7666 1 1.6282 1 2.0 1 0.9241 1 0.0 0 0.4806 2 16.7087 2)
Average genome size in population (length): 92.491
Average program size in population (points): 93.491
Average percent parens in population: 0.011
Minimum age in population: 100.0018890111827
Maximum age in population: 104.9845741183364
Average age in population: 102.8610746150958
Median age in population: 102.9240297549784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.274
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 112267443
--- Timings ---
Current time: 1529616222887 milliseconds
Total Time:         250.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.1 seconds, 35.2%
Fitness Testing:    129.4 seconds, 51.7%
Report:              32.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 34573.482
Test mean error for best: 17.28674
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -69.4056316151
Correct output: 118.1232514128 | Program output: 116.2750699048
Correct output: 148.63744302   | Program output: 147.7892615119
Correct output: 130.4153758773 | Program output: 126.5671943692
Correct output: 65.2536404507  | Program output: 62.2536404507 
Correct output: 4.8655188188   | Program output: -11.1344811812
Correct output: -62.096010847  | Program output: -81.096010847 
Correct output: 51.8846341345  | Program output: 67.8846341345 
Correct output: -156.9063992578 | Program output: -105.9063992578
Correct output: 48.3253799002  | Program output: 89.4771983921 
Correct output: 144.7196283487 | Program output: 137.8714468406
Correct output: -54.8304712332 | Program output: -79.8304712332
Correct output: -32.7715995596 | Program output: -32.6197810677
Correct output: 9.2244792798   | Program output: -9.6237022283 
Correct output: 43.1776070233  | Program output: -6.6705744848 
Correct output: 54.4783529715  | Program output: 5.6301714635  
Correct output: 116.7753441439 | Program output: 66.9271626358 
Correct output: -14.0030129507 | Program output: -0.8511944588 
Correct output: -97.2291531171 | Program output: -47.2291531171
Correct output: 95.3718423817  | Program output: 98.5236608736 
Correct output: 68.9270088853  | Program output: 46.9270088853 
Correct output: 47.7647765473  | Program output: 61.9165950392 
Correct output: -48.9289686304 | Program output: -67.9289686304
Correct output: 109.5193913412 | Program output: 115.6712098332
Correct output: -125.1250740365 | Program output: -74.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_inc integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times integer_shove float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_stackdepth float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_pop integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [19.0 2 1.8482 10 0.8482 11 3.8482 12 3.0 1 16.0 11 19.0 2 16.0 2 51.0 2 41.1518 11 6.8482 9 25.0 2 0.1518 9 18.8482 8 49.8482 11 48.8482 10 49.8482 12 13.1518 11 50.0 1 3.1518 11 22.0 2 14.1518 12 19.0 2 6.1518 9 51.0 3]
Total: 725.6963999999999
Mean: 14.513928
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2637.7424107999987
Median total errors in population: 782.0174000000002
Error averages by case: (96.94594449999988 3.862 93.43041549999973 8.956 107.34790970000157 8.343 91.59844989999984 8.681 76.49036389999993 3.022 74.40173580000003 10.184 85.08506150000004 3.673 91.87967010000007 3.764 129.06301210000015 4.078 86.3365205000009 8.119 97.84751099999883 8.944 89.21827670000002 3.434 107.03343119999978 9.945 84.38278579999961 10.54 105.51988949999968 10.445 111.3465287999995 10.232 140.81727730000023 11.683 94.39382490000001 8.447 122.94357629999992 3.913 96.27349200000069 9.983 85.2960513 3.741 87.59549429999986 10.306 83.5949033 3.861 89.27902270000011 9.477 127.32626220000004 4.662)
Error minima by case: (6.0759 1 0.1518 2 0.8482 2 0.1518 2 0.0 0 1.0 1 1.0 1 2.2672 1 19.1695 1 0.0771 1 0.1518 2 0.0 0 0.1518 1 0.1486 8 5.2249 8 0.3265 8 16.0759 1 0.2191 1 4.5735 1 3.1518 1 0.0 0 0.0759 1 1.0 1 0.4806 2 21.1251 2)
Average genome size in population (length): 93.231
Average program size in population (points): 94.231
Average percent parens in population: 0.011
Minimum age in population: 101.6724712756771
Maximum age in population: 106.3997194426304
Average age in population: 104.2010374922706
Median age in population: 104.2428975795022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.305
Error (vector) diversity:			 0.319
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 114598318
--- Timings ---
Current time: 1529616226928 milliseconds
Total Time:         254.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.3 seconds, 35.2%
Fitness Testing:    131.6 seconds, 51.8%
Report:              33.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 35033.821599999996
Test mean error for best: 17.51691
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 118.2750699048
Correct output: 148.63744302   | Program output: 149.7892615119
Correct output: 130.4153758773 | Program output: 128.5671943692
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 91.4771983921 
Correct output: 144.7196283487 | Program output: 139.8714468406
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -30.6197810677
Correct output: 9.2244792798   | Program output: -7.6237022283 
Correct output: 43.1776070233  | Program output: -4.6705744848 
Correct output: 54.4783529715  | Program output: 7.6301714635  
Correct output: 116.7753441439 | Program output: 68.9271626358 
Correct output: -14.0030129507 | Program output: 1.1488055412  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 100.5236608736
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 63.9165950392 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 117.6712098332
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_sub float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec integer_swap integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [21.0 2 0.1518 9 1.1518 11 1.8482 12 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 43.1518 11 4.8482 9 23.0 2 2.1518 10 16.8482 9 47.8482 11 46.8482 11 47.8482 13 15.1518 11 52.0 2 5.1518 13 20.0 1 16.1518 12 17.0 2 8.1518 9 53.0 2]
Total: 725.3036
Mean: 14.506072
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2395.6892233999965
Median total errors in population: 775.9786000000001
Error averages by case: (88.62877250000003 3.869 80.2710497000001 9.476 89.05480070000104 9.309 79.11544560000004 9.361 68.44516989999998 3.087 68.02947800000004 10.217 76.00005080000008 3.611 83.85210320000007 3.807 121.00251870000017 4.125 83.66288180000085 8.904 82.9325167999993 8.609 79.97998880000006 3.499 89.91635070000066 9.896 77.68774079999953 10.387 101.4650386999992 10.906 105.4570176999994 10.666 122.57399479999931 11.979 83.12820560000016 9.25 115.96140410000001 3.849 82.79773800000062 10.478 76.79374470000008 3.761 78.34941030000007 11.16 74.59878960000007 3.793 79.11090140000026 9.19 119.10711050000012 4.578)
Error minima by case: (10.4735 1 0.1233 2 0.1518 2 0.1518 2 0.0 0 0.0 0 1.0 1 0.2672 1 19.9064 1 1.3254 1 0.1518 1 0.0 0 0.1518 2 0.1486 8 8.9485 7 0.3265 8 9.0031 1 0.9241 1 19.297 1 0.1518 1 1.0 1 0.0759 1 1.0 1 0.4806 2 11.8749 2)
Average genome size in population (length): 95.154
Average program size in population (points): 96.154
Average percent parens in population: 0.010
Minimum age in population: 102.6724712756771
Maximum age in population: 107.6174817100974
Average age in population: 105.4596742936366
Median age in population: 105.485302045919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.324
Error (vector) diversity:			 0.333
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 116977243
--- Timings ---
Current time: 1529616231001 milliseconds
Total Time:         258.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.5 seconds, 35.1%
Fitness Testing:    133.9 seconds, 51.9%
Report:              33.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 35033.821599999996
Test mean error for best: 17.51691
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 118.2750699048
Correct output: 148.63744302   | Program output: 149.7892615119
Correct output: 130.4153758773 | Program output: 128.5671943692
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 91.4771983921 
Correct output: 144.7196283487 | Program output: 139.8714468406
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -30.6197810677
Correct output: 9.2244792798   | Program output: -7.6237022283 
Correct output: 43.1776070233  | Program output: -4.6705744848 
Correct output: 54.4783529715  | Program output: 7.6301714635  
Correct output: 116.7753441439 | Program output: 68.9271626358 
Correct output: -14.0030129507 | Program output: 1.1488055412  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 100.5236608736
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 63.9165950392 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 117.6712098332
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_min} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_inc integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec integer_dup_times integer_shove float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_dec float_stackdepth float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush integer_sub float_dec integer_pop float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_pop float_dec float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_min float_dup_items tag_float_932 integer_add)
Errors: [21.0 2 0.1518 9 1.1518 11 1.8482 12 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 43.1518 11 4.8482 9 23.0 2 2.1518 10 16.8482 9 47.8482 11 46.8482 11 47.8482 13 15.1518 11 52.0 2 5.1518 13 20.0 1 16.1518 12 17.0 2 8.1518 9 53.0 2]
Total: 725.3036
Mean: 14.506072
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2323.0242528000003
Median total errors in population: 747.9108
Error averages by case: (85.2381927 3.726 77.72316610000018 9.892 82.59211080000064 10.151 77.4317808000003 10.02 65.68313929999998 2.869 68.50865390000004 10.096 72.83567480000004 3.51 81.32551440000003 3.632 114.23021520000006 3.987 90.00676900000093 9.676 80.14129969999948 8.403 76.94996410000005 3.361 76.7372915000005 9.936 75.87375779999948 10.122 101.59586579999873 11.222 102.35967499999904 11.002 114.26280519999865 12.016 76.45500450000031 9.886 113.08355419999998 3.679 78.43545330000059 10.937 76.89468410000003 3.586 77.9074894000006 11.655 71.97415560000003 3.669 79.25336850000042 8.915 115.13066710000001 4.446)
Error minima by case: (14.0 1 0.1518 2 0.1518 2 0.1518 2 0.0 0 0.0 0 2.0 1 0.2672 1 18.9064 1 0.3254 1 0.0677 2 0.3213 1 0.1518 1 0.0622 7 1.9742 8 0.3265 8 4.0031 1 0.2247 1 38.7708 1 0.1518 1 0.0 0 0.0759 1 2.0 1 0.4806 2 12.8749 2)
Average genome size in population (length): 98.035
Average program size in population (points): 99.035
Average percent parens in population: 0.010
Minimum age in population: 103.6724712756771
Maximum age in population: 108.9321020765794
Average age in population: 106.7511780659099
Median age in population: 106.8307534886067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.287
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 119428318
--- Timings ---
Current time: 1529616235102 milliseconds
Total Time:         262.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.8 seconds, 35.0%
Fitness Testing:    136.2 seconds, 51.9%
Report:              34.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 35033.821599999996
Test mean error for best: 17.51691
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 118.2750699048
Correct output: 148.63744302   | Program output: 149.7892615119
Correct output: 130.4153758773 | Program output: 128.5671943692
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 91.4771983921 
Correct output: 144.7196283487 | Program output: 139.8714468406
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -30.6197810677
Correct output: 9.2244792798   | Program output: -7.6237022283 
Correct output: 43.1776070233  | Program output: -4.6705744848 
Correct output: 54.4783529715  | Program output: 7.6301714635  
Correct output: 116.7753441439 | Program output: 68.9271626358 
Correct output: -14.0030129507 | Program output: 1.1488055412  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 100.5236608736
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 63.9165950392 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 117.6712098332
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_mod} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_mod in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 float_shove float_shove float_dec float_dec integer_pop float_shove float_dec float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec float_shove float_dec float_dec float_frominteger float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop integer_dup_times float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [21.0 2 0.1518 9 1.1518 11 1.8482 12 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 43.1518 11 4.8482 9 23.0 2 2.1518 10 16.8482 9 47.8482 11 46.8482 11 47.8482 13 15.1518 11 52.0 2 5.1518 13 20.0 1 16.1518 12 17.0 2 8.1518 9 53.0 2]
Total: 725.3036
Mean: 14.506072
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2435.472178100005
Median total errors in population: 736.6072
Error averages by case: (88.84976269999999 3.772 79.51102790000027 9.823 83.33102630000072 10.386 80.71919989999998 10.378 66.64972680000001 2.835 74.60638810000002 10.309 79.67652500000003 3.611 81.52443380000008 3.631 120.08705510000011 4.022 94.9462065000013 10.02 83.66741269999925 8.51 83.67680340000013 3.555 79.2920983000005 10.002 86.06361119999903 10.066 112.56249169999816 11.317 111.13853439999835 11.117 118.4352138999981 12.347 80.66712580000053 9.98 116.69491300000004 3.727 79.21719740000054 11.029 79.10573580000003 3.608 82.50267430000065 11.721 78.1990436000001 3.736 82.04226000000077 8.746 119.49871050000006 4.559)
Error minima by case: (0.1965 1 0.1518 2 0.1518 2 0.1518 1 0.0 0 0.0 0 1.0 1 0.2672 1 34.6898 1 0.1736 1 0.0677 1 1.075 1 0.1518 1 0.0883 7 3.9742 8 0.3265 8 1.0031 1 0.0759 1 9.02 1 0.1518 1 0.0 0 0.387 1 1.0 1 0.1518 1 36.916 2)
Average genome size in population (length): 100.842
Average program size in population (points): 101.842
Average percent parens in population: 0.010
Minimum age in population: 105.8556216223666
Maximum age in population: 109.9965731416624
Average age in population: 108.1176542637309
Median age in population: 108.1314994538374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.268
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 121949518
--- Timings ---
Current time: 1529616239296 milliseconds
Total Time:         266.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.0 seconds, 34.9%
Fitness Testing:    138.6 seconds, 52.0%
Report:              34.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 34904.80159999999
Test mean error for best: 17.45240
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 118.1900607564
Correct output: 148.63744302   | Program output: 149.7042523636
Correct output: 130.4153758773 | Program output: 128.4821852208
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 91.3921892437 
Correct output: 144.7196283487 | Program output: 139.7864376922
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -30.7047902161
Correct output: 9.2244792798   | Program output: -7.7087113767 
Correct output: 43.1776070233  | Program output: -4.7555836331 
Correct output: 54.4783529715  | Program output: 7.5451623151  
Correct output: 116.7753441439 | Program output: 68.8421534875 
Correct output: -14.0030129507 | Program output: 1.0637963929  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 100.4386517253
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 63.8315858909 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 117.5862006848
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 37.990900097612} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 37.990900097612 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [21.0 2 0.0668 9 1.0668 10 1.9332 10 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 43.0668 10 4.9332 11 23.0 2 2.0668 9 16.9332 11 47.9332 10 46.9332 10 47.9332 12 15.0668 10 52.0 2 5.0668 13 20.0 1 16.0668 12 17.0 2 8.0668 11 53.0 2]
Total: 722.1335999999999
Mean: 14.442672
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2974.1187266999996
Median total errors in population: 736.6072
Error averages by case: (108.75748139999997 4.233 104.31149380000032 9.467 108.0240999000008 10.092 106.59991259999906 10.602 89.35566520000003 3.396 93.79565430000008 10.595 101.63124170000006 4.069 102.2128859 4.202 137.7467439000001 4.452 114.74381300000154 9.987 110.23162569999865 8.813 105.3476541000001 4.231 99.38726910000113 9.751 105.52760509999864 10.3 131.26841699999815 11.508 130.21181959999836 11.214 140.7386704999987 12.473 98.15218990000096 9.957 135.89677419999998 4.174 102.97020180000135 10.739 102.21921220000006 4.006 102.52208980000131 11.802 99.67441320000009 4.227 105.93399900000135 8.747 138.9487938 4.872)
Error minima by case: (11.0 1 0.0668 2 0.1518 2 0.1518 1 0.0 0 0.4957 1 0.0 0 0.138 1 15.1695 1 0.8264 1 0.0677 2 0.3213 1 0.1518 1 0.1436 7 0.0792 8 0.3265 8 5.0031 1 0.0759 1 7.0507 1 0.1518 1 1.0 1 0.0759 1 0.0 0 0.1518 1 20.8452 2)
Average genome size in population (length): 103.382
Average program size in population (points): 104.382
Average percent parens in population: 0.010
Minimum age in population: 107.35825871758
Maximum age in population: 111.4210008699834
Average age in population: 109.5885186991049
Median age in population: 109.624203028694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.281
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 124534268
--- Timings ---
Current time: 1529616243542 milliseconds
Total Time:         270.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.2 seconds, 34.8%
Fitness Testing:    140.9 seconds, 52.1%
Report:              35.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 35338.064
Test mean error for best: 17.66903
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -65.4056316151
Correct output: 118.1232514128 | Program output: 119.5872769222
Correct output: 148.63744302   | Program output: 151.1014685294
Correct output: 130.4153758773 | Program output: 129.8794013867
Correct output: 65.2536404507  | Program output: 66.2536404507 
Correct output: 4.8655188188   | Program output: -7.1344811812 
Correct output: -62.096010847  | Program output: -77.096010847 
Correct output: 51.8846341345  | Program output: 71.8846341345 
Correct output: -156.9063992578 | Program output: -101.9063992578
Correct output: 48.3253799002  | Program output: 92.7894054096 
Correct output: 144.7196283487 | Program output: 141.1836538581
Correct output: -54.8304712332 | Program output: -75.8304712332
Correct output: -32.7715995596 | Program output: -29.3075740502
Correct output: 9.2244792798   | Program output: -6.3114952108 
Correct output: 43.1776070233  | Program output: -3.3583674673 
Correct output: 54.4783529715  | Program output: 8.942378481   
Correct output: 116.7753441439 | Program output: 70.2393696533 
Correct output: -14.0030129507 | Program output: 2.4610125587  
Correct output: -97.2291531171 | Program output: -43.2291531171
Correct output: 95.3718423817  | Program output: 101.8358678911
Correct output: 68.9270088853  | Program output: 50.9270088853 
Correct output: 47.7647765473  | Program output: 65.2288020567 
Correct output: -48.9289686304 | Program output: -63.9289686304
Correct output: 109.5193913412 | Program output: 118.9834168507
Correct output: -125.1250740365 | Program output: -70.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 37.388116263461406} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 37.388116263461406 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup)
Errors: [23.0 2 1.464 9 2.464 10 0.536 11 1.0 1 12.0 10 15.0 2 20.0 1 55.0 2 44.464 11 3.536 9 21.0 2 3.464 10 15.536 9 46.536 9 45.536 10 46.536 11 16.464 8 54.0 2 6.464 11 18.0 2 17.464 11 15.0 2 9.464 11 55.0 3]
Total: 717.9280000000002
Mean: 14.35856
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2606.681454
Median total errors in population: 730.6072
Error averages by case: (92.5398786 3.822 89.22068550000056 9.292 92.76141820000085 10.12 91.50390889999908 10.725 76.11670690000001 2.919 81.02724450000007 10.414 85.37731130000007 3.63 90.1088379000001 3.785 120.40732810000011 3.956 102.92511520000163 10.034 95.11516039999873 8.841 90.37932590000004 3.761 83.25126250000095 9.716 92.48451669999861 10.164 118.15239879999802 11.411 115.15623239999829 11.148 125.58554109999808 12.496 84.32019000000116 10.004 121.74713250000003 3.72 88.4677365000012 10.973 89.50270690000008 3.378 87.45017330000124 11.801 85.45676440000013 3.763 91.47097710000126 8.724 123.26790040000009 4.288)
Error minima by case: (1.7462 1 0.0668 2 0.1518 2 0.1518 2 0.0 0 1.0 1 4.0 1 0.2672 1 15.1695 1 0.0759 1 0.1518 2 0.0 0 0.1518 1 0.1486 8 1.285 8 0.3265 8 7.0031 1 0.0759 1 7.0773 1 0.1518 1 0.0 0 0.0759 1 4.0 1 0.1518 2 34.9733 2)
Average genome size in population (length): 103.717
Average program size in population (points): 104.717
Average percent parens in population: 0.010
Minimum age in population: 108.5649420833315
Maximum age in population: 112.7504338780124
Average age in population: 110.9787251778708
Median age in population: 111.0548563167663
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.257
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 127127393
--- Timings ---
Current time: 1529616247755 milliseconds
Total Time:         274.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.5 seconds, 34.7%
Fitness Testing:    143.3 seconds, 52.1%
Report:              36.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 35338.064
Test mean error for best: 17.66903
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -65.4056316151
Correct output: 118.1232514128 | Program output: 119.5872769222
Correct output: 148.63744302   | Program output: 151.1014685294
Correct output: 130.4153758773 | Program output: 129.8794013867
Correct output: 65.2536404507  | Program output: 66.2536404507 
Correct output: 4.8655188188   | Program output: -7.1344811812 
Correct output: -62.096010847  | Program output: -77.096010847 
Correct output: 51.8846341345  | Program output: 71.8846341345 
Correct output: -156.9063992578 | Program output: -101.9063992578
Correct output: 48.3253799002  | Program output: 92.7894054096 
Correct output: 144.7196283487 | Program output: 141.1836538581
Correct output: -54.8304712332 | Program output: -75.8304712332
Correct output: -32.7715995596 | Program output: -29.3075740502
Correct output: 9.2244792798   | Program output: -6.3114952108 
Correct output: 43.1776070233  | Program output: -3.3583674673 
Correct output: 54.4783529715  | Program output: 8.942378481   
Correct output: 116.7753441439 | Program output: 70.2393696533 
Correct output: -14.0030129507 | Program output: 2.4610125587  
Correct output: -97.2291531171 | Program output: -43.2291531171
Correct output: 95.3718423817  | Program output: 101.8358678911
Correct output: 68.9270088853  | Program output: 50.9270088853 
Correct output: 47.7647765473  | Program output: 65.2288020567 
Correct output: -48.9289686304 | Program output: -63.9289686304
Correct output: 109.5193913412 | Program output: 118.9834168507
Correct output: -125.1250740365 | Program output: -70.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 37.388116263461406} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 37.388116263461406 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup)
Errors: [23.0 2 1.464 9 2.464 10 0.536 11 1.0 1 12.0 10 15.0 2 20.0 1 55.0 2 44.464 11 3.536 9 21.0 2 3.464 10 15.536 9 46.536 9 45.536 10 46.536 11 16.464 8 54.0 2 6.464 11 18.0 2 17.464 11 15.0 2 9.464 11 55.0 3]
Total: 717.9280000000002
Mean: 14.35856
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2489.1006848000025
Median total errors in population: 728.3036
Error averages by case: (89.19305210000002 4.039 82.64680150000063 9.241 86.45144460000083 10.138 84.96809709999917 10.691 70.78666510000006 3.12 75.49358590000011 10.5 81.83251930000011 3.831 84.87240800000009 3.955 119.63657310000012 4.132 97.38004960000136 10.032 88.6328037999989 8.843 85.69013050000011 3.947 79.23859440000054 9.722 86.78420779999897 10.238 113.52712479999816 11.408 113.17101179999823 11.229 121.211286099998 12.54 80.18445170000068 9.944 117.30845140000008 3.966 82.24230080000086 11.108 83.61021230000014 3.532 83.83877110000093 11.846 79.9809610000001 3.982 85.30019710000104 8.783 119.95998390000015 4.392)
Error minima by case: (6.2113 1 0.0668 2 0.1518 2 0.0668 1 0.0 0 0.2104 1 0.0 0 0.7328 1 12.9064 1 0.0759 1 0.1518 2 1.649 1 0.0668 1 0.2245 8 3.9742 8 0.3265 8 7.0031 1 0.0058 1 2.6122 1 0.1518 1 0.2248 1 0.0759 1 0.0 0 0.1518 1 14.5782 2)
Average genome size in population (length): 103.408
Average program size in population (points): 104.408
Average percent parens in population: 0.010
Minimum age in population: 109.9018605765525
Maximum age in population: 114.3561421604879
Average age in population: 112.3818302586744
Median age in population: 112.4185377226456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.273
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 129712793
--- Timings ---
Current time: 1529616252013 milliseconds
Total Time:         279.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.8 seconds, 34.7%
Fitness Testing:    145.7 seconds, 52.2%
Report:              36.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 35049.568
Test mean error for best: 17.52478
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -66.4056316151
Correct output: 118.1232514128 | Program output: 118.5872769222
Correct output: 148.63744302   | Program output: 150.1014685294
Correct output: 130.4153758773 | Program output: 128.8794013867
Correct output: 65.2536404507  | Program output: 65.2536404507 
Correct output: 4.8655188188   | Program output: -8.1344811812 
Correct output: -62.096010847  | Program output: -78.096010847 
Correct output: 51.8846341345  | Program output: 70.8846341345 
Correct output: -156.9063992578 | Program output: -102.9063992578
Correct output: 48.3253799002  | Program output: 91.7894054096 
Correct output: 144.7196283487 | Program output: 140.1836538581
Correct output: -54.8304712332 | Program output: -76.8304712332
Correct output: -32.7715995596 | Program output: -30.3075740502
Correct output: 9.2244792798   | Program output: -7.3114952108 
Correct output: 43.1776070233  | Program output: -4.3583674673 
Correct output: 54.4783529715  | Program output: 7.942378481   
Correct output: 116.7753441439 | Program output: 69.2393696533 
Correct output: -14.0030129507 | Program output: 1.4610125587  
Correct output: -97.2291531171 | Program output: -44.2291531171
Correct output: 95.3718423817  | Program output: 100.8358678911
Correct output: 68.9270088853  | Program output: 49.9270088853 
Correct output: 47.7647765473  | Program output: 64.2288020567 
Correct output: -48.9289686304 | Program output: -64.9289686304
Correct output: 109.5193913412 | Program output: 117.9834168507
Correct output: -125.1250740365 | Program output: -71.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 37.388116263461406} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 37.388116263461406 float_inc in1 float_add float_max float_dup_times 38.07590924596505 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec integer_dup_times integer_sub float_dec float_dec float_dec integer_yankdup integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_dec integer_dec float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec integer_swap integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_flush print_float float_flush float_mod float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [22.0 2 0.464 8 1.464 10 1.536 11 0.0 0 13.0 10 16.0 2 19.0 2 54.0 2 43.464 11 4.536 9 22.0 2 2.464 9 16.536 9 47.536 10 46.536 10 47.536 11 15.464 7 53.0 2 5.464 11 19.0 2 16.464 11 16.0 2 8.464 11 54.0 3]
Total: 712.9280000000002
Mean: 14.25856
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2436.528627300001
Median total errors in population: 728.8036
Error averages by case: (86.02200040000001 3.923 80.82238280000028 9.214 84.85391170000045 9.991 83.08663129999965 10.475 69.15546210000002 2.977 74.00518460000004 10.255 80.21487990000006 3.721 83.5772783 3.785 120.09628280000005 4.042 95.29094870000101 9.926 87.29805079999932 8.89 81.96978360000013 3.843 78.26833210000025 9.649 86.06317489999925 10.273 111.28931239999855 11.241 110.80202309999866 11.058 118.69571209999837 12.349 79.20632240000026 9.829 115.12111610000001 3.889 80.31795970000043 10.887 81.2451549000001 3.414 80.31784210000043 11.678 76.22383750000006 3.866 83.30840040000054 8.882 116.88364260000007 4.336)
Error minima by case: (11.0 1 0.0668 2 0.0668 2 0.0668 2 0.0 0 1.0 1 2.0 1 0.7328 1 37.8136 1 0.8264 1 0.536 2 1.0 1 0.0668 1 0.8482 7 1.9742 8 0.3265 7 6.8331 1 0.0427 1 38.7458 1 0.0668 1 0.0 0 0.613 1 2.0 1 0.1518 2 43.0 2)
Average genome size in population (length): 103.236
Average program size in population (points): 104.236
Average percent parens in population: 0.010
Minimum age in population: 111.1410087085355
Maximum age in population: 115.5995769188592
Average age in population: 113.7985405285494
Median age in population: 113.8416707670268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.285
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 132294043
--- Timings ---
Current time: 1529616256247 milliseconds
Total Time:         283.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.0 seconds, 34.6%
Fitness Testing:    148.1 seconds, 52.3%
Report:              37.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 34340.057000000015
Test mean error for best: 17.17003
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -68.4056316151
Correct output: 118.1232514128 | Program output: 116.8175622058
Correct output: 148.63744302   | Program output: 148.331753813 
Correct output: 130.4153758773 | Program output: 127.1096866702
Correct output: 65.2536404507  | Program output: 63.2536404507 
Correct output: 4.8655188188   | Program output: -10.1344811812
Correct output: -62.096010847  | Program output: -80.096010847 
Correct output: 51.8846341345  | Program output: 68.8846341345 
Correct output: -156.9063992578 | Program output: -104.9063992578
Correct output: 48.3253799002  | Program output: 90.0196906932 
Correct output: 144.7196283487 | Program output: 138.4139391416
Correct output: -54.8304712332 | Program output: -78.8304712332
Correct output: -32.7715995596 | Program output: -32.0772887667
Correct output: 9.2244792798   | Program output: -9.0812099273 
Correct output: 43.1776070233  | Program output: -6.1280821837 
Correct output: 54.4783529715  | Program output: 6.1726637645  
Correct output: 116.7753441439 | Program output: 67.4696549369 
Correct output: -14.0030129507 | Program output: -0.3087021577 
Correct output: -97.2291531171 | Program output: -46.2291531171
Correct output: 95.3718423817  | Program output: 99.0661531747 
Correct output: 68.9270088853  | Program output: 47.9270088853 
Correct output: 47.7647765473  | Program output: 62.4590873403 
Correct output: -48.9289686304 | Program output: -66.9289686304
Correct output: 109.5193913412 | Program output: 116.2137021342
Correct output: -125.1250740365 | Program output: -73.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 36.618401547017065} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max float_tan integer_mod integer_inc in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 36.618401547017065 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [20.0 1 1.3057 10 0.3057 7 3.3057 11 2.0 1 15.0 11 18.0 2 17.0 2 52.0 2 41.6943 11 6.3057 10 24.0 2 0.6943 9 18.3057 9 49.3057 10 48.3057 10 49.3057 11 13.6943 8 51.0 2 3.6943 10 21.0 2 14.6943 10 18.0 2 6.6943 8 52.0 3]
Total: 711.6114
Mean: 14.232228
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2586.6764628000005
Median total errors in population: 729.3036
Error averages by case: (93.92070470000006 4.014 86.14725410000037 9.321 89.62775270000066 9.896 88.28375249999958 10.245 74.03041849999998 3.142 81.11893380000014 10.442 85.40648420000011 3.837 88.31444020000009 3.921 125.14878120000014 4.198 99.31959200000112 9.911 91.80645319999935 9.168 89.22839420000007 3.945 82.08897290000051 9.577 91.85416409999927 10.545 117.96448669999855 11.154 117.10754529999866 10.944 126.4051183999985 12.17 85.2605245000006 9.607 122.50774420000008 3.997 85.30662100000069 10.725 86.47543860000007 3.662 88.41103450000077 11.719 84.4304538000001 3.993 88.34616030000068 9.31 124.18923720000015 4.533)
Error minima by case: (2.3415 1 0.0668 2 0.0668 2 0.0668 1 0.0 0 0.0 0 2.0 1 0.2672 1 34.1257 1 0.8264 1 0.0668 2 0.3664 1 0.0668 1 0.8983 8 0.2669 8 0.3265 8 1.5476 1 0.0086 1 6.482 1 0.0668 1 0.0 0 0.0759 1 0.4649 1 0.1518 1 34.3779 2)
Average genome size in population (length): 103.048
Average program size in population (points): 104.048
Average percent parens in population: 0.010
Minimum age in population: 112.2698766267962
Maximum age in population: 117.208416684344
Average age in population: 115.2840499451821
Median age in population: 115.3239136994494
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.328
Error (vector) diversity:			 0.342
Behavioral diversity:				 0.343
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 134870543
--- Timings ---
Current time: 1529616260444 milliseconds
Total Time:         287.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.3 seconds, 34.5%
Fitness Testing:    150.5 seconds, 52.3%
Report:              37.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 34340.057000000015
Test mean error for best: 17.17003
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -68.4056316151
Correct output: 118.1232514128 | Program output: 116.8175622058
Correct output: 148.63744302   | Program output: 148.331753813 
Correct output: 130.4153758773 | Program output: 127.1096866702
Correct output: 65.2536404507  | Program output: 63.2536404507 
Correct output: 4.8655188188   | Program output: -10.1344811812
Correct output: -62.096010847  | Program output: -80.096010847 
Correct output: 51.8846341345  | Program output: 68.8846341345 
Correct output: -156.9063992578 | Program output: -104.9063992578
Correct output: 48.3253799002  | Program output: 90.0196906932 
Correct output: 144.7196283487 | Program output: 138.4139391416
Correct output: -54.8304712332 | Program output: -78.8304712332
Correct output: -32.7715995596 | Program output: -32.0772887667
Correct output: 9.2244792798   | Program output: -9.0812099273 
Correct output: 43.1776070233  | Program output: -6.1280821837 
Correct output: 54.4783529715  | Program output: 6.1726637645  
Correct output: 116.7753441439 | Program output: 67.4696549369 
Correct output: -14.0030129507 | Program output: -0.3087021577 
Correct output: -97.2291531171 | Program output: -46.2291531171
Correct output: 95.3718423817  | Program output: 99.0661531747 
Correct output: 68.9270088853  | Program output: 47.9270088853 
Correct output: 47.7647765473  | Program output: 62.4590873403 
Correct output: -48.9289686304 | Program output: -66.9289686304
Correct output: 109.5193913412 | Program output: 116.2137021342
Correct output: -125.1250740365 | Program output: -73.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 36.618401547017065} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 36.618401547017065 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [20.0 1 1.3057 10 0.3057 7 3.3057 11 2.0 1 15.0 11 18.0 2 17.0 2 52.0 2 41.6943 11 6.3057 10 24.0 2 0.6943 9 18.3057 9 49.3057 10 48.3057 10 49.3057 11 13.6943 8 51.0 2 3.6943 10 21.0 2 14.6943 10 18.0 2 6.6943 8 52.0 3]
Total: 711.6114
Mean: 14.232228
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2727.1440109
Median total errors in population: 727.1440000000002
Error averages by case: (101.26029380000001 3.966 92.54851780000061 9.404 95.825096900001 9.762 94.36993909999947 10.104 81.35272080000003 3.019 87.32370290000004 10.317 92.51555310000003 3.776 96.00055570000004 3.742 128.6501826000001 4.124 107.92107950000144 10.06 97.74142709999894 9.485 96.49437290000007 3.87 88.18920330000103 9.572 94.71226129999884 10.486 120.60401649999835 10.781 117.65457899999855 10.589 127.58044099999827 11.612 88.08465060000108 9.274 129.55199770000007 3.984 92.44627870000124 10.493 93.88689750000003 3.694 92.16859840000124 11.494 91.54975110000007 3.964 95.25521960000127 9.975 131.29567400000013 4.614)
Error minima by case: (2.354 1 0.0668 2 0.0668 2 0.0668 2 0.0 0 1.0 1 1.0 1 0.6659 1 1.5397 1 0.1736 1 0.0668 2 1.3213 1 0.0668 1 0.464 8 1.5305 8 0.2298 7 0.0182 1 0.1698 1 6.4696 1 0.0668 1 2.0 1 0.387 2 1.0 1 0.464 2 15.929 2)
Average genome size in population (length): 102.258
Average program size in population (points): 103.258
Average percent parens in population: 0.010
Minimum age in population: 114.1115090328064
Maximum age in population: 118.5725568437338
Average age in population: 116.7144394158753
Median age in population: 116.7372755084185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.324
Error (vector) diversity:			 0.334
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 137427268
--- Timings ---
Current time: 1529616264633 milliseconds
Total Time:         291.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.5 seconds, 34.4%
Fitness Testing:    152.9 seconds, 52.4%
Report:              38.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 34340.057000000015
Test mean error for best: 17.17003
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -68.4056316151
Correct output: 118.1232514128 | Program output: 116.8175622058
Correct output: 148.63744302   | Program output: 148.331753813 
Correct output: 130.4153758773 | Program output: 127.1096866702
Correct output: 65.2536404507  | Program output: 63.2536404507 
Correct output: 4.8655188188   | Program output: -10.1344811812
Correct output: -62.096010847  | Program output: -80.096010847 
Correct output: 51.8846341345  | Program output: 68.8846341345 
Correct output: -156.9063992578 | Program output: -104.9063992578
Correct output: 48.3253799002  | Program output: 90.0196906932 
Correct output: 144.7196283487 | Program output: 138.4139391416
Correct output: -54.8304712332 | Program output: -78.8304712332
Correct output: -32.7715995596 | Program output: -32.0772887667
Correct output: 9.2244792798   | Program output: -9.0812099273 
Correct output: 43.1776070233  | Program output: -6.1280821837 
Correct output: 54.4783529715  | Program output: 6.1726637645  
Correct output: 116.7753441439 | Program output: 67.4696549369 
Correct output: -14.0030129507 | Program output: -0.3087021577 
Correct output: -97.2291531171 | Program output: -46.2291531171
Correct output: 95.3718423817  | Program output: 99.0661531747 
Correct output: 68.9270088853  | Program output: 47.9270088853 
Correct output: 47.7647765473  | Program output: 62.4590873403 
Correct output: -48.9289686304 | Program output: -66.9289686304
Correct output: 109.5193913412 | Program output: 116.2137021342
Correct output: -125.1250740365 | Program output: -73.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 36.618401547017065} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 36.618401547017065 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [20.0 1 1.3057 10 0.3057 7 3.3057 11 2.0 1 15.0 11 18.0 2 17.0 2 52.0 2 41.6943 11 6.3057 10 24.0 2 0.6943 9 18.3057 9 49.3057 10 48.3057 10 49.3057 11 13.6943 8 51.0 2 3.6943 10 21.0 2 14.6943 10 18.0 2 6.6943 8 52.0 3]
Total: 711.6114
Mean: 14.232228
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2125.503451700005
Median total errors in population: 722.1335999999999
Error averages by case: (76.68065050000001 3.549 66.43530410000012 9.073 69.88415610000021 9.452 68.11493649999996 10.026 56.552379299999984 2.629 63.298968199999976 10.291 67.7388812 3.461 71.73312150000001 3.4 107.69806840000004 3.781 83.5616829000011 10.101 71.64516029999967 9.311 72.20157350000001 3.518 65.7973820000002 9.371 73.30999479999967 10.145 99.60999669999829 10.622 99.16146439999852 10.38 105.4461518999983 11.245 68.27173110000017 8.634 104.9219919 3.632 66.23149120000016 9.853 69.79935719999999 3.47 68.53951360000032 11.245 67.13459749999997 3.619 69.19994480000022 10.142 107.18895210000004 4.396)
Error minima by case: (4.6091 1 0.0668 2 0.0668 2 0.0668 2 0.0 0 0.0 0 1.0 1 0.2672 1 15.4817 1 1.8264 1 0.0668 2 0.6336 1 0.0668 1 0.2443 8 1.4601 8 0.3265 8 1.4601 1 0.0029 1 4.2144 1 0.0668 1 1.0 1 0.3881 1 1.0 1 0.2339 2 10.2933 2)
Average genome size in population (length): 102.083
Average program size in population (points): 103.083
Average percent parens in population: 0.010
Minimum age in population: 115.921625353408
Maximum age in population: 120.040127994295
Average age in population: 118.195195267514
Median age in population: 118.2129499609543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.306
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 139979593
--- Timings ---
Current time: 1529616268913 milliseconds
Total Time:         296.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.7 seconds, 34.4%
Fitness Testing:    155.3 seconds, 52.5%
Report:              38.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 34340.057000000015
Test mean error for best: 17.17003
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -68.4056316151
Correct output: 118.1232514128 | Program output: 116.8175622058
Correct output: 148.63744302   | Program output: 148.331753813 
Correct output: 130.4153758773 | Program output: 127.1096866702
Correct output: 65.2536404507  | Program output: 63.2536404507 
Correct output: 4.8655188188   | Program output: -10.1344811812
Correct output: -62.096010847  | Program output: -80.096010847 
Correct output: 51.8846341345  | Program output: 68.8846341345 
Correct output: -156.9063992578 | Program output: -104.9063992578
Correct output: 48.3253799002  | Program output: 90.0196906932 
Correct output: 144.7196283487 | Program output: 138.4139391416
Correct output: -54.8304712332 | Program output: -78.8304712332
Correct output: -32.7715995596 | Program output: -32.0772887667
Correct output: 9.2244792798   | Program output: -9.0812099273 
Correct output: 43.1776070233  | Program output: -6.1280821837 
Correct output: 54.4783529715  | Program output: 6.1726637645  
Correct output: 116.7753441439 | Program output: 67.4696549369 
Correct output: -14.0030129507 | Program output: -0.3087021577 
Correct output: -97.2291531171 | Program output: -46.2291531171
Correct output: 95.3718423817  | Program output: 99.0661531747 
Correct output: 68.9270088853  | Program output: 47.9270088853 
Correct output: 47.7647765473  | Program output: 62.4590873403 
Correct output: -48.9289686304 | Program output: -66.9289686304
Correct output: 109.5193913412 | Program output: 116.2137021342
Correct output: -125.1250740365 | Program output: -73.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 36.618401547017065} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 36.618401547017065 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [20.0 1 1.3057 10 0.3057 7 3.3057 11 2.0 1 15.0 11 18.0 2 17.0 2 52.0 2 41.6943 11 6.3057 10 24.0 2 0.6943 9 18.3057 9 49.3057 10 48.3057 10 49.3057 11 13.6943 8 51.0 2 3.6943 10 21.0 2 14.6943 10 18.0 2 6.6943 8 52.0 3]
Total: 711.6114
Mean: 14.232228
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2733.4324197000033
Median total errors in population: 719.8560000000001
Error averages by case: (99.52276429999998 3.877 93.32626970000017 9.029 96.75468490000091 9.211 95.41189599999917 10.239 80.43139159999997 2.942 85.29818519999999 10.492 92.18126639999997 3.821 94.20241409999993 3.861 128.54359730000007 4.144 107.59290480000146 10.172 99.13760729999876 9.413 96.43416210000001 3.933 87.38546030000097 9.297 97.38458969999881 10.184 123.43451079999795 10.797 122.86518299999804 10.501 130.0577521999979 11.344 91.63986920000121 8.575 127.59616810000001 4.027 92.72354770000128 9.608 93.09203029999998 3.749 92.81036020000133 11.236 90.58030299999999 3.996 95.7141480000013 10.242 129.98635349999998 4.635)
Error minima by case: (4.8792 1 0.0668 2 0.3057 2 0.2919 2 0.0 0 2.0 1 0.0 0 0.7328 1 12.712 1 0.0886 1 0.2919 2 0.3664 1 0.1518 1 0.8478 8 0.9742 7 0.3265 8 3.6275 1 0.7509 1 3.772 1 0.3057 1 0.2248 1 0.387 2 0.0 0 1.464 2 20.1251 2)
Average genome size in population (length): 103.427
Average program size in population (points): 104.427
Average percent parens in population: 0.010
Minimum age in population: 116.921625353408
Maximum age in population: 121.5411933159766
Average age in population: 119.5692112203475
Median age in population: 119.6057526053607
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.29
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 142565468
--- Timings ---
Current time: 1529616273090 milliseconds
Total Time:         300.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.0 seconds, 34.3%
Fitness Testing:    157.6 seconds, 52.5%
Report:              39.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 34282.93500000001
Test mean error for best: 17.14147
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -68.4056316151
Correct output: 118.1232514128 | Program output: 116.1297692233
Correct output: 148.63744302   | Program output: 147.6439608305
Correct output: 130.4153758773 | Program output: 126.4218936877
Correct output: 65.2536404507  | Program output: 63.2536404507 
Correct output: 4.8655188188   | Program output: -10.1344811812
Correct output: -62.096010847  | Program output: -80.096010847 
Correct output: 51.8846341345  | Program output: 68.8846341345 
Correct output: -156.9063992578 | Program output: -104.9063992578
Correct output: 48.3253799002  | Program output: 89.3318977107 
Correct output: 144.7196283487 | Program output: 137.7261461591
Correct output: -54.8304712332 | Program output: -78.8304712332
Correct output: -32.7715995596 | Program output: -32.7650817492
Correct output: 9.2244792798   | Program output: -9.7690029098 
Correct output: 43.1776070233  | Program output: -6.8158751662 
Correct output: 54.4783529715  | Program output: 5.484870782   
Correct output: 116.7753441439 | Program output: 66.7818619544 
Correct output: -14.0030129507 | Program output: -0.9964951402 
Correct output: -97.2291531171 | Program output: -46.2291531171
Correct output: 95.3718423817  | Program output: 98.3783601922 
Correct output: 68.9270088853  | Program output: 47.9270088853 
Correct output: 47.7647765473  | Program output: 61.7712943578 
Correct output: -48.9289686304 | Program output: -66.9289686304
Correct output: 109.5193913412 | Program output: 115.5259091517
Correct output: -125.1250740365 | Program output: -73.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 37.388116263461406} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_max} {:instruction float_dup_times} {:instruction 36.618401547017065} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_dup_items in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 37.388116263461406 float_inc in1 float_add float_max float_max float_dup_times 36.618401547017065 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [20.0 1 1.9935 9 0.9935 7 3.9935 8 2.0 1 15.0 11 18.0 2 17.0 2 52.0 2 41.0065 10 6.9935 11 24.0 2 0.0065 8 18.9935 9 49.9935 11 48.9935 8 49.9935 11 13.0065 11 51.0 2 3.0065 9 21.0 2 14.0065 10 18.0 2 6.0065 8 52.0 3]
Total: 708.9869999999999
Mean: 14.17974
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2551.3017830000026
Median total errors in population: 717.9280000000002
Error averages by case: (93.36562470000003 3.895 86.16518929999987 9.036 90.66472710000073 9.054 88.70575469999928 10.269 72.71892389999998 2.924 79.26601780000001 10.354 85.17821460000005 3.798 86.9588786 3.887 121.18112190000005 4.184 99.41196760000122 10.166 93.44261389999906 9.513 89.08762190000007 3.956 82.0327934000008 9.203 90.03384349999907 10.16 114.99238599999848 10.751 112.7352013999986 10.405 122.7395746999983 11.182 81.553691700001 8.511 120.61447829999996 3.991 85.0942442000011 9.465 86.19715670000001 3.631 84.86089890000106 11.134 84.47439990000002 3.983 88.27206990000117 10.027 123.48338840000007 4.592)
Error minima by case: (3.6627 1 0.1518 2 0.0574 2 0.2919 2 0.0 0 0.0 0 0.0 0 0.2672 1 46.0 1 0.8264 1 0.464 2 1.0 1 0.0065 1 0.0607 8 5.9742 7 0.3265 8 6.6275 1 0.3881 1 4.7708 1 0.3057 1 2.0 1 0.3881 1 0.0 0 0.464 2 1.138 2)
Average genome size in population (length): 103.94
Average program size in population (points): 104.94
Average percent parens in population: 0.010
Minimum age in population: 118.5351840800306
Maximum age in population: 123.0727878230398
Average age in population: 120.9067068617359
Median age in population: 120.9363472351483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.287
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 145164093
--- Timings ---
Current time: 1529616277263 milliseconds
Total Time:         304.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.2 seconds, 34.2%
Fitness Testing:    160.0 seconds, 52.6%
Report:              40.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 34282.93500000001
Test mean error for best: 17.14147
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -68.4056316151
Correct output: 118.1232514128 | Program output: 116.1297692233
Correct output: 148.63744302   | Program output: 147.6439608305
Correct output: 130.4153758773 | Program output: 126.4218936877
Correct output: 65.2536404507  | Program output: 63.2536404507 
Correct output: 4.8655188188   | Program output: -10.1344811812
Correct output: -62.096010847  | Program output: -80.096010847 
Correct output: 51.8846341345  | Program output: 68.8846341345 
Correct output: -156.9063992578 | Program output: -104.9063992578
Correct output: 48.3253799002  | Program output: 89.3318977107 
Correct output: 144.7196283487 | Program output: 137.7261461591
Correct output: -54.8304712332 | Program output: -78.8304712332
Correct output: -32.7715995596 | Program output: -32.7650817492
Correct output: 9.2244792798   | Program output: -9.7690029098 
Correct output: 43.1776070233  | Program output: -6.8158751662 
Correct output: 54.4783529715  | Program output: 5.484870782   
Correct output: 116.7753441439 | Program output: 66.7818619544 
Correct output: -14.0030129507 | Program output: -0.9964951402 
Correct output: -97.2291531171 | Program output: -46.2291531171
Correct output: 95.3718423817  | Program output: 98.3783601922 
Correct output: 68.9270088853  | Program output: 47.9270088853 
Correct output: 47.7647765473  | Program output: 61.7712943578 
Correct output: -48.9289686304 | Program output: -66.9289686304
Correct output: 109.5193913412 | Program output: 115.5259091517
Correct output: -125.1250740365 | Program output: -73.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction in1} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 37.388116263461406} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_max} {:instruction float_dup_times} {:instruction 36.618401547017065} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_dup_items in1 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 37.388116263461406 float_inc in1 float_add float_max float_max float_dup_times 36.618401547017065 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [20.0 1 1.9935 9 0.9935 7 3.9935 8 2.0 1 15.0 11 18.0 2 17.0 2 52.0 2 41.0065 10 6.9935 11 24.0 2 0.0065 8 18.9935 9 49.9935 11 48.9935 8 49.9935 11 13.0065 11 51.0 2 3.0065 9 21.0 2 14.0065 10 18.0 2 6.0065 8 52.0 3]
Total: 708.9869999999999
Mean: 14.17974
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2524.194833200002
Median total errors in population: 717.9280000000002
Error averages by case: (92.8273133000001 3.923 83.50253619999958 9.006 86.3399643000006 8.671 86.0056808999992 10.158 71.20843619999998 3.015 77.73139260000004 10.445 84.55979000000008 3.864 84.98844800000009 3.926 123.0121006000002 4.192 97.31428200000128 9.975 89.62203099999893 9.404 88.61631600000011 3.989 79.2878107000007 9.098 89.02931299999898 10.228 116.42198339999842 10.82 116.11473979999856 10.505 124.4839296999982 11.292 81.28866200000076 8.448 119.86986840000012 4.067 82.56996320000096 9.309 84.64967740000006 3.622 85.33445500000101 11.031 83.60235240000009 4.087 85.28329280000098 9.598 123.27249430000013 4.585)
Error minima by case: (11.0 1 0.1518 2 0.0898 2 0.1779 1 0.0 0 0.2104 1 1.0 1 2.5794 1 43.0 1 0.0886 1 0.1518 2 1.8638 1 0.0065 2 0.6943 8 0.0592 7 0.2415 7 6.8449 1 0.0918 1 25.6737 1 0.464 1 0.0 0 0.0759 1 1.0 1 0.464 1 43.0 2)
Average genome size in population (length): 103.909
Average program size in population (points): 104.909
Average percent parens in population: 0.010
Minimum age in population: 119.5351840800306
Maximum age in population: 124.1080023609256
Average age in population: 122.1415541234044
Median age in population: 122.1912674494641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.292
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 147762118
--- Timings ---
Current time: 1529616281480 milliseconds
Total Time:         308.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.5 seconds, 34.2%
Fitness Testing:    162.4 seconds, 52.6%
Report:              40.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 34211.059400000006
Test mean error for best: 17.10553
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 117.6331714353
Correct output: 148.63744302   | Program output: 149.1473630424
Correct output: 130.4153758773 | Program output: 127.9252958997
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 90.8352999226 
Correct output: 144.7196283487 | Program output: 139.2295483711
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -31.2616795372
Correct output: 9.2244792798   | Program output: -8.2656006978 
Correct output: 43.1776070233  | Program output: -5.3124729543 
Correct output: 54.4783529715  | Program output: 6.988272994   
Correct output: 116.7753441439 | Program output: 68.2852641664 
Correct output: -14.0030129507 | Program output: 0.5069070718  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 99.8817624041 
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 63.2746965697 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 117.0293113637
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 37.43401077649333} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 37.43401077649333 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_dec integer_dup_times float_shove float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [21.0 2 0.4901 8 0.5099 7 2.4901 9 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 42.5099 9 5.4901 9 23.0 2 1.5099 8 17.4901 10 48.4901 11 47.4901 9 48.4901 10 14.5099 12 52.0 2 4.5099 9 20.0 1 15.5099 9 17.0 2 7.5099 8 53.0 2]
Total: 702.0
Mean: 14.04
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2430.4837335999987
Median total errors in population: 719.2228
Error averages by case: (88.24091869999998 3.764 79.56487119999954 9.099 81.76051150000002 8.194 81.90486889999936 9.942 68.40192789999999 3.114 74.85967380000004 10.533 80.31173860000004 3.803 81.67100440000003 3.935 120.03662600000014 4.192 94.17414080000115 9.902 85.36335169999911 9.328 84.51257130000003 3.968 75.70113110000051 9.057 86.5470830999991 10.386 114.31108709999873 10.904 113.68268209999869 10.574 119.79877259999857 11.273 78.09134460000072 8.463 115.93115820000008 4.033 78.6794151000007 9.249 81.5240002 3.721 80.36910440000068 10.844 79.52875210000008 3.939 81.20792980000078 8.862 118.58406840000009 4.646)
Error minima by case: (11.0 1 0.0065 2 0.0065 2 0.3057 2 0.0 0 0.0 0 0.0 0 0.7328 1 43.0 1 0.0759 1 0.1458 2 0.1362 1 0.0065 1 0.3044 8 4.5986 8 0.3265 8 5.5456 1 0.0079 1 9.2292 1 0.3057 1 0.0 0 0.0115 2 0.0 0 0.0065 2 36.1251 2)
Average genome size in population (length): 103.717
Average program size in population (points): 104.717
Average percent parens in population: 0.010
Minimum age in population: 120.5351840800306
Maximum age in population: 125.7042126613483
Average age in population: 123.418662786115
Median age in population: 123.4543193917184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.298
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 150355368
--- Timings ---
Current time: 1529616285708 milliseconds
Total Time:         312.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.7 seconds, 34.1%
Fitness Testing:    164.7 seconds, 52.7%
Report:              41.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 34211.059400000006
Test mean error for best: 17.10553
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 117.6331714353
Correct output: 148.63744302   | Program output: 149.1473630424
Correct output: 130.4153758773 | Program output: 127.9252958997
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 90.8352999226 
Correct output: 144.7196283487 | Program output: 139.2295483711
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -31.2616795372
Correct output: 9.2244792798   | Program output: -8.2656006978 
Correct output: 43.1776070233  | Program output: -5.3124729543 
Correct output: 54.4783529715  | Program output: 6.988272994   
Correct output: 116.7753441439 | Program output: 68.2852641664 
Correct output: -14.0030129507 | Program output: 0.5069070718  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 99.8817624041 
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 63.2746965697 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 117.0293113637
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_rot} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 37.43401077649333} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max integer_dup_items integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_rot in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 37.43401077649333 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_dec integer_dup_times float_shove float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [21.0 2 0.4901 8 0.5099 7 2.4901 9 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 42.5099 9 5.4901 9 23.0 2 1.5099 8 17.4901 10 48.4901 11 47.4901 9 48.4901 10 14.5099 12 52.0 2 4.5099 9 20.0 1 15.5099 9 17.0 2 7.5099 8 53.0 2]
Total: 702.0
Mean: 14.04
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2653.658420999998
Median total errors in population: 717.0
Error averages by case: (96.1324306 3.788 89.41217469999947 9.414 91.44231179999979 8.0 91.82071089999916 10.057 79.27901100000005 3.211 84.21292290000004 10.714 89.58828550000004 3.887 91.83773990000002 4.033 128.3108487000001 4.275 105.43723810000108 10.086 95.31897369999902 9.631 93.21795270000001 4.132 81.01510690000073 9.266 93.44949889999901 10.443 121.08275479999882 10.877 120.09470789999884 10.466 128.2161951999987 11.297 84.74073930000098 8.824 125.80382230000001 4.104 88.30776810000096 9.702 92.63215190000003 3.943 89.25130270000106 10.587 87.66890460000006 4.08 90.99214930000109 8.484 126.27871860000005 4.813)
Error minima by case: (3.3241 1 0.0065 2 0.0065 2 0.0065 2 0.0 0 1.0 1 1.0 1 1.6478 1 17.9574 1 0.0886 1 0.0065 2 0.0 0 0.0065 2 0.6061 8 2.5167 8 3.2415 8 2.5456 1 0.0729 1 12.1476 1 0.0065 1 1.0 1 0.0705 1 1.0 1 0.3057 2 40.0435 2)
Average genome size in population (length): 103.653
Average program size in population (points): 104.653
Average percent parens in population: 0.010
Minimum age in population: 121.5351840800306
Maximum age in population: 126.8919429895216
Average age in population: 124.6483088719444
Median age in population: 124.7073464600645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.303
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 152946843
--- Timings ---
Current time: 1529616289974 milliseconds
Total Time:         317.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.9 seconds, 34.0%
Fitness Testing:    167.1 seconds, 52.7%
Report:              41.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 33888.69920000002
Test mean error for best: 16.94435
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -66.4056316151
Correct output: 118.1232514128 | Program output: 121.1384664128
Correct output: 148.63744302   | Program output: 152.6526580199
Correct output: 130.4153758773 | Program output: 131.4305908772
Correct output: 65.2536404507  | Program output: 65.2536404507 
Correct output: 4.8655188188   | Program output: -8.1344811812 
Correct output: -62.096010847  | Program output: -78.096010847 
Correct output: 51.8846341345  | Program output: 70.8846341345 
Correct output: -156.9063992578 | Program output: -102.9063992578
Correct output: 48.3253799002  | Program output: 94.3405949001 
Correct output: 144.7196283487 | Program output: 142.7348433486
Correct output: -54.8304712332 | Program output: -76.8304712332
Correct output: -32.7715995596 | Program output: -27.7563845597
Correct output: 9.2244792798   | Program output: -4.7603057203 
Correct output: 43.1776070233  | Program output: -1.8071779768 
Correct output: 54.4783529715  | Program output: 10.4935679715 
Correct output: 116.7753441439 | Program output: 71.7905591439 
Correct output: -14.0030129507 | Program output: 4.0122020492  
Correct output: -97.2291531171 | Program output: -44.2291531171
Correct output: 95.3718423817  | Program output: 103.3870573816
Correct output: 68.9270088853  | Program output: 49.9270088853 
Correct output: 47.7647765473  | Program output: 66.7799915472 
Correct output: -48.9289686304 | Program output: -64.9289686304
Correct output: 109.5193913412 | Program output: 120.5346063412
Correct output: -125.1250740365 | Program output: -71.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [22.0 2 3.0152 7 4.0152 10 1.0152 7 0.0 0 13.0 10 16.0 2 19.0 2 54.0 2 46.0152 8 1.9848 7 22.0 2 5.0152 8 13.9848 12 44.9848 10 43.9848 6 44.9848 7 18.0152 10 53.0 2 8.0152 9 19.0 2 19.0152 8 16.0 2 11.0152 7 54.0 3]
Total: 698.0608000000002
Mean: 13.961216
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2643.4655637999977
Median total errors in population: 716.3886
Error averages by case: (98.37408199999994 3.634 87.05530389999946 9.106 89.07617889999966 7.614 89.37041259999897 9.456 78.02470379999997 2.973 83.54054059999997 10.581 92.22882690000002 3.724 90.28997710000003 3.851 129.20626740000014 4.135 101.7003516000012 9.669 92.82754599999885 9.562 95.4901757 3.935 84.27574460000075 9.025 95.79341539999888 10.496 122.94830719999874 11.023 121.3458202999987 10.283 124.67447499999865 11.281 86.57380030000097 8.773 125.83252950000004 3.967 86.13047550000087 9.379 90.58908959999997 3.722 86.89564950000091 10.396 90.47447110000009 3.88 88.75209010000113 8.165 128.70032920000006 4.665)
Error minima by case: (8.3832 1 0.0065 2 0.0065 2 0.0065 2 0.0 0 1.0 1 1.0 1 0.3522 1 21.9064 1 0.0886 1 0.1779 2 0.0 0 0.0065 2 0.0389 8 3.0592 8 0.2415 6 6.5456 2 0.2289 1 6.7708 1 0.0065 1 0.0 0 0.0759 1 1.0 1 0.3057 2 9.8749 2)
Average genome size in population (length): 103.806
Average program size in population (points): 104.806
Average percent parens in population: 0.010
Minimum age in population: 122.5351840800306
Maximum age in population: 128.4836007402243
Average age in population: 126.0340676916416
Median age in population: 126.072734860157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.283
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 155542168
--- Timings ---
Current time: 1529616294156 milliseconds
Total Time:         321.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.2 seconds, 34.0%
Fitness Testing:    169.5 seconds, 52.8%
Report:              42.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 33632.456000000006
Test mean error for best: 16.81623
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -67.4056316151
Correct output: 118.1232514128 | Program output: 120.1384664128
Correct output: 148.63744302   | Program output: 151.6526580199
Correct output: 130.4153758773 | Program output: 130.4305908772
Correct output: 65.2536404507  | Program output: 64.2536404507 
Correct output: 4.8655188188   | Program output: -9.1344811812 
Correct output: -62.096010847  | Program output: -79.096010847 
Correct output: 51.8846341345  | Program output: 69.8846341345 
Correct output: -156.9063992578 | Program output: -103.9063992578
Correct output: 48.3253799002  | Program output: 93.3405949001 
Correct output: 144.7196283487 | Program output: 141.7348433486
Correct output: -54.8304712332 | Program output: -77.8304712332
Correct output: -32.7715995596 | Program output: -28.7563845597
Correct output: 9.2244792798   | Program output: -5.7603057203 
Correct output: 43.1776070233  | Program output: -2.8071779768 
Correct output: 54.4783529715  | Program output: 9.4935679715  
Correct output: 116.7753441439 | Program output: 70.7905591439 
Correct output: -14.0030129507 | Program output: 3.0122020492  
Correct output: -97.2291531171 | Program output: -45.2291531171
Correct output: 95.3718423817  | Program output: 102.3870573816
Correct output: 68.9270088853  | Program output: 48.9270088853 
Correct output: 47.7647765473  | Program output: 65.7799915472 
Correct output: -48.9289686304 | Program output: -65.9289686304
Correct output: 109.5193913412 | Program output: 119.5346063412
Correct output: -125.1250740365 | Program output: -72.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [21.0 2 2.0152 7 3.0152 10 0.0152 6 1.0 1 14.0 10 17.0 2 18.0 2 53.0 2 45.0152 8 2.9848 7 23.0 2 4.0152 8 14.9848 12 45.9848 10 44.9848 6 45.9848 8 17.0152 11 52.0 2 7.0152 9 20.0 1 18.0152 8 17.0 2 10.0152 6 53.0 2]
Total: 694.0608000000002
Mean: 13.881216
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2494.348805899999
Median total errors in population: 713.0259999999998
Error averages by case: (90.94565999999996 3.795 83.87879319999979 8.86 86.17223310000014 7.594 86.31853879999919 8.844 72.25318009999995 3.026 76.07915550000003 10.526 82.32827060000002 3.801 85.64643349999999 3.959 119.6654000000001 4.155 98.78666050000106 9.443 89.87017629999902 9.708 86.25143040000002 3.981 77.96517130000076 8.934 86.73844609999907 10.662 114.68489859999895 11.288 114.28818749999884 10.003 122.98693549999874 11.469 77.7639164000009 9.01 118.77468370000008 4.052 82.90676410000091 9.319 85.48188399999997 3.799 83.77459440000092 10.552 81.52097160000004 3.969 85.55766540000089 8.194 120.14675530000004 4.619)
Error minima by case: (0.9205 1 0.0065 2 0.0065 2 0.0065 2 0.0 0 1.0 1 0.0 0 0.3522 1 20.9015 1 0.1822 1 0.0152 2 0.3206 1 0.0065 2 0.0645 7 3.0592 7 0.2415 6 4.0728 2 0.0759 1 7.903 1 0.0065 1 0.5829 1 0.6119 1 0.0 0 0.0065 2 7.1251 2)
Average genome size in population (length): 105.376
Average program size in population (points): 106.376
Average percent parens in population: 0.009
Minimum age in population: 124.6283901652634
Maximum age in population: 129.846603550797
Average age in population: 127.467169620237
Median age in population: 127.5147838550074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.306
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 158176793
--- Timings ---
Current time: 1529616298376 milliseconds
Total Time:         325.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.4 seconds, 33.9%
Fitness Testing:    171.9 seconds, 52.8%
Report:              43.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 33182.1824
Test mean error for best: 16.59109
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -69.4056316151
Correct output: 118.1232514128 | Program output: 118.1384664128
Correct output: 148.63744302   | Program output: 149.6526580199
Correct output: 130.4153758773 | Program output: 128.4305908772
Correct output: 65.2536404507  | Program output: 62.2536404507 
Correct output: 4.8655188188   | Program output: -11.1344811812
Correct output: -62.096010847  | Program output: -81.096010847 
Correct output: 51.8846341345  | Program output: 67.8846341345 
Correct output: -156.9063992578 | Program output: -105.9063992578
Correct output: 48.3253799002  | Program output: 91.3405949001 
Correct output: 144.7196283487 | Program output: 139.7348433486
Correct output: -54.8304712332 | Program output: -79.8304712332
Correct output: -32.7715995596 | Program output: -30.7563845597
Correct output: 9.2244792798   | Program output: -7.7603057203 
Correct output: 43.1776070233  | Program output: -4.8071779768 
Correct output: 54.4783529715  | Program output: 7.4935679715  
Correct output: 116.7753441439 | Program output: 68.7905591439 
Correct output: -14.0030129507 | Program output: 1.0122020492  
Correct output: -97.2291531171 | Program output: -47.2291531171
Correct output: 95.3718423817  | Program output: 100.3870573816
Correct output: 68.9270088853  | Program output: 46.9270088853 
Correct output: 47.7647765473  | Program output: 63.7799915472 
Correct output: -48.9289686304 | Program output: -67.9289686304
Correct output: 109.5193913412 | Program output: 117.5346063412
Correct output: -125.1250740365 | Program output: -74.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_pop float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [19.0 2 0.0152 5 1.0152 9 1.9848 8 3.0 1 16.0 11 19.0 2 16.0 2 51.0 2 43.0152 8 4.9848 8 25.0 2 2.0152 7 16.9848 12 47.9848 10 46.9848 6 47.9848 8 15.0152 10 50.0 1 5.0152 9 22.0 2 16.0152 8 19.0 2 8.0152 7 51.0 3]
Total: 693.0304000000001
Mean: 13.860608
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2520.9919312000006
Median total errors in population: 711.0129999999999
Error averages by case: (92.35729059999996 3.97 84.82032809999987 8.621 87.70028310000043 7.507 87.18683409999934 8.536 73.8874315 3.019 76.60314200000003 10.423 83.76530600000004 3.827 87.8356727 3.941 120.40399620000005 4.211 100.37340480000094 9.207 91.06641979999915 9.566 87.70188680000004 4.027 77.22975180000051 8.807 87.79049749999918 10.718 115.25933649999894 11.354 114.7037634999989 9.821 122.43749459999881 11.316 80.23816110000077 9.308 119.5647698 4.086 84.08044270000075 9.257 86.75656770000002 3.711 84.78798200000077 10.212 83.01895270000003 3.998 86.95205880000083 8.19 122.21115680000001 4.626)
Error minima by case: (4.8282 1 0.0065 2 0.0065 2 0.0065 2 0.0 0 2.0 1 1.0 1 0.6478 1 21.661 1 0.0759 1 0.0065 2 1.0 1 0.0065 1 0.3989 7 0.4463 8 1.6103 5 7.17 1 0.0133 1 3.9954 1 0.0065 1 1.0 1 0.1032 1 1.0 1 0.0065 2 9.8749 2)
Average genome size in population (length): 105.429
Average program size in population (points): 106.429
Average percent parens in population: 0.009
Minimum age in population: 126.1617239108769
Maximum age in population: 130.8954005750873
Average age in population: 128.7340601734556
Median age in population: 128.736578425153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.31
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 160812718
--- Timings ---
Current time: 1529616302600 milliseconds
Total Time:         329.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.7 seconds, 33.9%
Fitness Testing:    174.3 seconds, 52.9%
Report:              43.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 32948.09119999999
Test mean error for best: 16.47405
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 117.1384664128
Correct output: 148.63744302   | Program output: 148.6526580199
Correct output: 130.4153758773 | Program output: 127.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 90.3405949001 
Correct output: 144.7196283487 | Program output: 138.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -31.7563845597
Correct output: 9.2244792798   | Program output: -8.7603057203 
Correct output: 43.1776070233  | Program output: -5.8071779768 
Correct output: 54.4783529715  | Program output: 6.4935679715  
Correct output: 116.7753441439 | Program output: 67.7905591439 
Correct output: -14.0030129507 | Program output: 0.0122020492  
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 99.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 62.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 116.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -13.80243152498158} {:instruction integer_inc} {:instruction float_tan} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -13.80243152498158 integer_inc float_tan 5 integer_max integer_dup_items integer_dup_items integer_dup integer_inc float_tan integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_shove float_shove float_dec float_dec integer_flush float_dec integer_pop integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 0.9848 6 0.0152 8 2.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 42.0152 8 5.9848 8 26.0 2 1.0152 7 17.9848 12 48.9848 10 47.9848 6 48.9848 8 14.0152 11 49.0 2 4.0152 7 23.0 2 15.0152 8 20.0 1 7.0152 7 50.0 2]
Total: 690.0000000000002
Mean: 13.8
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2606.3853082000005
Median total errors in population: 707.0198
Error averages by case: (92.9922767 3.897 90.43990209999977 8.308 93.11615400000007 7.624 92.71573439999977 8.679 76.95732149999999 2.992 79.84833700000001 10.441 86.69642249999998 3.761 89.99213789999997 3.833 122.11225230000001 4.048 103.70391040000045 8.863 96.2657716999997 9.075 90.58288269999998 3.941 83.57708910000008 8.527 91.40986439999966 10.82 118.28673969999932 11.318 116.91627849999921 9.661 127.19259099999923 10.884 84.03699580000013 9.537 121.16004179999995 3.999 88.92279830000027 9.172 89.35438510000003 3.592 88.96431000000025 9.973 84.78970470000002 3.957 92.30807460000027 8.15 124.48833200000001 4.503)
Error minima by case: (8.0 1 0.0065 2 0.0065 2 0.0065 2 0.0 0 0.0 0 1.0 1 0.7328 1 40.0 1 0.0759 1 0.0065 2 0.0 0 0.0065 2 0.2095 8 2.6904 8 0.5997 5 8.3612 1 0.0759 1 31.0806 1 0.0065 1 2.0 1 0.1032 1 0.8047 1 0.0065 2 40.0 2)
Average genome size in population (length): 106.246
Average program size in population (points): 107.246
Average percent parens in population: 0.009
Minimum age in population: 127.5035926756188
Maximum age in population: 132.0407325915448
Average age in population: 129.9503902504403
Median age in population: 129.9772796516514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.302
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 163469093
--- Timings ---
Current time: 1529616306851 milliseconds
Total Time:         333.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.9 seconds, 33.8%
Fitness Testing:    176.7 seconds, 52.9%
Report:              44.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 32948.09119999999
Test mean error for best: 16.47405
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 117.1384664128
Correct output: 148.63744302   | Program output: 148.6526580199
Correct output: 130.4153758773 | Program output: 127.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 90.3405949001 
Correct output: 144.7196283487 | Program output: 138.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -31.7563845597
Correct output: 9.2244792798   | Program output: -8.7603057203 
Correct output: 43.1776070233  | Program output: -5.8071779768 
Correct output: 54.4783529715  | Program output: 6.4935679715  
Correct output: 116.7753441439 | Program output: 67.7905591439 
Correct output: -14.0030129507 | Program output: 0.0122020492  
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 99.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 62.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 116.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -13.80243152498158} {:instruction integer_inc} {:instruction float_tan} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -13.80243152498158 integer_inc float_tan 5 integer_max integer_dup_items integer_dup_items integer_dup integer_inc float_tan integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_shove float_shove float_dec float_dec integer_flush float_dec integer_pop integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 0.9848 6 0.0152 8 2.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 42.0152 8 5.9848 8 26.0 2 1.0152 7 17.9848 12 48.9848 10 47.9848 6 48.9848 8 14.0152 11 49.0 2 4.0152 7 23.0 2 15.0152 8 20.0 1 7.0152 7 50.0 2]
Total: 690.0000000000002
Mean: 13.8
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2716.6717261000017
Median total errors in population: 703.0198
Error averages by case: (100.24291930000001 3.968 92.78713909999969 8.274 95.99387350000015 7.846 95.27108099999965 8.918 83.92390690000002 3.17 85.59185180000001 10.529 93.42027910000002 3.916 97.52436230000002 3.967 126.4112082 4.135 107.57958080000034 8.89 98.84260089999961 8.911 96.33725019999997 4.102 87.98201090000003 8.415 93.71055239999967 10.878 120.11542189999959 11.289 119.20031119999946 9.455 129.3228569999994 10.517 87.74178160000011 9.629 127.22230520000002 4.12 90.86696520000045 9.239 96.49441770000001 3.809 91.8916068000003 9.691 91.9084078 4.109 94.83653030000033 8.263 130.70050500000002 4.712)
Error minima by case: (4.5944 1 0.0065 2 0.0065 2 0.0152 2 0.0 0 0.0 0 1.0 1 1.8087 1 0.0936 1 0.4468 1 0.0152 2 1.0 1 0.0152 1 0.2095 7 0.1672 8 0.3897 5 5.2975 1 0.0759 1 0.2808 1 0.0152 1 1.0 1 0.0759 1 1.0 1 0.5099 2 6.1251 2)
Average genome size in population (length): 106.269
Average program size in population (points): 107.269
Average percent parens in population: 0.009
Minimum age in population: 128.8148080569216
Maximum age in population: 133.6070050543088
Average age in population: 131.289995230159
Median age in population: 131.347681848903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.297
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 166126093
--- Timings ---
Current time: 1529616311117 milliseconds
Total Time:         338.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.1 seconds, 33.7%
Fitness Testing:    179.1 seconds, 52.9%
Report:              44.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 32948.09119999999
Test mean error for best: 16.47405
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 117.1384664128
Correct output: 148.63744302   | Program output: 148.6526580199
Correct output: 130.4153758773 | Program output: 127.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 90.3405949001 
Correct output: 144.7196283487 | Program output: 138.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -31.7563845597
Correct output: 9.2244792798   | Program output: -8.7603057203 
Correct output: 43.1776070233  | Program output: -5.8071779768 
Correct output: 54.4783529715  | Program output: 6.4935679715  
Correct output: 116.7753441439 | Program output: 67.7905591439 
Correct output: -14.0030129507 | Program output: 0.0122020492  
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 99.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 62.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 116.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_yank float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup float_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush integer_flush float_shove float_dec integer_flush float_shove float_dec integer_pop float_dec integer_pop integer_dup_items float_dec float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 0.9848 6 0.0152 8 2.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 42.0152 8 5.9848 8 26.0 2 1.0152 7 17.9848 12 48.9848 10 47.9848 6 48.9848 8 14.0152 11 49.0 2 4.0152 7 23.0 2 15.0152 8 20.0 1 7.0152 7 50.0 2]
Total: 690.0000000000002
Mean: 13.8
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2543.8456522000006
Median total errors in population: 704.0608000000002
Error averages by case: (92.45729920000001 4.17 86.19271949999985 7.997 89.93044480000007 8.157 88.62201489999994 8.731 77.07393000000003 3.426 79.38519660000003 10.618 85.24656139999998 4.059 89.36546820000005 4.201 123.09497950000001 4.368 99.75627800000007 8.707 92.59591029999999 8.75 88.71836069999996 4.295 80.15355400000006 8.321 88.35487119999995 11.177 113.94396349999991 11.047 112.63224319999993 8.923 121.41610089999996 10.118 81.74439100000006 9.48 120.78604219999993 4.366 84.57607680000022 9.011 88.99063220000006 4.093 83.24202370000009 9.512 83.65479350000003 4.301 87.81852910000018 8.123 123.10626780000004 5.036)
Error minima by case: (10.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.2632 1 1.0 1 0.006 1 23.9064 1 0.1736 1 0.0152 2 0.6787 1 0.0152 1 0.2095 7 0.6904 8 0.4003 5 5.0728 1 0.0759 1 31.9516 1 0.0152 1 0.4171 1 0.0759 1 1.0 1 0.0152 2 6.8749 2)
Average genome size in population (length): 105.344
Average program size in population (points): 106.344
Average percent parens in population: 0.009
Minimum age in population: 129.8729381054736
Maximum age in population: 134.8975424631536
Average age in population: 132.7498268371968
Median age in population: 132.8208778420393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.32
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 168760018
--- Timings ---
Current time: 1529616315325 milliseconds
Total Time:         342.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.4 seconds, 33.7%
Fitness Testing:    181.4 seconds, 53.0%
Report:              45.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_add in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_yank float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_add float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2719.834440799999
Median total errors in population: 702.9604
Error averages by case: (102.2458090999998 4.568 92.83835129999999 7.691 96.01724559999984 8.907 95.13193520000021 8.677 90.40151659999988 3.713 86.41408209999994 10.67 96.55897730000004 4.218 101.25260029999995 4.429 128.7718646000001 4.477 107.89224279999932 8.721 97.80051950000028 8.689 99.26702029999987 4.58 85.37180659999987 8.315 90.01210310000015 11.552 115.48752520000075 10.624 113.03292650000081 8.154 126.8989307000009 9.412 84.27251699999971 9.843 129.1148393999998 4.668 90.61922989999975 8.845 98.39600949999996 4.368 88.94529279999979 9.178 92.46680980000004 4.459 94.91300649999965 8.051 133.6262791 5.276)
Error minima by case: (10.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 24.9064 1 0.4468 1 0.0152 2 0.0 0 0.0152 1 0.7148 7 2.701 7 0.4003 5 4.8665 1 0.0276 1 11.2292 1 0.0152 1 1.0 1 0.0062 1 0.0 0 0.0152 2 6.8749 2)
Average genome size in population (length): 104.168
Average program size in population (points): 105.168
Average percent parens in population: 0.010
Minimum age in population: 131.8193230260735
Maximum age in population: 136.2540952499145
Average age in population: 134.3105444928321
Median age in population: 134.3480679740768
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.356
Error (vector) diversity:			 0.362
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 171364393
--- Timings ---
Current time: 1529616319535 milliseconds
Total Time:         346.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.6 seconds, 33.6%
Fitness Testing:    183.7 seconds, 53.0%
Report:              46.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_sin} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_min float_tan integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 float_sin float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_rot float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup integer_dup integer_flush float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_swap integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2575.0268975999998
Median total errors in population: 698.9392000000001
Error averages by case: (97.0114647999999 4.876 85.73531509999995 7.517 90.05235849999991 8.999 88.59351670000014 8.695 84.1688927 4.013 84.8626318 10.648 91.5030799000001 4.297 92.53323509999997 4.675 128.0400084000001 4.608 97.49206689999944 8.687 92.64612960000036 8.741 94.09343919999986 4.748 78.8606970000001 8.282 86.26354110000014 11.761 111.18381950000105 10.552 108.83323800000124 7.854 118.99010770000119 9.215 79.30167340000007 9.936 124.17756389999983 4.945 81.85494639999995 8.526 91.70063749999998 4.672 81.02898120000005 9.087 87.48233620000006 4.548 87.24431349999985 8.024 128.02290350000007 5.444)
Error minima by case: (2.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0738 1 0.0 0 0.006 1 15.4156 1 0.0607 1 0.0152 2 0.0 0 0.0152 2 0.1486 7 1.299 7 0.4003 5 5.0455 2 0.0759 1 10.7708 1 0.0152 1 2.0 1 0.0759 2 0.0 0 0.0152 2 11.8749 2)
Average genome size in population (length): 105.533
Average program size in population (points): 106.533
Average percent parens in population: 0.009
Minimum age in population: 133.499384278552
Maximum age in population: 137.4931973167347
Average age in population: 135.7592002822698
Median age in population: 135.8089876361378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.368
Error (vector) diversity:			 0.374
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 174002943
--- Timings ---
Current time: 1529616323793 milliseconds
Total Time:         350.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.9 seconds, 33.6%
Fitness Testing:    186.1 seconds, 53.0%
Report:              46.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_min float_tan integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc integer_dec integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_yankdup float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec float_shove integer_pop float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_rot float_shove integer_swap integer_pop integer_yankdup float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2210.346254100001
Median total errors in population: 696.0608000000002
Error averages by case: (82.61681989999992 4.776 70.22140739999979 7.187 74.15969290000002 8.717 73.12698770000004 8.519 68.88468970000011 3.852 69.31863030000005 10.656 75.02210980000008 4.108 78.60090760000007 4.565 112.9314400000001 4.357 85.22031869999968 8.417 77.36655970000001 8.513 77.6410188 4.635 62.42805230000039 8.033 72.01249809999979 11.814 98.50718000000099 10.52 97.33016390000118 7.654 106.65905470000132 9.109 65.40107050000077 9.873 109.94092489999984 4.883 68.28619470000046 8.156 77.98767600000001 4.557 68.60536760000046 8.984 73.85719470000011 4.359 71.86675330000017 7.801 113.03454090000008 5.274)
Error minima by case: (9.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 3.0558 1 0.006 1 12.1695 1 0.0607 1 0.0152 2 0.0 0 0.0152 1 0.2852 7 3.701 7 0.4003 5 4.1335 1 0.0759 1 2.0276 1 0.0152 1 1.0 1 0.1138 1 1.3568 1 0.9848 2 5.8749 2)
Average genome size in population (length): 106.279
Average program size in population (points): 107.279
Average percent parens in population: 0.009
Minimum age in population: 134.7908143951373
Maximum age in population: 139.0485657940505
Average age in population: 137.1034217181525
Median age in population: 137.1122723406354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.326
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.338
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 176660293
--- Timings ---
Current time: 1529616328041 milliseconds
Total Time:         355.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.1 seconds, 33.5%
Fitness Testing:    188.5 seconds, 53.1%
Report:              47.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_rot float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup integer_dup integer_flush float_dec integer_flush float_dec float_dec integer_flush float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_swap integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2646.6368272
Median total errors in population: 698.9392000000001
Error averages by case: (98.05662569999993 4.695 88.53181850000011 7.393 92.19132669999993 8.898 91.14568180000028 8.649 86.96198519999997 3.844 87.00127099999993 10.695 91.78420490000009 3.985 96.85387810000005 4.539 126.04106450000006 4.257 105.09810369999941 8.583 95.04226580000048 8.661 94.78060719999988 4.554 82.83922339999991 8.159 89.28403850000015 11.97 114.3749820000008 10.604 112.83403500000087 7.782 123.33584930000089 9.229 82.18451479999982 9.986 126.91439039999987 4.764 86.8899061999998 8.288 96.90510440000004 4.526 87.67493429999988 9.116 91.12758100000005 4.251 90.3621327999997 7.942 127.89430200000002 5.157)
Error minima by case: (3.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.0 0 11.1695 1 0.4014 1 0.0152 2 0.0 0 0.0152 1 0.2384 8 0.0455 8 0.9545 5 0.0455 1 0.0951 1 31.7708 1 0.0152 1 0.0 0 0.0152 2 0.0 0 0.0152 2 5.8749 2)
Average genome size in population (length): 106.577
Average program size in population (points): 107.577
Average percent parens in population: 0.009
Minimum age in population: 135.7991306725753
Maximum age in population: 140.3274256747004
Average age in population: 138.5052907128026
Median age in population: 138.5444914810382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.327
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 179325043
--- Timings ---
Current time: 1529616332249 milliseconds
Total Time:         359.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.4 seconds, 33.5%
Fitness Testing:    190.9 seconds, 53.1%
Report:              48.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_776} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items integer_inc integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_776 38.07590924596505 float_add in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_add float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_yankdup float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2164.098975799999
Median total errors in population: 697.0000000000002
Error averages by case: (77.64839029999997 4.614 70.77783239999992 7.261 74.77053230000004 8.789 73.84015570000008 8.551 66.12950730000013 3.768 66.88044370000007 10.638 70.94612690000002 3.915 75.03532600000001 4.437 107.94013910000011 4.262 83.93751399999968 8.453 78.02021400000022 8.573 74.1418447999999 4.478 60.10941310000041 7.991 70.5189049999998 11.829 97.31966090000081 10.576 96.82070790000094 7.767 108.36937630000101 9.133 63.433635000000756 9.797 106.30067309999983 4.629 68.42418840000019 8.12 76.09445960000001 4.445 68.6399955000002 8.996 69.74460890000005 4.14 71.92460159999986 7.822 108.30572400000003 5.041)
Error minima by case: (8.8787 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 0.006 1 13.1695 1 0.0607 1 0.0152 2 0.0 0 0.0152 2 0.2852 7 3.8376 7 0.4003 5 5.8665 1 0.1679 1 0.0551 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 105.991
Average program size in population (points): 106.991
Average percent parens in population: 0.009
Minimum age in population: 137.0988770665986
Maximum age in population: 141.7047118194851
Average age in population: 139.8465834513497
Median age in population: 139.8764058412731
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.354
Error (vector) diversity:			 0.368
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 181975093
--- Timings ---
Current time: 1529616336544 milliseconds
Total Time:         363.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.6 seconds, 33.4%
Fitness Testing:    193.3 seconds, 53.2%
Report:              48.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_rot float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup integer_dup integer_flush float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_swap integer_pop float_shove float_dec float_dec integer_flush print_float float_flush float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2318.652081199998
Median total errors in population: 694.5456000000001
Error averages by case: (87.01578709999994 4.525 74.85599859999988 7.278 78.27793750000009 8.912 77.69904090000003 8.621 74.65087510000002 3.626 71.5183772 10.721 80.92974700000009 3.872 83.79546320000001 4.322 115.57772780000005 4.129 89.55085019999964 8.472 81.62654770000009 8.575 83.96560299999994 4.458 68.1888611000003 7.94 75.69504429999974 11.785 101.16329410000097 10.517 100.86447080000111 7.629 110.11446240000112 8.972 69.40464130000042 9.691 112.89110289999974 4.6 72.66946270000012 8.162 85.25743960000003 4.3 71.2257759000003 9.005 80.85005560000008 4.113 76.26218210000006 7.86 117.50433309999994 5.012)
Error minima by case: (2.0982 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 2.1698 1 0.006 1 21.1598 1 0.0759 1 0.9848 2 0.0 0 0.0152 2 0.2606 7 0.1966 6 0.4003 5 6.7299 1 0.0759 1 6.0277 1 0.0152 1 0.0 0 0.0759 1 3.0 1 0.0152 2 2.2234 2)
Average genome size in population (length): 106.186
Average program size in population (points): 107.186
Average percent parens in population: 0.009
Minimum age in population: 138.5139462770342
Maximum age in population: 143.0197898780082
Average age in population: 141.2166494255823
Median age in population: 141.2327395697287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.33
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 184630093
--- Timings ---
Current time: 1529616340768 milliseconds
Total Time:         367.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.9 seconds, 33.4%
Fitness Testing:    195.7 seconds, 53.2%
Report:              49.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod})
Best program: (float_min float_tan integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_swap integer_inc float_tan integer_mod float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_add float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_flush float_dec float_frominteger integer_pop float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_shove float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush float_mod float_dup_times float_dup_items tag_float_932 float_mod)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2642.023163600001
Median total errors in population: 697.9392000000001
Error averages by case: (97.55530069999992 4.675 90.41504950000015 7.573 95.17996829999996 9.108 93.65647560000029 8.866 87.54339589999995 3.819 84.73139590000004 10.713 90.81957620000003 3.979 97.59306529999999 4.547 127.87639479999987 4.279 103.16469909999947 8.642 98.07909900000034 8.769 94.42183459999998 4.573 80.5839854 8.06 88.42004340000003 11.659 112.63363120000069 10.582 111.43706000000081 7.651 123.05461210000091 9.065 81.8421469 9.6 124.33520239999977 4.716 87.2713038999999 8.308 97.8341217 4.494 84.42997160000006 9.144 90.05711120000001 4.228 91.15894479999974 8.133 127.63877409999996 5.107)
Error minima by case: (5.4056 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.9538 1 0.9192 1 0.994 1 26.661 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.1486 7 1.299 7 0.4003 5 6.7299 2 0.003 1 16.7708 1 0.0152 1 0.0 0 0.0759 2 2.0 1 0.0152 2 3.1251 2)
Average genome size in population (length): 105.7
Average program size in population (points): 106.7
Average percent parens in population: 0.009
Minimum age in population: 139.8667687388271
Maximum age in population: 144.4441576057397
Average age in population: 142.6222885990165
Median age in population: 142.6526947556734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.337
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 187272968
--- Timings ---
Current time: 1529616345031 milliseconds
Total Time:         372.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.1 seconds, 33.4%
Fitness Testing:    198.1 seconds, 53.2%
Report:              49.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2966.420402300001
Median total errors in population: 697.9392000000001
Error averages by case: (111.75964139999978 4.632 102.97682580000088 7.523 106.70001930000043 9.163 105.81147380000108 8.845 99.44202759999988 3.747 96.66488059999996 10.748 106.56737620000001 3.947 109.0671039 4.458 139.25920050000008 4.252 116.67378679999864 8.618 109.81692570000119 8.765 109.80765409999975 4.55 92.80581789999954 7.995 100.68252320000099 11.619 125.38080300000155 10.616 124.12253630000174 7.613 137.1332099000019 8.967 92.91351409999913 9.574 137.41332919999974 4.642 100.58288519999917 8.31 110.72925929999992 4.432 99.99903369999926 9.063 105.11173769999999 4.185 104.003100199999 8.114 141.51573689999995 5.102)
Error minima by case: (9.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0738 1 0.0 0 0.006 1 16.1695 1 0.3102 1 0.0152 2 0.1847 1 0.0152 1 0.006 6 1.701 7 0.4631 5 4.8665 1 0.0881 1 23.7708 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 103.835
Average program size in population (points): 104.835
Average percent parens in population: 0.010
Minimum age in population: 141.5016690173536
Maximum age in population: 146.0763716304072
Average age in population: 143.9343194748384
Median age in population: 143.9658422533791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.314
Error (vector) diversity:			 0.329
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 189869168
--- Timings ---
Current time: 1529616349221 milliseconds
Total Time:         376.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.3 seconds, 33.3%
Fitness Testing:    200.4 seconds, 53.3%
Report:              50.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2684.936863400001
Median total errors in population: 697.9392000000001
Error averages by case: (95.58669820000003 4.41 93.05559590000031 7.393 96.76436480000027 9.134 95.87618450000046 8.731 84.67900420000001 3.601 85.1641399 10.841 91.43942970000002 3.714 95.07435970000002 4.342 127.81091730000006 3.988 107.85614829999908 8.517 99.72438210000054 8.636 94.66937589999993 4.308 86.85541979999981 7.838 93.36921010000029 11.695 118.41446940000112 10.658 116.42903200000117 7.597 129.16859740000132 8.962 85.85791199999981 9.428 123.49435679999985 4.399 90.38957809999962 8.226 95.94752680000002 4.302 91.71668399999963 9.082 89.45947490000007 3.944 94.39509529999955 7.947 125.27290630000006 4.773)
Error minima by case: (8.0 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 25.9064 1 0.0759 1 0.0152 2 0.1847 1 0.0152 1 0.2549 7 0.299 7 0.4003 5 4.8665 1 0.0881 1 11.7708 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 103.882
Average program size in population (points): 104.882
Average percent parens in population: 0.010
Minimum age in population: 142.509795628295
Maximum age in population: 147.1949143079086
Average age in population: 145.2405270927037
Median age in population: 145.3173368007022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.319
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.33
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 192466443
--- Timings ---
Current time: 1529616353349 milliseconds
Total Time:         380.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.6 seconds, 33.3%
Fitness Testing:    202.8 seconds, 53.3%
Report:              51.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -13.80243152498158} {:instruction integer_inc} {:instruction float_tan} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -13.80243152498158 integer_inc float_tan 5 integer_max integer_dup_items integer_dup_items integer_dup integer_inc float_tan integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_stackdepth integer_min float_shove integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2691.2896593000014
Median total errors in population: 697.9392000000001
Error averages by case: (99.2584320999998 4.558 90.65162670000043 7.363 94.4388700000004 9.073 93.5417916000008 8.698 86.08096989999993 3.676 87.73238359999999 10.775 93.28946229999997 3.883 95.95689329999998 4.419 128.98680549999992 4.168 103.16324529999896 8.489 97.53654740000087 8.618 96.45328209999984 4.46 85.5910053999998 7.871 95.4840139000007 11.635 120.50038910000124 10.633 119.34966260000141 7.619 126.11859730000116 8.927 88.12028819999954 9.454 126.16872249999982 4.564 88.01969619999961 8.11 96.70887559999997 4.348 87.4889307999997 9.108 92.58347459999997 4.113 91.6472388999994 7.952 128.95445439999992 4.95)
Error minima by case: (0.5416 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0558 1 0.006 1 22.9064 1 0.0301 1 0.0152 2 0.3213 1 0.0152 1 0.7148 7 0.701 7 0.4003 5 5.4433 1 0.8289 1 10.7708 1 0.0152 1 1.0 1 0.1138 1 2.0 1 0.0152 2 1.1251 2)
Average genome size in population (length): 103.976
Average program size in population (points): 104.976
Average percent parens in population: 0.010
Minimum age in population: 144.0282552630668
Maximum age in population: 148.359536614945
Average age in population: 146.5711268203311
Median age in population: 146.6355344990707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.313
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 195066068
--- Timings ---
Current time: 1529616357575 milliseconds
Total Time:         384.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.8 seconds, 33.2%
Fitness Testing:    205.2 seconds, 53.3%
Report:              51.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_inc} {:instruction integer_dup} {:instruction float_flush} {:instruction float_flush} {:instruction float_sin} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush integer_flush print_float float_flush float_inc integer_dup float_flush float_flush float_sin integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2247.639894000002
Median total errors in population: 694.0608000000002
Error averages by case: (80.82999889999999 4.272 73.90655849999972 7.341 78.39699849999998 9.119 77.49447050000006 8.73 69.01653430000005 3.405 69.11519440000004 10.779 75.43458180000006 3.564 79.07731590000003 4.145 108.59597370000002 3.837 87.78747779999946 8.499 81.65334580000015 8.636 78.880228 4.131 67.03245310000031 7.776 75.43637899999966 11.608 100.04034150000082 10.583 99.23357300000092 7.427 110.62965160000097 8.825 69.13324150000044 9.352 108.48855069999985 4.282 70.94424600000025 8.063 80.7306696 4.136 71.21248960000034 9.023 74.67911490000007 3.794 74.6265633000002 7.926 111.31994210000002 4.691)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 29.6727 1 0.0759 1 0.0152 2 0.1847 1 0.0152 1 0.2549 7 1.701 7 0.4631 5 1.8665 1 0.0759 1 9.655 1 0.0152 1 1.0 1 0.0759 2 1.0 1 0.0152 2 2.7084 2)
Average genome size in population (length): 103.483
Average program size in population (points): 104.483
Average percent parens in population: 0.010
Minimum age in population: 145.6276885339611
Maximum age in population: 150.0166014636906
Average age in population: 147.8875376668981
Median age in population: 147.9388626836324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.316
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 197653368
--- Timings ---
Current time: 1529616361786 milliseconds
Total Time:         388.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.0 seconds, 33.2%
Fitness Testing:    207.6 seconds, 53.4%
Report:              52.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_flush})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_max in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush integer_flush print_float float_flush float_mod integer_dup float_flush float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2861.7917179000024
Median total errors in population: 708.9392000000001
Error averages by case: (105.02338619999979 4.869 100.36680470000049 7.638 105.36248320000028 9.111 103.63548690000071 8.906 94.02280589999984 4.003 96.35851939999993 10.781 99.06538169999999 4.196 103.6847237 4.702 136.13596019999991 4.527 107.93184469999905 8.625 108.12471300000082 8.837 101.83217439999981 4.756 90.0074337999999 8.046 98.90079530000047 11.628 122.99200130000101 10.635 122.12484240000127 7.859 133.27257560000123 9.122 91.68192099999959 9.438 132.29733729999975 4.895 95.7267429999996 8.375 103.98075499999996 4.654 93.40046529999972 9.17 97.23813869999998 4.453 100.47791749999936 8.161 135.43650769999994 5.323)
Error minima by case: (0.5643 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 15.2783 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.006 7 0.701 2 0.4003 2 2.8665 1 0.0116 1 9.3879 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 2.1251 2)
Average genome size in population (length): 103.171
Average program size in population (points): 104.171
Average percent parens in population: 0.010
Minimum age in population: 146.6276885339611
Maximum age in population: 151.258612710146
Average age in population: 149.2322075685239
Median age in population: 149.2397981228983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.337
Error (vector) diversity:			 0.347
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 200233093
--- Timings ---
Current time: 1529616365979 milliseconds
Total Time:         393.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.2 seconds, 33.1%
Fitness Testing:    209.9 seconds, 53.4%
Report:              52.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items float_tan integer_mod integer_dup_times in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2482.9977056999996
Median total errors in population: 694.0608000000002
Error averages by case: (89.09976749999984 4.386 84.51338550000021 7.577 88.72201890000031 9.27 87.58064320000054 8.833 78.04871979999997 3.483 76.27780779999999 10.823 84.08179780000006 3.718 88.1127081 4.239 119.44035399999997 3.925 98.18262219999934 8.733 91.74187690000055 8.826 87.55768559999993 4.295 76.7874305000001 7.954 84.01290140000012 11.616 108.80025710000078 10.525 108.059206200001 7.513 119.16189520000118 8.937 76.85979700000021 9.565 117.03808319999983 4.429 82.19701059999996 8.35 89.74351659999999 4.19 80.92542239999989 9.111 83.53149950000004 3.908 85.39846409999969 8.122 120.03583459999997 4.759)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.1345 1 0.9442 1 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 2.701 7 0.4003 5 4.8665 2 0.0152 1 3.5526 1 0.0152 1 0.0888 1 0.0759 1 1.0 1 0.0152 2 3.8749 2)
Average genome size in population (length): 103.422
Average program size in population (points): 104.422
Average percent parens in population: 0.010
Minimum age in population: 147.6276885339611
Maximum age in population: 152.8918055607683
Average age in population: 150.5584335160226
Median age in population: 150.5737505556425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.315
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 202819093
--- Timings ---
Current time: 1529616370133 milliseconds
Total Time:         397.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.4 seconds, 33.1%
Fitness Testing:    212.4 seconds, 53.4%
Report:              53.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_swap} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction print_float} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_min float_tan integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_swap in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_rot float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup integer_dup integer_flush float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_swap integer_pop float_shove float_dec float_dec integer_dup print_float float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2646.4783049000016
Median total errors in population: 697.9392000000001
Error averages by case: (97.6574506999999 4.658 89.63903839999995 7.57 93.92263380000006 9.27 92.69086420000002 8.859 85.00526479999996 3.679 85.97831829999998 10.82 91.94467410000004 3.905 95.32899620000003 4.39 128.4922341 4.205 102.0637375999994 8.709 96.93568350000037 8.83 95.15566169999994 4.515 82.60132380000005 7.995 92.09089270000025 11.677 116.40523970000093 10.639 114.13276670000101 7.607 122.83454790000098 9.001 84.42746460000001 9.523 125.16691739999982 4.696 85.68142340000006 8.3 95.05738799999996 4.394 85.02641290000005 9.102 90.9083326 4.171 90.37577339999999 8.123 127.32326439999997 4.994)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.9192 1 0.994 1 11.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.006 7 0.299 7 0.4003 5 2.8665 1 0.0881 1 9.7708 1 0.0152 1 0.0 0 0.0759 1 0.8277 1 0.0152 2 2.1251 2)
Average genome size in population (length): 102.99
Average program size in population (points): 103.99
Average percent parens in population: 0.010
Minimum age in population: 149.5872099900377
Maximum age in population: 153.9148329723622
Average age in population: 151.9105874226918
Median age in population: 151.9504458121591
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.329
Error (vector) diversity:			 0.341
Behavioral diversity:				 0.341
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 205394543
--- Timings ---
Current time: 1529616374318 milliseconds
Total Time:         401.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.7 seconds, 33.0%
Fitness Testing:    214.7 seconds, 53.5%
Report:              53.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_min} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_min integer_dup_items -14.92010430989157 integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_add in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_dec float_dec integer_dup_times float_shove integer_dup_times float_dec integer_yankdup integer_dup_times float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_yank print_float float_flush integer_flush print_float float_flush float_mod integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_932 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2710.9777863000018
Median total errors in population: 697.9392000000001
Error averages by case: (100.2822224 4.557 91.33699800000016 7.392 95.03321570000008 9.13 94.24365030000021 8.728 87.7459208 3.633 90.12549340000001 10.821 95.35961210000004 3.905 97.57696230000006 4.34 128.63722970000003 4.167 105.41308639999934 8.548 98.14971020000036 8.658 98.66749039999993 4.471 85.38417579999988 7.832 94.27814620000026 11.693 119.45223850000114 10.634 117.24298180000122 7.586 126.90613050000127 8.999 87.02084639999981 9.495 127.00159869999982 4.594 88.60048779999985 8.185 99.14555980000002 4.32 88.86709319999979 9.126 94.21094770000005 4.13 92.1664522999997 7.955 130.20953590000002 5.021)
Error minima by case: (4.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.9192 1 1.0 1 16.1695 1 0.0759 1 0.0152 2 0.3213 1 0.0152 2 0.063 7 0.0422 7 0.0174 5 0.8665 1 0.0759 1 0.4764 1 0.0152 1 0.0 0 0.0152 2 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 102.933
Average program size in population (points): 103.933
Average percent parens in population: 0.010
Minimum age in population: 151.0280987936929
Maximum age in population: 155.2705658529231
Average age in population: 153.2149903394977
Median age in population: 153.2514151637559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.309
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.319
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 207968318
--- Timings ---
Current time: 1529616378555 milliseconds
Total Time:         405.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.9 seconds, 33.0%
Fitness Testing:    217.1 seconds, 53.5%
Report:              54.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -13.80243152498158} {:instruction integer_inc} {:instruction float_tan} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_min})
Best program: (float_add integer_dup_items integer_dup_items -13.80243152498158 integer_inc float_tan 5 integer_max integer_dup_items integer_dup_items integer_dup integer_inc float_tan integer_inc float_tan integer_mod integer_inc in2 float_inc integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_mult float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_yankdup float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_min)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2844.0999449000024
Median total errors in population: 699.0608000000002
Error averages by case: (104.1139604999998 4.725 101.31952420000081 7.53 106.01583960000055 9.113 104.48802280000103 8.748 92.51598739999987 3.862 92.85517249999988 10.821 98.12696939999995 4.048 102.17348399999995 4.551 129.50689309999998 4.31 111.03560389999878 8.569 108.7991429000011 8.741 101.37900109999983 4.629 90.04764909999952 7.924 96.55858080000066 11.628 121.23793550000129 10.678 119.00911350000145 7.738 134.43154970000163 9.137 89.19008839999937 9.408 131.83974209999974 4.791 97.13811259999908 8.206 103.3857864999999 4.528 95.70098559999929 9.272 97.19360999999995 4.316 101.832506899999 8.075 133.70868279999996 5.148)
Error minima by case: (4.0848 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1602 7 0.701 7 0.0885 5 3.8665 1 0.0276 1 9.7708 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 0.1693 2)
Average genome size in population (length): 103.22
Average program size in population (points): 104.22
Average percent parens in population: 0.010
Minimum age in population: 152.3495918028454
Maximum age in population: 156.5059280671609
Average age in population: 154.6307996251419
Median age in population: 154.714364541075
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.34
Error (vector) diversity:			 0.345
Behavioral diversity:				 0.346
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 210549243
--- Timings ---
Current time: 1529616382730 milliseconds
Total Time:         409.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.1 seconds, 33.0%
Fitness Testing:    219.5 seconds, 53.6%
Report:              55.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_776} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod})
Best program: (float_add float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_inc integer_max integer_rot integer_inc integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_776 38.07590924596505 float_add in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_flush integer_flush float_dec integer_dup_times float_shove float_dec float_dec integer_mod float_dec integer_flush float_yankdup float_dec float_dec float_frominteger float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_pop integer_dup_items float_dec float_dec float_yankdup float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_frominteger float_shove float_dec float_dec integer_flush print_float float_flush float_mod)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2516.0590913000005
Median total errors in population: 697.9392000000001
Error averages by case: (89.78007619999994 4.522 85.0877167000002 7.475 88.79167730000022 9.121 87.9333770000004 8.751 78.67018579999993 3.641 79.13192439999996 10.718 85.7775114000001 3.823 88.48137190000007 4.343 122.86815560000007 4.109 97.74831589999924 8.587 92.08821060000056 8.713 88.99345179999993 4.421 76.36493600000006 7.886 87.30516680000028 11.657 112.40284740000106 10.595 112.09407250000126 7.61 122.14821100000127 8.88 80.76169809999995 9.494 118.10539899999979 4.535 82.17317709999995 8.198 89.79350880000001 4.306 82.66888039999996 9.076 83.03443470000008 4.091 85.58019709999976 8.008 120.80158780000005 4.913)
Error minima by case: (0.7291 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 0.006 1 15.2783 1 0.0759 1 0.0152 2 0.3213 1 0.0152 1 0.7148 7 1.0031 7 0.4003 5 2.8665 1 0.0759 1 1.3816 1 0.0152 1 0.0 0 0.0759 2 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 102.965
Average program size in population (points): 103.965
Average percent parens in population: 0.010
Minimum age in population: 153.3495918028454
Maximum age in population: 158.1140404019156
Average age in population: 155.9349554652811
Median age in population: 155.9723044000009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.321
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 213123893
--- Timings ---
Current time: 1529616386847 milliseconds
Total Time:         414.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.3 seconds, 32.9%
Fitness Testing:    221.9 seconds, 53.6%
Report:              55.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_swap} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_rot} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_add} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction float_mod} {:instruction integer_dup} {:instruction float_add} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items float_stackdepth integer_inc float_tan integer_mod integer_inc integer_dup_items -14.92010430989157 integer_inc integer_swap integer_mod integer_yankdup in2 float_add integer_stackdepth float_min float_sin in1 float_swap float_max tag_float_754 38.07590924596505 float_add in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_rot float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec integer_dup integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_add float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_flush float_dec float_frominteger integer_pop float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_add float_mod float_dup_times float_dup_items tag_float_932 float_mod integer_dup float_add tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2505.348287600001
Median total errors in population: 694.0608000000002
Error averages by case: (92.60021699999997 4.504 84.73510710000019 7.444 88.56858520000031 9.244 87.53947170000025 8.761 80.83459829999998 3.576 78.26170070000003 10.717 85.82169830000007 3.788 89.64053610000009 4.329 120.58247590000008 4.063 99.44953859999956 8.625 91.78235610000041 8.749 88.97355449999998 4.363 74.89150210000007 7.885 83.34136570000005 11.601 108.65286500000065 10.602 108.05795850000067 7.459 120.3936005000009 8.84 76.42564180000005 9.543 118.83457339999991 4.538 82.44254809999994 8.262 91.55643980000002 4.271 82.41603600000003 9.064 84.84442020000004 4.041 85.85231599999989 8.012 121.692181 4.876)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.2104 1 0.0 0 0.006 1 23.9064 1 0.1736 1 0.0152 2 0.0 0 0.0152 1 0.2606 7 0.299 7 1.5997 5 1.8665 1 0.0759 1 8.2292 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 101.823
Average program size in population (points): 102.823
Average percent parens in population: 0.010
Minimum age in population: 154.956774703729
Maximum age in population: 159.1616156194841
Average age in population: 157.3031839343143
Median age in population: 157.3582403676664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.3
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 215669743
--- Timings ---
Current time: 1529616391083 milliseconds
Total Time:         418.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.5 seconds, 32.9%
Fitness Testing:    224.2 seconds, 53.6%
Report:              56.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add -14.92010430989157 integer_inc float_tan integer_mod float_tan integer_mult integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_pop float_dec integer_flush float_dec integer_flush float_dec float_dec integer_rot float_shove float_dec float_dec float_yank float_dec integer_flush float_shove integer_sub integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2937.7962689000024
Median total errors in population: 697.9392000000001
Error averages by case: (108.81887509999984 4.658 101.17822030000056 7.444 105.54233370000041 9.202 104.02066280000075 8.769 96.22603419999989 3.762 99.33891659999988 10.766 103.50548660000001 3.93 105.97498449999996 4.451 136.304748 4.279 114.87869599999883 8.567 107.98722280000095 8.714 106.70359209999985 4.543 93.94152529999961 7.91 102.88453410000078 11.614 128.1658574000014 10.635 127.2714439000016 7.565 135.5510198000015 8.956 96.58580939999916 9.498 136.74726079999976 4.658 98.56130299999933 8.227 107.07411009999994 4.443 98.46104509999928 9.128 102.50669990000003 4.201 102.16165839999915 8.005 138.443229 5.036)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.7328 1 8.1695 1 0.0759 1 0.0152 2 0.1847 1 0.0152 2 0.006 7 0.701 7 0.5997 5 4.8665 1 0.0881 1 8.3594 1 0.0152 1 0.0 0 0.7496 2 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 100.878
Average program size in population (points): 101.878
Average percent parens in population: 0.010
Minimum age in population: 156.0993690152959
Maximum age in population: 160.7586011060126
Average age in population: 158.6556961548954
Median age in population: 158.701569151925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.296
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 218191918
--- Timings ---
Current time: 1529616395207 milliseconds
Total Time:         422.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.7 seconds, 32.8%
Fitness Testing:    226.6 seconds, 53.6%
Report:              56.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dec} {:instruction -13.80243152498158} {:instruction integer_inc} {:instruction float_tan} {:instruction float_tan} {:instruction integer_mod} {:instruction float_shove} {:instruction in2} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_805} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_max} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub integer_dec -13.80243152498158 integer_inc float_tan float_tan integer_mod float_shove in2 float_swap integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_805 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec float_dup float_max float_dec integer_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2535.1799713000005
Median total errors in population: 694.0608000000002
Error averages by case: (93.60218519999997 4.405 86.8077164000003 7.41 91.0271180000003 9.113 89.79196870000035 8.714 80.57506540000003 3.546 78.84777370000005 10.801 87.92615609999999 3.731 90.53139250000001 4.273 121.96824170000002 4.019 99.32035149999932 8.532 94.05669180000055 8.645 90.66921109999997 4.302 75.61244359999989 7.87 83.34583710000015 11.603 108.35892570000108 10.572 108.47729900000115 7.571 121.7986749000014 8.904 77.39053939999995 9.47 120.92316209999987 4.41 83.98216589999971 8.16 91.98347790000003 4.249 83.39869659999978 9.102 87.19618150000005 3.953 87.67122879999967 7.976 123.74946670000003 4.837)
Error minima by case: (8.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.8412 1 0.006 1 21.661 1 0.0607 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 0.8376 7 0.4003 5 1.8665 1 0.0276 1 3.2292 1 0.0152 1 0.0 0 0.1138 1 1.0 1 0.0152 2 8.8749 2)
Average genome size in population (length): 100.296
Average program size in population (points): 101.296
Average percent parens in population: 0.010
Minimum age in population: 157.1531354631435
Maximum age in population: 161.8615216552519
Average age in population: 159.9719509424914
Median age in population: 159.9700503913863
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.319
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 220699493
--- Timings ---
Current time: 1529616399340 milliseconds
Total Time:         426.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.0 seconds, 32.8%
Fitness Testing:    228.9 seconds, 53.7%
Report:              57.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction float_swap} {:instruction -16.026191801622442} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max float_swap -16.026191801622442 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove float_dec float_dec float_frominteger float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_dup float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2612.113986200002
Median total errors in population: 697.9392000000001
Error averages by case: (95.66801029999992 4.412 89.57983179999994 7.454 94.32035249999988 9.166 92.47242190000009 8.781 82.36912980000001 3.558 83.5218385 10.73 90.65204350000005 3.738 91.90235799999998 4.254 124.45409090000001 4.017 103.51148639999955 8.583 97.49750290000013 8.727 94.34795349999993 4.305 79.30222660000017 7.869 87.44119309999982 11.552 112.88502000000068 10.542 113.12382080000093 7.44 124.7004595000009 8.849 81.97933270000014 9.472 123.49425229999983 4.44 86.74552089999999 8.182 94.18019349999999 4.232 86.2661798000002 9.073 89.40741690000004 3.97 90.38018260000005 8.026 125.69516749999998 4.844)
Error minima by case: (3.0799 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 22.9064 1 0.0607 1 0.0152 2 0.1847 1 0.0152 2 0.1486 7 0.701 7 0.4003 5 1.8665 2 0.0048 1 21.7815 1 0.0152 1 0.0 0 0.0759 1 1.0 1 0.0152 2 2.1251 2)
Average genome size in population (length): 99.482
Average program size in population (points): 100.482
Average percent parens in population: 0.010
Minimum age in population: 158.9654557019169
Maximum age in population: 163.321997290119
Average age in population: 161.2397304989294
Median age in population: 161.2656615020974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.304
Error (vector) diversity:			 0.31
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 223186793
--- Timings ---
Current time: 1529616403440 milliseconds
Total Time:         430.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.2 seconds, 32.8%
Fitness Testing:    231.2 seconds, 53.7%
Report:              58.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction 4} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add -14.92010430989157 integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times 4 integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_shove float_dec float_dec float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_flush print_integer float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec float_dec integer_dec float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2703.674906600001
Median total errors in population: 697.9392000000001
Error averages by case: (99.8154171999999 4.575 93.98762450000031 7.549 98.41652030000019 9.204 97.00206310000048 8.806 85.54457199999993 3.669 85.87618219999993 10.695 93.17492400000005 3.898 95.35288750000004 4.395 126.22665359999996 4.194 105.47428399999919 8.631 101.22608930000062 8.772 96.43014999999988 4.455 84.40588269999982 7.997 92.29923540000041 11.603 117.21608960000115 10.59 116.65270930000138 7.618 127.97402200000121 8.974 85.48752519999968 9.492 127.31382109999981 4.602 91.4439913999996 8.279 96.59270929999995 4.363 89.6222616999998 9.14 92.81288409999999 4.129 94.75824399999958 8.084 129.8471630999999 5.007)
Error minima by case: (8.8436 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 0.994 1 13.1695 1 0.0759 1 0.0152 2 0.3213 1 0.0152 2 0.7148 7 0.299 7 0.4003 5 0.1335 1 0.7787 1 17.6671 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 2.1251 2)
Average genome size in population (length): 98.854
Average program size in population (points): 99.854
Average percent parens in population: 0.010
Minimum age in population: 160.2266889679627
Maximum age in population: 164.544153361079
Average age in population: 162.5937752627992
Median age in population: 162.628844310706
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.317
Error (vector) diversity:			 0.328
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 225658418
--- Timings ---
Current time: 1529616407469 milliseconds
Total Time:         434.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.4 seconds, 32.8%
Fitness Testing:    233.5 seconds, 53.7%
Report:              58.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_dup} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (integer_mod float_dup in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup integer_rot float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_dec float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2587.5208913
Median total errors in population: 697.9392000000001
Error averages by case: (97.96789729999979 4.545 86.61856110000042 7.434 90.31159920000022 9.104 89.45794840000055 8.697 82.56467229999988 3.66 81.33252659999994 10.672 91.9557706 3.864 91.73272300000001 4.352 127.59833750000006 4.182 100.75287029999909 8.531 93.51181640000071 8.658 95.0973774999998 4.471 78.44632919999987 7.843 86.51725190000052 11.526 111.27692840000105 10.523 111.2323718000012 7.51 122.4218572000012 8.868 81.76963819999989 9.495 123.93513759999982 4.608 84.05929439999954 8.157 92.43340619999987 4.31 84.08343469999963 9.032 90.75667859999996 4.124 87.33640619999947 7.964 127.22605669999997 4.994)
Error minima by case: (2.2793 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 27.9064 1 0.0759 1 0.0152 2 0.6787 1 0.0152 2 0.0776 7 0.1207 7 0.4003 5 4.4046 2 0.0759 1 2.5331 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 99.193
Average program size in population (points): 100.193
Average percent parens in population: 0.010
Minimum age in population: 161.5177711349859
Maximum age in population: 165.7885495300318
Average age in population: 163.9162782080234
Median age in population: 163.9592735816794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.311
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 228138643
--- Timings ---
Current time: 1529616411561 milliseconds
Total Time:         438.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.6 seconds, 32.7%
Fitness Testing:    235.8 seconds, 53.8%
Report:              59.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_swap} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_rot} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_dup} {:instruction float_max} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items float_stackdepth integer_inc float_tan integer_mod integer_inc integer_dup_items -14.92010430989157 integer_inc integer_swap integer_mod integer_yankdup in2 float_add integer_stackdepth float_min float_sin in1 float_swap float_max tag_float_754 38.07590924596505 float_add in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_rot float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec print_integer integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_add float_dec float_dec integer_dup_times integer_stackdepth float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_flush float_dec float_frominteger float_dec float_frominteger integer_pop float_dec float_stackdepth integer_dup_items float_shove integer_swap integer_pop float_dec integer_mod integer_dup_items float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec integer_mod float_dec float_dec integer_flush print_float integer_dup float_max float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2738.750791700001
Median total errors in population: 705.0608000000002
Error averages by case: (101.07810719999985 4.578 94.34717690000025 7.388 98.06279960000023 9.104 97.27739840000056 8.673 89.12630729999994 3.711 86.41477240000002 10.692 95.77249270000002 3.894 98.66992919999997 4.425 131.19559220000002 4.171 106.08667859999917 8.493 101.21573460000067 8.635 98.81818559999986 4.519 83.27237229999973 7.838 93.71207570000038 11.63 119.00496070000125 10.649 120.52579130000137 7.714 129.62778960000128 8.978 87.61530109999968 9.363 126.69511209999983 4.624 91.59563069999966 8.129 99.89298059999996 4.352 90.58027139999972 9.137 94.36029330000004 4.178 94.89795189999943 7.956 131.1000863 4.974)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0462 1 0.0808 1 0.1306 1 23.9064 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 2.701 7 0.4003 5 5.8665 1 0.0152 1 3.7708 1 0.0152 1 1.0 1 0.0759 1 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 98.78
Average program size in population (points): 99.78
Average percent parens in population: 0.010
Minimum age in population: 162.7034896069065
Maximum age in population: 167.0058895609825
Average age in population: 165.2432187573655
Median age in population: 165.2733012608598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.337
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 230608493
--- Timings ---
Current time: 1529616415734 milliseconds
Total Time:         442.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.8 seconds, 32.7%
Fitness Testing:    238.2 seconds, 53.8%
Report:              59.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -16.05182364113494} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.301363394366135} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction tagged_454} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod})
Best program: (integer_inc integer_max integer_dup_items -16.05182364113494 integer_inc integer_dup_items integer_dup_items -14.301363394366135 float_dec integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min tagged_454 in1 float_stackdepth float_max float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_rot float_shove float_dec float_dec integer_pop float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2697.4958357000014
Median total errors in population: 699.0608000000002
Error averages by case: (100.08281759999983 4.536 92.10270770000044 7.446 95.84245200000032 9.171 94.97270540000055 8.744 86.24696580000003 3.66 86.12037529999996 10.805 94.6812476 3.816 95.26219189999996 4.331 131.44564210000007 4.143 104.24320139999931 8.539 98.85367650000066 8.668 97.88122589999989 4.415 84.53446609999985 7.839 93.64472930000065 11.645 118.17121950000106 10.616 118.10178390000114 7.528 125.57780480000116 8.932 88.44956619999958 9.478 126.18880399999989 4.523 87.75315299999978 8.154 96.23945279999992 4.327 87.03141059999987 9.157 93.44050299999994 4.067 92.87290549999939 8.005 130.2398278 4.97)
Error minima by case: (1.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.9192 1 0.7608 1 22.1695 1 0.0607 1 0.0152 2 0.2327 1 0.0152 2 0.2852 7 1.701 7 0.4003 5 0.8665 2 0.1529 1 6.7708 1 0.0152 1 2.0 1 0.1138 2 1.7437 1 0.0152 2 3.1251 2)
Average genome size in population (length): 98.215
Average program size in population (points): 99.215
Average percent parens in population: 0.010
Minimum age in population: 163.7034896069065
Maximum age in population: 168.5841934756105
Average age in population: 166.5578163365847
Median age in population: 166.5652378261287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.31
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 233064243
--- Timings ---
Current time: 1529616419857 milliseconds
Total Time:         447.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.1 seconds, 32.7%
Fitness Testing:    240.5 seconds, 53.8%
Report:              60.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_818} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_613} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_818 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_inc float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_mult float_dec float_dec integer_flush print_float float_flush integer_flush print_float float_flush float_mod integer_dup float_flush float_mod integer_dup float_dup_items tag_float_613 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2560.6309906
Median total errors in population: 697.9392000000001
Error averages by case: (93.46498749999986 4.496 85.50457930000024 7.473 89.4554534000003 9.248 89.16354420000047 8.785 82.62529959999993 3.628 82.10443669999997 10.696 88.80781970000005 3.855 92.38567930000006 4.335 126.56506050000009 4.138 100.72280029999902 8.626 93.13602130000052 8.712 92.32494129999985 4.424 77.4000653 7.9 86.90606110000034 11.592 111.60394600000103 10.491 110.28631840000118 7.439 121.40848280000125 8.848 81.39311779999994 9.557 120.42708259999979 4.549 83.00240219999976 8.274 93.86931099999988 4.294 83.63877969999979 9.027 87.00106470000004 4.07 86.49417159999975 8.036 123.49856430000003 4.948)
Error minima by case: (5.0848 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.1345 1 1.0 1 0.006 1 11.2783 1 0.0759 1 0.0152 2 0.3213 1 0.0095 2 0.0152 6 2.1624 7 0.4003 5 4.8482 2 0.0759 1 8.7708 1 0.0152 1 0.0 0 0.0759 2 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 97.883
Average program size in population (points): 98.883
Average percent parens in population: 0.010
Minimum age in population: 165.1431881710855
Maximum age in population: 170.1465913165526
Average age in population: 167.9090550748921
Median age in population: 167.9475680805989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.329
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 235511518
--- Timings ---
Current time: 1529616424036 milliseconds
Total Time:         451.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.3 seconds, 32.7%
Fitness Testing:    242.8 seconds, 53.8%
Report:              60.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_sin} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_min float_tan integer_dup_items integer_max integer_dup_items float_sin -14.92010430989157 integer_inc float_tan integer_mod tag_integer_442 in2 float_add integer_stackdepth in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dup float_dec integer_flush float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_dec float_dec float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2748.2707528000014
Median total errors in population: 694.0608000000002
Error averages by case: (101.06606559999982 4.481 93.1613647000005 7.353 96.72950990000044 9.129 95.90281600000075 8.685 90.47450609999991 3.622 90.47930069999994 10.729 95.12923900000004 3.806 100.02515040000002 4.335 133.65983939999998 4.136 108.24946829999884 8.513 99.8771966000008 8.608 98.63545909999989 4.371 85.9014664999997 7.762 95.5522746000007 11.542 119.95726110000129 10.526 119.1182366000015 7.456 128.50808390000145 8.819 89.61821089999947 9.512 128.76968779999984 4.517 91.12412879999945 8.076 100.32328629999994 4.284 90.56310779999956 9.023 94.66869310000003 4.038 94.25015609999951 7.928 130.33024350000005 4.945)
Error minima by case: (3.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.0 0 12.1695 1 0.0759 1 0.0152 2 0.3213 1 0.0152 2 0.006 7 1.1624 7 0.5997 5 5.8665 1 0.8723 1 0.1087 1 0.0152 1 0.0 0 0.0152 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 97.591
Average program size in population (points): 98.591
Average percent parens in population: 0.010
Minimum age in population: 166.7042078082365
Maximum age in population: 171.7553378329328
Average age in population: 169.1867662490464
Median age in population: 169.1775970742153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.308
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 237951518
--- Timings ---
Current time: 1529616428103 milliseconds
Total Time:         455.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.5 seconds, 32.6%
Fitness Testing:    245.1 seconds, 53.8%
Report:              61.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_shove float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec float_dec integer_yank float_dec integer_sub integer_dup float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec integer_swap integer_pop integer_yankdup float_dec float_dec integer_swap print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2497.473855800001
Median total errors in population: 697.5000000000002
Error averages by case: (90.5790160999999 4.415 84.10355400000029 7.435 88.29795430000037 9.19 87.1259708000006 8.745 79.43638029999994 3.579 78.49299049999995 10.779 86.08931210000004 3.681 89.01758810000004 4.302 121.95195290000004 3.969 99.2487319999991 8.574 91.33364510000077 8.722 89.58515119999987 4.286 73.99115790000016 7.776 84.30284420000031 11.59 109.74058600000116 10.468 109.83411910000127 7.356 119.0065256000015 8.745 78.39702749999988 9.489 117.44294429999985 4.425 81.40246279999982 8.179 90.57345649999996 4.253 81.35779929999983 9.001 85.00661560000002 3.926 85.13386719999939 7.981 120.34420239999997 4.812)
Error minima by case: (3.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.1345 1 0.0 0 0.0 0 13.1695 1 0.0759 1 0.0152 2 0.1847 1 0.0152 2 0.0152 6 4.701 7 0.5997 5 4.8665 1 0.0881 1 2.3125 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 97.698
Average program size in population (points): 98.698
Average percent parens in population: 0.010
Minimum age in population: 167.7042078082365
Maximum age in population: 172.680920818547
Average age in population: 170.5134014297672
Median age in population: 170.5538392898096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.305
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 240394168
--- Timings ---
Current time: 1529616432220 milliseconds
Total Time:         459.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.8 seconds, 32.6%
Fitness Testing:    247.4 seconds, 53.9%
Report:              62.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_dup_items -14.92010430989157 integer_inc float_min integer_mod integer_inc integer_dup_items float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec integer_swap integer_pop integer_yankdup float_dec float_dec integer_swap print_float integer_sub float_mod integer_dup float_dup_items)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2231.9420569000017
Median total errors in population: 697.9392000000001
Error averages by case: (80.61327279999998 4.5 73.18076569999987 7.399 77.44161110000003 9.103 76.22678559999997 8.68 69.55842340000004 3.681 67.51976460000003 10.797 74.6738796000001 3.83 78.96000430000005 4.405 111.76403650000005 4.062 86.40748369999989 8.506 80.4546151 8.642 77.78327839999997 4.422 63.824319200000325 7.756 74.21393819999979 11.597 100.10709850000042 10.492 100.3247856000005 7.499 108.22730530000075 8.88 68.05419120000057 9.392 107.9072260999999 4.511 70.68569740000031 8.171 79.88564580000005 4.34 68.96274830000047 9.08 73.63012040000004 4.025 73.89551910000006 7.943 111.01054100000007 4.916)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.1345 1 0.0 0 0.006 1 22.9064 1 0.0759 1 0.0152 2 0.1847 1 0.0152 2 0.2852 7 0.701 7 0.4631 5 0.9545 1 0.003 1 10.2292 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 97.497
Average program size in population (points): 98.497
Average percent parens in population: 0.010
Minimum age in population: 169.3822269869262
Maximum age in population: 173.8186984972627
Average age in population: 171.8815027378853
Median age in population: 171.954527479166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.307
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 242831818
--- Timings ---
Current time: 1529616436328 milliseconds
Total Time:         463.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.0 seconds, 32.6%
Fitness Testing:    249.7 seconds, 53.9%
Report:              62.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 33035.893599999974
Test mean error for best: 16.51795
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_add} {:instruction float_add} {:instruction in1} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_max} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_add float_add in1 integer_sub float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_swap float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec float_dup_items print_float integer_max float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2813.0467214000014
Median total errors in population: 699.0608000000002
Error averages by case: (104.58186389999983 4.518 97.44386040000056 7.447 101.71067230000027 9.201 100.3815260000007 8.756 93.30722669999984 3.705 91.42336629999988 10.683 98.67135110000001 3.825 101.49752750000002 4.383 133.40916900000005 4.119 111.23725229999891 8.559 104.49970930000089 8.71 101.89998939999978 4.413 85.0014562999997 7.869 95.59692650000075 11.567 120.48641810000123 10.581 121.25724600000147 7.521 130.4651254000014 8.944 90.29403119999937 9.536 130.75889679999983 4.601 94.66584459999932 8.195 103.33152189999984 4.364 93.58906139999937 9.108 97.72446289999996 4.082 98.42144649999915 8.041 133.74276959999997 4.92)
Error minima by case: (4.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.8694 1 16.1598 1 0.0607 1 0.0152 2 0.0 0 0.0152 2 0.2549 7 0.299 7 0.4003 5 2.8665 1 0.0881 1 15.1598 1 0.0152 1 0.0 0 0.0152 2 0.0 0 0.0152 2 0.8749 2)
Average genome size in population (length): 96.595
Average program size in population (points): 97.595
Average percent parens in population: 0.010
Minimum age in population: 170.914372581395
Maximum age in population: 175.2510358803525
Average age in population: 173.2624499919387
Median age in population: 173.2816594789368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.307
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.319
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 245246993
--- Timings ---
Current time: 1529616440513 milliseconds
Total Time:         467.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.2 seconds, 32.5%
Fitness Testing:    252.1 seconds, 53.9%
Report:              63.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_dup_items float_stackdepth integer_inc float_tan integer_mod integer_inc integer_dup_items -14.92010430989157 integer_inc integer_inc float_tan integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec float_dec integer_pop tag_integer_238 float_dec float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2411.1084465000013
Median total errors in population: 694.0608000000002
Error averages by case: (87.36560179999992 4.366 80.94008780000019 7.283 85.95429620000033 9.089 83.9363135000004 8.657 75.97472510000001 3.498 73.41573340000005 10.685 81.62896940000003 3.67 85.39260199999997 4.237 117.84348299999998 3.952 95.23782109999931 8.473 88.09882730000038 8.59 85.33412479999988 4.216 70.99892180000032 7.668 81.65096700000008 11.571 107.14101590000111 10.528 107.93335020000123 7.408 115.98778510000106 8.816 76.03214850000023 9.373 113.71980379999981 4.401 78.26241700000014 8.06 86.53202459999994 4.195 76.72897920000025 9.048 80.79923840000004 3.949 81.93848949999985 7.913 117.83872009999993 4.776)
Error minima by case: (8.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.8655 1 1.0 1 0.994 1 15.2783 1 0.0607 1 0.0152 2 0.3213 1 0.0152 2 0.006 6 0.701 8 0.4003 5 2.0455 1 0.4273 1 23.7708 1 0.0152 1 0.0 0 0.0759 1 1.0 1 0.0152 2 2.1251 2)
Average genome size in population (length): 96.344
Average program size in population (points): 97.344
Average percent parens in population: 0.010
Minimum age in population: 171.914372581395
Maximum age in population: 176.7716477536128
Average age in population: 174.6018801935373
Median age in population: 174.6131696274722
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.29
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 247655893
--- Timings ---
Current time: 1529616444622 milliseconds
Total Time:         471.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.4 seconds, 32.5%
Fitness Testing:    254.4 seconds, 53.9%
Report:              63.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add -14.92010430989157 integer_inc integer_max integer_mod integer_inc integer_dup_items float_tan integer_mod integer_inc in2 integer_sub integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2616.490730700002
Median total errors in population: 697.9392000000001
Error averages by case: (95.69822939999992 4.418 87.55141830000014 7.286 91.61085480000008 9.064 90.42622320000031 8.654 80.28433170000001 3.549 86.23675969999998 10.717 90.61542910000007 3.727 89.8402569 4.284 129.07836749999996 4.006 101.00261699999933 8.424 94.46135490000036 8.566 93.8309377999999 4.243 83.95438250000005 7.672 93.94065090000025 11.677 117.45886760000089 10.616 114.819671900001 7.534 125.72389730000106 8.849 86.15068539999984 9.319 122.76019139999984 4.475 84.73965579999994 7.968 91.41863599999994 4.224 86.82315999999989 9.069 89.07461960000003 3.983 88.15525009999985 7.913 125.79328189999994 4.804)
Error minima by case: (9.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.8265 1 0.006 1 25.9064 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.7148 7 0.1624 7 0.4631 5 3.8665 1 0.0881 1 1.7708 1 0.0152 1 0.0 0 0.1138 1 1.0 1 0.0152 2 0.8749 2)
Average genome size in population (length): 96.559
Average program size in population (points): 97.559
Average percent parens in population: 0.010
Minimum age in population: 173.2787466088644
Maximum age in population: 178.0288096256278
Average age in population: 175.8833590325097
Median age in population: 175.9098594349747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.299
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 250070093
--- Timings ---
Current time: 1529616448647 milliseconds
Total Time:         475.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.6 seconds, 32.5%
Fitness Testing:    256.6 seconds, 53.9%
Report:              64.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction float_div} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_div} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add -14.92010430989157 integer_inc float_tan integer_mod float_div integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_dec float_dec float_dup float_shove float_dec integer_div float_shove float_dec integer_yankdup integer_min float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_sub float_dec float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2526.278098500002
Median total errors in population: 697.9392000000001
Error averages by case: (95.50985069999996 4.441 85.39195960000016 7.303 89.27496750000012 9.031 88.26866520000038 8.639 80.17449030000003 3.559 78.70800740000003 10.659 90.12485340000002 3.716 90.16887300000005 4.307 123.35532580000002 4.033 96.75601529999933 8.462 92.34306870000042 8.58 93.32967719999989 4.321 76.40391990000002 7.784 83.03066690000006 11.551 107.23836340000102 10.547 107.92054390000119 7.47 119.55193510000134 8.874 76.81087600000018 9.376 122.45646719999974 4.437 81.87565179999983 8.075 91.14496799999998 4.24 80.92486590000006 9.09 89.23841320000002 3.979 85.40016579999973 7.9 125.65650729999999 4.845)
Error minima by case: (8.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 0.1306 1 24.9064 1 0.0759 1 0.0152 2 0.0 0 0.0066 1 0.2802 7 0.299 7 0.4003 5 0.8665 1 0.003 1 11.7708 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.859
Average program size in population (points): 96.859
Average percent parens in population: 0.010
Minimum age in population: 174.7530020728998
Maximum age in population: 179.320147828322
Average age in population: 177.2177204703036
Median age in population: 177.2718439188595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.312
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.319
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 252466918
--- Timings ---
Current time: 1529616452687 milliseconds
Total Time:         479.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.8 seconds, 32.5%
Fitness Testing:    258.9 seconds, 54.0%
Report:              65.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_dup} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_613} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932} {:instruction integer_add})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_max integer_dup_items -14.92010430989157 integer_inc float_tan integer_mod integer_inc in2 integer_max float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_dup float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float integer_dup float_flush float_mod integer_dup float_dup_items tag_float_613 float_mod integer_dup float_dup_items tag_float_932 integer_add)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2723.2781984000017
Median total errors in population: 693.0304000000001
Error averages by case: (100.59188079999991 4.39 91.50263730000047 7.376 95.28573820000032 9.161 94.50126480000074 8.755 86.4431180999999 3.516 88.28230739999992 10.879 95.82479910000002 3.701 96.41603459999995 4.253 132.5491948 3.985 106.63512069999913 8.6 98.58166990000076 8.723 100.3074507999999 4.277 84.73195989999978 7.847 95.68842170000073 11.646 121.19059720000119 10.599 121.24924390000133 7.445 126.7789449000013 8.874 89.37716299999931 9.581 127.47632039999988 4.343 89.05519409999947 8.192 97.54448259999994 4.174 88.86537679999942 9.111 94.9989894 3.955 92.57232269999928 8.013 130.6319653 4.8)
Error minima by case: (0.4799 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 22.9064 1 0.4468 1 0.0152 2 0.3213 1 0.0152 2 0.0152 6 4.701 8 0.4003 5 1.164 2 0.0759 1 9.3034 1 0.0152 1 0.0 0 0.1138 2 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 96.199
Average program size in population (points): 97.199
Average percent parens in population: 0.010
Minimum age in population: 176.156466682244
Maximum age in population: 180.4773820615778
Average age in population: 178.6011001237649
Median age in population: 178.6370132043337
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.284
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 254872193
--- Timings ---
Current time: 1529616456798 milliseconds
Total Time:         483.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.1 seconds, 32.5%
Fitness Testing:    261.2 seconds, 54.0%
Report:              65.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dup})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 integer_inc in2 integer_max float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush integer_flush print_float float_dup_items float_mod integer_dup integer_dup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2830.210417300001
Median total errors in population: 697.9392000000001
Error averages by case: (104.85704429999986 4.687 99.40095170000087 7.554 104.1066061000006 9.4 102.61888970000099 8.943 94.8811396999999 3.872 86.68937119999997 10.756 99.91201370000002 3.958 103.9963035 4.584 136.55456719999998 4.301 112.98424479999863 8.745 106.91669970000123 8.875 103.43761149999979 4.504 84.62945379999975 7.989 93.71985290000082 11.639 118.40585420000157 10.57 119.46852590000167 7.425 130.8209012000016 8.833 88.35565739999934 9.621 129.8222178999998 4.695 95.90783399999917 8.348 105.72854419999996 4.537 93.27702639999956 9.112 97.95286850000002 4.226 100.42610369999886 8.18 134.92713409999996 5.059)
Error minima by case: (4.0984 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0558 1 0.006 1 28.9064 1 0.0759 1 0.0152 2 0.3213 1 0.0152 1 0.0776 7 0.701 7 0.3789 5 4.8665 1 0.0276 1 4.7251 1 0.0152 1 0.0 0 0.0951 1 0.8531 1 0.0152 2 0.8749 2)
Average genome size in population (length): 96.073
Average program size in population (points): 97.073
Average percent parens in population: 0.010
Minimum age in population: 177.3780323111389
Maximum age in population: 181.8930102598128
Average age in population: 179.9787062075718
Median age in population: 180.0064260594628
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.299
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 257274143
--- Timings ---
Current time: 1529616460966 milliseconds
Total Time:         488.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.3 seconds, 32.4%
Fitness Testing:    263.5 seconds, 54.0%
Report:              66.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction in1} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add -14.92010430989157 integer_inc integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_mult integer_inc in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec float_yank float_dec integer_flush float_shove integer_sub integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod in1 float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2477.0887623000026
Median total errors in population: 694.0608000000002
Error averages by case: (88.10689319999994 4.162 83.05137180000011 7.314 87.52689749999995 9.112 85.89725130000018 8.687 74.73773900000002 3.354 80.2551434 10.678 84.49777710000008 3.459 84.527739 4.077 120.88770589999999 3.755 97.85157619999943 8.465 90.69625000000026 8.633 88.0651020999999 4.048 78.00481830000003 7.694 88.92222410000028 11.521 113.71209890000112 10.475 110.92167990000095 7.341 117.42538810000113 8.765 82.77615679999997 9.383 115.4647558999999 4.169 79.08516610000012 8.064 86.81601269999997 4.007 80.15877860000002 8.99 82.54352030000004 3.71 84.16762999999982 7.901 118.63208609999997 4.593)
Error minima by case: (2.796 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.7328 1 13.1695 1 0.0759 1 0.0152 2 0.0 0 0.0064 2 0.0152 6 0.1985 7 0.4003 5 2.8665 2 0.8719 1 6.0276 1 0.0152 1 1.0 1 0.0152 1 1.0 1 0.0152 2 0.8749 2)
Average genome size in population (length): 96.088
Average program size in population (points): 97.088
Average percent parens in population: 0.010
Minimum age in population: 178.3780323111389
Maximum age in population: 183.5246424375831
Average age in population: 181.3374409338944
Median age in population: 181.3321603315785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.28
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 259676468
--- Timings ---
Current time: 1529616465094 milliseconds
Total Time:         492.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.6 seconds, 32.4%
Fitness Testing:    265.8 seconds, 54.0%
Report:              66.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_sub} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add float_sub float_tan integer_mod integer_dup_times in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_pop float_shove integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dup_items integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2468.2389618000025
Median total errors in population: 697.9392000000001
Error averages by case: (89.4057256999999 4.308 83.07520170000029 7.255 86.89666450000011 9.09 85.9859744000005 8.649 78.72025809999997 3.436 77.06496510000005 10.767 86.37549140000002 3.646 88.59918819999999 4.184 122.51174430000003 3.908 97.09876909999907 8.444 90.12774210000052 8.572 90.30706839999985 4.206 73.63029320000011 7.711 82.29677890000006 11.538 106.81567480000109 10.514 105.7536388000012 7.393 117.69787150000127 8.776 77.27054479999998 9.413 117.5149345999998 4.342 79.97262649999978 7.999 90.17050470000001 4.158 79.50163229999987 9.035 83.86035130000002 3.888 84.03488059999952 7.875 119.72743679999999 4.716)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0738 1 1.0 1 0.7328 1 20.661 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 0.299 7 0.5997 5 5.8665 1 0.3347 1 10.2292 1 0.0152 1 0.0 0 0.0759 1 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 96.11
Average program size in population (points): 97.11
Average percent parens in population: 0.010
Minimum age in population: 179.3780323111389
Maximum age in population: 184.8425842175033
Average age in population: 182.6461834591147
Median age in population: 182.684000479939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.294
Error (vector) diversity:			 0.298
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 262079468
--- Timings ---
Current time: 1529616469126 milliseconds
Total Time:         496.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.8 seconds, 32.4%
Fitness Testing:    268.0 seconds, 54.0%
Report:              67.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_min} {:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_min float_add -14.92010430989157 integer_inc integer_max integer_mod integer_inc integer_dup_items integer_swap integer_mod integer_inc in2 integer_sub integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2669.3191140000013
Median total errors in population: 694.0608000000002
Error averages by case: (98.60226699999981 4.464 91.75492710000081 7.302 95.55155530000052 9.052 94.6781099000009 8.633 86.35291479999987 3.616 82.85001959999997 10.729 93.72291530000001 3.776 95.82807559999999 4.324 129.57412440000002 4.012 104.9396895999987 8.43 98.69208000000094 8.573 97.02979269999985 4.372 80.55154899999974 7.687 90.69760020000088 11.56 115.5332455000013 10.57 115.14299420000151 7.474 125.32467160000151 8.825 85.82225389999942 9.339 124.89405489999982 4.481 88.41309939999918 8.034 96.60230719999987 4.279 87.72714389999929 9.091 92.02631549999997 3.985 92.71607999999901 7.895 128.9553274 4.833)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.1306 1 29.9064 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 1.701 7 0.5997 5 3.0455 1 0.003 1 0.2292 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 96.218
Average program size in population (points): 97.218
Average percent parens in population: 0.010
Minimum age in population: 181.1267390839839
Maximum age in population: 186.362931713114
Average age in population: 184.0530634428237
Median age in population: 184.1387540379674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.305
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 264485068
--- Timings ---
Current time: 1529616473263 milliseconds
Total Time:         500.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.0 seconds, 32.4%
Fitness Testing:    270.4 seconds, 54.0%
Report:              67.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 integer_inc in2 integer_max float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dec float_shove float_dec float_dec float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2813.069135300002
Median total errors in population: 697.9392000000001
Error averages by case: (103.6915367999999 4.532 96.85747680000057 7.472 101.76011080000053 9.24 99.89784140000083 8.82 90.8426497999999 3.751 90.71253949999996 10.686 97.68318959999998 3.812 100.4264872 4.434 133.60593869999994 4.138 109.84993729999879 8.638 104.08913620000097 8.707 100.44876599999986 4.382 91.10556349999958 7.861 98.5791321000008 11.63 122.22152340000132 10.602 122.08555550000149 7.571 131.74595390000138 8.923 93.19720699999937 9.464 130.54428709999982 4.55 93.78194499999928 8.203 101.24269449999997 4.374 92.65388979999953 9.139 96.98966770000001 4.11 97.42252699999918 8.091 133.5365786999999 4.967)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.8694 1 20.1695 1 0.0759 1 0.0152 2 0.1847 1 0.0152 2 0.0152 6 0.701 7 0.4003 5 4.8665 2 0.0152 1 36.0 1 0.0152 1 1.0 1 0.1138 1 0.0 0 0.0152 2 37.0 2)
Average genome size in population (length): 96.141
Average program size in population (points): 97.141
Average percent parens in population: 0.010
Minimum age in population: 182.4307136588114
Maximum age in population: 187.5385609985348
Average age in population: 185.3320159986895
Median age in population: 185.3680245641711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.3
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 266888843
--- Timings ---
Current time: 1529616477350 milliseconds
Total Time:         504.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.2 seconds, 32.4%
Fitness Testing:    272.6 seconds, 54.0%
Report:              68.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 32817.756799999974
Test mean error for best: 16.40888
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction integer_sub} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items float_tan integer_mod float_add in2 float_add in2 integer_max float_add integer_stackdepth tag_float_754 38.07590924596505 float_add in1 float_add integer_sub 38.939305753985195 float_inc integer_shove float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times integer_flush float_dec float_dec integer_yankdup float_dup_items float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_rot float_shove float_dec float_dec integer_min float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec float_inc float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2734.8073999000017
Median total errors in population: 694.0608000000002
Error averages by case: (101.27856589999986 4.455 93.41023600000058 7.295 97.04060470000044 9.074 96.19069700000074 8.566 86.80073829999996 3.665 85.7982917 10.768 96.50400959999999 3.774 95.94823589999999 4.368 132.1918215000001 4.056 108.27281069999864 8.43 99.99331720000086 8.558 99.82018319999986 4.385 82.9869361999999 7.637 93.26303530000038 11.606 118.96239900000145 10.604 120.20064200000165 7.464 130.8653756000016 8.868 87.55679449999975 9.383 128.06724739999981 4.448 91.55738509999952 8.013 98.86398159999992 4.291 92.84922849999957 9.115 95.11741049999999 4.007 94.42484619999941 7.881 131.28460629999998 4.847)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.8694 1 13.9064 1 0.0522 1 0.0152 2 0.0 0 0.0152 2 0.7148 7 0.4768 7 0.4912 5 4.8665 1 0.0152 1 3.1997 1 0.0152 1 1.0 1 0.1138 1 0.0 0 0.0152 2 2.4732 2)
Average genome size in population (length): 95.797
Average program size in population (points): 96.797
Average percent parens in population: 0.010
Minimum age in population: 183.736221621223
Maximum age in population: 189.0602315896612
Average age in population: 186.6296608429078
Median age in population: 186.6662876002553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.3
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 269284043
--- Timings ---
Current time: 1529616481376 milliseconds
Total Time:         508.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.5 seconds, 32.3%
Fitness Testing:    274.9 seconds, 54.1%
Report:              69.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction float_rot} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_tan} {:instruction float_pop} {:instruction tag_integer_505} {:instruction in2} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_266} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_sin})
Best program: (float_add -14.92010430989157 integer_inc integer_max float_rot -14.92010430989157 integer_inc float_tan float_pop tag_integer_505 in2 float_pop integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_yank integer_flush float_dec integer_inc integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec print_integer tag_integer_266 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_rot float_dec float_dec float_yankdup float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_sin)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2568.969247200002
Median total errors in population: 697.9392000000001
Error averages by case: (92.18214029999997 4.393 88.6929614000001 7.332 92.97002220000002 9.116 91.55750870000018 8.605 80.94423650000003 3.538 81.02979060000001 10.72 87.03171880000008 3.684 89.23617509999998 4.245 124.1254525 3.975 100.14475159999955 8.503 95.64156290000028 8.597 89.78215869999994 4.28 79.10124030000003 7.731 90.07101930000006 11.626 115.42138600000104 10.574 113.36071850000096 7.481 122.79750170000122 8.856 82.75230429999998 9.371 120.58117899999985 4.434 84.94911649999987 8.103 90.46951150000007 4.193 83.55008309999998 9.089 85.66912770000002 3.954 89.36429169999975 7.911 122.44128829999998 4.791)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.2104 1 0.0 0 0.006 1 25.9064 1 0.0607 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 0.0258 7 0.5369 5 2.8665 1 0.9241 1 22.7708 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 96.059
Average program size in population (points): 97.059
Average percent parens in population: 0.010
Minimum age in population: 184.736221621223
Maximum age in population: 190.3664461719531
Average age in population: 187.9638034633653
Median age in population: 187.9831287914423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.3
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 271685818
--- Timings ---
Current time: 1529616485509 milliseconds
Total Time:         512.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.7 seconds, 32.3%
Fitness Testing:    277.2 seconds, 54.1%
Report:              69.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_sin} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items float_sin in2 integer_max float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times float_yank float_dec float_shove float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger integer_pop float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop tag_integer_238 float_dec float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2334.4367810000012
Median total errors in population: 694.0608000000002
Error averages by case: (83.58633769999994 4.178 78.3786474000001 7.231 82.56897040000018 9.096 81.31129520000026 8.558 70.64417150000001 3.373 72.50301650000003 10.726 77.81902920000002 3.539 80.46253170000004 4.135 114.25506650000005 3.801 94.27453009999935 8.392 85.43735710000028 8.535 80.94955329999992 4.106 69.78236720000022 7.642 79.33094220000005 11.589 105.47954120000088 10.537 104.419649900001 7.292 112.61114930000103 8.712 72.92147940000014 9.415 111.0369310999999 4.16 75.88421959999995 8.031 82.52307949999998 4.082 75.52547629999997 8.934 77.45285500000001 3.746 79.83876669999984 7.842 113.182817 4.605)
Error minima by case: (2.9393 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 1.006 1 18.877 1 0.4468 1 0.0152 2 0.0 0 0.0152 1 0.2852 7 0.701 7 0.5997 5 6.7299 2 0.0759 1 4.2292 1 0.0152 1 1.0 1 0.1138 1 0.0 0 0.0152 2 0.8749 2)
Average genome size in population (length): 96.177
Average program size in population (points): 97.177
Average percent parens in population: 0.010
Minimum age in population: 187.0677889916178
Maximum age in population: 191.3743536972099
Average age in population: 189.2810758133497
Median age in population: 189.2665141924775
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.289
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 274090443
--- Timings ---
Current time: 1529616489658 milliseconds
Total Time:         516.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.9 seconds, 32.3%
Fitness Testing:    279.5 seconds, 54.1%
Report:              70.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -15.417292159944825} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items -15.417292159944825 float_tan integer_mod tag_integer_442 in2 float_add float_add integer_stackdepth float_min float_sin float_min float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup float_dec float_dec integer_shove integer_pop float_shove float_dec integer_dup float_shove float_dec float_dec float_dec integer_mod integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yankdup float_dec integer_flush float_dec float_dec float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_rot float_dec float_dec float_yankdup float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2325.939184900001
Median total errors in population: 697.9392000000001
Error averages by case: (86.13843489999988 4.358 77.58418460000013 7.364 82.51345770000025 9.13 80.51388310000027 8.687 70.44680270000003 3.561 68.95217230000003 10.697 80.36525160000001 3.655 80.01462469999996 4.263 117.39576419999996 3.97 91.3472127999993 8.523 84.61999040000065 8.638 83.27925159999987 4.261 65.90883880000044 7.735 76.70680129999998 11.573 102.38268670000114 10.503 103.05521310000132 7.348 111.84378930000139 8.788 71.43949170000046 9.391 112.59873419999978 4.381 74.89079260000013 8.148 81.80250769999995 4.251 73.24072380000028 9.011 79.20822879999992 3.959 78.60409799999984 7.942 116.14924829999994 4.8)
Error minima by case: (8.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.1306 1 14.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.1486 7 0.8376 7 0.4003 5 4.8665 2 0.0881 1 10.2292 1 0.0152 1 1.0 1 0.7496 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 95.714
Average program size in population (points): 96.714
Average percent parens in population: 0.010
Minimum age in population: 188.3460608143749
Maximum age in population: 192.5849978457049
Average age in population: 190.6325105193559
Median age in population: 190.6729313180267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.31
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 276483493
--- Timings ---
Current time: 1529616493658 milliseconds
Total Time:         520.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.1 seconds, 32.3%
Fitness Testing:    281.7 seconds, 54.1%
Report:              70.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_shove integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items float_tan integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_dec float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_stackdepth integer_sub integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_sub float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2637.527038600001
Median total errors in population: 694.0608000000002
Error averages by case: (96.55236239999995 4.212 88.57214420000003 7.236 91.77064620000003 9.052 91.27656870000021 8.611 82.98791410000003 3.395 85.2864035 10.729 93.25748850000001 3.529 92.88239580000001 4.146 127.03831760000001 3.83 102.44588829999945 8.389 95.12906310000045 8.555 96.95124179999989 4.122 81.4236866000002 7.639 90.98265210000018 11.613 116.76725730000108 10.618 116.98327480000115 7.452 126.4891441000012 8.893 84.7485429000002 9.324 125.08070879999987 4.26 86.34735789999995 7.992 95.07209269999998 4.079 88.15198619999988 9.07 91.85600409999999 3.785 89.51595369999978 7.87 126.93294319999991 4.624)
Error minima by case: (5.2867 1 0.0152 1 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 17.9064 1 0.0605 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.299 7 0.4003 5 5.8665 2 0.003 1 8.7708 1 0.0152 1 0.0 0 0.1138 1 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 95.497
Average program size in population (points): 96.497
Average percent parens in population: 0.010
Minimum age in population: 189.3460608143749
Maximum age in population: 194.1356724613544
Average age in population: 191.9699170401725
Median age in population: 192.029841131475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.303
Error (vector) diversity:			 0.307
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 278871043
--- Timings ---
Current time: 1529616497772 milliseconds
Total Time:         524.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.3 seconds, 32.3%
Fitness Testing:    284.0 seconds, 54.1%
Report:              71.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_flush} {:instruction tag_float_2} {:instruction float_add} {:instruction in2} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_shove} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_107} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (integer_dup_times float_tan integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc integer_flush tag_float_2 float_add in2 float_sub integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 tag_float_754 38.07590924596505 in1 float_add float_max float_shove 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_min float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_frominteger float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_swap float_dec print_integer tag_integer_107 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2373.128579200002
Median total errors in population: 693.0304000000001
Error averages by case: (86.98958179999981 4.3 79.0015084000005 7.199 82.3523641000004 9.109 81.86602890000067 8.618 73.08014639999999 3.408 72.2293715 10.718 81.03014830000004 3.583 82.62975110000004 4.177 117.0882001000001 3.852 95.05572759999876 8.447 85.75581250000084 8.579 84.47779359999983 4.201 67.36697940000043 7.61 78.63087920000042 11.587 104.88339230000135 10.523 106.8923359000015 7.265 115.96789130000151 8.662 74.88961209999994 9.388 112.99261339999983 4.333 76.56036499999962 8.002 85.02742019999985 4.1 77.53355519999964 8.933 80.65438880000004 3.821 80.19900539999946 7.824 117.04570670000001 4.689)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 16.1695 1 0.0607 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.701 7 0.4003 5 1.598 2 0.0881 1 8.7708 1 0.0152 1 0.0 0 0.1138 1 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 95.532
Average program size in population (points): 96.532
Average percent parens in population: 0.010
Minimum age in population: 190.6250429362587
Maximum age in population: 195.4385853463704
Average age in population: 193.2714944092455
Median age in population: 193.2955787980942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.306
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 281259593
--- Timings ---
Current time: 1529616501851 milliseconds
Total Time:         529.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.6 seconds, 32.2%
Fitness Testing:    286.3 seconds, 54.1%
Report:              72.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction 22.570261872660197} {:instruction float_add} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction -36} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_swap float_add integer_dup_items integer_dup_items integer_inc in2 22.570261872660197 float_add -14.92010430989157 integer_inc integer_max integer_dup_items float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_mult float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec -36 float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec float_shove float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2674.7709606000026
Median total errors in population: 697.9392000000001
Error averages by case: (97.82927889999982 4.628 92.89260490000053 7.293 97.32611090000022 9.131 95.81555320000066 8.616 86.04027909999994 3.751 83.33532269999994 10.722 93.16655019999996 3.926 96.07862499999996 4.486 131.0129173 4.234 104.7143309999987 8.445 99.87172220000079 8.542 96.40372219999988 4.481 82.10966709999971 7.69 91.09456250000058 11.647 115.81846490000133 10.549 114.82689680000155 7.405 124.87208580000134 8.804 87.4461597999994 9.407 123.00791379999981 4.615 87.47803389999945 8.063 96.48992169999998 4.445 87.89413669999954 9.07 90.6116881 4.191 93.97344219999933 7.88 127.62496969999997 5.015)
Error minima by case: (2.3904 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 27.9064 1 0.0759 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 2.701 7 0.4003 5 6.0455 1 0.0489 1 10.2292 1 0.0152 1 1.0 1 0.1138 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.331
Average program size in population (points): 96.331
Average percent parens in population: 0.010
Minimum age in population: 192.1670623703367
Maximum age in population: 196.6878839897696
Average age in population: 194.612427436795
Median age in population: 194.6906488747384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.306
Error (vector) diversity:			 0.309
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 283643068
--- Timings ---
Current time: 1529616505886 milliseconds
Total Time:         533.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.8 seconds, 32.2%
Fitness Testing:    288.6 seconds, 54.1%
Report:              72.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -14.92010430989157} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_mult} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_107} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction float_tan})
Best program: (float_add -14.92010430989157 float_dup_items float_tan integer_mod -14.92010430989157 integer_inc float_dup_times integer_dup_items float_mult integer_inc float_tan integer_mod integer_inc integer_dup_items -14.92010430989157 integer_inc integer_mult in2 float_add integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_swap float_dec print_integer tag_integer_107 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_mod float_frominteger float_dec float_dec integer_pop float_dec integer_pop float_dec integer_dup_items float_dec float_frominteger float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items float_tan)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2702.1097365000014
Median total errors in population: 694.0608000000002
Error averages by case: (101.11162289999983 4.475 91.98561950000058 7.385 95.49064030000059 9.161 94.64984850000101 8.672 85.16467259999995 3.546 85.98017689999995 10.701 95.84144900000001 3.751 94.9519079 4.285 129.19513039999995 4.003 106.60406789999865 8.533 98.64874920000116 8.684 99.1461424999998 4.346 82.8592834999997 7.755 92.91537980000086 11.694 118.39076910000153 10.658 118.24178270000168 7.505 126.78658600000158 8.775 87.0800843999994 9.415 126.96776509999975 4.462 88.91698919999942 8.147 96.57893099999991 4.253 89.69058179999945 9.074 94.95578530000002 4.007 93.05103959999904 7.957 130.81473139999989 4.846)
Error minima by case: (7.8989 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.2104 1 1.0 1 0.006 1 6.6888 1 0.3102 1 0.0152 2 0.3213 1 0.0152 1 0.1225 7 2.8376 7 2.5997 5 1.8665 1 0.0759 1 16.7224 1 0.0152 1 0.0 0 0.2504 1 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 95.772
Average program size in population (points): 96.772
Average percent parens in population: 0.010
Minimum age in population: 193.2320324713585
Maximum age in population: 197.9544537162834
Average age in population: 195.977264034671
Median age in population: 195.9761108911261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.319
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 286037568
--- Timings ---
Current time: 1529616510005 milliseconds
Total Time:         537.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.0 seconds, 32.2%
Fitness Testing:    290.9 seconds, 54.1%
Report:              73.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_max} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_min float_tan integer_dup_items integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_frominteger integer_mult integer_inc in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_dup_items float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush integer_flush float_dec float_dec integer_rot float_shove integer_dup_times float_dec integer_min float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_max float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_stackdepth float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub integer_inc integer_rot float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2508.4062337000037
Median total errors in population: 694.0608000000002
Error averages by case: (93.86104219999987 4.265 82.61936280000026 7.202 85.82437830000028 9.071 85.27455840000044 8.532 79.76233779999994 3.415 80.97541159999996 10.657 88.35799410000004 3.566 89.4932 4.154 124.00288499999995 3.851 98.46450729999914 8.359 89.18111540000051 8.511 91.89413759999997 4.163 74.54778070000012 7.523 84.46935450000038 11.553 109.51334490000153 10.507 110.23517830000168 7.335 119.0864568000015 8.683 79.26461079999972 9.305 120.96079689999979 4.324 80.39916229999972 7.938 91.58116719999994 4.063 81.02383499999975 8.937 87.90438060000002 3.817 83.69380339999972 7.793 123.80343179999991 4.688)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 27.9064 1 0.0607 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 0.701 7 0.4003 5 5.7299 2 0.0881 1 27.7708 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 96.135
Average program size in population (points): 97.135
Average percent parens in population: 0.010
Minimum age in population: 194.7400724644214
Maximum age in population: 199.1280467697809
Average age in population: 197.3279535729533
Median age in population: 197.370838178482
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.299
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 288441168
--- Timings ---
Current time: 1529616514086 milliseconds
Total Time:         541.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.2 seconds, 32.2%
Fitness Testing:    293.1 seconds, 54.2%
Report:              73.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_min} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_716} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_swap} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items integer_dup_items -14.92010430989157 integer_inc integer_max integer_dup_items -14.92010430989157 integer_inc float_min integer_mod integer_inc integer_dup_items float_tan integer_mod integer_inc in2 float_add integer_stackdepth float_min float_sin float_rot float_stackdepth float_max tag_float_716 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_swap float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_dup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2536.4960986000015
Median total errors in population: 694.0608000000002
Error averages by case: (93.8294881999999 4.451 85.23780840000022 7.276 88.94418150000016 9.134 88.07199490000038 8.615 81.00060359999996 3.598 81.35943759999998 10.668 88.59113800000003 3.726 90.60434380000001 4.311 122.20318339999996 3.972 100.81250929999922 8.45 91.94358950000048 8.597 91.23351159999989 4.298 76.58528249999998 7.658 84.90976640000027 11.579 110.73467710000111 10.539 110.72283900000126 7.35 120.79148840000134 8.734 78.81520199999989 9.406 120.37614159999981 4.455 82.73282549999973 8.064 92.03833389999994 4.227 82.65165439999983 8.984 86.99556120000003 3.97 86.40493089999958 7.872 124.16260589999997 4.809)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 11.3061 1 0.3254 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 0.701 7 0.4003 5 5.2046 1 0.0759 1 1.1544 1 0.0152 1 0.9711 1 0.0759 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 96.044
Average program size in population (points): 97.044
Average percent parens in population: 0.010
Minimum age in population: 195.7400724644214
Maximum age in population: 200.5852937085045
Average age in population: 198.6413493954951
Median age in population: 198.6446251466081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.302
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 290842668
--- Timings ---
Current time: 1529616518166 milliseconds
Total Time:         545.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.4 seconds, 32.2%
Fitness Testing:    295.4 seconds, 54.2%
Report:              74.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_266} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_dec float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_swap float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_dec float_dec float_dup float_shove float_dec integer_dup_times float_yank integer_flush float_dec integer_pop integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec print_integer tag_integer_266 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_rot float_dec float_dec float_yankdup float_dec float_dec float_shove float_dec float_dec integer_flush print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3015.116332100002
Median total errors in population: 699.0608000000002
Error averages by case: (113.34796809999987 4.901 103.91345640000057 7.535 107.92257370000043 9.255 107.01115500000073 8.818 99.81274619999985 4.07 98.52647939999989 10.789 106.83728550000004 4.145 109.02482099999996 4.785 145.0866048000001 4.502 117.29547149999901 8.663 110.72420300000078 8.816 110.47547269999984 4.765 95.16964599999976 7.921 104.08183080000056 11.722 130.32101940000123 10.681 131.81064760000135 7.675 139.5999599000014 8.992 98.2616675999995 9.587 138.2013265999998 4.932 100.99560799999945 8.318 109.7779107999999 4.697 102.2881519999995 9.185 105.0255363 4.485 104.8380000999993 8.109 142.15678969999996 5.262)
Error minima by case: (1.9627 1 0.0152 1 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 24.9064 1 0.0759 1 0.0152 2 0.1847 1 0.0152 1 0.2549 7 3.9742 7 1.5997 5 6.8665 1 0.0276 2 0.1523 1 0.0152 1 1.0 1 0.1138 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 95.687
Average program size in population (points): 96.687
Average percent parens in population: 0.010
Minimum age in population: 197.8093549986723
Maximum age in population: 201.9420987391679
Average age in population: 199.9686592847433
Median age in population: 200.0093349254844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.32
Error (vector) diversity:			 0.332
Behavioral diversity:				 0.333
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 293235368
--- Timings ---
Current time: 1529616522253 milliseconds
Total Time:         549.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.7 seconds, 32.2%
Fitness Testing:    297.7 seconds, 54.2%
Report:              74.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_tan} {:instruction integer_dup_items} {:instruction in2} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction integer_div} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_mod float_frominteger float_tan integer_dup_items in2 float_sub integer_stackdepth float_min float_sin in1 float_sin in1 float_stackdepth float_max float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add integer_div float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_shove integer_dec float_dec float_dec float_shove float_dec float_dec float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_sub float_dec integer_pop float_shove float_dec integer_pop integer_max float_dec float_dec integer_flush float_dec float_dec integer_mult float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2625.2171331000013
Median total errors in population: 697.9392000000001
Error averages by case: (95.98993989999977 4.602 88.90438590000046 7.313 92.82058060000028 9.041 91.8662834000006 8.629 84.58588299999988 3.761 83.20748649999996 10.777 90.9047255 3.876 93.95632679999996 4.479 127.47652999999998 4.17 103.22019379999897 8.413 95.94456620000078 8.594 93.90675439999987 4.46 80.19626979999988 7.662 89.31216180000045 11.627 114.9977774000011 10.64 115.69132210000117 7.52 124.97748570000131 8.909 83.44279299999967 9.321 122.24446619999979 4.644 86.2414197999995 8.008 95.65495459999995 4.41 87.09000179999958 9.158 89.13427029999998 4.141 89.9897306999994 7.866 126.40582390000002 5.034)
Error minima by case: (0.0713 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.006 7 5.701 7 0.5997 5 3.8665 2 0.5786 1 4.7708 1 0.0152 1 0.0 0 0.9241 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 95.805
Average program size in population (points): 96.805
Average percent parens in population: 0.010
Minimum age in population: 198.9373196110561
Maximum age in population: 203.3541180690314
Average age in population: 201.3196677231907
Median age in population: 201.3449919499759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.311
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 295630968
--- Timings ---
Current time: 1529616526288 milliseconds
Total Time:         553.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.9 seconds, 32.1%
Fitness Testing:    300.0 seconds, 54.2%
Report:              75.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction integer_inc} {:instruction in2} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_pop} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_pop})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 integer_inc in2 integer_yankdup float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_pop 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup float_dup_times float_dec float_stackdepth integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_dup float_dec integer_pop float_min integer_dup_items float_dec float_shove float_dec float_yankdup float_shove float_dec float_dec integer_flush print_float float_flush integer_flush integer_div float_flush float_mod integer_dup integer_pop)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2316.984029600003
Median total errors in population: 694.0608000000002
Error averages by case: (81.23121289999996 4.2 77.45509630000008 7.187 81.16750720000006 9.032 80.4481264000002 8.546 69.71715240000002 3.373 71.92254559999999 10.817 77.47360930000002 3.509 79.43296670000001 4.129 114.4177283 3.752 91.63715479999931 8.353 84.45003130000056 8.464 80.58414429999989 4.092 68.35674930000015 7.577 80.35252640000016 11.67 105.784690500001 10.648 105.25930600000116 7.496 113.70286780000112 8.827 73.44499989999984 9.239 110.0156887999998 4.218 75.19797389999987 7.931 81.7622288 4.087 75.06609189999992 9.065 75.3843854 3.739 78.32516079999981 7.777 112.07608459999996 4.59)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 28.9064 1 0.3102 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 0.701 7 0.4003 5 3.8665 2 0.0759 1 20.7708 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 0.8749 2)
Average genome size in population (length): 95.661
Average program size in population (points): 96.661
Average percent parens in population: 0.010
Minimum age in population: 200.6691785473914
Maximum age in population: 204.4748017194431
Average age in population: 202.7049116127305
Median age in population: 202.7384705224841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.296
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 298022843
--- Timings ---
Current time: 1529616530352 milliseconds
Total Time:         557.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.1 seconds, 32.1%
Fitness Testing:    302.3 seconds, 54.2%
Report:              76.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction integer_inc} {:instruction in2} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_pop} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_pop})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 integer_inc in2 integer_yankdup float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_pop 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec float_stackdepth integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_dup float_dec integer_pop float_min integer_dup_items float_dec float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush print_float float_flush integer_flush integer_div float_flush float_mod integer_dup integer_pop)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2454.9499371000015
Median total errors in population: 693.0304000000001
Error averages by case: (87.56549279999997 4.321 82.97504200000007 7.23 86.53947010000007 9.077 85.9390971000003 8.623 75.7720993 3.475 77.67457569999998 10.825 83.18959670000005 3.642 85.76265380000004 4.23 118.27126729999999 3.876 96.32788209999947 8.41 89.94066270000025 8.57 86.99821419999996 4.246 76.07849870000003 7.576 86.3316164000001 11.614 112.0067344000009 10.564 108.13324460000088 7.352 117.69723180000082 8.835 79.20840149999995 9.347 115.79176469999993 4.356 78.624205 7.984 87.48390979999999 4.164 78.89074460000006 9.084 82.02111670000005 3.876 83.97573289999983 7.875 117.91068220000002 4.688)
Error minima by case: (2.5922 1 0.0038 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.2852 7 0.701 7 0.4003 5 3.0455 2 0.0881 1 3.7708 1 0.0152 1 1.9118 1 0.0759 1 0.7653 1 0.0152 2 0.8749 2)
Average genome size in population (length): 95.333
Average program size in population (points): 96.333
Average percent parens in population: 0.010
Minimum age in population: 201.973190157331
Maximum age in population: 206.0443296886059
Average age in population: 204.0018721140775
Median age in population: 204.0284878051589
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.285
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 300406543
--- Timings ---
Current time: 1529616534364 milliseconds
Total Time:         561.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.3 seconds, 32.1%
Fitness Testing:    304.5 seconds, 54.2%
Report:              76.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_tan} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_mod} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction tagged_699} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float})
Best program: (float_swap float_tan float_add integer_dup_items integer_dup_items float_yank integer_mod in2 integer_yankdup integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 tagged_699 tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_yank float_dup float_shove float_dec integer_yankdup float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_rot float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_rot float_shove float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_dup float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec integer_pop float_shove float_dec integer_pop integer_sub float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2784.999544700002
Median total errors in population: 699.0608000000002
Error averages by case: (102.93845389999987 4.542 96.49317360000032 7.329 100.30679760000024 9.061 99.31392730000056 8.601 91.32922510000003 3.734 87.66232119999998 10.649 98.55310640000005 3.881 100.22106509999996 4.433 133.5762723 4.19 107.65218569999927 8.412 103.3182807000006 8.592 101.80339969999987 4.432 87.60881979999978 7.746 94.89847130000041 11.596 120.00883750000116 10.646 119.91798020000125 7.635 131.12168980000152 8.877 88.84440009999977 9.296 129.6922164999998 4.614 92.88048169999968 8.074 101.21134810000001 4.382 92.63433269999977 9.129 95.86999939999998 4.149 97.26753059999959 7.869 133.03422839999996 4.972)
Error minima by case: (5.0 1 0.0152 2 0.0084 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.994 1 12.1417 1 0.0607 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 1.299 7 0.4003 5 2.1335 1 0.0152 1 0.6154 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.693
Average program size in population (points): 96.693
Average percent parens in population: 0.010
Minimum age in population: 203.402952538449
Maximum age in population: 207.2725592500752
Average age in population: 205.3683609787368
Median age in population: 205.3887636480224
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.331
Error (vector) diversity:			 0.336
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 302799193
--- Timings ---
Current time: 1529616538385 milliseconds
Total Time:         565.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.5 seconds, 32.1%
Fitness Testing:    306.8 seconds, 54.2%
Report:              77.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_min float_tan float_shove integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_min integer_mod integer_mod integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_mult integer_mult integer_inc in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_dup_items float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod integer_mod float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2914.542764800002
Median total errors in population: 697.9392000000001
Error averages by case: (107.07234579999982 4.512 102.73481930000092 7.416 107.11031430000054 9.088 105.83515600000104 8.742 94.7003214999999 3.744 93.87842429999986 10.751 101.74942580000003 3.855 103.89366600000001 4.453 137.89574230000005 4.18 111.31443259999884 8.508 109.81671580000106 8.7 104.9538959999998 4.405 92.4246019999997 7.799 102.80857930000097 11.64 127.94244470000147 10.668 126.3102923000016 7.64 135.9558494000015 8.89 95.40593879999903 9.432 133.18682979999977 4.535 98.5538862999992 8.144 105.48866129999992 4.396 97.02593759999927 9.078 100.59339370000005 4.107 103.27808979999901 8.004 136.95600009999998 4.97)
Error minima by case: (3.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.0 0 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.8224 7 0.4003 5 4.9089 1 0.0759 1 0.3778 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 95.902
Average program size in population (points): 96.902
Average percent parens in population: 0.010
Minimum age in population: 204.4905086770269
Maximum age in population: 208.7312340726271
Average age in population: 206.6972152051428
Median age in population: 206.7599768931426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.301
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 305197293
--- Timings ---
Current time: 1529616542409 milliseconds
Total Time:         569.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.7 seconds, 32.1%
Fitness Testing:    309.0 seconds, 54.3%
Report:              77.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_min float_tan integer_dup_items integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_frominteger integer_mult integer_inc in2 float_add float_stackdepth float_mod float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_dup_times float_dec integer_flush float_dec integer_flush float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod integer_mod float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2436.607218800001
Median total errors in population: 694.0608000000002
Error averages by case: (90.04015719999994 4.318 79.93034919999992 7.224 84.22372299999991 9.061 82.72741999999994 8.525 76.27596710000009 3.519 77.05106550000006 10.633 84.76050640000003 3.598 86.01218880000003 4.23 121.47933360000002 3.912 95.70404989999953 8.384 86.58515140000013 8.518 88.16172329999992 4.223 70.85836910000022 7.589 82.58787599999985 11.5 108.88212240000111 10.475 108.03479960000121 7.292 117.14046240000123 8.709 75.64978310000028 9.319 116.95321329999982 4.384 77.90572260000022 8.015 87.50528100000002 4.199 79.21467290000001 8.958 84.80217540000002 3.889 80.99655050000001 7.785 120.1725551 4.693)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 28.9064 1 0.0759 1 0.0152 2 0.0 0 0.0017 1 0.0152 6 1.701 7 1.5997 5 1.1335 2 0.9241 1 8.7708 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 0.8749 2)
Average genome size in population (length): 95.441
Average program size in population (points): 96.441
Average percent parens in population: 0.010
Minimum age in population: 205.4905086770269
Maximum age in population: 210.2692109005057
Average age in population: 208.0327851559428
Median age in population: 208.0461325786497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.286
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 307584043
--- Timings ---
Current time: 1529616546427 milliseconds
Total Time:         573.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.9 seconds, 32.1%
Fitness Testing:    311.3 seconds, 54.3%
Report:              78.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items integer_dup_items integer_inc in2 integer_max float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub integer_dup_times integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2667.4058257000015
Median total errors in population: 694.0608000000002
Error averages by case: (98.9199791999998 4.388 89.62622020000032 7.288 92.52508350000016 9.147 92.32800440000041 8.651 87.33253189999992 3.516 86.49889139999993 10.768 93.63068799999996 3.67 96.97677419999991 4.263 126.08908369999988 3.929 105.11650059999891 8.497 95.92396890000046 8.61 97.25855679999985 4.255 81.53105079999978 7.687 92.20880630000038 11.675 118.05351630000145 10.624 116.84246510000146 7.455 125.67687640000158 8.844 85.75393439999961 9.441 125.6785285999998 4.384 86.5416922999996 8.066 97.31093789999987 4.177 88.00050399999961 9.093 93.55965629999996 3.914 90.78401409999958 7.906 128.25656039999987 4.733)
Error minima by case: (2.5975 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 0.8694 1 12.1695 1 0.0759 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 1.0455 7 0.0455 5 1.0455 1 0.0759 1 3.6763 1 0.0152 1 2.0 1 0.1138 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.239
Average program size in population (points): 96.239
Average percent parens in population: 0.010
Minimum age in population: 206.6393474321764
Maximum age in population: 211.6152782732452
Average age in population: 209.3410817881762
Median age in population: 209.3906130906923
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.294
Error (vector) diversity:			 0.302
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 309965793
--- Timings ---
Current time: 1529616550448 milliseconds
Total Time:         577.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.1 seconds, 32.1%
Fitness Testing:    313.6 seconds, 54.3%
Report:              78.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_540} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_flush})
Best program: (float_add in2 integer_max float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec integer_dup integer_pop float_shove float_dec float_dec float_dec integer_dup_times integer_pop float_dec float_shove float_dec float_dup float_shove float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_dec integer_flush float_dec float_dec tag_integer_540 integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_dec integer_pop float_shove float_dec float_dec float_shove float_dec float_dec print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2620.6508519000013
Median total errors in population: 697.9392000000001
Error averages by case: (94.63625149999989 4.4 89.2424504000001 7.34 92.91383030000003 9.086 91.9871619000003 8.611 81.25122859999999 3.627 81.1964024 10.686 91.49731960000004 3.7 92.15612450000003 4.321 126.9862606000001 4.011 102.75898679999905 8.442 95.8618753000004 8.57 95.13343829999992 4.314 81.96151429999983 7.758 91.9693859000003 11.601 117.03252270000118 10.591 115.76439170000133 7.501 125.1662384000012 8.959 84.85392239999973 9.342 122.15756299999985 4.446 86.83319069999972 8.084 92.2030708 4.277 87.1204540999999 9.134 88.83187020000001 3.941 90.16089119999964 7.904 125.55950630000005 4.769)
Error minima by case: (4.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 8.0329 1 0.0607 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 2.6399 7 0.4003 5 2.7299 1 0.003 1 7.7708 1 0.0152 1 0.0 0 0.0152 2 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 95.736
Average program size in population (points): 96.736
Average percent parens in population: 0.010
Minimum age in population: 207.6393474321764
Maximum age in population: 212.8254792287797
Average age in population: 210.668585528965
Median age in population: 210.6575249588526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.312
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 312359968
--- Timings ---
Current time: 1529616554531 milliseconds
Total Time:         581.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.4 seconds, 32.0%
Fitness Testing:    315.9 seconds, 54.3%
Report:              79.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_div} {:instruction integer_mod} {:instruction integer_inc} {:instruction in2} {:instruction integer_mod} {:instruction tag_integer_584} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_mod})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 float_div integer_mod integer_inc in2 integer_mod tag_integer_584 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec float_dec float_dec float_dup float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dup integer_flush float_dec float_dec float_shove float_dec float_dec integer_mod float_dec integer_flush float_shove float_dec integer_flush float_dec float_shove float_dec integer_mod integer_dec float_dec float_dec float_shove float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec integer_pop float_dec integer_pop float_dec float_dec integer_flush print_float float_mod)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2642.4728390000014
Median total errors in population: 694.0608000000002
Error averages by case: (96.28288089999987 4.298 89.96218150000067 7.147 92.97971160000046 8.993 92.5900215000008 8.455 83.49210509999992 3.463 84.29330189999996 10.766 91.96963649999998 3.636 93.38378279999996 4.174 124.79079490000002 3.901 104.48304299999876 8.318 96.298825500001 8.438 94.92652389999982 4.192 80.93048409999984 7.579 91.23314540000091 11.634 117.69374180000152 10.653 118.73995850000168 7.455 126.89565040000163 8.821 85.81098089999931 9.296 123.0245613999998 4.3 87.81768029999922 7.914 94.9613648999999 4.132 88.91418489999913 9.036 90.58963790000001 3.873 91.03997529999901 7.736 126.47466409999998 4.684)
Error minima by case: (7.9078 1 0.0152 2 0.0152 1 0.0152 1 0.0 0 1.0 1 0.0 0 1.006 1 30.0 1 0.0759 1 0.0152 1 0.0049 1 0.0152 1 0.2852 7 0.299 1 0.6195 1 4.7299 2 0.1277 1 0.9157 1 0.0152 1 1.0 1 0.8862 1 0.0 0 0.0152 2 0.1251 1)
Average genome size in population (length): 95.774
Average program size in population (points): 96.774
Average percent parens in population: 0.010
Minimum age in population: 208.6393474321764
Maximum age in population: 214.4041536134207
Average age in population: 212.0177020120303
Median age in population: 212.0703510601362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.286
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 314755818
--- Timings ---
Current time: 1529616558791 milliseconds
Total Time:         585.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.6 seconds, 32.0%
Fitness Testing:    318.3 seconds, 54.3%
Report:              79.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction in1} {:instruction float_swap} {:instruction float_max} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_min float_tan integer_dup_items integer_inc integer_swap integer_mod integer_yankdup in2 float_add integer_stackdepth float_min float_min in1 float_swap float_max float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_max float_dec integer_yankdup integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yank float_dec float_dec integer_flush float_dec float_dec integer_dec float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2904.7314597000022
Median total errors in population: 699.0608000000002
Error averages by case: (106.95339389999988 4.598 101.71292880000057 7.419 105.30678400000028 9.072 104.63661130000065 8.638 94.03975909999987 3.812 94.0113753999999 10.741 101.20198419999998 3.865 103.07371529999999 4.511 138.63122150000004 4.179 112.507419799999 8.487 108.56947480000073 8.622 103.82058689999981 4.466 91.1959221999997 7.815 100.67985370000072 11.597 126.1777205000012 10.681 126.66756970000138 7.711 137.51337920000145 9.046 94.51458339999942 9.404 134.43749149999988 4.626 98.21203229999938 8.091 104.97873689999987 4.449 98.83336249999941 9.241 99.69974449999994 4.138 102.4398587999993 7.979 136.73894950000005 4.989)
Error minima by case: (5.0 1 0.0152 1 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.1306 1 27.7976 1 0.5532 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.299 7 0.0172 5 4.8665 1 0.0152 1 14.2841 1 0.0152 1 1.0 1 1.0152 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 95.468
Average program size in population (points): 96.468
Average percent parens in population: 0.010
Minimum age in population: 211.064204772117
Maximum age in population: 215.6598123731435
Average age in population: 213.3964559160113
Median age in population: 213.4279076537215
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.317
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 317143943
--- Timings ---
Current time: 1529616562881 milliseconds
Total Time:         590.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.9 seconds, 32.0%
Fitness Testing:    320.6 seconds, 54.3%
Report:              80.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -16.05182364113494} {:instruction float_add} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.301363394366135} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_mod} {:instruction integer_mod} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction in2} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction -70} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (integer_inc integer_inc integer_dup_items -16.05182364113494 float_add integer_inc integer_dup_items -14.301363394366135 integer_dup_items -14.92010430989157 integer_mod integer_mod in2 float_add integer_stackdepth float_min float_min float_sin in1 in2 float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec integer_dup_times integer_flush float_dec integer_min float_dec -70 float_dec integer_yankdup integer_yankdup float_dec integer_yank float_dec float_dec integer_dup_times float_dec integer_flush float_dec integer_flush float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod integer_mod float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec integer_dec float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2684.9860647000005
Median total errors in population: 694.0608000000002
Error averages by case: (98.36313779999986 4.402 92.10663640000062 7.277 96.33574160000047 9.022 94.89707920000079 8.617 86.66852609999991 3.577 84.72716489999996 10.791 93.51121320000001 3.713 95.814594 4.28 129.0106981 3.951 105.11821899999894 8.434 98.83329970000095 8.61 96.49349779999987 4.319 80.73457329999992 7.638 92.40425970000082 11.59 118.7146224000013 10.613 118.96157700000148 7.457 127.48081850000139 8.864 84.95073749999948 9.305 125.61969129999983 4.41 90.02398879999954 8.043 97.60576379999993 4.226 88.62956729999945 9.09 92.57598989999997 3.934 92.86952849999928 7.865 127.73513889999997 4.772)
Error minima by case: (3.2143 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 25.9064 1 0.0965 1 0.0152 2 0.1847 1 0.0152 1 0.1486 6 2.299 7 1.4003 5 3.0455 1 0.5661 1 3.7708 1 0.0152 1 1.0 1 0.9241 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.954
Average program size in population (points): 96.954
Average percent parens in population: 0.010
Minimum age in population: 212.064204772117
Maximum age in population: 216.7542118907336
Average age in population: 214.7514808164919
Median age in population: 214.7883113298221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.295
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 319543593
--- Timings ---
Current time: 1529616566941 milliseconds
Total Time:         594.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.1 seconds, 32.0%
Fitness Testing:    322.8 seconds, 54.3%
Report:              81.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_mult} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_mod} {:instruction -14.92010430989157} {:instruction float_div} {:instruction float_sub} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add float_mult integer_inc float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod integer_mod -14.92010430989157 float_div float_sub tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_dup_times float_stackdepth integer_pop float_shove float_dec float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dup float_dec integer_flush float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_rot float_dec integer_dec float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod integer_mod float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2499.513144600002
Median total errors in population: 697.9392000000001
Error averages by case: (93.01098429999988 4.324 83.03347380000024 7.158 86.44640530000022 9.009 85.85618120000046 8.477 77.349055 3.496 79.42278669999997 10.637 87.4943143 3.656 87.42626129999998 4.18 120.11357910000002 3.907 97.01496179999936 8.37 89.77376630000039 8.475 90.75485069999988 4.238 75.02034670000005 7.624 85.37701130000035 11.583 111.92242090000096 10.558 111.69353530000112 7.448 121.52724280000116 8.723 78.72080810000006 9.232 120.75844239999988 4.361 80.48652419999979 7.95 88.110309 4.12 82.00085429999984 9.028 85.77482860000002 3.903 83.86634869999976 7.744 123.60785249999992 4.749)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.7896 1 0.0 0 1.006 1 28.9064 1 0.0759 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 3.701 7 0.4003 5 0.8665 1 0.0759 1 7.2292 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 2.8749 2)
Average genome size in population (length): 95.68
Average program size in population (points): 96.68
Average percent parens in population: 0.010
Minimum age in population: 213.5783214202836
Maximum age in population: 218.1547733103681
Average age in population: 216.0772525933245
Median age in population: 216.1235355989536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.3
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 321936468
--- Timings ---
Current time: 1529616570994 milliseconds
Total Time:         598.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.3 seconds, 32.0%
Fitness Testing:    325.1 seconds, 54.4%
Report:              81.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_dup_items} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_dup_items tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_mod float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3293.435092000002
Median total errors in population: 697.9392000000001
Error averages by case: (123.66646979999976 4.681 116.69532470000108 7.419 120.02215910000068 9.146 119.44425400000121 8.681 111.47683519999981 3.835 110.24429329999982 10.652 117.24222959999993 3.977 120.2429729 4.543 152.8793661 4.315 129.58801799999858 8.557 123.10172880000123 8.668 119.90483919999976 4.568 106.59269479999935 7.772 115.19231900000122 11.615 140.40967230000172 10.666 141.42753210000186 7.649 150.91655370000186 8.931 108.99114799999879 9.455 148.8237796999998 4.71 114.0181778999989 8.15 121.3410847999998 4.486 114.00776269999893 9.172 118.33334469999991 4.259 117.57584919999871 7.981 152.29468239999989 5.114)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0028 1 0.0152 6 0.299 7 0.5997 5 5.0455 1 0.1529 1 8.7708 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 96.144
Average program size in population (points): 97.144
Average percent parens in population: 0.010
Minimum age in population: 214.5783214202836
Maximum age in population: 219.3688909441002
Average age in population: 217.4586840989283
Median age in population: 217.4922379906196
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.303
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 324341193
--- Timings ---
Current time: 1529616575140 milliseconds
Total Time:         602.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.5 seconds, 32.0%
Fitness Testing:    327.5 seconds, 54.4%
Report:              82.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 32895.80239999998
Test mean error for best: 16.44790
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction float_tan} {:instruction integer_inc} {:instruction integer_max} {:instruction integer_max} {:instruction integer_mod} {:instruction -14.92010430989157} {:instruction in2} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_swap} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction integer_sub} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction -78} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float})
Best program: (float_min float_tan integer_dup_items integer_inc in2 float_tan integer_inc integer_max integer_max integer_mod -14.92010430989157 in2 integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_yank float_swap float_max tag_float_754 38.07590924596505 float_add in1 float_add integer_sub 38.939305753985195 float_inc integer_shove float_add in1 float_dec integer_swap integer_min float_shove float_dec float_dec float_dec integer_shove integer_stackdepth float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec integer_div float_dec float_dec float_dec integer_dup_times float_shove integer_min float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec float_dec integer_flush integer_sub float_dec float_dec integer_flush float_dec float_stackdepth float_dec integer_dup_items float_dec -78 float_dec integer_pop float_dec float_dec integer_flush print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2939.2998199000017
Median total errors in population: 698.5000000000002
Error averages by case: (107.47904859999991 4.63 103.34568460000064 7.399 107.31313810000039 9.107 106.21539800000082 8.685 96.17390280000004 3.78 97.83783309999991 10.683 102.66182559999997 3.884 105.50870969999993 4.472 138.98349330000002 4.205 113.09914269999886 8.495 110.35913580000096 8.642 105.8670819999999 4.479 93.6012045999997 7.751 104.1015461000007 11.597 128.02480910000148 10.597 126.79981700000155 7.57 135.1497159000017 8.913 96.68094129999949 9.418 135.05780909999982 4.685 98.84603609999951 8.093 107.29456439999996 4.43 97.91836439999953 9.12 101.40812259999997 4.173 104.11235909999931 7.955 137.66213589999998 5.035)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 1.5699 7 0.4003 5 4.8665 1 0.0881 1 8.7708 1 0.0152 1 0.0 0 0.7496 2 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 96.116
Average program size in population (points): 97.116
Average percent parens in population: 0.010
Minimum age in population: 216.2515990280318
Maximum age in population: 220.7964906575699
Average age in population: 218.7842972746191
Median age in population: 218.8308793066324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.303
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 326744968
--- Timings ---
Current time: 1529616579242 milliseconds
Total Time:         606.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.8 seconds, 32.0%
Fitness Testing:    329.7 seconds, 54.4%
Report:              82.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items -14.92010430989157 integer_dup_items -14.92010430989157 float_min integer_mod integer_mod integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_frominteger integer_mult integer_inc in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_dup_items float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_items integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod integer_mod float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2903.531943100002
Median total errors in population: 697.9392000000001
Error averages by case: (105.41572539999991 4.41 101.91736530000037 7.186 105.68187660000025 8.947 104.51074880000056 8.455 92.91123029999999 3.548 92.7572116 10.719 101.2712445 3.719 102.44140300000001 4.267 136.42448429999996 4.026 113.56621559999928 8.295 108.9739609000005 8.417 104.53006519999992 4.337 91.94969289999985 7.582 103.52413600000042 11.657 129.2043182000011 10.661 128.4100996000011 7.562 137.5413690000012 8.894 96.93281279999961 9.19 132.32689719999982 4.487 98.84228839999973 7.872 103.13756399999998 4.234 99.51595719999973 9.122 98.84268700000004 3.994 102.75597569999967 7.783 135.9596135999999 4.823)
Error minima by case: (8.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 1.006 1 10.1154 1 0.0607 1 0.0152 2 0.3213 1 0.0099 1 0.0152 6 0.701 7 0.4003 5 0.8665 1 0.0881 1 10.2292 1 0.0152 1 1.0 1 0.1138 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.232
Average program size in population (points): 96.232
Average percent parens in population: 0.010
Minimum age in population: 217.7480345892383
Maximum age in population: 222.0369118883345
Average age in population: 220.1365726836393
Median age in population: 220.1956137491552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.307
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 329126343
--- Timings ---
Current time: 1529616583288 milliseconds
Total Time:         610.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.0 seconds, 31.9%
Fitness Testing:    332.0 seconds, 54.4%
Report:              83.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_dup} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_dup tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec float_shove float_dec float_dec float_dec float_yank integer_flush float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2935.429372700002
Median total errors in population: 697.9392000000001
Error averages by case: (108.34173889999992 4.342 102.01579080000045 7.331 105.05847730000036 9.123 104.66943590000054 8.644 95.95677909999989 3.543 95.80222409999998 10.829 103.05222030000009 3.704 105.39091240000005 4.244 138.118591 3.944 116.54029659999894 8.485 108.4394870000006 8.617 106.93147279999997 4.278 91.6512664999999 7.696 101.68290240000057 11.673 127.92040910000148 10.639 128.81190440000168 7.525 138.93568440000163 8.786 94.26013309999942 9.384 135.60376909999982 4.353 99.73744829999949 8.101 107.32964989999998 4.202 100.34623329999948 9.016 102.82179360000006 3.881 102.90601829999947 7.917 138.08173410000003 4.766)
Error minima by case: (4.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 1.0 1 1.0 1 36.0 1 0.0607 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 2.701 7 0.5997 5 4.8665 1 0.0759 1 4.473 1 0.0152 1 1.0 1 0.0152 2 0.9428 1 0.0152 2 12.345 2)
Average genome size in population (length): 95.124
Average program size in population (points): 96.124
Average percent parens in population: 0.010
Minimum age in population: 218.7480345892383
Maximum age in population: 223.3928921909336
Average age in population: 221.4523193379025
Median age in population: 221.4998579049525
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.293
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 331505068
--- Timings ---
Current time: 1529616587331 milliseconds
Total Time:         614.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.2 seconds, 31.9%
Fitness Testing:    334.3 seconds, 54.4%
Report:              83.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction in2} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_swap} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_279} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_sin})
Best program: (float_min float_shove integer_dup_items integer_inc integer_swap integer_mod 5 integer_max integer_dup_items in2 float_min float_sin in1 float_stackdepth integer_dup float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_swap float_add in1 float_dec float_stackdepth integer_swap float_shove float_dec float_dec integer_shove float_dup integer_dup_times float_dec float_dec float_dec float_dec float_dup float_shove float_dec integer_dup_times float_yank integer_flush float_dec integer_pop integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_min float_dec float_dec integer_flush float_dec print_integer tag_integer_279 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_rot float_dec float_dec float_yankdup float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_sin)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2841.803105200002
Median total errors in population: 697.9392000000001
Error averages by case: (106.78198639999987 4.496 97.35351940000075 7.28 102.35255870000066 9.084 100.22089830000111 8.549 92.07235519999988 3.662 90.53695689999992 10.766 102.34673049999995 3.791 101.65140059999993 4.348 134.8052555 4.113 111.80563309999852 8.407 104.11166340000122 8.556 105.84633729999986 4.398 87.3526153999998 7.66 96.6519077000008 11.585 122.43275740000148 10.608 123.61879050000177 7.439 134.23018540000177 8.837 90.24519749999935 9.285 132.74751709999978 4.501 94.8350347999992 8.035 102.35869109999989 4.307 96.06058069999914 9.057 101.31236989999994 4.075 98.33737779999905 7.841 136.16478459999993 4.89)
Error minima by case: (2.4056 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 3.4744 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.701 7 0.4003 5 0.4717 1 0.0485 1 8.7837 1 0.0152 1 2.9118 1 0.1138 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 94.838
Average program size in population (points): 95.838
Average percent parens in population: 0.010
Minimum age in population: 219.7480345892383
Maximum age in population: 224.8248819295637
Average age in population: 222.813616456772
Median age in population: 222.8202920004837
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.284
Error (vector) diversity:			 0.288
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 333876443
--- Timings ---
Current time: 1529616591426 milliseconds
Total Time:         618.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.4 seconds, 31.9%
Fitness Testing:    336.6 seconds, 54.4%
Report:              84.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_965})
Best program: (float_sin integer_dup_items integer_dup_items integer_inc in2 integer_max float_add float_mult float_min float_sin in1 float_stackdepth float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove integer_max float_dec float_dec integer_dup integer_max float_dec float_dec integer_dup_times integer_pop float_dec integer_yank integer_flush float_dec integer_yankdup integer_yankdup float_dup float_dec integer_flush float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_dec float_dec float_dec integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dec integer_pop float_dec float_dec integer_flush print_float float_rot integer_shove integer_dup float_dup_items tag_float_965)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2648.2583571000014
Median total errors in population: 694.0608000000002
Error averages by case: (96.04319869999983 4.18 88.5989508000008 7.168 92.31978440000056 8.953 91.23375180000085 8.486 82.60211499999993 3.349 84.41176899999991 10.691 91.41760249999999 3.481 91.72304229999993 4.062 126.06717339999999 3.735 102.49661349999867 8.316 95.87405360000105 8.463 94.6565506999998 4.068 85.53080609999952 7.516 96.35542700000099 11.632 122.07786000000148 10.637 121.67061000000155 7.51 127.84088810000151 8.85 89.03600609999908 9.163 123.02605959999981 4.191 86.40153689999923 7.892 92.54901469999996 3.995 88.96261409999921 9.059 90.60536709999998 3.735 89.45364809999907 7.753 125.85991359999998 4.559)
Error minima by case: (9.0 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 27.9064 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.701 8 0.5997 5 1.164 1 0.0759 1 10.7708 1 0.0152 1 0.0 0 0.0759 1 1.0 1 0.0152 2 1.1251 2)
Average genome size in population (length): 94.467
Average program size in population (points): 95.467
Average percent parens in population: 0.011
Minimum age in population: 221.8279910564511
Maximum age in population: 226.2147660097451
Average age in population: 224.1597006735278
Median age in population: 224.2261953364917
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.285
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 336238643
--- Timings ---
Current time: 1529616595460 milliseconds
Total Time:         622.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.6 seconds, 31.9%
Fitness Testing:    338.9 seconds, 54.4%
Report:              85.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction tagged_228} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction in1} {:instruction float_swap} {:instruction float_max} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_max} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction print_float})
Best program: (float_min float_tan integer_dup_items integer_inc tagged_228 float_min float_tan integer_dup_items integer_inc integer_swap integer_mod integer_yankdup in2 float_add integer_stackdepth float_min float_min in1 float_swap float_max float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_max float_dec integer_yankdup integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_yank float_dec float_dec integer_flush float_dec float_dec integer_dec float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush integer_flush print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2819.6579787000014
Median total errors in population: 697.9392000000001
Error averages by case: (104.80445879999985 4.518 96.9429633000007 7.335 100.05519580000056 9.095 99.62295990000095 8.632 88.70360239999998 3.616 92.43976829999983 10.698 98.32621460000001 3.785 98.44284920000001 4.314 134.2006103 4.071 109.82118649999862 8.47 103.37081390000111 8.611 101.71789219999987 4.369 89.9233694999998 7.714 99.41986770000089 11.621 124.55841820000164 10.644 123.6691737000017 7.513 131.95679020000173 8.85 94.7105066999993 9.368 131.95556499999978 4.572 93.75792029999931 8.069 99.62106119999994 4.283 95.06558739999922 9.113 98.06686989999997 4.051 97.8490806999992 7.9 134.543253 4.9)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 1 0.0 0 0.0 0 0.0 0 0.006 1 28.9064 1 0.0759 1 0.0152 2 0.0 0 0.0015 1 0.1486 7 0.701 7 0.4003 5 1.8665 1 0.9363 1 5.7708 1 0.0152 1 0.0 0 1.1138 1 0.0 0 0.0152 1 2.8749 2)
Average genome size in population (length): 94.766
Average program size in population (points): 95.766
Average percent parens in population: 0.010
Minimum age in population: 222.9880607499156
Maximum age in population: 227.5228982968302
Average age in population: 225.4924536395102
Median age in population: 225.5300409855615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.313
Error (vector) diversity:			 0.32
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 338608268
--- Timings ---
Current time: 1529616599519 milliseconds
Total Time:         626.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.9 seconds, 31.9%
Fitness Testing:    341.2 seconds, 54.4%
Report:              85.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction integer_swap} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_dup})
Best program: (float_sin integer_dup_items integer_dup_items integer_inc in2 integer_max float_add float_mult integer_swap float_sin in1 float_stackdepth float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_rot float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dup float_dec integer_flush float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_dec float_dec float_dec float_dup_times float_dec float_dup_times float_dec integer_mod in2 float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub integer_shove integer_dup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2494.2267936000003
Median total errors in population: 694.0608000000002
Error averages by case: (93.37870799999979 4.338 84.39112440000036 7.248 88.64871620000027 9.032 87.26067130000065 8.544 77.82602829999988 3.5 78.22317059999988 10.727 88.03549169999995 3.656 86.88948719999998 4.223 124.35056759999999 3.963 95.95867409999873 8.403 91.23053790000075 8.531 91.36430009999978 4.238 75.46711599999975 7.627 85.13400190000061 11.555 110.16385990000138 10.525 106.21112340000143 7.398 116.17035270000156 8.77 77.9031565999997 9.356 120.84158939999976 4.345 78.9488004999997 7.999 87.83295689999989 4.185 78.35973789999964 9.02 86.91982769999994 3.904 85.50998139999935 7.833 123.50181189999998 4.785)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0738 1 1.0 1 0.006 1 13.1695 1 0.0607 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 1.701 7 0.5369 5 2.9819 1 0.0485 1 18.2292 1 0.0152 1 0.0 0 0.1138 1 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 94.864
Average program size in population (points): 95.864
Average percent parens in population: 0.010
Minimum age in population: 224.0350308595546
Maximum age in population: 229.372133980347
Average age in population: 226.8991626093857
Median age in population: 226.961147986054
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.313
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 340980093
--- Timings ---
Current time: 1529616603624 milliseconds
Total Time:         630.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.1 seconds, 31.9%
Fitness Testing:    343.4 seconds, 54.4%
Report:              86.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_min} {:instruction float_mod} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_min} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_min float_min float_mod integer_dup_items integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_min integer_mod float_dec integer_inc integer_dup_items integer_dup_items -14.92010430989157 float_frominteger integer_mult integer_inc in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_dup_items float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec float_frominteger integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec integer_flush float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_shove float_dec integer_flush float_dec integer_rot float_dec integer_mod integer_mod float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec integer_flush float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2558.8115915000026
Median total errors in population: 697.9392000000001
Error averages by case: (93.11559679999992 4.519 88.43862090000015 7.286 92.47536930000028 9.088 91.46011720000035 8.574 80.3694604 3.689 80.13189800000005 10.729 87.25956240000006 3.802 89.77685310000005 4.4 123.12814830000009 4.075 100.45615249999948 8.439 95.54158880000044 8.601 90.42325569999997 4.371 78.0898379 7.647 87.19054890000012 11.567 112.73470360000088 10.575 111.08259010000087 7.483 123.11327800000106 8.838 79.11774960000011 9.282 120.96081299999987 4.584 84.80931689999991 8.056 90.28413200000008 4.333 84.44566599999985 9.114 86.02324320000008 4.051 89.25302729999981 7.861 123.23406160000003 4.932)
Error minima by case: (3.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.1345 1 0.0 0 0.0 1 14.0329 1 0.0607 1 0.0152 1 0.0 0 0.0152 1 0.1486 7 0.701 7 0.5997 5 2.8665 1 0.0911 1 8.7708 1 0.0152 1 1.0 1 0.8862 2 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 95.207
Average program size in population (points): 96.207
Average percent parens in population: 0.010
Minimum age in population: 225.6067411075516
Maximum age in population: 230.5791305416944
Average age in population: 228.2165589287653
Median age in population: 228.2839130816359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.302
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 343360618
--- Timings ---
Current time: 1529616607739 milliseconds
Total Time:         634.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.3 seconds, 31.9%
Fitness Testing:    345.7 seconds, 54.5%
Report:              86.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction integer_swap} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_dup})
Best program: (float_sin integer_dup_items integer_dup_items integer_inc in2 integer_max float_add float_mult integer_swap float_sin in1 float_stackdepth float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_rot float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dup float_dec integer_flush float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_dec float_dec float_dec float_dup_times float_dec float_dup_times float_dec integer_mod in2 float_dec float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec float_shove float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub integer_shove integer_dup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2980.345393000001
Median total errors in population: 697.9392000000001
Error averages by case: (112.1729623999998 4.591 102.77124210000052 7.449 108.01508950000074 9.149 105.58711560000064 8.76 98.60738509999989 3.723 95.51149009999986 10.823 107.46688020000002 3.852 107.01787729999998 4.433 138.3675481 4.187 116.34130709999872 8.547 110.36486760000106 8.721 110.28423569999978 4.479 94.68363989999978 7.852 103.61951010000087 11.599 129.7507284000015 10.615 130.81208460000158 7.66 137.8037529000015 8.984 97.43947889999937 9.456 138.38677809999973 4.652 100.21680949999948 8.159 105.7022887999999 4.381 99.57075049999952 9.122 106.47481989999999 4.14 103.55947049999939 8.017 141.48228009999988 4.984)
Error minima by case: (3.2847 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 9.0329 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 0.299 7 0.0455 5 1.0455 1 0.0152 1 4.7535 1 0.0152 1 0.0 0 0.0759 2 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 94.778
Average program size in population (points): 95.778
Average percent parens in population: 0.010
Minimum age in population: 227.3351987046539
Maximum age in population: 231.723807623653
Average age in population: 229.573805543046
Median age in population: 229.624891440741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.318
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 345730468
--- Timings ---
Current time: 1529616611819 milliseconds
Total Time:         639.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.6 seconds, 31.9%
Fitness Testing:    348.0 seconds, 54.5%
Report:              87.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_max} {:instruction tag_float_754} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction integer_sub} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items integer_dup_items integer_yankdup in2 float_add integer_stackdepth float_min float_max tag_float_754 float_stackdepth float_max tag_float_754 38.07590924596505 float_add in1 float_add float_max integer_sub 38.939305753985195 float_inc integer_shove float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_div integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger print_integer float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_div integer_dup_items float_dec float_dec integer_flush float_dec float_yank tag_integer_238 float_dec float_dec float_dec float_shove float_dec float_dec integer_rot print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2797.686916100002
Median total errors in population: 705.9392000000001
Error averages by case: (103.54307099999981 4.587 96.6703800000007 7.414 103.30294120000056 9.051 99.69920190000074 8.652 89.70424559999987 3.782 87.78842549999985 10.727 97.69031560000002 3.884 98.63215529999998 4.46 134.0960098000001 4.211 107.73202489999909 8.476 104.47717360000082 8.592 100.76962749999979 4.461 88.52529919999982 7.834 97.20217070000074 11.585 122.69852870000112 10.624 123.43126200000133 7.751 131.0995405000014 8.955 91.24525179999937 9.301 129.76437319999982 4.6 93.72123009999947 8.087 99.92112469999988 4.422 91.26385119999952 9.114 96.60121739999997 4.123 97.18058919999933 7.944 133.25190549999996 5.038)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 27.1688 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.299 7 0.4003 5 3.0455 1 0.0759 1 9.2292 1 0.0152 1 1.0 1 0.8862 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 95.034
Average program size in population (points): 96.034
Average percent parens in population: 0.010
Minimum age in population: 228.4552379763996
Maximum age in population: 232.7155220528076
Average age in population: 230.9210323594753
Median age in population: 230.9845946129668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.32
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 348107093
--- Timings ---
Current time: 1529616615829 milliseconds
Total Time:         643.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.8 seconds, 31.8%
Fitness Testing:    350.2 seconds, 54.5%
Report:              87.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction in2} {:instruction float_mod} {:instruction float_swap} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tagged_941} {:instruction 38.07590924596505} {:instruction float_add} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction integer_sub} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_min float_tan integer_dup_items integer_inc integer_swap integer_mod 5 integer_max integer_dup_items in2 float_mod float_swap float_sin in1 float_stackdepth float_max tagged_941 38.07590924596505 float_add integer_dec float_add float_max integer_sub 38.939305753985195 float_inc integer_shove float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger print_integer float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_div integer_dup_items float_dec float_dec integer_flush float_dec float_yank tag_integer_238 float_dec float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2488.0197942000023
Median total errors in population: 694.0608000000002
Error averages by case: (90.00479529999984 4.444 84.80852230000022 7.187 88.90712740000019 8.958 87.70158630000029 8.489 77.17216759999991 3.571 75.94514219999996 10.69 85.35650250000003 3.773 86.764938 4.274 122.68166340000009 4.001 97.96690129999952 8.297 91.6027103000004 8.44 87.97242879999988 4.34 74.18546980000012 7.526 84.53985640000015 11.643 110.82274260000113 10.629 110.40976870000121 7.489 120.78191010000123 8.846 77.9738646000001 9.212 116.18030399999985 4.467 82.24079489999994 7.923 88.46561429999993 4.222 81.81952679999999 9.12 83.43296159999997 3.986 85.7843507999998 7.785 120.33414419999998 4.852)
Error minima by case: (0.1506 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 25.9015 1 0.3254 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 0.299 7 0.3113 5 6.8665 1 0.003 1 5.5773 1 0.0152 1 0.0 0 0.1138 2 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 95.351
Average program size in population (points): 96.351
Average percent parens in population: 0.010
Minimum age in population: 229.7295765358615
Maximum age in population: 234.2887252406204
Average age in population: 232.2418220265281
Median age in population: 232.2782916047515
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.311
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 350491368
--- Timings ---
Current time: 1529616619847 milliseconds
Total Time:         647.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.0 seconds, 31.8%
Fitness Testing:    352.5 seconds, 54.5%
Report:              88.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_yankdup integer_flush integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_mod float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2648.975372100001
Median total errors in population: 705.0608000000002
Error averages by case: (96.69967169999987 4.545 89.81104790000043 7.319 94.18268660000032 9.031 92.56597450000056 8.566 84.95876829999989 3.677 84.84419559999989 10.622 90.39282999999999 3.853 95.08392489999997 4.375 126.7175051 4.111 102.33018949999902 8.421 96.44186910000093 8.564 92.97934639999981 4.412 83.04970749999991 7.701 93.10238690000074 11.639 118.92478860000143 10.591 119.28200450000165 7.582 126.09872880000151 8.923 85.67361889999962 9.346 124.43635949999977 4.597 87.33035809999959 8.087 94.24934609999993 4.323 87.26237759999967 9.053 89.39752239999997 4.131 90.63226819999952 7.835 126.27589539999995 4.948)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 11.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 2.299 7 0.5997 5 3.836 1 0.3627 1 16.7699 1 0.0152 1 0.0 0 0.2504 1 1.0 1 0.0152 2 0.8749 2)
Average genome size in population (length): 95.173
Average program size in population (points): 96.173
Average percent parens in population: 0.010
Minimum age in population: 231.1351395665299
Maximum age in population: 235.6702809569609
Average age in population: 233.6277124845447
Median age in population: 233.670225603345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.3
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 352871068
--- Timings ---
Current time: 1529616623821 milliseconds
Total Time:         651.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.2 seconds, 31.8%
Fitness Testing:    354.8 seconds, 54.5%
Report:              88.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 33035.893599999974
Test mean error for best: 16.51795
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_min} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_inc} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_dup})
Best program: (float_frominteger integer_dup_items -14.92010430989157 float_min integer_dup_items -14.92010430989157 float_tan integer_dup_items integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_inc in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 integer_inc float_stackdepth integer_pop float_shove float_dec float_dec float_dec float_dec integer_shove float_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_rot float_shove float_dec integer_yankdup integer_flush float_dec integer_dup float_dup float_dec integer_max float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec integer_dec float_dec float_dec float_dup_times float_dec float_dup_times float_dec integer_mod in2 float_dec float_dec integer_div float_dec float_stackdepth integer_dup_items float_dec float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub integer_shove integer_dup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3040.9544776000025
Median total errors in population: 697.9392000000001
Error averages by case: (110.56240159999979 4.514 107.30588350000083 7.296 111.63153400000053 8.979 109.90777710000094 8.505 98.36137009999989 3.695 97.84723079999988 10.731 106.01382249999999 3.802 108.123981 4.396 140.82255210000002 4.098 119.0236497999987 8.365 114.49763030000119 8.486 108.45975979999984 4.378 99.64999239999942 7.65 109.50125770000108 11.692 134.98157750000172 10.729 134.68989890000177 7.694 142.16498620000166 8.962 103.06645209999898 9.278 138.29746509999984 4.554 104.08424949999906 7.984 109.20250739999994 4.353 103.69119539999917 9.151 105.11909179999994 4.086 108.06239599999894 7.831 139.77881499999992 4.898)
Error minima by case: (3.5944 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.9192 1 0.006 1 26.661 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.2802 7 2.701 7 0.4003 5 2.8665 2 0.0881 1 5.2292 1 0.0152 1 0.0 0 0.016 1 1.0 1 0.0152 2 0.8749 2)
Average genome size in population (length): 94.797
Average program size in population (points): 95.797
Average percent parens in population: 0.011
Minimum age in population: 232.1351395665299
Maximum age in population: 236.9606236331275
Average age in population: 235.0026861626736
Median age in population: 235.0551400765144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.32
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 355241343
--- Timings ---
Current time: 1529616627919 milliseconds
Total Time:         655.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.4 seconds, 31.8%
Fitness Testing:    357.1 seconds, 54.5%
Report:              89.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction float_dup_times} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_swap} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_266} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_sin})
Best program: (float_add integer_dup_items float_add integer_shove integer_dup_items -14.92010430989157 float_tan integer_mod float_dup_times in2 float_add integer_stackdepth float_tan float_sin in1 float_stackdepth float_dec float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_swap float_add in1 float_dec float_stackdepth integer_swap float_shove float_dec float_dec integer_shove float_dup integer_dup_times float_dec float_dec float_dec float_dec float_dup float_shove float_dec integer_dup_times float_yank integer_flush float_dec integer_pop integer_yankdup float_dec integer_yank float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec print_integer tag_integer_266 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_pop integer_rot float_dec float_dec float_yankdup float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_sin)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2945.1697564
Median total errors in population: 694.0608000000002
Error averages by case: (108.89619989999981 4.369 100.91889540000066 7.336 103.8529840000004 9.119 103.60927680000094 8.605 95.3954424999999 3.529 97.56261189999984 10.829 104.15979869999997 3.681 105.20804009999986 4.234 138.27342249999992 3.961 115.90000849999883 8.514 107.282234400001 8.609 107.71819119999982 4.226 94.27514419999945 7.734 104.58684900000094 11.711 129.56464200000136 10.683 130.04019840000146 7.559 138.33921650000167 8.935 98.38440829999915 9.405 135.7932569999998 4.368 98.75689049999917 8.108 106.80680319999992 4.209 100.6095126999992 9.139 103.47709379999995 3.923 101.88953719999907 7.911 138.39309769999994 4.779)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.994 1 11.1695 1 0.0808 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 1.0481 7 0.4003 5 1.1335 1 0.0152 1 15.5746 1 0.0152 1 0.9516 1 0.9241 1 0.0 0 0.0152 2 3.1251 2)
Average genome size in population (length): 94.356
Average program size in population (points): 95.356
Average percent parens in population: 0.011
Minimum age in population: 233.5497216012406
Maximum age in population: 238.3017502552225
Average age in population: 236.347352365634
Median age in population: 236.3869837933335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.289
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 357600543
--- Timings ---
Current time: 1529616631969 milliseconds
Total Time:         659.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.7 seconds, 31.8%
Fitness Testing:    359.3 seconds, 54.5%
Report:              90.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_stackdepth} {:instruction float_max} {:instruction float_add} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction float_tan} {:instruction integer_dup_items} {:instruction in2} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dup} {:instruction tag_integer_850} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction 84} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items float_stackdepth float_max float_add integer_dup_items -14.92010430989157 integer_mod tag_integer_442 float_tan integer_dup_items in2 float_sub integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_shove float_dec float_dec float_dec integer_dup_times float_yank float_dec print_integer float_dec float_dup tag_integer_850 float_dec float_yank integer_dup_items float_dec integer_add integer_yankdup float_dec integer_flush float_dec integer_flush integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup 84 float_dec integer_flush float_dec float_yank float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_add integer_flush float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec float_shove float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2467.5132871000023
Median total errors in population: 697.9392000000001
Error averages by case: (90.86669349999993 4.504 82.04573490000006 7.286 86.03504569999998 9.005 85.06114930000014 8.562 77.23971140000006 3.654 80.92999740000002 10.662 83.93969150000014 3.792 86.93309460000002 4.338 122.88821560000002 4.115 94.22797729999971 8.395 89.09690050000017 8.521 87.15622239999989 4.368 74.74654260000024 7.606 85.11687530000006 11.498 109.7593539000006 10.549 109.32163330000068 7.5 118.46463750000079 8.836 76.80116240000024 9.261 118.82959769999978 4.549 78.91791990000016 7.977 87.8247744 4.33 79.60137560000004 9.054 83.25440780000007 4.079 82.83057729999993 7.851 120.43799530000003 4.894)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 1 0.006 1 28.9064 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 1.1624 7 0.4003 5 0.8665 1 0.0881 1 1.5987 1 0.0152 1 0.0 0 0.0759 1 0.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 94.224
Average program size in population (points): 95.224
Average percent parens in population: 0.011
Minimum age in population: 235.2036611066856
Maximum age in population: 239.8023165828085
Average age in population: 237.7096996095004
Median age in population: 237.7626631777129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.305
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 359956493
--- Timings ---
Current time: 1529616636022 milliseconds
Total Time:         663.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.9 seconds, 31.8%
Fitness Testing:    361.6 seconds, 54.5%
Report:              90.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -83.70438466763531} {:instruction float_add} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction -14.92010430989157} {:instruction integer_dec} {:instruction float_min} {:instruction integer_div} {:instruction float_mult} {:instruction integer_inc} {:instruction float_tan} {:instruction integer_mod} {:instruction float_flush} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction integer_swap} {:instruction in2} {:instruction float_max} {:instruction tag_float_674} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_mod} {:instruction integer_sub} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction print_integer} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yank} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (-83.70438466763531 float_add float_cos float_dup_items integer_div integer_mod -14.92010430989157 integer_dec float_min integer_div float_mult integer_inc float_tan integer_mod float_flush integer_dup_items -14.92010430989157 integer_inc integer_swap in2 float_max tag_float_674 38.07590924596505 float_add in1 float_add float_mod integer_sub 38.939305753985195 float_inc integer_shove float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times integer_dup float_dec float_shove float_dec integer_yankdup integer_flush integer_yankdup integer_yankdup float_dec integer_rot float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_dec integer_flush float_dec integer_yankdup print_integer float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_div print_integer float_dec float_dec integer_flush float_dec float_yank tag_integer_238 float_dec float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2740.863824000002
Median total errors in population: 693.0304000000001
Error averages by case: (101.50069609999989 4.549 92.75278930000036 7.302 97.06887160000042 9.066 95.59147960000058 8.608 88.3760651 3.722 89.18893890000003 10.829 95.75587930000005 3.839 97.98309280000001 4.419 131.2902781 4.126 107.13713489999927 8.491 100.45711910000075 8.613 99.09490659999993 4.448 83.97811530000001 7.671 94.83885750000057 11.634 121.04197360000113 10.658 122.03309260000128 7.468 129.6779069000014 8.848 88.38738649999979 9.36 127.04499689999987 4.565 90.87015689999967 8.071 99.78288520000001 4.372 91.47698949999956 9.133 94.64217319999997 4.103 93.75501259999955 7.913 130.4320259 4.897)
Error minima by case: (4.0 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 29.4156 1 0.0759 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 1.701 7 0.4003 5 3.0455 1 0.0759 1 4.6875 1 0.0152 1 1.0 1 0.0152 1 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 93.709
Average program size in population (points): 94.709
Average percent parens in population: 0.011
Minimum age in population: 236.6279338667121
Maximum age in population: 240.9861976882806
Average age in population: 239.094093741883
Median age in population: 239.1367211936357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.304
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 362299468
--- Timings ---
Current time: 1529616640046 milliseconds
Total Time:         667.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.1 seconds, 31.8%
Fitness Testing:    363.9 seconds, 54.5%
Report:              91.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_pop} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_flush})
Best program: (float_dup -14.92010430989157 integer_inc float_add float_inc float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 integer_dup_items -14.92010430989157 float_frominteger integer_mult float_pop in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_dup_items float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec integer_yankdup integer_flush float_dec integer_stackdepth integer_yankdup float_dec float_dec float_dec integer_dup_times integer_shove float_dec float_dec float_dec integer_flush float_dec integer_rot float_dec integer_mod float_dup float_dec float_dec integer_flush float_dec integer_pop float_dec integer_flush float_dec float_dec float_shove float_dec float_dec float_dec print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3157.1596095000004
Median total errors in population: 697.9392000000001
Error averages by case: (117.55336289999977 4.639 110.97590580000062 7.385 115.25876700000043 9.047 113.85338340000098 8.599 103.1272690999999 3.796 105.59909449999992 10.702 111.83328320000005 3.927 111.9014124 4.48 144.43222090000003 4.271 122.62003669999874 8.432 117.79122010000114 8.609 115.15067609999979 4.57 103.36708929999925 7.816 113.23807410000114 11.605 138.86425820000167 10.691 137.2225639000018 7.73 147.43252010000182 9.012 104.56083209999892 9.357 144.0647515999998 4.727 108.294951799999 8.112 113.35913109999998 4.456 108.80191979999903 9.168 110.89250980000001 4.218 111.82255079999895 7.938 146.7948248 5.06)
Error minima by case: (0.3904 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.0152 6 0.701 7 0.5997 5 3.8665 1 0.0152 1 7.7861 1 0.0152 1 0.0 0 0.0216 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 93.165
Average program size in population (points): 94.165
Average percent parens in population: 0.011
Minimum age in population: 237.6279338667121
Maximum age in population: 242.4311631283548
Average age in population: 240.4004377490436
Median age in population: 240.4359531840788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.309
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 364629018
--- Timings ---
Current time: 1529616644065 milliseconds
Total Time:         671.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.3 seconds, 31.8%
Fitness Testing:    366.1 seconds, 54.5%
Report:              91.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction -14.92010430989157} {:instruction integer_inc} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (float_dup -14.92010430989157 integer_inc float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_mod tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_stackdepth integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_div print_float integer_sub float_mod integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2848.9096975000016
Median total errors in population: 697.9392000000001
Error averages by case: (102.41761819999984 4.31 100.11566120000087 7.299 103.78335280000054 8.988 102.98529470000103 8.528 90.41767599999991 3.49 92.15495849999992 10.776 97.50346799999997 3.646 99.3380681 4.214 134.14162280000002 3.909 112.37457049999867 8.342 106.89339110000112 8.509 100.44180719999987 4.236 92.06833479999942 7.606 101.83513690000106 11.663 127.0358447000015 10.73 126.17060620000163 7.642 136.3594236000017 8.962 94.32825499999913 9.268 128.3226700999998 4.329 97.87657209999911 7.963 101.28576259999987 4.155 97.74032389999908 9.14 96.41526159999998 3.867 100.87513349999875 7.85 131.8898833999999 4.717)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.9192 1 0.994 1 10.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 0.7926 7 0.4003 5 4.0455 2 1.1728 1 2.2292 1 0.0152 1 1.0 1 0.1138 1 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 92.717
Average program size in population (points): 93.717
Average percent parens in population: 0.011
Minimum age in population: 238.6279338667121
Maximum age in population: 243.7984153106577
Average age in population: 241.7847055999599
Median age in population: 241.8438084480979
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.318
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 366947243
--- Timings ---
Current time: 1529616648122 milliseconds
Total Time:         675.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.5 seconds, 31.8%
Fitness Testing:    368.4 seconds, 54.6%
Report:              92.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_swap} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items float_add float_max float_swap -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_swap float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec float_frominteger float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_mult float_dec integer_flush float_dec float_shove float_dec integer_min float_frominteger float_dec float_dec integer_flush float_dec in2 float_dec integer_dup_items float_dec float_shove float_dec float_dup_items float_dec float_dec print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2659.3148858000022
Median total errors in population: 694.0608000000002
Error averages by case: (97.29263369999988 4.443 91.57456370000037 7.287 95.11677660000022 9.037 94.49623700000056 8.578 83.40888 3.568 85.23133599999997 10.787 91.4862119 3.757 92.96471249999999 4.294 125.51054979999996 4.018 104.1347460999991 8.434 98.4359424000007 8.585 94.77779179999983 4.367 82.31191159999979 7.647 92.90151040000048 11.626 118.97779530000095 10.621 116.85025440000102 7.462 126.97043310000106 8.866 84.97540159999959 9.301 124.57508739999983 4.447 88.08595349999949 8.023 94.74971379999995 4.244 88.74770219999958 9.105 91.12501819999996 4.002 92.37055329999941 7.856 127.08516949999996 4.803)
Error minima by case: (0.3498 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.7088 1 0.0 0 0.006 1 23.9064 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 3.701 7 0.4003 5 6.8665 2 0.2258 1 0.2139 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 2.1251 2)
Average genome size in population (length): 92.985
Average program size in population (points): 93.985
Average percent parens in population: 0.011
Minimum age in population: 240.5105767565879
Maximum age in population: 245.1339743927778
Average age in population: 243.0830968584084
Median age in population: 243.1551619351022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.308
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 369272293
--- Timings ---
Current time: 1529616652130 milliseconds
Total Time:         679.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.7 seconds, 31.8%
Fitness Testing:    370.6 seconds, 54.6%
Report:              92.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_min} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction in2} {:instruction float_mod} {:instruction float_swap} {:instruction integer_yank} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction integer_dec} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction integer_sub} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_swap} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_frominteger} {:instruction print_integer} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction integer_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction print_float} {:instruction float_sin})
Best program: (float_add integer_min integer_dup_items integer_inc integer_swap integer_mod 5 integer_max integer_dup_items in2 float_mod float_swap integer_yank in1 float_stackdepth float_max tag_float_754 38.07590924596505 integer_dec in1 float_add float_max integer_sub 38.939305753985195 float_inc integer_swap float_add in1 float_dec float_stackdepth integer_swap float_shove float_dec float_dec integer_shove float_dup integer_dup_times float_dec float_dec float_dec float_dec float_dup float_shove float_dec integer_dup_times float_yank float_dec integer_dup_times integer_flush float_dec float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_times float_dec integer_yankdup float_yankdup float_dec integer_flush float_dec integer_flush float_dec float_dec float_dec integer_flush float_shove float_dec integer_flush float_dec float_frominteger print_integer float_dec float_stackdepth integer_dup_items float_shove float_dec in2 float_dec integer_div integer_dup_items float_dec float_dec integer_dup_items float_dec float_yank tag_integer_238 float_dec float_dec float_dec float_shove float_dec print_float float_sin)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2728.306570500002
Median total errors in population: 697.9392000000001
Error averages by case: (98.6528144999999 4.469 94.65624320000059 7.372 98.71847910000045 9.046 97.6458293000007 8.616 87.93052259999995 3.58 89.46016939999991 10.802 93.5310489 3.778 96.73454989999999 4.293 130.37833319999996 4.057 107.09135069999901 8.473 101.69509460000097 8.626 97.33915019999986 4.376 84.37687059999989 7.75 94.54991940000056 11.585 119.95134830000117 10.594 119.71640160000135 7.508 128.3127843000014 8.864 88.08891719999957 9.37 126.44567679999986 4.486 91.78252059999936 8.09 99.15419789999997 4.278 89.90221579999952 9.086 92.11461360000004 4.001 95.47620259999928 7.925 128.71331619999998 4.863)
Error minima by case: (9.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 22.9064 1 0.0607 1 0.0152 2 0.0 0 0.0152 1 0.2852 7 1.0258 7 0.4003 5 2.1335 1 0.0721 1 7.7708 1 0.0152 1 0.0 0 1.1138 2 0.0 0 0.0152 2 4.8749 2)
Average genome size in population (length): 93.146
Average program size in population (points): 94.146
Average percent parens in population: 0.011
Minimum age in population: 241.9312707051896
Maximum age in population: 246.4651313657333
Average age in population: 244.4461864560056
Median age in population: 244.4820649948155
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.299
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 371601518
--- Timings ---
Current time: 1529616656170 milliseconds
Total Time:         683.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.9 seconds, 31.7%
Fitness Testing:    372.9 seconds, 54.6%
Report:              93.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction in2} {:instruction float_mod} {:instruction float_flush} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction in2} {:instruction integer_flush} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_758} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush})
Best program: (float_add integer_rot integer_dup_items integer_inc integer_swap integer_mod 5 integer_max integer_dup_items in2 float_mod float_flush integer_dup_items integer_dup_items integer_inc in2 integer_flush float_add in2 float_add integer_stackdepth float_rot float_min float_sin in1 float_stackdepth float_max tag_float_758 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max integer_mod float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float float_dec integer_rot float_dec integer_mod float_shove float_dec float_dec integer_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2796.8735966000017
Median total errors in population: 694.0608000000002
Error averages by case: (105.2343812999999 4.516 95.18702240000017 7.185 99.96329500000024 8.948 97.92684520000026 8.439 90.11862319999994 3.57 87.94079739999994 10.758 99.87840980000003 3.816 100.03885169999992 4.286 133.36001859999996 4.082 109.77817029999906 8.318 101.82271190000044 8.453 103.18004859999986 4.437 86.97214309999995 7.636 94.99657670000025 11.582 120.82695620000098 10.621 122.44465640000111 7.507 132.3735589000012 8.846 89.92408429999973 9.291 131.43601589999983 4.56 92.91214349999977 7.931 101.50478979999997 4.264 94.13493519999967 9.056 99.0257815 4.065 96.18181389999963 7.76 134.89796579999995 4.886)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.1345 1 0.9799 1 0.994 1 12.1695 1 0.1736 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 0.701 6 0.4003 5 5.8665 1 0.9171 1 2.2292 1 0.0152 1 0.0 0 0.0759 1 0.0089 1 0.0152 2 2.8749 2)
Average genome size in population (length): 93.095
Average program size in population (points): 94.095
Average percent parens in population: 0.011
Minimum age in population: 243.4411926262588
Maximum age in population: 247.8377547634845
Average age in population: 245.7790888580354
Median age in population: 245.8091443190965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.288
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 373929418
--- Timings ---
Current time: 1529616660248 milliseconds
Total Time:         687.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.1 seconds, 31.7%
Fitness Testing:    375.2 seconds, 54.6%
Report:              94.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction print_integer} {:instruction tag_integer_107} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction print_float} {:instruction integer_sub} {:instruction float_dec} {:instruction 88} {:instruction float_dup_items} {:instruction float_tan})
Best program: (float_add integer_dup_items float_add integer_inc integer_dup_items -14.92010430989157 float_tan integer_swap integer_mod tag_integer_442 in2 float_add integer_mult integer_inc in2 float_add float_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_swap float_dec print_integer tag_integer_107 float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_flush float_dec integer_pop float_shove integer_mod float_frominteger float_dec float_dec integer_pop float_dec integer_pop float_dec integer_dup_items float_dec float_frominteger float_dec integer_pop float_dec float_dec integer_rot print_float integer_sub float_dec 88 float_dup_items float_tan)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2862.321762300001
Median total errors in population: 697.9392000000001
Error averages by case: (105.7119191999998 4.586 98.10206430000056 7.374 102.23101460000055 9.119 100.82769410000077 8.659 94.45658829999991 3.709 94.61471889999987 10.786 102.12588229999996 3.865 104.21066019999994 4.41 135.60609289999996 4.122 111.25986639999907 8.501 104.61775760000091 8.653 104.5347443999998 4.457 90.49590279999954 7.737 99.64972820000075 11.657 125.81983200000157 10.664 124.0314825000016 7.578 132.10094460000167 8.97 91.30766749999935 9.355 134.27546969999972 4.659 94.37500489999937 8.133 105.67153469999988 4.388 94.35197679999935 9.15 99.99431759999995 4.128 99.01142479999935 7.941 135.39247299999988 4.944)
Error minima by case: (5.2437 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 11.1695 1 0.1002 1 0.0152 2 0.0 0 0.0152 1 0.7536 7 0.1575 7 0.381 5 1.8665 1 0.003 1 3.5798 1 0.0152 1 0.9118 1 0.4689 2 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 92.767
Average program size in population (points): 93.767
Average percent parens in population: 0.011
Minimum age in population: 244.4513721730336
Maximum age in population: 249.2249555590142
Average age in population: 247.1395661836981
Median age in population: 247.2074656354826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.306
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 376248743
--- Timings ---
Current time: 1529616664394 milliseconds
Total Time:         691.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.4 seconds, 31.7%
Fitness Testing:    377.4 seconds, 54.6%
Report:              94.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_853} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_853 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec float_yankdup float_dec float_dec integer_max float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2465.2337327000014
Median total errors in population: 694.0608000000002
Error averages by case: (87.5219940999999 4.201 82.95562060000042 7.118 87.64290960000045 8.946 85.78761120000061 8.406 76.29677070000001 3.406 78.32878149999999 10.793 83.56235930000001 3.566 85.64354459999997 4.08 118.81623259999999 3.796 96.5900809999991 8.307 90.64129130000079 8.414 85.87393519999989 4.094 73.37630120000011 7.487 86.48389890000061 11.642 112.8876604000012 10.632 112.2926196000013 7.479 120.17783940000137 8.802 79.92723089999969 9.159 115.46215589999989 4.24 80.30367559999985 7.875 87.99665199999994 4.069 80.3744701999997 9.082 83.17994149999998 3.776 83.56194039999954 7.679 117.87521499999993 4.624)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 17.1695 1 0.0759 1 0.0152 2 0.1847 1 0.0152 2 0.0152 6 2.661 7 0.5997 5 5.8665 1 0.003 1 2.3034 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 92.36
Average program size in population (points): 93.36
Average percent parens in population: 0.011
Minimum age in population: 245.4513721730336
Maximum age in population: 250.5595123549074
Average age in population: 248.5477955797412
Median age in population: 248.5873696681132
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.3
Error (vector) diversity:			 0.304
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 378558043
--- Timings ---
Current time: 1529616668419 milliseconds
Total Time:         695.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.6 seconds, 31.7%
Fitness Testing:    379.7 seconds, 54.6%
Report:              95.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction float_tan} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction print_integer} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float})
Best program: (float_add integer_dup_items -14.92010430989157 integer_mod tag_integer_442 float_tan integer_dup_items in2 integer_max integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_mod integer_yankdup float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_mod float_dec integer_yankdup integer_yankdup float_dec print_integer float_shove float_dec float_dec integer_swap integer_flush float_dec integer_dup_times float_shove integer_dup_items float_dec float_dec in2 float_dec float_dec integer_flush float_dec integer_pop float_shove float_dec integer_flush float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3167.271487900002
Median total errors in population: 697.4848000000002
Error averages by case: (119.13661789999992 4.505 108.90366770000092 7.207 111.36025110000062 8.95 111.35395540000101 8.512 105.89378819999996 3.633 107.69654679999994 10.797 113.80541599999997 3.816 115.43646479999998 4.316 145.91304799999986 4.101 123.58144179999859 8.33 114.89414930000108 8.493 116.25925569999993 4.4 103.41137989999945 7.596 112.05489780000094 11.618 137.23964140000163 10.695 138.06165560000173 7.618 148.46972240000193 8.94 105.76074699999899 9.287 146.45192819999986 4.516 107.00042459999908 7.913 116.93185139999999 4.302 110.50750369999903 9.167 113.3633528 4.039 109.80786139999896 7.779 148.51991899999987 4.926)
Error minima by case: (3.0 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 0.0 0 0.0 0 35.0 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 0.2534 7 0.4003 5 1.356 1 0.5191 1 10.2292 1 0.0152 1 0.0 0 0.8862 1 0.0 0 0.0152 2 35.0 2)
Average genome size in population (length): 92.317
Average program size in population (points): 93.317
Average percent parens in population: 0.011
Minimum age in population: 247.3164776112501
Maximum age in population: 251.6647963488259
Average age in population: 249.8587810131855
Median age in population: 249.9228775000499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.301
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 380866168
--- Timings ---
Current time: 1529616672413 milliseconds
Total Time:         699.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.8 seconds, 31.7%
Fitness Testing:    381.9 seconds, 54.6%
Report:              95.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction -64} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (float_sin integer_dup_items integer_dup_items integer_dup_items in2 integer_max float_add float_mult float_add integer_stackdepth float_min float_sin in1 float_stackdepth 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max -64 float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_yankdup integer_flush integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_shove integer_mod float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot integer_pop integer_dup_times float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2920.815806800002
Median total errors in population: 693.0304000000001
Error averages by case: (108.5876535999998 4.432 99.01019270000077 7.226 101.98377520000057 9.09 101.48148480000094 8.568 96.32281009999988 3.548 96.72511109999992 10.829 103.65576749999998 3.72 105.81370649999994 4.261 139.10161359999998 3.986 116.24381739999889 8.459 105.03178980000104 8.554 107.41885369999986 4.326 89.70270829999987 7.668 102.50100900000092 11.623 128.6770476000012 10.601 129.33106610000138 7.397 136.47908080000147 8.782 96.09273479999922 9.459 135.66669839999983 4.452 97.36090379999924 8.028 107.84176249999994 4.238 99.30246209999906 9.034 102.78566019999994 3.975 100.31710689999906 7.838 138.44599029999998 4.841)
Error minima by case: (5.0028 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 1.701 7 0.4003 5 4.8665 1 0.061 1 1.6283 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 29.5242 2)
Average genome size in population (length): 92.348
Average program size in population (points): 93.348
Average percent parens in population: 0.011
Minimum age in population: 248.3195021471018
Maximum age in population: 253.0340641207804
Average age in population: 251.1872381127244
Median age in population: 251.2545978464665
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.279
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 383175118
--- Timings ---
Current time: 1529616676422 milliseconds
Total Time:         703.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.0 seconds, 31.7%
Fitness Testing:    384.2 seconds, 54.6%
Report:              96.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_add} {:instruction float_inc} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_mod} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction in2} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (float_add float_add float_inc integer_dup_items -14.92010430989157 float_stackdepth integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_mod tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_stackdepth integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dec integer_yank float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_yank float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub in2 integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2837.5991114000017
Median total errors in population: 694.0608000000002
Error averages by case: (105.75424419999982 4.526 95.6063446000005 7.285 98.6820982000004 9.076 98.24376160000067 8.588 92.48025739999997 3.673 95.13662279999991 10.815 99.27973530000003 3.844 101.21744769999994 4.375 136.97334359999996 4.123 110.93518959999906 8.469 102.06100650000074 8.606 102.57304779999988 4.46 90.37299109999961 7.712 100.63235300000068 11.634 125.24399680000117 10.637 124.81130470000132 7.498 133.1805484000013 8.802 92.03535779999955 9.461 132.67963129999987 4.548 93.3371569999995 8.048 103.11920159999994 4.337 95.31131009999952 9.034 99.27187229999998 4.092 96.6282869999994 7.869 135.56400099999996 4.956)
Error minima by case: (6.0 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.7896 1 1.0 1 1.006 1 9.1417 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.7148 7 0.299 7 0.5997 5 3.8665 1 0.0759 1 2.456 1 0.0152 1 0.9118 1 0.0759 1 0.0103 1 0.0152 2 0.4945 2)
Average genome size in population (length): 92.329
Average program size in population (points): 93.329
Average percent parens in population: 0.011
Minimum age in population: 250.3225922819002
Maximum age in population: 254.7646371676949
Average age in population: 252.6058152905568
Median age in population: 252.6352030409516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.297
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 385483743
--- Timings ---
Current time: 1529616680437 milliseconds
Total Time:         707.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.2 seconds, 31.7%
Fitness Testing:    386.4 seconds, 54.6%
Report:              96.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction float_rot} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction in1} {:instruction tag_float_853} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan float_rot tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth in1 tag_float_853 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_pop integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2813.1532179000023
Median total errors in population: 693.0304000000001
Error averages by case: (102.96996149999985 4.447 95.79094270000063 7.285 98.75869770000057 9.061 98.31343570000074 8.584 89.63122789999994 3.605 92.59473489999996 10.793 98.74739090000001 3.732 99.3588349 4.34 133.65710610000005 4.016 111.40729909999871 8.426 102.87031720000097 8.571 102.04298699999983 4.34 87.10344039999981 7.642 99.67345800000086 11.548 126.50122830000146 10.607 124.41602660000164 7.466 132.4089122000015 8.84 93.35754969999945 9.375 130.94244249999994 4.459 93.5769311999995 7.995 101.34657999999996 4.272 94.95779759999942 9.151 96.88267679999997 3.967 97.17569489999931 7.845 133.46554410000002 4.835)
Error minima by case: (4.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.9442 1 0.994 1 16.2783 1 0.0607 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 0.701 7 0.0455 5 1.0455 1 0.2333 1 20.7708 1 0.0152 1 2.0 1 0.0152 2 1.0 1 0.0152 2 0.1251 2)
Average genome size in population (length): 92.103
Average program size in population (points): 93.103
Average percent parens in population: 0.011
Minimum age in population: 251.6472553014108
Maximum age in population: 256.4304634661774
Average age in population: 254.0404044253331
Median age in population: 254.0577396126729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.293
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 387786818
--- Timings ---
Current time: 1529616684532 milliseconds
Total Time:         711.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.4 seconds, 31.7%
Fitness Testing:    388.7 seconds, 54.6%
Report:              97.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction -15.022494786237573} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_inc} {:instruction in2} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_add} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tag_integer_516} {:instruction print_float} {:instruction float_flush})
Best program: (float_add -15.022494786237573 integer_inc integer_mult integer_inc in2 float_mod float_stackdepth float_min float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_add integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_dup_items integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_mod float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec tag_integer_516 print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3156.6561547000024
Median total errors in population: 697.9392000000001
Error averages by case: (118.02638919999985 4.658 109.45930430000091 7.327 113.45483990000068 8.97 112.054125600001 8.488 103.52222929999992 3.739 103.0162233999999 10.779 112.54804879999996 3.908 113.2217823 4.451 145.67083 4.22 121.47913099999865 8.341 116.66810150000111 8.534 115.81768539999985 4.528 104.52409799999947 7.664 113.71555540000108 11.651 139.46736940000162 10.782 141.15568580000175 7.74 146.60109910000176 9.089 106.57949899999915 9.197 144.47815439999982 4.678 107.62291739999915 8.037 113.16290399999997 4.418 107.82696679999908 9.281 111.64929520000001 4.176 110.15098189999901 7.833 147.28993759999994 5.004)
Error minima by case: (3.8137 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.8137 1 12.1695 1 0.5532 1 0.0152 2 0.0 0 0.0152 1 0.7148 7 2.701 7 0.4573 5 4.0455 1 0.0759 1 23.7708 1 0.0152 1 0.0 1 0.0759 1 0.0 0 0.0152 2 1.1251 2)
Average genome size in population (length): 91.541
Average program size in population (points): 92.541
Average percent parens in population: 0.011
Minimum age in population: 252.9377898435033
Maximum age in population: 257.3965703503391
Average age in population: 255.3942105885147
Median age in population: 255.4330040406233
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.296
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 390075918
--- Timings ---
Current time: 1529616688497 milliseconds
Total Time:         715.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.7 seconds, 31.7%
Fitness Testing:    390.9 seconds, 54.6%
Report:              98.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction in2} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction -36} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction -92} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items -14.92010430989157 integer_mod tag_integer_442 integer_rot integer_dup_items in2 float_min integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_dec float_dec integer_shove float_dup float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_flush float_dec -36 float_dec float_dec integer_dec float_dec integer_flush float_dec float_dec -92 float_shove float_dec float_dec integer_flush integer_flush float_dec integer_inc float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec float_shove float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2972.8460541000013
Median total errors in population: 694.0608000000002
Error averages by case: (111.34366209999983 4.465 102.25669030000053 7.145 104.7623791000003 8.9 104.67105060000084 8.43 97.35487689999988 3.596 99.68312929999985 10.714 106.44483539999996 3.798 107.36268989999995 4.341 140.62187949999995 4.06 115.86931699999886 8.293 108.18937010000083 8.436 109.95118439999976 4.413 94.00641689999952 7.529 106.25648100000079 11.584 132.2519854000013 10.66 130.20047820000144 7.569 136.2511768000014 8.783 98.0479334999993 9.209 137.93630689999975 4.51 98.68638689999935 7.899 108.24518659999987 4.283 98.73353549999933 9.084 105.36149639999994 4.029 103.26390449999921 7.717 140.75870089999984 4.888)
Error minima by case: (2.0 1 0.0146 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.994 1 12.1695 1 0.3102 1 0.0152 2 0.3213 1 0.0152 1 0.0152 6 3.2383 7 0.5467 5 4.8665 1 0.0152 1 9.7708 1 0.0152 1 0.0 0 0.2504 1 0.0 0 0.0152 2 2.8749 2)
Average genome size in population (length): 91.341
Average program size in population (points): 92.341
Average percent parens in population: 0.011
Minimum age in population: 253.9821281851221
Maximum age in population: 258.8059573200723
Average age in population: 256.7729249852676
Median age in population: 256.7935760423318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.296
Error (vector) diversity:			 0.3
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 392359718
--- Timings ---
Current time: 1529616692607 milliseconds
Total Time:         719.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.9 seconds, 31.7%
Fitness Testing:    393.2 seconds, 54.6%
Report:              98.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_add} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (integer_dup_items integer_dup_items integer_inc integer_dec integer_flush float_add in2 float_cos integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max integer_mod float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yank integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_dup_times float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2726.953393800002
Median total errors in population: 694.0608000000002
Error averages by case: (102.05729649999991 4.401 91.90994380000063 7.12 95.65918110000037 8.889 94.54979070000087 8.37 88.24721629999995 3.496 88.02923049999987 10.696 96.04158509999998 3.704 97.5552226999999 4.227 131.2886524999999 3.985 104.68640459999878 8.255 98.268250200001 8.39 99.53015379999984 4.292 84.65967129999954 7.476 95.594838400001 11.624 121.81112950000154 10.676 122.45606050000164 7.608 129.76605800000164 8.798 87.07826689999919 9.145 128.50195569999977 4.424 88.63582819999925 7.83 97.8137241999999 4.197 90.42778379999909 8.994 95.57678049999998 3.952 92.58617359999911 7.673 131.2071953999999 4.793)
Error minima by case: (3.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0738 1 1.0 1 0.0 0 15.0329 1 0.0759 1 0.0152 2 0.0 0 0.0152 2 0.0152 6 1.1375 7 0.3265 5 3.8665 1 0.0152 1 3.7708 1 0.0152 1 0.0 0 0.0152 1 1.0 1 0.0152 2 7.8749 2)
Average genome size in population (length): 90.989
Average program size in population (points): 91.989
Average percent parens in population: 0.011
Minimum age in population: 254.9821281851221
Maximum age in population: 260.259442290673
Average age in population: 258.109378007675
Median age in population: 258.1594075220331
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.284
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 394634593
--- Timings ---
Current time: 1529616696557 milliseconds
Total Time:         723.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       229.1 seconds, 31.7%
Fitness Testing:    395.4 seconds, 54.6%
Report:              99.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_tan integer_dup_items in2 float_dup integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_shove float_dec float_dec integer_mod float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_flush float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3213.8878195000025
Median total errors in population: 697.9392000000001
Error averages by case: (118.91372489999986 4.741 113.51894490000083 7.382 116.74699220000062 9.037 116.41375800000104 8.59 108.53692989999988 3.842 108.79976659999996 10.816 113.70399060000005 4.03 117.7935135 4.525 145.45987180000006 4.343 127.25498289999847 8.458 119.99007520000129 8.607 116.86525689999986 4.628 104.22050139999934 7.785 113.83289140000107 11.648 139.54742710000173 10.723 137.20586540000158 7.719 147.86683240000184 9.003 106.59943249999891 9.352 146.1070492999998 4.762 111.21892299999901 8.106 118.65343949999995 4.495 110.10912039999894 9.163 111.95471890000005 4.282 114.55742139999889 7.922 148.9393893999999 5.118)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0738 1 0.0558 1 0.006 1 16.1417 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.2852 7 0.701 7 1.5997 5 0.1335 1 0.0152 1 3.0971 1 0.0152 1 1.0 1 1.0152 1 1.0 1 0.0152 2 1.1251 2)
Average genome size in population (length): 90.019
Average program size in population (points): 91.019
Average percent parens in population: 0.011
Minimum age in population: 256.90826498308
Maximum age in population: 261.5008407862974
Average age in population: 259.4137388648145
Median age in population: 259.4443292554669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.287
Error (vector) diversity:			 0.295
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 396885193
--- Timings ---
Current time: 1529616700437 milliseconds
Total Time:         727.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.3 seconds, 31.7%
Fitness Testing:    397.5 seconds, 54.6%
Report:              99.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_max} {:instruction float_add} {:instruction float_mult} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction -64} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction print_float} {:instruction float_flush})
Best program: (float_sin integer_dup_items integer_dup_items integer_dup_items in2 integer_max float_add float_mult float_yank integer_stackdepth float_min float_sin in1 float_stackdepth 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max -64 float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_yankdup integer_flush integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec float_frominteger float_dec integer_flush float_dec float_dec float_shove integer_mod float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_stackdepth print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2440.653113900002
Median total errors in population: 694.0608000000002
Error averages by case: (87.54595689999996 4.23 81.49624630000004 7.047 84.41607170000024 8.86 84.06468190000022 8.326 73.89016670000011 3.386 78.9450739 10.706 82.35024400000005 3.557 83.66324040000002 4.085 117.72612640000001 3.81 96.04553909999916 8.227 87.74511250000046 8.331 85.26298939999994 4.16 76.04687660000022 7.411 88.12255760000042 11.533 113.96794590000133 10.519 110.11310640000147 7.388 118.85138560000134 8.743 78.01169240000027 9.145 114.56692669999987 4.24 79.18356180000008 7.796 85.35650050000001 4.061 80.63527730000003 8.978 81.55942560000004 3.804 82.3746022999998 7.618 118.117806 4.633)
Error minima by case: (6.0 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 1.0 1 0.9192 1 0.994 1 9.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.2852 6 1.8376 7 0.5997 5 0.8665 2 0.9053 1 14.8814 1 0.0152 1 0.0 0 0.1138 2 1.0 1 0.0152 2 1.8749 2)
Average genome size in population (length): 90.375
Average program size in population (points): 91.375
Average percent parens in population: 0.011
Minimum age in population: 258.1526848475733
Maximum age in population: 262.8218265212204
Average age in population: 260.786711734007
Median age in population: 260.86186248029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.279
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 399144718
--- Timings ---
Current time: 1529616704343 milliseconds
Total Time:         731.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.6 seconds, 31.7%
Fitness Testing:    399.7 seconds, 54.6%
Report:             100.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_min} {:instruction tag_integer_442} {:instruction float_dup_times} {:instruction float_min} {:instruction tag_integer_442} {:instruction float_dup_times} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_swap} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction float_flush})
Best program: (float_add integer_dup_items -14.92010430989157 float_min tag_integer_442 float_dup_times float_min tag_integer_442 float_dup_times in2 float_add integer_stackdepth float_tan float_sin in1 float_stackdepth float_dec float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc integer_swap float_add in1 float_dec float_stackdepth integer_swap float_shove float_dec float_dec integer_shove float_dup integer_dup_times float_shove float_dec float_dec print_integer float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_yankdup float_dup_items float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_yankdup float_shove float_dec float_dec integer_flush float_dec integer_stackdepth float_dec float_dec float_shove float_dec integer_mod float_frominteger float_dec float_dec float_dup_items float_dec integer_pop float_shove float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float float_flush)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2652.5915623000014
Median total errors in population: 694.0608000000002
Error averages by case: (97.7770174999999 4.356 89.63034610000037 7.045 92.20828240000036 8.856 92.20834200000063 8.342 85.13159759999998 3.526 87.38969899999998 10.845 92.62091430000005 3.666 94.19190820000001 4.225 122.27823740000002 3.903 104.24544339999893 8.209 95.85043260000073 8.345 96.27702609999986 4.229 83.03472529999988 7.427 93.26211980000066 11.68 118.89068120000124 10.711 117.9772777000014 7.536 126.87599760000136 8.842 84.0855391999998 9.138 124.68776349999986 4.35 87.57055449999966 7.797 96.3049932 4.185 87.66256839999969 9.06 92.04788380000008 3.911 90.53068359999942 7.634 127.2715279 4.762)
Error minima by case: (5.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 25.9064 1 0.0607 1 0.0152 2 0.1847 1 0.0152 2 0.0665 7 0.2103 7 0.4003 5 3.0455 1 0.0152 1 0.4618 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 3.8749 2)
Average genome size in population (length): 90.129
Average program size in population (points): 91.129
Average percent parens in population: 0.011
Minimum age in population: 259.4341730815529
Maximum age in population: 264.0979682858202
Average age in population: 262.1023164336544
Median age in population: 262.1363477953243
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.267
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 401398118
--- Timings ---
Current time: 1529616708275 milliseconds
Total Time:         735.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.8 seconds, 31.7%
Fitness Testing:    401.8 seconds, 54.6%
Report:             100.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction print_integer} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction float_dup_times} {:instruction in2} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_max} {:instruction float_shove} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup})
Best program: (float_add integer_dup_items print_integer integer_shove integer_dup_items -14.92010430989157 float_tan integer_mod float_dup_times in2 integer_sub float_stackdepth float_min float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_yank float_dec float_dec integer_min integer_max float_shove integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2826.998373100002
Median total errors in population: 697.9392000000001
Error averages by case: (104.46987539999988 4.459 95.79391120000076 7.08 99.3700645000004 8.835 98.31011580000106 8.344 91.49917039999985 3.578 91.83845869999988 10.764 98.81646409999998 3.791 102.57311869999998 4.267 133.3303603 4.031 110.23666359999856 8.198 102.73170080000119 8.334 102.2329652999998 4.361 91.02117869999927 7.493 101.23431400000118 11.661 126.6003212000016 10.67 127.29112990000169 7.589 133.0929720000018 8.829 93.75062159999891 9.145 130.6829728999998 4.47 93.82173619999898 7.786 101.5450163999999 4.249 94.23559839999898 9.039 98.42649819999994 4.014 96.80194649999882 7.639 133.81119829999997 4.854)
Error minima by case: (6.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0738 1 1.0 1 0.1306 1 12.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.1486 7 0.0455 7 0.5997 5 0.0455 1 0.0759 1 2.6695 1 0.0152 1 1.0 1 0.0759 1 1.0 1 0.0152 2 0.8749 2)
Average genome size in population (length): 89.793
Average program size in population (points): 90.793
Average percent parens in population: 0.011
Minimum age in population: 260.4756704789414
Maximum age in population: 265.4358955120445
Average age in population: 263.5108330430555
Median age in population: 263.5935255801542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.29
Error (vector) diversity:			 0.301
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 403643293
--- Timings ---
Current time: 1529616712151 milliseconds
Total Time:         739.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.0 seconds, 31.7%
Fitness Testing:    403.9 seconds, 54.6%
Report:             101.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_shove} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_tan} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_dec} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_mult} {:instruction tag_integer_238} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_max} {:instruction float_mod} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_shove integer_dup_items float_add float_tan integer_dup_items -14.92010430989157 float_tan integer_mod integer_mod tag_integer_442 in2 float_add integer_stackdepth float_min float_sin in1 float_stackdepth 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_dup_times integer_flush float_dec float_shove integer_yankdup integer_flush float_dec integer_yankdup integer_yank float_dec integer_flush float_dec float_dec integer_flush float_dec integer_mod float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_stackdepth integer_dup_items float_shove float_dec float_dup_times float_dec integer_div integer_rot float_dec float_dec integer_flush float_dec integer_mult tag_integer_238 float_dec float_dec float_dec float_shove float_dec float_dec integer_flush print_float integer_max float_mod integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2842.490250900002
Median total errors in population: 698.5000000000002
Error averages by case: (103.76741439999988 4.612 97.4897596000004 7.153 100.44085360000032 8.832 100.13310970000074 8.373 93.96568340000002 3.781 94.50551690000005 10.71 99.84032679999997 3.968 102.07843269999996 4.458 133.03047029999993 4.212 108.63550209999899 8.201 103.93409110000091 8.369 102.35070589999988 4.517 90.15477689999969 7.545 100.51392120000064 11.689 126.35417000000125 10.708 126.20973000000137 7.755 135.15173410000145 8.892 92.27564399999964 9.101 132.5058537999998 4.679 94.92900679999947 7.836 103.71095339999995 4.438 94.95562409999934 9.122 96.97196190000008 4.23 97.8185610999992 7.695 134.87444709999994 5.016)
Error minima by case: (0.9011 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 1.5744 1 0.0 0 15.1695 1 0.0759 1 0.0152 2 0.0 0 0.0152 1 0.2549 7 1.4009 7 0.4034 5 2.8665 1 0.0366 1 7.02 1 0.0152 1 0.0 0 0.8862 1 1.5744 1 0.0152 2 1.8749 2)
Average genome size in population (length): 90.152
Average program size in population (points): 91.152
Average percent parens in population: 0.011
Minimum age in population: 262.2847624367315
Maximum age in population: 266.8054750750919
Average age in population: 264.8703700195551
Median age in population: 264.9512071112854
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.311
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 405897418
--- Timings ---
Current time: 1529616716094 milliseconds
Total Time:         743.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.2 seconds, 31.7%
Fitness Testing:    406.0 seconds, 54.6%
Report:             101.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_853} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_dec} {:instruction tag_float_932})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_853 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_shove float_dec integer_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec integer_flush float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_dec tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3102.445665000001
Median total errors in population: 699.0608000000002
Error averages by case: (115.86707499999966 4.857 109.22196740000095 7.27 112.4097544000005 8.941 112.017730400001 8.489 104.25009239999979 3.971 101.02784029999978 10.736 109.70173049999998 4.101 113.03392519999991 4.672 142.52428559999998 4.376 121.34155939999859 8.374 115.78391280000115 8.496 112.6752868999997 4.72 99.57912279999958 7.623 107.65088240000107 11.632 133.43801150000155 10.743 132.6250569000019 7.667 145.2209794000018 8.922 100.29992359999906 9.28 143.0045223999997 4.925 106.65115659999893 7.913 113.87125909999979 4.601 106.1480753999991 9.182 109.31026919999994 4.411 109.96683209999888 7.823 145.87441329999993 5.225)
Error minima by case: (0.5944 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 12.1695 1 0.0759 1 0.0152 2 0.3213 1 0.0152 1 0.7148 7 0.299 7 0.4003 5 5.7299 1 0.0366 1 8.2292 1 0.0152 1 0.0 0 0.1138 1 0.0 0 0.0152 2 16.1251 2)
Average genome size in population (length): 90.399
Average program size in population (points): 91.399
Average percent parens in population: 0.011
Minimum age in population: 263.9410813508531
Maximum age in population: 268.311784836617
Average age in population: 266.1687854516554
Median age in population: 266.1933097168905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.303
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 408157718
--- Timings ---
Current time: 1529616720081 milliseconds
Total Time:         747.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.5 seconds, 31.6%
Fitness Testing:    408.2 seconds, 54.6%
Report:             102.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 33035.893599999974
Test mean error for best: 16.51795
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tag_integer_272} {:instruction integer_inc} {:instruction integer_max} {:instruction float_pop} {:instruction float_min} {:instruction float_tan} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_swap} {:instruction integer_mod} {:instruction 5} {:instruction integer_max} {:instruction integer_dup_items} {:instruction in2} {:instruction float_mod} {:instruction float_swap} {:instruction integer_inc} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction float_add} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_mult} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction integer_shove} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction tag_integer_859} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float})
Best program: (float_dup tag_integer_272 integer_inc integer_max float_pop float_min float_tan integer_dup_items integer_inc integer_swap integer_mod 5 integer_max integer_dup_items in2 float_mod float_swap integer_inc in1 float_stackdepth float_max tag_float_754 38.07590924596505 float_add in1 float_add float_max float_mult 38.939305753985195 float_inc integer_shove float_add in1 float_dec integer_rot integer_min float_shove float_dec float_dec float_dec integer_shove float_shove float_shove float_dec float_dec float_shove integer_max float_dec float_dec integer_rot float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_dup float_dec integer_flush float_dec tag_integer_859 float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush integer_yankdup float_dec float_dec float_frominteger float_frominteger float_dec float_stackdepth integer_dup_items float_shove float_dec integer_pop float_dec integer_mod integer_dup_items float_dec float_dec integer_dup float_dec float_dec integer_flush float_dec float_dec float_shove float_dec float_dec integer_flush print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2890.4055718000013
Median total errors in population: 697.9392000000001
Error averages by case: (106.38474579999985 4.61 99.42586340000054 7.237 102.59721920000035 8.91 101.92267530000076 8.464 93.43377159999991 3.769 95.59379359999991 10.799 100.40354189999994 3.876 103.42853689999994 4.486 136.5529236999999 4.214 111.20902429999899 8.307 105.73549760000084 8.415 103.5971665999998 4.468 94.52604309999975 7.639 103.99935920000084 11.68 128.9842784000013 10.725 128.14670700000153 7.698 135.45777510000147 8.939 96.09977099999946 9.217 133.06036439999977 4.626 96.6600837999995 7.89 103.95913459999991 4.403 97.19542729999954 9.142 99.76532639999998 4.172 99.91747209999924 7.794 135.8910694999999 4.978)
Error minima by case: (3.0 1 0.006 2 0.0152 1 0.0152 2 0.0 0 0.0 0 0.0 0 0.0 0 21.9064 1 0.0759 1 0.0152 2 0.1847 1 0.0152 1 0.1486 7 0.8376 7 0.4003 5 1.8665 1 0.0881 1 6.2292 1 0.0152 1 0.0192 1 0.1138 1 0.0 0 0.0152 2 1.8749 2)
Average genome size in population (length): 90.892
Average program size in population (points): 91.892
Average percent parens in population: 0.011
Minimum age in population: 264.9410813508531
Maximum age in population: 269.5842928304488
Average age in population: 267.461830357364
Median age in population: 267.4804176441196
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.31
Error (vector) diversity:			 0.32
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 410430318
--- Timings ---
Current time: 1529616724053 milliseconds
Total Time:         751.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.7 seconds, 31.6%
Fitness Testing:    410.4 seconds, 54.6%
Report:             103.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction in2} {:instruction integer_flush} {:instruction float_add} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (integer_inc in2 integer_flush float_add in2 float_cos integer_stackdepth float_min float_min in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max integer_mod float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_dup_times float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2901.207305300002
Median total errors in population: 695.0348000000001
Error averages by case: (105.5511413999999 4.545 101.06168750000047 7.154 104.19244790000029 8.876 103.80892460000064 8.434 93.23334349999989 3.702 94.7562760999999 10.727 100.45092570000004 3.849 103.02435950000003 4.398 138.7508544 4.141 113.85654379999892 8.288 107.69603180000088 8.442 103.5553847999999 4.437 91.66411689999974 7.553 103.4552119000007 11.6 129.49587990000128 10.67 127.3281083000014 7.576 138.41266980000148 8.844 94.55431119999939 9.221 132.66710399999988 4.55 98.7065417999995 7.897 104.22778769999988 4.354 99.1906045999995 9.063 98.74367860000002 4.134 101.80533989999938 7.741 135.8440297 4.978)
Error minima by case: (8.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 0.0 0 0.006 1 14.0329 1 0.3102 1 0.0152 2 0.0 0 0.0022 1 0.0152 6 1.701 7 0.2456 5 4.8665 1 0.0881 1 6.8299 1 0.0152 1 1.0 1 0.0759 1 0.0 0 0.0152 2 5.8749 2)
Average genome size in population (length): 90.925
Average program size in population (points): 91.925
Average percent parens in population: 0.011
Minimum age in population: 265.9410813508531
Maximum age in population: 270.6879911635215
Average age in population: 268.7835158472603
Median age in population: 268.8444213970016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.287
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 412703668
--- Timings ---
Current time: 1529616728100 milliseconds
Total Time:         755.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.9 seconds, 31.6%
Fitness Testing:    412.6 seconds, 54.6%
Report:             103.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_823} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_flush -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_823 38.07590924596505 in1 float_add float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_shove integer_swap float_shove float_dec float_dec float_dup float_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_flush float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2807.334051400002
Median total errors in population: 693.0304000000001
Error averages by case: (102.73680019999989 4.601 95.91493120000024 7.156 99.4115885000003 8.941 98.48949320000044 8.458 90.9089665 3.753 91.58169689999997 10.815 97.30943560000006 3.9 101.1219053 4.476 133.75187979999998 4.158 109.37261549999909 8.312 102.75585480000052 8.446 100.38197689999994 4.476 88.0699992999997 7.549 100.35700870000052 11.686 126.59737350000148 10.699 125.23515200000162 7.464 131.2006869000015 8.848 93.63855439999959 9.239 130.27004549999975 4.62 92.15393839999967 7.915 101.41447849999996 4.433 93.30637469999961 9.114 95.62034820000001 4.152 97.05721349999958 7.765 132.71273339999988 4.987)
Error minima by case: (0.5944 1 0.0152 2 0.0053 2 0.0152 2 0.0 0 0.0 0 0.0808 1 1.006 1 3.9064 1 0.0759 1 0.0152 2 0.0 0 0.012 1 0.2549 7 0.701 7 0.2456 5 0.1335 1 0.0759 1 12.2292 1 0.0152 1 2.0 1 0.441 2 1.0 1 0.0152 2 3.8749 2)
Average genome size in population (length): 90.259
Average program size in population (points): 91.259
Average percent parens in population: 0.011
Minimum age in population: 266.9410813508531
Maximum age in population: 272.6879911635215
Average age in population: 270.0389438063189
Median age in population: 270.0865222906629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.285
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 414960493
--- Timings ---
Current time: 1529616732100 milliseconds
Total Time:         759.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.2 seconds, 31.6%
Fitness Testing:    414.8 seconds, 54.6%
Report:             104.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_flush} {:instruction float_dec} {:instruction in2} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction in1} {:instruction float_min} {:instruction float_min} {:instruction float_add} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_853} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup})
Best program: (in2 integer_flush float_dec in2 float_cos integer_stackdepth float_min float_min float_sin in1 in1 float_min float_min float_add in1 float_stackdepth float_max tag_float_853 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2805.8647131000016
Median total errors in population: 697.9392000000001
Error averages by case: (103.7694997999998 4.598 94.6375453000008 7.175 98.5421352000007 8.98 97.23913230000097 8.456 92.27740359999991 3.725 94.19070679999989 10.852 97.81486559999999 3.906 101.57041799999998 4.434 132.5389219999999 4.162 108.26653319999853 8.315 101.15886700000122 8.469 100.9800210999998 4.48 88.46590259999937 7.592 98.35759250000126 11.711 124.19741430000171 10.776 124.62899390000179 7.665 132.4692564000019 8.965 91.11887499999888 9.18 132.3345664999998 4.693 92.22824139999908 7.932 103.37625739999987 4.439 93.52923589999898 9.155 96.89172160000001 4.137 95.50240569999895 7.743 133.2311999999999 5.007)
Error minima by case: (4.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.3248 1 1.0 1 0.006 1 12.1695 1 0.4468 1 0.0152 2 0.1847 1 0.0152 1 0.0152 6 1.299 7 0.5997 5 2.7299 1 0.0881 1 7.7708 1 0.0152 1 1.0 1 0.0152 2 1.0 1 0.0152 2 1.1251 2)
Average genome size in population (length): 90.326
Average program size in population (points): 91.326
Average percent parens in population: 0.011
Minimum age in population: 267.9410813508531
Maximum age in population: 273.6879911635215
Average age in population: 271.4277670206454
Median age in population: 271.5389306122391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.303
Error (vector) diversity:			 0.317
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 417218968
--- Timings ---
Current time: 1529616736063 milliseconds
Total Time:         763.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.4 seconds, 31.6%
Fitness Testing:    417.0 seconds, 54.6%
Report:             104.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction tag_integer_442} {:instruction float_tan} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_tan} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_sub} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_dup_items} {:instruction tag_float_932})
Best program: (float_add integer_dup_items float_add integer_dup_items integer_dup_items tag_integer_442 float_tan integer_dup_items in2 float_dup integer_stackdepth float_min float_tan in1 float_stackdepth float_max tag_float_754 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_shove float_dec float_dec float_dec integer_dup_times float_yank float_dec float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_mod float_dec integer_dec float_dec integer_flush float_dec float_dec integer_dup_times print_integer float_dec float_dec integer_flush integer_dup float_dec integer_sub float_shove float_dec float_dec integer_mod integer_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec float_yank integer_rot float_dec float_dec float_dup_items float_dec float_dec float_shove float_dec float_dec integer_flush print_float integer_sub float_stackdepth integer_dup float_dup_items tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3003.914863300003
Median total errors in population: 697.9392000000001
Error averages by case: (110.06749679999979 4.67 105.22123680000043 7.294 108.82804040000028 9.033 107.90462410000059 8.528 98.52588449999986 3.801 96.69535229999988 10.823 104.7643455999999 3.974 108.2185955999999 4.489 139.816836 4.247 117.73853009999911 8.379 111.65283050000068 8.53 107.91511219999983 4.54 95.45274989999974 7.67 106.21249140000062 11.721 131.73660830000114 10.743 133.24225830000123 7.669 141.5870034000013 8.907 99.97810879999952 9.271 135.41121859999978 4.71 103.66622679999949 8.001 109.07405059999985 4.488 102.70829939999953 9.139 103.92612699999991 4.208 105.91387459999943 7.819 139.90096129999992 5.102)
Error minima by case: (7.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 0.006 1 31.9064 1 0.0759 1 0.0072 2 0.1847 1 0.0152 1 0.2802 7 0.701 7 0.4003 5 4.8665 1 0.0881 1 1.3481 1 0.0152 1 1.0 1 1.1138 1 0.0 0 0.0152 2 0.1251 2)
Average genome size in population (length): 90.468
Average program size in population (points): 91.468
Average percent parens in population: 0.011
Minimum age in population: 270.2859811889072
Maximum age in population: 274.9197492035595
Average age in population: 272.8296321882757
Median age in population: 272.8471188974736
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.303
Error (vector) diversity:			 0.315
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 419481093
--- Timings ---
Current time: 1529616740059 milliseconds
Total Time:         767.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.6 seconds, 31.6%
Fitness Testing:    419.2 seconds, 54.6%
Report:             105.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_853} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup})
Best program: (in2 integer_flush integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin float_sin float_stackdepth float_max tag_float_853 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_shove float_dec integer_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec float_dup_items float_dec float_dec integer_pop float_dec float_dec integer_flush print_float integer_sub float_mod integer_dup integer_yankdup)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2921.345851200003
Median total errors in population: 697.9392000000001
Error averages by case: (108.20319749999987 4.79 100.08373520000042 7.243 103.3605579000002 8.932 102.80651480000066 8.511 96.67706520000002 3.96 98.39673289999996 10.839 102.6615565000001 4.062 106.2066799 4.628 138.90837800000006 4.376 112.42125719999899 8.31 106.56695350000071 8.491 105.12571399999983 4.704 93.1038020999998 7.657 103.81228480000064 11.709 129.83062260000128 10.728 129.01908640000133 7.682 135.93256340000127 8.878 95.14625399999967 9.233 134.84773359999983 4.806 97.7445917999995 7.944 106.3065396 4.661 96.68643219999971 9.127 100.03567220000006 4.33 100.83655459999937 7.833 137.98537130000003 5.206)
Error minima by case: (1.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 21.7976 1 0.0759 1 0.0152 2 0.1847 1 0.0152 1 0.2852 7 2.0455 7 0.4003 5 2.0455 1 0.0338 1 17.6634 1 0.0152 1 2.0 1 0.0759 1 1.0 1 0.0152 2 2.8749 2)
Average genome size in population (length): 90.03
Average program size in population (points): 91.03
Average percent parens in population: 0.011
Minimum age in population: 271.2859811889072
Maximum age in population: 276.4711369917967
Average age in population: 274.0924854953834
Median age in population: 274.1205510868144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.304
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 421732043
--- Timings ---
Current time: 1529616743944 milliseconds
Total Time:         771.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.8 seconds, 31.6%
Fitness Testing:    421.4 seconds, 54.6%
Report:             105.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dec} {:instruction float_tan} {:instruction tag_integer_442} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_754} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction integer_div} {:instruction integer_min} {:instruction float_shove} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction print_float})
Best program: (float_add integer_dec float_tan tag_integer_442 integer_yankdup integer_dup_items in2 float_dup integer_stackdepth float_min float_sin in1 float_stackdepth float_max tag_float_754 float_inc float_dup_times float_add 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec integer_div integer_min float_shove float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_max float_dec integer_yankdup integer_yankdup float_dec integer_flush float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times integer_mod float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_pop float_dec integer_pop float_dec integer_dup_items float_dup_items float_dec float_shove float_dec float_yankdup float_dec integer_pop float_dec print_float)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2750.4621260000017
Median total errors in population: 693.0304000000001
Error averages by case: (100.77673429999996 4.274 93.4419312000002 7.116 96.54137010000015 8.917 96.18701610000042 8.439 86.13141880000003 3.41 88.72188230000005 10.824 96.84083230000007 3.571 95.66492560000006 4.147 131.1698551 3.834 107.86085659999883 8.294 99.91768240000077 8.425 98.92203739999995 4.21 88.17998049999976 7.547 97.83255720000048 11.656 123.60327590000134 10.677 123.96900330000143 7.515 131.47419270000148 8.826 91.5068898999996 9.241 126.83406399999993 4.294 91.17781219999966 7.856 98.168373 4.124 92.81599489999968 9.094 95.40648850000007 3.791 94.3749256999996 7.763 130.383026 4.714)
Error minima by case: (3.7076 1 0.0152 2 0.0152 1 0.0152 2 0.0 0 0.0 0 1.0 1 0.006 1 10.3061 1 0.0607 1 0.0152 2 0.3213 1 0.0152 1 0.2464 7 0.9054 7 0.4003 5 3.164 1 0.0152 1 5.1159 1 0.0152 1 0.5406 1 0.0152 1 1.0 1 0.0152 2 6.0716 2)
Average genome size in population (length): 89.933
Average program size in population (points): 90.933
Average percent parens in population: 0.011
Minimum age in population: 272.2859811889072
Maximum age in population: 277.5401806587988
Average age in population: 275.3992813163952
Median age in population: 275.4224428848095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.289
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 423980518
--- Timings ---
Current time: 1529616747893 milliseconds
Total Time:         775.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.0 seconds, 31.6%
Fitness Testing:    423.6 seconds, 54.6%
Report:             106.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 32957.847999999976
Test mean error for best: 16.47892
;;------------------------------
Outputs of best individual on training cases:
Correct output: -88.4056316151 | Program output: -70.4056316151
Correct output: 118.1232514128 | Program output: 116.1384664128
Correct output: 148.63744302   | Program output: 147.6526580199
Correct output: 130.4153758773 | Program output: 126.4305908772
Correct output: 65.2536404507  | Program output: 61.2536404507 
Correct output: 4.8655188188   | Program output: -12.1344811812
Correct output: -62.096010847  | Program output: -82.096010847 
Correct output: 51.8846341345  | Program output: 66.8846341345 
Correct output: -156.9063992578 | Program output: -106.9063992578
Correct output: 48.3253799002  | Program output: 89.3405949001 
Correct output: 144.7196283487 | Program output: 137.7348433486
Correct output: -54.8304712332 | Program output: -80.8304712332
Correct output: -32.7715995596 | Program output: -32.7563845597
Correct output: 9.2244792798   | Program output: -9.7603057203 
Correct output: 43.1776070233  | Program output: -6.8071779768 
Correct output: 54.4783529715  | Program output: 5.4935679715  
Correct output: 116.7753441439 | Program output: 66.7905591439 
Correct output: -14.0030129507 | Program output: -0.9877979508 
Correct output: -97.2291531171 | Program output: -48.2291531171
Correct output: 95.3718423817  | Program output: 98.3870573816 
Correct output: 68.9270088853  | Program output: 45.9270088853 
Correct output: 47.7647765473  | Program output: 61.7799915472 
Correct output: -48.9289686304 | Program output: -68.9289686304
Correct output: 109.5193913412 | Program output: 115.5346063412
Correct output: -125.1250740365 | Program output: -75.1250740365
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_stackdepth} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction -14.92010430989157} {:instruction float_tan} {:instruction integer_mod} {:instruction tag_integer_442} {:instruction in2} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_min} {:instruction float_min} {:instruction float_sin} {:instruction in1} {:instruction float_stackdepth} {:instruction float_max} {:instruction tag_float_853} {:instruction 38.07590924596505} {:instruction in1} {:instruction float_add} {:instruction float_max} {:instruction float_dup_times} {:instruction 38.939305753985195} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_add} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_times} {:instruction print_float} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction tag_float_932})
Best program: (float_stackdepth integer_dup_items float_add integer_dup_items integer_dup_items -14.92010430989157 float_tan integer_mod tag_integer_442 in2 integer_shove integer_stackdepth float_min float_min float_sin in1 float_stackdepth float_max tag_float_853 38.07590924596505 in1 float_add float_max float_dup_times 38.939305753985195 float_inc float_dup_times float_add in1 float_dec float_stackdepth integer_min float_shove float_dec float_dec integer_shove integer_max float_shove float_dec float_dec float_shove float_dec float_dec float_dec integer_dup_times float_shove float_dec integer_yankdup integer_flush float_dec integer_yankdup float_shove float_dec integer_max float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec integer_dup_times float_shove float_dec float_dec integer_flush float_dec integer_flush float_dec float_dec float_dup_items float_dec float_dec float_dec integer_pop integer_rot float_dec float_dec integer_flush float_dec float_dec integer_pop float_dec float_dec float_dup_times print_float integer_sub float_mod integer_dup integer_yankdup tag_float_932)
Errors: [18.0 2 1.9848 6 0.9848 9 3.9848 8 4.0 1 17.0 11 20.0 1 15.0 2 50.0 1 41.0152 8 6.9848 8 26.0 2 0.0152 6 18.9848 11 49.9848 10 48.9848 5 49.9848 7 13.0152 9 49.0 2 3.0152 7 23.0 2 14.0152 8 20.0 1 6.0152 7 50.0 2]
Total: 686.9696000000001
Mean: 13.739392
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2509.643803200003
Median total errors in population: 694.0608000000002
Error averages by case: (90.71430369999986 4.502 84.23605350000018 7.086 87.4098866000003 8.907 86.89331840000061 8.354 79.47070529999999 3.632 81.15836489999997 10.763 84.2511941 3.801 89.49102209999994 4.378 119.38291799999992 4.012 98.46114579999893 8.254 90.6793998000007 8.343 86.52774519999993 4.389 77.70273610000001 7.476 88.49413920000067 11.649 114.94383530000127 10.653 113.5345485000014 7.543 120.82076790000143 8.78 79.9242796999997 9.121 118.42114589999977 4.539 82.00007399999974 7.866 90.42655819999997 4.298 81.3584203999997 9.063 83.74750670000002 4.054 85.0816496999995 7.646 120.52008419999997 4.883)
Error minima by case: (1.0 1 0.0152 2 0.0152 2 0.0152 2 0.0 0 1.0 1 0.0 0 1.006 1 7.4869 1 0.4468 1 0.0072 2 0.0 0 0.0152 1 0.1486 7 1.8224 7 0.4003 5 1.0181 1 0.0152 1 3.0489 1 0.0152 1 0.0 0 0.0759 1 0.0 0 0.0152 2 3.1251 2)
Average genome size in population (length): 89.652
Average program size in population (points): 90.652
Average percent parens in population: 0.011
Minimum age in population: 273.8882669076962
Maximum age in population: 278.8532922174002
Average age in population: 276.6922052749383
Median age in population: 276.7207334283216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.314
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 426222018
--- Timings ---
Current time: 1529616751979 milliseconds
Total Time:         779.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.2 seconds, 31.6%
Fitness Testing:    425.8 seconds, 54.7%
Report:             106.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
