Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-72.63447345371831 34] -38.634473453718314]
Train Case:   1 | Input/Output: [[-53.916374669601375 52] -1.9163746696013746]
Train Case:   2 | Input/Output: [[-42.604225869887834 -95] -137.60422586988784]
Train Case:   3 | Input/Output: [[78.30703929226493 -42] 36.30703929226493]
Train Case:   4 | Input/Output: [[92.27363349998686 -20] 72.27363349998686]
Train Case:   5 | Input/Output: [[47.75177550181212 16] 63.75177550181212]
Train Case:   6 | Input/Output: [[-70.3545601135852 -56] -126.3545601135852]
Train Case:   7 | Input/Output: [[4.111255679387881 -72] -67.88874432061212]
Train Case:   8 | Input/Output: [[-17.902448993411 87] 69.097551006589]
Train Case:   9 | Input/Output: [[-85.29573715943536 83] -2.2957371594353617]
Train Case:  10 | Input/Output: [[12.595156424533755 78] 90.59515642453376]
Train Case:  11 | Input/Output: [[90.33753331437018 -4] 86.33753331437018]
Train Case:  12 | Input/Output: [[38.11993984068326 -82] -43.88006015931674]
Train Case:  13 | Input/Output: [[12.447852639746571 53] 65.44785263974657]
Train Case:  14 | Input/Output: [[34.48571791714238 -45] -10.51428208285762]
Train Case:  15 | Input/Output: [[78.29613179507635 -37] 41.29613179507635]
Train Case:  16 | Input/Output: [[-4.487663604370383 -82] -86.48766360437038]
Train Case:  17 | Input/Output: [[5.364470875159455 75] 80.36447087515945]
Train Case:  18 | Input/Output: [[-46.30109524331721 64] 17.698904756682794]
Train Case:  19 | Input/Output: [[-71.99448965347767 -85] -156.99448965347767]
Train Case:  20 | Input/Output: [[-25.314655707604274 -35] -60.314655707604274]
Train Case:  21 | Input/Output: [[27.44541041474136 -86] -58.55458958525864]
Train Case:  22 | Input/Output: [[-6.086054253099363 20] 13.913945746900637]
Train Case:  23 | Input/Output: [[22.265092425329527 -5] 17.265092425329527]
Train Case:  24 | Input/Output: [[-5.010726345574824 67] 61.989273654425176]
Test Case:   0 | Input/Output: [[-94.9858063133803 82] -12.985806313380294]
Test Case:   1 | Input/Output: [[86.26865888022533 26] 112.26865888022533]
Test Case:   2 | Input/Output: [[-49.157589488182076 -88] -137.15758948818208]
Test Case:   3 | Input/Output: [[-9.138904649145289 -69] -78.13890464914529]
Test Case:   4 | Input/Output: [[-18.158052450953505 -37] -55.158052450953505]
Test Case:   5 | Input/Output: [[78.05895914342636 -80] -1.9410408565736361]
Test Case:   6 | Input/Output: [[-46.395345626618244 -4] -50.395345626618244]
Test Case:   7 | Input/Output: [[9.252899239820024 -34] -24.747100760179976]
Test Case:   8 | Input/Output: [[-18.2997348628422 66] 47.7002651371578]
Test Case:   9 | Input/Output: [[-75.72881432612688 23] -52.72881432612688]
Test Case:  10 | Input/Output: [[46.22090240051182 -23] 23.220902400511818]
Test Case:  11 | Input/Output: [[71.17588648084069 70] 141.1758864808407]
Test Case:  12 | Input/Output: [[-94.56680755175246 -8] -102.56680755175246]
Test Case:  13 | Input/Output: [[-17.201322049528784 -69] -86.20132204952878]
Test Case:  14 | Input/Output: [[68.60765856493512 16] 84.60765856493512]
Test Case:  15 | Input/Output: [[-7.036429784066044 -33] -40.036429784066044]
Test Case:  16 | Input/Output: [[-29.948081514475078 39] 9.051918485524922]
Test Case:  17 | Input/Output: [[-27.86875672841127 55] 27.13124327158873]
Test Case:  18 | Input/Output: [[64.01354039929231 -88] -23.98645960070769]
Test Case:  19 | Input/Output: [[-41.17397581815994 77] 35.82602418184006]
Test Case:  20 | Input/Output: [[81.36911159564522 -96] -14.630888404354778]
Test Case:  21 | Input/Output: [[79.6199466844811 -8] 71.6199466844811]
Test Case:  22 | Input/Output: [[12.739501308679507 73] 85.73950130867951]
Test Case:  23 | Input/Output: [[-44.931213830151265 -18] -62.931213830151265]
Test Case:  24 | Input/Output: [[-24.595503973744485 37] 12.404496026255515]
Test Case:  25 | Input/Output: [[34.4086147299364 14] 48.4086147299364]
Test Case:  26 | Input/Output: [[-30.57530589041211 -15] -45.57530589041211]
Test Case:  27 | Input/Output: [[-20.448493158743844 -26] -46.448493158743844]
Test Case:  28 | Input/Output: [[2.9268136905353543 26] 28.926813690535354]
Test Case:  29 | Input/Output: [[26.904648656224765 66] 92.90464865622477]
Test Case:  30 | Input/Output: [[-23.404637177472438 -99] -122.40463717747244]
Test Case:  31 | Input/Output: [[63.85456294546708 -88] -24.14543705453292]
Test Case:  32 | Input/Output: [[59.70162132569169 46] 105.70162132569169]
Test Case:  33 | Input/Output: [[7.882584613615819 59] 66.88258461361582]
Test Case:  34 | Input/Output: [[23.766593180833027 17] 40.76659318083303]
Test Case:  35 | Input/Output: [[35.0081458071038 88] 123.0081458071038]
Test Case:  36 | Input/Output: [[78.15750273940085 81] 159.15750273940085]
Test Case:  37 | Input/Output: [[-99.81968579958244 4] -95.81968579958244]
Test Case:  38 | Input/Output: [[64.63935652907216 38] 102.63935652907216]
Test Case:  39 | Input/Output: [[63.72536069236358 -49] 14.72536069236358]
Test Case:  40 | Input/Output: [[-43.407606632115005 47] 3.592393367884995]
Test Case:  41 | Input/Output: [[36.5219842229119 -61] -24.478015777088103]
Test Case:  42 | Input/Output: [[-9.94253567195382 -11] -20.94253567195382]
Test Case:  43 | Input/Output: [[79.93509763342337 55] 134.93509763342337]
Test Case:  44 | Input/Output: [[82.70483015936645 71] 153.70483015936645]
Test Case:  45 | Input/Output: [[-90.01045163563298 67] -23.010451635632975]
Test Case:  46 | Input/Output: [[-97.96054802968645 -83] -180.96054802968644]
Test Case:  47 | Input/Output: [[31.63597242658065 43] 74.63597242658065]
Test Case:  48 | Input/Output: [[-16.954083774826586 -37] -53.954083774826586]
Test Case:  49 | Input/Output: [[-94.27047910097748 -1] -95.27047910097748]
Test Case:  50 | Input/Output: [[31.12454878467392 -48] -16.87545121532608]
Test Case:  51 | Input/Output: [[-47.100576616199284 10] -37.100576616199284]
Test Case:  52 | Input/Output: [[-99.89540326001338 43] -56.89540326001338]
Test Case:  53 | Input/Output: [[-60.085073493996056 -11] -71.08507349399605]
Test Case:  54 | Input/Output: [[17.58059193346375 40] 57.58059193346375]
Test Case:  55 | Input/Output: [[-18.52045560638078 -10] -28.52045560638078]
Test Case:  56 | Input/Output: [[-11.798099796855695 28] 16.201900203144305]
Test Case:  57 | Input/Output: [[7.6860897596111215 -27] -19.31391024038888]
Test Case:  58 | Input/Output: [[-64.65772693336194 -91] -155.65772693336194]
Test Case:  59 | Input/Output: [[-89.57038233502736 84] -5.570382335027361]
Test Case:  60 | Input/Output: [[65.29737853442487 -52] 13.297378534424865]
Test Case:  61 | Input/Output: [[-50.93704010329936 -50] -100.93704010329935]
Test Case:  62 | Input/Output: [[77.50280275405638 97] 174.50280275405638]
Test Case:  63 | Input/Output: [[-12.461706908561737 100] 87.53829309143826]
Test Case:  64 | Input/Output: [[-38.713616923775774 -25] -63.713616923775774]
Test Case:  65 | Input/Output: [[-89.07007283107735 -83] -172.07007283107737]
Test Case:  66 | Input/Output: [[85.45589914176824 -34] 51.45589914176824]
Test Case:  67 | Input/Output: [[24.281929961957147 19] 43.28192996195715]
Test Case:  68 | Input/Output: [[-47.851350907350486 -54] -101.85135090735048]
Test Case:  69 | Input/Output: [[-89.60529639893171 78] -11.605296398931713]
Test Case:  70 | Input/Output: [[0.11945068970622685 -92] -91.88054931029377]
Test Case:  71 | Input/Output: [[-71.81240429087019 31] -40.81240429087019]
Test Case:  72 | Input/Output: [[-11.132015790823218 -74] -85.13201579082322]
Test Case:  73 | Input/Output: [[79.98811359917349 -26] 53.98811359917349]
Test Case:  74 | Input/Output: [[5.9499641948293345 -64] -58.050035805170666]
Test Case:  75 | Input/Output: [[43.31978619972813 -57] -13.680213800271872]
Test Case:  76 | Input/Output: [[-47.484623437254726 -9] -56.484623437254726]
Test Case:  77 | Input/Output: [[-83.24353495462145 63] -20.243534954621452]
Test Case:  78 | Input/Output: [[-84.02381495641826 -35] -119.02381495641826]
Test Case:  79 | Input/Output: [[52.53539066273618 28] 80.53539066273618]
Test Case:  80 | Input/Output: [[17.817927334647308 93] 110.81792733464731]
Test Case:  81 | Input/Output: [[-86.67998493734291 -56] -142.6799849373429]
Test Case:  82 | Input/Output: [[32.63406860478844 55] 87.63406860478844]
Test Case:  83 | Input/Output: [[65.60485399790724 95] 160.60485399790724]
Test Case:  84 | Input/Output: [[-66.32995897670813 -71] -137.32995897670813]
Test Case:  85 | Input/Output: [[-14.123791325850775 -50] -64.12379132585077]
Test Case:  86 | Input/Output: [[23.33824214166897 51] 74.33824214166897]
Test Case:  87 | Input/Output: [[-5.348718308305564 63] 57.651281691694436]
Test Case:  88 | Input/Output: [[78.25733209159102 6] 84.25733209159102]
Test Case:  89 | Input/Output: [[-62.56980994609431 27] -35.56980994609431]
Test Case:  90 | Input/Output: [[-71.1445102299548 51] -20.144510229954804]
Test Case:  91 | Input/Output: [[85.62187588324696 28] 113.62187588324696]
Test Case:  92 | Input/Output: [[98.748514623879 5] 103.748514623879]
Test Case:  93 | Input/Output: [[66.64701966649915 -55] 11.647019666499148]
Test Case:  94 | Input/Output: [[-6.025729005557963 71] 64.97427099444204]
Test Case:  95 | Input/Output: [[18.862968581548344 71] 89.86296858154834]
Test Case:  96 | Input/Output: [[-62.953644165522185 -14] -76.95364416552218]
Test Case:  97 | Input/Output: [[-51.48832796596743 -90] -141.48832796596741]
Test Case:  98 | Input/Output: [[-34.737894926245346 94] 59.262105073754654]
Test Case:  99 | Input/Output: [[5.351056426515228 -36] -30.64894357348477]
Test Case: 100 | Input/Output: [[-55.47101355613997 25] -30.471013556139972]
Test Case: 101 | Input/Output: [[36.48817656252754 -23] 13.488176562527542]
Test Case: 102 | Input/Output: [[82.56997033700347 54] 136.56997033700347]
Test Case: 103 | Input/Output: [[82.08795917124485 -36] 46.08795917124485]
Test Case: 104 | Input/Output: [[38.26974747734977 78] 116.26974747734977]
Test Case: 105 | Input/Output: [[71.79775952669456 -6] 65.79775952669456]
Test Case: 106 | Input/Output: [[16.499306835131947 -95] -78.50069316486805]
Test Case: 107 | Input/Output: [[-2.731217860777619 -60] -62.73121786077762]
Test Case: 108 | Input/Output: [[-2.955470926453117 47] 44.04452907354688]
Test Case: 109 | Input/Output: [[-8.834858151399814 -43] -51.834858151399814]
Test Case: 110 | Input/Output: [[-42.60488137282172 87] 44.39511862717828]
Test Case: 111 | Input/Output: [[39.34132486185936 -17] 22.341324861859363]
Test Case: 112 | Input/Output: [[-37.01930313820665 59] 21.980696861793348]
Test Case: 113 | Input/Output: [[71.43006260703442 4] 75.43006260703442]
Test Case: 114 | Input/Output: [[69.7556188170403 -85] -15.2443811829597]
Test Case: 115 | Input/Output: [[-41.21450744626893 57] 15.785492553731068]
Test Case: 116 | Input/Output: [[18.44907932387774 -89] -70.55092067612226]
Test Case: 117 | Input/Output: [[92.07385257907882 17] 109.07385257907882]
Test Case: 118 | Input/Output: [[18.09095099809126 -68] -49.90904900190874]
Test Case: 119 | Input/Output: [[-63.876089274772 -35] -98.876089274772]
Test Case: 120 | Input/Output: [[-71.93583818402695 65] -6.935838184026949]
Test Case: 121 | Input/Output: [[40.033018438935045 2] 42.033018438935045]
Test Case: 122 | Input/Output: [[74.7383459248272 67] 141.7383459248272]
Test Case: 123 | Input/Output: [[-64.88186233345523 -34] -98.88186233345523]
Test Case: 124 | Input/Output: [[-18.44437790166333 17] -1.44437790166333]
Test Case: 125 | Input/Output: [[12.014380531545399 100] 112.0143805315454]
Test Case: 126 | Input/Output: [[-69.70246946996915 51] -18.702469469969145]
Test Case: 127 | Input/Output: [[-3.3311883262346953 -52] -55.331188326234695]
Test Case: 128 | Input/Output: [[-96.93503009491036 -90] -186.93503009491036]
Test Case: 129 | Input/Output: [[63.493595280276026 -60] 3.4935952802760255]
Test Case: 130 | Input/Output: [[20.47610936700326 50] 70.47610936700326]
Test Case: 131 | Input/Output: [[-24.720523383641904 -70] -94.7205233836419]
Test Case: 132 | Input/Output: [[96.06960610443102 54] 150.06960610443102]
Test Case: 133 | Input/Output: [[-73.31565440048479 -39] -112.31565440048479]
Test Case: 134 | Input/Output: [[-63.88539925403185 37] -26.885399254031853]
Test Case: 135 | Input/Output: [[-51.5302313663818 90] 38.4697686336182]
Test Case: 136 | Input/Output: [[74.41962046192464 56] 130.41962046192464]
Test Case: 137 | Input/Output: [[-65.78329900801853 51] -14.783299008018531]
Test Case: 138 | Input/Output: [[-69.78743224833883 47] -22.78743224833883]
Test Case: 139 | Input/Output: [[-39.809782704922526 -8] -47.809782704922526]
Test Case: 140 | Input/Output: [[60.23879123128876 39] 99.23879123128876]
Test Case: 141 | Input/Output: [[95.31876411701535 89] 184.31876411701535]
Test Case: 142 | Input/Output: [[44.831981257240386 -82] -37.168018742759614]
Test Case: 143 | Input/Output: [[-60.46662440936272 46] -14.466624409362723]
Test Case: 144 | Input/Output: [[-3.5216052571497016 47] 43.4783947428503]
Test Case: 145 | Input/Output: [[-0.6248029313052257 -35] -35.624802931305226]
Test Case: 146 | Input/Output: [[-75.24677732473688 14] -61.24677732473688]
Test Case: 147 | Input/Output: [[33.95536854517013 74] 107.95536854517013]
Test Case: 148 | Input/Output: [[-52.18852802145912 -19] -71.18852802145912]
Test Case: 149 | Input/Output: [[73.05500656325336 16] 89.05500656325336]
Test Case: 150 | Input/Output: [[-8.343457028094164 39] 30.656542971905836]
Test Case: 151 | Input/Output: [[12.669547477794652 62] 74.66954747779465]
Test Case: 152 | Input/Output: [[-31.334725751946692 -38] -69.33472575194669]
Test Case: 153 | Input/Output: [[21.529546477818528 -86] -64.47045352218147]
Test Case: 154 | Input/Output: [[81.18581988040668 37] 118.18581988040668]
Test Case: 155 | Input/Output: [[-41.49026096176358 80] 38.50973903823642]
Test Case: 156 | Input/Output: [[4.543512250087673 74] 78.54351225008767]
Test Case: 157 | Input/Output: [[68.24064766649431 -69] -0.7593523335056886]
Test Case: 158 | Input/Output: [[-18.916555826763528 -97] -115.91655582676353]
Test Case: 159 | Input/Output: [[-2.3777569169445343 -40] -42.377756916944534]
Test Case: 160 | Input/Output: [[95.85417896005302 11] 106.85417896005302]
Test Case: 161 | Input/Output: [[-93.70597609437345 -62] -155.70597609437345]
Test Case: 162 | Input/Output: [[11.834822408714757 -57] -45.16517759128524]
Test Case: 163 | Input/Output: [[-18.884013215467604 61] 42.115986784532396]
Test Case: 164 | Input/Output: [[95.59483903943905 -23] 72.59483903943905]
Test Case: 165 | Input/Output: [[9.7890038862611 32] 41.7890038862611]
Test Case: 166 | Input/Output: [[77.59241976216762 -65] 12.592419762167623]
Test Case: 167 | Input/Output: [[61.63840298930367 -12] 49.63840298930367]
Test Case: 168 | Input/Output: [[31.758343873774322 34] 65.75834387377432]
Test Case: 169 | Input/Output: [[24.479491731716934 59] 83.47949173171693]
Test Case: 170 | Input/Output: [[64.13925970028964 -27] 37.13925970028964]
Test Case: 171 | Input/Output: [[-9.795560072235148 56] 46.20443992776485]
Test Case: 172 | Input/Output: [[77.07727860472636 8] 85.07727860472636]
Test Case: 173 | Input/Output: [[51.60750105920923 88] 139.60750105920923]
Test Case: 174 | Input/Output: [[70.47017254474832 -38] 32.47017254474832]
Test Case: 175 | Input/Output: [[-72.73137872992743 -97] -169.73137872992743]
Test Case: 176 | Input/Output: [[67.91889067979585 -78] -10.081109320204149]
Test Case: 177 | Input/Output: [[91.0730804389506 31] 122.0730804389506]
Test Case: 178 | Input/Output: [[50.44824931002739 -100] -49.55175068997261]
Test Case: 179 | Input/Output: [[-75.61141743644598 -57] -132.61141743644598]
Test Case: 180 | Input/Output: [[44.77945506537378 78] 122.77945506537378]
Test Case: 181 | Input/Output: [[33.956260658681344 49] 82.95626065868134]
Test Case: 182 | Input/Output: [[-1.0853680185526144 -21] -22.085368018552614]
Test Case: 183 | Input/Output: [[5.691559160710241 -49] -43.30844083928976]
Test Case: 184 | Input/Output: [[26.712099935509116 17] 43.712099935509116]
Test Case: 185 | Input/Output: [[2.324002881907731 55] 57.32400288190773]
Test Case: 186 | Input/Output: [[-72.54500649971025 -66] -138.54500649971027]
Test Case: 187 | Input/Output: [[66.72191919163996 64] 130.72191919163996]
Test Case: 188 | Input/Output: [[44.710310028239206 17] 61.710310028239206]
Test Case: 189 | Input/Output: [[73.24391017731932 -81] -7.7560898226806785]
Test Case: 190 | Input/Output: [[64.25039553436955 -25] 39.250395534369545]
Test Case: 191 | Input/Output: [[-70.33637770096087 12] -58.33637770096087]
Test Case: 192 | Input/Output: [[-2.9534587616002312 96] 93.04654123839977]
Test Case: 193 | Input/Output: [[2.877357259486729 -2] 0.8773572594867289]
Test Case: 194 | Input/Output: [[-84.57587357790786 -76] -160.57587357790786]
Test Case: 195 | Input/Output: [[-47.47634710055719 -6] -53.47634710055719]
Test Case: 196 | Input/Output: [[82.24728337951652 -94] -11.752716620483483]
Test Case: 197 | Input/Output: [[1.5751525203861405 -29] -27.42484747961386]
Test Case: 198 | Input/Output: [[-32.49970357021937 47] 14.500296429780633]
Test Case: 199 | Input/Output: [[-42.16431258783473 -48] -90.16431258783473]
Test Case: 200 | Input/Output: [[18.78240912668585 78] 96.78240912668585]
Test Case: 201 | Input/Output: [[73.31243758805923 -27] 46.312437588059225]
Test Case: 202 | Input/Output: [[58.346611959963525 58] 116.34661195996352]
Test Case: 203 | Input/Output: [[97.10574775260002 -99] -1.8942522473999759]
Test Case: 204 | Input/Output: [[-98.9967891383061 -26] -124.9967891383061]
Test Case: 205 | Input/Output: [[-21.102011147343063 88] 66.89798885265694]
Test Case: 206 | Input/Output: [[81.54999891125522 -15] 66.54999891125522]
Test Case: 207 | Input/Output: [[40.90296264704142 -55] -14.09703735295858]
Test Case: 208 | Input/Output: [[8.094520802323217 2] 10.094520802323217]
Test Case: 209 | Input/Output: [[96.12420097916302 -93] 3.124200979163021]
Test Case: 210 | Input/Output: [[77.52245873119378 25] 102.52245873119378]
Test Case: 211 | Input/Output: [[50.01439106977969 -79] -28.98560893022031]
Test Case: 212 | Input/Output: [[-67.04175720195305 -62] -129.04175720195303]
Test Case: 213 | Input/Output: [[89.72253593981367 -35] 54.72253593981367]
Test Case: 214 | Input/Output: [[-11.7058215321251 28] 16.2941784678749]
Test Case: 215 | Input/Output: [[0.016366326567165856 3] 3.016366326567166]
Test Case: 216 | Input/Output: [[14.738899024992278 -60] -45.26110097500772]
Test Case: 217 | Input/Output: [[53.84546289295446 27] 80.84546289295446]
Test Case: 218 | Input/Output: [[91.88889278513699 -5] 86.88889278513699]
Test Case: 219 | Input/Output: [[76.59546652937831 23] 99.59546652937831]
Test Case: 220 | Input/Output: [[-48.383647673289246 -50] -98.38364767328925]
Test Case: 221 | Input/Output: [[25.696250779454772 18] 43.69625077945477]
Test Case: 222 | Input/Output: [[88.9274585363112 -17] 71.9274585363112]
Test Case: 223 | Input/Output: [[53.18820469669606 67] 120.18820469669606]
Test Case: 224 | Input/Output: [[-90.03984013754996 24] -66.03984013754996]
Test Case: 225 | Input/Output: [[34.80746997827734 99] 133.80746997827734]
Test Case: 226 | Input/Output: [[-96.66964403122469 -22] -118.66964403122469]
Test Case: 227 | Input/Output: [[-26.918402635184876 -53] -79.91840263518488]
Test Case: 228 | Input/Output: [[-59.690471001681104 -85] -144.6904710016811]
Test Case: 229 | Input/Output: [[72.64431069352796 84] 156.64431069352796]
Test Case: 230 | Input/Output: [[-57.896668736584104 -64] -121.8966687365841]
Test Case: 231 | Input/Output: [[-39.79066005937215 -60] -99.79066005937216]
Test Case: 232 | Input/Output: [[-7.912971740067775 92] 84.08702825993223]
Test Case: 233 | Input/Output: [[-28.724088371767124 -17] -45.724088371767124]
Test Case: 234 | Input/Output: [[-21.368718371581124 -57] -78.36871837158112]
Test Case: 235 | Input/Output: [[16.432072604781126 81] 97.43207260478113]
Test Case: 236 | Input/Output: [[70.05023779515827 -21] 49.05023779515827]
Test Case: 237 | Input/Output: [[-79.70729630893823 -17] -96.70729630893823]
Test Case: 238 | Input/Output: [[25.103453175775897 -81] -55.8965468242241]
Test Case: 239 | Input/Output: [[65.54464386673976 41] 106.54464386673976]
Test Case: 240 | Input/Output: [[95.83498155217652 62] 157.83498155217652]
Test Case: 241 | Input/Output: [[24.87504107596952 31] 55.87504107596952]
Test Case: 242 | Input/Output: [[16.771942278435375 -34] -17.228057721564625]
Test Case: 243 | Input/Output: [[50.518969263265774 19] 69.51896926326577]
Test Case: 244 | Input/Output: [[38.837643952726495 78] 116.8376439527265]
Test Case: 245 | Input/Output: [[-32.519554084168604 -14] -46.519554084168604]
Test Case: 246 | Input/Output: [[36.92613202623269 -80] -43.07386797376731]
Test Case: 247 | Input/Output: [[31.482039998749514 -95] -63.517960001250486]
Test Case: 248 | Input/Output: [[29.987567713044598 84] 113.9875677130446]
Test Case: 249 | Input/Output: [[-29.97759935129865 -57] -86.97759935129865]
Test Case: 250 | Input/Output: [[-39.454860353351194 -18] -57.454860353351194]
Test Case: 251 | Input/Output: [[-73.51811079448316 -50] -123.51811079448316]
Test Case: 252 | Input/Output: [[42.58260366800528 -59] -16.417396331994723]
Test Case: 253 | Input/Output: [[-47.94394437308429 -75] -122.94394437308429]
Test Case: 254 | Input/Output: [[-18.0706818147887 -14] -32.0706818147887]
Test Case: 255 | Input/Output: [[28.229891251284812 -56] -27.770108748715188]
Test Case: 256 | Input/Output: [[94.81489006812177 -20] 74.81489006812177]
Test Case: 257 | Input/Output: [[39.89692810645033 -60] -20.103071893549668]
Test Case: 258 | Input/Output: [[47.93940882249569 90] 137.9394088224957]
Test Case: 259 | Input/Output: [[34.1452336368813 -96] -61.8547663631187]
Test Case: 260 | Input/Output: [[2.3436867606217078 2] 4.343686760621708]
Test Case: 261 | Input/Output: [[51.37178639886045 23] 74.37178639886045]
Test Case: 262 | Input/Output: [[-68.93784876198859 -4] -72.93784876198859]
Test Case: 263 | Input/Output: [[22.01809470462777 -33] -10.98190529537223]
Test Case: 264 | Input/Output: [[-29.25672794038283 -82] -111.25672794038283]
Test Case: 265 | Input/Output: [[-45.98472637013595 77] 31.015273629864048]
Test Case: 266 | Input/Output: [[-3.346487730737664 -28] -31.346487730737664]
Test Case: 267 | Input/Output: [[-73.82388173877013 -2] -75.82388173877013]
Test Case: 268 | Input/Output: [[57.34173272045581 94] 151.3417327204558]
Test Case: 269 | Input/Output: [[-79.1906453903739 -14] -93.1906453903739]
Test Case: 270 | Input/Output: [[-6.368086419035436 63] 56.631913580964564]
Test Case: 271 | Input/Output: [[64.37115613985816 -7] 57.37115613985816]
Test Case: 272 | Input/Output: [[-1.5137367072289862 75] 73.48626329277101]
Test Case: 273 | Input/Output: [[18.801731731942198 33] 51.8017317319422]
Test Case: 274 | Input/Output: [[-51.50632129478336 60] 8.493678705216638]
Test Case: 275 | Input/Output: [[6.037001631245104 19] 25.037001631245104]
Test Case: 276 | Input/Output: [[-96.18110485256001 33] -63.18110485256001]
Test Case: 277 | Input/Output: [[19.24640166620722 27] 46.24640166620722]
Test Case: 278 | Input/Output: [[82.89364183886855 81] 163.89364183886855]
Test Case: 279 | Input/Output: [[37.99713299880821 -72] -34.00286700119179]
Test Case: 280 | Input/Output: [[23.846287623490994 -43] -19.153712376509006]
Test Case: 281 | Input/Output: [[42.57668355719855 -55] -12.42331644280145]
Test Case: 282 | Input/Output: [[96.19586196322717 -58] 38.19586196322717]
Test Case: 283 | Input/Output: [[-93.44408808410707 -22] -115.44408808410707]
Test Case: 284 | Input/Output: [[88.56921522311603 -71] 17.569215223116032]
Test Case: 285 | Input/Output: [[93.88081834131509 33] 126.88081834131509]
Test Case: 286 | Input/Output: [[-17.519606738603642 21] 3.480393261396358]
Test Case: 287 | Input/Output: [[-81.97111328058845 29] -52.971113280588455]
Test Case: 288 | Input/Output: [[-63.759652747079976 -1] -64.75965274707997]
Test Case: 289 | Input/Output: [[-54.80350631100015 44] -10.803506311000149]
Test Case: 290 | Input/Output: [[99.66912579863023 80] 179.66912579863023]
Test Case: 291 | Input/Output: [[-81.16321614234734 61] -20.163216142347338]
Test Case: 292 | Input/Output: [[50.660187986528285 -7] 43.660187986528285]
Test Case: 293 | Input/Output: [[99.1463038110517 -76] 23.146303811051695]
Test Case: 294 | Input/Output: [[-15.072230522492447 61] 45.92776947750755]
Test Case: 295 | Input/Output: [[38.05037888107961 -49] -10.94962111892039]
Test Case: 296 | Input/Output: [[20.944261239859046 14] 34.944261239859046]
Test Case: 297 | Input/Output: [[-59.548011085241285 -72] -131.54801108524128]
Test Case: 298 | Input/Output: [[-47.09303839835384 95] 47.90696160164616]
Test Case: 299 | Input/Output: [[94.1479342593982 89] 183.1479342593982]
Test Case: 300 | Input/Output: [[95.31278819204258 -47] 48.312788192042575]
Test Case: 301 | Input/Output: [[64.37118475038005 45] 109.37118475038005]
Test Case: 302 | Input/Output: [[-67.33691177205954 80] 12.663088227940463]
Test Case: 303 | Input/Output: [[33.9846107278307 46] 79.9846107278307]
Test Case: 304 | Input/Output: [[97.38618917282523 -34] 63.386189172825226]
Test Case: 305 | Input/Output: [[50.58497601987784 -89] -38.41502398012216]
Test Case: 306 | Input/Output: [[-81.26373250573755 -22] -103.26373250573755]
Test Case: 307 | Input/Output: [[27.43058116151147 -52] -24.56941883848853]
Test Case: 308 | Input/Output: [[-74.39724301289172 20] -54.39724301289172]
Test Case: 309 | Input/Output: [[34.49841315346123 45] 79.49841315346123]
Test Case: 310 | Input/Output: [[52.29328424428974 -73] -20.706715755710263]
Test Case: 311 | Input/Output: [[-45.820402665975735 73] 27.179597334024265]
Test Case: 312 | Input/Output: [[44.33165609395962 4] 48.33165609395962]
Test Case: 313 | Input/Output: [[97.54455338385429 42] 139.5445533838543]
Test Case: 314 | Input/Output: [[-76.24038258047044 48] -28.24038258047044]
Test Case: 315 | Input/Output: [[-59.041394552093095 52] -7.041394552093095]
Test Case: 316 | Input/Output: [[-67.41213002378363 -7] -74.41213002378363]
Test Case: 317 | Input/Output: [[-65.4745915947878 99] 33.525408405212204]
Test Case: 318 | Input/Output: [[82.35989246930237 -7] 75.35989246930237]
Test Case: 319 | Input/Output: [[-32.39507025624597 2] -30.395070256245972]
Test Case: 320 | Input/Output: [[24.037708170227873 70] 94.03770817022787]
Test Case: 321 | Input/Output: [[-71.11422733815618 -9] -80.11422733815618]
Test Case: 322 | Input/Output: [[-23.322674884166844 76] 52.677325115833156]
Test Case: 323 | Input/Output: [[-56.133976820766726 75] 18.866023179233274]
Test Case: 324 | Input/Output: [[-75.10803261685325 3] -72.10803261685325]
Test Case: 325 | Input/Output: [[-91.20013837858644 -90] -181.20013837858644]
Test Case: 326 | Input/Output: [[67.00400389052109 26] 93.00400389052109]
Test Case: 327 | Input/Output: [[-47.4040382155819 27] -20.4040382155819]
Test Case: 328 | Input/Output: [[-9.5996945007291 -24] -33.5996945007291]
Test Case: 329 | Input/Output: [[30.096859787220154 67] 97.09685978722015]
Test Case: 330 | Input/Output: [[-3.3416389226441794 50] 46.65836107735582]
Test Case: 331 | Input/Output: [[-96.5742426562894 -52] -148.5742426562894]
Test Case: 332 | Input/Output: [[9.39984170691585 -68] -58.60015829308415]
Test Case: 333 | Input/Output: [[1.6710244214205972 18] 19.671024421420597]
Test Case: 334 | Input/Output: [[6.360540880653744 17] 23.360540880653744]
Test Case: 335 | Input/Output: [[-78.7276639882401 -75] -153.7276639882401]
Test Case: 336 | Input/Output: [[-46.38961140374758 -33] -79.38961140374758]
Test Case: 337 | Input/Output: [[-30.722600688059913 -21] -51.72260068805991]
Test Case: 338 | Input/Output: [[-12.135458005338265 -23] -35.135458005338265]
Test Case: 339 | Input/Output: [[89.72617710311044 -21] 68.72617710311044]
Test Case: 340 | Input/Output: [[-53.38204589303028 -98] -151.3820458930303]
Test Case: 341 | Input/Output: [[-61.57683395572382 71] 9.42316604427618]
Test Case: 342 | Input/Output: [[0.35626620830713307 -12] -11.643733791692867]
Test Case: 343 | Input/Output: [[79.34572746411743 -74] 5.345727464117431]
Test Case: 344 | Input/Output: [[10.647379789890365 -23] -12.352620210109635]
Test Case: 345 | Input/Output: [[-23.08210768678336 31] 7.91789231321664]
Test Case: 346 | Input/Output: [[-19.66207212205731 -29] -48.66207212205731]
Test Case: 347 | Input/Output: [[14.61662907928853 -53] -38.38337092071147]
Test Case: 348 | Input/Output: [[36.345434770033904 95] 131.3454347700339]
Test Case: 349 | Input/Output: [[-12.130398378080656 22] 9.869601621919344]
Test Case: 350 | Input/Output: [[10.947139315168641 92] 102.94713931516864]
Test Case: 351 | Input/Output: [[-94.23420076608812 -44] -138.23420076608812]
Test Case: 352 | Input/Output: [[-28.788952629485436 54] 25.211047370514564]
Test Case: 353 | Input/Output: [[-60.931671402892775 50] -10.931671402892775]
Test Case: 354 | Input/Output: [[-61.701799106442756 -59] -120.70179910644276]
Test Case: 355 | Input/Output: [[-92.69447186981795 24] -68.69447186981795]
Test Case: 356 | Input/Output: [[72.19493653590209 9] 81.19493653590209]
Test Case: 357 | Input/Output: [[10.131938184603897 -42] -31.868061815396103]
Test Case: 358 | Input/Output: [[27.632735498575258 83] 110.63273549857526]
Test Case: 359 | Input/Output: [[-12.973769791196759 97] 84.02623020880324]
Test Case: 360 | Input/Output: [[60.71587690255393 88] 148.71587690255393]
Test Case: 361 | Input/Output: [[84.41584906125769 82] 166.4158490612577]
Test Case: 362 | Input/Output: [[-76.61748056862841 -19] -95.61748056862841]
Test Case: 363 | Input/Output: [[42.240726600984175 17] 59.240726600984175]
Test Case: 364 | Input/Output: [[-82.86969571797806 -54] -136.86969571797806]
Test Case: 365 | Input/Output: [[6.0828635867144385 69] 75.08286358671444]
Test Case: 366 | Input/Output: [[-45.34439129148284 90] 44.65560870851716]
Test Case: 367 | Input/Output: [[19.991212947820586 0] 19.991212947820586]
Test Case: 368 | Input/Output: [[13.87989510197572 37] 50.87989510197572]
Test Case: 369 | Input/Output: [[60.64402559580381 -59] 1.6440255958038108]
Test Case: 370 | Input/Output: [[10.040532384831508 23] 33.04053238483151]
Test Case: 371 | Input/Output: [[55.06763260606033 -14] 41.06763260606033]
Test Case: 372 | Input/Output: [[20.630900555317794 -93] -72.3690994446822]
Test Case: 373 | Input/Output: [[95.8794450381605 28] 123.8794450381605]
Test Case: 374 | Input/Output: [[-57.20730308559858 56] -1.207303085598582]
Test Case: 375 | Input/Output: [[25.1007053954106 -36] -10.8992946045894]
Test Case: 376 | Input/Output: [[-76.62163649210434 77] 0.3783635078956564]
Test Case: 377 | Input/Output: [[-60.957845810448184 13] -47.957845810448184]
Test Case: 378 | Input/Output: [[-67.01658034864644 79] 11.983419651353557]
Test Case: 379 | Input/Output: [[1.5192690057276366 -85] -83.48073099427236]
Test Case: 380 | Input/Output: [[2.2787571906367248 -16] -13.721242809363275]
Test Case: 381 | Input/Output: [[17.970778926772724 -33] -15.029221073227276]
Test Case: 382 | Input/Output: [[-88.46452994266427 -21] -109.46452994266427]
Test Case: 383 | Input/Output: [[-53.74301609510101 -4] -57.74301609510101]
Test Case: 384 | Input/Output: [[-13.160790871810192 -16] -29.160790871810192]
Test Case: 385 | Input/Output: [[53.06628998931643 -47] 6.066289989316431]
Test Case: 386 | Input/Output: [[69.02117776605479 -32] 37.02117776605479]
Test Case: 387 | Input/Output: [[-18.57653058116533 -19] -37.57653058116533]
Test Case: 388 | Input/Output: [[69.69944209356055 -24] 45.69944209356055]
Test Case: 389 | Input/Output: [[96.83057853089625 -54] 42.83057853089625]
Test Case: 390 | Input/Output: [[0.8757919156031875 -77] -76.12420808439681]
Test Case: 391 | Input/Output: [[-65.34600815596599 -12] -77.34600815596599]
Test Case: 392 | Input/Output: [[90.70058298854678 -31] 59.700582988546785]
Test Case: 393 | Input/Output: [[-15.651213829072418 82] 66.34878617092758]
Test Case: 394 | Input/Output: [[23.2921881888561 -1] 22.2921881888561]
Test Case: 395 | Input/Output: [[22.77866163800779 51] 73.77866163800779]
Test Case: 396 | Input/Output: [[51.23542234702333 -24] 27.23542234702333]
Test Case: 397 | Input/Output: [[-84.77963700838175 -46] -130.77963700838177]
Test Case: 398 | Input/Output: [[-33.51521648345137 -75] -108.51521648345137]
Test Case: 399 | Input/Output: [[-62.76991955803688 15] -47.76991955803688]
Test Case: 400 | Input/Output: [[48.17547617855814 -52] -3.8245238214418578]
Test Case: 401 | Input/Output: [[58.04336443293798 -51] 7.043364432937977]
Test Case: 402 | Input/Output: [[60.691996155577556 29] 89.69199615557756]
Test Case: 403 | Input/Output: [[72.90383125791428 -6] 66.90383125791428]
Test Case: 404 | Input/Output: [[-62.86883169198063 -77] -139.86883169198063]
Test Case: 405 | Input/Output: [[-95.54821925097978 -77] -172.5482192509798]
Test Case: 406 | Input/Output: [[63.67924829202116 97] 160.67924829202116]
Test Case: 407 | Input/Output: [[94.21499390510826 -85] 9.214993905108258]
Test Case: 408 | Input/Output: [[13.17936842657545 58] 71.17936842657545]
Test Case: 409 | Input/Output: [[99.33371293494952 63] 162.33371293494952]
Test Case: 410 | Input/Output: [[94.33636864203291 -72] 22.33636864203291]
Test Case: 411 | Input/Output: [[46.58666848360576 -36] 10.586668483605763]
Test Case: 412 | Input/Output: [[-51.25355093619799 82] 30.74644906380201]
Test Case: 413 | Input/Output: [[-57.31784626872043 31] -26.31784626872043]
Test Case: 414 | Input/Output: [[-1.1979783236100587 82] 80.80202167638994]
Test Case: 415 | Input/Output: [[-8.388611682649795 87] 78.6113883173502]
Test Case: 416 | Input/Output: [[-16.53169544954099 -67] -83.53169544954099]
Test Case: 417 | Input/Output: [[-4.131650550653092 34] 29.86834944934691]
Test Case: 418 | Input/Output: [[-50.70365725208521 20] -30.703657252085208]
Test Case: 419 | Input/Output: [[70.13081387876417 59] 129.13081387876417]
Test Case: 420 | Input/Output: [[-30.84507258700748 36] 5.154927412992521]
Test Case: 421 | Input/Output: [[-20.10213285554336 -64] -84.10213285554336]
Test Case: 422 | Input/Output: [[28.224659011356493 -24] 4.2246590113564935]
Test Case: 423 | Input/Output: [[-53.85078804767096 -22] -75.85078804767096]
Test Case: 424 | Input/Output: [[-69.96592149909785 -41] -110.96592149909785]
Test Case: 425 | Input/Output: [[44.13639588844768 -3] 41.13639588844768]
Test Case: 426 | Input/Output: [[67.3368392709697 -83] -15.663160729030295]
Test Case: 427 | Input/Output: [[-60.802299758436654 -17] -77.80229975843665]
Test Case: 428 | Input/Output: [[-97.30704886563615 -2] -99.30704886563615]
Test Case: 429 | Input/Output: [[-11.481314208187527 -26] -37.48131420818753]
Test Case: 430 | Input/Output: [[15.23780417861505 31] 46.23780417861505]
Test Case: 431 | Input/Output: [[-72.78076522999191 15] -57.780765229991914]
Test Case: 432 | Input/Output: [[7.919715660735989 76] 83.91971566073599]
Test Case: 433 | Input/Output: [[-13.522661723103639 68] 54.47733827689636]
Test Case: 434 | Input/Output: [[-7.234358627365964 -85] -92.23435862736596]
Test Case: 435 | Input/Output: [[-90.9197733765972 -74] -164.91977337659722]
Test Case: 436 | Input/Output: [[69.24296197298406 -63] 6.242961972984062]
Test Case: 437 | Input/Output: [[-27.20311521954379 6] -21.20311521954379]
Test Case: 438 | Input/Output: [[73.51865523119596 74] 147.51865523119596]
Test Case: 439 | Input/Output: [[-7.15483960304762 -54] -61.15483960304762]
Test Case: 440 | Input/Output: [[0.22997749994651429 -62] -61.770022500053486]
Test Case: 441 | Input/Output: [[-51.449377054461245 -55] -106.44937705446125]
Test Case: 442 | Input/Output: [[-58.09756572863163 46] -12.09756572863163]
Test Case: 443 | Input/Output: [[-70.65797276175923 -22] -92.65797276175923]
Test Case: 444 | Input/Output: [[46.5522980687729 -63] -16.4477019312271]
Test Case: 445 | Input/Output: [[-9.22290721719203 82] 72.77709278280797]
Test Case: 446 | Input/Output: [[-5.5352466265478455 -79] -84.53524662654785]
Test Case: 447 | Input/Output: [[70.87239950833151 -64] 6.872399508331512]
Test Case: 448 | Input/Output: [[-36.534147652676374 -62] -98.53414765267638]
Test Case: 449 | Input/Output: [[36.74780174313443 79] 115.74780174313443]
Test Case: 450 | Input/Output: [[53.381095442266655 -41] 12.381095442266655]
Test Case: 451 | Input/Output: [[-97.41476869542379 39] -58.41476869542379]
Test Case: 452 | Input/Output: [[-15.174077677485045 6] -9.174077677485045]
Test Case: 453 | Input/Output: [[89.20159783318073 26] 115.20159783318073]
Test Case: 454 | Input/Output: [[-73.21486975763005 -11] -84.21486975763005]
Test Case: 455 | Input/Output: [[54.25182878282692 -11] 43.25182878282692]
Test Case: 456 | Input/Output: [[56.477686252121885 -58] -1.5223137478781155]
Test Case: 457 | Input/Output: [[-69.19441622369558 64] -5.194416223695583]
Test Case: 458 | Input/Output: [[42.181407906453785 -45] -2.818592093546215]
Test Case: 459 | Input/Output: [[-29.412727332775418 -67] -96.41272733277542]
Test Case: 460 | Input/Output: [[12.05024637328647 25] 37.05024637328647]
Test Case: 461 | Input/Output: [[-54.29034749941542 -69] -123.29034749941542]
Test Case: 462 | Input/Output: [[-26.464284294439125 88] 61.535715705560875]
Test Case: 463 | Input/Output: [[25.308621700423785 42] 67.30862170042379]
Test Case: 464 | Input/Output: [[-19.647002986293643 -81] -100.64700298629364]
Test Case: 465 | Input/Output: [[-21.390678361604955 19] -2.390678361604955]
Test Case: 466 | Input/Output: [[64.84065377921087 -80] -15.159346220789132]
Test Case: 467 | Input/Output: [[-38.15668921906536 56] 17.843310780934637]
Test Case: 468 | Input/Output: [[-8.12644099246782 -27] -35.12644099246782]
Test Case: 469 | Input/Output: [[-12.44572769136039 72] 59.55427230863961]
Test Case: 470 | Input/Output: [[6.645330876806099 16] 22.6453308768061]
Test Case: 471 | Input/Output: [[66.3780217261629 77] 143.3780217261629]
Test Case: 472 | Input/Output: [[-40.80936473817869 -47] -87.80936473817869]
Test Case: 473 | Input/Output: [[83.37956103522794 52] 135.37956103522794]
Test Case: 474 | Input/Output: [[-79.92450063285222 50] -29.924500632852215]
Test Case: 475 | Input/Output: [[-50.65030807831627 -100] -150.65030807831627]
Test Case: 476 | Input/Output: [[90.54864500713182 28] 118.54864500713182]
Test Case: 477 | Input/Output: [[-43.453697577725656 19] -24.453697577725656]
Test Case: 478 | Input/Output: [[-10.668704422485135 95] 84.33129557751487]
Test Case: 479 | Input/Output: [[30.960759628398165 -68] -37.039240371601835]
Test Case: 480 | Input/Output: [[6.795093149220492 -80] -73.20490685077951]
Test Case: 481 | Input/Output: [[-40.69533203097533 77] 36.30466796902467]
Test Case: 482 | Input/Output: [[23.39270698910596 -22] 1.3927069891059602]
Test Case: 483 | Input/Output: [[-18.72432206599261 96] 77.27567793400739]
Test Case: 484 | Input/Output: [[64.18512221618766 -58] 6.185122216187665]
Test Case: 485 | Input/Output: [[-82.39216778314005 0] -82.39216778314005]
Test Case: 486 | Input/Output: [[-80.6363038315454 -22] -102.6363038315454]
Test Case: 487 | Input/Output: [[39.53438502544782 -89] -49.46561497455218]
Test Case: 488 | Input/Output: [[5.165741831610873 31] 36.16574183161087]
Test Case: 489 | Input/Output: [[-18.36621278152049 34] 15.633787218479512]
Test Case: 490 | Input/Output: [[20.90049117058652 -20] 0.9004911705865197]
Test Case: 491 | Input/Output: [[-7.907325199767627 19] 11.092674800232373]
Test Case: 492 | Input/Output: [[-1.519189394828075 79] 77.48081060517192]
Test Case: 493 | Input/Output: [[86.69588680307976 41] 127.69588680307976]
Test Case: 494 | Input/Output: [[11.28623811343212 64] 75.28623811343212]
Test Case: 495 | Input/Output: [[42.84473516272783 34] 76.84473516272783]
Test Case: 496 | Input/Output: [[-24.025033212401496 4] -20.025033212401496]
Test Case: 497 | Input/Output: [[-44.67565639060875 80] 35.32434360939125]
Test Case: 498 | Input/Output: [[2.7338815378439136 -56] -53.266118462156086]
Test Case: 499 | Input/Output: [[-95.17215669113112 91] -4.172156691131121]
Test Case: 500 | Input/Output: [[-55.261519946223544 80] 24.738480053776456]
Test Case: 501 | Input/Output: [[-54.420697695639845 90] 35.579302304360155]
Test Case: 502 | Input/Output: [[93.20575090281443 25] 118.20575090281443]
Test Case: 503 | Input/Output: [[87.96047153387505 -72] 15.960471533875051]
Test Case: 504 | Input/Output: [[45.02633506815735 74] 119.02633506815735]
Test Case: 505 | Input/Output: [[95.76136479211473 65] 160.76136479211473]
Test Case: 506 | Input/Output: [[-73.00025004016143 12] -61.00025004016143]
Test Case: 507 | Input/Output: [[-85.60429589270038 56] -29.604295892700378]
Test Case: 508 | Input/Output: [[-19.200561585856363 28] 8.799438414143637]
Test Case: 509 | Input/Output: [[18.5555592389222 70] 88.5555592389222]
Test Case: 510 | Input/Output: [[-58.48968125440581 47] -11.48968125440581]
Test Case: 511 | Input/Output: [[-72.44838537276502 -84] -156.44838537276502]
Test Case: 512 | Input/Output: [[37.63022567657504 -100] -62.36977432342496]
Test Case: 513 | Input/Output: [[72.25281273571542 41] 113.25281273571542]
Test Case: 514 | Input/Output: [[-25.926582083529823 -92] -117.92658208352982]
Test Case: 515 | Input/Output: [[21.945223199406442 -41] -19.054776800593558]
Test Case: 516 | Input/Output: [[-3.508821087652379 32] 28.49117891234762]
Test Case: 517 | Input/Output: [[-86.91899158986286 -29] -115.91899158986286]
Test Case: 518 | Input/Output: [[-24.477260549611273 -65] -89.47726054961127]
Test Case: 519 | Input/Output: [[19.00337585045628 93] 112.00337585045628]
Test Case: 520 | Input/Output: [[-56.39281742544093 43] -13.392817425440931]
Test Case: 521 | Input/Output: [[34.53013232831913 -10] 24.530132328319127]
Test Case: 522 | Input/Output: [[-17.842692999429133 -81] -98.84269299942913]
Test Case: 523 | Input/Output: [[-0.6977627478629955 68] 67.302237252137]
Test Case: 524 | Input/Output: [[64.09107914456573 71] 135.09107914456573]
Test Case: 525 | Input/Output: [[-71.61009221910952 55] -16.610092219109518]
Test Case: 526 | Input/Output: [[-89.63701523886468 -91] -180.63701523886468]
Test Case: 527 | Input/Output: [[57.48991647192466 -59] -1.5100835280753415]
Test Case: 528 | Input/Output: [[5.5973116151685645 67] 72.59731161516856]
Test Case: 529 | Input/Output: [[58.211657655452626 -49] 9.211657655452626]
Test Case: 530 | Input/Output: [[-36.089055961970985 -26] -62.089055961970985]
Test Case: 531 | Input/Output: [[-19.768042815398744 54] 34.23195718460126]
Test Case: 532 | Input/Output: [[-37.67579976331517 61] 23.32420023668483]
Test Case: 533 | Input/Output: [[41.65037578305646 38] 79.65037578305646]
Test Case: 534 | Input/Output: [[75.29721632325729 -32] 43.29721632325729]
Test Case: 535 | Input/Output: [[-76.20032315975591 -5] -81.20032315975591]
Test Case: 536 | Input/Output: [[-62.22584643198545 -64] -126.22584643198545]
Test Case: 537 | Input/Output: [[-82.47538185499991 35] -47.47538185499991]
Test Case: 538 | Input/Output: [[88.4182204819272 17] 105.4182204819272]
Test Case: 539 | Input/Output: [[-87.57181092518158 27] -60.57181092518158]
Test Case: 540 | Input/Output: [[-35.13694494424517 -94] -129.13694494424516]
Test Case: 541 | Input/Output: [[-94.38945672190597 -49] -143.38945672190596]
Test Case: 542 | Input/Output: [[-78.99729551451411 -89] -167.99729551451412]
Test Case: 543 | Input/Output: [[8.319110852138408 75] 83.31911085213841]
Test Case: 544 | Input/Output: [[72.94304806010012 87] 159.94304806010012]
Test Case: 545 | Input/Output: [[24.265259284347167 88] 112.26525928434717]
Test Case: 546 | Input/Output: [[-86.09336874322395 87] 0.9066312567760519]
Test Case: 547 | Input/Output: [[98.56728693441198 -8] 90.56728693441198]
Test Case: 548 | Input/Output: [[-22.480160843339235 -3] -25.480160843339235]
Test Case: 549 | Input/Output: [[-69.58315780448783 63] -6.583157804487826]
Test Case: 550 | Input/Output: [[-8.532151963026905 79] 70.4678480369731]
Test Case: 551 | Input/Output: [[59.907161986477064 -28] 31.907161986477064]
Test Case: 552 | Input/Output: [[76.23272546627808 86] 162.23272546627808]
Test Case: 553 | Input/Output: [[-16.899884257744617 -40] -56.89988425774462]
Test Case: 554 | Input/Output: [[-39.882249927386006 -100] -139.882249927386]
Test Case: 555 | Input/Output: [[71.19105067685052 -80] -8.808949323149477]
Test Case: 556 | Input/Output: [[-49.881349577328216 -83] -132.88134957732822]
Test Case: 557 | Input/Output: [[-36.813939475393774 74] 37.186060524606226]
Test Case: 558 | Input/Output: [[58.75135985391867 98] 156.75135985391867]
Test Case: 559 | Input/Output: [[-1.7650870947367565 42] 40.23491290526324]
Test Case: 560 | Input/Output: [[-9.949250863621131 -53] -62.94925086362113]
Test Case: 561 | Input/Output: [[-73.42966154998024 23] -50.42966154998024]
Test Case: 562 | Input/Output: [[-83.3869099737165 -39] -122.3869099737165]
Test Case: 563 | Input/Output: [[68.95935053207913 -43] 25.959350532079128]
Test Case: 564 | Input/Output: [[-4.838998795822462 54] 49.16100120417754]
Test Case: 565 | Input/Output: [[74.64038774596511 32] 106.64038774596511]
Test Case: 566 | Input/Output: [[-86.89602711290757 41] -45.896027112907575]
Test Case: 567 | Input/Output: [[48.79205885831573 -81] -32.20794114168427]
Test Case: 568 | Input/Output: [[-21.70587523306824 2] -19.70587523306824]
Test Case: 569 | Input/Output: [[-9.328665096494419 96] 86.67133490350558]
Test Case: 570 | Input/Output: [[-25.754833111804885 -84] -109.75483311180488]
Test Case: 571 | Input/Output: [[45.78841803233334 -63] -17.21158196766666]
Test Case: 572 | Input/Output: [[-9.472527746553382 -28] -37.47252774655338]
Test Case: 573 | Input/Output: [[14.945759703652243 48] 62.94575970365224]
Test Case: 574 | Input/Output: [[-78.38909572386649 67] -11.38909572386649]
Test Case: 575 | Input/Output: [[-84.932907933112 77] -7.932907933112006]
Test Case: 576 | Input/Output: [[-95.87215867009662 14] -81.87215867009662]
Test Case: 577 | Input/Output: [[5.556668280137117 96] 101.55666828013712]
Test Case: 578 | Input/Output: [[95.37150290839566 95] 190.37150290839566]
Test Case: 579 | Input/Output: [[-92.18666123738149 10] -82.18666123738149]
Test Case: 580 | Input/Output: [[99.3240251107276 18] 117.3240251107276]
Test Case: 581 | Input/Output: [[49.67913231137345 45] 94.67913231137345]
Test Case: 582 | Input/Output: [[-34.87716279499608 -36] -70.87716279499608]
Test Case: 583 | Input/Output: [[-30.169706907795188 34] 3.830293092204812]
Test Case: 584 | Input/Output: [[18.665497276178414 -73] -54.334502723821586]
Test Case: 585 | Input/Output: [[54.7708078957354 41] 95.7708078957354]
Test Case: 586 | Input/Output: [[20.488973672572897 -55] -34.5110263274271]
Test Case: 587 | Input/Output: [[35.69814301132851 -93] -57.30185698867149]
Test Case: 588 | Input/Output: [[99.08849115596155 50] 149.08849115596155]
Test Case: 589 | Input/Output: [[-93.32265029194619 34] -59.32265029194619]
Test Case: 590 | Input/Output: [[88.13188135441413 -70] 18.131881354414134]
Test Case: 591 | Input/Output: [[33.385755612845145 -13] 20.385755612845145]
Test Case: 592 | Input/Output: [[52.875432885056085 86] 138.87543288505609]
Test Case: 593 | Input/Output: [[57.927910916621244 7] 64.92791091662124]
Test Case: 594 | Input/Output: [[-48.38146566707244 4] -44.38146566707244]
Test Case: 595 | Input/Output: [[94.61563815548652 9] 103.61563815548652]
Test Case: 596 | Input/Output: [[-48.22041441793687 21] -27.220414417936873]
Test Case: 597 | Input/Output: [[50.45414752327301 23] 73.45414752327301]
Test Case: 598 | Input/Output: [[-23.759855612114137 -29] -52.75985561211414]
Test Case: 599 | Input/Output: [[-31.782358916880952 29] -2.782358916880952]
Test Case: 600 | Input/Output: [[-95.28419554626169 -25] -120.28419554626169]
Test Case: 601 | Input/Output: [[37.133896007762246 57] 94.13389600776225]
Test Case: 602 | Input/Output: [[90.06983550538234 -22] 68.06983550538234]
Test Case: 603 | Input/Output: [[-87.44120516063765 28] -59.44120516063765]
Test Case: 604 | Input/Output: [[-66.7820835407813 -85] -151.7820835407813]
Test Case: 605 | Input/Output: [[-48.29920994210182 69] 20.700790057898182]
Test Case: 606 | Input/Output: [[-10.84859618568754 69] 58.15140381431246]
Test Case: 607 | Input/Output: [[19.829933299899622 -14] 5.829933299899622]
Test Case: 608 | Input/Output: [[-35.5178849976636 -57] -92.5178849976636]
Test Case: 609 | Input/Output: [[13.382001336381833 8] 21.382001336381833]
Test Case: 610 | Input/Output: [[-20.499254823496088 -49] -69.49925482349609]
Test Case: 611 | Input/Output: [[64.92391623062764 -9] 55.92391623062764]
Test Case: 612 | Input/Output: [[92.40961848622061 -30] 62.40961848622061]
Test Case: 613 | Input/Output: [[-43.10255994552039 39] -4.10255994552039]
Test Case: 614 | Input/Output: [[-25.912156708634143 -45] -70.91215670863414]
Test Case: 615 | Input/Output: [[10.714853508791649 44] 54.71485350879165]
Test Case: 616 | Input/Output: [[72.89081614959042 -50] 22.89081614959042]
Test Case: 617 | Input/Output: [[-46.45226205774118 -48] -94.45226205774118]
Test Case: 618 | Input/Output: [[28.988482668331756 -70] -41.011517331668244]
Test Case: 619 | Input/Output: [[-80.33411014237409 -9] -89.33411014237409]
Test Case: 620 | Input/Output: [[-74.15518323813936 -63] -137.15518323813936]
Test Case: 621 | Input/Output: [[-62.66042222167867 -49] -111.66042222167867]
Test Case: 622 | Input/Output: [[41.842561372153284 44] 85.84256137215328]
Test Case: 623 | Input/Output: [[65.72363424565003 9] 74.72363424565003]
Test Case: 624 | Input/Output: [[-10.521448518937376 -26] -36.521448518937376]
Test Case: 625 | Input/Output: [[-88.34289137785936 80] -8.34289137785936]
Test Case: 626 | Input/Output: [[35.31564201186194 -83] -47.68435798813806]
Test Case: 627 | Input/Output: [[31.182828244016548 -21] 10.182828244016548]
Test Case: 628 | Input/Output: [[53.95008995956502 -6] 47.95008995956502]
Test Case: 629 | Input/Output: [[69.57258314306648 49] 118.57258314306648]
Test Case: 630 | Input/Output: [[91.70176374764173 97] 188.70176374764173]
Test Case: 631 | Input/Output: [[59.00293309557975 -5] 54.00293309557975]
Test Case: 632 | Input/Output: [[-38.934211819758644 42] 3.0657881802413556]
Test Case: 633 | Input/Output: [[-93.56724492373614 -11] -104.56724492373614]
Test Case: 634 | Input/Output: [[89.05664838836057 84] 173.05664838836057]
Test Case: 635 | Input/Output: [[-14.04636104089461 63] 48.95363895910539]
Test Case: 636 | Input/Output: [[25.516147217365145 -6] 19.516147217365145]
Test Case: 637 | Input/Output: [[3.744357235716649 76] 79.74435723571665]
Test Case: 638 | Input/Output: [[-90.31296153233353 -41] -131.31296153233353]
Test Case: 639 | Input/Output: [[-12.28234542237368 -29] -41.28234542237368]
Test Case: 640 | Input/Output: [[-66.75145690367785 7] -59.75145690367785]
Test Case: 641 | Input/Output: [[-50.40198390966422 -16] -66.40198390966421]
Test Case: 642 | Input/Output: [[-39.327426376512385 61] 21.672573623487615]
Test Case: 643 | Input/Output: [[-40.66686707392775 25] -15.666867073927747]
Test Case: 644 | Input/Output: [[66.50848004666716 -33] 33.50848004666716]
Test Case: 645 | Input/Output: [[14.16237538402359 -16] -1.8376246159764094]
Test Case: 646 | Input/Output: [[-40.6650812647122 37] -3.6650812647121995]
Test Case: 647 | Input/Output: [[10.020454478321383 -3] 7.020454478321383]
Test Case: 648 | Input/Output: [[62.677390161269045 -40] 22.677390161269045]
Test Case: 649 | Input/Output: [[89.10975072376408 87] 176.10975072376408]
Test Case: 650 | Input/Output: [[58.885314543038504 -47] 11.885314543038504]
Test Case: 651 | Input/Output: [[46.76960325465964 -92] -45.23039674534036]
Test Case: 652 | Input/Output: [[13.576173488883512 83] 96.57617348888351]
Test Case: 653 | Input/Output: [[-77.55329819995205 -83] -160.55329819995205]
Test Case: 654 | Input/Output: [[-93.62975718647604 95] 1.3702428135239586]
Test Case: 655 | Input/Output: [[-26.729964727051865 34] 7.270035272948135]
Test Case: 656 | Input/Output: [[-29.895363707123536 -41] -70.89536370712354]
Test Case: 657 | Input/Output: [[-59.12324539902667 83] 23.876754600973328]
Test Case: 658 | Input/Output: [[59.72975849940289 84] 143.7297584994029]
Test Case: 659 | Input/Output: [[-26.028934070723082 47] 20.971065929276918]
Test Case: 660 | Input/Output: [[-9.413518033756361 -44] -53.41351803375636]
Test Case: 661 | Input/Output: [[66.60515107287918 88] 154.60515107287918]
Test Case: 662 | Input/Output: [[-46.75375581133841 10] -36.75375581133841]
Test Case: 663 | Input/Output: [[94.80512874962466 63] 157.80512874962466]
Test Case: 664 | Input/Output: [[32.35348939872199 -46] -13.64651060127801]
Test Case: 665 | Input/Output: [[-65.62991838653318 -50] -115.62991838653318]
Test Case: 666 | Input/Output: [[22.09188045903123 -28] -5.9081195409687695]
Test Case: 667 | Input/Output: [[-66.13934297131978 4] -62.13934297131978]
Test Case: 668 | Input/Output: [[28.55343882837616 -15] 13.553438828376159]
Test Case: 669 | Input/Output: [[-48.09400924940941 38] -10.09400924940941]
Test Case: 670 | Input/Output: [[-38.00201506704213 31] -7.00201506704213]
Test Case: 671 | Input/Output: [[76.47271088827216 -37] 39.47271088827216]
Test Case: 672 | Input/Output: [[15.919680861743473 22] 37.91968086174347]
Test Case: 673 | Input/Output: [[-90.56139658489077 -74] -164.56139658489076]
Test Case: 674 | Input/Output: [[79.38067235379557 34] 113.38067235379557]
Test Case: 675 | Input/Output: [[58.68887371406424 -10] 48.68887371406424]
Test Case: 676 | Input/Output: [[14.475287442427415 17] 31.475287442427415]
Test Case: 677 | Input/Output: [[-6.187717985836613 89] 82.81228201416339]
Test Case: 678 | Input/Output: [[77.52684004694842 -11] 66.52684004694842]
Test Case: 679 | Input/Output: [[-75.17883950379138 -5] -80.17883950379138]
Test Case: 680 | Input/Output: [[-94.2407510375416 94] -0.24075103754159954]
Test Case: 681 | Input/Output: [[-7.6504069082681525 7] -0.6504069082681525]
Test Case: 682 | Input/Output: [[79.95582823232044 94] 173.95582823232044]
Test Case: 683 | Input/Output: [[38.16806474615541 -52] -13.831935253844591]
Test Case: 684 | Input/Output: [[49.02718531212719 -15] 34.02718531212719]
Test Case: 685 | Input/Output: [[16.688777929469524 -13] 3.6887779294695235]
Test Case: 686 | Input/Output: [[30.555747597718238 59] 89.55574759771824]
Test Case: 687 | Input/Output: [[-93.26448577359787 -14] -107.26448577359787]
Test Case: 688 | Input/Output: [[-65.8120583848979 23] -42.812058384897895]
Test Case: 689 | Input/Output: [[80.53646114691713 -28] 52.536461146917134]
Test Case: 690 | Input/Output: [[20.490449281947363 51] 71.49044928194736]
Test Case: 691 | Input/Output: [[9.075472507266085 8] 17.075472507266085]
Test Case: 692 | Input/Output: [[4.788236486693663 35] 39.78823648669366]
Test Case: 693 | Input/Output: [[-35.892407380061655 -46] -81.89240738006166]
Test Case: 694 | Input/Output: [[20.113321148693842 -48] -27.886678851306158]
Test Case: 695 | Input/Output: [[-69.17245982172209 46] -23.172459821722086]
Test Case: 696 | Input/Output: [[-12.05405523135559 96] 83.94594476864441]
Test Case: 697 | Input/Output: [[-79.73389258508152 13] -66.73389258508152]
Test Case: 698 | Input/Output: [[38.828478157354056 75] 113.82847815735406]
Test Case: 699 | Input/Output: [[9.999713507441527 -61] -51.00028649255847]
Test Case: 700 | Input/Output: [[96.37427346821207 68] 164.37427346821207]
Test Case: 701 | Input/Output: [[18.683876600521018 68] 86.68387660052102]
Test Case: 702 | Input/Output: [[12.046695705755766 -100] -87.95330429424423]
Test Case: 703 | Input/Output: [[-4.255834326080304 -26] -30.255834326080304]
Test Case: 704 | Input/Output: [[43.68942383414387 85] 128.68942383414387]
Test Case: 705 | Input/Output: [[20.994570013112025 -54] -33.005429986887975]
Test Case: 706 | Input/Output: [[14.245342492751845 4] 18.245342492751845]
Test Case: 707 | Input/Output: [[76.55451889845651 32] 108.55451889845651]
Test Case: 708 | Input/Output: [[97.93150953571222 37] 134.93150953571222]
Test Case: 709 | Input/Output: [[-33.47259407263088 -33] -66.47259407263088]
Test Case: 710 | Input/Output: [[50.47798395596493 100] 150.47798395596493]
Test Case: 711 | Input/Output: [[11.1007265496808 31] 42.1007265496808]
Test Case: 712 | Input/Output: [[17.532684805743344 31] 48.532684805743344]
Test Case: 713 | Input/Output: [[-20.346709069545426 -33] -53.346709069545426]
Test Case: 714 | Input/Output: [[-62.09203980460642 54] -8.092039804606422]
Test Case: 715 | Input/Output: [[60.302873876435 71] 131.302873876435]
Test Case: 716 | Input/Output: [[74.26585012641641 66] 140.2658501264164]
Test Case: 717 | Input/Output: [[-28.2069351281327 8] -20.2069351281327]
Test Case: 718 | Input/Output: [[90.61712154682914 -81] 9.61712154682914]
Test Case: 719 | Input/Output: [[-12.065838177173134 -57] -69.06583817717313]
Test Case: 720 | Input/Output: [[5.71902516312592 -23] -17.28097483687408]
Test Case: 721 | Input/Output: [[-8.076001800391992 22] 13.923998199608008]
Test Case: 722 | Input/Output: [[58.00181706961703 55] 113.00181706961703]
Test Case: 723 | Input/Output: [[-99.01592365768133 30] -69.01592365768133]
Test Case: 724 | Input/Output: [[90.40066893073501 66] 156.400668930735]
Test Case: 725 | Input/Output: [[-33.65341066741283 -3] -36.65341066741283]
Test Case: 726 | Input/Output: [[-53.629822174844755 -100] -153.62982217484475]
Test Case: 727 | Input/Output: [[-72.28025054348669 75] 2.7197494565133127]
Test Case: 728 | Input/Output: [[87.35385484651721 10] 97.35385484651721]
Test Case: 729 | Input/Output: [[43.33877499829612 -83] -39.66122500170388]
Test Case: 730 | Input/Output: [[-43.6833260963059 -58] -101.6833260963059]
Test Case: 731 | Input/Output: [[-79.50514611945172 85] 5.494853880548277]
Test Case: 732 | Input/Output: [[-8.656535928797211 32] 23.34346407120279]
Test Case: 733 | Input/Output: [[83.77392995720655 10] 93.77392995720655]
Test Case: 734 | Input/Output: [[39.74190719639114 97] 136.74190719639114]
Test Case: 735 | Input/Output: [[69.3173298629755 60] 129.3173298629755]
Test Case: 736 | Input/Output: [[38.06932936071067 -27] 11.069329360710668]
Test Case: 737 | Input/Output: [[-39.93660093425204 92] 52.06339906574796]
Test Case: 738 | Input/Output: [[-15.330465757361054 73] 57.669534242638946]
Test Case: 739 | Input/Output: [[-98.52488167371443 26] -72.52488167371443]
Test Case: 740 | Input/Output: [[31.607021104148373 85] 116.60702110414837]
Test Case: 741 | Input/Output: [[-38.90228031719365 -15] -53.90228031719365]
Test Case: 742 | Input/Output: [[39.84955556693774 69] 108.84955556693774]
Test Case: 743 | Input/Output: [[-60.50677063747598 82] 21.49322936252402]
Test Case: 744 | Input/Output: [[-17.50178123430493 10] -7.501781234304929]
Test Case: 745 | Input/Output: [[-75.2559033261696 39] -36.2559033261696]
Test Case: 746 | Input/Output: [[48.34029151330154 24] 72.34029151330154]
Test Case: 747 | Input/Output: [[-80.21420789079306 23] -57.21420789079306]
Test Case: 748 | Input/Output: [[-57.430700593898585 76] 18.569299406101415]
Test Case: 749 | Input/Output: [[26.425338725112127 100] 126.42533872511213]
Test Case: 750 | Input/Output: [[31.087644480458437 -96] -64.91235551954156]
Test Case: 751 | Input/Output: [[-20.5858015123182 60] 39.4141984876818]
Test Case: 752 | Input/Output: [[73.28001882952327 -39] 34.28001882952327]
Test Case: 753 | Input/Output: [[-0.799880252106334 -18] -18.799880252106334]
Test Case: 754 | Input/Output: [[9.570200974700228 -89] -79.42979902529977]
Test Case: 755 | Input/Output: [[45.875144336498806 -54] -8.124855663501194]
Test Case: 756 | Input/Output: [[-68.82329896034815 -85] -153.82329896034815]
Test Case: 757 | Input/Output: [[81.49624559170093 -9] 72.49624559170093]
Test Case: 758 | Input/Output: [[92.32319325618172 85] 177.32319325618172]
Test Case: 759 | Input/Output: [[-28.813091511258264 17] -11.813091511258264]
Test Case: 760 | Input/Output: [[-96.76491604470104 -62] -158.76491604470104]
Test Case: 761 | Input/Output: [[-12.906575178824298 84] 71.0934248211757]
Test Case: 762 | Input/Output: [[-69.64314984960856 68] -1.6431498496085624]
Test Case: 763 | Input/Output: [[91.65207487813495 26] 117.65207487813495]
Test Case: 764 | Input/Output: [[-81.17835154106953 57] -24.17835154106953]
Test Case: 765 | Input/Output: [[-68.35432697057695 -1] -69.35432697057695]
Test Case: 766 | Input/Output: [[80.62193874349117 -45] 35.62193874349117]
Test Case: 767 | Input/Output: [[-12.478106403515994 -72] -84.478106403516]
Test Case: 768 | Input/Output: [[-55.08631288949874 -93] -148.08631288949874]
Test Case: 769 | Input/Output: [[-15.306486916396551 8] -7.306486916396551]
Test Case: 770 | Input/Output: [[-73.47247004260083 -58] -131.47247004260083]
Test Case: 771 | Input/Output: [[91.16796559963723 -4] 87.16796559963723]
Test Case: 772 | Input/Output: [[36.82860272764333 -87] -50.17139727235667]
Test Case: 773 | Input/Output: [[84.7924114715351 -49] 35.792411471535104]
Test Case: 774 | Input/Output: [[3.149810432486504 -77] -73.8501895675135]
Test Case: 775 | Input/Output: [[-36.0615087101934 -90] -126.06150871019341]
Test Case: 776 | Input/Output: [[34.77994590927159 71] 105.77994590927159]
Test Case: 777 | Input/Output: [[-37.27734816496662 48] 10.722651835033382]
Test Case: 778 | Input/Output: [[79.48351882342303 72] 151.48351882342303]
Test Case: 779 | Input/Output: [[13.219663384418311 -27] -13.780336615581689]
Test Case: 780 | Input/Output: [[95.11017052621759 -80] 15.110170526217587]
Test Case: 781 | Input/Output: [[50.24545800083678 61] 111.24545800083678]
Test Case: 782 | Input/Output: [[91.25905880190322 12] 103.25905880190322]
Test Case: 783 | Input/Output: [[-77.98514199238429 -71] -148.98514199238429]
Test Case: 784 | Input/Output: [[-51.28977837152646 -64] -115.28977837152647]
Test Case: 785 | Input/Output: [[-39.76305632060153 -96] -135.76305632060152]
Test Case: 786 | Input/Output: [[-84.03189510610834 55] -29.031895106108337]
Test Case: 787 | Input/Output: [[96.5144199866136 80] 176.5144199866136]
Test Case: 788 | Input/Output: [[63.792930959097674 -63] 0.7929309590976743]
Test Case: 789 | Input/Output: [[-23.000387440991148 -13] -36.00038744099115]
Test Case: 790 | Input/Output: [[-72.21487774287306 -33] -105.21487774287306]
Test Case: 791 | Input/Output: [[97.18407205272396 -90] 7.1840720527239625]
Test Case: 792 | Input/Output: [[-34.09136016372642 -75] -109.09136016372642]
Test Case: 793 | Input/Output: [[22.845983010544586 -54] -31.154016989455414]
Test Case: 794 | Input/Output: [[-1.572304683796716 11] 9.427695316203284]
Test Case: 795 | Input/Output: [[-54.52337763225723 71] 16.47662236774277]
Test Case: 796 | Input/Output: [[-30.973329395525553 -30] -60.97332939552555]
Test Case: 797 | Input/Output: [[-99.03291639950977 31] -68.03291639950977]
Test Case: 798 | Input/Output: [[-57.398021569209675 -88] -145.39802156920967]
Test Case: 799 | Input/Output: [[20.291809298059917 71] 91.29180929805992]
Test Case: 800 | Input/Output: [[-61.41378409474265 10] -51.41378409474265]
Test Case: 801 | Input/Output: [[-9.6221457868904 -70] -79.6221457868904]
Test Case: 802 | Input/Output: [[-9.855247414756164 -74] -83.85524741475616]
Test Case: 803 | Input/Output: [[-88.06511657706646 74] -14.065116577066462]
Test Case: 804 | Input/Output: [[-94.90532083125716 -77] -171.90532083125714]
Test Case: 805 | Input/Output: [[-33.580685252312236 52] 18.419314747687764]
Test Case: 806 | Input/Output: [[-46.066365269289975 72] 25.933634730710025]
Test Case: 807 | Input/Output: [[-15.941249657597794 -23] -38.941249657597794]
Test Case: 808 | Input/Output: [[39.23667308380897 -69] -29.763326916191033]
Test Case: 809 | Input/Output: [[44.17801653236177 84] 128.17801653236177]
Test Case: 810 | Input/Output: [[79.65848005493243 11] 90.65848005493243]
Test Case: 811 | Input/Output: [[-73.93047116395962 -72] -145.93047116395962]
Test Case: 812 | Input/Output: [[72.00760580429298 19] 91.00760580429298]
Test Case: 813 | Input/Output: [[54.63058142483203 -97] -42.36941857516797]
Test Case: 814 | Input/Output: [[95.0092124662487 -27] 68.0092124662487]
Test Case: 815 | Input/Output: [[47.38710076056017 53] 100.38710076056017]
Test Case: 816 | Input/Output: [[-23.02834567691214 24] 0.9716543230878614]
Test Case: 817 | Input/Output: [[35.67074907224492 -26] 9.670749072244917]
Test Case: 818 | Input/Output: [[46.365608855562385 -73] -26.634391144437615]
Test Case: 819 | Input/Output: [[75.12856688229726 61] 136.12856688229726]
Test Case: 820 | Input/Output: [[-0.017947824751061603 23] 22.98205217524894]
Test Case: 821 | Input/Output: [[-41.87359296523658 -3] -44.87359296523658]
Test Case: 822 | Input/Output: [[-3.4109480823512968 -35] -38.4109480823513]
Test Case: 823 | Input/Output: [[85.23689505662819 -90] -4.763104943371815]
Test Case: 824 | Input/Output: [[-84.02145027770243 31] -53.02145027770243]
Test Case: 825 | Input/Output: [[26.909161816163078 35] 61.90916181616308]
Test Case: 826 | Input/Output: [[66.07092318741985 -67] -0.9290768125801492]
Test Case: 827 | Input/Output: [[-13.614467472218521 24] 10.385532527781479]
Test Case: 828 | Input/Output: [[54.70873324325217 18] 72.70873324325217]
Test Case: 829 | Input/Output: [[22.04563041230267 79] 101.04563041230267]
Test Case: 830 | Input/Output: [[88.54083977006553 -41] 47.54083977006553]
Test Case: 831 | Input/Output: [[78.01672677091955 -97] -18.983273229080453]
Test Case: 832 | Input/Output: [[52.74471097887158 -49] 3.7447109788715807]
Test Case: 833 | Input/Output: [[-39.49214814901556 12] -27.492148149015563]
Test Case: 834 | Input/Output: [[33.1145548512153 -31] 2.1145548512153027]
Test Case: 835 | Input/Output: [[-88.01953321871572 74] -14.019533218715722]
Test Case: 836 | Input/Output: [[-65.53203580163438 3] -62.53203580163438]
Test Case: 837 | Input/Output: [[-42.39685113894696 78] 35.60314886105304]
Test Case: 838 | Input/Output: [[53.99913090269419 -7] 46.99913090269419]
Test Case: 839 | Input/Output: [[-94.61040845746062 88] -6.610408457460622]
Test Case: 840 | Input/Output: [[-0.4939224808269813 10] 9.506077519173019]
Test Case: 841 | Input/Output: [[81.94432718234779 78] 159.9443271823478]
Test Case: 842 | Input/Output: [[58.89243596712518 -34] 24.89243596712518]
Test Case: 843 | Input/Output: [[65.02252054704766 67] 132.02252054704766]
Test Case: 844 | Input/Output: [[68.20306939500927 18] 86.20306939500927]
Test Case: 845 | Input/Output: [[-89.72771246694013 -6] -95.72771246694013]
Test Case: 846 | Input/Output: [[85.35235536364837 22] 107.35235536364837]
Test Case: 847 | Input/Output: [[48.40645048533432 84] 132.40645048533432]
Test Case: 848 | Input/Output: [[-16.780330740164942 25] 8.219669259835058]
Test Case: 849 | Input/Output: [[-44.88030755647885 71] 26.119692443521153]
Test Case: 850 | Input/Output: [[-14.40626349326321 65] 50.59373650673679]
Test Case: 851 | Input/Output: [[-32.67352616231773 2] -30.673526162317728]
Test Case: 852 | Input/Output: [[-33.12249631172219 31] -2.1224963117221876]
Test Case: 853 | Input/Output: [[-68.08281855797583 82] 13.917181442024173]
Test Case: 854 | Input/Output: [[-59.666878023087236 60] 0.33312197691276424]
Test Case: 855 | Input/Output: [[-40.40706786719615 -16] -56.40706786719615]
Test Case: 856 | Input/Output: [[-9.475981852999922 0] -9.475981852999922]
Test Case: 857 | Input/Output: [[47.53145051036836 40] 87.53145051036836]
Test Case: 858 | Input/Output: [[7.575381976808558 21] 28.575381976808558]
Test Case: 859 | Input/Output: [[-63.96697779247775 11] -52.96697779247775]
Test Case: 860 | Input/Output: [[83.92080721630703 -99] -15.079192783692974]
Test Case: 861 | Input/Output: [[-48.401216052460306 88] 39.598783947539694]
Test Case: 862 | Input/Output: [[30.55284997147018 52] 82.55284997147018]
Test Case: 863 | Input/Output: [[54.11855283288938 42] 96.11855283288938]
Test Case: 864 | Input/Output: [[44.89619311841696 75] 119.89619311841696]
Test Case: 865 | Input/Output: [[-21.390425437830956 32] 10.609574562169044]
Test Case: 866 | Input/Output: [[-59.342935675342744 68] 8.657064324657256]
Test Case: 867 | Input/Output: [[-70.70945377957337 -25] -95.70945377957337]
Test Case: 868 | Input/Output: [[-89.50930653824125 -37] -126.50930653824125]
Test Case: 869 | Input/Output: [[61.08643657237391 -25] 36.08643657237391]
Test Case: 870 | Input/Output: [[-62.06372962688642 41] -21.06372962688642]
Test Case: 871 | Input/Output: [[-24.763025922319144 -26] -50.763025922319144]
Test Case: 872 | Input/Output: [[-54.6673626994755 -26] -80.66736269947549]
Test Case: 873 | Input/Output: [[90.66607287526699 3] 93.66607287526699]
Test Case: 874 | Input/Output: [[-60.56780987188797 -64] -124.56780987188796]
Test Case: 875 | Input/Output: [[99.54969599566351 -22] 77.54969599566351]
Test Case: 876 | Input/Output: [[63.54775510203211 -78] -14.452244897967887]
Test Case: 877 | Input/Output: [[-83.77466310297703 35] -48.77466310297703]
Test Case: 878 | Input/Output: [[67.7920730013256 -50] 17.792073001325605]
Test Case: 879 | Input/Output: [[-70.97202028257787 -46] -116.97202028257787]
Test Case: 880 | Input/Output: [[96.27851129993334 -67] 29.278511299933342]
Test Case: 881 | Input/Output: [[63.16630689075251 -55] 8.166306890752509]
Test Case: 882 | Input/Output: [[-87.06606461658635 -20] -107.06606461658635]
Test Case: 883 | Input/Output: [[9.62305545875006 7] 16.62305545875006]
Test Case: 884 | Input/Output: [[-80.18701886450876 -73] -153.18701886450876]
Test Case: 885 | Input/Output: [[-84.27286970055783 -46] -130.27286970055783]
Test Case: 886 | Input/Output: [[36.721611658002814 -35] 1.7216116580028142]
Test Case: 887 | Input/Output: [[-43.32599859799144 76] 32.67400140200856]
Test Case: 888 | Input/Output: [[-51.56449873877933 96] 44.43550126122067]
Test Case: 889 | Input/Output: [[42.937057721037036 -26] 16.937057721037036]
Test Case: 890 | Input/Output: [[-18.402939749616266 -71] -89.40293974961627]
Test Case: 891 | Input/Output: [[-88.37029384427211 -80] -168.3702938442721]
Test Case: 892 | Input/Output: [[59.80687540291319 77] 136.8068754029132]
Test Case: 893 | Input/Output: [[-81.36220213377445 -25] -106.36220213377445]
Test Case: 894 | Input/Output: [[7.728998306615509 -22] -14.271001693384491]
Test Case: 895 | Input/Output: [[-45.09069788115485 -1] -46.09069788115485]
Test Case: 896 | Input/Output: [[-84.42100904166068 -80] -164.42100904166068]
Test Case: 897 | Input/Output: [[54.730946389634596 -42] 12.730946389634596]
Test Case: 898 | Input/Output: [[-93.46815456261757 31] -62.46815456261757]
Test Case: 899 | Input/Output: [[47.60553489131411 33] 80.60553489131411]
Test Case: 900 | Input/Output: [[11.817729131018268 77] 88.81772913101827]
Test Case: 901 | Input/Output: [[44.72760471412863 93] 137.72760471412863]
Test Case: 902 | Input/Output: [[59.55942701441626 -41] 18.559427014416258]
Test Case: 903 | Input/Output: [[-16.326050038910964 -98] -114.32605003891096]
Test Case: 904 | Input/Output: [[-17.966495841046438 -87] -104.96649584104644]
Test Case: 905 | Input/Output: [[-20.388867510759326 93] 72.61113248924067]
Test Case: 906 | Input/Output: [[71.51953187412482 -37] 34.51953187412482]
Test Case: 907 | Input/Output: [[23.8721782991133 85] 108.8721782991133]
Test Case: 908 | Input/Output: [[80.01009149178446 64] 144.01009149178446]
Test Case: 909 | Input/Output: [[66.260215352573 -46] 20.260215352573]
Test Case: 910 | Input/Output: [[-87.97193103313212 89] 1.0280689668678775]
Test Case: 911 | Input/Output: [[-8.608006255286952 9] 0.39199374471304793]
Test Case: 912 | Input/Output: [[-62.20908411238637 88] 25.79091588761363]
Test Case: 913 | Input/Output: [[85.07634876306702 -40] 45.07634876306702]
Test Case: 914 | Input/Output: [[-50.458573358195565 -88] -138.45857335819557]
Test Case: 915 | Input/Output: [[-38.00815402769424 -12] -50.00815402769424]
Test Case: 916 | Input/Output: [[70.88447820515083 63] 133.88447820515083]
Test Case: 917 | Input/Output: [[-29.506117307956544 90] 60.49388269204346]
Test Case: 918 | Input/Output: [[4.344440316833939 -79] -74.65555968316606]
Test Case: 919 | Input/Output: [[3.717597376234778 -86] -82.28240262376522]
Test Case: 920 | Input/Output: [[-69.49776092951502 -98] -167.49776092951504]
Test Case: 921 | Input/Output: [[42.101428349865216 29] 71.10142834986522]
Test Case: 922 | Input/Output: [[11.495171103400438 24] 35.49517110340044]
Test Case: 923 | Input/Output: [[24.772615318341963 -14] 10.772615318341963]
Test Case: 924 | Input/Output: [[58.438166159830075 72] 130.43816615983008]
Test Case: 925 | Input/Output: [[60.34354523932933 -28] 32.34354523932933]
Test Case: 926 | Input/Output: [[-82.61694585489457 -78] -160.61694585489457]
Test Case: 927 | Input/Output: [[50.908763082042725 88] 138.90876308204273]
Test Case: 928 | Input/Output: [[-10.84871561955157 25] 14.15128438044843]
Test Case: 929 | Input/Output: [[82.57861965338046 -3] 79.57861965338046]
Test Case: 930 | Input/Output: [[77.77796584968394 18] 95.77796584968394]
Test Case: 931 | Input/Output: [[-81.90875293089262 -45] -126.90875293089262]
Test Case: 932 | Input/Output: [[-87.12950461462103 29] -58.12950461462103]
Test Case: 933 | Input/Output: [[27.2600648299818 10] 37.2600648299818]
Test Case: 934 | Input/Output: [[34.36104162259642 27] 61.36104162259642]
Test Case: 935 | Input/Output: [[52.884351229907196 -65] -12.115648770092804]
Test Case: 936 | Input/Output: [[42.700059511131485 25] 67.70005951113149]
Test Case: 937 | Input/Output: [[-14.956209622342584 -44] -58.956209622342584]
Test Case: 938 | Input/Output: [[-73.91589457737737 -17] -90.91589457737737]
Test Case: 939 | Input/Output: [[40.86774107622827 -49] -8.13225892377173]
Test Case: 940 | Input/Output: [[-80.16856087945246 -61] -141.16856087945246]
Test Case: 941 | Input/Output: [[87.34351981820353 11] 98.34351981820353]
Test Case: 942 | Input/Output: [[24.661568917560928 34] 58.66156891756093]
Test Case: 943 | Input/Output: [[-50.673114576716614 -53] -103.67311457671661]
Test Case: 944 | Input/Output: [[54.45490555000356 5] 59.45490555000356]
Test Case: 945 | Input/Output: [[-84.28134761014923 99] 14.718652389850774]
Test Case: 946 | Input/Output: [[24.429561355370268 -13] 11.429561355370268]
Test Case: 947 | Input/Output: [[75.41297117872742 -16] 59.41297117872742]
Test Case: 948 | Input/Output: [[46.29161231059609 1] 47.29161231059609]
Test Case: 949 | Input/Output: [[-92.36466247443353 -33] -125.36466247443353]
Test Case: 950 | Input/Output: [[-92.67590784948685 0] -92.67590784948685]
Test Case: 951 | Input/Output: [[89.1569342364341 37] 126.1569342364341]
Test Case: 952 | Input/Output: [[-36.32293336969112 -18] -54.32293336969112]
Test Case: 953 | Input/Output: [[-35.7434138296109 84] 48.2565861703891]
Test Case: 954 | Input/Output: [[-3.7605938519113806 38] 34.23940614808862]
Test Case: 955 | Input/Output: [[64.80592249181393 17] 81.80592249181393]
Test Case: 956 | Input/Output: [[73.13423924529803 -42] 31.134239245298033]
Test Case: 957 | Input/Output: [[-0.5191113668618641 -40] -40.519111366861864]
Test Case: 958 | Input/Output: [[94.25898701304982 -46] 48.25898701304982]
Test Case: 959 | Input/Output: [[60.06535534387169 23] 83.06535534387169]
Test Case: 960 | Input/Output: [[69.50267872529966 -70] -0.49732127470034015]
Test Case: 961 | Input/Output: [[96.12725899764118 -70] 26.127258997641178]
Test Case: 962 | Input/Output: [[-52.83436920279121 73] 20.16563079720879]
Test Case: 963 | Input/Output: [[-0.7994258597964716 26] 25.20057414020353]
Test Case: 964 | Input/Output: [[66.03995600833193 -5] 61.03995600833193]
Test Case: 965 | Input/Output: [[-4.33203202119401 93] 88.66796797880599]
Test Case: 966 | Input/Output: [[-69.19329684939184 -80] -149.19329684939186]
Test Case: 967 | Input/Output: [[-6.826749245055979 39] 32.17325075494402]
Test Case: 968 | Input/Output: [[-35.96395001098453 -95] -130.96395001098455]
Test Case: 969 | Input/Output: [[-58.831417857412525 -66] -124.83141785741253]
Test Case: 970 | Input/Output: [[-7.110412270704259 -87] -94.11041227070426]
Test Case: 971 | Input/Output: [[-76.48326177588736 28] -48.48326177588736]
Test Case: 972 | Input/Output: [[-60.043179933974876 87] 26.956820066025124]
Test Case: 973 | Input/Output: [[34.11638069633304 -5] 29.11638069633304]
Test Case: 974 | Input/Output: [[-8.702673046506376 -76] -84.70267304650638]
Test Case: 975 | Input/Output: [[-37.87196159227564 25] -12.871961592275639]
Test Case: 976 | Input/Output: [[32.253797541905215 85] 117.25379754190521]
Test Case: 977 | Input/Output: [[57.052773056295365 -71] -13.947226943704635]
Test Case: 978 | Input/Output: [[6.45023055398795 -82] -75.54976944601205]
Test Case: 979 | Input/Output: [[-81.17564717918174 -30] -111.17564717918174]
Test Case: 980 | Input/Output: [[17.022764693423383 -16] 1.0227646934233832]
Test Case: 981 | Input/Output: [[-50.39064349504405 47] -3.3906434950440527]
Test Case: 982 | Input/Output: [[-31.685451564427495 -33] -64.6854515644275]
Test Case: 983 | Input/Output: [[-48.847928612735416 -3] -51.847928612735416]
Test Case: 984 | Input/Output: [[17.444880954237334 19] 36.444880954237334]
Test Case: 985 | Input/Output: [[26.000897394325918 -52] -25.999102605674082]
Test Case: 986 | Input/Output: [[-9.559073754258122 -60] -69.55907375425812]
Test Case: 987 | Input/Output: [[2.0216910905918866 -95] -92.97830890940811]
Test Case: 988 | Input/Output: [[-29.55785448968831 -23] -52.55785448968831]
Test Case: 989 | Input/Output: [[78.10855508800293 31] 109.10855508800293]
Test Case: 990 | Input/Output: [[12.485394899059628 -1] 11.485394899059628]
Test Case: 991 | Input/Output: [[-58.146406493313705 -83] -141.1464064933137]
Test Case: 992 | Input/Output: [[64.73665153391451 -80] -15.263348466085489]
Test Case: 993 | Input/Output: [[-87.40401798154556 -93] -180.40401798154556]
Test Case: 994 | Input/Output: [[34.22863156295617 -1] 33.22863156295617]
Test Case: 995 | Input/Output: [[-88.21113178282667 32] -56.21113178282667]
Test Case: 996 | Input/Output: [[-97.24301361867866 28] -69.24301361867866]
Test Case: 997 | Input/Output: [[20.817706704082866 -14] 6.817706704082866]
Test Case: 998 | Input/Output: [[5.538917206609796 -33] -27.461082793390204]
Test Case: 999 | Input/Output: [[-77.1976128021324 -63] -140.1976128021324]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 58 -50 40 -8 -56 32 -16 -42 73 -52 65 -98 -61 15 -42 -49
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 60561.63829999999
Test mean error for best: 30.28082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 86.0          
Correct output: -2.2957371594  | Program output: 82.0          
Correct output: 90.5951564245  | Program output: 77.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 74.0          
Correct output: 17.6989047567  | Program output: 63.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 66.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_max} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_mod} {:instruction integer_flush} {:instruction float_div} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction float_max} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_max} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction integer_div} {:instruction in1} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_flush} {:instruction print_float} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_sub} {:instruction in2} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_div} {:instruction print_float} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction 33.17849344513152})
Best program: (float_add float_cos float_frominteger integer_max print_float float_yank integer_mod integer_dec float_mod integer_flush float_div float_pop float_rot float_pop float_max integer_sub float_pop integer_dec integer_dup_times float_swap integer_mod float_min float_dup_times integer_shove integer_inc float_max integer_shove float_flush integer_dup integer_mod integer_dec float_sub float_yank float_cos integer_div in1 integer_pop float_add integer_dec float_pop integer_dup_items integer_yank integer_flush print_float float_mod float_dec integer_dup_items integer_inc float_sub in2 float_inc integer_sub integer_mult float_frominteger float_frominteger integer_inc float_dec integer_mult integer_stackdepth integer_mult float_mult integer_div print_float float_mult float_frominteger integer_dup_items integer_max float_tan float_dup integer_dec 33.17849344513152)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 16.9024 11 84.2957 11 13.5952 12 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 6.3645 11 45.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 4.0107 11]
Total: 1322.7035999999998
Mean: 26.454073
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 18384.168083200002
Median total errors in population: 25335.0
Error averages by case: (717.7951701000012 13.227 712.6355889999987 12.457 744.0808801999973 13.97 721.3760955 12.395 723.9253657999985 10.089 712.1829324000006 12.381 742.6129451999996 13.921 719.9989774000007 13.759 724.350169699999 13.196 718.0862637000012 12.423 720.6272957999985 12.418 724.0633939000024 12.489 723.2715713999993 13.798 715.1153998000026 12.44 715.1685814000012 13.693 720.6646147000004 12.364 732.6933217000022 13.09 717.9192725000023 12.225 715.8656777000001 13.097 750.6552512999998 14.051 726.3144246999984 12.977 727.3090012000001 13.929 706.3363079000003 13.138 708.6169349999996 12.33 719.6776452000004 12.968)
Error minima by case: (0.2907 2 0.0836 2 37.5201 3 0.693 2 0.1084 1 0.2451 2 12.3546 3 1.1113 4 0.6847 7 0.036 2 0.4048 2 0.9629 1 0.1199 9 1.9412 2 3.0729 7 0.2961 2 0.4877 2 0.3645 2 0.0475 8 13.2738 3 0.6853 2 0.5546 8 0.8019 7 0.4813 2 0.0107 9)
Average genome size in population (length): 48.655
Average program size in population (points): 49.655
Average percent parens in population: 0.044
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.299
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.348
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1220033
--- Timings ---
Current time: 1529614767760 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.6 seconds, 16.6%
Fitness Testing:      2.8 seconds, 79.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 60561.63829999999
Test mean error for best: 30.28082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 86.0          
Correct output: -2.2957371594  | Program output: 82.0          
Correct output: 90.5951564245  | Program output: 77.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 74.0          
Correct output: 17.6989047567  | Program output: 63.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 66.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_max} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_mod} {:instruction integer_flush} {:instruction float_div} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction float_max} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_max} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction integer_div} {:instruction in1} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_flush} {:instruction print_float} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_sub} {:instruction in2} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_div} {:instruction print_float} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction 33.17849344513152})
Best program: (float_add float_cos float_frominteger integer_max print_float float_yank integer_mod integer_dec float_mod integer_flush float_div float_pop float_rot float_pop float_max integer_sub float_pop integer_dec integer_dup_times float_swap integer_mod float_min float_dup_times integer_shove integer_inc float_max integer_shove float_flush integer_dup integer_mod integer_dec float_sub float_yank float_cos integer_div in1 integer_pop float_add integer_dec float_pop integer_dup_items integer_yank integer_flush print_float float_mod float_dec integer_dup_items integer_inc float_sub in2 float_inc integer_sub integer_mult float_frominteger float_frominteger integer_inc float_dec integer_mult integer_stackdepth integer_mult float_mult integer_div print_float float_mult float_frominteger integer_dup_items integer_max float_tan float_dup integer_dec 33.17849344513152)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 16.9024 11 84.2957 11 13.5952 12 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 6.3645 11 45.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 4.0107 11]
Total: 1322.7035999999998
Mean: 26.454073
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 6530.8393022999935
Median total errors in population: 1814.2689499999997
Error averages by case: (238.881477499997 11.175 225.13591659999813 10.686 299.5421080000006 11.782 248.2873879000003 10.607 259.7367006999971 8.713 231.71968249999927 10.514 292.486178 11.622 246.6333898000004 12.706 250.76479100000054 12.443 238.854694399998 10.557 250.5482345000021 10.759 260.4697326999981 10.802 253.37077880000015 12.837 234.41375969999956 10.635 232.60686020000026 12.629 248.99349600000212 10.49 267.0986818999992 11.027 241.7293420999987 10.29 232.05103949999955 12.149 311.7825036999977 11.906 251.8433419999977 10.64 258.9018577000002 12.915 210.9886255000002 12.438 220.63852509999853 10.464 240.70119649999938 11.873)
Error minima by case: (1.3655 2 0.0836 2 41.6042 2 3.693 2 0.1084 1 0.2451 2 12.3546 3 1.1113 4 0.6847 9 0.036 2 0.4048 2 0.9629 1 0.1199 8 1.9412 2 3.0729 7 0.2961 2 0.2794 2 0.3645 2 0.0475 8 15.0055 3 5.4251 2 0.5546 8 0.8019 7 0.4813 2 0.0107 9)
Average genome size in population (length): 57.936
Average program size in population (points): 58.936
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.501
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.265
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2673554
--- Timings ---
Current time: 1529614771557 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.3 seconds, 31.2%
Fitness Testing:      4.5 seconds, 59.8%
Report:               0.5 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 60561.63829999999
Test mean error for best: 30.28082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 86.0          
Correct output: -2.2957371594  | Program output: 82.0          
Correct output: 90.5951564245  | Program output: 77.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 74.0          
Correct output: 17.6989047567  | Program output: 63.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 66.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_max} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_mod} {:instruction integer_flush} {:instruction float_div} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction float_max} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_max} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction integer_div} {:instruction in1} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_flush} {:instruction print_float} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_sub} {:instruction in2} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_div} {:instruction print_float} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction 33.17849344513152})
Best program: (float_add float_cos float_frominteger integer_max print_float float_yank integer_mod integer_dec float_mod integer_flush float_div float_pop float_rot float_pop float_max integer_sub float_pop integer_dec integer_dup_times float_swap integer_mod float_min float_dup_times integer_shove integer_inc float_max integer_shove float_flush integer_dup integer_mod integer_dec float_sub float_yank float_cos integer_div in1 integer_pop float_add integer_dec float_pop integer_dup_items integer_yank integer_flush print_float float_mod float_dec integer_dup_items integer_inc float_sub in2 float_inc integer_sub integer_mult float_frominteger float_frominteger integer_inc float_dec integer_mult integer_stackdepth integer_mult float_mult integer_div print_float float_mult float_frominteger integer_dup_items integer_max float_tan float_dup integer_dec 33.17849344513152)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 16.9024 11 84.2957 11 13.5952 12 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 6.3645 11 45.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 4.0107 11]
Total: 1322.7035999999998
Mean: 26.454073
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4640.456598600002
Median total errors in population: 1349.7035999999998
Error averages by case: (183.22311469999792 10.503 172.75412949999887 10.87 192.92142820000083 11.503 196.7349578000004 10.4 203.38971809999722 8.025 166.68027249999903 10.267 200.00737669999964 10.94 157.38921919999973 11.905 164.41232590000044 12.335 198.8268560999985 10.372 160.92908510000052 10.934 196.12789199999787 10.465 180.75386559999984 12.509 152.98681319999955 9.796 168.62657799999977 12.475 196.02099110000268 9.812 163.36226569999906 10.505 153.39178699999908 9.756 171.91925690000022 11.638 210.21298250000046 10.972 162.41192259999957 9.973 176.04949879999864 12.319 137.1654332 12.684 149.9694417999997 10.341 151.6193864000004 11.271)
Error minima by case: (2.6345 2 0.3579 2 13.7585 2 3.693 2 5.0 1 7.3381 2 31.3546 3 2.1113 4 1.9261 9 0.7843 2 0.4048 2 3.0 1 0.1199 10 0.5521 2 4.4857 7 6.2961 2 3.4877 2 3.3645 2 0.0475 8 61.9945 3 12.3147 2 0.5546 9 0.8019 8 0.2651 2 0.0107 9)
Average genome size in population (length): 54.457
Average program size in population (points): 55.457
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.947
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.152
Error (vector) diversity:			 0.16
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4040109
--- Timings ---
Current time: 1529614774330 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.4 seconds, 33.4%
Fitness Testing:      5.7 seconds, 55.9%
Report:               1.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 60561.63829999999
Test mean error for best: 30.28082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 86.0          
Correct output: -2.2957371594  | Program output: 82.0          
Correct output: 90.5951564245  | Program output: 77.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 74.0          
Correct output: 17.6989047567  | Program output: 63.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 66.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_max} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_mod} {:instruction integer_flush} {:instruction float_div} {:instruction float_pop} {:instruction float_rot} {:instruction float_pop} {:instruction float_max} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_max} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction integer_div} {:instruction in1} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_flush} {:instruction print_float} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_sub} {:instruction in2} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_div} {:instruction print_float} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction 33.17849344513152})
Best program: (float_add float_cos float_frominteger integer_max print_float float_yank integer_mod integer_dec float_mod integer_flush float_div float_pop float_rot float_pop float_max integer_sub float_pop integer_dec integer_dup_times float_swap integer_mod float_min float_dup_times integer_shove integer_inc float_max integer_shove float_flush integer_dup integer_mod integer_dec float_sub float_yank float_cos integer_div in1 integer_pop float_add integer_dec float_pop integer_dup_items integer_yank integer_flush print_float float_mod float_dec integer_dup_items integer_inc float_sub in2 float_inc integer_sub integer_mult float_frominteger float_frominteger integer_inc float_dec integer_mult integer_stackdepth integer_mult float_mult integer_div print_float float_mult float_frominteger integer_dup_items integer_max float_tan float_dup integer_dec 33.17849344513152)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 16.9024 11 84.2957 11 13.5952 12 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 6.3645 11 45.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 4.0107 11]
Total: 1322.7035999999998
Mean: 26.454073
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4171.5636099999965
Median total errors in population: 1339.7035999999998
Error averages by case: (180.061797299997 12.1 164.12122379999897 12.635 160.24542720000125 13.084 187.07503700000058 12.019 197.44975399999663 9.274 157.19302949999852 11.921 181.28198579999997 12.236 123.09579900000064 11.25 135.964915900002 12.03 192.3414515999979 12.024 130.24099659999925 12.689 193.24452759999696 12.251 154.1116306000005 11.914 128.34453259999935 11.146 148.02843180000065 12.117 186.7704187000038 11.223 125.7605436999987 11.815 122.90234379999944 11.196 159.02840479999986 11.208 184.86287140000059 12.249 140.747737200001 11.378 145.28138019999795 11.981 121.15097290000037 12.823 132.94579540000078 12.153 123.43460159999917 11.162)
Error minima by case: (24.6345 2 0.9164 2 41.6042 3 34.307 2 20.0 1 14.7518 2 17.3546 3 1.1113 9 8.0976 9 1.2957 2 2.4048 2 4.0 2 14.1199 10 2.5521 2 3.4857 10 32.7039 2 0.4877 2 2.3645 2 15.6989 9 10.0055 3 6.6853 2 0.5546 10 5.0861 10 5.0 2 0.9893 8)
Average genome size in population (length): 45.293
Average program size in population (points): 46.293
Average percent parens in population: 0.032
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.38725
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 151
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.064
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5176509
--- Timings ---
Current time: 1529614776922 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.6 seconds, 35.8%
Fitness Testing:      6.7 seconds, 52.5%
Report:               1.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 60561.63829999999
Test mean error for best: 30.28082
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 86.0          
Correct output: -2.2957371594  | Program output: 82.0          
Correct output: 90.5951564245  | Program output: 77.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 74.0          
Correct output: 17.6989047567  | Program output: 63.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 66.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction float_min} {:instruction float_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_max} {:instruction in2} {:instruction float_div} {:instruction float_min} {:instruction float_pop} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_mod} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_max} {:instruction integer_shove} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_sub} {:instruction float_yank} {:instruction float_cos} {:instruction integer_div} {:instruction in1} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_flush} {:instruction print_float} {:instruction float_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_sub} {:instruction in2} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_div} {:instruction print_float} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction 33.17849344513152})
Best program: (integer_shove float_cos float_flush integer_pop float_min float_shove float_shove float_shove float_frominteger integer_dup float_stackdepth float_max in2 float_div float_min float_pop integer_dec integer_dup_times float_swap integer_mod float_min float_dup_times integer_shove integer_inc float_max integer_shove float_flush integer_dup integer_mod integer_dec float_sub float_yank float_cos integer_div in1 integer_pop float_add integer_dec float_pop integer_dup_items integer_yank integer_flush print_float float_mod float_dec integer_dup_items integer_inc float_sub in2 float_inc integer_sub integer_mult float_frominteger float_frominteger integer_inc float_dec integer_mult integer_stackdepth integer_mult float_mult integer_div print_float float_mult float_frominteger integer_dup_items integer_max float_tan float_dup integer_dec 33.17849344513152)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 16.9024 11 84.2957 11 13.5952 12 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 6.3645 11 45.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 4.0107 11]
Total: 1322.7035999999998
Mean: 26.454073
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4341.845982099998
Median total errors in population: 1336.7035999999998
Error averages by case: (189.84789739999604 12.133 173.92177379999774 12.063 164.9683213000012 12.963 192.37812650000058 11.94 204.09035039999566 9.619 164.89478949999858 11.669 187.23304839999918 12.211 127.90590660000134 11.25 143.82137420000103 11.921 201.15073439999705 11.923 137.76020009999993 12.16 199.23732209999693 12.582 159.07206369999972 11.387 136.2024736999994 11.164 154.48107679999936 12.037 192.26649250000375 11.304 131.21104959999886 11.245 129.88223859999877 11.192 167.6067475000011 11.271 189.76330760000056 12.283 148.55086289999966 11.633 149.81151799999807 11.683 130.62375650000035 12.646 139.6006681000002 12.353 131.72788189999972 11.204)
Error minima by case: (5.6345 2 1.7534 2 24.3958 3 0.0 0 0.0 0 15.2482 1 3.3546 3 1.1113 9 0.0 0 2.5453 2 9.5952 2 0.0 0 24.8801 8 9.4479 2 3.5143 10 0.0 0 3.4877 2 1.3645 2 0.0 0 4.9945 3 6.6853 2 18.4454 10 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 33.142
Average program size in population (points): 34.142
Average percent parens in population: 0.043
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.7795
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 396
Genome diversity (% unique Plush genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 396
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.054
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6005959
--- Timings ---
Current time: 1529614779464 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.9 seconds, 38.6%
Fitness Testing:      7.5 seconds, 49.1%
Report:               1.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 61361.12669999998
Test mean error for best: 30.68056
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 61.0          
Correct output: -2.2957371594  | Program output: 61.0          
Correct output: 90.5951564245  | Program output: 61.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 61.0          
Correct output: 17.6989047567  | Program output: 61.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 61.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction float_sin} {:instruction -33.98977117908085} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add float_sin -33.98977117908085 float_pop integer_min float_cos integer_flush integer_div integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_dec integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_div integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 8.0976 10 63.2957 12 29.5952 12 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 19.3645 11 43.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.9893 10]
Total: 1316.8774
Mean: 26.337547
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 5152.243118400001
Median total errors in population: 1326.7035999999998
Error averages by case: (219.42926189999548 12.216 203.56558459999675 11.708 197.51304980000114 12.668 225.02943800000054 11.674 236.2812840999951 9.393 197.81333559999865 11.035 220.02100799999857 12.246 163.43964119999987 11.057 174.96814760000058 11.564 228.45746789999677 11.67 171.89938450000068 12.095 232.23262569999676 12.365 192.23730839999905 11.093 170.22759799999938 11.277 188.70888509999904 11.736 225.0857742000038 11.689 164.6406058999988 10.882 164.74969609999846 11.276 197.5084554000019 11.342 221.87540660000056 12.42 181.87945719999857 11.082 183.6333902999981 12.04 162.8493128999987 12.003 174.8559813999993 11.708 163.80301800000095 11.299)
Error minima by case: (4.6345 2 0.9164 2 40.6042 3 4.307 2 11.7264 1 16.0 2 56.0 3 2.1113 9 7.0976 9 1.2957 2 6.5952 2 2.3375 2 6.1199 9 10.4479 2 2.4857 10 4.2961 2 2.4877 2 3.3645 2 14.3011 10 69.9945 3 23.3147 2 4.5546 10 1.9139 10 5.0 2 0.0107 10)
Average genome size in population (length): 51.521
Average program size in population (points): 52.521
Average percent parens in population: 0.028
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.1225
Median age in population: 7.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.046
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7294184
--- Timings ---
Current time: 1529614781956 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.0 seconds, 38.9%
Fitness Testing:      8.6 seconds, 48.1%
Report:               2.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 61361.12669999998
Test mean error for best: 30.68056
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 61.0          
Correct output: -2.2957371594  | Program output: 61.0          
Correct output: 90.5951564245  | Program output: 61.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 61.0          
Correct output: 17.6989047567  | Program output: 61.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 61.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_dec integer_inc float_div float_mult integer_yank float_mult integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_div integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 8.0976 10 63.2957 12 29.5952 12 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 19.3645 11 43.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.9893 10]
Total: 1316.8774
Mean: 26.337547
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4012.504734399996
Median total errors in population: 1322.7035999999998
Error averages by case: (177.66067649999673 12.024 159.93286319999885 11.113 153.04259970000118 12.148 183.30102170000058 11.115 193.53000979999624 9.078 151.83262969999865 10.211 176.73089199999964 12.124 114.66124240000114 10.425 130.27957910000265 11.204 186.99207689999776 11.116 128.1656824999989 11.96 186.43321699999692 11.968 148.89161510000082 10.435 124.2869160999994 11.081 145.0049091000007 11.279 183.39235970000365 11.954 114.99789219999872 10.262 116.78718939999887 11.039 153.6745343999998 11.177 178.82150700000057 12.162 136.13930660000122 10.27 139.95525839999806 12.172 110.10048220000037 11.214 123.52386960000126 11.049 114.59840409999927 11.188)
Error minima by case: (3.6345 6 0.9164 6 40.6042 8 4.693 7 51.2736 6 45.7518 6 68.3546 8 2.1113 9 8.0976 9 1.2957 6 10.5952 6 62.3375 6 36.1199 7 10.4479 6 9.5143 9 3.2961 7 2.4877 7 3.3645 6 14.5343 8 69.9945 8 23.3147 7 25.4454 10 4.0861 9 6.7349 6 0.9893 9)
Average genome size in population (length): 70.756
Average program size in population (points): 71.756
Average percent parens in population: 0.014
Minimum age in population: 6.0
Maximum age in population: 10.53125
Average age in population: 8.4685
Median age in population: 8.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.042
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9063084
--- Timings ---
Current time: 1529614784914 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.1 seconds, 38.8%
Fitness Testing:     10.1 seconds, 48.3%
Report:               2.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 61361.12669999998
Test mean error for best: 30.68056
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 61.0          
Correct output: -2.2957371594  | Program output: 61.0          
Correct output: 90.5951564245  | Program output: 61.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 61.0          
Correct output: 17.6989047567  | Program output: 61.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 61.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction float_sin} {:instruction -33.98977117908085} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add float_sin -33.98977117908085 float_pop integer_min float_cos integer_flush integer_div integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_dec integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_div integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 8.0976 10 63.2957 12 29.5952 12 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 19.3645 11 43.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.9893 10]
Total: 1316.8774
Mean: 26.337547
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3640.512484099995
Median total errors in population: 1322.7035999999998
Error averages by case: (161.4482271999979 11.977 144.9908695999996 11.066 139.09545520000125 12.082 168.19277160000055 11.085 176.83035909999728 9.036 134.8940763999986 10.157 162.4575664000002 12.05 101.58613510000036 10.412 115.52061970000145 11.163 172.23218239999898 11.073 113.4874232999997 11.926 169.4859542999974 11.924 134.35883660000138 10.426 110.63526609999937 11.03 129.91408340000146 11.26 168.20331460000318 11.903 101.3423043999991 10.194 104.48863349999965 10.993 138.8605587999991 11.168 165.05273960000056 12.115 120.93689110000146 10.204 125.4526586999982 12.166 94.74787400000035 11.198 106.1921402000005 10.994 101.35854279999927 11.145)
Error minima by case: (3.6345 2 0.9164 2 40.6042 2 4.693 2 1.2736 1 4.2482 2 55.0 3 3.1226 9 1.0976 9 1.2957 2 12.5952 2 3.0 1 18.1199 7 2.5521 2 1.9993 9 3.2961 2 2.4877 2 5.3645 2 15.351 9 69.9945 3 1.6853 2 3.4454 7 4.0861 7 4.0 2 0.9893 9)
Average genome size in population (length): 71.297
Average program size in population (points): 72.297
Average percent parens in population: 0.014
Minimum age in population: 7.5625
Maximum age in population: 11.890625
Average age in population: 9.9815625
Median age in population: 10.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10845534
--- Timings ---
Current time: 1529614788036 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.4 seconds, 39.3%
Fitness Testing:     11.5 seconds, 47.8%
Report:               3.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 61322.05529999996
Test mean error for best: 30.66103
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction float_sin} {:instruction -33.98977117908085} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add float_sin -33.98977117908085 float_pop integer_min float_cos integer_flush integer_div integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 7.0976 10 64.2957 11 28.5952 11 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 18.3645 11 44.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.0107 11]
Total: 1313.8988000000002
Mean: 26.277975
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4804.262260200001
Median total errors in population: 1322.7035999999998
Error averages by case: (206.1873147999954 12.097 191.07135599999688 11.304 185.5346418000011 12.22 214.59819140000053 11.31 219.56251819999508 9.134 177.42956539999872 10.421 208.15778899999796 12.07 150.80805579999924 10.681 162.55093100000002 11.149 214.6746006999964 11.319 162.80340850000144 11.982 211.41644599999708 12.006 181.7699026999985 10.681 158.6928871999994 11.153 177.9871857999984 11.368 214.62986640000358 11.878 150.67153949999883 10.369 153.85425759999856 11.094 184.94407690000187 11.258 210.20225800000054 12.261 169.40234639999844 10.384 173.1351719999981 12.236 140.57005719999938 11.407 151.7594679999993 11.114 149.78542390000084 11.167)
Error minima by case: (4.6345 2 0.9164 2 18.3958 2 5.693 2 11.2736 1 2.7518 2 9.3546 3 4.1113 9 7.0976 8 1.2957 2 12.5952 2 3.0 1 38.1199 8 4.4479 2 9.5143 10 3.2961 2 2.4877 2 5.3645 2 6.9881 8 10.9945 3 23.3147 2 27.4454 9 4.0861 9 2.7885 2 0.0107 9)
Average genome size in population (length): 68.477
Average program size in population (points): 69.477
Average percent parens in population: 0.015
Minimum age in population: 9.0625
Maximum age in population: 13.578125
Average age in population: 11.5422578125
Median age in population: 11.5390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.877
Total error diversity:				 0.068
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12557484
--- Timings ---
Current time: 1529614791066 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.7 seconds, 39.5%
Fitness Testing:     12.9 seconds, 47.6%
Report:               3.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 61322.05529999996
Test mean error for best: 30.66103
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction float_sin} {:instruction -33.98977117908085} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add float_sin -33.98977117908085 float_pop integer_min float_cos integer_flush integer_div integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 7.0976 10 64.2957 11 28.5952 11 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 18.3645 11 44.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.0107 11]
Total: 1313.8988000000002
Mean: 26.277975
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 4089.6092206999956
Median total errors in population: 1322.7035999999998
Error averages by case: (176.24331829999744 12.177 159.02461679999954 11.686 154.47016840000123 12.245 184.03543940000057 11.726 195.5329374999965 9.181 156.5412682999986 10.81 177.9399439000004 11.736 120.79461290000071 10.956 129.27372419999975 10.777 175.35919069999898 11.71 138.60371749999956 12.041 193.4844557999968 12.083 149.78735440000102 10.978 129.44150709999934 11.236 145.86692590000084 11.309 183.9835112000038 11.56 120.77641019999875 10.399 130.7159850999992 11.124 152.29300349999937 11.204 180.04973350000054 12.254 137.600594300001 10.388 140.856066899998 12.216 119.22683480000035 11.724 133.4542918000009 11.185 120.75460830000007 10.794)
Error minima by case: (6.9522 6 0.054 6 17.3958 7 23.693 7 11.2736 6 2.7518 5 8.3546 7 4.1113 9 6.0976 7 0.4333 6 12.5952 5 3.0019 6 12.1977 7 4.4479 6 8.6519 9 18.7039 7 2.4877 5 5.3645 4 13.3011 9 9.9945 6 0.6853 6 26.8723 9 4.0861 9 4.0019 6 0.0107 9)
Average genome size in population (length): 60.588
Average program size in population (points): 61.588
Average percent parens in population: 0.017
Minimum age in population: 10.0625
Maximum age in population: 15.19921875
Average age in population: 13.10580859375
Median age in population: 13.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.069
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14072184
--- Timings ---
Current time: 1529614794075 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.0 seconds, 40.1%
Fitness Testing:     14.1 seconds, 47.1%
Report:               3.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 61322.05529999996
Test mean error for best: 30.66103
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction float_sin} {:instruction -33.98977117908085} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction 59} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction float_div} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add float_sin -33.98977117908085 float_pop integer_min float_cos integer_flush integer_div integer_mod 59 integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub float_pop integer_min float_cos integer_flush integer_div integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot float_div integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_div integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 7.0976 10 64.2957 11 28.5952 11 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 18.3645 11 44.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.0107 11]
Total: 1313.8988000000002
Mean: 26.277975
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2647.6903392999866
Median total errors in population: 1316.8774
Error averages by case: (120.93174370000011 12.071 102.20613580000104 11.969 98.47637280000117 12.078 128.20461900000058 11.976 141.39316699999938 9.049 98.82650039999862 11.024 123.82323450000227 11.163 60.77634409999874 11.111 66.11523770000042 10.249 112.2151908000015 11.926 83.44304190000022 11.923 139.41462829999753 12.013 91.77683370000109 11.119 67.99117829999938 11.099 87.80020280000056 11.115 128.2044972000029 11.065 62.43868679999937 10.177 74.00442370000069 10.996 93.83834109999846 11.057 125.9285827000006 12.084 81.0743594000014 10.162 82.18480979999835 12.07 60.78654500000034 12.014 75.94999549999964 11.063 58.97866730000053 10.334)
Error minima by case: (11.6345 2 1.054 2 18.3958 3 17.307 2 9.2736 1 0.7518 2 9.3546 3 4.1113 10 6.0976 8 1.4333 2 12.5952 2 4.0 2 22.8801 9 2.4479 2 9.6519 10 17.2961 2 3.4877 2 5.3645 2 5.6989 10 10.9945 3 0.6853 2 27.4454 9 1.9139 10 5.0 2 0.0107 9)
Average genome size in population (length): 53.397
Average program size in population (points): 54.397
Average percent parens in population: 0.019
Minimum age in population: 12.296875
Maximum age in population: 16.525390625
Average age in population: 14.6017421875
Median age in population: 14.6484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.042
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15407109
--- Timings ---
Current time: 1529614796999 milliseconds
Total Time:          32.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 40.4%
Fitness Testing:     15.4 seconds, 46.7%
Report:               4.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 61322.05529999996
Test mean error for best: 30.66103
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_flush} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat})
Best program: (float_add float_cos float_frominteger float_flush print_float float_yank integer_mod float_dup_items float_pop integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 7.0976 10 64.2957 11 28.5952 11 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 18.3645 11 44.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.0107 11]
Total: 1313.8988000000002
Mean: 26.277975
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2522.6476908999894
Median total errors in population: 1316.8774
Error averages by case: (115.55587770000014 12.035 96.87072940000091 11.97 94.29643570000124 12.063 122.38040480000056 11.999 135.9195483999998 9.101 94.45564079999866 11.033 118.77588170000209 11.163 56.54328499999896 11.087 61.22183710000051 10.221 107.0784342000014 11.765 79.83091990000045 11.774 133.69209909999785 12.023 86.80811340000082 11.093 64.00136209999935 11.11 82.04063580000009 11.094 122.43521420000279 11.048 57.624183199999514 10.191 70.27181400000111 10.986 88.89071329999847 11.031 121.68490530000061 12.079 75.21469110000125 10.162 77.6274938999985 12.023 55.169058500000354 11.994 69.76312519999907 11.069 53.93028710000025 10.451)
Error minima by case: (8.7998 9 1.054 10 11.3958 10 19.693 10 10.2736 8 1.7518 9 22.6454 9 3.1113 10 5.0976 8 1.4333 6 11.5952 10 24.3375 10 14.0454 9 3.4479 10 9.5143 10 14.7039 8 4.4877 9 4.3645 8 14.0265 9 7.9945 10 9.3147 9 26.4454 9 6.0861 9 13.5927 10 0.0107 9)
Average genome size in population (length): 53.228
Average program size in population (points): 54.228
Average percent parens in population: 0.019
Minimum age in population: 13.296875
Maximum age in population: 18.08984375
Average age in population: 16.0717275390625
Median age in population: 16.13232421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.047
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16737834
--- Timings ---
Current time: 1529614799967 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.6 seconds, 40.6%
Fitness Testing:     16.7 seconds, 46.3%
Report:               4.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 61322.05529999996
Test mean error for best: 30.66103
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 34.0          
Correct output: -1.9163746696  | Program output: 52.0          
Correct output: -137.6042258699 | Program output: -95.0         
Correct output: 36.3070392923  | Program output: -42.0         
Correct output: 72.2736335     | Program output: -20.0         
Correct output: 63.7517755018  | Program output: 16.0          
Correct output: -126.3545601136 | Program output: -56.0         
Correct output: -67.8887443206 | Program output: -72.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -4.0          
Correct output: -43.8800601593 | Program output: -82.0         
Correct output: 65.4478526397  | Program output: 53.0          
Correct output: -10.5142820829 | Program output: -45.0         
Correct output: 41.2961317951  | Program output: -37.0         
Correct output: -86.4876636044 | Program output: -82.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -85.0         
Correct output: -60.3146557076 | Program output: -35.0         
Correct output: -58.5545895853 | Program output: -86.0         
Correct output: 13.9139457469  | Program output: 20.0          
Correct output: 17.2650924253  | Program output: -5.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction float_mult} {:instruction float_add} {:instruction float_sin} {:instruction -33.98977117908085} {:instruction float_pop} {:instruction integer_min} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_div} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction in1} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction float_cos} {:instruction integer_min} {:instruction float_cos} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_div} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_add float_mult float_add float_sin -33.98977117908085 float_pop integer_min float_cos integer_flush integer_div integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap in1 integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 float_cos integer_min float_cos integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_div integer_yankdup float_max integer_dec float_swap)
Errors: [72.6345 12 53.9164 12 42.6042 12 78.307 12 92.2736 9 47.7518 11 70.3546 11 4.1113 11 7.0976 10 64.2957 11 28.5952 11 90.3375 12 38.1199 11 12.4479 11 34.4857 11 78.2961 11 4.4877 10 18.3645 11 44.3011 11 71.9945 12 25.3147 10 27.4454 12 6.0861 12 22.2651 11 0.0107 11]
Total: 1313.8988000000002
Mean: 26.277975
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2761.9229989999876
Median total errors in population: 1313.8988000000002
Error averages by case: (124.7001073000001 12.088 105.88558710000099 11.961 103.91639890000125 12.105 132.22092020000056 11.978 145.369733699999 9.065 103.52822509999858 11.032 128.74577380000252 11.196 66.82217239999873 11.14 69.58161710000037 10.248 115.71453500000142 11.359 88.6061494000003 11.364 142.9884746999974 12.008 96.9817220000011 11.163 73.24441769999935 11.131 92.71089490000067 11.144 132.2350007000031 11.079 67.72391239999926 10.222 79.09783310000081 11.019 98.20210639999837 11.063 131.22328080000057 12.123 85.79363840000148 10.202 87.72951199999822 12.096 65.06382780000034 12.006 80.30832039999939 11.076 62.727837699999625 10.933)
Error minima by case: (2.3655 6 0.0836 6 24.6042 6 14.693 6 8.2736 5 0.2482 5 13.3546 6 3.1113 10 5.0976 8 0.2957 6 11.5952 5 22.3375 6 37.1199 10 1.4479 5 9.6519 10 9.7039 5 4.4877 5 4.3645 4 13.0265 9 43.9945 6 0.3147 6 26.4454 9 6.0861 9 12.5927 5 0.0107 9)
Average genome size in population (length): 53.641
Average program size in population (points): 54.641
Average percent parens in population: 0.019
Minimum age in population: 15.3828125
Maximum age in population: 19.658203125
Average age in population: 17.64611083984375
Median age in population: 17.6552734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.047
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 18078859
--- Timings ---
Current time: 1529614802887 milliseconds
Total Time:          38.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.9 seconds, 40.9%
Fitness Testing:     17.9 seconds, 46.1%
Report:               4.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2506.078061099981
Median total errors in population: 1313.8988000000002
Error averages by case: (115.11443280000012 12.072 96.46648930000093 11.962 93.4533854000012 12.079 122.54206390000057 11.972 135.87868239999997 9.045 92.88728779999862 11.016 118.8014731000021 11.157 55.29214769999895 11.09 59.60565790000049 10.223 107.05316630000142 11.203 77.18055580000077 11.221 133.86778679999765 12.013 86.21191080000057 11.119 62.23594039999939 11.1 82.22522440000002 11.1 122.56195950000274 11.07 57.0289672999995 10.168 67.67681720000147 11.01 88.7874699999985 11.027 121.09937870000059 12.092 75.57505050000123 10.153 76.65982689999859 12.072 55.027793800000346 11.991 70.24990089999889 11.062 52.53569149999942 11.042)
Error minima by case: (7.6345 6 1.054 6 17.3958 7 14.307 7 9.2736 6 0.7518 5 10.3546 7 4.1113 10 5.0976 8 1.4333 6 12.5952 5 23.3375 6 25.8801 10 2.4479 6 9.6519 9 14.2961 7 3.4877 5 5.3645 4 7.3011 9 11.9945 6 0.3147 6 27.4454 9 5.0861 9 13.5927 6 0.0107 9)
Average genome size in population (length): 53.62
Average program size in population (points): 54.62
Average percent parens in population: 0.019
Minimum age in population: 16.384765625
Maximum age in population: 20.911376953125
Average age in population: 19.1322099609375
Median age in population: 19.1771240234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.049
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19419434
--- Timings ---
Current time: 1529614805898 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.3 seconds, 41.2%
Fitness Testing:     19.2 seconds, 45.8%
Report:               5.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3132.6066589999823
Median total errors in population: 1313.8988000000002
Error averages by case: (138.49774999999963 12.096 119.76077470000094 11.975 118.74196160000119 12.115 146.63149940000056 12.0 159.22466079999825 9.083 117.91427799999863 11.056 142.81852590000182 11.208 82.23669459999947 11.121 85.31911839999904 10.233 129.70879360000148 11.215 103.86620039999946 11.275 157.73474149999728 12.039 112.15829470000166 11.159 88.90192649999936 11.153 107.63800730000123 11.129 146.56672850000325 11.117 83.15603829999907 10.259 94.55209069999968 11.045 112.69903589999849 11.045 145.4660051000006 12.111 100.5381391000014 10.229 103.03143109999837 12.081 80.00179420000032 11.989 96.00970050000045 11.104 78.5334681999994 11.062)
Error minima by case: (12.6345 9 0.0836 8 17.3958 9 24.693 10 7.2736 8 0.2482 9 10.3546 10 4.1113 10 4.0976 8 0.2957 6 12.5952 9 20.3375 10 23.8801 10 0.4479 9 9.347 8 19.7039 9 3.4877 10 5.3645 8 9.6989 9 11.9945 9 0.3147 9 27.4454 9 5.0861 8 13.5927 10 0.0107 9)
Average genome size in population (length): 53.507
Average program size in population (points): 54.507
Average percent parens in population: 0.019
Minimum age in population: 18.0654296875
Maximum age in population: 22.40625
Average age in population: 20.5557041015625
Median age in population: 20.61614990234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.047
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 20757159
--- Timings ---
Current time: 1529614808680 milliseconds
Total Time:          44.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.5 seconds, 41.4%
Fitness Testing:     20.4 seconds, 45.6%
Report:               5.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3099.266769299983
Median total errors in population: 1313.8988000000002
Error averages by case: (137.38590789999924 12.079 118.66030060000095 11.94 117.30145010000122 12.109 145.33233260000057 11.952 158.3250330999982 9.043 117.06738119999858 11.014 141.7367053000014 11.216 80.74516439999968 11.097 83.90659119999943 10.244 128.87108210000147 11.197 102.17722899999949 11.225 156.61884419999748 12.024 110.40980200000136 11.125 87.44838869999934 11.128 106.19237140000097 11.121 145.35750930000304 11.101 81.62160559999923 10.239 92.86375819999984 10.996 111.44477349999849 11.043 144.1961550000006 12.102 99.31190320000142 10.208 101.32676959999831 12.072 78.90916800000034 11.973 94.66790430000032 11.067 77.01163879999939 11.062)
Error minima by case: (12.6345 6 0.054 6 17.3958 7 24.693 7 9.7264 6 1.7518 5 10.3546 7 4.1113 9 5.0976 8 0.4333 6 12.5952 5 20.3375 6 0.3213 9 3.4479 6 8.6519 9 19.7039 7 3.4877 5 5.3645 4 2.3011 9 11.9945 6 0.3147 6 26.7307 9 5.0861 8 13.2651 6 0.0107 9)
Average genome size in population (length): 53.224
Average program size in population (points): 54.224
Average percent parens in population: 0.019
Minimum age in population: 19.0654296875
Maximum age in population: 23.8526611328125
Average age in population: 21.98659191894531
Median age in population: 22.03265380859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.047
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 22087784
--- Timings ---
Current time: 1529614811521 milliseconds
Total Time:          47.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 41.6%
Fitness Testing:     21.6 seconds, 45.4%
Report:               6.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3144.1849774999837
Median total errors in population: 1313.8988000000002
Error averages by case: (140.20337059999903 12.104 121.36095840000105 11.891 118.65244050000122 12.119 146.02139120000058 11.882 158.7669948999977 9.081 119.5000416999986 10.957 142.93993850000115 11.318 82.29896950000008 11.027 86.82511989999881 10.251 131.48392830000145 11.229 105.08394019999955 11.282 156.16042949999724 12.037 111.77423710000161 11.073 90.40692769999937 11.15 107.44180990000126 11.143 145.99669590000335 11.216 83.04206169999892 10.251 95.81163739999977 11.041 114.22314939999835 11.055 145.47341220000058 12.127 100.65410640000155 10.232 102.75861249999824 12.093 81.91986200000031 11.891 94.79883520000038 11.104 79.9631068999994 11.069)
Error minima by case: (6.6345 10 1.054 9 17.3958 10 24.693 8 9.2736 8 0.7518 9 10.3546 10 4.1113 9 5.0976 8 1.4333 6 5.4693 9 9.7269 9 24.8801 10 2.4479 10 9.6519 9 19.7039 9 3.4877 9 5.3645 8 8.9956 9 11.9945 10 0.3147 9 27.4454 9 5.0861 8 8.5617 10 0.0107 9)
Average genome size in population (length): 52.955
Average program size in population (points): 53.955
Average percent parens in population: 0.019
Minimum age in population: 20.93035888671875
Maximum age in population: 25.4735107421875
Average age in population: 23.44003381347656
Median age in population: 23.50067138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.05
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 23411734
--- Timings ---
Current time: 1529614814412 milliseconds
Total Time:          50.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.1 seconds, 41.9%
Fitness Testing:     22.7 seconds, 45.1%
Report:               6.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_add} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float integer_add float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2613.978403799979
Median total errors in population: 1313.8988000000002
Error averages by case: (118.39135960000011 12.076 99.25964040000076 11.558 95.85522360000118 12.07 127.48641410000059 11.562 140.71757159999953 9.042 99.36956239999861 10.643 121.1030601000021 11.562 60.60220199999885 10.701 63.931810900000464 10.23 109.86894160000128 11.178 83.79026219999996 11.226 139.28602099999762 11.999 91.3619241000013 10.71 69.04976899999936 11.111 87.28838400000078 11.106 127.48634240000281 11.478 59.54615499999934 10.164 74.27278930000082 11.01 92.20669219999868 11.021 123.41104610000058 12.088 78.09301600000126 10.154 81.86422379999854 12.074 58.53383300000032 11.589 75.83269779999945 11.06 56.92346159999954 11.034)
Error minima by case: (11.6345 6 0.9164 6 18.3958 7 23.693 6 10.2736 5 1.7518 5 9.3546 7 4.1113 9 5.0976 8 1.2957 6 12.5952 5 24.3375 6 23.8801 9 3.4479 5 9.6186 9 18.7039 6 2.4877 5 5.3645 4 4.3011 9 10.9945 6 0.3147 5 27.4454 9 4.0861 9 13.5927 6 0.0107 9)
Average genome size in population (length): 52.561
Average program size in population (points): 53.561
Average percent parens in population: 0.019
Minimum age in population: 21.93035888671875
Maximum age in population: 26.77865600585938
Average age in population: 24.86904838562012
Median age in population: 24.92849731445312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.053
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 24725859
--- Timings ---
Current time: 1529614817249 milliseconds
Total Time:          53.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.4 seconds, 42.1%
Fitness Testing:     23.9 seconds, 45.0%
Report:               6.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction in1} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_yank float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float in2 float_sub in1 integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup float_max integer_dec float_swap)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2795.9495261999814
Median total errors in population: 1312.8988000000002
Error averages by case: (126.97227920000012 12.047 108.53799170000083 11.123 105.43864140000123 12.073 133.02695070000055 11.099 145.92216109999907 9.04 104.90059539999858 10.192 129.9324313000022 12.025 68.22063059999897 10.273 72.05014919999982 10.239 119.73270890000138 11.125 88.61923780000026 11.227 143.98443679999758 11.962 98.21612850000099 10.311 74.54994809999936 11.1 93.92162570000049 11.136 132.99714070000286 11.918 68.48057439999931 10.18 79.20461350000069 11.03 101.45127579999847 11.042 132.5183787000006 12.104 87.1991967000013 10.175 89.04396549999841 12.1 67.44616980000036 11.133 81.76850499999954 11.064 65.05278969999947 11.043)
Error minima by case: (2.2403 2 0.9164 2 17.3958 3 23.2562 2 10.2736 1 1.7518 2 10.3546 3 4.1113 9 5.0976 8 1.2957 2 12.5952 2 4.0 2 7.4859 9 3.4479 2 9.5143 9 18.2671 2 3.4877 2 5.3645 2 13.0265 9 11.9945 3 0.3147 2 22.1604 11 5.0861 8 5.0 2 0.0107 10)
Average genome size in population (length): 50.836
Average program size in population (points): 51.836
Average percent parens in population: 0.019
Minimum age in population: 23.73046875
Maximum age in population: 28.20469665527344
Average age in population: 26.29654490661621
Median age in population: 26.3663444519043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.054
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 25996809
--- Timings ---
Current time: 1529614820091 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.7 seconds, 42.2%
Fitness Testing:     25.1 seconds, 44.9%
Report:               7.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 61315.54529999997
Test mean error for best: 30.65777
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.0          
Correct output: -1.9163746696  | Program output: 51.0          
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 15.0          
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 62.0          
Correct output: -2.2957371594  | Program output: 62.0          
Correct output: 90.5951564245  | Program output: 62.0          
Correct output: 86.3375333144  | Program output: -5.0          
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 52.0          
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 62.0          
Correct output: 17.6989047567  | Program output: 62.0          
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 19.0          
Correct output: 17.2650924253  | Program output: -6.0          
Correct output: 61.9892736544  | Program output: 62.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_yank float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger print_float in2 float_sub integer_add integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup integer_dup_items integer_dec float_swap)
Errors: [71.6345 12 52.9164 11 41.6042 12 79.307 11 93.2736 9 48.7518 10 69.3546 12 5.1113 10 7.0976 10 64.2957 11 28.5952 11 91.3375 12 39.1199 10 13.4479 11 35.4857 11 79.2961 12 3.4877 10 18.3645 11 44.3011 11 70.9945 12 24.3147 10 28.4454 12 5.0861 11 23.2651 11 0.0107 11]
Total: 1312.8988000000002
Mean: 26.257977
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2432.2681714999812
Median total errors in population: 1312.8988000000002
Error averages by case: (111.99949170000014 12.068 93.06677980000082 11.056 88.31988590000113 12.062 120.24207940000055 11.042 133.55700320000025 9.048 92.61097509999865 10.144 113.8077252000019 12.079 52.711809799998974 10.164 57.26534310000042 10.224 104.18370160000131 11.122 76.36148710000069 11.217 131.52223739999778 11.974 83.73959170000059 10.179 61.972110199999356 11.121 79.70892009999999 11.093 120.24693150000272 11.995 51.66986029999946 10.126 66.7796300000014 11.029 86.21686269999857 11.017 116.10483050000056 12.09 70.29499120000116 10.136 74.17916999999845 12.073 51.69795060000034 11.051 67.58033499999878 11.07 50.21646839999953 11.032)
Error minima by case: (2.2403 6 1.9164 6 16.3958 7 23.693 6 10.2736 6 1.7518 6 11.3546 7 4.1113 9 6.0976 8 2.2957 6 12.5952 5 24.3375 6 7.4859 9 3.4479 6 11.5143 9 18.7039 7 2.4877 5 5.3645 4 5.6989 9 12.9945 7 0.3147 5 22.1604 11 1.9139 8 12.5927 6 0.0107 9)
Average genome size in population (length): 51.024
Average program size in population (points): 52.024
Average percent parens in population: 0.019
Minimum age in population: 25.23987579345703
Maximum age in population: 29.69312286376953
Average age in population: 27.78360042190552
Median age in population: 27.79960823059082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 27272484
--- Timings ---
Current time: 1529614822951 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.0 seconds, 42.5%
Fitness Testing:     26.3 seconds, 44.6%
Report:               7.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60832.285299999974
Test mean error for best: 30.41614
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 62.03         
Correct output: -2.2957371594  | Program output: 62.03         
Correct output: 90.5951564245  | Program output: 62.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 62.03         
Correct output: 17.6989047567  | Program output: 62.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 62.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_max} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_yank float_yank float_inc integer_max -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap float_stackdepth integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 7.0676 10 64.3257 10 28.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 18.3345 11 44.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 0.0407 10]
Total: 1301.0488000000003
Mean: 26.020975
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2373.628550799982
Median total errors in population: 1312.8988000000002
Error averages by case: (110.07117570000011 12.062 91.20199000000076 11.051 87.26328850000112 12.059 117.68060880000054 11.038 131.02525500000036 9.038 89.14342809999866 10.123 112.65666980000171 12.077 50.510054599999314 10.152 54.3333093000004 10.206 102.63862740000133 11.122 72.2453783000009 11.226 129.31674279999794 11.985 81.42180010000021 10.166 57.991289899999394 11.096 77.27869969999978 11.088 117.6854827000025 12.001 50.50593799999984 10.136 62.64533270000127 11.028 84.13461599999859 11.007 115.07041510000059 12.082 69.0588960000011 10.135 71.91206549999876 12.069 49.202930100000344 11.043 65.40789189999883 11.058 47.16466479999952 11.014)
Error minima by case: (2.2403 6 0.9164 6 21.6042 7 23.693 6 10.2736 6 1.7518 6 10.3546 7 4.1113 9 6.0976 8 1.2957 6 12.5952 5 24.3375 6 7.4859 9 3.4479 6 9.5143 9 18.7039 7 3.4577 5 5.3645 4 13.0265 9 40.9945 7 0.3147 5 22.1604 11 5.0861 8 12.5927 6 0.0107 9)
Average genome size in population (length): 50.789
Average program size in population (points): 51.789
Average percent parens in population: 0.020
Minimum age in population: 26.78231811523438
Maximum age in population: 31.06298828125
Average age in population: 29.29537483215332
Median age in population: 29.34001541137695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.042
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 28542259
--- Timings ---
Current time: 1529614825816 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 42.6%
Fitness Testing:     27.5 seconds, 44.5%
Report:               7.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60832.285299999974
Test mean error for best: 30.41614
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 62.03         
Correct output: -2.2957371594  | Program output: 62.03         
Correct output: 90.5951564245  | Program output: 62.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 62.03         
Correct output: 17.6989047567  | Program output: 62.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 62.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_max} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_yank float_yank float_inc integer_max -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap float_stackdepth integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_yankdup float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 7.0676 10 64.3257 10 28.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 18.3345 11 44.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 0.0407 10]
Total: 1301.0488000000003
Mean: 26.020975
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2931.4991758999804
Median total errors in population: 1312.8988000000002
Error averages by case: (130.4924192000001 12.05 111.88842600000095 11.06 110.6069530000012 12.072 140.02681270000056 11.053 152.7741520999985 9.034 110.17302659999861 10.132 135.21424470000227 12.084 75.56958349999928 10.201 75.12681460000017 10.221 123.17807080000144 11.127 93.46245500000018 11.254 151.4781341999973 11.968 105.44306600000114 10.22 79.74832559999936 11.094 101.14232420000071 11.106 139.98705220000312 11.986 74.70447759999911 10.176 84.13744860000055 11.032 104.81684779999833 11.025 137.67330130000056 12.092 92.58936760000145 10.174 96.29493039999832 12.08 70.69688070000036 11.041 89.6913554999999 11.063 68.22670599999935 11.011)
Error minima by case: (6.6345 6 1.9164 6 17.3958 7 24.693 6 4.7264 6 1.7518 6 10.3546 7 4.1113 9 5.0976 8 2.2957 6 12.5952 5 9.3375 6 12.1583 9 3.4479 6 9.5143 9 19.7039 7 2.4877 5 3.3645 4 13.6989 9 11.9945 7 23.3147 5 26.8328 10 5.0861 9 13.5927 6 0.0107 9)
Average genome size in population (length): 51.184
Average program size in population (points): 52.184
Average percent parens in population: 0.019
Minimum age in population: 27.78231811523438
Maximum age in population: 32.87976264953613
Average age in population: 30.73358194541931
Median age in population: 30.79811429977417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.051
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 29822059
--- Timings ---
Current time: 1529614828846 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.6 seconds, 42.7%
Fitness Testing:     28.7 seconds, 44.3%
Report:               8.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60832.285299999974
Test mean error for best: 30.41614
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 62.03         
Correct output: -2.2957371594  | Program output: 62.03         
Correct output: 90.5951564245  | Program output: 62.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 62.03         
Correct output: 17.6989047567  | Program output: 62.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 62.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_add} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction tag_float_12} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult float_add integer_shove integer_max integer_yank tag_float_12 integer_inc integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_yank float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times integer_add integer_max integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 7.0676 10 64.3257 10 28.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 18.3345 11 44.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 0.0407 10]
Total: 1301.0488000000003
Mean: 26.020975
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2630.7640231999803
Median total errors in population: 1312.8988000000002
Error averages by case: (118.22625490000007 12.101 99.26527990000108 11.068 97.91635050000129 12.106 128.65305510000053 11.05 141.7052460999988 9.019 98.46291249999858 10.162 123.04543890000241 12.087 62.55750419999862 10.186 64.06741930000051 10.271 111.08839470000153 11.176 82.07145870000056 11.304 139.77291309999734 11.984 93.05115900000098 10.189 68.39113789999936 11.131 88.93104940000057 11.115 128.633098400003 12.001 61.5732689999993 10.193 72.69621950000074 11.047 92.53967259999831 11.02 125.41017380000062 12.109 79.95908300000156 10.182 83.6655328999981 12.072 58.412995700000344 11.062 76.89857879999956 11.06 57.042825299999365 11.032)
Error minima by case: (3.2403 7 1.9164 9 30.6042 10 17.307 9 10.2496 8 1.7418 9 19.3546 11 4.1113 9 5.0976 8 2.2957 9 12.5952 8 24.2575 10 8.4859 9 3.4379 10 4.4857 9 17.2961 10 3.4577 9 5.3645 8 0.6989 9 49.9945 10 0.3147 9 23.1604 11 3.0861 8 12.5927 10 0.0107 9)
Average genome size in population (length): 51.488
Average program size in population (points): 52.488
Average percent parens in population: 0.019
Minimum age in population: 29.64712524414062
Maximum age in population: 34.46989583969116
Average age in population: 32.16760529661179
Median age in population: 32.19845581054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.056
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 31109384
--- Timings ---
Current time: 1529614831823 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 42.7%
Fitness Testing:     29.9 seconds, 44.2%
Report:               8.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60233.89589999997
Test mean error for best: 30.11695
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 79.03         
Correct output: -2.2957371594  | Program output: 79.03         
Correct output: 90.5951564245  | Program output: 77.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 74.03         
Correct output: 17.6989047567  | Program output: 63.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 66.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_div} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_yankdup} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod float_div integer_sub integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_yankdup -36.394173442924796 float_tan integer_swap integer_yank integer_mod integer_yank integer_mod float_swap integer_sub integer_dup_times -16 float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 9.9324 10 81.3257 11 13.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 6.3345 11 45.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 4.0407 10]
Total: 1299.9136000000005
Mean: 25.998272
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2856.876742899982
Median total errors in population: 1312.8988000000002
Error averages by case: (126.39940269999998 11.974 107.70785130000093 10.95 110.79579200000134 12.078 138.0879628000004 10.941 151.05455499999917 8.925 103.62675599999871 10.118 135.69241380000244 11.978 72.0672900999991 10.17 72.18903380000008 10.336 121.17276630000141 11.196 85.41282540000037 11.473 149.65648629999717 11.848 102.60894210000129 10.028 73.61069289999949 11.102 98.49688800000085 11.104 138.0732391000033 11.976 72.00779299999913 10.147 76.42168670000079 10.995 101.2346388999984 11.0 137.91816130000063 11.986 93.22726690000138 10.162 93.19396019999829 11.965 67.15971310000027 10.936 87.08091849999992 10.955 66.6947066999993 10.942)
Error minima by case: (5.3655 6 1.4102 6 40.6042 7 5.693 6 4.7264 6 0.2482 6 66.3546 7 4.1113 9 5.0976 8 1.7895 6 12.5952 5 8.3375 6 38.1199 8 1.4479 6 10.0081 9 3.2961 7 2.4877 5 2.3645 4 0.6989 9 69.9945 7 0.3147 5 27.4454 10 3.0861 9 11.2651 6 0.0107 8)
Average genome size in population (length): 53.39
Average program size in population (points): 54.39
Average percent parens in population: 0.019
Minimum age in population: 30.66906929016113
Maximum age in population: 35.48281693458557
Average age in population: 33.64347038221359
Median age in population: 33.686842918396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.078
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 32444234
--- Timings ---
Current time: 1529614834768 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 42.8%
Fitness Testing:     31.2 seconds, 44.1%
Report:               9.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60277.45169999996
Test mean error for best: 30.13873
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 77.03         
Correct output: -2.2957371594  | Program output: 77.03         
Correct output: 90.5951564245  | Program output: 77.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 74.03         
Correct output: 17.6989047567  | Program output: 63.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 66.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub in2 integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 7.9324 11 79.3257 11 13.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 6.3345 11 45.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 4.0407 10]
Total: 1296.9136000000003
Mean: 25.938272
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3148.7428424999944
Median total errors in population: 1311.7036
Error averages by case: (137.6719821999997 11.69 117.25951030000058 10.649 124.97622450000144 12.064 149.24630500000012 10.695 161.83945769999934 8.678 113.6442928999992 10.112 148.58535850000092 11.654 87.1768873000007 10.243 83.59622979999985 10.4 131.78488380000096 10.973 95.11751779999936 11.794 160.2044594999973 11.557 116.15817750000093 9.799 84.55568749999982 11.099 111.44614900000145 11.141 149.1831210000024 11.934 86.53144029999928 10.204 86.47354109999958 11.006 110.89423179999905 11.024 151.45547480000076 11.722 106.4445247000008 10.22 107.38268879999887 11.718 77.87534799999992 10.649 99.4745961000009 10.691 77.39175259999948 10.657)
Error minima by case: (7.6345 5 1.9164 5 14.6042 5 9.693 4 5.7264 3 0.7518 5 3.3546 5 1.1113 9 4.0976 8 2.2957 5 11.5952 5 4.0 3 35.1199 9 0.4479 5 10.0821 9 0.2961 4 3.3977 4 1.3645 5 0.6989 9 13.9645 5 24.2247 4 24.4454 10 3.0861 8 5.0 3 0.0107 9)
Average genome size in population (length): 57.45
Average program size in population (points): 58.45
Average percent parens in population: 0.017
Minimum age in population: 32.4114990234375
Maximum age in population: 37.14497697353363
Average age in population: 35.04600325989723
Median age in population: 35.07512909173965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.135
Error (vector) diversity:			 0.148
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 33880509
--- Timings ---
Current time: 1529614837792 milliseconds
Total Time:          73.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.6 seconds, 42.8%
Fitness Testing:     32.4 seconds, 44.0%
Report:               9.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 60277.45169999996
Test mean error for best: 30.13873
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 77.03         
Correct output: -2.2957371594  | Program output: 77.03         
Correct output: 90.5951564245  | Program output: 77.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 74.03         
Correct output: 17.6989047567  | Program output: 63.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 66.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub in2 integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 7.9324 11 79.3257 11 13.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 6.3345 11 45.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 4.0407 10]
Total: 1296.9136000000003
Mean: 25.938272
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3042.15374919999
Median total errors in population: 1301.0488000000003
Error averages by case: (121.79609669999917 11.27 102.89763070000046 10.288 127.56540280000179 11.988 154.62821609999975 10.248 167.5653051000018 8.235 98.51603019999946 10.074 151.9735145000011 11.241 92.67344890000118 10.177 66.22621240000036 10.17 113.98565760000089 10.383 83.69826939999874 11.878 166.21739409999665 11.151 122.16073800000095 9.374 70.18384350000014 11.026 117.03154260000204 11.081 154.41953820000245 11.887 90.28102639999935 10.176 74.34223349999904 10.962 96.06651379999951 10.979 153.9915667000011 11.277 108.05955870000072 10.198 113.28164179999898 11.268 62.0714572999996 10.269 106.14289000000163 10.24 60.30702019999939 10.231)
Error minima by case: (9.6345 7 1.9164 7 15.4258 7 9.693 7 5.7504 6 0.7218 6 11.3246 7 1.1113 9 4.0676 7 2.2957 7 11.5652 6 7.3075 7 6.7951 9 0.4479 6 10.5243 9 0.2961 6 2.4577 7 1.3345 5 0.6689 9 12.9645 7 0.2847 7 21.4656 10 3.0861 9 0.2651 6 0.0107 9)
Average genome size in population (length): 59.503
Average program size in population (points): 60.503
Average percent parens in population: 0.017
Minimum age in population: 34.16442513465881
Maximum age in population: 38.29784369468689
Average age in population: 36.3115338087678
Median age in population: 36.37455540895462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.133
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 35368109
--- Timings ---
Current time: 1529614840887 milliseconds
Total Time:          76.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 42.8%
Fitness Testing:     33.8 seconds, 44.0%
Report:              10.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 60277.45169999996
Test mean error for best: 30.13873
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.03         
Correct output: -1.9163746696  | Program output: 51.03         
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 15.03         
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 77.03         
Correct output: -2.2957371594  | Program output: 77.03         
Correct output: 90.5951564245  | Program output: 77.03         
Correct output: 86.3375333144  | Program output: -5.03         
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 52.03         
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 74.03         
Correct output: 17.6989047567  | Program output: 63.03         
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 19.03         
Correct output: 17.2650924253  | Program output: -6.03         
Correct output: 61.9892736544  | Program output: 66.03         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub in2 integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6645 11 52.9464 10 41.5742 12 79.337 10 93.3036 8 48.7218 10 69.3246 11 5.1413 10 7.9324 11 79.3257 11 13.5652 12 91.3675 11 39.1499 9 13.4179 11 35.5157 11 79.3261 12 3.4577 10 6.3345 11 45.3311 11 70.9645 11 24.2847 10 28.4754 11 5.1161 10 23.2951 10 4.0407 10]
Total: 1296.9136000000003
Mean: 25.938272
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2855.0051673999906
Median total errors in population: 1301.0488000000003
Error averages by case: (116.48200379999932 11.257 97.52051590000043 10.261 119.40475560000135 11.958 144.1244430999998 10.254 156.97113370000048 8.24 95.33955509999946 10.101 142.91112760000232 11.249 81.78722200000091 10.164 62.6554996000003 10.297 111.40453610000085 10.493 77.52687779999914 11.891 156.0585563999971 11.159 111.51042750000052 9.344 65.92959460000019 11.045 106.55483310000164 11.064 144.0628783000021 11.908 81.39834739999954 10.126 68.55396779999933 10.964 91.03538409999992 10.977 146.05451210000078 11.238 100.0250321000002 10.183 102.88620769999933 11.239 57.28304009999958 10.252 95.08642100000111 10.249 56.31529489999944 10.21)
Error minima by case: (2.6345 9 0.0836 9 40.5742 9 0.271 8 5.7504 7 1.2482 8 68.3246 10 1.1113 9 3.0976 8 0.2957 9 6.2504 10 7.3075 10 7.8801 8 0.4479 9 9.6125 9 0.2961 8 2.4577 9 0.9803 8 14.0265 8 69.9645 9 6.2847 9 20.4454 10 4.1161 9 7.2651 9 0.0107 8)
Average genome size in population (length): 59.62
Average program size in population (points): 60.62
Average percent parens in population: 0.017
Minimum age in population: 35.16442513465881
Maximum age in population: 40.04518604278564
Average age in population: 37.80971593868732
Median age in population: 37.83308318257332
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.137
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 36858684
--- Timings ---
Current time: 1529614844057 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 42.8%
Fitness Testing:     35.3 seconds, 44.1%
Report:              10.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 59929.94869999996
Test mean error for best: 29.96497
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 33.034        
Correct output: -1.9163746696  | Program output: 51.034        
Correct output: -137.6042258699 | Program output: -96.032       
Correct output: 36.3070392923  | Program output: -43.032       
Correct output: 72.2736335     | Program output: -21.032       
Correct output: 63.7517755018  | Program output: 15.034        
Correct output: -126.3545601136 | Program output: -57.032       
Correct output: -67.8887443206 | Program output: -73.032       
Correct output: 69.0975510066  | Program output: 78.034        
Correct output: -2.2957371594  | Program output: 78.034        
Correct output: 90.5951564245  | Program output: 77.034        
Correct output: 86.3375333144  | Program output: -5.032        
Correct output: -43.8800601593 | Program output: -83.032       
Correct output: 65.4478526397  | Program output: 52.034        
Correct output: -10.5142820829 | Program output: -46.032       
Correct output: 41.2961317951  | Program output: -38.032       
Correct output: -86.4876636044 | Program output: -83.032       
Correct output: 80.3644708752  | Program output: 74.034        
Correct output: 17.6989047567  | Program output: 63.034        
Correct output: -156.9944896535 | Program output: -86.032       
Correct output: -60.3146557076 | Program output: -36.032       
Correct output: -58.5545895853 | Program output: -87.032       
Correct output: 13.9139457469  | Program output: 19.034        
Correct output: 17.2650924253  | Program output: -6.032        
Correct output: 61.9892736544  | Program output: 66.034        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_div} {:instruction float_div} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_sub} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_dup_times -16 float_swap integer_sub integer_dup_times integer_add integer_rot integer_shove integer_inc float_div float_div float_mult integer_yank float_add in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat in2 float_sub integer_yankdup print_integer integer_dec print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [71.6685 10 52.9504 9 41.5722 11 79.339 9 93.3056 8 48.7178 10 69.3226 11 5.1433 10 8.9364 11 80.3297 10 13.5612 11 91.3695 11 39.1519 10 13.4139 11 35.5177 10 79.3281 12 3.4557 10 6.3305 11 45.3351 11 70.9625 11 24.2827 10 28.4774 12 5.1201 9 23.2971 10 4.0447 9]
Total: 1291.9336
Mean: 25.838673
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3376.8964806999993
Median total errors in population: 1299.9136000000005
Error averages by case: (142.67955490000014 11.22 123.81752480000056 10.256 136.68095580000147 11.917 160.13840089999982 10.24 171.96364420000143 8.231 121.0606653999994 10.112 161.176040800001 11.238 98.89005710000134 10.175 89.21510900000025 10.712 143.29542150000012 10.889 97.00406359999886 11.899 170.01996009999678 11.145 128.95101560000072 9.345 91.76922020000019 11.036 123.81815210000194 11.044 160.0016890000024 11.894 100.46897359999936 10.113 89.41474999999907 10.969 117.76848749999945 10.934 163.59101330000087 11.211 117.45089580000034 10.211 120.57549669999916 11.217 84.71217379999959 10.253 111.48006260000143 10.201 84.27415239999944 10.217)
Error minima by case: (6.3955 9 0.1136 9 2.4258 10 9.693 8 3.7564 7 0.2482 8 18.6454 9 1.1113 9 4.0676 8 0.2657 9 3.4348 10 0.3375 8 35.1199 6 1.4479 10 10.5443 9 0.2961 9 2.4577 8 0.3645 9 0.3011 8 17.0055 9 15.2847 9 24.4454 10 2.1161 9 7.5927 9 0.0107 9)
Average genome size in population (length): 59.414
Average program size in population (points): 60.414
Average percent parens in population: 0.017
Minimum age in population: 36.67303109169006
Maximum age in population: 41.30667413771152
Average age in population: 39.39353010332584
Median age in population: 39.40854721516371
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.183
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 38344034
--- Timings ---
Current time: 1529614847151 milliseconds
Total Time:          83.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.5 seconds, 42.8%
Fitness Testing:     36.6 seconds, 44.1%
Report:              10.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 71169.01760000004
Test mean error for best: 35.58451
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 41.6042 12 79.307 11 93.2736 9 2.6908 10 69.3546 12 5.1113 10 8.0366 9 63.3567 11 29.5342 11 25.2765 11 39.1199 10 4.3869 10 35.4857 11 79.2961 12 3.4877 10 19.3035 11 43.3621 10 70.9945 12 24.3147 10 28.4454 12 47.1471 11 43.7959 11 0.9283 9]
Total: 1288.2862
Mean: 25.765724
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3293.0691651999978
Median total errors in population: 1296.9136000000003
Error averages by case: (142.02263509999977 11.224 124.36767210000045 10.273 130.29784240000157 12.002 152.81984169999976 10.263 165.20458470000153 8.286 121.22555859999942 10.136 153.1742290000017 11.3 91.35356710000124 10.229 92.30097480000072 10.978 145.81614139999994 11.018 96.93893279999867 11.937 164.05843619999658 11.159 121.40080880000083 9.43 93.92064080000019 11.092 116.19295980000196 11.12 152.72403610000256 11.936 92.98597019999931 10.185 89.89805809999883 10.993 118.78420529999907 10.962 156.56859240000102 11.315 110.8262742000005 10.253 113.04933739999925 11.303 85.60182649999956 10.302 105.0752621000016 10.252 88.21777759999907 10.295)
Error minima by case: (6.3955 5 1.9164 5 2.4258 5 8.693 4 2.7564 3 2.6908 5 5.6754 5 1.1113 9 4.9124 9 1.2957 5 2.4148 5 4.0 3 27.8801 6 4.3869 5 4.4857 9 0.2961 4 2.4577 4 0.3645 5 1.3311 8 24.9645 5 14.7053 4 24.4454 10 2.0861 8 5.0 3 0.0107 9)
Average genome size in population (length): 57.398
Average program size in population (points): 58.398
Average percent parens in population: 0.017
Minimum age in population: 38.53881272673607
Maximum age in population: 42.56721413880587
Average age in population: 40.79794198796153
Median age in population: 40.81207647174597
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.16
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 39779009
--- Timings ---
Current time: 1529614850091 milliseconds
Total Time:          86.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.8 seconds, 42.8%
Fitness Testing:     37.9 seconds, 44.1%
Report:              11.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 63734.677899999944
Test mean error for best: 31.86734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: -21.0         
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_add integer_yankdup print_integer integer_dec integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 41.6042 12 79.307 11 93.2736 9 2.6908 10 69.3546 12 5.1113 10 8.0366 9 63.3567 11 29.5342 11 25.2765 11 39.1199 10 4.3869 10 35.4857 11 79.2961 12 3.4877 10 19.3035 11 43.3621 10 70.9945 12 24.3147 10 28.4454 12 47.1471 11 43.7959 11 0.9283 9]
Total: 1288.2862
Mean: 25.765724
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3388.4058991999973
Median total errors in population: 1296.9136000000003
Error averages by case: (140.2906671999999 11.201 122.35281110000047 10.204 137.7383787000015 11.941 161.72637839999993 10.238 173.75749640000225 8.233 121.10441039999938 10.098 159.388652900001 11.269 100.8725358000013 10.197 88.41528120000089 10.878 142.82471790000008 10.968 96.10674229999907 11.886 171.449528999997 11.13 131.54713290000066 9.396 93.78876730000015 11.044 125.44891170000182 11.043 161.6416879000024 11.916 101.58454129999933 10.128 89.06694319999913 10.957 116.3883274999993 10.904 163.64596820000096 11.265 117.35350850000067 10.214 123.27625459999913 11.267 83.73152519999957 10.204 113.48388100000146 10.239 84.39684859999932 10.204)
Error minima by case: (2.2403 8 0.8864 8 2.4258 10 1.307 8 2.7264 7 2.6908 9 13.3246 9 0.1433 9 2.9024 7 0.7343 9 1.4148 9 5.6652 9 7.4859 8 4.3869 9 3.5177 8 0.2961 9 0.4877 8 0.3079 8 0.5403 9 14.0355 9 10.7153 9 22.1604 9 1.0861 8 0.1064 7 0.0107 9)
Average genome size in population (length): 57.197
Average program size in population (points): 58.197
Average percent parens in population: 0.017
Minimum age in population: 39.78820985555649
Maximum age in population: 44.18791233003139
Average age in population: 42.28310563260317
Median age in population: 42.2901919465512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.174
Error (vector) diversity:			 0.192
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 41208934
--- Timings ---
Current time: 1529614853119 milliseconds
Total Time:          89.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.2 seconds, 42.9%
Fitness Testing:     39.2 seconds, 44.0%
Report:              11.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 63521.23529999998
Test mean error for best: 31.76062
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 41.5742 12 79.337 10 93.3036 8 2.6908 10 69.3246 11 5.1413 10 8.0366 9 63.3567 11 29.5342 11 25.2765 11 39.1499 9 4.3869 10 35.5157 11 79.3261 12 3.4577 10 19.3035 11 43.3621 10 70.9645 11 24.2847 10 28.4754 11 47.1471 11 43.7959 11 0.9283 9]
Total: 1282.3462
Mean: 25.646923
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3224.761093999996
Median total errors in population: 1296.9136000000003
Error averages by case: (133.56791899999982 11.19 114.98512110000026 10.101 134.9416927000007 11.84 156.55944240000042 10.234 169.3697418000012 8.27 109.19959819999973 10.034 156.482956000001 11.247 96.83988380000075 10.265 81.07386910000052 10.722 135.64838150000006 10.936 86.44716029999906 11.717 161.764098399998 11.098 125.96452760000051 9.45 82.30205160000007 10.962 119.60790760000103 10.981 156.45482150000197 11.835 97.52232479999977 10.089 78.9606481999992 10.895 108.6326040999995 10.843 160.88434170000028 11.268 114.17742590000033 10.22 117.61652209999946 11.354 76.5064819999998 10.137 106.40127250000073 10.242 76.81430009999936 10.106)
Error minima by case: (9.5565 7 0.162 7 40.5632 9 9.693 8 2.7504 6 2.6908 7 13.3546 8 1.1113 9 2.9124 7 0.5414 7 3.4048 7 5.3375 7 19.1199 8 3.5521 7 2.5447 9 0.2961 8 2.4467 8 0.6355 7 0.6649 8 14.0055 9 10.6853 8 8.4454 10 0.9139 8 3.2651 7 0.0447 8)
Average genome size in population (length): 58.217
Average program size in population (points): 59.217
Average percent parens in population: 0.017
Minimum age in population: 41.05634647607803
Maximum age in population: 45.70058242604136
Average age in population: 43.78012242137082
Median age in population: 43.83192269038409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.229
Error (vector) diversity:			 0.247
Behavioral diversity:				 0.25
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 42664359
--- Timings ---
Current time: 1529614856168 milliseconds
Total Time:          92.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.4 seconds, 42.8%
Fitness Testing:     40.5 seconds, 44.0%
Report:              12.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 63521.23529999998
Test mean error for best: 31.76062
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -96.03        
Correct output: 36.3070392923  | Program output: -43.03        
Correct output: 72.2736335     | Program output: -21.03        
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -57.03        
Correct output: -67.8887443206 | Program output: -73.03        
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -83.03        
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -46.03        
Correct output: 41.2961317951  | Program output: -38.03        
Correct output: -86.4876636044 | Program output: -83.03        
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -86.03        
Correct output: -60.3146557076 | Program output: -36.03        
Correct output: -58.5545895853 | Program output: -87.03        
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_sin} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_cos float_flush integer_pop integer_inc print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc float_sin -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub in2 integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 41.5742 12 79.337 10 93.3036 8 2.6908 10 69.3246 11 5.1413 10 8.0366 9 63.3567 11 29.5342 11 25.2765 11 39.1499 9 4.3869 10 35.5157 11 79.3261 12 3.4577 10 19.3035 11 43.3621 10 70.9645 11 24.2847 10 28.4754 11 47.1471 11 43.7959 11 0.9283 9]
Total: 1282.3462
Mean: 25.646923
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3486.0080787999973
Median total errors in population: 1293.9136000000003
Error averages by case: (139.5718794000006 11.444 118.99580460000038 9.97 150.07851820000016 11.789 173.17444100000145 10.377 184.62556000000004 8.48 106.93059639999949 9.926 172.17709840000066 11.325 114.52933340000045 10.443 84.05111900000027 10.325 135.8854711 10.927 93.64061759999932 11.423 166.44295909999997 11.13 142.80195249999952 9.604 85.67434879999965 10.838 137.5926178999996 10.95 173.0695175000023 11.724 115.23473790000008 10.189 85.75267569999944 10.881 110.89258699999974 10.73 175.60295469999943 11.438 130.67327010000042 10.305 133.78654559999976 11.589 84.98521460000032 10.158 124.27148589999992 10.43 79.21477239999969 9.957)
Error minima by case: (4.6045 8 1.4102 8 26.5722 9 1.275 8 0.7264 6 2.6902 8 15.3226 8 1.1113 9 4.9024 7 1.7895 7 10.5952 9 0.6625 10 24.1499 7 1.5821 9 3.5467 9 1.2641 9 2.4577 8 0.3645 9 0.6209 8 10.0055 9 6.6853 9 13.4754 9 0.1161 8 4.2651 8 0.0407 8)
Average genome size in population (length): 57.487
Average program size in population (points): 58.487
Average percent parens in population: 0.018
Minimum age in population: 43.17670684680343
Maximum age in population: 47.30779703613371
Average age in population: 45.31076689839736
Median age in population: 45.31176837487146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.242
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 44101534
--- Timings ---
Current time: 1529614859380 milliseconds
Total Time:          95.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.8 seconds, 42.9%
Fitness Testing:     41.9 seconds, 44.0%
Report:              12.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 63395.96009999998
Test mean error for best: 31.69798
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.013        
Correct output: -1.9163746696  | Program output: 61.013        
Correct output: -137.6042258699 | Program output: -96.013       
Correct output: 36.3070392923  | Program output: -43.013       
Correct output: 72.2736335     | Program output: -21.013       
Correct output: 63.7517755018  | Program output: 61.013        
Correct output: -126.3545601136 | Program output: -57.013       
Correct output: -67.8887443206 | Program output: -73.013       
Correct output: 69.0975510066  | Program output: 61.013        
Correct output: -2.2957371594  | Program output: 61.013        
Correct output: 90.5951564245  | Program output: 61.013        
Correct output: 86.3375333144  | Program output: 61.013        
Correct output: -43.8800601593 | Program output: -83.013       
Correct output: 65.4478526397  | Program output: 61.013        
Correct output: -10.5142820829 | Program output: -46.013       
Correct output: 41.2961317951  | Program output: -38.013       
Correct output: -86.4876636044 | Program output: -83.013       
Correct output: 80.3644708752  | Program output: 61.013        
Correct output: 17.6989047567  | Program output: 61.013        
Correct output: -156.9944896535 | Program output: -86.013       
Correct output: -60.3146557076 | Program output: -36.013       
Correct output: -58.5545895853 | Program output: -87.013       
Correct output: 13.9139457469  | Program output: 61.013        
Correct output: 17.2650924253  | Program output: 61.013        
Correct output: 61.9892736544  | Program output: 61.013        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction 13} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add 13 print_integer integer_dec float_swap)
Errors: [99.6475 12 62.9294 9 41.5912 12 79.32 10 93.2866 8 2.7388 9 69.3416 10 5.1243 11 8.0846 9 63.3087 11 29.5822 11 25.3245 11 39.1329 8 4.4349 10 35.4987 11 79.3091 11 3.4747 10 19.3515 11 43.3141 11 70.9815 11 24.3017 10 28.4584 11 47.0991 10 43.7479 10 0.9763 9]
Total: 1276.3601999999998
Mean: 25.527205
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3220.327986699992
Median total errors in population: 1288.2862
Error averages by case: (142.49322820000106 12.341 113.63359060000118 10.011 141.12990460000057 11.971 167.11649460000118 10.763 179.08957349999784 8.767 75.01097229999895 9.918 163.93600830000057 11.655 104.02543970000033 10.363 71.35230080000015 9.534 121.08657120000026 11.04 84.99996449999958 11.135 123.9270149000014 11.095 134.3151696000006 9.798 67.85557219999961 10.473 129.38228810000064 11.073 166.97771750000297 11.79 105.33115609999962 10.195 76.14529110000018 10.949 100.2770868999995 10.384 166.03411089999994 11.752 121.66313160000112 10.236 125.46329309999896 11.798 90.52793980000091 10.625 115.3261681999988 10.754 65.24899839999969 9.559)
Error minima by case: (4.6215 8 1.9164 8 40.5912 9 1.307 8 2.7264 6 1.6898 8 12.3546 9 4.1113 9 5.9024 7 2.2648 9 2.4148 9 8.3219 9 22.1199 8 2.5621 9 9.5143 9 0.2961 9 2.4747 9 2.2857 8 0.6649 8 15.0055 9 11.6853 10 11.4454 10 0.1201 8 1.2491 9 0.0447 8)
Average genome size in population (length): 50.707
Average program size in population (points): 51.707
Average percent parens in population: 0.020
Minimum age in population: 44.38180039264262
Maximum age in population: 48.79412774788216
Average age in population: 46.87247452851571
Median age in population: 46.92579440586269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 98
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.194
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 45369209
--- Timings ---
Current time: 1529614862309 milliseconds
Total Time:          98.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.1 seconds, 42.8%
Fitness Testing:     43.2 seconds, 44.0%
Report:              12.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 66393.01849999998
Test mean error for best: 33.19651
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -92.3276322136
Correct output: 36.3070392923  | Program output: -39.3276322136
Correct output: 72.2736335     | Program output: -17.3276322136
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -53.3276322136
Correct output: -67.8887443206 | Program output: -69.3276322136
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -79.3276322136
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -42.3276322136
Correct output: 41.2961317951  | Program output: -34.3276322136
Correct output: -86.4876636044 | Program output: -79.3276322136
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -82.3276322136
Correct output: -60.3146557076 | Program output: -32.3276322136
Correct output: -58.5545895853 | Program output: -83.3276322136
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_frominteger} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_frominteger 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod float_swap integer_sub integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 45.2766 11 75.6347 8 89.6013 9 2.6908 10 73.0269 9 1.4389 9 8.0366 9 63.3567 11 29.5342 11 25.2765 11 35.4476 11 4.3869 10 31.8134 11 75.6238 11 7.16 10 19.3035 11 43.3621 10 74.6669 12 27.987 9 24.773 12 47.1471 11 43.7959 11 0.9283 9]
Total: 1271.9415999999999
Mean: 25.438831
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2985.9248494999833
Median total errors in population: 1288.2862
Error averages by case: (143.73027510000074 12.634 112.64395290000155 10.115 125.40407100000077 12.009 150.8203914000006 10.896 163.87941049999836 8.826 62.88301699999877 9.99 149.69878590000138 11.822 85.90877189999995 10.326 69.80355130000022 9.333 120.18669190000084 11.075 85.85277569999927 11.052 106.4616924000014 11.106 115.6445445000012 10.029 61.48079429999948 10.341 111.57138330000089 11.152 150.9301445000029 11.853 90.1568007999992 10.193 76.56215980000015 10.987 100.60648409999912 10.332 151.95147280000037 11.866 107.77470820000119 10.247 106.51267999999881 11.873 92.2760435000008 10.921 110.63286889999894 10.878 63.27437779999975 9.421)
Error minima by case: (2.2403 9 1.9164 9 40.5682 3 11.1372 2 3.7264 1 1.6898 8 56.0 3 0.1113 9 3.0976 7 2.2957 9 2.4148 8 10.3075 10 0.1199 7 2.5621 9 0.4857 8 6.1481 2 2.4517 2 3.3545 9 1.3651 8 69.9585 3 23.2787 2 0.4454 10 0.9139 8 0.1851 8 0.0107 8)
Average genome size in population (length): 48.529
Average program size in population (points): 49.529
Average percent parens in population: 0.021
Minimum age in population: 45.8513820618391
Maximum age in population: 50.16450011497363
Average age in population: 48.41556890702038
Median age in population: 48.45764842478093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.181
Error (vector) diversity:			 0.193
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 46582434
--- Timings ---
Current time: 1529614865291 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.3 seconds, 42.8%
Fitness Testing:     44.5 seconds, 43.9%
Report:              13.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 63479.13109999998
Test mean error for best: 31.73957
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.013        
Correct output: -1.9163746696  | Program output: 61.013        
Correct output: -137.6042258699 | Program output: -96.013       
Correct output: 36.3070392923  | Program output: -43.013       
Correct output: 72.2736335     | Program output: -21.013       
Correct output: 63.7517755018  | Program output: 61.013        
Correct output: -126.3545601136 | Program output: -57.013       
Correct output: -67.8887443206 | Program output: -73.013       
Correct output: 69.0975510066  | Program output: 61.013        
Correct output: -2.2957371594  | Program output: 61.013        
Correct output: 90.5951564245  | Program output: 61.013        
Correct output: 86.3375333144  | Program output: 61.013        
Correct output: -43.8800601593 | Program output: -83.013       
Correct output: 65.4478526397  | Program output: 61.013        
Correct output: -10.5142820829 | Program output: -46.013       
Correct output: 41.2961317951  | Program output: -38.013       
Correct output: -86.4876636044 | Program output: -83.013       
Correct output: 80.3644708752  | Program output: 61.013        
Correct output: 17.6989047567  | Program output: 61.013        
Correct output: -156.9944896535 | Program output: -86.013       
Correct output: -60.3146557076 | Program output: -36.013       
Correct output: -58.5545895853 | Program output: -87.013       
Correct output: 13.9139457469  | Program output: 61.013        
Correct output: 17.2650924253  | Program output: -6.013        
Correct output: 61.9892736544  | Program output: 61.013        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yank} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_max} {:instruction float_sub} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction 13} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank float_swap integer_sub integer_add integer_dup_times float_mult integer_yank float_add integer_stackdepth float_shove in2 integer_dec integer_min float_frominteger integer_dec integer_min float_frominteger integer_min float_frominteger integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float integer_max float_sub float_swap integer_dup_times float_mod integer_fromfloat integer_add 13 print_integer integer_dec float_swap)
Errors: [99.6475 12 62.9294 9 41.5912 12 79.32 10 93.2866 8 2.7388 9 69.3416 10 5.1243 11 8.0846 9 63.3087 11 29.5822 11 25.3245 11 39.1329 8 4.4349 10 35.4987 11 79.3091 11 3.4747 10 19.3515 11 43.3141 11 70.9815 11 24.3017 10 28.4584 11 47.0991 10 23.2781 10 0.9763 9]
Total: 1255.8903999999998
Mean: 25.117807
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2996.897440200001
Median total errors in population: 1284.3662
Error averages by case: (151.17053610000087 12.415 119.83102120000105 9.938 118.70123830000074 11.931 146.70538860000056 10.571 159.8446558999999 8.432 75.04952219999913 9.818 142.63558800000143 11.305 83.02160020000036 10.452 74.4786788000001 9.314 125.2271844000001 11.02 91.7658253999998 10.96 108.44176690000076 11.064 112.41958549999984 9.557 71.0717899999998 10.357 107.8771396000003 11.18 146.77690390000197 11.681 82.28665989999955 10.124 82.66736890000013 10.953 105.33143589999956 10.44 145.1673980000002 11.473 99.40963380000045 10.232 103.45107129999984 11.496 99.71666400000089 10.754 110.30541499999948 10.692 67.9523683999998 9.432)
Error minima by case: (21.6005 6 1.9164 6 36.3958 3 9.693 2 3.7564 2 1.6892 6 14.3546 3 1.4389 9 5.9024 7 2.2957 6 3.4048 6 5.0 6 21.1768 7 3.3852 6 10.5143 9 0.2961 2 2.4477 2 3.3015 6 1.6676 9 2.9645 3 4.7422 2 6.5023 10 0.9139 8 4.2651 6 0.0107 8)
Average genome size in population (length): 50.6
Average program size in population (points): 51.6
Average percent parens in population: 0.020
Minimum age in population: 47.78769154241309
Maximum age in population: 51.74914720375091
Average age in population: 49.98516606817045
Median age in population: 50.04876601108117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.221
Error (vector) diversity:			 0.236
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 47847434
--- Timings ---
Current time: 1529614868506 milliseconds
Total Time:         104.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.7 seconds, 42.8%
Fitness Testing:     45.8 seconds, 43.9%
Report:              13.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 63479.13109999998
Test mean error for best: 31.73957
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.013        
Correct output: -1.9163746696  | Program output: 61.013        
Correct output: -137.6042258699 | Program output: -96.013       
Correct output: 36.3070392923  | Program output: -43.013       
Correct output: 72.2736335     | Program output: -21.013       
Correct output: 63.7517755018  | Program output: 61.013        
Correct output: -126.3545601136 | Program output: -57.013       
Correct output: -67.8887443206 | Program output: -73.013       
Correct output: 69.0975510066  | Program output: 61.013        
Correct output: -2.2957371594  | Program output: 61.013        
Correct output: 90.5951564245  | Program output: 61.013        
Correct output: 86.3375333144  | Program output: 61.013        
Correct output: -43.8800601593 | Program output: -83.013       
Correct output: 65.4478526397  | Program output: 61.013        
Correct output: -10.5142820829 | Program output: -46.013       
Correct output: 41.2961317951  | Program output: -38.013       
Correct output: -86.4876636044 | Program output: -83.013       
Correct output: 80.3644708752  | Program output: 61.013        
Correct output: 17.6989047567  | Program output: 61.013        
Correct output: -156.9944896535 | Program output: -86.013       
Correct output: -60.3146557076 | Program output: -36.013       
Correct output: -58.5545895853 | Program output: -87.013       
Correct output: 13.9139457469  | Program output: 61.013        
Correct output: 17.2650924253  | Program output: -6.013        
Correct output: 61.9892736544  | Program output: 61.013        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dup} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_sub} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction 13} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (integer_shove float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank float_dup integer_min in2 integer_dec integer_dec integer_min in2 integer_dec integer_sub integer_dup_times integer_add integer_yank integer_mod float_swap integer_sub in2 integer_dec integer_min in2 integer_dec integer_min integer_sub in2 integer_dec integer_min in2 integer_dec integer_min float_frominteger integer_min float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat float_stackdepth 13 print_integer integer_dec float_swap)
Errors: [99.6475 12 62.9294 9 41.5912 12 79.32 10 93.2866 8 2.7388 9 69.3416 10 5.1243 11 8.0846 9 63.3087 11 29.5822 11 25.3245 11 39.1329 8 4.4349 10 35.4987 11 79.3091 11 3.4747 10 19.3515 11 43.3141 11 70.9815 11 24.3017 10 28.4584 11 47.0991 10 23.2781 10 0.9763 9]
Total: 1255.8903999999998
Mean: 25.117807
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2951.9535610000016
Median total errors in population: 1282.3462
Error averages by case: (147.34386530000089 12.285 115.78715869999976 9.724 119.85275949999978 11.985 145.9733045000016 10.347 159.64409310000036 8.258 70.06350459999928 9.61 143.45448190000138 10.798 83.58819920000023 10.769 73.60201700000043 9.362 119.98783319999963 11.056 91.62675789999986 11.087 98.86396250000095 11.076 112.23757909999951 9.059 69.15934189999942 10.34 107.37437179999958 11.167 146.1309459000014 11.441 84.14028680000023 10.202 81.42391469999993 10.998 100.03899210000037 10.743 146.41216439999926 11.334 100.84985520000016 10.281 103.60908640000054 11.273 97.6016217000013 10.559 103.93726569999993 10.523 65.52919790000023 9.444)
Error minima by case: (11.6215 4 1.9164 4 5.2101 5 1.693 4 11.2436 3 1.6898 4 31.3246 5 0.1113 9 0.9724 7 2.2957 4 3.4048 4 4.0 4 22.1329 8 3.3859 4 3.4857 9 1.3762 4 2.4517 4 5.2895 4 4.6859 9 3.9645 5 7.2847 4 11.4584 10 0.9139 9 4.2651 4 0.0237 8)
Average genome size in population (length): 53.568
Average program size in population (points): 54.568
Average percent parens in population: 0.019
Minimum age in population: 49.30668274126947
Maximum age in population: 53.25388200330781
Average age in population: 51.4499062444907
Median age in population: 51.51529345675954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.187
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 49186634
--- Timings ---
Current time: 1529614871713 milliseconds
Total Time:         107.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.9 seconds, 42.7%
Fitness Testing:     47.3 seconds, 44.0%
Report:              14.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 77617.29510000005
Test mean error for best: 38.80865
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -96.0         
Correct output: 36.3070392923  | Program output: -43.0         
Correct output: 72.2736335     | Program output: 61.061        
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -57.0         
Correct output: -67.8887443206 | Program output: -73.0         
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -83.0         
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -46.0         
Correct output: 41.2961317951  | Program output: -38.0         
Correct output: -86.4876636044 | Program output: -83.0         
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -86.0         
Correct output: -60.3146557076 | Program output: -36.0         
Correct output: -58.5545895853 | Program output: -87.0         
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min float_yank float_inc integer_sub integer_sub in2 -16 float_swap integer_sub -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 41.6042 12 79.307 11 11.2126 8 2.6908 10 69.3546 12 5.1113 10 8.0366 9 63.3567 11 29.5342 11 25.2765 11 39.1199 10 4.3869 10 35.4857 11 79.2961 12 3.4877 10 19.3035 11 43.3621 10 70.9945 12 24.3147 10 28.4454 12 47.1471 11 43.7959 11 0.9283 9]
Total: 1205.2252
Mean: 24.104504
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2744.0370859999975
Median total errors in population: 1276.3601999999998
Error averages by case: (146.4020375000011 12.085 115.2309054999988 9.421 104.21140309999959 12.033 131.9880730000024 10.128 145.81988570000127 8.187 67.36133849999942 9.316 128.45431210000007 10.322 68.18279050000089 10.971 72.06151990000043 9.323 117.69793349999888 11.079 90.7280109000002 11.098 91.57518720000094 11.074 97.39429869999853 8.644 68.49448599999985 10.303 92.66720129999852 11.155 132.1624813999996 11.138 67.91166729999955 10.207 81.3024400999999 11.015 99.3271232000012 10.99 131.30587389999843 11.278 85.27121480000041 10.245 88.51196420000132 11.221 97.07844830000133 10.303 96.77136810000046 10.213 64.9741213000003 9.402)
Error minima by case: (22.6215 9 0.9034 8 36.4088 4 17.294 3 4.7264 2 0.7388 7 30.3416 4 0.4389 9 4.4252 7 1.3381 8 3.4178 8 9.3245 8 22.1329 7 2.4349 9 5.4987 9 17.2831 3 2.4747 3 1.6921 9 1.3141 8 2.9815 4 6.3017 3 11.4584 9 0.9139 9 4.2651 8 0.0237 8)
Average genome size in population (length): 56.117
Average program size in population (points): 57.117
Average percent parens in population: 0.018
Minimum age in population: 50.406204668805
Maximum age in population: 54.83613765356131
Average age in population: 52.90532774794349
Median age in population: 52.94900462804071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.135
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 50589559
--- Timings ---
Current time: 1529614874984 milliseconds
Total Time:         110.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 42.6%
Fitness Testing:     48.8 seconds, 44.0%
Report:              14.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 41426.333699999974
Test mean error for best: 20.71317
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -138.60422586993
Correct output: 36.3070392923  | Program output: 35.30703929233
Correct output: 72.2736335     | Program output: 71.27363353   
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -127.35456011363
Correct output: -67.8887443206 | Program output: -68.88874432063
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -44.88006015933
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -11.51428208293
Correct output: 41.2961317951  | Program output: 40.29613179513
Correct output: -86.4876636044 | Program output: -87.48766360443
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -157.99448965353
Correct output: -60.3146557076 | Program output: -61.31465570763
Correct output: -58.5545895853 | Program output: -59.55458958533
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_frominteger} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_yank} {:instruction in1} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_frominteger 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod integer_yank integer_mod float_swap integer_sub integer_sub integer_add integer_yank in1 float_swap integer_sub integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 1.0 2 1.0 2 1.0 2 2.6908 10 1.0 2 1.0 2 8.0366 9 63.3567 11 29.5342 11 25.2765 11 1.0 2 4.3869 10 1.0 2 1.0 2 1.0 2 19.3035 11 43.3621 10 1.0 2 1.0 2 1.0 2 47.1471 11 43.7959 11 0.9283 9]
Total: 623.4915
Mean: 12.46983
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3119.6683724999975
Median total errors in population: 1276.3601999999998
Error averages by case: (162.6646267000005 12.166 130.1563208999991 9.617 120.80469639999922 11.969 145.05344960000176 10.009 157.8953573000006 8.335 83.86467559999966 9.412 144.46127320000022 10.312 82.62441440000026 10.791 87.13193510000055 9.305 133.36492259999918 11.082 104.97628940000011 11.037 107.97014510000072 11.07 111.25174539999888 9.083 82.46697749999937 10.326 106.46833129999895 11.186 145.10850460000034 11.17 84.14381930000022 10.248 95.8320387 10.943 114.78752790000061 10.905 147.48256259999866 11.447 101.80267829999995 10.253 102.44514180000093 11.387 113.76984660000154 10.565 110.69046330000002 10.327 80.09562890000002 9.41)
Error minima by case: (0.3785 9 1.9164 9 1.0 2 1.0 2 1.0 2 0.7388 7 1.0 2 1.0 2 4.4252 7 2.2957 9 3.4178 9 13.3245 8 1.0 2 2.4349 9 1.0 2 1.0 2 1.0 2 2.6921 9 1.6859 9 1.0 2 1.0 2 1.0 2 0.9139 9 2.5927 9 0.0237 8)
Average genome size in population (length): 54.92
Average program size in population (points): 55.92
Average percent parens in population: 0.018
Minimum age in population: 51.90046995622106
Maximum age in population: 56.22506631539727
Average age in population: 54.48064585684579
Median age in population: 54.56522785504058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.18
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 51962559
--- Timings ---
Current time: 1529614878198 milliseconds
Total Time:         114.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 42.5%
Fitness Testing:     50.2 seconds, 44.1%
Report:              15.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 41426.333699999974
Test mean error for best: 20.71317
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: 61.061        
Correct output: -1.9163746696  | Program output: 61.061        
Correct output: -137.6042258699 | Program output: -138.60422586993
Correct output: 36.3070392923  | Program output: 35.30703929233
Correct output: 72.2736335     | Program output: 71.27363353   
Correct output: 63.7517755018  | Program output: 61.061        
Correct output: -126.3545601136 | Program output: -127.35456011363
Correct output: -67.8887443206 | Program output: -68.88874432063
Correct output: 69.0975510066  | Program output: 61.061        
Correct output: -2.2957371594  | Program output: 61.061        
Correct output: 90.5951564245  | Program output: 61.061        
Correct output: 86.3375333144  | Program output: 61.061        
Correct output: -43.8800601593 | Program output: -44.88006015933
Correct output: 65.4478526397  | Program output: 61.061        
Correct output: -10.5142820829 | Program output: -11.51428208293
Correct output: 41.2961317951  | Program output: 40.29613179513
Correct output: -86.4876636044 | Program output: -87.48766360443
Correct output: 80.3644708752  | Program output: 61.061        
Correct output: 17.6989047567  | Program output: 61.061        
Correct output: -156.9944896535 | Program output: -157.99448965353
Correct output: -60.3146557076 | Program output: -61.31465570763
Correct output: -58.5545895853 | Program output: -59.55458958533
Correct output: 13.9139457469  | Program output: 61.061        
Correct output: 17.2650924253  | Program output: 61.061        
Correct output: 61.9892736544  | Program output: 61.061        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_frominteger} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_yank} {:instruction in1} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_frominteger 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank integer_mod integer_yank integer_mod float_swap integer_sub integer_sub integer_add integer_yank in1 float_swap integer_sub integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [99.6955 13 62.9774 10 1.0 2 1.0 2 1.0 2 2.6908 10 1.0 2 1.0 2 8.0366 9 63.3567 11 29.5342 11 25.2765 11 1.0 2 4.3869 10 1.0 2 1.0 2 1.0 2 19.3035 11 43.3621 10 1.0 2 1.0 2 1.0 2 47.1471 11 43.7959 11 0.9283 9]
Total: 623.4915
Mean: 12.46983
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2969.4136216999955
Median total errors in population: 1271.2648000000002
Error averages by case: (151.53092500000076 12.174 118.07615799999901 9.64 121.3367283999989 11.922 145.21598920000199 9.961 156.4280588000007 8.414 70.28335909999954 9.506 145.0192482000008 10.337 83.11677819999998 10.712 76.38216020000057 9.343 122.55380879999917 11.07 92.55296410000004 11.004 96.42373900000094 11.079 111.55997359999881 9.2 68.72526519999977 10.326 106.84885919999873 11.194 145.33608880000085 11.185 85.8752380000009 10.237 83.26815589999987 10.946 103.89260720000071 10.856 147.86182859999838 11.497 102.74935099999969 10.196 102.84144360000116 11.439 102.6580364000015 10.574 97.06203129999949 10.338 69.27882590000002 9.386)
Error minima by case: (1.3785 8 0.9034 8 1.0 2 1.0 2 1.0 2 0.7388 8 0.7376 2 0.4389 2 4.4252 7 2.2957 9 2.4988 9 5.3245 8 1.0 2 2.4349 9 1.0 2 1.0 2 1.0 2 0.3645 9 4.6859 9 1.0 2 1.0 2 1.0 2 0.9139 9 4.2651 9 0.0237 8)
Average genome size in population (length): 57.241
Average program size in population (points): 58.241
Average percent parens in population: 0.018
Minimum age in population: 53.33605147927301
Maximum age in population: 57.96287111086713
Average age in population: 55.93978557448021
Median age in population: 55.97113673110653
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.207
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.212
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 53393597
--- Timings ---
Current time: 1529614881505 milliseconds
Total Time:         117.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.8 seconds, 42.4%
Fitness Testing:     51.8 seconds, 44.1%
Report:              15.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 3158.0
Test mean error for best: 1.57900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: -39.63447345373
Correct output: -1.9163746696  | Program output: -2.91637466963
Correct output: -137.6042258699 | Program output: -138.60422586993
Correct output: 36.3070392923  | Program output: 35.30703929233
Correct output: 72.2736335     | Program output: 71.27363353   
Correct output: 63.7517755018  | Program output: 62.75177550183
Correct output: -126.3545601136 | Program output: -127.35456011363
Correct output: -67.8887443206 | Program output: -68.88874432063
Correct output: 69.0975510066  | Program output: 68.09755100663
Correct output: -2.2957371594  | Program output: -3.29573715943
Correct output: 90.5951564245  | Program output: 89.59515642453
Correct output: 86.3375333144  | Program output: 85.33753331443
Correct output: -43.8800601593 | Program output: -44.88006015933
Correct output: 65.4478526397  | Program output: 64.44785263973
Correct output: -10.5142820829 | Program output: -11.51428208293
Correct output: 41.2961317951  | Program output: 40.29613179513
Correct output: -86.4876636044 | Program output: -87.48766360443
Correct output: 80.3644708752  | Program output: 79.36447087523
Correct output: 17.6989047567  | Program output: 16.69890475673
Correct output: -156.9944896535 | Program output: -157.99448965353
Correct output: -60.3146557076 | Program output: -61.31465570763
Correct output: -58.5545895853 | Program output: -59.55458958533
Correct output: 13.9139457469  | Program output: 12.91394574693
Correct output: 17.2650924253  | Program output: 16.26509242533
Correct output: 61.9892736544  | Program output: 60.98927365443
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_frominteger} {:instruction 61} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction integer_sub} {:instruction -36.394173442924796} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_shove} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_yank} {:instruction in1} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_frominteger 61 float_min float_yank float_inc integer_sub -36.394173442924796 float_tan integer_swap integer_yank float_shove integer_yank integer_mod float_swap integer_sub integer_sub integer_add integer_yank in1 float_swap integer_sub integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2]
Total: 77.0
Mean: 1.54
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2942.447440900001
Median total errors in population: 1255.8903999999998
Error averages by case: (156.80769840000022 12.138 126.33549239999878 9.519 111.85501469999923 11.881 138.02499620000236 10.2 141.57326250000088 8.169 78.31965110000016 9.404 135.46384860000055 10.368 75.9901907000002 10.783 81.57181360000044 9.33 128.19254639999886 11.044 99.4989509000005 11.091 103.54746610000092 11.069 104.41513749999895 8.707 77.94346149999903 10.297 99.84606749999868 10.978 138.16878070000038 11.055 76.62043410000014 10.066 90.29512030000039 10.993 110.34362210000097 10.922 138.18630159999861 11.249 93.5767783 10.093 95.73546350000093 11.109 108.2231809000017 10.327 96.03328029999959 10.281 75.39688099999982 9.409)
Error minima by case: (1.0 2 0.9034 2 1.0 2 1.0 2 0.7394 2 1.0 2 1.0 2 0.4389 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 0.4877 2 1.0 3 1.0 2 1.0 2 1.0 2 0.0586 2 0.9139 2 1.0 2 0.0237 2)
Average genome size in population (length): 59.71
Average program size in population (points): 60.71
Average percent parens in population: 0.017
Minimum age in population: 54.33605147927301
Maximum age in population: 59.49059540670714
Average age in population: 57.37169669405371
Median age in population: 57.42627362766871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.166
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 54886360
--- Timings ---
Current time: 1529614884864 milliseconds
Total Time:         120.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.1 seconds, 42.4%
Fitness Testing:     53.3 seconds, 44.2%
Report:              16.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 2163.0
Test mean error for best: 1.08150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: -39.6344734537
Correct output: -1.9163746696  | Program output: -2.9163746696 
Correct output: -137.6042258699 | Program output: -138.6042258699
Correct output: 36.3070392923  | Program output: 35.3070392923 
Correct output: 72.2736335     | Program output: 71.2736335    
Correct output: 63.7517755018  | Program output: 62.7517755018 
Correct output: -126.3545601136 | Program output: -127.3545601136
Correct output: -67.8887443206 | Program output: -68.8887443206
Correct output: 69.0975510066  | Program output: 68.0975510066 
Correct output: -2.2957371594  | Program output: -3.2957371594 
Correct output: 90.5951564245  | Program output: 89.5951564245 
Correct output: 86.3375333144  | Program output: 85.3375333144 
Correct output: -43.8800601593 | Program output: -44.8800601593
Correct output: 65.4478526397  | Program output: 64.4478526397 
Correct output: -10.5142820829 | Program output: -11.5142820829
Correct output: 41.2961317951  | Program output: 40.2961317951 
Correct output: -86.4876636044 | Program output: -87.4876636044
Correct output: 80.3644708752  | Program output: 79.3644708752 
Correct output: 17.6989047567  | Program output: 16.6989047567 
Correct output: -156.9944896535 | Program output: -157.9944896535
Correct output: -60.3146557076 | Program output: -61.3146557076
Correct output: -58.5545895853 | Program output: -59.5545895853
Correct output: 13.9139457469  | Program output: 12.9139457469 
Correct output: 17.2650924253  | Program output: 16.2650924253 
Correct output: 61.9892736544  | Program output: 60.9892736544 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_yank} {:instruction in1} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod integer_dup_items float_dup_items integer_sub float_pop float_swap integer_sub integer_sub integer_add integer_yank in1 float_swap integer_sub integer_sub integer_sub in2 -16 float_swap integer_sub integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 52.0
Mean: 1.04
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2768.724941100002
Median total errors in population: 1248.7383999999997
Error averages by case: (150.2842876000011 12.209 119.0182108999999 9.708 110.12599279999989 11.028 130.42259430000172 9.709 109.36723220000022 7.712 68.4751767999991 9.528 131.0631158000008 10.013 73.19692830000021 9.838 74.95011950000044 9.256 121.68641639999962 10.929 90.71690999999969 10.988 96.48764480000118 10.907 99.58805979999958 8.641 69.35427269999961 10.161 95.19143719999926 10.219 129.54148730000063 10.393 78.12236409999964 9.41 81.63925189999995 10.866 102.96147590000018 10.55 133.68671649999922 10.684 92.14299920000066 9.418 91.93860850000023 10.497 100.67211910000117 10.463 97.27304519999956 10.386 67.96647430000013 9.339)
Error minima by case: (0.0 1 0.0 1 0.0 0 0.0 0 0.0 1 0.0 1 0.0 0 0.0 0 0.0 1 0.0 1 0.0 2 0.0 1 0.0 0 0.0 1 0.0 0 0.0 0 0.0 0 0.0 2 0.0 1 0.0 0 0.0 0 0.0 0 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 55.307
Average program size in population (points): 56.307
Average percent parens in population: 0.018
Minimum age in population: 56.25742675854053
Maximum age in population: 60.8421755047093
Average age in population: 58.85796119542377
Median age in population: 58.89271853886112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.192
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 56269035
--- Timings ---
Current time: 1529614887968 milliseconds
Total Time:         123.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.4 seconds, 42.3%
Fitness Testing:     54.8 seconds, 44.2%
Report:              16.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: -38.6344734537
Correct output: -1.9163746696  | Program output: -1.9163746696 
Correct output: -137.6042258699 | Program output: -137.6042258699
Correct output: 36.3070392923  | Program output: 36.3070392923 
Correct output: 72.2736335     | Program output: 72.2736335    
Correct output: 63.7517755018  | Program output: 63.7517755018 
Correct output: -126.3545601136 | Program output: -126.3545601136
Correct output: -67.8887443206 | Program output: -67.8887443206
Correct output: 69.0975510066  | Program output: 69.0975510066 
Correct output: -2.2957371594  | Program output: -2.2957371594 
Correct output: 90.5951564245  | Program output: 90.5951564245 
Correct output: 86.3375333144  | Program output: 86.3375333144 
Correct output: -43.8800601593 | Program output: -43.8800601593
Correct output: 65.4478526397  | Program output: 65.4478526397 
Correct output: -10.5142820829 | Program output: -10.5142820829
Correct output: 41.2961317951  | Program output: 41.2961317951 
Correct output: -86.4876636044 | Program output: -86.4876636044
Correct output: 80.3644708752  | Program output: 80.3644708752 
Correct output: 17.6989047567  | Program output: 17.6989047567 
Correct output: -156.9944896535 | Program output: -156.9944896535
Correct output: -60.3146557076 | Program output: -60.3146557076
Correct output: -58.5545895853 | Program output: -58.5545895853
Correct output: 13.9139457469  | Program output: 13.9139457469 
Correct output: 17.2650924253  | Program output: 17.2650924253 
Correct output: 61.9892736544  | Program output: 61.9892736544 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_shove} {:instruction float_cos} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_pop} {:instruction tagged_671} {:instruction 61} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction in2} {:instruction -16} {:instruction float_swap} {:instruction integer_sub} {:instruction -16} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction in2} {:instruction integer_dec} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction in2} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dec} {:instruction float_swap})
Best program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min in1 float_inc integer_sub integer_sub in2 -16 float_swap integer_sub -16 float_swap integer_dup integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2654.6799106999965
Median total errors in population: 1194.3342
Error averages by case: (145.2926362000007 11.135 118.15099410000036 8.964 110.21888309999999 7.738 113.78393330000074 6.881 89.78844379999984 5.726 65.13008589999917 8.819 122.16586000000025 7.151 71.00659060000008 7.036 80.36961180000027 8.583 123.34364149999998 9.947 89.39289959999971 10.175 93.8059639000009 9.874 95.51866219999967 6.309 67.45968349999968 9.338 92.01353059999954 7.294 112.28437830000014 7.307 86.53746609999999 6.759 79.4334828000001 10.069 105.33146139999988 9.574 124.39105919999966 7.556 95.77319020000031 6.799 91.0483128000002 7.506 99.6795870000009 9.728 100.67673749999966 9.547 73.6478152999999 8.62)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 53.069
Average program size in population (points): 54.069
Average percent parens in population: 0.019
Minimum age in population: 57.49274495581631
Maximum age in population: 62.44212692693054
Average age in population: 60.54170050260414
Median age in population: 60.58901540225543
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.251
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 57595760
--- Timings ---
Current time: 1529614891214 milliseconds
Total Time:         127.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 42.2%
Fitness Testing:     56.3 seconds, 44.3%
Report:              16.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 41
Successful program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min in1 float_inc integer_sub integer_sub in2 -16 float_swap integer_sub -16 float_swap integer_dup integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 53


Auto-simplifying with starting size: 53
step: 0
program: (float_max float_mult integer_shove float_cos float_flush integer_pop integer_mod print_float float_dup_items integer_sub float_pop tagged_671 61 float_min in1 float_inc integer_sub integer_sub in2 -16 float_swap integer_sub -16 float_swap integer_dup integer_dup_times integer_add integer_yank integer_yank integer_min in2 integer_dec integer_min float_frominteger float_add float_frominteger print_float in2 float_sub integer_dup_items integer_dup_times in2 float_sub integer_dup_items integer_dup_times float_mod integer_fromfloat integer_add integer_yankdup print_integer integer_dec float_swap)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 53

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -38.6344734537 | Program output: -38.6344734537
Correct output: -1.9163746696  | Program output: -1.9163746696 
Correct output: -137.6042258699 | Program output: -137.6042258699
Correct output: 36.3070392923  | Program output: 36.3070392923 
Correct output: 72.2736335     | Program output: 72.2736335    
Correct output: 63.7517755018  | Program output: 63.7517755018 
Correct output: -126.3545601136 | Program output: -126.3545601136
Correct output: -67.8887443206 | Program output: -67.8887443206
Correct output: 69.0975510066  | Program output: 69.0975510066 
Correct output: -2.2957371594  | Program output: -2.2957371594 
Correct output: 90.5951564245  | Program output: 90.5951564245 
Correct output: 86.3375333144  | Program output: 86.3375333144 
Correct output: -43.8800601593 | Program output: -43.8800601593
Correct output: 65.4478526397  | Program output: 65.4478526397 
Correct output: -10.5142820829 | Program output: -10.5142820829
Correct output: 41.2961317951  | Program output: 41.2961317951 
Correct output: -86.4876636044 | Program output: -86.4876636044
Correct output: 80.3644708752  | Program output: 80.3644708752 
Correct output: 17.6989047567  | Program output: 17.6989047567 
Correct output: -156.9944896535 | Program output: -156.9944896535
Correct output: -60.3146557076 | Program output: -60.3146557076
Correct output: -58.5545895853 | Program output: -58.5545895853
Correct output: 13.9139457469  | Program output: 13.9139457469 
Correct output: 17.2650924253  | Program output: 17.2650924253 
Correct output: 61.9892736544  | Program output: 61.9892736544 
;;******************************
