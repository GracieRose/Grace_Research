Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[69.73210097098547 -94] -24.26789902901453]
Train Case:   1 | Input/Output: [[-30.92390459516423 41] 10.076095404835769]
Train Case:   2 | Input/Output: [[86.02061486883247 20] 106.02061486883247]
Train Case:   3 | Input/Output: [[-99.2414395997294 100] 0.7585604002705963]
Train Case:   4 | Input/Output: [[38.08927175005553 -6] 32.08927175005553]
Train Case:   5 | Input/Output: [[-33.76009718104136 72] 38.23990281895864]
Train Case:   6 | Input/Output: [[-41.25358196598052 13] -28.253581965980523]
Train Case:   7 | Input/Output: [[-53.30811633096282 76] 22.691883669037182]
Train Case:   8 | Input/Output: [[-26.809835382425405 -38] -64.8098353824254]
Train Case:   9 | Input/Output: [[-93.57297172880583 43] -50.572971728805825]
Train Case:  10 | Input/Output: [[-21.428369201598812 32] 10.571630798401188]
Train Case:  11 | Input/Output: [[4.935993505836294 -10] -5.064006494163706]
Train Case:  12 | Input/Output: [[-99.57003735089447 -57] -156.57003735089447]
Train Case:  13 | Input/Output: [[-55.88063131353154 72] 16.119368686468462]
Train Case:  14 | Input/Output: [[-19.81216509636748 70] 50.18783490363252]
Train Case:  15 | Input/Output: [[-50.409501637124144 -88] -138.40950163712415]
Train Case:  16 | Input/Output: [[-80.7462217730863 -39] -119.7462217730863]
Train Case:  17 | Input/Output: [[-5.256675086412386 -90] -95.25667508641239]
Train Case:  18 | Input/Output: [[81.66670507493578 72] 153.66670507493578]
Train Case:  19 | Input/Output: [[-61.13691531888597 68] 6.863084681114032]
Train Case:  20 | Input/Output: [[-4.664041706422054 -1] -5.664041706422054]
Train Case:  21 | Input/Output: [[67.73740263191078 -33] 34.73740263191078]
Train Case:  22 | Input/Output: [[22.874678751120598 -72] -49.1253212488794]
Train Case:  23 | Input/Output: [[22.27442010556726 -5] 17.27442010556726]
Train Case:  24 | Input/Output: [[6.998944207591904 56] 62.998944207591904]
Test Case:   0 | Input/Output: [[-80.53586388257693 -68] -148.53586388257693]
Test Case:   1 | Input/Output: [[79.96744812647219 55] 134.9674481264722]
Test Case:   2 | Input/Output: [[21.877215295117608 -84] -62.12278470488239]
Test Case:   3 | Input/Output: [[-80.6922851291024 -64] -144.6922851291024]
Test Case:   4 | Input/Output: [[-47.261192010628214 -34] -81.2611920106282]
Test Case:   5 | Input/Output: [[59.5743610269667 66] 125.5743610269667]
Test Case:   6 | Input/Output: [[87.25625804131013 -28] 59.25625804131013]
Test Case:   7 | Input/Output: [[-1.1769539798787179 78] 76.82304602012128]
Test Case:   8 | Input/Output: [[-2.2580809228286682 58] 55.74191907717133]
Test Case:   9 | Input/Output: [[62.51011344995837 -27] 35.51011344995837]
Test Case:  10 | Input/Output: [[-94.21858456331253 -73] -167.21858456331253]
Test Case:  11 | Input/Output: [[16.97139781633375 21] 37.97139781633375]
Test Case:  12 | Input/Output: [[-93.34398290515091 -1] -94.34398290515091]
Test Case:  13 | Input/Output: [[-70.03757437763029 -45] -115.03757437763029]
Test Case:  14 | Input/Output: [[97.14244390032499 -11] 86.14244390032499]
Test Case:  15 | Input/Output: [[-38.695073355763675 -98] -136.69507335576367]
Test Case:  16 | Input/Output: [[22.58234188338028 63] 85.58234188338028]
Test Case:  17 | Input/Output: [[29.353518379397656 25] 54.353518379397656]
Test Case:  18 | Input/Output: [[27.806450587767387 18] 45.80645058776739]
Test Case:  19 | Input/Output: [[35.531310179361725 -24] 11.531310179361725]
Test Case:  20 | Input/Output: [[-90.39826051014967 33] -57.39826051014967]
Test Case:  21 | Input/Output: [[-93.59686021235586 -4] -97.59686021235586]
Test Case:  22 | Input/Output: [[-55.962942466664245 62] 6.037057533335755]
Test Case:  23 | Input/Output: [[80.02593152057258 91] 171.02593152057258]
Test Case:  24 | Input/Output: [[27.175880918072863 -76] -48.82411908192714]
Test Case:  25 | Input/Output: [[-54.709098596219576 36] -18.709098596219576]
Test Case:  26 | Input/Output: [[7.302227320528914 98] 105.30222732052891]
Test Case:  27 | Input/Output: [[-73.4835170069924 61] -12.4835170069924]
Test Case:  28 | Input/Output: [[26.757671338681874 71] 97.75767133868187]
Test Case:  29 | Input/Output: [[-5.607324611011009 -93] -98.60732461101101]
Test Case:  30 | Input/Output: [[58.085695798020396 -22] 36.085695798020396]
Test Case:  31 | Input/Output: [[91.00843221309535 -51] 40.00843221309535]
Test Case:  32 | Input/Output: [[-36.975322591504536 -51] -87.97532259150454]
Test Case:  33 | Input/Output: [[-20.937174256644767 55] 34.06282574335523]
Test Case:  34 | Input/Output: [[-84.34688809483136 60] -24.346888094831357]
Test Case:  35 | Input/Output: [[26.148986662578054 -42] -15.851013337421946]
Test Case:  36 | Input/Output: [[91.78971048308253 -98] -6.21028951691747]
Test Case:  37 | Input/Output: [[-7.3722879903057645 -22] -29.372287990305765]
Test Case:  38 | Input/Output: [[35.462843637004994 94] 129.462843637005]
Test Case:  39 | Input/Output: [[-19.46389431339159 75] 55.53610568660841]
Test Case:  40 | Input/Output: [[18.548555970844234 -98] -79.45144402915577]
Test Case:  41 | Input/Output: [[-6.472144073364291 -35] -41.47214407336429]
Test Case:  42 | Input/Output: [[-82.07849305482316 -95] -177.07849305482316]
Test Case:  43 | Input/Output: [[25.142189065833037 30] 55.14218906583304]
Test Case:  44 | Input/Output: [[-19.755583515100184 69] 49.244416484899816]
Test Case:  45 | Input/Output: [[-59.90761638771933 -28] -87.90761638771933]
Test Case:  46 | Input/Output: [[-13.180740348829772 0] -13.180740348829772]
Test Case:  47 | Input/Output: [[48.42070305695418 73] 121.42070305695418]
Test Case:  48 | Input/Output: [[97.30831297351648 89] 186.30831297351648]
Test Case:  49 | Input/Output: [[-57.27866568865962 10] -47.27866568865962]
Test Case:  50 | Input/Output: [[-17.938382925275135 -28] -45.938382925275135]
Test Case:  51 | Input/Output: [[-16.14059196828596 -32] -48.14059196828596]
Test Case:  52 | Input/Output: [[-84.78970377254656 -73] -157.78970377254655]
Test Case:  53 | Input/Output: [[15.521035968681886 -9] 6.521035968681886]
Test Case:  54 | Input/Output: [[-44.97183888711251 -39] -83.97183888711251]
Test Case:  55 | Input/Output: [[-96.72357583825047 -83] -179.72357583825047]
Test Case:  56 | Input/Output: [[78.0388387459341 -13] 65.0388387459341]
Test Case:  57 | Input/Output: [[-83.6017681671809 99] 15.398231832819107]
Test Case:  58 | Input/Output: [[-34.35073819086465 32] -2.3507381908646465]
Test Case:  59 | Input/Output: [[-82.82795130345069 -26] -108.82795130345069]
Test Case:  60 | Input/Output: [[88.22257638379472 61] 149.22257638379472]
Test Case:  61 | Input/Output: [[53.862109210507214 -76] -22.137890789492786]
Test Case:  62 | Input/Output: [[25.43858999429831 20] 45.43858999429831]
Test Case:  63 | Input/Output: [[31.75983130727252 33] 64.75983130727252]
Test Case:  64 | Input/Output: [[-5.5605363647739665 -92] -97.56053636477397]
Test Case:  65 | Input/Output: [[-4.989194256877099 88] 83.0108057431229]
Test Case:  66 | Input/Output: [[-70.3116959020559 -25] -95.3116959020559]
Test Case:  67 | Input/Output: [[-95.00783482087184 36] -59.007834820871835]
Test Case:  68 | Input/Output: [[70.81975369266507 62] 132.81975369266507]
Test Case:  69 | Input/Output: [[-66.86058341590267 -61] -127.86058341590267]
Test Case:  70 | Input/Output: [[93.63912929367339 65] 158.6391292936734]
Test Case:  71 | Input/Output: [[10.062641925335441 -15] -4.937358074664559]
Test Case:  72 | Input/Output: [[-31.673479161846018 -65] -96.67347916184602]
Test Case:  73 | Input/Output: [[25.14931340698115 80] 105.14931340698115]
Test Case:  74 | Input/Output: [[-94.14490854530149 99] 4.85509145469851]
Test Case:  75 | Input/Output: [[-42.61468965654447 14] -28.61468965654447]
Test Case:  76 | Input/Output: [[-59.17887965902828 29] -30.178879659028283]
Test Case:  77 | Input/Output: [[-37.52479937430404 -31] -68.52479937430404]
Test Case:  78 | Input/Output: [[-88.4159481173456 -4] -92.4159481173456]
Test Case:  79 | Input/Output: [[-71.0920036883141 -17] -88.0920036883141]
Test Case:  80 | Input/Output: [[-79.66805680996858 26] -53.668056809968576]
Test Case:  81 | Input/Output: [[-58.94661662288749 68] 9.05338337711251]
Test Case:  82 | Input/Output: [[9.195487365224551 73] 82.19548736522455]
Test Case:  83 | Input/Output: [[35.13560458613074 42] 77.13560458613074]
Test Case:  84 | Input/Output: [[39.68125154031256 -5] 34.68125154031256]
Test Case:  85 | Input/Output: [[88.23096369066553 47] 135.23096369066553]
Test Case:  86 | Input/Output: [[-85.08371561970655 22] -63.08371561970655]
Test Case:  87 | Input/Output: [[-25.740802323047802 -89] -114.7408023230478]
Test Case:  88 | Input/Output: [[-4.5921093891309965 -94] -98.592109389131]
Test Case:  89 | Input/Output: [[-57.03992873499202 7] -50.03992873499202]
Test Case:  90 | Input/Output: [[-3.79122558307148 46] 42.20877441692852]
Test Case:  91 | Input/Output: [[37.13730328777285 -72] -34.86269671222715]
Test Case:  92 | Input/Output: [[33.56762474087296 38] 71.56762474087296]
Test Case:  93 | Input/Output: [[46.2093127330873 -66] -19.7906872669127]
Test Case:  94 | Input/Output: [[69.67622458552191 -40] 29.676224585521908]
Test Case:  95 | Input/Output: [[-96.26232191505821 -47] -143.2623219150582]
Test Case:  96 | Input/Output: [[49.71885781744777 -14] 35.71885781744777]
Test Case:  97 | Input/Output: [[21.260805499319346 59] 80.26080549931935]
Test Case:  98 | Input/Output: [[-39.18813340269638 -27] -66.18813340269638]
Test Case:  99 | Input/Output: [[-51.35254993039722 -5] -56.35254993039722]
Test Case: 100 | Input/Output: [[58.76458967848981 -54] 4.764589678489813]
Test Case: 101 | Input/Output: [[-73.61835053289978 -31] -104.61835053289978]
Test Case: 102 | Input/Output: [[16.828003111445526 -18] -1.1719968885544745]
Test Case: 103 | Input/Output: [[-71.03173493414916 -61] -132.03173493414914]
Test Case: 104 | Input/Output: [[63.05114053158343 37] 100.05114053158343]
Test Case: 105 | Input/Output: [[63.79341930975218 -25] 38.79341930975218]
Test Case: 106 | Input/Output: [[98.67503300703208 48] 146.67503300703208]
Test Case: 107 | Input/Output: [[-29.937885537025096 3] -26.937885537025096]
Test Case: 108 | Input/Output: [[48.95466759976014 -38] 10.954667599760143]
Test Case: 109 | Input/Output: [[-32.887978039964196 96] 63.112021960035804]
Test Case: 110 | Input/Output: [[-92.59567683783897 93] 0.4043231621610346]
Test Case: 111 | Input/Output: [[96.49448318951985 -72] 24.494483189519855]
Test Case: 112 | Input/Output: [[-82.07475537493474 60] -22.07475537493474]
Test Case: 113 | Input/Output: [[21.094817922832547 -96] -74.90518207716745]
Test Case: 114 | Input/Output: [[64.53284574793082 -94] -29.46715425206918]
Test Case: 115 | Input/Output: [[73.36097921899531 47] 120.36097921899531]
Test Case: 116 | Input/Output: [[66.71338740716203 90] 156.71338740716203]
Test Case: 117 | Input/Output: [[-74.1413727013215 87] 12.858627298678499]
Test Case: 118 | Input/Output: [[-5.219706336478566 91] 85.78029366352143]
Test Case: 119 | Input/Output: [[81.56262916337766 -96] -14.437370836622335]
Test Case: 120 | Input/Output: [[71.05566465091957 -67] 4.055664650919567]
Test Case: 121 | Input/Output: [[85.67314025633505 -46] 39.673140256335046]
Test Case: 122 | Input/Output: [[-59.8244245132419 -50] -109.8244245132419]
Test Case: 123 | Input/Output: [[-43.71685749305563 22] -21.716857493055628]
Test Case: 124 | Input/Output: [[-86.33152308228786 67] -19.33152308228786]
Test Case: 125 | Input/Output: [[8.2706870004708 -22] -13.7293129995292]
Test Case: 126 | Input/Output: [[-50.37700157197047 -35] -85.37700157197047]
Test Case: 127 | Input/Output: [[-78.75290294543824 16] -62.75290294543824]
Test Case: 128 | Input/Output: [[-93.56110465838319 43] -50.56110465838319]
Test Case: 129 | Input/Output: [[-45.62825561684469 -83] -128.62825561684468]
Test Case: 130 | Input/Output: [[78.2919258823313 -98] -19.7080741176687]
Test Case: 131 | Input/Output: [[-79.43747723979386 -26] -105.43747723979386]
Test Case: 132 | Input/Output: [[92.14061619733084 83] 175.14061619733084]
Test Case: 133 | Input/Output: [[66.93012745115618 28] 94.93012745115618]
Test Case: 134 | Input/Output: [[-29.362323654544255 38] 8.637676345455745]
Test Case: 135 | Input/Output: [[32.40933159839756 98] 130.40933159839756]
Test Case: 136 | Input/Output: [[98.72517607294299 -71] 27.725176072942986]
Test Case: 137 | Input/Output: [[76.17828538174928 -58] 18.178285381749276]
Test Case: 138 | Input/Output: [[37.449484494955186 3] 40.449484494955186]
Test Case: 139 | Input/Output: [[-89.96574179408397 60] -29.965741794083968]
Test Case: 140 | Input/Output: [[-54.126472138473105 63] 8.873527861526895]
Test Case: 141 | Input/Output: [[-74.74403757525243 59] -15.744037575252435]
Test Case: 142 | Input/Output: [[-31.27715367675627 -61] -92.27715367675627]
Test Case: 143 | Input/Output: [[-91.7666102636893 22] -69.7666102636893]
Test Case: 144 | Input/Output: [[16.254567224491495 -5] 11.254567224491495]
Test Case: 145 | Input/Output: [[33.50700765628707 24] 57.50700765628707]
Test Case: 146 | Input/Output: [[73.50676186610474 42] 115.50676186610474]
Test Case: 147 | Input/Output: [[47.60981846698917 90] 137.60981846698917]
Test Case: 148 | Input/Output: [[-1.25229694407858 -95] -96.25229694407858]
Test Case: 149 | Input/Output: [[-18.046793932176072 -41] -59.04679393217607]
Test Case: 150 | Input/Output: [[-30.18664333061642 -22] -52.18664333061642]
Test Case: 151 | Input/Output: [[79.649368133754 -26] 53.649368133753995]
Test Case: 152 | Input/Output: [[-95.71914694869437 98] 2.280853051305627]
Test Case: 153 | Input/Output: [[-18.948675828446724 -7] -25.948675828446724]
Test Case: 154 | Input/Output: [[65.99029374720226 -9] 56.99029374720226]
Test Case: 155 | Input/Output: [[95.41228984172179 82] 177.4122898417218]
Test Case: 156 | Input/Output: [[-28.254116128150514 30] 1.745883871849486]
Test Case: 157 | Input/Output: [[-86.97912413340647 -22] -108.97912413340647]
Test Case: 158 | Input/Output: [[-75.47668975672381 99] 23.523310243276185]
Test Case: 159 | Input/Output: [[-27.779533927101525 45] 17.220466072898475]
Test Case: 160 | Input/Output: [[-70.49128628272845 1] -69.49128628272845]
Test Case: 161 | Input/Output: [[-53.617140626170645 -89] -142.61714062617065]
Test Case: 162 | Input/Output: [[68.8521291193546 -21] 47.8521291193546]
Test Case: 163 | Input/Output: [[86.68374531188718 -58] 28.68374531188718]
Test Case: 164 | Input/Output: [[-32.11980882288927 -45] -77.11980882288927]
Test Case: 165 | Input/Output: [[46.424985140004 15] 61.424985140004]
Test Case: 166 | Input/Output: [[-35.75631812386145 41] 5.243681876138552]
Test Case: 167 | Input/Output: [[-13.706731173674484 86] 72.29326882632552]
Test Case: 168 | Input/Output: [[27.364035734483934 -2] 25.364035734483934]
Test Case: 169 | Input/Output: [[-26.17334552739817 54] 27.82665447260183]
Test Case: 170 | Input/Output: [[46.632932067912776 -70] -23.367067932087224]
Test Case: 171 | Input/Output: [[88.18892085427228 -85] 3.1889208542722827]
Test Case: 172 | Input/Output: [[-94.13073890990363 87] -7.130738909903627]
Test Case: 173 | Input/Output: [[-7.323477043689081 -80] -87.32347704368908]
Test Case: 174 | Input/Output: [[71.53556241735788 -65] 6.53556241735788]
Test Case: 175 | Input/Output: [[-25.743052528678476 51] 25.256947471321524]
Test Case: 176 | Input/Output: [[18.377200943621673 -8] 10.377200943621673]
Test Case: 177 | Input/Output: [[-92.38090954987265 -49] -141.38090954987265]
Test Case: 178 | Input/Output: [[50.39116826391785 91] 141.39116826391785]
Test Case: 179 | Input/Output: [[33.63673111481603 -46] -12.36326888518397]
Test Case: 180 | Input/Output: [[-76.50992173137078 -42] -118.50992173137078]
Test Case: 181 | Input/Output: [[-73.7514261001847 38] -35.7514261001847]
Test Case: 182 | Input/Output: [[86.69645883087301 -79] 7.696458830873013]
Test Case: 183 | Input/Output: [[49.00258478825339 -22] 27.002584788253387]
Test Case: 184 | Input/Output: [[33.28670110938282 -77] -43.71329889061718]
Test Case: 185 | Input/Output: [[-92.87024952312231 -40] -132.8702495231223]
Test Case: 186 | Input/Output: [[-7.9438177305343345 -79] -86.94381773053433]
Test Case: 187 | Input/Output: [[-30.619907997116 72] 41.380092002884]
Test Case: 188 | Input/Output: [[-41.82278880769186 -69] -110.82278880769186]
Test Case: 189 | Input/Output: [[-56.12303581657279 90] 33.87696418342721]
Test Case: 190 | Input/Output: [[14.520831146586332 47] 61.52083114658633]
Test Case: 191 | Input/Output: [[1.8862829273025028 92] 93.8862829273025]
Test Case: 192 | Input/Output: [[-17.860313189986954 98] 80.13968681001305]
Test Case: 193 | Input/Output: [[2.5688007087449023 -99] -96.4311992912551]
Test Case: 194 | Input/Output: [[62.69466640233935 46] 108.69466640233935]
Test Case: 195 | Input/Output: [[56.726513665368344 72] 128.72651366536834]
Test Case: 196 | Input/Output: [[48.03867392261455 -63] -14.96132607738545]
Test Case: 197 | Input/Output: [[61.3761007137488 -51] 10.376100713748798]
Test Case: 198 | Input/Output: [[-85.02778855617863 -48] -133.02778855617862]
Test Case: 199 | Input/Output: [[0.5823714839557255 81] 81.58237148395573]
Test Case: 200 | Input/Output: [[-8.748895812251106 -16] -24.748895812251106]
Test Case: 201 | Input/Output: [[-0.7995691276179997 0] -0.7995691276179997]
Test Case: 202 | Input/Output: [[83.89876597252595 -45] 38.89876597252595]
Test Case: 203 | Input/Output: [[29.136262319167344 83] 112.13626231916734]
Test Case: 204 | Input/Output: [[-14.44772101488114 -76] -90.44772101488114]
Test Case: 205 | Input/Output: [[93.67870402333645 75] 168.67870402333645]
Test Case: 206 | Input/Output: [[-53.48159279163993 -52] -105.48159279163994]
Test Case: 207 | Input/Output: [[3.970373096749256 -98] -94.02962690325074]
Test Case: 208 | Input/Output: [[-53.08123401145322 90] 36.91876598854678]
Test Case: 209 | Input/Output: [[-82.05734994037851 84] 1.942650059621485]
Test Case: 210 | Input/Output: [[-56.165209052957806 -21] -77.1652090529578]
Test Case: 211 | Input/Output: [[78.84158118257767 55] 133.84158118257767]
Test Case: 212 | Input/Output: [[38.461538132956264 10] 48.461538132956264]
Test Case: 213 | Input/Output: [[81.11678015627365 -31] 50.11678015627365]
Test Case: 214 | Input/Output: [[93.61952931313738 77] 170.61952931313738]
Test Case: 215 | Input/Output: [[68.05044478710116 2] 70.05044478710116]
Test Case: 216 | Input/Output: [[37.98131172769598 79] 116.98131172769598]
Test Case: 217 | Input/Output: [[-75.84677827498936 91] 15.153221725010638]
Test Case: 218 | Input/Output: [[-86.1437830520853 -35] -121.1437830520853]
Test Case: 219 | Input/Output: [[-69.10665767461035 -10] -79.10665767461035]
Test Case: 220 | Input/Output: [[70.2212922545998 3] 73.2212922545998]
Test Case: 221 | Input/Output: [[2.1372096586143527 -55] -52.86279034138565]
Test Case: 222 | Input/Output: [[-43.77245876906852 -13] -56.77245876906852]
Test Case: 223 | Input/Output: [[-92.30981977771661 28] -64.30981977771661]
Test Case: 224 | Input/Output: [[-88.97564859457387 81] -7.975648594573869]
Test Case: 225 | Input/Output: [[-65.88078829922262 -40] -105.88078829922262]
Test Case: 226 | Input/Output: [[12.768086399666572 -74] -61.23191360033343]
Test Case: 227 | Input/Output: [[-1.5247120166869337 80] 78.47528798331307]
Test Case: 228 | Input/Output: [[-65.69812358322446 -56] -121.69812358322446]
Test Case: 229 | Input/Output: [[-41.345326612159525 -79] -120.34532661215952]
Test Case: 230 | Input/Output: [[-53.318010576905486 -58] -111.3180105769055]
Test Case: 231 | Input/Output: [[82.88422771609447 -36] 46.88422771609447]
Test Case: 232 | Input/Output: [[-94.48157097961496 -52] -146.48157097961496]
Test Case: 233 | Input/Output: [[40.83362531650792 -78] -37.16637468349208]
Test Case: 234 | Input/Output: [[88.71744611544742 -29] 59.717446115447416]
Test Case: 235 | Input/Output: [[-44.06296565430801 5] -39.06296565430801]
Test Case: 236 | Input/Output: [[-24.6992049554096 39] 14.300795044590402]
Test Case: 237 | Input/Output: [[31.994119028405777 -61] -29.005880971594223]
Test Case: 238 | Input/Output: [[19.665057999525985 -66] -46.334942000474015]
Test Case: 239 | Input/Output: [[-76.42601439796255 10] -66.42601439796255]
Test Case: 240 | Input/Output: [[74.555847913837 66] 140.555847913837]
Test Case: 241 | Input/Output: [[-89.37992854355711 44] -45.379928543557114]
Test Case: 242 | Input/Output: [[11.138188831142259 -49] -37.86181116885774]
Test Case: 243 | Input/Output: [[18.906535737137077 33] 51.90653573713708]
Test Case: 244 | Input/Output: [[-89.91733566950273 -80] -169.91733566950273]
Test Case: 245 | Input/Output: [[82.83399945047228 -22] 60.83399945047228]
Test Case: 246 | Input/Output: [[-74.81940286908232 -24] -98.81940286908232]
Test Case: 247 | Input/Output: [[11.971849847312654 -11] 0.9718498473126544]
Test Case: 248 | Input/Output: [[19.247041573790085 -4] 15.247041573790085]
Test Case: 249 | Input/Output: [[41.14313205558429 33] 74.14313205558429]
Test Case: 250 | Input/Output: [[-12.579316547517422 59] 46.42068345248258]
Test Case: 251 | Input/Output: [[50.30041775279122 -62] -11.699582247208781]
Test Case: 252 | Input/Output: [[18.13610060623428 -35] -16.86389939376572]
Test Case: 253 | Input/Output: [[59.383574348445876 31] 90.38357434844588]
Test Case: 254 | Input/Output: [[69.16729525216698 -10] 59.16729525216698]
Test Case: 255 | Input/Output: [[55.82000672718726 -14] 41.82000672718726]
Test Case: 256 | Input/Output: [[-99.86025421620037 71] -28.860254216200374]
Test Case: 257 | Input/Output: [[62.70424503622985 0] 62.70424503622985]
Test Case: 258 | Input/Output: [[-14.665760851921661 95] 80.33423914807834]
Test Case: 259 | Input/Output: [[65.5531104829152 15] 80.5531104829152]
Test Case: 260 | Input/Output: [[-23.796530215720807 -47] -70.79653021572081]
Test Case: 261 | Input/Output: [[12.201839332859095 -11] 1.2018393328590946]
Test Case: 262 | Input/Output: [[-27.153982961213515 -52] -79.15398296121352]
Test Case: 263 | Input/Output: [[-20.322817860259505 91] 70.6771821397405]
Test Case: 264 | Input/Output: [[-81.20111792940112 -50] -131.2011179294011]
Test Case: 265 | Input/Output: [[-88.29257131093975 -16] -104.29257131093975]
Test Case: 266 | Input/Output: [[57.29201066123329 -33] 24.29201066123329]
Test Case: 267 | Input/Output: [[8.156915230241708 -17] -8.843084769758292]
Test Case: 268 | Input/Output: [[-60.94496279074724 -25] -85.94496279074724]
Test Case: 269 | Input/Output: [[-34.764470805576934 70] 35.235529194423066]
Test Case: 270 | Input/Output: [[73.280924394072 -15] 58.280924394072]
Test Case: 271 | Input/Output: [[-34.62701319836221 4] -30.627013198362206]
Test Case: 272 | Input/Output: [[17.30607051888539 25] 42.30607051888539]
Test Case: 273 | Input/Output: [[-61.931958663674 -64] -125.93195866367401]
Test Case: 274 | Input/Output: [[83.42721763550597 19] 102.42721763550597]
Test Case: 275 | Input/Output: [[81.65646295721268 -17] 64.65646295721268]
Test Case: 276 | Input/Output: [[45.65756188231529 90] 135.6575618823153]
Test Case: 277 | Input/Output: [[38.213422431086286 -88] -49.786577568913714]
Test Case: 278 | Input/Output: [[57.94510327573596 58] 115.94510327573596]
Test Case: 279 | Input/Output: [[82.96382143855448 63] 145.96382143855448]
Test Case: 280 | Input/Output: [[48.20564283389041 -51] -2.7943571661095916]
Test Case: 281 | Input/Output: [[-64.537338848329 29] -35.537338848329]
Test Case: 282 | Input/Output: [[9.517910353304543 66] 75.51791035330454]
Test Case: 283 | Input/Output: [[-86.82335887705763 89] 2.176641122942371]
Test Case: 284 | Input/Output: [[0.3833394659164924 -16] -15.616660534083508]
Test Case: 285 | Input/Output: [[52.04804616409427 63] 115.04804616409427]
Test Case: 286 | Input/Output: [[-95.79250182588774 -78] -173.79250182588774]
Test Case: 287 | Input/Output: [[4.383187191488133 -94] -89.61681280851187]
Test Case: 288 | Input/Output: [[1.112124014776029 -54] -52.88787598522397]
Test Case: 289 | Input/Output: [[83.68826986477791 -44] 39.68826986477791]
Test Case: 290 | Input/Output: [[-38.77003040162528 42] 3.2299695983747228]
Test Case: 291 | Input/Output: [[48.46238616948878 58] 106.46238616948878]
Test Case: 292 | Input/Output: [[89.40083000101257 53] 142.40083000101257]
Test Case: 293 | Input/Output: [[99.05356785954208 -69] 30.053567859542085]
Test Case: 294 | Input/Output: [[-80.92433665222353 55] -25.92433665222353]
Test Case: 295 | Input/Output: [[46.37275949230849 68] 114.37275949230849]
Test Case: 296 | Input/Output: [[94.96989461308692 43] 137.96989461308692]
Test Case: 297 | Input/Output: [[99.0135463244813 15] 114.0135463244813]
Test Case: 298 | Input/Output: [[-7.669921310452736 30] 22.330078689547264]
Test Case: 299 | Input/Output: [[30.652108566280845 89] 119.65210856628084]
Test Case: 300 | Input/Output: [[-81.4310812520689 77] -4.431081252068907]
Test Case: 301 | Input/Output: [[-74.16087316581279 10] -64.16087316581279]
Test Case: 302 | Input/Output: [[-55.2362342205289 -33] -88.2362342205289]
Test Case: 303 | Input/Output: [[-56.09027786325085 -18] -74.09027786325085]
Test Case: 304 | Input/Output: [[82.45014413198825 -59] 23.450144131988253]
Test Case: 305 | Input/Output: [[-93.02910264229389 100] 6.970897357706107]
Test Case: 306 | Input/Output: [[-70.90683257569967 4] -66.90683257569967]
Test Case: 307 | Input/Output: [[-65.10890571644639 -3] -68.10890571644639]
Test Case: 308 | Input/Output: [[-73.99857800557687 -53] -126.99857800557687]
Test Case: 309 | Input/Output: [[-47.49989924590587 -74] -121.49989924590588]
Test Case: 310 | Input/Output: [[89.55271696018846 -18] 71.55271696018846]
Test Case: 311 | Input/Output: [[-17.48954456244867 59] 41.51045543755133]
Test Case: 312 | Input/Output: [[-89.8372758716008 30] -59.837275871600795]
Test Case: 313 | Input/Output: [[58.88649627298696 -47] 11.88649627298696]
Test Case: 314 | Input/Output: [[-28.039035078086584 -25] -53.039035078086584]
Test Case: 315 | Input/Output: [[18.15669556915715 -90] -71.84330443084285]
Test Case: 316 | Input/Output: [[-49.07512646426662 93] 43.92487353573338]
Test Case: 317 | Input/Output: [[-56.109416538761316 66] 9.890583461238684]
Test Case: 318 | Input/Output: [[-92.3283448906038 -92] -184.3283448906038]
Test Case: 319 | Input/Output: [[88.74161016120664 -70] 18.741610161206637]
Test Case: 320 | Input/Output: [[16.601532975465744 95] 111.60153297546574]
Test Case: 321 | Input/Output: [[-53.629749895470425 -92] -145.6297498954704]
Test Case: 322 | Input/Output: [[-29.852399920029086 -6] -35.852399920029086]
Test Case: 323 | Input/Output: [[52.33827759760493 93] 145.33827759760493]
Test Case: 324 | Input/Output: [[69.64682309774133 36] 105.64682309774133]
Test Case: 325 | Input/Output: [[88.60362450170854 44] 132.60362450170854]
Test Case: 326 | Input/Output: [[-8.196239361749804 52] 43.803760638250196]
Test Case: 327 | Input/Output: [[-26.627394966995865 -85] -111.62739496699587]
Test Case: 328 | Input/Output: [[-67.30113963025465 -64] -131.30113963025465]
Test Case: 329 | Input/Output: [[-76.53368236218405 84] 7.466317637815948]
Test Case: 330 | Input/Output: [[-19.6915570115916 -60] -79.6915570115916]
Test Case: 331 | Input/Output: [[-67.60409474287883 31] -36.60409474287883]
Test Case: 332 | Input/Output: [[68.53884325674977 -74] -5.461156743250228]
Test Case: 333 | Input/Output: [[-33.38886693755654 22] -11.388866937556543]
Test Case: 334 | Input/Output: [[32.428355445929554 48] 80.42835544592955]
Test Case: 335 | Input/Output: [[-79.64102812054975 -49] -128.64102812054975]
Test Case: 336 | Input/Output: [[86.02413785919978 23] 109.02413785919978]
Test Case: 337 | Input/Output: [[-60.93744652899471 21] -39.93744652899471]
Test Case: 338 | Input/Output: [[-46.27607976316852 -66] -112.27607976316853]
Test Case: 339 | Input/Output: [[13.8032132595646 65] 78.8032132595646]
Test Case: 340 | Input/Output: [[-73.16948430406114 56] -17.169484304061143]
Test Case: 341 | Input/Output: [[-15.819023604462373 -29] -44.81902360446237]
Test Case: 342 | Input/Output: [[-54.70540255937362 84] 29.294597440626383]
Test Case: 343 | Input/Output: [[-16.308556843434374 78] 61.691443156565626]
Test Case: 344 | Input/Output: [[65.29045502179758 54] 119.29045502179758]
Test Case: 345 | Input/Output: [[86.22846216670567 -26] 60.22846216670567]
Test Case: 346 | Input/Output: [[-38.80606135024003 81] 42.19393864975997]
Test Case: 347 | Input/Output: [[-81.47632285132215 -94] -175.47632285132215]
Test Case: 348 | Input/Output: [[81.91698973523819 -33] 48.91698973523819]
Test Case: 349 | Input/Output: [[87.5042397971396 -25] 62.504239797139604]
Test Case: 350 | Input/Output: [[58.17860974374443 -33] 25.17860974374443]
Test Case: 351 | Input/Output: [[94.78897977645909 -11] 83.78897977645909]
Test Case: 352 | Input/Output: [[16.84081664110957 57] 73.84081664110957]
Test Case: 353 | Input/Output: [[67.32109671460913 -9] 58.321096714609126]
Test Case: 354 | Input/Output: [[-46.915651256836895 82] 35.084348743163105]
Test Case: 355 | Input/Output: [[54.61077281574319 -56] -1.3892271842568107]
Test Case: 356 | Input/Output: [[35.15311944580429 36] 71.1531194458043]
Test Case: 357 | Input/Output: [[-20.56112997611423 55] 34.43887002388577]
Test Case: 358 | Input/Output: [[3.586388058830863 -24] -20.413611941169137]
Test Case: 359 | Input/Output: [[-69.1590968166773 -61] -130.1590968166773]
Test Case: 360 | Input/Output: [[98.32093971806896 -62] 36.320939718068956]
Test Case: 361 | Input/Output: [[-69.02660309031975 48] -21.026603090319753]
Test Case: 362 | Input/Output: [[-50.97695457961375 0] -50.97695457961375]
Test Case: 363 | Input/Output: [[62.41448954541079 20] 82.41448954541079]
Test Case: 364 | Input/Output: [[-92.19180149797197 -25] -117.19180149797197]
Test Case: 365 | Input/Output: [[-82.65465576936592 56] -26.654655769365917]
Test Case: 366 | Input/Output: [[68.81472296276655 -73] -4.185277037233448]
Test Case: 367 | Input/Output: [[75.11679685683242 -57] 18.116796856832423]
Test Case: 368 | Input/Output: [[-66.83938889347243 -64] -130.83938889347243]
Test Case: 369 | Input/Output: [[93.78717751825636 22] 115.78717751825636]
Test Case: 370 | Input/Output: [[4.375737495189199 21] 25.3757374951892]
Test Case: 371 | Input/Output: [[-19.02986721155719 -23] -42.02986721155719]
Test Case: 372 | Input/Output: [[-32.96345796844764 -57] -89.96345796844764]
Test Case: 373 | Input/Output: [[99.60902913905738 6] 105.60902913905738]
Test Case: 374 | Input/Output: [[19.60991358607515 -23] -3.3900864139248483]
Test Case: 375 | Input/Output: [[-9.659308622421634 -95] -104.65930862242163]
Test Case: 376 | Input/Output: [[-82.26965921853096 41] -41.26965921853096]
Test Case: 377 | Input/Output: [[61.87851039577609 41] 102.87851039577609]
Test Case: 378 | Input/Output: [[61.57444105271256 62] 123.57444105271256]
Test Case: 379 | Input/Output: [[3.2163787778247297 -18] -14.78362122217527]
Test Case: 380 | Input/Output: [[29.16056803131056 -86] -56.83943196868944]
Test Case: 381 | Input/Output: [[68.26761072862851 -89] -20.73238927137149]
Test Case: 382 | Input/Output: [[-30.95461491591776 -70] -100.95461491591776]
Test Case: 383 | Input/Output: [[22.233972915173013 94] 116.23397291517301]
Test Case: 384 | Input/Output: [[-96.64489102384222 -96] -192.6448910238422]
Test Case: 385 | Input/Output: [[96.77987601771585 -66] 30.77987601771585]
Test Case: 386 | Input/Output: [[-48.39459903374108 15] -33.39459903374108]
Test Case: 387 | Input/Output: [[-19.06532116849506 -82] -101.06532116849506]
Test Case: 388 | Input/Output: [[66.5152678699514 61] 127.5152678699514]
Test Case: 389 | Input/Output: [[83.7810374805448 70] 153.7810374805448]
Test Case: 390 | Input/Output: [[-56.2894761125887 30] -26.2894761125887]
Test Case: 391 | Input/Output: [[11.647852478712565 57] 68.64785247871257]
Test Case: 392 | Input/Output: [[-52.51414430762556 8] -44.51414430762556]
Test Case: 393 | Input/Output: [[28.2007376019929 51] 79.2007376019929]
Test Case: 394 | Input/Output: [[6.857954164491815 47] 53.857954164491815]
Test Case: 395 | Input/Output: [[-22.663251460842133 -2] -24.663251460842133]
Test Case: 396 | Input/Output: [[60.889975796265134 -80] -19.110024203734866]
Test Case: 397 | Input/Output: [[42.5722431271125 49] 91.5722431271125]
Test Case: 398 | Input/Output: [[39.55066252179847 42] 81.55066252179847]
Test Case: 399 | Input/Output: [[59.36516626313443 -40] 19.365166263134427]
Test Case: 400 | Input/Output: [[1.8176438775369377 -6] -4.182356122463062]
Test Case: 401 | Input/Output: [[11.885576058258124 -53] -41.114423941741876]
Test Case: 402 | Input/Output: [[-17.321804447485192 68] 50.67819555251481]
Test Case: 403 | Input/Output: [[-44.2769579105323 -95] -139.2769579105323]
Test Case: 404 | Input/Output: [[-15.338809491630869 -67] -82.33880949163087]
Test Case: 405 | Input/Output: [[8.928645438749385 30] 38.928645438749385]
Test Case: 406 | Input/Output: [[72.94324142401038 60] 132.94324142401038]
Test Case: 407 | Input/Output: [[-86.85561428634733 -88] -174.85561428634733]
Test Case: 408 | Input/Output: [[-83.01075419980165 -37] -120.01075419980165]
Test Case: 409 | Input/Output: [[-46.410106117283156 -45] -91.41010611728316]
Test Case: 410 | Input/Output: [[-77.03716744372528 -9] -86.03716744372528]
Test Case: 411 | Input/Output: [[1.0938001269827708 -71] -69.90619987301723]
Test Case: 412 | Input/Output: [[55.34559171316843 74] 129.34559171316843]
Test Case: 413 | Input/Output: [[33.28573867456694 -61] -27.714261325433057]
Test Case: 414 | Input/Output: [[86.3208338847891 96] 182.3208338847891]
Test Case: 415 | Input/Output: [[-1.059679017885955 -45] -46.059679017885955]
Test Case: 416 | Input/Output: [[61.25973845192783 20] 81.25973845192783]
Test Case: 417 | Input/Output: [[92.01653361571701 32] 124.01653361571701]
Test Case: 418 | Input/Output: [[-0.26808124154287327 24] 23.731918758457127]
Test Case: 419 | Input/Output: [[72.77329675729368 -43] 29.77329675729368]
Test Case: 420 | Input/Output: [[-81.95548318479307 -54] -135.95548318479308]
Test Case: 421 | Input/Output: [[-63.81393605726813 -18] -81.81393605726814]
Test Case: 422 | Input/Output: [[-66.44032602009584 -26] -92.44032602009584]
Test Case: 423 | Input/Output: [[50.55162429149232 -41] 9.551624291492317]
Test Case: 424 | Input/Output: [[38.15749959297784 -71] -32.84250040702216]
Test Case: 425 | Input/Output: [[80.9935458056344 -19] 61.9935458056344]
Test Case: 426 | Input/Output: [[-19.665868779187008 -31] -50.66586877918701]
Test Case: 427 | Input/Output: [[-18.92447207286176 78] 59.07552792713824]
Test Case: 428 | Input/Output: [[5.311033747919126 12] 17.311033747919126]
Test Case: 429 | Input/Output: [[0.6003955055180086 85] 85.60039550551801]
Test Case: 430 | Input/Output: [[59.426892283780916 22] 81.42689228378092]
Test Case: 431 | Input/Output: [[22.11496601901368 99] 121.11496601901368]
Test Case: 432 | Input/Output: [[-85.98340365194449 -83] -168.98340365194449]
Test Case: 433 | Input/Output: [[-95.50214613551584 22] -73.50214613551584]
Test Case: 434 | Input/Output: [[16.5950356697371 -6] 10.5950356697371]
Test Case: 435 | Input/Output: [[-23.31152410185085 -5] -28.31152410185085]
Test Case: 436 | Input/Output: [[62.791518539358236 -76] -13.208481460641764]
Test Case: 437 | Input/Output: [[47.114472150589535 -3] 44.114472150589535]
Test Case: 438 | Input/Output: [[16.053941113121837 13] 29.053941113121837]
Test Case: 439 | Input/Output: [[26.44859382282847 28] 54.44859382282847]
Test Case: 440 | Input/Output: [[-41.3613287858549 -48] -89.36132878585491]
Test Case: 441 | Input/Output: [[98.41423446991499 -22] 76.41423446991499]
Test Case: 442 | Input/Output: [[-85.35645195570754 17] -68.35645195570754]
Test Case: 443 | Input/Output: [[-23.279103277111005 -80] -103.279103277111]
Test Case: 444 | Input/Output: [[-78.04917112880965 83] 4.950828871190353]
Test Case: 445 | Input/Output: [[61.74365931405211 -8] 53.74365931405211]
Test Case: 446 | Input/Output: [[-35.09502860182778 -17] -52.09502860182778]
Test Case: 447 | Input/Output: [[98.53755226962906 32] 130.53755226962906]
Test Case: 448 | Input/Output: [[-12.837659491950376 -56] -68.83765949195038]
Test Case: 449 | Input/Output: [[78.64031948753541 -37] 41.64031948753541]
Test Case: 450 | Input/Output: [[-69.32269152233397 17] -52.32269152233397]
Test Case: 451 | Input/Output: [[55.397659398414646 -92] -36.602340601585354]
Test Case: 452 | Input/Output: [[-28.907219867273227 -48] -76.90721986727323]
Test Case: 453 | Input/Output: [[32.118435605723334 2] 34.118435605723334]
Test Case: 454 | Input/Output: [[63.02059621525706 -54] 9.020596215257058]
Test Case: 455 | Input/Output: [[29.426821812270333 0] 29.426821812270333]
Test Case: 456 | Input/Output: [[9.401658050994442 -23] -13.598341949005558]
Test Case: 457 | Input/Output: [[45.204750067866655 -42] 3.204750067866655]
Test Case: 458 | Input/Output: [[29.540060732975803 77] 106.5400607329758]
Test Case: 459 | Input/Output: [[99.17200778491346 -7] 92.17200778491346]
Test Case: 460 | Input/Output: [[8.18012362475082 -85] -76.81987637524918]
Test Case: 461 | Input/Output: [[19.293499915613225 -61] -41.706500084386775]
Test Case: 462 | Input/Output: [[-40.43658672603361 -26] -66.43658672603361]
Test Case: 463 | Input/Output: [[-44.56096911655762 -98] -142.56096911655763]
Test Case: 464 | Input/Output: [[-85.0229559278467 36] -49.022955927846695]
Test Case: 465 | Input/Output: [[-81.27376880026313 -77] -158.27376880026313]
Test Case: 466 | Input/Output: [[7.306355608882598 -16] -8.693644391117402]
Test Case: 467 | Input/Output: [[-46.42104473031894 76] 29.57895526968106]
Test Case: 468 | Input/Output: [[21.970574781507608 -47] -25.029425218492392]
Test Case: 469 | Input/Output: [[-77.21233491413233 92] 14.787665085867673]
Test Case: 470 | Input/Output: [[-31.484362262045977 -58] -89.48436226204598]
Test Case: 471 | Input/Output: [[47.60300656644998 -24] 23.603006566449977]
Test Case: 472 | Input/Output: [[94.64276099365091 -37] 57.64276099365091]
Test Case: 473 | Input/Output: [[-46.83929381182903 72] 25.16070618817097]
Test Case: 474 | Input/Output: [[95.1451503437778 36] 131.1451503437778]
Test Case: 475 | Input/Output: [[-98.14848131760962 -15] -113.14848131760962]
Test Case: 476 | Input/Output: [[29.53311936481552 -88] -58.46688063518448]
Test Case: 477 | Input/Output: [[71.67011274046396 -25] 46.67011274046396]
Test Case: 478 | Input/Output: [[71.05266419984358 -7] 64.05266419984358]
Test Case: 479 | Input/Output: [[-70.17637671127088 -78] -148.17637671127088]
Test Case: 480 | Input/Output: [[57.062667825307074 -37] 20.062667825307074]
Test Case: 481 | Input/Output: [[-75.0513463942209 -27] -102.0513463942209]
Test Case: 482 | Input/Output: [[-89.59804955370218 -18] -107.59804955370218]
Test Case: 483 | Input/Output: [[2.177923849800507 39] 41.17792384980051]
Test Case: 484 | Input/Output: [[3.0793593117565763 -79] -75.92064068824342]
Test Case: 485 | Input/Output: [[-8.08464050508239 -20] -28.08464050508239]
Test Case: 486 | Input/Output: [[-5.432364982923701 79] 73.5676350170763]
Test Case: 487 | Input/Output: [[58.79172062364651 49] 107.79172062364651]
Test Case: 488 | Input/Output: [[-77.9175690406193 98] 20.0824309593807]
Test Case: 489 | Input/Output: [[90.70851380097409 14] 104.70851380097409]
Test Case: 490 | Input/Output: [[75.77587252671955 -13] 62.77587252671955]
Test Case: 491 | Input/Output: [[40.78162447588102 -21] 19.781624475881017]
Test Case: 492 | Input/Output: [[27.498211241044686 -3] 24.498211241044686]
Test Case: 493 | Input/Output: [[65.04683346630091 52] 117.04683346630091]
Test Case: 494 | Input/Output: [[48.982616105824064 79] 127.98261610582406]
Test Case: 495 | Input/Output: [[-31.55579615719391 86] 54.44420384280609]
Test Case: 496 | Input/Output: [[-97.92191806522543 69] -28.921918065225427]
Test Case: 497 | Input/Output: [[37.566727289716056 72] 109.56672728971606]
Test Case: 498 | Input/Output: [[-19.21897297001165 -3] -22.21897297001165]
Test Case: 499 | Input/Output: [[-42.79285509063882 58] 15.207144909361183]
Test Case: 500 | Input/Output: [[-17.551841295279004 -91] -108.551841295279]
Test Case: 501 | Input/Output: [[62.23151009140841 -71] -8.76848990859159]
Test Case: 502 | Input/Output: [[-67.1367961383302 -43] -110.1367961383302]
Test Case: 503 | Input/Output: [[-86.08087143536652 -37] -123.08087143536652]
Test Case: 504 | Input/Output: [[-29.53743262341237 -65] -94.53743262341237]
Test Case: 505 | Input/Output: [[66.23084033753312 -71] -4.769159662466876]
Test Case: 506 | Input/Output: [[88.49522974574174 59] 147.49522974574174]
Test Case: 507 | Input/Output: [[-57.77255055524482 16] -41.77255055524482]
Test Case: 508 | Input/Output: [[76.7478172696994 -10] 66.7478172696994]
Test Case: 509 | Input/Output: [[50.80550787230786 12] 62.80550787230786]
Test Case: 510 | Input/Output: [[29.304218160586004 4] 33.304218160586004]
Test Case: 511 | Input/Output: [[55.5457754753449 13] 68.5457754753449]
Test Case: 512 | Input/Output: [[39.73063723563456 -63] -23.26936276436544]
Test Case: 513 | Input/Output: [[72.46219884775115 -26] 46.462198847751154]
Test Case: 514 | Input/Output: [[-26.176355849479677 84] 57.82364415052032]
Test Case: 515 | Input/Output: [[51.482945063322006 90] 141.482945063322]
Test Case: 516 | Input/Output: [[-66.87806735467174 13] -53.87806735467174]
Test Case: 517 | Input/Output: [[38.35345757460817 -88] -49.64654242539183]
Test Case: 518 | Input/Output: [[-91.28764011918426 47] -44.28764011918426]
Test Case: 519 | Input/Output: [[-96.9203358268685 -76] -172.9203358268685]
Test Case: 520 | Input/Output: [[84.7900969375427 -77] 7.7900969375427]
Test Case: 521 | Input/Output: [[9.123812285672145 -73] -63.876187714327855]
Test Case: 522 | Input/Output: [[48.57208268122932 80] 128.57208268122932]
Test Case: 523 | Input/Output: [[26.54921447111103 24] 50.54921447111103]
Test Case: 524 | Input/Output: [[99.96714662488895 -53] 46.967146624888954]
Test Case: 525 | Input/Output: [[-32.07997839573889 37] 4.920021604261109]
Test Case: 526 | Input/Output: [[55.65835375121054 -48] 7.658353751210541]
Test Case: 527 | Input/Output: [[27.751628051980674 -92] -64.24837194801933]
Test Case: 528 | Input/Output: [[-95.90783893437951 -94] -189.90783893437953]
Test Case: 529 | Input/Output: [[-26.638531192051246 41] 14.361468807948754]
Test Case: 530 | Input/Output: [[61.570223458207295 -98] -36.429776541792705]
Test Case: 531 | Input/Output: [[-84.37868821817946 41] -43.37868821817946]
Test Case: 532 | Input/Output: [[-56.48026740154657 -83] -139.48026740154657]
Test Case: 533 | Input/Output: [[-59.19382631451147 69] 9.806173685488531]
Test Case: 534 | Input/Output: [[-69.60187411429881 -75] -144.60187411429882]
Test Case: 535 | Input/Output: [[53.86529782637896 92] 145.86529782637896]
Test Case: 536 | Input/Output: [[11.594465718074758 22] 33.59446571807476]
Test Case: 537 | Input/Output: [[68.96258957178435 2] 70.96258957178435]
Test Case: 538 | Input/Output: [[-61.84705310265921 95] 33.15294689734079]
Test Case: 539 | Input/Output: [[-20.52318300990011 29] 8.476816990099891]
Test Case: 540 | Input/Output: [[32.676917484354135 42] 74.67691748435414]
Test Case: 541 | Input/Output: [[5.679690806739686 -11] -5.320309193260314]
Test Case: 542 | Input/Output: [[-41.70706942571538 56] 14.292930574284618]
Test Case: 543 | Input/Output: [[30.848725309041072 68] 98.84872530904107]
Test Case: 544 | Input/Output: [[6.541244224958035 88] 94.54124422495804]
Test Case: 545 | Input/Output: [[84.61296817918148 -17] 67.61296817918148]
Test Case: 546 | Input/Output: [[-40.34704561648448 44] 3.652954383515521]
Test Case: 547 | Input/Output: [[-86.64064521435097 -47] -133.64064521435097]
Test Case: 548 | Input/Output: [[55.798734952554156 -33] 22.798734952554156]
Test Case: 549 | Input/Output: [[67.33147268657817 34] 101.33147268657817]
Test Case: 550 | Input/Output: [[-72.41656559602252 65] -7.416565596022522]
Test Case: 551 | Input/Output: [[-82.35582014020852 80] -2.3558201402085217]
Test Case: 552 | Input/Output: [[-42.058724970788305 80] 37.941275029211695]
Test Case: 553 | Input/Output: [[98.28461438759757 -11] 87.28461438759757]
Test Case: 554 | Input/Output: [[69.76665330068298 92] 161.76665330068298]
Test Case: 555 | Input/Output: [[-68.21999192213039 -18] -86.21999192213039]
Test Case: 556 | Input/Output: [[-78.84748647466733 74] -4.847486474667335]
Test Case: 557 | Input/Output: [[-2.1718380315780337 -65] -67.17183803157803]
Test Case: 558 | Input/Output: [[84.68598261807185 -21] 63.68598261807185]
Test Case: 559 | Input/Output: [[58.11341447529776 36] 94.11341447529776]
Test Case: 560 | Input/Output: [[-12.660651911838698 -81] -93.6606519118387]
Test Case: 561 | Input/Output: [[-29.826350198077932 74] 44.17364980192207]
Test Case: 562 | Input/Output: [[-14.909926811727715 100] 85.09007318827229]
Test Case: 563 | Input/Output: [[-39.411886833869204 47] 7.588113166130796]
Test Case: 564 | Input/Output: [[27.223354909898887 7] 34.22335490989889]
Test Case: 565 | Input/Output: [[94.2130141500048 76] 170.2130141500048]
Test Case: 566 | Input/Output: [[0.6320188641743272 -63] -62.36798113582567]
Test Case: 567 | Input/Output: [[42.975556775033 48] 90.975556775033]
Test Case: 568 | Input/Output: [[21.302448027707328 18] 39.30244802770733]
Test Case: 569 | Input/Output: [[13.6651797842446 -92] -78.3348202157554]
Test Case: 570 | Input/Output: [[-53.36530453515562 -32] -85.36530453515562]
Test Case: 571 | Input/Output: [[-15.622049701707937 -85] -100.62204970170794]
Test Case: 572 | Input/Output: [[36.63150464748415 48] 84.63150464748415]
Test Case: 573 | Input/Output: [[-14.311028418179191 37] 22.68897158182081]
Test Case: 574 | Input/Output: [[76.92661185581167 -49] 27.92661185581167]
Test Case: 575 | Input/Output: [[48.459783448391136 66] 114.45978344839114]
Test Case: 576 | Input/Output: [[-28.293044181119242 19] -9.293044181119242]
Test Case: 577 | Input/Output: [[91.53583912648335 -78] 13.535839126483353]
Test Case: 578 | Input/Output: [[22.88979127742992 -61] -38.11020872257008]
Test Case: 579 | Input/Output: [[-78.95528737781416 4] -74.95528737781416]
Test Case: 580 | Input/Output: [[-87.66467428148638 94] 6.335325718513616]
Test Case: 581 | Input/Output: [[88.11139315809376 63] 151.11139315809376]
Test Case: 582 | Input/Output: [[-71.38492234943989 -52] -123.38492234943989]
Test Case: 583 | Input/Output: [[83.66120454882875 84] 167.66120454882875]
Test Case: 584 | Input/Output: [[-70.7621187269591 92] 21.237881273040898]
Test Case: 585 | Input/Output: [[4.778809623962999 -96] -91.221190376037]
Test Case: 586 | Input/Output: [[59.44052109881204 13] 72.44052109881204]
Test Case: 587 | Input/Output: [[-58.41796421255543 -65] -123.41796421255543]
Test Case: 588 | Input/Output: [[-56.580700501041626 90] 33.419299498958374]
Test Case: 589 | Input/Output: [[-18.899728560434255 -1] -19.899728560434255]
Test Case: 590 | Input/Output: [[64.8558833382935 31] 95.8558833382935]
Test Case: 591 | Input/Output: [[17.86226845178858 55] 72.86226845178858]
Test Case: 592 | Input/Output: [[76.90232675200895 -31] 45.902326752008946]
Test Case: 593 | Input/Output: [[98.02796406639936 39] 137.02796406639936]
Test Case: 594 | Input/Output: [[-81.20783532852218 -58] -139.20783532852218]
Test Case: 595 | Input/Output: [[-89.31168519128204 -20] -109.31168519128204]
Test Case: 596 | Input/Output: [[39.17871182560782 -44] -4.82128817439218]
Test Case: 597 | Input/Output: [[1.6881283179286868 33] 34.68812831792869]
Test Case: 598 | Input/Output: [[-34.11972613034773 51] 16.88027386965227]
Test Case: 599 | Input/Output: [[33.848266028509386 77] 110.84826602850939]
Test Case: 600 | Input/Output: [[-75.79662967688347 55] -20.79662967688347]
Test Case: 601 | Input/Output: [[33.42736253957048 15] 48.42736253957048]
Test Case: 602 | Input/Output: [[-72.62557501083185 10] -62.62557501083185]
Test Case: 603 | Input/Output: [[-94.93001730849302 99] 4.069982691506979]
Test Case: 604 | Input/Output: [[-78.48806045427628 30] -48.48806045427628]
Test Case: 605 | Input/Output: [[1.5013569191463176 -33] -31.498643080853682]
Test Case: 606 | Input/Output: [[78.65616172315305 -69] 9.656161723153048]
Test Case: 607 | Input/Output: [[-67.39349395356804 -19] -86.39349395356804]
Test Case: 608 | Input/Output: [[-51.62077688867834 -1] -52.62077688867834]
Test Case: 609 | Input/Output: [[25.038506767138173 -91] -65.96149323286183]
Test Case: 610 | Input/Output: [[97.25075720702301 44] 141.250757207023]
Test Case: 611 | Input/Output: [[40.738575853321976 -98] -57.261424146678024]
Test Case: 612 | Input/Output: [[4.917467599572163 68] 72.91746759957216]
Test Case: 613 | Input/Output: [[-76.74198490594617 -49] -125.74198490594617]
Test Case: 614 | Input/Output: [[-75.24809178026028 -28] -103.24809178026028]
Test Case: 615 | Input/Output: [[-94.74348435680837 15] -79.74348435680837]
Test Case: 616 | Input/Output: [[5.547074803621712 -66] -60.45292519637829]
Test Case: 617 | Input/Output: [[53.584571425352436 -7] 46.584571425352436]
Test Case: 618 | Input/Output: [[-74.10144479839407 96] 21.89855520160593]
Test Case: 619 | Input/Output: [[89.64959540718272 53] 142.64959540718272]
Test Case: 620 | Input/Output: [[-75.94878973378127 -68] -143.94878973378127]
Test Case: 621 | Input/Output: [[-71.59521160370099 -64] -135.595211603701]
Test Case: 622 | Input/Output: [[-0.2293389794507732 1] 0.7706610205492268]
Test Case: 623 | Input/Output: [[-5.211000747288182 94] 88.78899925271182]
Test Case: 624 | Input/Output: [[-1.9898580596462807 32] 30.01014194035372]
Test Case: 625 | Input/Output: [[-74.23933344677374 38] -36.23933344677374]
Test Case: 626 | Input/Output: [[35.72034809422999 -70] -34.27965190577001]
Test Case: 627 | Input/Output: [[-46.89279449056396 -49] -95.89279449056396]
Test Case: 628 | Input/Output: [[10.769285787460191 -51] -40.23071421253981]
Test Case: 629 | Input/Output: [[87.2051770515474 -24] 63.205177051547395]
Test Case: 630 | Input/Output: [[47.466446554656414 48] 95.46644655465641]
Test Case: 631 | Input/Output: [[-69.76187999847238 -10] -79.76187999847238]
Test Case: 632 | Input/Output: [[96.04660525960321 22] 118.04660525960321]
Test Case: 633 | Input/Output: [[-23.47079475580007 -77] -100.47079475580007]
Test Case: 634 | Input/Output: [[1.9322114524242977 -75] -73.0677885475757]
Test Case: 635 | Input/Output: [[79.55301807697344 -66] 13.553018076973444]
Test Case: 636 | Input/Output: [[-70.05977989644501 -85] -155.059779896445]
Test Case: 637 | Input/Output: [[-7.232662607766201 -30] -37.2326626077662]
Test Case: 638 | Input/Output: [[-67.09940481578641 58] -9.099404815786414]
Test Case: 639 | Input/Output: [[-35.94064634839978 -56] -91.94064634839978]
Test Case: 640 | Input/Output: [[94.42698011568132 -48] 46.42698011568132]
Test Case: 641 | Input/Output: [[-53.0539265612493 14] -39.0539265612493]
Test Case: 642 | Input/Output: [[-19.793776548847546 36] 16.206223451152454]
Test Case: 643 | Input/Output: [[-44.12797880856121 -28] -72.12797880856121]
Test Case: 644 | Input/Output: [[99.42386911132817 -41] 58.42386911132817]
Test Case: 645 | Input/Output: [[-58.87429004559386 68] 9.12570995440614]
Test Case: 646 | Input/Output: [[-58.38603002901168 63] 4.613969970988322]
Test Case: 647 | Input/Output: [[-44.98592071455037 1] -43.98592071455037]
Test Case: 648 | Input/Output: [[-3.5175519502011525 -73] -76.51755195020115]
Test Case: 649 | Input/Output: [[-29.51564170281351 100] 70.48435829718649]
Test Case: 650 | Input/Output: [[97.11164639554664 -16] 81.11164639554664]
Test Case: 651 | Input/Output: [[-44.483159429465566 3] -41.483159429465566]
Test Case: 652 | Input/Output: [[-62.76950911713337 -86] -148.76950911713337]
Test Case: 653 | Input/Output: [[-23.77801177774495 93] 69.22198822225505]
Test Case: 654 | Input/Output: [[1.2511076632513891 -20] -18.74889233674861]
Test Case: 655 | Input/Output: [[82.43449443269421 -43] 39.43449443269421]
Test Case: 656 | Input/Output: [[46.88698164325518 100] 146.88698164325518]
Test Case: 657 | Input/Output: [[-87.84243984678017 -84] -171.84243984678017]
Test Case: 658 | Input/Output: [[52.98043333112065 75] 127.98043333112065]
Test Case: 659 | Input/Output: [[-98.47157980573162 82] -16.471579805731622]
Test Case: 660 | Input/Output: [[17.096337121253228 56] 73.09633712125323]
Test Case: 661 | Input/Output: [[-3.8008129568137576 65] 61.19918704318624]
Test Case: 662 | Input/Output: [[37.23372152825283 31] 68.23372152825283]
Test Case: 663 | Input/Output: [[-52.35364321133984 64] 11.646356788660157]
Test Case: 664 | Input/Output: [[-63.72672504330714 3] -60.72672504330714]
Test Case: 665 | Input/Output: [[58.06973693050173 -34] 24.069736930501733]
Test Case: 666 | Input/Output: [[-33.489967709595774 78] 44.510032290404226]
Test Case: 667 | Input/Output: [[7.739202372071176 -66] -58.260797627928824]
Test Case: 668 | Input/Output: [[95.63118544251623 -13] 82.63118544251623]
Test Case: 669 | Input/Output: [[94.77040555252486 -32] 62.77040555252486]
Test Case: 670 | Input/Output: [[-79.21333245740752 -98] -177.21333245740752]
Test Case: 671 | Input/Output: [[-64.18427476289565 62] -2.1842747628956545]
Test Case: 672 | Input/Output: [[-20.963841406331824 19] -1.9638414063318237]
Test Case: 673 | Input/Output: [[-52.942017819168456 -97] -149.94201781916846]
Test Case: 674 | Input/Output: [[-76.75126100982447 -12] -88.75126100982447]
Test Case: 675 | Input/Output: [[-28.524944833660044 16] -12.524944833660044]
Test Case: 676 | Input/Output: [[18.69204006842031 1] 19.69204006842031]
Test Case: 677 | Input/Output: [[91.62509615676791 67] 158.6250961567679]
Test Case: 678 | Input/Output: [[-86.88560768343545 70] -16.885607683435452]
Test Case: 679 | Input/Output: [[-11.685534041103239 51] 39.31446595889676]
Test Case: 680 | Input/Output: [[-37.701244246604105 -11] -48.701244246604105]
Test Case: 681 | Input/Output: [[-2.852353358326738 -55] -57.85235335832674]
Test Case: 682 | Input/Output: [[-84.90263180590469 -11] -95.90263180590469]
Test Case: 683 | Input/Output: [[-63.31485793677991 20] -43.31485793677991]
Test Case: 684 | Input/Output: [[-11.800098582754543 21] 9.199901417245457]
Test Case: 685 | Input/Output: [[8.106038389415232 39] 47.10603838941523]
Test Case: 686 | Input/Output: [[83.4487451081794 28] 111.4487451081794]
Test Case: 687 | Input/Output: [[15.945852997924788 -95] -79.05414700207521]
Test Case: 688 | Input/Output: [[-85.61494255240838 33] -52.61494255240838]
Test Case: 689 | Input/Output: [[35.398680020074494 73] 108.3986800200745]
Test Case: 690 | Input/Output: [[87.37558763422805 38] 125.37558763422805]
Test Case: 691 | Input/Output: [[-7.3776618383274695 19] 11.62233816167253]
Test Case: 692 | Input/Output: [[26.766878276836408 -3] 23.766878276836408]
Test Case: 693 | Input/Output: [[-1.3200298911035588 -17] -18.32002989110356]
Test Case: 694 | Input/Output: [[86.60412473994307 27] 113.60412473994307]
Test Case: 695 | Input/Output: [[66.12794736367078 -51] 15.127947363670785]
Test Case: 696 | Input/Output: [[80.18761050413318 -50] 30.187610504133175]
Test Case: 697 | Input/Output: [[28.612635487524045 30] 58.612635487524045]
Test Case: 698 | Input/Output: [[52.44569906128251 31] 83.44569906128251]
Test Case: 699 | Input/Output: [[46.0350974018626 59] 105.0350974018626]
Test Case: 700 | Input/Output: [[-15.407255490049906 -60] -75.4072554900499]
Test Case: 701 | Input/Output: [[81.48795784665964 -66] 15.48795784665964]
Test Case: 702 | Input/Output: [[-30.917234925324877 -83] -113.91723492532488]
Test Case: 703 | Input/Output: [[-62.82204210116096 -48] -110.82204210116096]
Test Case: 704 | Input/Output: [[-8.444200582349694 -7] -15.444200582349694]
Test Case: 705 | Input/Output: [[73.36837937161096 30] 103.36837937161096]
Test Case: 706 | Input/Output: [[42.67446320984038 35] 77.67446320984038]
Test Case: 707 | Input/Output: [[-92.19925027578361 73] -19.199250275783612]
Test Case: 708 | Input/Output: [[46.05803066321454 88] 134.05803066321454]
Test Case: 709 | Input/Output: [[-42.35554225625051 -87] -129.35554225625052]
Test Case: 710 | Input/Output: [[-79.67825207855479 100] 20.32174792144521]
Test Case: 711 | Input/Output: [[-53.377322235380745 7] -46.377322235380745]
Test Case: 712 | Input/Output: [[84.18169684047803 -29] 55.181696840478025]
Test Case: 713 | Input/Output: [[26.768688945234658 0] 26.768688945234658]
Test Case: 714 | Input/Output: [[46.620435087812666 98] 144.62043508781267]
Test Case: 715 | Input/Output: [[-56.7211041860902 -30] -86.7211041860902]
Test Case: 716 | Input/Output: [[-32.520132657659246 76] 43.479867342340754]
Test Case: 717 | Input/Output: [[-59.025969927828406 -45] -104.02596992782841]
Test Case: 718 | Input/Output: [[-32.872873192319844 91] 58.127126807680156]
Test Case: 719 | Input/Output: [[-87.73497312398261 -9] -96.73497312398261]
Test Case: 720 | Input/Output: [[-91.81559868710924 76] -15.815598687109244]
Test Case: 721 | Input/Output: [[74.11089722642834 -26] 48.110897226428335]
Test Case: 722 | Input/Output: [[-12.786111877549075 4] -8.786111877549075]
Test Case: 723 | Input/Output: [[79.90491693954115 -99] -19.095083060458848]
Test Case: 724 | Input/Output: [[-0.9780032569784964 95] 94.0219967430215]
Test Case: 725 | Input/Output: [[-62.77325288287325 -63] -125.77325288287325]
Test Case: 726 | Input/Output: [[67.40704402653847 -87] -19.592955973461528]
Test Case: 727 | Input/Output: [[73.7037122536525 -80] -6.296287746347502]
Test Case: 728 | Input/Output: [[-8.777577798123716 39] 30.222422201876284]
Test Case: 729 | Input/Output: [[-29.786310082201624 -7] -36.786310082201624]
Test Case: 730 | Input/Output: [[-25.29236798886207 52] 26.70763201113793]
Test Case: 731 | Input/Output: [[-63.25455754629712 13] -50.25455754629712]
Test Case: 732 | Input/Output: [[-95.86747389100465 30] -65.86747389100465]
Test Case: 733 | Input/Output: [[24.924287988753193 44] 68.92428798875319]
Test Case: 734 | Input/Output: [[81.52933393004022 -71] 10.529333930040224]
Test Case: 735 | Input/Output: [[-11.872599703715878 -60] -71.87259970371588]
Test Case: 736 | Input/Output: [[-53.286600750706036 81] 27.713399249293964]
Test Case: 737 | Input/Output: [[59.340290377982456 -92] -32.659709622017544]
Test Case: 738 | Input/Output: [[35.46120643134168 -15] 20.46120643134168]
Test Case: 739 | Input/Output: [[80.79979428980562 36] 116.79979428980562]
Test Case: 740 | Input/Output: [[94.95195647933667 -21] 73.95195647933667]
Test Case: 741 | Input/Output: [[-26.852626865832406 77] 50.147373134167594]
Test Case: 742 | Input/Output: [[79.69769619353747 -47] 32.69769619353747]
Test Case: 743 | Input/Output: [[70.91472201321179 81] 151.9147220132118]
Test Case: 744 | Input/Output: [[43.76128997095816 0] 43.76128997095816]
Test Case: 745 | Input/Output: [[31.354049160996738 13] 44.35404916099674]
Test Case: 746 | Input/Output: [[8.829784268545609 -54] -45.17021573145439]
Test Case: 747 | Input/Output: [[-21.817279098142635 27] 5.1827209018573654]
Test Case: 748 | Input/Output: [[97.52455344511023 92] 189.52455344511023]
Test Case: 749 | Input/Output: [[14.49233880159015 -29] -14.50766119840985]
Test Case: 750 | Input/Output: [[42.952315940553746 -5] 37.952315940553746]
Test Case: 751 | Input/Output: [[85.21474517231263 -42] 43.21474517231263]
Test Case: 752 | Input/Output: [[53.02551893471053 31] 84.02551893471053]
Test Case: 753 | Input/Output: [[-75.49332772655444 -51] -126.49332772655444]
Test Case: 754 | Input/Output: [[-91.19668486850469 39] -52.19668486850469]
Test Case: 755 | Input/Output: [[3.6019300123899995 15] 18.60193001239]
Test Case: 756 | Input/Output: [[-2.9353937655015585 -41] -43.93539376550156]
Test Case: 757 | Input/Output: [[12.791184145918649 -7] 5.791184145918649]
Test Case: 758 | Input/Output: [[-33.22111194055357 33] -0.22111194055356975]
Test Case: 759 | Input/Output: [[-53.555936949131876 -90] -143.55593694913188]
Test Case: 760 | Input/Output: [[31.214318630496734 52] 83.21431863049673]
Test Case: 761 | Input/Output: [[93.99804254982485 -4] 89.99804254982485]
Test Case: 762 | Input/Output: [[-35.77002357283763 -82] -117.77002357283763]
Test Case: 763 | Input/Output: [[-13.706109220939425 94] 80.29389077906058]
Test Case: 764 | Input/Output: [[55.31063045701927 -9] 46.31063045701927]
Test Case: 765 | Input/Output: [[92.20058814498523 9] 101.20058814498523]
Test Case: 766 | Input/Output: [[-12.668993829971981 91] 78.33100617002802]
Test Case: 767 | Input/Output: [[85.5871976186499 -75] 10.587197618649896]
Test Case: 768 | Input/Output: [[56.31568672862349 -40] 16.31568672862349]
Test Case: 769 | Input/Output: [[61.92451653566843 -38] 23.92451653566843]
Test Case: 770 | Input/Output: [[-5.79665157476137 68] 62.20334842523863]
Test Case: 771 | Input/Output: [[-10.66817497633457 89] 78.33182502366543]
Test Case: 772 | Input/Output: [[65.39664632719354 -72] -6.603353672806463]
Test Case: 773 | Input/Output: [[30.77929846522926 -54] -23.22070153477074]
Test Case: 774 | Input/Output: [[79.10082552547124 68] 147.10082552547124]
Test Case: 775 | Input/Output: [[-64.85501928415633 -69] -133.85501928415633]
Test Case: 776 | Input/Output: [[17.847456627793818 85] 102.84745662779382]
Test Case: 777 | Input/Output: [[63.8825102500507 -37] 26.8825102500507]
Test Case: 778 | Input/Output: [[-96.71983436884504 -96] -192.71983436884506]
Test Case: 779 | Input/Output: [[16.299235583804332 -80] -63.70076441619567]
Test Case: 780 | Input/Output: [[-37.214730457123665 66] 28.785269542876335]
Test Case: 781 | Input/Output: [[71.23662225804378 -68] 3.2366222580437807]
Test Case: 782 | Input/Output: [[-88.22649128469146 -71] -159.22649128469146]
Test Case: 783 | Input/Output: [[77.41912105402338 66] 143.41912105402338]
Test Case: 784 | Input/Output: [[-98.27978112591913 -96] -194.27978112591913]
Test Case: 785 | Input/Output: [[17.611230147427932 53] 70.61123014742793]
Test Case: 786 | Input/Output: [[-24.522816452690478 -27] -51.52281645269048]
Test Case: 787 | Input/Output: [[78.91300721598654 -8] 70.91300721598654]
Test Case: 788 | Input/Output: [[-55.699989176323726 82] 26.300010823676274]
Test Case: 789 | Input/Output: [[-9.714011213459273 37] 27.285988786540727]
Test Case: 790 | Input/Output: [[-46.81628576711891 78] 31.183714232881087]
Test Case: 791 | Input/Output: [[96.78797144436271 -61] 35.78797144436271]
Test Case: 792 | Input/Output: [[20.652708681079247 -16] 4.652708681079247]
Test Case: 793 | Input/Output: [[81.30714182442125 64] 145.30714182442125]
Test Case: 794 | Input/Output: [[21.323762321937934 -64] -42.676237678062066]
Test Case: 795 | Input/Output: [[-45.99930544010249 -67] -112.99930544010249]
Test Case: 796 | Input/Output: [[-34.78048591750664 10] -24.78048591750664]
Test Case: 797 | Input/Output: [[-67.3045714413891 -88] -155.3045714413891]
Test Case: 798 | Input/Output: [[15.815457406906148 2] 17.815457406906148]
Test Case: 799 | Input/Output: [[-44.74976789667262 0] -44.74976789667262]
Test Case: 800 | Input/Output: [[-31.473553530423885 52] 20.526446469576115]
Test Case: 801 | Input/Output: [[57.87264987292298 -29] 28.872649872922977]
Test Case: 802 | Input/Output: [[64.02575475197625 -82] -17.97424524802375]
Test Case: 803 | Input/Output: [[-49.21701601145996 36] -13.217016011459961]
Test Case: 804 | Input/Output: [[-86.84485360708645 -85] -171.84485360708646]
Test Case: 805 | Input/Output: [[-60.9320343318188 -89] -149.93203433181878]
Test Case: 806 | Input/Output: [[89.75616274400943 -62] 27.75616274400943]
Test Case: 807 | Input/Output: [[-58.88389946411654 -38] -96.88389946411654]
Test Case: 808 | Input/Output: [[-55.133928920421546 -29] -84.13392892042154]
Test Case: 809 | Input/Output: [[7.853722778465141 30] 37.85372277846514]
Test Case: 810 | Input/Output: [[70.48189095595399 -79] -8.518109044046014]
Test Case: 811 | Input/Output: [[-27.407734175263187 25] -2.4077341752631867]
Test Case: 812 | Input/Output: [[-40.16849296392058 26] -14.168492963920578]
Test Case: 813 | Input/Output: [[5.75902410654443 -85] -79.24097589345557]
Test Case: 814 | Input/Output: [[82.44509179824854 -35] 47.44509179824854]
Test Case: 815 | Input/Output: [[12.199018418215644 -84] -71.80098158178436]
Test Case: 816 | Input/Output: [[-41.27421412779415 -63] -104.27421412779415]
Test Case: 817 | Input/Output: [[-56.74012183207093 -46] -102.74012183207094]
Test Case: 818 | Input/Output: [[74.38619152251758 -84] -9.613808477482422]
Test Case: 819 | Input/Output: [[-18.33580844757512 1] -17.33580844757512]
Test Case: 820 | Input/Output: [[47.073846262399 -100] -52.926153737601]
Test Case: 821 | Input/Output: [[43.30461067781627 65] 108.30461067781627]
Test Case: 822 | Input/Output: [[-5.796748393536191 62] 56.20325160646381]
Test Case: 823 | Input/Output: [[38.010326915016265 70] 108.01032691501626]
Test Case: 824 | Input/Output: [[-75.28704646475984 69] -6.28704646475984]
Test Case: 825 | Input/Output: [[93.82626295306824 6] 99.82626295306824]
Test Case: 826 | Input/Output: [[-64.80413899125912 25] -39.80413899125912]
Test Case: 827 | Input/Output: [[-14.084696111158053 16] 1.9153038888419474]
Test Case: 828 | Input/Output: [[-87.52085895111358 19] -68.52085895111358]
Test Case: 829 | Input/Output: [[56.5674544937859 -1] 55.5674544937859]
Test Case: 830 | Input/Output: [[-60.759386181605414 87] 26.240613818394586]
Test Case: 831 | Input/Output: [[-1.93230349756044 31] 29.06769650243956]
Test Case: 832 | Input/Output: [[-60.6556733119679 2] -58.6556733119679]
Test Case: 833 | Input/Output: [[0.3047562288031429 87] 87.30475622880314]
Test Case: 834 | Input/Output: [[42.49702656536917 62] 104.49702656536917]
Test Case: 835 | Input/Output: [[8.184324486583378 46] 54.18432448658338]
Test Case: 836 | Input/Output: [[-53.80603158771855 -53] -106.80603158771855]
Test Case: 837 | Input/Output: [[49.69674821850646 34] 83.69674821850646]
Test Case: 838 | Input/Output: [[-47.2462636076163 3] -44.2462636076163]
Test Case: 839 | Input/Output: [[27.491736585326663 -3] 24.491736585326663]
Test Case: 840 | Input/Output: [[24.31824533840488 -47] -22.68175466159512]
Test Case: 841 | Input/Output: [[-39.68175624649457 -37] -76.68175624649457]
Test Case: 842 | Input/Output: [[-18.561925744422197 -56] -74.5619257444222]
Test Case: 843 | Input/Output: [[72.76008582458516 81] 153.76008582458516]
Test Case: 844 | Input/Output: [[-33.18473698126709 36] 2.8152630187329066]
Test Case: 845 | Input/Output: [[-11.302496183135219 86] 74.69750381686478]
Test Case: 846 | Input/Output: [[-15.163822132119108 75] 59.83617786788089]
Test Case: 847 | Input/Output: [[90.43065194537155 -66] 24.43065194537155]
Test Case: 848 | Input/Output: [[-18.605043950862466 51] 32.394956049137534]
Test Case: 849 | Input/Output: [[-57.61573656547556 -94] -151.61573656547557]
Test Case: 850 | Input/Output: [[-23.64392924011713 85] 61.35607075988287]
Test Case: 851 | Input/Output: [[-63.26889472943156 -84] -147.26889472943157]
Test Case: 852 | Input/Output: [[-90.8992577402953 -42] -132.8992577402953]
Test Case: 853 | Input/Output: [[-87.89162923159408 -100] -187.8916292315941]
Test Case: 854 | Input/Output: [[-9.472772900941948 68] 58.52722709905805]
Test Case: 855 | Input/Output: [[-38.542527638897916 -20] -58.542527638897916]
Test Case: 856 | Input/Output: [[-31.00292593608546 3] -28.00292593608546]
Test Case: 857 | Input/Output: [[90.15751716948915 -2] 88.15751716948915]
Test Case: 858 | Input/Output: [[6.2229193800529 -10] -3.7770806199470996]
Test Case: 859 | Input/Output: [[-30.92617072348547 -78] -108.92617072348547]
Test Case: 860 | Input/Output: [[-14.565140775548542 91] 76.43485922445146]
Test Case: 861 | Input/Output: [[-8.433057661782641 32] 23.56694233821736]
Test Case: 862 | Input/Output: [[-92.9451931119742 -36] -128.94519311197422]
Test Case: 863 | Input/Output: [[82.27259682743707 94] 176.27259682743707]
Test Case: 864 | Input/Output: [[-55.297997049158965 70] 14.702002950841035]
Test Case: 865 | Input/Output: [[97.12775632715741 41] 138.1277563271574]
Test Case: 866 | Input/Output: [[-16.31793071170469 51] 34.68206928829531]
Test Case: 867 | Input/Output: [[-98.89872533392928 12] -86.89872533392928]
Test Case: 868 | Input/Output: [[-10.693090948671454 -24] -34.693090948671454]
Test Case: 869 | Input/Output: [[67.82686025711283 21] 88.82686025711283]
Test Case: 870 | Input/Output: [[-25.126427722268403 11] -14.126427722268403]
Test Case: 871 | Input/Output: [[87.77176006942696 9] 96.77176006942696]
Test Case: 872 | Input/Output: [[4.238941274993294 55] 59.238941274993294]
Test Case: 873 | Input/Output: [[47.36773437283682 -13] 34.36773437283682]
Test Case: 874 | Input/Output: [[-46.096732921333114 25] -21.096732921333114]
Test Case: 875 | Input/Output: [[-33.82169664145313 -75] -108.82169664145313]
Test Case: 876 | Input/Output: [[-53.06653200224982 -38] -91.06653200224983]
Test Case: 877 | Input/Output: [[-71.86940434736326 20] -51.86940434736326]
Test Case: 878 | Input/Output: [[-80.51771410601518 -99] -179.51771410601518]
Test Case: 879 | Input/Output: [[70.08173181354641 -71] -0.918268186453588]
Test Case: 880 | Input/Output: [[-39.11398058177697 -79] -118.11398058177697]
Test Case: 881 | Input/Output: [[52.32147330547963 98] 150.32147330547963]
Test Case: 882 | Input/Output: [[-40.65615610274433 26] -14.656156102744333]
Test Case: 883 | Input/Output: [[23.332758973440733 -92] -68.66724102655927]
Test Case: 884 | Input/Output: [[81.52957360363678 78] 159.52957360363678]
Test Case: 885 | Input/Output: [[-28.79144310783788 -29] -57.79144310783788]
Test Case: 886 | Input/Output: [[34.985874285801486 -55] -20.014125714198514]
Test Case: 887 | Input/Output: [[86.08922276082976 -100] -13.910777239170244]
Test Case: 888 | Input/Output: [[-76.23763964535843 52] -24.237639645358428]
Test Case: 889 | Input/Output: [[-1.919695850938922 31] 29.080304149061078]
Test Case: 890 | Input/Output: [[-91.77996598156828 61] -30.77996598156828]
Test Case: 891 | Input/Output: [[19.743428360354145 64] 83.74342836035414]
Test Case: 892 | Input/Output: [[-39.69732362438787 97] 57.30267637561213]
Test Case: 893 | Input/Output: [[-45.52474738885866 -22] -67.52474738885866]
Test Case: 894 | Input/Output: [[82.00114136276704 64] 146.00114136276704]
Test Case: 895 | Input/Output: [[-39.56815913708611 74] 34.43184086291389]
Test Case: 896 | Input/Output: [[-9.559181004479257 98] 88.44081899552074]
Test Case: 897 | Input/Output: [[10.378994170431895 50] 60.378994170431895]
Test Case: 898 | Input/Output: [[53.69179422798226 40] 93.69179422798226]
Test Case: 899 | Input/Output: [[-50.8986498514598 -55] -105.8986498514598]
Test Case: 900 | Input/Output: [[-9.156157585775986 -93] -102.15615758577599]
Test Case: 901 | Input/Output: [[39.52166732626284 -27] 12.521667326262843]
Test Case: 902 | Input/Output: [[15.34967653203725 -38] -22.65032346796275]
Test Case: 903 | Input/Output: [[-52.536243941217585 -94] -146.53624394121758]
Test Case: 904 | Input/Output: [[-29.43452537036289 -96] -125.43452537036289]
Test Case: 905 | Input/Output: [[-32.48375279744218 70] 37.51624720255782]
Test Case: 906 | Input/Output: [[-5.303964241689798 -75] -80.3039642416898]
Test Case: 907 | Input/Output: [[62.77262382772187 77] 139.77262382772187]
Test Case: 908 | Input/Output: [[-86.44941352015927 37] -49.44941352015927]
Test Case: 909 | Input/Output: [[-23.564211249855575 -67] -90.56421124985557]
Test Case: 910 | Input/Output: [[33.84077447696416 -36] -2.1592255230358433]
Test Case: 911 | Input/Output: [[43.4594179137992 29] 72.4594179137992]
Test Case: 912 | Input/Output: [[-83.46046262366112 54] -29.460462623661115]
Test Case: 913 | Input/Output: [[-70.18852188772573 -81] -151.18852188772573]
Test Case: 914 | Input/Output: [[-76.58066639035444 -81] -157.58066639035445]
Test Case: 915 | Input/Output: [[-80.4495306530112 -27] -107.4495306530112]
Test Case: 916 | Input/Output: [[4.227290008964218 -68] -63.77270999103578]
Test Case: 917 | Input/Output: [[42.76255274576383 94] 136.76255274576383]
Test Case: 918 | Input/Output: [[-33.337231319771575 -97] -130.33723131977158]
Test Case: 919 | Input/Output: [[-15.021431368384825 34] 18.978568631615175]
Test Case: 920 | Input/Output: [[-12.65348611862909 -72] -84.65348611862909]
Test Case: 921 | Input/Output: [[-19.935281036283087 -89] -108.93528103628309]
Test Case: 922 | Input/Output: [[41.06029770561696 -48] -6.939702294383039]
Test Case: 923 | Input/Output: [[74.1527522731422 -17] 57.1527522731422]
Test Case: 924 | Input/Output: [[-97.88834656326986 12] -85.88834656326986]
Test Case: 925 | Input/Output: [[14.44661188397096 -59] -44.55338811602904]
Test Case: 926 | Input/Output: [[-93.89856733288258 -30] -123.89856733288258]
Test Case: 927 | Input/Output: [[-42.849851926182644 -28] -70.84985192618265]
Test Case: 928 | Input/Output: [[-45.56884105983645 -92] -137.56884105983644]
Test Case: 929 | Input/Output: [[-39.13702314244407 67] 27.86297685755593]
Test Case: 930 | Input/Output: [[-72.4718986354381 -60] -132.4718986354381]
Test Case: 931 | Input/Output: [[37.16687572739221 42] 79.16687572739221]
Test Case: 932 | Input/Output: [[-21.527539689131103 -17] -38.5275396891311]
Test Case: 933 | Input/Output: [[0.4042470448986961 81] 81.4042470448987]
Test Case: 934 | Input/Output: [[20.75881241812128 -23] -2.2411875818787195]
Test Case: 935 | Input/Output: [[26.630677484097816 62] 88.63067748409782]
Test Case: 936 | Input/Output: [[-31.960667464209067 -89] -120.96066746420907]
Test Case: 937 | Input/Output: [[4.208890901533849 87] 91.20889090153385]
Test Case: 938 | Input/Output: [[-71.1639899631576 -94] -165.1639899631576]
Test Case: 939 | Input/Output: [[-28.724738189241734 3] -25.724738189241734]
Test Case: 940 | Input/Output: [[9.481963132806897 20] 29.481963132806897]
Test Case: 941 | Input/Output: [[-98.36682720179968 25] -73.36682720179968]
Test Case: 942 | Input/Output: [[-87.90086525041984 56] -31.90086525041984]
Test Case: 943 | Input/Output: [[-57.177326354661794 -1] -58.177326354661794]
Test Case: 944 | Input/Output: [[26.698396827616406 -15] 11.698396827616406]
Test Case: 945 | Input/Output: [[97.67157436093473 85] 182.67157436093473]
Test Case: 946 | Input/Output: [[56.08389799315603 0] 56.08389799315603]
Test Case: 947 | Input/Output: [[-89.39774183083355 55] -34.39774183083355]
Test Case: 948 | Input/Output: [[99.1621357772141 -67] 32.162135777214104]
Test Case: 949 | Input/Output: [[-44.105940860179004 46] 1.894059139820996]
Test Case: 950 | Input/Output: [[-71.00469476369315 -65] -136.00469476369315]
Test Case: 951 | Input/Output: [[-19.500217424919768 31] 11.499782575080232]
Test Case: 952 | Input/Output: [[27.88017634654041 -66] -38.11982365345959]
Test Case: 953 | Input/Output: [[32.48223669701193 22] 54.48223669701193]
Test Case: 954 | Input/Output: [[38.68334621566626 12] 50.68334621566626]
Test Case: 955 | Input/Output: [[-32.580349634115095 13] -19.580349634115095]
Test Case: 956 | Input/Output: [[-14.416974953088555 -20] -34.416974953088555]
Test Case: 957 | Input/Output: [[-9.977078978849917 48] 38.02292102115008]
Test Case: 958 | Input/Output: [[15.665374811357921 -7] 8.665374811357921]
Test Case: 959 | Input/Output: [[87.3262647500598 12] 99.3262647500598]
Test Case: 960 | Input/Output: [[-84.944621920478 64] -20.944621920478]
Test Case: 961 | Input/Output: [[44.33645003685217 36] 80.33645003685217]
Test Case: 962 | Input/Output: [[-42.85149844866301 6] -36.85149844866301]
Test Case: 963 | Input/Output: [[-18.73893894121339 -33] -51.73893894121339]
Test Case: 964 | Input/Output: [[-36.48333212646604 -67] -103.48333212646604]
Test Case: 965 | Input/Output: [[45.89383887994194 72] 117.89383887994194]
Test Case: 966 | Input/Output: [[-0.8435416335220083 56] 55.15645836647799]
Test Case: 967 | Input/Output: [[-4.946613509278876 32] 27.053386490721124]
Test Case: 968 | Input/Output: [[38.49560476231309 -61] -22.504395237686907]
Test Case: 969 | Input/Output: [[80.0325898403052 -43] 37.03258984030521]
Test Case: 970 | Input/Output: [[-77.34069193298802 -64] -141.34069193298802]
Test Case: 971 | Input/Output: [[58.220128648752706 -56] 2.2201286487527057]
Test Case: 972 | Input/Output: [[-72.26545425651327 99] 26.734545743486734]
Test Case: 973 | Input/Output: [[42.00961256357681 -51] -8.990387436423191]
Test Case: 974 | Input/Output: [[29.890831880906063 27] 56.89083188090606]
Test Case: 975 | Input/Output: [[99.03189920640779 -78] 21.031899206407786]
Test Case: 976 | Input/Output: [[-93.02056133297347 -95] -188.02056133297347]
Test Case: 977 | Input/Output: [[60.29283942182789 30] 90.29283942182789]
Test Case: 978 | Input/Output: [[5.9132285354297665 16] 21.913228535429766]
Test Case: 979 | Input/Output: [[-48.43977885481077 64] 15.560221145189232]
Test Case: 980 | Input/Output: [[94.2181429539634 21] 115.2181429539634]
Test Case: 981 | Input/Output: [[-90.51374249173978 -93] -183.51374249173978]
Test Case: 982 | Input/Output: [[-24.791464951584572 -73] -97.79146495158457]
Test Case: 983 | Input/Output: [[-95.26874568116679 95] -0.26874568116679143]
Test Case: 984 | Input/Output: [[27.091686433604963 0] 27.091686433604963]
Test Case: 985 | Input/Output: [[78.0668277265575 38] 116.0668277265575]
Test Case: 986 | Input/Output: [[-27.689507953529713 4] -23.689507953529713]
Test Case: 987 | Input/Output: [[55.43438947357572 8] 63.43438947357572]
Test Case: 988 | Input/Output: [[-85.13905421787015 25] -60.139054217870154]
Test Case: 989 | Input/Output: [[-66.28729925271995 -93] -159.28729925271995]
Test Case: 990 | Input/Output: [[0.18024747590999368 80] 80.18024747591]
Test Case: 991 | Input/Output: [[24.441702634932014 -1] 23.441702634932014]
Test Case: 992 | Input/Output: [[-77.17500876553842 -43] -120.17500876553842]
Test Case: 993 | Input/Output: [[-48.74080175199356 41] -7.740801751993558]
Test Case: 994 | Input/Output: [[43.28663089835737 -79] -35.71336910164263]
Test Case: 995 | Input/Output: [[95.32530843834758 -93] 2.3253084383475766]
Test Case: 996 | Input/Output: [[-54.76859615791714 -1] -55.76859615791714]
Test Case: 997 | Input/Output: [[62.026066999703374 -39] 23.026066999703374]
Test Case: 998 | Input/Output: [[91.01100864477988 73] 164.01100864477988]
Test Case: 999 | Input/Output: [[-33.683273647648974 -35] -68.68327364764897]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -121 -82 80 38 -119 30 64 86 -35 61 -49 -111 -113 126 -78 -111
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 64973.165600000044
Test mean error for best: 32.48658
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 


68.732100971
Correct output: 10.0760954048  | Program output: 


-0.0261044672
Correct output: 106.0206148688 | Program output: 


-0.0261044672
Correct output: 0.7585604003   | Program output: 


-0.0261044672
Correct output: 32.0892717501  | Program output: 


37.0892717501
Correct output: 38.239902819   | Program output: 


-0.0261044672
Correct output: -28.253581966  | Program output: 


-0.0261044672
Correct output: 22.691883669   | Program output: 


-0.0261044672
Correct output: -64.8098353824 | Program output: 


-27.8098353824
Correct output: -50.5729717288 | Program output: 


-0.0261044672
Correct output: 10.5716307984  | Program output: 


-0.0261044672
Correct output: -5.0640064942  | Program output: 


3.9359935058
Correct output: -156.5700373509 | Program output: 


-100.5700373509
Correct output: 16.1193686865  | Program output: 


-0.0261044672
Correct output: 50.1878349036  | Program output: 


-0.0261044672
Correct output: -138.4095016371 | Program output: 


-51.4095016371
Correct output: -119.7462217731 | Program output: 


-81.7462217731
Correct output: -95.2566750864 | Program output: 


-6.2566750864
Correct output: 153.6667050749 | Program output: 


-0.0261044672
Correct output: 6.8630846811   | Program output: 


-0.0261044672
Correct output: -5.6640417064  | Program output: 


-5.6640417064
Correct output: 34.7374026319  | Program output: 


66.7374026319
Correct output: -49.1253212489 | Program output: 


21.8746787511
Correct output: 17.2744201056  | Program output: 


21.2744201056
Correct output: 62.9989442076  | Program output: 


-0.0261044672
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction print_float} {:instruction integer_inc} {:instruction integer_mult} {:instruction print_newline} {:instruction float_tan} {:instruction float_flush} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction in1} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_tan} {:instruction float_dup_times} {:instruction integer_mult} {:instruction print_newline} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_mod} {:instruction float_add} {:instruction tagged_171} {:instruction in2} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_sin print_float integer_inc integer_mult print_newline float_tan float_flush float_min integer_stackdepth integer_flush in1 integer_pop float_stackdepth integer_pop float_tan float_dup_times integer_mult print_newline integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times float_stackdepth integer_rot 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_mod float_add tagged_171 in2 float_sin float_frominteger float_dup_times float_shove integer_yank integer_mod float_swap integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 12 10.1022 11 106.0467 10 0.7847 13 5.0 4 38.266 14 28.2275 14 22.718 13 37.0 5 50.5469 14 10.5977 13 9.0 14 56.0 5 16.1455 14 50.2139 13 87.0 6 38.0 5 89.0 5 153.6928 13 6.8892 12 0.0 3 32.0 5 71.0 15 4.0 5 63.025 13]
Total: 1329.2561
Mean: 26.585121
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 18271.3822033
Median total errors in population: 25333.0
Error averages by case: (718.6219196999994 12.931 708.9552491999998 12.939 721.2931148000011 13.098 714.8064953000004 12.394 708.5987907999995 12.318 715.6070616000003 12.121 709.4623324000016 12.425 714.2847546999997 12.335 724.8814113000012 13.125 717.0341835999984 13.204 707.5070684000001 13.089 703.3886299000005 13.022 744.5193371999983 14.027 712.0419514 13.266 715.2575459999999 12.951 743.4084993999982 13.971 734.907797400002 14.119 730.8622212000024 13.054 735.2441184999973 13.286 711.3940583000001 12.183 705.5221726999988 12.225 715.2675123999994 12.364 720.8712902999999 13.938 705.8303045 12.395 708.6593823000007 12.375)
Error minima by case: (1.2679 8 0.0761 8 8.0206 2 0.015 8 0.1527 1 0.8068 8 0.2536 2 0.0337 7 1.0444 2 1.3021 2 0.4284 8 0.6666 8 26.0921 3 1.8806 7 0.8122 7 0.5905 3 20.4275 3 4.0621 1 55.6667 3 0.1569 7 0.0 1 0.014 2 0.1455 8 0.7256 2 0.0011 1)
Average genome size in population (length): 49.339
Average program size in population (points): 50.339
Average percent parens in population: 0.042
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.316
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1237326
--- Timings ---
Current time: 1529615939661 milliseconds
Total Time:           3.2 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.6 seconds, 17.5%
Fitness Testing:      2.5 seconds, 79.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 62241.856599999956
Test mean error for best: 31.12093
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
-0.4276449171
Correct output: 10.0760954048  | Program output: 
1.9992559346 
Correct output: 106.0206148688 | Program output: 
1.9992559346 
Correct output: 0.7585604003   | Program output: 
1.9992559346 
Correct output: 32.0892717501  | Program output: 
-0.4276449171
Correct output: 38.239902819   | Program output: 
1.9992559346 
Correct output: -28.253581966  | Program output: 
1.9992559346 
Correct output: 22.691883669   | Program output: 
1.9992559346 
Correct output: -64.8098353824 | Program output: 
-26.8098353824
Correct output: -50.5729717288 | Program output: 
1.9992559346 
Correct output: 10.5716307984  | Program output: 
1.9992559346 
Correct output: -5.0640064942  | Program output: 
-0.4276449171
Correct output: -156.5700373509 | Program output: 
-99.5700373509
Correct output: 16.1193686865  | Program output: 
1.9992559346 
Correct output: 50.1878349036  | Program output: 
1.9992559346 
Correct output: -138.4095016371 | Program output: 
-50.4095016371
Correct output: -119.7462217731 | Program output: 
-80.7462217731
Correct output: -95.2566750864 | Program output: 
-5.2566750864
Correct output: 153.6667050749 | Program output: 
1.9992559346 
Correct output: 6.8630846811   | Program output: 
1.9992559346 
Correct output: -5.6640417064  | Program output: 
-4.6640417064
Correct output: 34.7374026319  | Program output: 
-0.4276449171
Correct output: -49.1253212489 | Program output: 
-0.4276449171
Correct output: 17.2744201056  | Program output: 
-0.4276449171
Correct output: 62.9989442076  | Program output: 
1.9992559346 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_yankdup} {:instruction tag_float_774} {:instruction float_tan} {:instruction float_yank} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction float_add} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_rot} {:instruction tag_integer_139} {:instruction integer_pop} {:instruction float_dup} {:instruction float_mult} {:instruction float_frominteger} {:instruction 13} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_tan} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_yank} {:instruction float_cos} {:instruction float_dup_items} {:instruction tag_float_766} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_inc} {:instruction print_integer} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_swap float_yankdup tag_float_774 float_tan float_yank integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap float_add print_float float_add integer_mod integer_min integer_rot tag_integer_139 integer_pop float_dup float_mult float_frominteger 13 float_yankdup integer_add float_sin integer_div float_frominteger float_inc float_tan in2 integer_min float_stackdepth integer_shove float_yankdup integer_max float_yank float_cos float_dup_items tag_float_766 float_frominteger float_dec integer_inc print_integer float_cos integer_dec integer_yankdup float_inc integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [23.8403 11 8.0768 10 104.0214 12 1.2407 12 32.5169 11 36.2406 10 30.2528 11 20.6926 10 38.0 3 52.5722 13 8.5724 11 4.6364 10 57.0 4 14.1201 11 48.1886 10 88.0 4 39.0 4 90.0 2 151.6674 11 4.8638 12 1.0 2 35.165 11 48.6977 12 17.7021 10 60.9997 9]
Total: 1243.0674999999997
Mean: 24.86135
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 6725.577842100005
Median total errors in population: 1611.5185
Error averages by case: (263.35698790000055 11.795 235.3447363000001 11.871 270.79849369999846 10.665 255.14100379999996 11.747 234.38772399999965 10.113 253.46566329999962 10.995 235.95322049999902 10.314 250.87821070000035 11.514 266.4843918999981 10.616 259.6546547000009 10.952 231.29915779999996 12.223 222.02617420000007 11.998 317.29636650000236 11.488 247.19358179999998 12.555 254.53681170000073 11.808 310.78358900000154 11.504 294.87558499999824 11.796 284.4784055000002 10.483 302.3690171000007 11.139 245.24573499999988 11.213 225.28535529999897 9.788 253.0010537000018 10.025 261.72227270000064 13.037 226.68112329999892 10.225 243.2685267000016 10.186)
Error minima by case: (1.2679 8 0.0761 6 11.0206 1 0.0128 8 0.1527 1 1.7601 6 0.2536 2 0.0337 5 1.0444 2 0.427 2 0.4284 6 0.3334 8 17.57 3 1.8806 6 0.8122 5 0.5905 3 1.2538 2 4.2567 1 9.6667 2 0.1569 5 0.0 1 1.2626 2 1.8747 9 0.7256 2 0.0011 1)
Average genome size in population (length): 58.104
Average program size in population (points): 59.104
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.515
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.282
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2693916
--- Timings ---
Current time: 1529615944067 milliseconds
Total Time:           7.5 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.5 seconds, 33.5%
Fitness Testing:      4.1 seconds, 54.5%
Report:               0.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 62610.182499999966
Test mean error for best: 31.30509
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
-0.3703401058
Correct output: 10.0760954048  | Program output: 
-0.3135076406
Correct output: 106.0206148688 | Program output: 
-0.3135076406
Correct output: 0.7585604003   | Program output: 
-0.3135076406
Correct output: 32.0892717501  | Program output: 
-0.3703401058
Correct output: 38.239902819   | Program output: 
-0.3135076406
Correct output: -28.253581966  | Program output: 
-0.3135076406
Correct output: 22.691883669   | Program output: 
-0.3135076406
Correct output: -64.8098353824 | Program output: 
-26.8098353824
Correct output: -50.5729717288 | Program output: 
-0.3135076406
Correct output: 10.5716307984  | Program output: 
-0.3135076406
Correct output: -5.0640064942  | Program output: 
-0.3703401058
Correct output: -156.5700373509 | Program output: 
-99.5700373509
Correct output: 16.1193686865  | Program output: 
-0.3135076406
Correct output: 50.1878349036  | Program output: 
-0.3135076406
Correct output: -138.4095016371 | Program output: 
-50.4095016371
Correct output: -119.7462217731 | Program output: 
-80.7462217731
Correct output: -95.2566750864 | Program output: 
-5.2566750864
Correct output: 153.6667050749 | Program output: 
-0.3135076406
Correct output: 6.8630846811   | Program output: 
-0.3135076406
Correct output: -5.6640417064  | Program output: 
-4.6640417064
Correct output: 34.7374026319  | Program output: 
-0.3703401058
Correct output: -49.1253212489 | Program output: 
-0.3703401058
Correct output: 17.2744201056  | Program output: 
-0.3703401058
Correct output: 62.9989442076  | Program output: 
-0.3135076406
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction float_add} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_rot} {:instruction tag_integer_139} {:instruction integer_pop} {:instruction float_dup} {:instruction float_mult} {:instruction float_frominteger} {:instruction 13} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_rot} {:instruction float_max} {:instruction integer_add} {:instruction 80.584763007622} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_max} {:instruction float_sin} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_yank} {:instruction float_cos} {:instruction float_dup_items} {:instruction tag_float_766} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_inc} {:instruction print_integer} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap float_add print_float float_add integer_mod integer_min integer_rot tag_integer_139 integer_pop float_dup float_mult float_frominteger 13 float_yankdup integer_add float_sin float_stackdepth float_div float_rot float_max integer_add 80.584763007622 integer_mult integer_shove float_max float_sin integer_shove float_yankdup integer_max float_yank float_cos float_dup_items tag_float_766 float_frominteger float_dec integer_inc print_integer float_cos integer_dec integer_yankdup float_inc integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [23.8976 12 10.3896 10 106.3341 12 1.0721 10 32.4596 12 38.5534 12 27.9401 10 23.0054 12 38.0 3 50.2595 12 10.8851 10 4.6937 11 57.0 4 16.4329 11 50.5013 10 88.0 4 39.0 4 90.0 2 153.9802 11 7.1766 11 1.0 2 35.1077 11 48.755 11 17.6448 8 63.3125 12]
Total: 1262.4012000000002
Mean: 25.248024
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4498.738795999993
Median total errors in population: 1443.0
Error averages by case: (199.14578259999928 11.551 156.28501959999974 11.737 164.00170720000025 6.818 199.3892162999998 12.591 142.16189300000065 6.1 175.70518710000022 10.263 145.8214850999992 6.878 178.85718229999964 11.478 165.2966955999999 6.61 173.0125519000004 7.357 149.04316910000009 12.834 137.02986020000012 12.216 198.86448060000114 7.583 176.44018270000012 12.742 175.06308169999988 11.757 205.61118820000058 7.759 181.57734899999917 7.787 193.5176086999996 6.143 200.36953120000038 7.605 174.35052020000026 11.257 134.3843249000003 5.827 164.98707490000027 6.383 178.39309279999958 13.233 137.24838489999945 6.542 164.8862262000007 6.245)
Error minima by case: (5.7321 8 0.9239 9 5.0206 2 0.075 7 4.9107 1 8.1679 8 2.2536 2 0.2651 8 3.8004 2 5.427 2 0.4284 8 0.064 8 48.57 3 1.4741 9 8.6281 8 0.5905 3 29.5353 2 3.2567 1 10.3333 3 0.1649 7 0.0 1 7.4968 2 1.1414 8 0.3191 2 5.9989 1)
Average genome size in population (length): 49.657
Average program size in population (points): 50.657
Average percent parens in population: 0.027
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9755
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.122
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3939918
--- Timings ---
Current time: 1529615947888 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.2 seconds, 36.9%
Fitness Testing:      5.5 seconds, 47.6%
Report:               1.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 62610.182499999966
Test mean error for best: 31.30509
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
-0.3703401058
Correct output: 10.0760954048  | Program output: 
-0.3135076406
Correct output: 106.0206148688 | Program output: 
-0.3135076406
Correct output: 0.7585604003   | Program output: 
-0.3135076406
Correct output: 32.0892717501  | Program output: 
-0.3703401058
Correct output: 38.239902819   | Program output: 
-0.3135076406
Correct output: -28.253581966  | Program output: 
-0.3135076406
Correct output: 22.691883669   | Program output: 
-0.3135076406
Correct output: -64.8098353824 | Program output: 
-26.8098353824
Correct output: -50.5729717288 | Program output: 
-0.3135076406
Correct output: 10.5716307984  | Program output: 
-0.3135076406
Correct output: -5.0640064942  | Program output: 
-0.3703401058
Correct output: -156.5700373509 | Program output: 
-99.5700373509
Correct output: 16.1193686865  | Program output: 
-0.3135076406
Correct output: 50.1878349036  | Program output: 
-0.3135076406
Correct output: -138.4095016371 | Program output: 
-50.4095016371
Correct output: -119.7462217731 | Program output: 
-80.7462217731
Correct output: -95.2566750864 | Program output: 
-5.2566750864
Correct output: 153.6667050749 | Program output: 
-0.3135076406
Correct output: 6.8630846811   | Program output: 
-0.3135076406
Correct output: -5.6640417064  | Program output: 
-4.6640417064
Correct output: 34.7374026319  | Program output: 
-0.3703401058
Correct output: -49.1253212489 | Program output: 
-0.3703401058
Correct output: 17.2744201056  | Program output: 
-0.3703401058
Correct output: 62.9989442076  | Program output: 
-0.3135076406
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction float_add} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_rot} {:instruction tag_integer_139} {:instruction integer_pop} {:instruction float_dup} {:instruction float_mult} {:instruction float_frominteger} {:instruction 13} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_rot} {:instruction float_max} {:instruction integer_add} {:instruction 80.584763007622} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_max} {:instruction float_sin} {:instruction integer_shove} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_yank} {:instruction float_cos} {:instruction float_dup_items} {:instruction tag_float_766} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_inc} {:instruction print_integer} {:instruction float_cos} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap float_add print_float float_add integer_mod integer_min integer_rot tag_integer_139 integer_pop float_dup float_mult float_frominteger 13 float_yankdup integer_add float_sin float_stackdepth float_div float_rot float_max integer_add 80.584763007622 integer_mult integer_shove float_max float_sin integer_shove float_yankdup integer_max float_yank float_cos float_dup_items tag_float_766 float_frominteger float_dec integer_inc print_integer float_cos integer_dec integer_yankdup float_inc integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [23.8976 12 10.3896 10 106.3341 12 1.0721 10 32.4596 12 38.5534 12 27.9401 10 23.0054 12 38.0 3 50.2595 12 10.8851 10 4.6937 11 57.0 4 16.4329 11 50.5013 10 88.0 4 39.0 4 90.0 2 153.9802 11 7.1766 11 1.0 2 35.1077 11 48.755 11 17.6448 8 63.3125 12]
Total: 1262.4012000000002
Mean: 25.248024
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4966.358457099997
Median total errors in population: 1423.0
Error averages by case: (210.21361319999863 11.475 173.89597939999993 11.734 202.45396399999956 8.459 199.50045619999966 12.294 163.82673210000024 7.151 190.70619469999886 10.489 170.165597299999 8.466 188.53370739999986 11.591 183.10461429999933 7.426 191.1404668000003 8.833 167.49177780000002 12.673 154.41160119999992 12.213 216.04166010000168 8.465 185.5549862000001 12.612 195.3556168000016 11.895 218.6338544000008 8.736 203.45251749999872 8.745 203.70455059999946 7.206 242.07729550000042 9.187 182.2403265000001 11.418 151.39890829999987 6.816 184.48981690000096 7.276 189.3612743999998 13.222 158.03981319999917 7.463 196.70113230000095 8.017)
Error minima by case: (14.2536 9 4.2901 7 9.1997 2 0.2153 8 5.0 1 7.2399 9 12.0 2 8.3257 8 12.1902 2 8.573 2 2.4284 10 0.6666 9 41.57 3 1.7532 10 2.1878 9 38.5905 3 38.0 2 5.2567 1 10.6667 3 2.8631 8 0.0 1 13.2626 2 6.1253 9 2.9083 2 5.9989 1)
Average genome size in population (length): 46.058
Average program size in population (points): 47.058
Average percent parens in population: 0.028
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.43425
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 115
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.087
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5099171
--- Timings ---
Current time: 1529615951364 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.7 seconds, 37.8%
Fitness Testing:      6.8 seconds, 45.2%
Report:               2.4 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 62069.273399999955
Test mean error for best: 31.03464
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 


68.732100971
Correct output: 10.0760954048  | Program output: 


12.3661596849
Correct output: 106.0206148688 | Program output: 


12.3661596849
Correct output: 0.7585604003   | Program output: 


12.3661596849
Correct output: 32.0892717501  | Program output: 


37.0892717501
Correct output: 38.239902819   | Program output: 


12.3661596849
Correct output: -28.253581966  | Program output: 


12.3661596849
Correct output: 22.691883669   | Program output: 


12.3661596849
Correct output: -64.8098353824 | Program output: 


-27.8098353824
Correct output: -50.5729717288 | Program output: 


12.3661596849
Correct output: 10.5716307984  | Program output: 


12.3661596849
Correct output: -5.0640064942  | Program output: 


3.9359935058
Correct output: -156.5700373509 | Program output: 


-100.5700373509
Correct output: 16.1193686865  | Program output: 


12.3661596849
Correct output: 50.1878349036  | Program output: 


12.3661596849
Correct output: -138.4095016371 | Program output: 


-51.4095016371
Correct output: -119.7462217731 | Program output: 


-81.7462217731
Correct output: -95.2566750864 | Program output: 


-6.2566750864
Correct output: 153.6667050749 | Program output: 


12.3661596849
Correct output: 6.8630846811   | Program output: 


12.3661596849
Correct output: -5.6640417064  | Program output: 


-5.6640417064
Correct output: 34.7374026319  | Program output: 


66.7374026319
Correct output: -49.1253212489 | Program output: 


21.8746787511
Correct output: 17.2744201056  | Program output: 


21.2744201056
Correct output: 62.9989442076  | Program output: 


12.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction print_newline} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_mult} {:instruction print_newline} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_mod} {:instruction float_add} {:instruction tagged_171} {:instruction float_shove} {:instruction integer_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_max float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult print_newline integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times integer_mult print_newline integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times float_stackdepth integer_rot 13.366159684860918 float_max float_add float_swap integer_stackdepth float_mult integer_mod float_add tagged_171 float_shove integer_yank float_max float_swap integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 12 2.2901 12 93.6545 12 11.6076 14 5.0 4 25.8737 12 40.6197 11 10.3257 11 37.0 5 62.9391 14 1.7945 12 9.0 14 56.0 5 3.7532 11 37.8217 14 87.0 6 38.0 5 89.0 5 141.3005 11 5.5031 12 0.0 3 32.0 5 71.0 15 4.0 5 50.6328 14]
Total: 1253.1162
Mean: 25.062325
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5281.830249499993
Median total errors in population: 1350.6041000000002
Error averages by case: (223.4174187999983 12.043 175.27462700000007 11.947 247.04900029999936 12.345 175.6349201999996 11.991 183.30728369999994 9.784 194.78985859999895 11.593 188.85782379999884 12.182 184.82558859999997 11.853 192.49088919999897 9.659 208.14723510000002 12.43 173.6712046999999 12.312 168.53109439999943 12.706 233.72627080000217 10.39 180.41803810000016 12.757 203.5510109000025 12.16 223.7059705000009 11.095 219.18144739999838 10.84 202.6591772999993 9.715 284.6105981000001 13.108 174.35406390000009 11.718 165.58826069999947 8.866 204.69430090000154 9.327 198.33597469999876 13.679 175.26425039999867 9.651 213.32794140000087 12.265)
Error minima by case: (0.7321 9 2.0761 8 19.0 2 0.0414 9 5.0 1 8.2399 9 12.0 2 1.6919 8 14.8098 2 0.573 2 1.7945 10 0.6666 10 36.43 3 1.7532 10 12.8122 9 5.5905 3 38.0 2 3.7433 1 8.6667 3 1.1369 9 0.0 1 13.7374 2 0.8747 10 3.7256 2 6.025 1)
Average genome size in population (length): 56.776
Average program size in population (points): 57.776
Average percent parens in population: 0.022
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.910625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 161
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.122
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6534095
--- Timings ---
Current time: 1529615954936 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.2 seconds, 38.4%
Fitness Testing:      8.2 seconds, 44.0%
Report:               3.2 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 60269.27339999995
Test mean error for best: 30.13464
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
68.732100971 
Correct output: 10.0760954048  | Program output: 
12.3661596849
Correct output: 106.0206148688 | Program output: 
12.3661596849
Correct output: 0.7585604003   | Program output: 
12.3661596849
Correct output: 32.0892717501  | Program output: 
37.0892717501
Correct output: 38.239902819   | Program output: 
12.3661596849
Correct output: -28.253581966  | Program output: 
12.3661596849
Correct output: 22.691883669   | Program output: 
12.3661596849
Correct output: -64.8098353824 | Program output: 
-27.8098353824
Correct output: -50.5729717288 | Program output: 
12.3661596849
Correct output: 10.5716307984  | Program output: 
12.3661596849
Correct output: -5.0640064942  | Program output: 
3.9359935058 
Correct output: -156.5700373509 | Program output: 
-100.5700373509
Correct output: 16.1193686865  | Program output: 
12.3661596849
Correct output: 50.1878349036  | Program output: 
12.3661596849
Correct output: -138.4095016371 | Program output: 
-51.4095016371
Correct output: -119.7462217731 | Program output: 
-81.7462217731
Correct output: -95.2566750864 | Program output: 
-6.2566750864
Correct output: 153.6667050749 | Program output: 
12.3661596849
Correct output: 6.8630846811   | Program output: 
12.3661596849
Correct output: -5.6640417064  | Program output: 
-5.6640417064
Correct output: 34.7374026319  | Program output: 
66.7374026319
Correct output: -49.1253212489 | Program output: 
21.8746787511
Correct output: 17.2744201056  | Program output: 
21.2744201056
Correct output: 62.9989442076  | Program output: 
12.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction float_dec} {:instruction in1} {:instruction integer_fromfloat} {:instruction -94} {:instruction integer_add} {:instruction float_yank} {:instruction float_min} {:instruction integer_swap} {:instruction tag_integer_874} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction print_integer} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction tagged_52} {:instruction float_dup_items} {:instruction in2} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_mod} {:instruction float_add} {:instruction tagged_171} {:instruction float_shove} {:instruction integer_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_mod float_dec in1 integer_fromfloat -94 integer_add float_yank float_min integer_swap tag_integer_874 float_pop integer_dup integer_fromfloat print_integer integer_dup integer_dup_times tagged_52 float_dup_items in2 integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times float_stackdepth integer_rot 13.366159684860918 float_max float_add float_inc integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times float_stackdepth integer_rot 13.366159684860918 float_max float_add float_swap integer_stackdepth float_mult integer_mod float_add tagged_171 float_shove integer_yank float_max float_swap integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 11 2.2901 10 93.6545 10 11.6076 12 5.0 2 25.8737 11 40.6197 11 10.3257 9 37.0 3 62.9391 13 1.7945 10 9.0 12 56.0 3 3.7532 10 37.8217 13 87.0 4 38.0 3 89.0 3 141.3005 9 5.5031 10 0.0 1 32.0 3 71.0 13 4.0 3 50.6328 12]
Total: 1210.1162000000002
Mean: 24.202324
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4337.565331499995
Median total errors in population: 1327.6867
Error averages by case: (204.03521549999937 12.448 130.56379539999872 11.301 204.50851990000177 12.119 132.46507919999982 12.514 141.06499290000022 6.724 154.22478970000103 12.255 143.8175449999992 12.039 143.32416289999853 12.623 162.5852129999999 6.878 165.06669739999873 11.367 129.7371179999994 12.522 138.38178180000017 13.593 185.29426850000044 7.149 138.26906640000013 13.145 162.7414656000014 12.198 203.60357260000012 7.919 169.3742657999997 7.259 200.1317138999999 6.78 244.9414339999984 12.591 131.96721550000117 12.548 131.93601410000008 5.28 162.78842059999997 7.177 186.17125009999978 14.509 137.67264149999966 7.067 170.92809219999864 11.966)
Error minima by case: (0.7321 10 1.252 7 6.6338 3 0.0312 9 4.0 1 8.7601 9 0.3662 3 1.6919 8 11.1902 2 3.1918 3 0.7565 10 0.6666 10 36.43 2 1.7532 10 3.1878 8 5.5905 3 33.6911 2 3.7433 2 9.6667 3 1.1369 9 0.0 0 31.0 2 1.7441 11 3.0 2 6.025 2)
Average genome size in population (length): 84.537
Average program size in population (points): 85.537
Average percent parens in population: 0.014
Minimum age in population: 5.25
Maximum age in population: 9.1875
Average age in population: 7.4029375
Median age in population: 7.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.238
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8668921
--- Timings ---
Current time: 1529615959056 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.5 seconds, 37.5%
Fitness Testing:     10.3 seconds, 45.5%
Report:               3.8 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 52399.599200000004
Test mean error for best: 26.19980
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 


68.732100971
Correct output: 10.0760954048  | Program output: 


12.3661596849
Correct output: 106.0206148688 | Program output: 


85.0206148688
Correct output: 0.7585604003   | Program output: 


12.3661596849
Correct output: 32.0892717501  | Program output: 


37.0892717501
Correct output: 38.239902819   | Program output: 


12.3661596849
Correct output: -28.253581966  | Program output: 


12.3661596849
Correct output: 22.691883669   | Program output: 


12.3661596849
Correct output: -64.8098353824 | Program output: 


-27.8098353824
Correct output: -50.5729717288 | Program output: 


12.3661596849
Correct output: 10.5716307984  | Program output: 


12.3661596849
Correct output: -5.0640064942  | Program output: 


3.9359935058
Correct output: -156.5700373509 | Program output: 


-100.5700373509
Correct output: 16.1193686865  | Program output: 


12.3661596849
Correct output: 50.1878349036  | Program output: 


12.3661596849
Correct output: -138.4095016371 | Program output: 


-51.4095016371
Correct output: -119.7462217731 | Program output: 


-81.7462217731
Correct output: -95.2566750864 | Program output: 


-6.2566750864
Correct output: 153.6667050749 | Program output: 


80.6667050749
Correct output: 6.8630846811   | Program output: 


12.3661596849
Correct output: -5.6640417064  | Program output: 


-5.6640417064
Correct output: 34.7374026319  | Program output: 


66.7374026319
Correct output: -49.1253212489 | Program output: 


21.8746787511
Correct output: 17.2744201056  | Program output: 


21.2744201056
Correct output: 62.9989442076  | Program output: 


12.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_mult} {:instruction print_newline} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_mod} {:instruction in1} {:instruction tagged_171} {:instruction float_shove} {:instruction integer_yank} {:instruction float_max} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction tag_float_596} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_max float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times integer_mult print_newline integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times float_stackdepth integer_rot 13.366159684860918 float_max float_add float_swap integer_stackdepth float_mult integer_mod in1 tagged_171 float_shove integer_yank float_max float_swap integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap float_sub integer_fromfloat tag_float_596 in1 tagged_971 float_dec print_newline float_rot integer_rot in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 12 2.2901 12 21.0 5 11.6076 14 5.0 4 25.8737 12 40.6197 11 10.3257 11 37.0 5 62.9391 14 1.7945 12 9.0 14 56.0 5 3.7532 11 37.8217 14 87.0 6 38.0 5 89.0 5 73.0 5 5.5031 12 0.0 3 32.0 5 71.0 15 4.0 5 50.6328 14]
Total: 1099.1612000000002
Mean: 21.983225
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4165.505501499996
Median total errors in population: 1286.6867
Error averages by case: (189.45323009999927 12.204 125.26640049999872 11.394 198.17679900000127 11.72 130.00632000000047 12.47 135.59629210000043 6.916 147.18911100000054 12.072 140.99172150000007 11.192 136.09028209999911 12.184 155.58310689999996 6.057 162.078795099999 11.431 124.29014459999998 12.176 130.2030081000005 12.972 177.61731120000024 6.371 131.51808780000025 12.555 155.96809460000102 12.106 198.1772239000001 7.031 161.2824562999998 6.464 195.57065609999992 5.836 239.75991309999947 11.819 127.66273560000094 12.102 124.08946990000005 4.496 154.6129339999994 7.296 177.52585350000012 13.79 130.9575941999995 6.902 164.3819602999994 11.9)
Error minima by case: (0.2679 9 1.252 7 6.6338 3 0.0149 8 4.0 1 8.5076 9 0.3662 2 1.6919 8 14.8098 2 0.573 2 0.7565 9 2.1743 9 35.43 2 0.7532 9 2.1878 8 4.5905 3 32.6911 2 2.7433 2 7.7189 3 2.0445 8 0.0 0 22.3712 2 0.8747 9 3.0 2 6.025 2)
Average genome size in population (length): 89.515
Average program size in population (points): 90.515
Average percent parens in population: 0.012
Minimum age in population: 6.5
Maximum age in population: 10.90625
Average age in population: 8.91359375
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.275
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 10939232
--- Timings ---
Current time: 1529615963400 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.0 seconds, 36.9%
Fitness Testing:     12.5 seconds, 46.2%
Report:               4.5 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 50375.61419999998
Test mean error for best: 25.18781
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
68.732100971 
Correct output: 10.0760954048  | Program output: 
13.3661596849
Correct output: 106.0206148688 | Program output: 
86.0206148688
Correct output: 0.7585604003   | Program output: 
13.3661596849
Correct output: 32.0892717501  | Program output: 
37.0892717501
Correct output: 38.239902819   | Program output: 
13.3661596849
Correct output: -28.253581966  | Program output: 
13.3661596849
Correct output: 22.691883669   | Program output: 
13.3661596849
Correct output: -64.8098353824 | Program output: 
-27.8098353824
Correct output: -50.5729717288 | Program output: 
13.3661596849
Correct output: 10.5716307984  | Program output: 
13.3661596849
Correct output: -5.0640064942  | Program output: 
3.9359935058 
Correct output: -156.5700373509 | Program output: 
-100.5700373509
Correct output: 16.1193686865  | Program output: 
13.3661596849
Correct output: 50.1878349036  | Program output: 
13.3661596849
Correct output: -138.4095016371 | Program output: 
-51.4095016371
Correct output: -119.7462217731 | Program output: 
-81.7462217731
Correct output: -95.2566750864 | Program output: 
-6.2566750864
Correct output: 153.6667050749 | Program output: 
81.6667050749
Correct output: 6.8630846811   | Program output: 
13.3661596849
Correct output: -5.6640417064  | Program output: 
-5.6640417064
Correct output: 34.7374026319  | Program output: 
66.7374026319
Correct output: -49.1253212489 | Program output: 
21.8746787511
Correct output: 17.2744201056  | Program output: 
21.2744201056
Correct output: 62.9989442076  | Program output: 
13.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 11 3.2901 10 20.0 2 12.6076 12 5.0 2 24.8737 11 41.6197 11 9.3257 10 37.0 3 63.9391 13 2.7945 10 9.0 12 56.0 3 2.7532 10 36.8217 13 87.0 4 38.0 3 89.0 3 72.0 3 6.5031 10 0.0 1 32.0 3 71.0 13 4.0 3 49.6328 13]
Total: 1056.1612
Mean: 21.123224
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3424.483430099997
Median total errors in population: 1258.006
Error averages by case: (165.87172419999956 11.936 92.34730029999928 11.739 162.0651779000006 11.338 104.60788730000105 12.843 105.82457860000024 5.962 113.21704639999906 11.954 112.64011659999953 10.617 102.46332150000018 11.702 130.11970030000003 5.239 135.93969220000096 12.059 90.68920400000073 11.974 103.65580270000036 12.879 149.9573205000001 5.515 97.7741059000005 11.784 121.65302110000043 12.618 175.28593989999996 6.199 133.22353909999993 5.556 175.12473539999993 5.04 205.1224750000012 10.752 97.33768480000077 11.767 96.85822610000004 3.586 125.77252909999946 6.534 153.8828273000003 13.721 102.00319589999965 6.143 129.42527800000155 12.164)
Error minima by case: (0.7321 7 0.3812 7 5.0 2 0.0149 8 3.0 1 9.5076 9 11.6979 2 1.0404 8 2.5986 2 10.6383 2 0.7565 8 0.3334 8 36.43 2 0.9163 8 0.8122 8 5.5905 3 34.6911 2 3.2567 1 9.6667 3 4.465 7 0.0 0 12.2626 2 12.6414 9 2.0 2 5.3672 1)
Average genome size in population (length): 94.862
Average program size in population (points): 95.862
Average percent parens in population: 0.011
Minimum age in population: 8.0
Maximum age in population: 12.125
Average age in population: 10.31803125
Median age in population: 10.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.279
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.298
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 13341585
--- Timings ---
Current time: 1529615967709 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        11.4 seconds, 36.2%
Fitness Testing:     14.9 seconds, 47.3%
Report:               5.1 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 50375.61419999998
Test mean error for best: 25.18781
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
68.732100971 
Correct output: 10.0760954048  | Program output: 
13.3661596849
Correct output: 106.0206148688 | Program output: 
86.0206148688
Correct output: 0.7585604003   | Program output: 
13.3661596849
Correct output: 32.0892717501  | Program output: 
37.0892717501
Correct output: 38.239902819   | Program output: 
13.3661596849
Correct output: -28.253581966  | Program output: 
13.3661596849
Correct output: 22.691883669   | Program output: 
13.3661596849
Correct output: -64.8098353824 | Program output: 
-27.8098353824
Correct output: -50.5729717288 | Program output: 
13.3661596849
Correct output: 10.5716307984  | Program output: 
13.3661596849
Correct output: -5.0640064942  | Program output: 
3.9359935058 
Correct output: -156.5700373509 | Program output: 
-100.5700373509
Correct output: 16.1193686865  | Program output: 
13.3661596849
Correct output: 50.1878349036  | Program output: 
13.3661596849
Correct output: -138.4095016371 | Program output: 
-51.4095016371
Correct output: -119.7462217731 | Program output: 
-81.7462217731
Correct output: -95.2566750864 | Program output: 
-6.2566750864
Correct output: 153.6667050749 | Program output: 
81.6667050749
Correct output: 6.8630846811   | Program output: 
13.3661596849
Correct output: -5.6640417064  | Program output: 
-5.6640417064
Correct output: 34.7374026319  | Program output: 
66.7374026319
Correct output: -49.1253212489 | Program output: 
21.8746787511
Correct output: 17.2744201056  | Program output: 
21.2744201056
Correct output: 62.9989442076  | Program output: 
13.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_965} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot integer_dup_times integer_fromfloat tag_float_538 in1 tagged_965 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 11 3.2901 10 20.0 2 12.6076 12 5.0 2 24.8737 11 41.6197 11 9.3257 10 37.0 3 63.9391 13 2.7945 10 9.0 12 56.0 3 2.7532 10 36.8217 13 87.0 4 38.0 3 89.0 3 72.0 3 6.5031 10 0.0 1 32.0 3 71.0 13 4.0 3 49.6328 13]
Total: 1056.1612
Mean: 21.123224
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3607.867438000005
Median total errors in population: 1235.1162
Error averages by case: (182.19808499999988 11.665 100.64262849999915 11.49 164.32716070000086 10.454 115.64397770000116 12.733 109.95540820000008 4.325 119.83166539999864 11.519 124.53021729999938 10.49 109.90457390000044 11.082 138.38728540000002 4.721 146.92253540000092 12.154 98.91447660000111 11.612 111.19554780000009 12.663 156.114044 4.863 105.49689160000072 11.434 128.50193250000015 12.844 183.10892749999996 5.67 139.84876269999998 4.91 184.30962360000004 4.633 205.08357910000146 9.745 107.26026290000092 11.297 105.6003669 2.93 132.8228406999999 5.121 164.4343910999999 13.607 107.98933529999992 5.09 135.9109182000016 11.88)
Error minima by case: (1.7321 9 0.9094 8 5.0 2 0.0149 8 3.0 1 8.5076 8 0.6189 2 0.0404 8 17.9636 2 20.116 2 0.4829 9 0.3334 9 37.43 2 0.0564 8 0.8122 8 6.5905 3 34.6911 2 4.7433 1 6.3333 3 2.3036 7 0.0 0 20.3712 2 21.8747 10 2.0 2 5.3672 1)
Average genome size in population (length): 95.67
Average program size in population (points): 96.67
Average percent parens in population: 0.010
Minimum age in population: 9.6875
Maximum age in population: 13.84375
Average age in population: 11.804171875
Median age in population: 11.8984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.249
Error (vector) diversity:			 0.27
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 15775469
--- Timings ---
Current time: 1529615972069 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.8 seconds, 35.8%
Fitness Testing:     17.2 seconds, 48.0%
Report:               5.7 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 50451.46239999998
Test mean error for best: 25.22573
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 

68.732100971
Correct output: 10.0760954048  | Program output: 

13.3661596849
Correct output: 106.0206148688 | Program output: 

86.0206148688
Correct output: 0.7585604003   | Program output: 

13.3661596849
Correct output: 32.0892717501  | Program output: 

37.0892717501
Correct output: 38.239902819   | Program output: 

13.3661596849
Correct output: -28.253581966  | Program output: 

-41.253581966
Correct output: 22.691883669   | Program output: 

13.3661596849
Correct output: -64.8098353824 | Program output: 

-27.8098353824
Correct output: -50.5729717288 | Program output: 

13.3661596849
Correct output: 10.5716307984  | Program output: 

13.3661596849
Correct output: -5.0640064942  | Program output: 

3.9359935058
Correct output: -156.5700373509 | Program output: 

-100.5700373509
Correct output: 16.1193686865  | Program output: 

13.3661596849
Correct output: 50.1878349036  | Program output: 

13.3661596849
Correct output: -138.4095016371 | Program output: 

-51.4095016371
Correct output: -119.7462217731 | Program output: 

-81.7462217731
Correct output: -95.2566750864 | Program output: 

-6.2566750864
Correct output: 153.6667050749 | Program output: 

81.6667050749
Correct output: 6.8630846811   | Program output: 

13.3661596849
Correct output: -5.6640417064  | Program output: 

-5.6640417064
Correct output: 34.7374026319  | Program output: 

66.7374026319
Correct output: -49.1253212489 | Program output: 

21.8746787511
Correct output: 17.2744201056  | Program output: 

21.2744201056
Correct output: 62.9989442076  | Program output: 

13.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_mult} {:instruction print_newline} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction 0} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_max float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times integer_mult print_newline integer_swap float_div float_yankdup 0 float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth integer_max float_dup_times float_stackdepth integer_rot 13.366159684860918 float_max float_add float_swap integer_stackdepth float_mult integer_mod float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot integer_dup_times integer_fromfloat tag_float_538 in1 integer_dup_items float_pop integer_dup_items integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 12 3.2901 11 20.0 3 12.6076 13 5.0 3 24.8737 12 13.0 4 9.3257 11 37.0 4 63.9391 14 2.7945 11 9.0 13 56.0 4 2.7532 11 36.8217 14 87.0 5 38.0 4 89.0 4 72.0 4 6.5031 11 0.0 2 32.0 4 71.0 14 4.0 4 49.6328 14]
Total: 1044.5415
Mean: 20.89083
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3897.986294600006
Median total errors in population: 1210.1162000000002
Error averages by case: (190.97989719999978 11.606 117.29896829999909 11.305 170.7681682000006 9.257 132.37237380000124 12.701 119.82756430000019 4.544 137.95433859999855 11.469 138.86516529999918 10.263 127.99273960000055 11.053 145.29851190000002 4.775 161.6413137000002 11.928 115.27598640000127 11.609 121.0182316 12.667 163.46939020000002 4.918 122.9435552000012 11.431 145.60218780000037 12.87 189.87174009999995 5.734 147.20432559999998 4.968 190.75069140000002 4.71 208.68121050000144 8.701 124.15075410000095 11.246 112.42129660000003 2.984 143.2058711 5.311 171.14202329999983 13.57 117.45775779999984 5.324 155.3072320000009 11.541)
Error minima by case: (0.7321 9 0.2901 8 5.0 2 0.1537 8 3.0 1 0.1673 8 0.3662 2 2.3081 8 21.2453 2 18.1941 2 0.2055 8 3.1743 9 36.43 2 0.0564 8 0.8122 8 5.5905 3 33.6911 2 3.7433 1 8.6667 3 2.5592 7 0.0 0 3.3352 2 12.6414 10 2.0 2 5.3672 1)
Average genome size in population (length): 96.385
Average program size in population (points): 97.385
Average percent parens in population: 0.010
Minimum age in population: 10.96875
Maximum age in population: 15.4453125
Average age in population: 13.44721875
Median age in population: 13.48046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.263
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 18228075
--- Timings ---
Current time: 1529615976687 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.2 seconds, 35.3%
Fitness Testing:     19.6 seconds, 48.9%
Report:               6.2 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 49283.20929999998
Test mean error for best: 24.64160
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
68.732100971 
Correct output: 10.0760954048  | Program output: 
13.3661596849
Correct output: 106.0206148688 | Program output: 
86.0206148688
Correct output: 0.7585604003   | Program output: 
13.3661596849
Correct output: 32.0892717501  | Program output: 
37.0892717501
Correct output: 38.239902819   | Program output: 
13.3661596849
Correct output: -28.253581966  | Program output: 
-41.253581966
Correct output: 22.691883669   | Program output: 
13.3661596849
Correct output: -64.8098353824 | Program output: 
-27.8098353824
Correct output: -50.5729717288 | Program output: 
13.3661596849
Correct output: 10.5716307984  | Program output: 
13.3661596849
Correct output: -5.0640064942  | Program output: 
3.9359935058 
Correct output: -156.5700373509 | Program output: 
-100.5700373509
Correct output: 16.1193686865  | Program output: 
13.3661596849
Correct output: 50.1878349036  | Program output: 
13.3661596849
Correct output: -138.4095016371 | Program output: 
-51.4095016371
Correct output: -119.7462217731 | Program output: 
-81.7462217731
Correct output: -95.2566750864 | Program output: 
-6.2566750864
Correct output: 153.6667050749 | Program output: 
81.6667050749
Correct output: 6.8630846811   | Program output: 
13.3661596849
Correct output: -5.6640417064  | Program output: 
-5.6640417064
Correct output: 34.7374026319  | Program output: 
66.7374026319
Correct output: -49.1253212489 | Program output: 
21.8746787511
Correct output: 17.2744201056  | Program output: 
21.2744201056
Correct output: 62.9989442076  | Program output: 
13.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_add} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_swap} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_dup integer_min integer_max float_dup_times float_stackdepth integer_rot float_add integer_mod float_stackdepth float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_stackdepth integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_add float_rot integer_dup_times integer_fromfloat tag_float_538 in1 float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_swap float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 11 3.2901 10 20.0 2 12.6076 12 5.0 2 24.8737 11 13.0 3 9.3257 10 37.0 3 63.9391 13 2.7945 10 9.0 12 56.0 3 2.7532 10 36.8217 13 87.0 4 38.0 3 89.0 3 72.0 3 6.5031 10 0.0 1 32.0 3 71.0 13 4.0 3 49.6328 13]
Total: 1019.5415
Mean: 20.39083
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3343.3391333999957
Median total errors in population: 1099.1612000000002
Error averages by case: (175.11497249999977 11.818 94.85361319999912 11.498 121.08406420000037 6.608 109.30591840000112 13.09 99.20108210000014 4.562 116.35054709999875 11.617 117.19514109999916 10.342 105.74124360000049 11.221 129.4530545 4.956 139.82259570000102 12.067 92.70172290000116 11.854 99.46460650000004 12.999 147.5800335 5.06 100.52539780000082 11.607 124.36261100000033 13.143 174.94397400000003 5.914 131.09576039999996 5.112 175.3021051 4.91 161.0230016000002 6.633 101.10941760000101 11.516 95.42459560000002 3.125 124.86082269999989 5.375 153.67867619999993 13.922 96.3517679999999 5.4 130.86640810000168 11.577)
Error minima by case: (23.8651 9 0.9015 7 3.0206 2 0.0536 8 3.9107 1 6.9523 8 0.3662 2 2.3081 8 20.2453 2 21.116 2 0.7945 9 4.3506 10 55.0 2 0.2468 8 3.6841 9 48.4095 3 33.6911 2 3.2567 1 3.6667 2 1.1692 8 0.0 0 22.3712 2 22.8747 11 2.7256 2 3.9989 1)
Average genome size in population (length): 96.136
Average program size in population (points): 97.136
Average percent parens in population: 0.010
Minimum age in population: 11.96875
Maximum age in population: 16.828125
Average age in population: 15.0384609375
Median age in population: 15.05859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.221
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 20665904
--- Timings ---
Current time: 1529615981272 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        15.6 seconds, 34.7%
Fitness Testing:     22.1 seconds, 49.2%
Report:               7.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 49443.14989999999
Test mean error for best: 24.72157
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
68.732100971 
Correct output: 10.0760954048  | Program output: 
14.3661596849
Correct output: 106.0206148688 | Program output: 
87.0206148688
Correct output: 0.7585604003   | Program output: 
14.3661596849
Correct output: 32.0892717501  | Program output: 
37.0892717501
Correct output: 38.239902819   | Program output: 
14.3661596849
Correct output: -28.253581966  | Program output: 
-41.253581966
Correct output: 22.691883669   | Program output: 
14.3661596849
Correct output: -64.8098353824 | Program output: 
-27.8098353824
Correct output: -50.5729717288 | Program output: 
14.3661596849
Correct output: 10.5716307984  | Program output: 
14.3661596849
Correct output: -5.0640064942  | Program output: 
3.9359935058 
Correct output: -156.5700373509 | Program output: 
-100.5700373509
Correct output: 16.1193686865  | Program output: 
14.3661596849
Correct output: 50.1878349036  | Program output: 
14.3661596849
Correct output: -138.4095016371 | Program output: 
-51.4095016371
Correct output: -119.7462217731 | Program output: 
-81.7462217731
Correct output: -95.2566750864 | Program output: 
-6.2566750864
Correct output: 153.6667050749 | Program output: 
82.6667050749
Correct output: 6.8630846811   | Program output: 
14.3661596849
Correct output: -5.6640417064  | Program output: 
-5.6640417064
Correct output: 34.7374026319  | Program output: 
66.7374026319
Correct output: -49.1253212489 | Program output: 
21.8746787511
Correct output: 17.2744201056  | Program output: 
21.2744201056
Correct output: 62.9989442076  | Program output: 
14.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction in2} {:instruction float_max} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items in2 float_max integer_dup float_pop float_min 48 integer_rot float_min integer_fromfloat integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 float_yankdup integer_div integer_dup_times print_float)
Errors: [93.0 11 4.2901 10 19.0 3 13.6076 12 5.0 2 23.8737 11 13.0 3 8.3257 10 37.0 3 64.9391 13 3.7945 10 9.0 12 56.0 3 1.7532 10 35.8217 13 87.0 4 38.0 3 89.0 3 71.0 3 7.5031 10 0.0 1 32.0 3 71.0 13 4.0 3 48.6328 13]
Total: 1018.5415
Mean: 20.37083
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3328.7036643999886
Median total errors in population: 1073.1612
Error averages by case: (178.4455071 11.599 94.02045019999908 11.162 112.91561470000006 4.488 108.22151800000157 12.809 100.02689540000004 3.485 114.61171889999812 11.366 120.42743109999904 10.159 103.24448770000069 10.775 129.5099728 4.442 141.40310520000088 12.227 92.55059130000177 11.351 102.70358300000001 12.568 147.2075681 4.548 97.86489960000162 11.105 123.58900880000023 13.178 174.79177700000002 5.408 130.80197049999998 4.61 176.28666170000002 4.394 158.58686430000006 4.914 99.72253600000103 11.024 96.30821619999998 2.623 124.25580439999997 4.379 158.8324329 13.537 98.92915709999995 4.401 131.09189240000254 11.802)
Error minima by case: (19.0075 9 0.9015 7 5.6338 2 0.0617 8 4.0 1 9.5076 9 0.3662 2 3.0404 8 7.1902 2 28.6338 2 0.7945 9 4.064 9 46.57 2 0.7532 9 4.2768 8 33.5905 3 34.6911 2 10.2016 1 8.6667 2 1.1692 9 0.0 0 22.3712 2 23.8747 11 3.0 2 8.5343 1)
Average genome size in population (length): 92.926
Average program size in population (points): 93.926
Average percent parens in population: 0.011
Minimum age in population: 14.203125
Maximum age in population: 18.41796875
Average age in population: 16.4928974609375
Median age in population: 16.5234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.16
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 23009291
--- Timings ---
Current time: 1529615985686 milliseconds
Total Time:          49.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.0 seconds, 34.4%
Fitness Testing:     24.4 seconds, 49.4%
Report:               7.9 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 48999.14989999998
Test mean error for best: 24.49957
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
67.732100971 
Correct output: 10.0760954048  | Program output: 
14.3661596849
Correct output: 106.0206148688 | Program output: 
87.0206148688
Correct output: 0.7585604003   | Program output: 
14.3661596849
Correct output: 32.0892717501  | Program output: 
36.0892717501
Correct output: 38.239902819   | Program output: 
14.3661596849
Correct output: -28.253581966  | Program output: 
-43.253581966
Correct output: 22.691883669   | Program output: 
14.3661596849
Correct output: -64.8098353824 | Program output: 
-28.8098353824
Correct output: -50.5729717288 | Program output: 
14.3661596849
Correct output: 10.5716307984  | Program output: 
14.3661596849
Correct output: -5.0640064942  | Program output: 
2.9359935058 
Correct output: -156.5700373509 | Program output: 
-101.5700373509
Correct output: 16.1193686865  | Program output: 
14.3661596849
Correct output: 50.1878349036  | Program output: 
14.3661596849
Correct output: -138.4095016371 | Program output: 
-52.4095016371
Correct output: -119.7462217731 | Program output: 
-82.7462217731
Correct output: -95.2566750864 | Program output: 
-7.2566750864
Correct output: 153.6667050749 | Program output: 
82.6667050749
Correct output: 6.8630846811   | Program output: 
14.3661596849
Correct output: -5.6640417064  | Program output: 
-6.6640417064
Correct output: 34.7374026319  | Program output: 
65.7374026319
Correct output: -49.1253212489 | Program output: 
20.8746787511
Correct output: 17.2744201056  | Program output: 
20.2744201056
Correct output: 62.9989442076  | Program output: 
14.3661596849
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction float_dup} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction print_newline} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_max float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div integer_dup_items tagged_483 tagged_602 float_dup integer_min integer_max float_dup_times integer_mult integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec float_shove integer_dup_times tagged_971 float_dec print_newline float_rot integer_rot float_dup_items -50 integer_pop in2 50 integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [92.0 11 4.2901 10 19.0 3 13.6076 12 4.0 2 23.8737 11 15.0 3 8.3257 10 36.0 3 64.9391 13 3.7945 10 8.0 12 55.0 3 1.7532 10 35.8217 13 86.0 4 37.0 4 88.0 3 71.0 3 7.5031 10 1.0 2 31.0 3 70.0 13 3.0 3 48.6328 13]
Total: 1012.5415
Mean: 20.25083
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3864.948122699989
Median total errors in population: 1056.1612
Error averages by case: (203.8545126 11.447 110.75296979999902 10.912 134.89222650000008 4.295 124.9236924000015 12.524 127.9564326 3.522 130.2869893999982 11.29 132.31831799999918 9.576 119.3975487000007 10.647 157.24662670000004 4.516 158.05890340000036 12.168 109.25105350000159 11.052 128.95019710000003 12.34 174.4773788 4.625 114.1867114000016 10.9 138.92227930000027 13.001 200.91390049999998 5.473 158.6002954 4.705 201.265244 4.473 178.69590240000005 4.848 116.5859422000011 10.758 124.76608609999997 2.724 151.65129860000005 4.387 184.25649010000004 13.32 126.162598 4.406 146.78252520000137 11.883)
Error minima by case: (0.7321 10 0.9015 9 5.6338 2 0.0414 9 3.0 1 3.8586 9 0.3662 2 3.0404 8 20.2453 2 21.116 2 0.7945 8 4.3506 7 36.43 2 0.7532 9 4.2768 9 5.5905 3 23.8721 2 0.6174 1 7.0 2 1.1692 9 0.0 0 21.3712 2 22.8747 10 2.0 2 6.9989 1)
Average genome size in population (length): 94.606
Average program size in population (points): 95.606
Average percent parens in population: 0.011
Minimum age in population: 15.40234375
Maximum age in population: 19.95361328125
Average age in population: 18.02538720703125
Median age in population: 18.054931640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.152
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 25391923
--- Timings ---
Current time: 1529615990254 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.4 seconds, 34.2%
Fitness Testing:     26.8 seconds, 49.8%
Report:               8.5 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 48926.86329999998
Test mean error for best: 24.46343
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 68.732100971  
Correct output: 10.0760954048  | Program output: 13.3661596849 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 37.0892717501 
Correct output: 38.239902819   | Program output: 13.3661596849 
Correct output: -28.253581966  | Program output: -41.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -27.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 13.3661596849 
Correct output: -5.0640064942  | Program output: 3.9359935058  
Correct output: -156.5700373509 | Program output: -100.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 13.3661596849 
Correct output: -138.4095016371 | Program output: -51.4095016371
Correct output: -119.7462217731 | Program output: -81.7462217731
Correct output: -95.2566750864 | Program output: -6.2566750864 
Correct output: 153.6667050749 | Program output: 81.6667050749 
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -5.6640417064 
Correct output: 34.7374026319  | Program output: 66.7374026319 
Correct output: -49.1253212489 | Program output: 21.8746787511 
Correct output: 17.2744201056  | Program output: 21.2744201056 
Correct output: 62.9989442076  | Program output: 13.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_min} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_min} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat tagged_392 float_min integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_pop float_rot integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot integer_dup_times integer_fromfloat tag_float_538 in1 integer_dup_items float_pop integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec integer_min float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [93.0 11 3.2901 9 20.0 2 12.6076 11 5.0 1 24.8737 10 13.0 2 9.3257 9 37.0 2 63.9391 13 2.7945 9 9.0 12 56.0 2 2.7532 9 36.8217 12 87.0 3 38.0 2 89.0 2 72.0 3 6.5031 9 0.0 0 32.0 2 71.0 13 4.0 2 49.6328 12]
Total: 1000.5415
Mean: 20.01083
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4340.40664109999
Median total errors in population: 1056.1612
Error averages by case: (220.9078817 11.468 132.96021609999912 10.969 148.86838860000006 4.627 148.29108550000007 12.477 146.9010486 3.686 152.24996949999823 11.232 146.18047389999995 7.716 142.1013827999997 10.631 174.01448690000004 4.686 178.60131809999945 12.096 131.20715100000157 11.12 148.6042082 12.344 192.1382087 4.838 137.11952780000175 10.928 160.3773119000003 12.891 217.09011790000002 5.646 175.50864449999997 4.946 218.13371389999998 4.642 191.6672346000001 5.1 139.50521250000102 10.757 143.61277049999998 2.96 169.7089667 4.534 202.53063060000002 13.328 145.86204479999998 4.556 166.37664580000083 11.71)
Error minima by case: (23.8651 9 0.9015 7 5.6338 2 0.2153 9 3.0 1 9.5076 9 0.3662 2 3.0404 8 20.2453 2 16.2677 2 1.7945 9 0.6666 9 54.0 2 1.7532 9 4.2768 9 52.3544 3 33.6911 2 9.2016 1 7.6667 3 1.1692 9 0.0 0 6.6753 2 35.9298 10 2.0 2 8.5343 1)
Average genome size in population (length): 105.921
Average program size in population (points): 106.921
Average percent parens in population: 0.010
Minimum age in population: 16.591796875
Maximum age in population: 21.474609375
Average age in population: 19.572337890625
Median age in population: 19.6103515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.171
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 28063046
--- Timings ---
Current time: 1529615994879 milliseconds
Total Time:          58.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.8 seconds, 33.8%
Fitness Testing:     29.3 seconds, 50.1%
Report:               9.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 48164.20929999999
Test mean error for best: 24.08210
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 67.732100971  
Correct output: 10.0760954048  | Program output: 13.3661596849 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 36.0892717501 
Correct output: 38.239902819   | Program output: 13.3661596849 
Correct output: -28.253581966  | Program output: -43.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -28.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 13.3661596849 
Correct output: -5.0640064942  | Program output: 2.9359935058  
Correct output: -156.5700373509 | Program output: -101.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 13.3661596849 
Correct output: -138.4095016371 | Program output: -52.4095016371
Correct output: -119.7462217731 | Program output: -82.7462217731
Correct output: -95.2566750864 | Program output: -7.2566750864 
Correct output: 153.6667050749 | Program output: 81.6667050749 
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -6.6640417064 
Correct output: 34.7374026319  | Program output: 65.7374026319 
Correct output: -49.1253212489 | Program output: 20.8746787511 
Correct output: 17.2744201056  | Program output: 20.2744201056 
Correct output: 62.9989442076  | Program output: 13.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.3384298320015} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.3384298320015 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [92.0 11 3.2901 9 20.0 2 12.6076 11 4.0 1 24.8737 10 15.0 2 9.3257 9 36.0 2 63.9391 13 2.7945 9 8.0 12 55.0 2 2.7532 9 36.8217 12 86.0 3 37.0 3 88.0 2 72.0 3 6.5031 9 1.0 1 31.0 2 70.0 13 3.0 2 49.6328 12]
Total: 994.5415
Mean: 19.89083
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3811.8427064999964
Median total errors in population: 1020.5415
Error averages by case: (200.47334139999998 11.36 111.89844709999886 10.828 131.8290504 4.226 127.67639650000174 12.444 123.5701111 3.24 131.3102931999979 11.248 130.23011339999974 5.726 120.9233236000008 10.561 151.72956029999997 4.245 161.43300660000008 12.27 109.49328180000197 10.917 126.4584329 12.277 168.92504340000002 4.358 115.7131185000019 10.78 138.69721190000033 12.922 195.90172610000002 5.213 152.9487494 4.475 197.35146670000003 4.208 177.00101210000008 4.674 118.65777350000116 10.675 119.3357445 2.488 147.18259859999998 4.125 181.3666418 13.258 122.62444299999999 4.133 146.4918187000015 11.969)
Error minima by case: (23.8651 10 0.9015 7 4.6338 2 0.2153 9 3.0 1 8.5076 9 0.3662 1 3.0404 8 21.2453 2 21.116 2 0.7945 8 4.0889 9 54.0 2 0.0986 9 20.2894 9 52.3544 3 33.6911 2 9.2016 1 9.6667 2 1.1692 9 0.0 0 21.3712 2 36.9298 10 2.0 2 7.4783 1)
Average genome size in population (length): 110.906
Average program size in population (points): 111.906
Average percent parens in population: 0.009
Minimum age in population: 18.5498046875
Maximum age in population: 22.9600830078125
Average age in population: 21.04516772460938
Median age in population: 21.09039306640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.179
Error (vector) diversity:			 0.212
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 30856048
--- Timings ---
Current time: 1529615999872 milliseconds
Total Time:          63.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.2 seconds, 33.5%
Fitness Testing:     32.1 seconds, 50.6%
Report:              10.0 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 48164.20929999999
Test mean error for best: 24.08210
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 67.732100971  
Correct output: 10.0760954048  | Program output: 13.3661596849 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 36.0892717501 
Correct output: 38.239902819   | Program output: 13.3661596849 
Correct output: -28.253581966  | Program output: -43.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -28.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 13.3661596849 
Correct output: -5.0640064942  | Program output: 2.9359935058  
Correct output: -156.5700373509 | Program output: -101.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 13.3661596849 
Correct output: -138.4095016371 | Program output: -52.4095016371
Correct output: -119.7462217731 | Program output: -82.7462217731
Correct output: -95.2566750864 | Program output: -7.2566750864 
Correct output: 153.6667050749 | Program output: 81.6667050749 
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -6.6640417064 
Correct output: 34.7374026319  | Program output: 65.7374026319 
Correct output: -49.1253212489 | Program output: 20.8746787511 
Correct output: 17.2744201056  | Program output: 20.2744201056 
Correct output: 62.9989442076  | Program output: 13.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.3384298320015} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (tagged_392 print_integer integer_fromfloat float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.3384298320015 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [92.0 11 3.2901 9 20.0 2 12.6076 11 4.0 1 24.8737 10 15.0 2 9.3257 9 36.0 2 63.9391 13 2.7945 9 8.0 12 55.0 2 2.7532 9 36.8217 12 86.0 3 37.0 3 88.0 2 72.0 3 6.5031 9 1.0 1 31.0 2 70.0 13 3.0 2 49.6328 12]
Total: 994.5415
Mean: 19.89083
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3690.1709467
Median total errors in population: 1019.5415
Error averages by case: (189.741611 11.288 112.03986849999899 10.746 127.9172617 4.165 126.63437170000175 12.376 112.69800170000002 3.195 131.5429232999979 11.128 130.02795659999984 5.193 120.64201840000077 10.518 143.8593849 4.169 159.75251569999966 12.023 109.99861440000198 10.894 115.84294779999999 12.176 161.57301050000004 4.281 115.2839090000022 10.726 139.56127660000027 12.875 188.4699079 5.148 145.35966489999998 4.608 189.66686009999998 4.146 173.09666880000003 4.516 118.27694210000108 10.571 111.5919601 2.62 136.4028163 4.098 170.6915859 13.167 111.612091 4.086 147.35677780000157 11.817)
Error minima by case: (22.8651 8 2.2901 9 5.6338 2 0.1666 8 3.0 1 9.394 9 0.3662 2 4.0405 8 20.2453 2 7.956 2 1.7945 8 0.6666 9 54.0 2 0.2468 9 6.2768 9 50.4095 3 33.6911 2 5.2567 1 0.9526 2 4.8339 9 0.0 0 4.7391 2 22.8747 9 2.0 2 6.5343 1)
Average genome size in population (length): 113.143
Average program size in population (points): 114.143
Average percent parens in population: 0.009
Minimum age in population: 19.759521484375
Maximum age in population: 24.3536376953125
Average age in population: 22.48113989257812
Median age in population: 22.52285766601562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.183
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 33704203
--- Timings ---
Current time: 1529616004910 milliseconds
Total Time:          68.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.7 seconds, 33.2%
Fitness Testing:     34.8 seconds, 50.9%
Report:              10.8 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 47824.871999999996
Test mean error for best: 23.91244
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 67.732100971  
Correct output: 10.0760954048  | Program output: 15.3661596849 
Correct output: 106.0206148688 | Program output: 88.0206148688 
Correct output: 0.7585604003   | Program output: 15.3661596849 
Correct output: 32.0892717501  | Program output: 36.0892717501 
Correct output: 38.239902819   | Program output: 15.3661596849 
Correct output: -28.253581966  | Program output: -41.253581966 
Correct output: 22.691883669   | Program output: 15.3661596849 
Correct output: -64.8098353824 | Program output: -28.8098353824
Correct output: -50.5729717288 | Program output: 15.3661596849 
Correct output: 10.5716307984  | Program output: 15.3661596849 
Correct output: -5.0640064942  | Program output: 2.9359935058  
Correct output: -156.5700373509 | Program output: -101.5700373509
Correct output: 16.1193686865  | Program output: 15.3661596849 
Correct output: 50.1878349036  | Program output: 15.3661596849 
Correct output: -138.4095016371 | Program output: -52.4095016371
Correct output: -119.7462217731 | Program output: -82.7462217731
Correct output: -95.2566750864 | Program output: -7.2566750864 
Correct output: 153.6667050749 | Program output: 83.6667050749 
Correct output: 6.8630846811   | Program output: 15.3661596849 
Correct output: -5.6640417064  | Program output: -6.6640417064 
Correct output: 34.7374026319  | Program output: 65.7374026319 
Correct output: -49.1253212489 | Program output: 20.8746787511 
Correct output: 17.2744201056  | Program output: 20.2744201056 
Correct output: 62.9989442076  | Program output: 15.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dec} {:instruction float_tan} {:instruction integer_dec} {:instruction tagged_392} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction -85.06470056532552} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_float_666} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_max float_dec float_tan integer_dec tagged_392 tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop -85.06470056532552 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_pop tag_float_666 48 integer_rot float_min integer_mod integer_mod integer_pop integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot float_min float_dup_times integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [92.0 11 5.2901 9 18.0 3 14.6076 11 4.0 1 22.8737 10 13.0 2 7.3257 9 36.0 2 65.9391 12 4.7945 9 8.0 12 55.0 2 0.7532 9 34.8217 12 86.0 3 37.0 3 88.0 2 70.0 2 8.5031 9 1.0 1 31.0 2 70.0 13 3.0 2 47.6328 12]
Total: 987.5415
Mean: 19.75083
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3725.828562499998
Median total errors in population: 1018.5415
Error averages by case: (197.97319170000003 11.347 107.84041149999916 10.799 124.90442650000003 4.196 124.27197330000129 12.427 121.33285699999999 3.201 127.98111169999832 11.087 121.02063239999984 5.056 117.72379290000066 10.576 151.0561704 4.212 153.75045260000036 11.725 104.93424370000152 11.015 122.58223960000001 12.236 168.62150209999996 4.317 112.39482530000132 10.778 134.77007490000028 12.784 195.40581640000002 5.157 152.56977120000002 4.89 195.80440470000002 4.163 171.72238 4.547 115.10477690000094 10.6 118.94735069999997 2.918 144.9565447 4.079 178.3979701 13.228 119.76104219999999 4.08 141.15660000000142 11.426)
Error minima by case: (19.0075 9 1.2901 7 5.6338 2 0.2153 9 2.0 1 8.5076 9 12.0 2 5.0404 8 20.2453 2 12.715 2 0.7945 9 2.0889 9 53.0 2 0.7532 9 20.4555 9 52.3544 3 33.6911 2 9.2016 1 9.6667 2 4.5031 8 0.0 0 21.3712 2 35.9298 10 1.0 2 8.0148 1)
Average genome size in population (length): 115.99
Average program size in population (points): 116.99
Average percent parens in population: 0.009
Minimum age in population: 21.2647705078125
Maximum age in population: 25.60137939453125
Average age in population: 23.91410601806641
Median age in population: 23.939453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.198
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 36625667
--- Timings ---
Current time: 1529616009876 milliseconds
Total Time:          73.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        24.1 seconds, 32.8%
Fitness Testing:     37.5 seconds, 51.1%
Report:              11.7 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 47733.20929999999
Test mean error for best: 23.86660
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 66.732100971  
Correct output: 10.0760954048  | Program output: 13.3661596849 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 35.0892717501 
Correct output: 38.239902819   | Program output: 13.3661596849 
Correct output: -28.253581966  | Program output: -44.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -29.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 13.3661596849 
Correct output: -5.0640064942  | Program output: 1.9359935058  
Correct output: -156.5700373509 | Program output: -102.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 13.3661596849 
Correct output: -138.4095016371 | Program output: -53.4095016371
Correct output: -119.7462217731 | Program output: -83.7462217731
Correct output: -95.2566750864 | Program output: -8.2566750864 
Correct output: 153.6667050749 | Program output: 81.6667050749 
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -7.6640417064 
Correct output: 34.7374026319  | Program output: 64.7374026319 
Correct output: -49.1253212489 | Program output: 19.8746787511 
Correct output: 17.2744201056  | Program output: 19.2744201056 
Correct output: 62.9989442076  | Program output: 13.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.3384298320015} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in2} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup integer_shove integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_min integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.3384298320015 integer_dup_items float_pop in2 integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [91.0 11 3.2901 9 20.0 2 12.6076 11 3.0 1 24.8737 10 16.0 2 9.3257 9 35.0 2 63.9391 13 2.7945 9 7.0 12 54.0 2 2.7532 9 36.8217 12 85.0 2 36.0 3 87.0 2 72.0 3 6.5031 9 2.0 1 30.0 1 69.0 12 2.0 1 49.6328 12]
Total: 981.5415
Mean: 19.63083
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3784.5659721999978
Median total errors in population: 1012.5415
Error averages by case: (198.05791100000005 11.276 113.77579339999895 10.358 133.77988580000007 4.215 129.48278000000155 11.978 120.36170790000001 2.842 133.493462599998 10.712 123.58550869999982 4.884 123.07458300000081 10.134 150.3021372 3.817 160.92040309999982 11.796 111.7022504000017 10.543 120.82775589999999 12.168 167.89812310000002 3.939 117.817270300002 10.364 141.34545140000026 12.418 194.69765410000002 4.787 151.81490349999999 4.335 195.081145 3.801 177.23981950000012 4.61 120.56385950000112 10.219 115.89097949999999 2.365 145.23411359999997 3.728 178.63741170000003 13.157 118.65728219999997 3.725 146.87777980000118 11.275)
Error minima by case: (2.2845 8 1.2417 8 0.0 1 0.1718 7 3.0 1 5.8586 9 0.3662 2 5.0404 8 20.2453 2 22.116 2 0.7462 8 3.064 9 54.0 2 0.2917 8 4.2768 8 52.3544 2 33.6911 2 9.2016 1 0.0 1 4.4547 8 0.0 0 13.2626 1 22.5729 10 2.0 1 6.3672 1)
Average genome size in population (length): 111.25
Average program size in population (points): 112.25
Average percent parens in population: 0.009
Minimum age in population: 22.4625244140625
Maximum age in population: 26.89549255371094
Average age in population: 25.23473793029785
Median age in population: 25.31412506103516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.191
Error (vector) diversity:			 0.223
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 39425249
--- Timings ---
Current time: 1529616014912 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        25.6 seconds, 32.6%
Fitness Testing:     40.3 seconds, 51.4%
Report:              12.4 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 47548.68609999999
Test mean error for best: 23.77434
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 66.732100971  
Correct output: 10.0760954048  | Program output: 11.8460246445 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 11.8460246445 
Correct output: 32.0892717501  | Program output: 35.0892717501 
Correct output: 38.239902819   | Program output: 11.8460246445 
Correct output: -28.253581966  | Program output: -43.253581966 
Correct output: 22.691883669   | Program output: 11.8460246445 
Correct output: -64.8098353824 | Program output: -29.8098353824
Correct output: -50.5729717288 | Program output: 11.8460246445 
Correct output: 10.5716307984  | Program output: 11.8460246445 
Correct output: -5.0640064942  | Program output: 1.9359935058  
Correct output: -156.5700373509 | Program output: -102.5700373509
Correct output: 16.1193686865  | Program output: 11.8460246445 
Correct output: 50.1878349036  | Program output: 11.8460246445 
Correct output: -138.4095016371 | Program output: -53.4095016371
Correct output: -119.7462217731 | Program output: -83.7462217731
Correct output: -95.2566750864 | Program output: -8.2566750864 
Correct output: 153.6667050749 | Program output: 81.6667050749 
Correct output: 6.8630846811   | Program output: 11.8460246445 
Correct output: -5.6640417064  | Program output: -7.6640417064 
Correct output: 34.7374026319  | Program output: 64.7374026319 
Correct output: -49.1253212489 | Program output: 19.8746787511 
Correct output: 17.2744201056  | Program output: 19.2744201056 
Correct output: 62.9989442076  | Program output: 11.8460246445 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction float_mod} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 11.846024644536174} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_min} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup tagged_392 print_integer integer_fromfloat float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_mod float_max integer_dec float_dup_times float_dup_items float_mod integer_inc float_swap integer_dup_items float_mod float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 11.846024644536174 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_pop float_rot integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot integer_dup_times integer_fromfloat tag_float_538 in1 integer_dup_items float_pop integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec integer_min float_rot integer_rot float_dup_items -50 integer_pop in2 tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [91.0 11 1.7699 8 20.0 2 11.0875 10 3.0 1 26.3939 11 15.0 2 10.8459 11 35.0 2 62.419 13 1.2744 10 7.0 12 54.0 2 4.2733 9 38.3418 11 85.0 2 36.0 3 87.0 2 72.0 3 4.9829 8 2.0 1 30.0 1 69.0 12 2.0 1 51.1529 11]
Total: 979.5415
Mean: 19.59083
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3801.1108024999985
Median total errors in population: 1001.5415
Error averages by case: (196.28511870000003 11.305 113.68888989999904 10.065 134.08787920000006 4.092 130.25537290000156 11.682 119.8760957 2.605 133.55448219999798 10.456 133.48186229999985 4.543 123.6503112000008 9.911 152.4729878 3.586 161.9427019999998 11.809 111.61824140000176 10.268 119.88604009999999 12.204 170.29725920000004 3.671 118.49849300000183 10.045 141.49952900000022 12.156 196.52246869999996 4.534 154.12383119999998 3.982 197.292373 3.564 176.12586780000004 4.583 121.2604567000011 9.935 121.39209369999999 2.011 144.31116200000005 3.466 177.2123258 13.17 118.38258660000004 3.491 145.19137240000137 11.067)
Error minima by case: (6.9383 8 3.0E-4 7 6.6338 1 0.2153 8 2.0 1 2.8586 9 2.9526 2 3.0404 8 5.5521 2 16.2677 2 0.2744 8 3.064 8 53.0 2 0.4254 8 7.0894 9 50.3419 2 31.6786 2 5.2567 1 9.6667 2 3.2127 8 0.0 0 29.0 1 17.9191 10 1.0 1 6.9989 1)
Average genome size in population (length): 107.342
Average program size in population (points): 108.342
Average percent parens in population: 0.009
Minimum age in population: 23.77001953125
Maximum age in population: 28.37294769287109
Average age in population: 26.62012199401855
Median age in population: 26.67703628540039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.192
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 42124472
--- Timings ---
Current time: 1529616019819 milliseconds
Total Time:          83.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        26.9 seconds, 32.4%
Fitness Testing:     42.9 seconds, 51.6%
Report:              13.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 47045.78279999999
Test mean error for best: 23.52289
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 65.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 34.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -41.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -30.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: 0.9359935058  
Correct output: -156.5700373509 | Program output: -103.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -54.4095016371
Correct output: -119.7462217731 | Program output: -84.7462217731
Correct output: -95.2566750864 | Program output: -9.2566750864 
Correct output: 153.6667050749 | Program output: 81.6667050749 
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -8.6640417064 
Correct output: 34.7374026319  | Program output: 63.7374026319 
Correct output: -49.1253212489 | Program output: 18.8746787511 
Correct output: 17.2744201056  | Program output: 18.2744201056 
Correct output: 62.9989442076  | Program output: 12.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_dec} {:instruction float_tan} {:instruction integer_dec} {:instruction tagged_392} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 12.095913131573536} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_float_666} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_max float_dec float_tan integer_dec tagged_392 tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 12.095913131573536 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_pop tag_float_666 48 integer_rot float_min integer_mod integer_mod integer_pop integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop integer_min 48 integer_rot float_min float_dup_times integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [90.0 11 2.2901 9 20.0 2 11.6076 11 2.0 1 25.8737 10 13.0 2 10.3257 8 34.0 2 62.9391 13 1.7945 9 6.0 12 53.0 2 3.7532 9 37.8217 12 84.0 3 35.0 3 86.0 1 72.0 3 5.5031 9 3.0 1 29.0 2 68.0 13 1.0 1 50.6328 11]
Total: 968.5415
Mean: 19.37083
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3851.7773037999987
Median total errors in population: 1000.5415
Error averages by case: (203.46962969999998 11.315 111.8736268999991 10.081 126.91274350000005 4.031 128.01721450000122 11.714 127.4154332 2.593 132.3511574999982 10.404 140.91859399999993 4.441 121.72378410000069 10.02 157.6123676 3.595 155.8375048999999 11.366 110.06555580000152 10.415 128.30087790000002 12.207 174.8620638 3.693 116.3424240000014 10.12 140.74660780000008 12.086 201.4669574 4.508 158.97402130000003 4.247 201.8149363 3.558 172.13470720000004 4.51 118.51389550000101 9.916 126.1687133 2.286 151.21540600000003 3.414 183.76921430000002 13.134 125.65283960000001 3.425 147.92502770000084 10.613)
Error minima by case: (5.7321 8 0.2301 8 4.6338 2 0.0414 8 2.0 1 8.5076 9 13.0 2 4.0404 8 11.3873 2 28.6338 2 0.679 7 3.3506 8 53.0 2 0.2468 8 3.2365 8 39.5415 2 20.8782 2 3.6114 1 9.6667 2 1.1692 7 0.0 0 29.0 1 3.4823 9 1.0 1 9.5746 1)
Average genome size in population (length): 114.42
Average program size in population (points): 115.42
Average percent parens in population: 0.009
Minimum age in population: 25.5477294921875
Maximum age in population: 29.97605133056641
Average age in population: 28.14014560317993
Median age in population: 28.19412994384766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.18
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 45004507
--- Timings ---
Current time: 1529616024954 milliseconds
Total Time:          88.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        28.3 seconds, 32.1%
Fitness Testing:     45.8 seconds, 51.8%
Report:              14.2 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 46688.194299999996
Test mean error for best: 23.34410
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 63.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -32.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: -1.0640064942 
Correct output: -156.5700373509 | Program output: -105.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -56.4095016371
Correct output: -119.7462217731 | Program output: -86.7462217731
Correct output: -95.2566750864 | Program output: -11.2566750864
Correct output: 153.6667050749 | Program output: 80.6667050749 
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -10.6640417064
Correct output: 34.7374026319  | Program output: 61.7374026319 
Correct output: -49.1253212489 | Program output: 16.8746787511 
Correct output: 17.2744201056  | Program output: 16.2744201056 
Correct output: 62.9989442076  | Program output: 12.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_flush tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [88.0 11 2.2901 9 21.0 3 11.6076 11 0.0 0 25.8737 10 19.0 2 10.3257 8 32.0 2 62.9391 13 1.7945 9 4.0 1 51.0 2 3.7532 9 37.8217 12 82.0 3 33.0 3 84.0 2 73.0 3 5.5031 9 5.0 2 27.0 2 66.0 13 1.0 1 50.6328 11]
Total: 949.5415
Mean: 18.99083
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3216.1947939000015
Median total errors in population: 994.5415
Error averages by case: (179.47500539999996 11.243 85.0487785999991 9.886 104.17529760000005 3.841 102.05177680000105 11.535 100.64254000000001 2.287 106.25161389999835 10.327 115.95238819999994 4.002 95.69952970000071 9.973 133.78681050000003 3.292 130.6101766000013 11.231 82.79497840000124 10.308 102.97067570000002 12.134 151.79116760000005 3.383 90.20662530000044 10.039 114.31508410000004 11.922 178.97529870000002 4.112 135.38143669999997 4.198 180.2337297 3.265 144.16217680000003 4.193 92.35150500000108 9.758 102.3666764 2.227 125.10317009999999 3.031 160.0772398 12.995 99.5358738 3.036 119.63923850000161 10.378)
Error minima by case: (19.0075 8 0.7699 7 6.6338 2 0.2026 8 0.0 0 9.5076 9 0.3662 2 1.0002 8 7.1902 2 28.6338 2 0.2744 7 2.3633 1 46.57 2 0.7011 9 21.4555 7 33.5905 2 32.6911 2 8.2016 1 0.7814 2 3.9829 8 0.0 0 13.2626 1 37.9298 10 1.0 1 21.5859 1)
Average genome size in population (length): 120.647
Average program size in population (points): 121.647
Average percent parens in population: 0.008
Minimum age in population: 27.24644470214844
Maximum age in population: 31.75689315795898
Average age in population: 29.54073478507996
Median age in population: 29.61148357391357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.206
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 48043135
--- Timings ---
Current time: 1529616030063 milliseconds
Total Time:          93.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.7 seconds, 31.8%
Fitness Testing:     48.7 seconds, 52.0%
Report:              15.1 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 46688.194299999996
Test mean error for best: 23.34410
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 63.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -32.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: -1.0640064942 
Correct output: -156.5700373509 | Program output: -105.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -56.4095016371
Correct output: -119.7462217731 | Program output: -86.7462217731
Correct output: -95.2566750864 | Program output: -11.2566750864
Correct output: 153.6667050749 | Program output: 80.6667050749 
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -10.6640417064
Correct output: 34.7374026319  | Program output: 61.7374026319 
Correct output: -49.1253212489 | Program output: 16.8746787511 
Correct output: 17.2744201056  | Program output: 16.2744201056 
Correct output: 62.9989442076  | Program output: 12.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_mod float_max integer_dec float_dup_times float_min float_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_flush tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [88.0 11 2.2901 9 21.0 3 11.6076 11 0.0 0 25.8737 10 19.0 2 10.3257 8 32.0 2 62.9391 13 1.7945 9 4.0 1 51.0 2 3.7532 9 37.8217 12 82.0 3 33.0 3 84.0 2 73.0 3 5.5031 9 5.0 2 27.0 2 66.0 13 1.0 1 50.6328 11]
Total: 949.5415
Mean: 18.99083
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2945.561703300002
Median total errors in population: 993.5415
Error averages by case: (162.7727628 11.199 82.24711339999917 9.844 101.94672180000003 3.785 100.24457340000099 11.486 83.25779159999999 2.055 103.52389249999854 10.339 95.69398619999996 3.797 93.32636310000065 9.959 114.5894918 3.054 128.64398160000115 11.176 79.62437730000127 10.305 84.9073768 12.02 132.7132205 3.105 87.88053150000042 10.023 110.99472160000003 11.877 160.6252736 3.6 116.07680199999999 4.005 161.09435829999998 2.995 146.04774869999997 4.106 90.13750680000099 9.732 82.581985 2.054 107.8145414 2.557 141.81644119999999 12.695 81.04939270000001 2.503 117.4727477000017 10.207)
Error minima by case: (23.2855 10 0.2301 7 4.6338 2 0.2414 8 0.0 0 9.5076 8 0.3662 2 3.5203 7 20.2453 2 28.6338 2 0.2744 7 2.4486 1 15.5401 2 0.2468 8 21.4555 8 33.7007 2 31.4078 2 6.9182 1 9.6667 2 2.2567 7 0.0 0 1.5471 1 35.9298 10 0.0 0 21.6597 1)
Average genome size in population (length): 124.676
Average program size in population (points): 125.676
Average percent parens in population: 0.008
Minimum age in population: 28.89693450927734
Maximum age in population: 32.65434265136719
Average age in population: 30.89275085163116
Median age in population: 30.92592573165894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.218
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 51186611
--- Timings ---
Current time: 1529616035350 milliseconds
Total Time:          98.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.2 seconds, 31.6%
Fitness Testing:     51.6 seconds, 52.2%
Report:              15.9 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 46427.644099999976
Test mean error for best: 23.21382
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 62.732100971  
Correct output: 10.0760954048  | Program output: 10.8460246445 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 10.8460246445 
Correct output: 32.0892717501  | Program output: 31.0892717501 
Correct output: 38.239902819   | Program output: 10.8460246445 
Correct output: -28.253581966  | Program output: -48.253581966 
Correct output: 22.691883669   | Program output: 10.8460246445 
Correct output: -64.8098353824 | Program output: -33.8098353824
Correct output: -50.5729717288 | Program output: 10.8460246445 
Correct output: 10.5716307984  | Program output: 10.8460246445 
Correct output: -5.0640064942  | Program output: -2.0640064942 
Correct output: -156.5700373509 | Program output: -106.5700373509
Correct output: 16.1193686865  | Program output: 10.8460246445 
Correct output: 50.1878349036  | Program output: 10.8460246445 
Correct output: -138.4095016371 | Program output: -57.4095016371
Correct output: -119.7462217731 | Program output: -87.7462217731
Correct output: -95.2566750864 | Program output: -12.2566750864
Correct output: 153.6667050749 | Program output: 80.6667050749 
Correct output: 6.8630846811   | Program output: 10.8460246445 
Correct output: -5.6640417064  | Program output: -11.6640417064
Correct output: 34.7374026319  | Program output: 60.7374026319 
Correct output: -49.1253212489 | Program output: 15.8746787511 
Correct output: 17.2744201056  | Program output: 15.2744201056 
Correct output: 62.9989442076  | Program output: 10.8460246445 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction integer_swap} {:instruction float_mod} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction float_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 11.846024644536174} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_cos} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat tagged_392 print_integer integer_fromfloat float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_mod float_max float_yank integer_swap float_mod float_max integer_dec float_dup_times float_min float_mod float_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times float_stackdepth in1 11.846024644536174 float_max float_add float_inc integer_stackdepth float_mult float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod float_cos integer_dup float_pop integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_flush tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [87.0 10 0.7699 7 21.0 3 10.0875 9 1.0 1 27.3939 11 20.0 1 11.8459 11 31.0 2 61.419 12 0.2744 9 3.0 1 50.0 1 5.2733 9 39.3418 10 81.0 3 32.0 3 83.0 2 73.0 3 3.9829 8 6.0 2 26.0 2 65.0 13 2.0 1 52.1529 11]
Total: 938.5415
Mean: 18.77083
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3275.873479800001
Median total errors in population: 981.5415
Error averages by case: (180.0117303 11.173 88.57524669999918 9.923 105.48228470000005 4.03 107.76907790000095 11.491 102.41464409999999 2.226 110.04769109999846 10.309 116.67803559999999 4.099 100.94424550000058 9.947 135.30698150000003 3.247 134.77621470000088 11.045 85.727178400001 10.354 99.56173780000002 11.67 153.66474240000005 3.34 95.70135840000077 10.1 117.15145280000002 11.79 180.49928260000002 3.678 137.2517832 4.22 180.60815759999997 3.071 150.5802389000001 4.439 97.41790530000098 9.802 105.45376040000001 2.279 126.46355659999998 2.579 160.07969179999998 12.53 100.7684539 2.349 123.14102760000134 10.106)
Error minima by case: (5.1496 8 0.2301 7 4.6338 2 0.1022 8 0.0 0 1.8586 8 12.773 1 1.0404 8 1.1902 2 16.2677 2 0.2744 9 2.3633 1 50.0 1 0.7532 6 9.6269 7 27.5905 2 31.4078 2 5.2567 1 6.6667 2 1.1692 7 0.0 0 16.7918 1 7.1566 7 0.0 0 6.9989 1)
Average genome size in population (length): 127.398
Average program size in population (points): 128.398
Average percent parens in population: 0.008
Minimum age in population: 29.89693450927734
Maximum age in population: 34.04049396514893
Average age in population: 32.2227656493187
Median age in population: 32.2606987953186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.269
Error (vector) diversity:			 0.348
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 54401428
--- Timings ---
Current time: 1529616040767 milliseconds
Total Time:         104.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.7 seconds, 31.4%
Fitness Testing:     54.7 seconds, 52.5%
Report:              16.7 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 45668.16279999999
Test mean error for best: 22.83408
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 61.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -34.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -107.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -58.4095016371
Correct output: -119.7462217731 | Program output: -88.7462217731
Correct output: -95.2566750864 | Program output: -13.2566750864
Correct output: 153.6667050749 | Program output: 80.6667050749 
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 59.7374026319 
Correct output: -49.1253212489 | Program output: 14.8746787511 
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 12.3661596849 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_sub} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction float_min} {:instruction float_mod} {:instruction integer_inc} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_swap} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_add} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.3384298320015} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat tagged_392 tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger integer_shove integer_sub float_max float_stackdepth float_dup_times float_min float_mod integer_inc integer_mod integer_inc float_swap integer_dup_items print_float float_add integer_mod integer_dup float_mod integer_dup_times float_dup_times integer_shove in1 integer_dup float_mod integer_dup_times float_pop float_stackdepth in1 13.366159684860918 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_add float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.3384298320015 integer_dup_items float_pop in1 tagged_740 float_dec float_shove integer_dup_times tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items tagged_971 float_dec integer_dup_items float_rot float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items)
Errors: [86.0 11 2.2901 9 21.0 3 11.6076 11 2.0 1 25.8737 10 21.0 2 10.3257 8 30.0 1 62.9391 13 1.7945 9 2.0 1 49.0 2 3.7532 9 37.8217 12 80.0 2 31.0 3 82.0 2 73.0 3 5.5031 9 7.0 2 25.0 2 64.0 12 3.0 1 50.6328 11]
Total: 937.5415
Mean: 18.75083
Genome size: 151
Size: 152
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3502.1327655999976
Median total errors in population: 980.4972
Error averages by case: (189.4894871 11.228 95.86909499999916 9.993 119.42770150000011 4.423 112.45861580000083 11.531 112.24720540000001 2.363 117.8233722999984 10.482 119.46854179999984 4.562 107.43533580000062 9.882 145.49583379999999 3.437 141.6504823000003 11.436 95.0034727000011 10.379 114.7860179 10.337 163.28250390000002 3.538 101.19092850000101 10.152 125.15791129999984 11.935 189.99955520000003 4.094 147.0869986 4.417 191.09099669999998 3.096 158.55794380000012 4.759 103.78014540000103 9.878 117.8047062 2.555 136.5768536 3.023 170.4760901 12.889 111.11555480000001 2.468 131.79441610000157 10.206)
Error minima by case: (15.0075 8 0.2301 7 4.6338 1 0.0414 8 0.0 0 8.5076 8 0.6338 1 1.5203 6 18.3763 1 4.1394 2 0.0226 8 0.3506 1 49.0 1 0.2468 8 3.2365 8 51.3544 2 31.0 2 8.2016 1 8.6667 2 1.1692 7 0.0 0 25.0 1 2.6918 10 0.0 0 0.5154 1)
Average genome size in population (length): 129.887
Average program size in population (points): 130.887
Average percent parens in population: 0.008
Minimum age in population: 31.08825874328613
Maximum age in population: 35.44708657264709
Average age in population: 33.60795781826973
Median age in population: 33.66267120838165
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.3
Error (vector) diversity:			 0.403
Behavioral diversity:				 0.405
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 57679458
--- Timings ---
Current time: 1529616046230 milliseconds
Total Time:         109.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.1 seconds, 31.1%
Fitness Testing:     57.8 seconds, 52.8%
Report:              17.6 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 43521.4593
Test mean error for best: 21.76073
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 66.732100971  
Correct output: 10.0760954048  | Program output: 13.3661596849 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 35.0892717501 
Correct output: 38.239902819   | Program output: 13.3661596849 
Correct output: -28.253581966  | Program output: -41.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -29.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 13.3661596849 
Correct output: -5.0640064942  | Program output: 1.9359935058  
Correct output: -156.5700373509 | Program output: -102.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 13.3661596849 
Correct output: -138.4095016371 | Program output: -53.4095016371
Correct output: -119.7462217731 | Program output: -83.7462217731
Correct output: -95.2566750864 | Program output: -8.2566750864 
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -7.6640417064 
Correct output: 34.7374026319  | Program output: 64.7374026319 
Correct output: -49.1253212489 | Program output: 19.8746787511 
Correct output: 17.2744201056  | Program output: 19.2744201056 
Correct output: 62.9989442076  | Program output: 20.0948573392 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 12.095913131573536} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_float_666} {:instruction 48} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_rot} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_min} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_add float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 12.095913131573536 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_pop tag_float_666 48 integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min float_rot integer_dup float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_rot integer_dup_times integer_fromfloat tag_float_538 in1 integer_dup_items float_pop integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_dec integer_min float_rot integer_rot float_dup_items -50 integer_pop in2 tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [91.0 11 3.2901 9 20.0 2 12.6076 11 3.0 1 24.8737 10 13.0 2 9.3257 9 35.0 2 63.9391 13 2.7945 9 7.0 12 54.0 2 2.7532 9 36.8217 12 85.0 2 36.0 3 87.0 2 10.6667 10 6.5031 9 2.0 1 30.0 1 69.0 12 2.0 1 42.9041 11]
Total: 916.4795
Mean: 18.32959
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3758.2879692999977
Median total errors in population: 975.5415
Error averages by case: (194.26420320000008 11.116 111.14416039999917 10.04 132.57411640000018 5.222 129.0465003000009 11.552 118.33980030000002 2.387 132.3376599999983 10.524 129.90758669999985 4.708 123.58044510000069 9.804 149.86425939999998 3.542 158.5735178999998 11.672 108.75573320000109 10.383 122.35460729999998 7.369 168.153583 3.642 118.5657094000014 10.181 139.77707599999988 11.951 194.08600030000002 4.446 151.9252818 4.526 194.70022299999997 3.247 170.40864320000017 5.356 119.77564160000104 9.9 123.9006622 2.892 142.7133942 3.429 175.83617680000006 13.067 117.3840097 2.572 146.320977900001 10.47)
Error minima by case: (3.8023 8 0.2301 7 4.6338 2 0.0829 8 0.0 0 0.2982 8 1.3662 1 1.5203 6 3.1902 1 20.116 2 0.0226 7 0.0 0 47.0 1 0.2468 8 2.9757 7 29.5905 2 29.0 2 4.2567 1 8.6667 2 2.9829 7 0.0 0 7.2626 1 22.8747 9 0.0 0 0.4125 1)
Average genome size in population (length): 133.079
Average program size in population (points): 134.079
Average percent parens in population: 0.007
Minimum age in population: 32.23820972442627
Maximum age in population: 36.83662688732147
Average age in population: 35.12526464438438
Median age in population: 35.17260539531708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.956
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.956
Total error diversity:				 0.359
Error (vector) diversity:			 0.443
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 61037120
--- Timings ---
Current time: 1529616051913 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.6 seconds, 30.9%
Fitness Testing:     61.0 seconds, 52.9%
Report:              18.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 42574.8439
Test mean error for best: 21.28742
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 63.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 80.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -32.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: -1.0640064942 
Correct output: -156.5700373509 | Program output: -105.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -56.4095016371
Correct output: -119.7462217731 | Program output: -86.7462217731
Correct output: -95.2566750864 | Program output: -11.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -10.6640417064
Correct output: 34.7374026319  | Program output: 61.7374026319 
Correct output: -49.1253212489 | Program output: 16.8746787511 
Correct output: 17.2744201056  | Program output: 16.2744201056 
Correct output: 62.9989442076  | Program output: 19.0948573392 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 12.095913131573536} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_swap} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_shove} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_add float_flush float_tan integer_dec float_swap integer_dup_times integer_dup_items float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 12.095913131573536 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_max float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop integer_swap 48 integer_dup float_min float_pop float_min 48 integer_rot float_shove 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_flush tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [88.0 11 2.2901 9 26.0 2 11.6076 11 0.0 0 25.8737 10 19.0 2 10.3257 8 32.0 2 62.9391 13 1.7945 9 4.0 1 51.0 2 3.7532 9 37.8217 12 82.0 3 33.0 3 84.0 2 9.6667 9 5.5031 9 5.0 2 27.0 2 66.0 13 1.0 1 43.9041 11]
Total: 889.4795
Mean: 17.78959
Genome size: 156
Size: 157
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3140.4977314
Median total errors in population: 954.5415
Error averages by case: (164.36821370000004 11.03 91.31374249999917 9.829 122.95848040000027 4.854 108.9914830000011 11.451 87.9741299 1.898 113.5537931999983 10.424 105.40479009999996 3.971 103.92766520000063 9.68 118.19839979999998 3.224 140.64673810000042 11.617 88.36910510000125 10.205 92.91664879999998 4.076 137.43028479999995 3.293 98.85087550000125 9.977 120.2454389999999 11.891 163.96681550000002 4.136 120.44584319999997 4.235 164.49345920000002 3.165 158.16003810000018 4.998 99.6991375000011 9.727 93.20399929999998 2.895 111.34991279999998 3.192 145.30805560000002 13.038 87.8606921 2.247 125.2639890000019 10.543)
Error minima by case: (15.0075 8 0.2301 7 4.6338 1 0.0414 7 0.0 0 8.5076 8 4.6338 1 2.0E-4 7 1.8385 1 12.3983 2 0.2055 8 0.0 0 45.0 1 0.7532 8 20.4555 8 46.4095 2 27.0 2 1.2567 1 7.6667 2 1.9829 7 0.0 0 10.2626 1 13.846 9 0.0 0 29.7878 1)
Average genome size in population (length): 136.112
Average program size in population (points): 137.112
Average percent parens in population: 0.007
Minimum age in population: 34.01695013046265
Maximum age in population: 38.43533277511597
Average age in population: 36.51715253609419
Median age in population: 36.54174146056175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.349
Error (vector) diversity:			 0.433
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 64474781
--- Timings ---
Current time: 1529616057525 milliseconds
Total Time:         120.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.0 seconds, 30.6%
Fitness Testing:     64.1 seconds, 53.1%
Report:              19.6 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 41038.4035
Test mean error for best: 20.51920
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 59.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -36.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -109.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -60.4095016371
Correct output: -119.7462217731 | Program output: -90.7462217731
Correct output: -95.2566750864 | Program output: -15.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 57.7374026319 
Correct output: -49.1253212489 | Program output: 12.8746787511 
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 19.0948573392 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 12.095913131573536} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_add} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.28927807376871} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction in1} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 12.095913131573536 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_add float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.28927807376871 integer_dup_items float_pop in1 tagged_740 float_dec float_shove integer_dup_times tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items tagged_971 float_dec integer_dup_items float_rot float_rot integer_rot float_dup_items -50 in1 in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_shove integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [84.0 11 2.2901 9 23.0 3 11.6076 11 4.0 2 25.8737 10 23.0 2 10.3257 8 28.0 2 62.9391 13 1.7945 9 0.0 0 47.0 2 3.7532 9 37.8217 12 78.0 3 29.0 3 80.0 1 9.6667 9 5.5031 9 9.0 2 23.0 2 62.0 13 5.0 1 43.9041 11]
Total: 867.4795
Mean: 17.34959
Genome size: 154
Size: 155
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3742.0220721999995
Median total errors in population: 951.7759
Error averages by case: (189.15944700000003 11.081 113.05357539999927 9.945 144.82615500000009 5.467 130.7820056000008 11.461 115.71299710000005 2.417 134.43847349999854 10.538 127.70792459999997 4.119 126.05115090000054 9.903 144.6788687 3.481 161.5085133999997 11.592 109.62808330000087 10.331 120.07537330000001 3.548 163.44314129999998 3.578 121.69740160000106 10.108 140.05940109999992 11.848 189.0446181000001 4.382 147.01765619999998 4.508 189.29686999999993 3.559 177.8172173000003 5.635 121.97504320000112 9.817 121.6976054 3.313 137.86417 3.497 170.50367709999998 12.985 116.13546790000001 2.609 147.45123520000072 10.674)
Error minima by case: (14.0075 8 0.2301 7 3.6222 2 0.0414 8 0.0 0 1.2515 8 0.3662 1 0.0404 7 1.8098 1 17.5379 2 0.2055 8 0.0 0 45.0 1 0.7532 8 2.3635 8 24.5905 2 27.0 2 0.2567 1 5.6667 2 0.9239 7 0.0 0 8.2626 1 22.8747 9 0.0 0 7.9989 1)
Average genome size in population (length): 140.927
Average program size in population (points): 141.927
Average percent parens in population: 0.007
Minimum age in population: 35.72390115261078
Maximum age in population: 39.91836324334145
Average age in population: 37.934953145504
Median age in population: 37.97919267416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.411
Error (vector) diversity:			 0.518
Behavioral diversity:				 0.519
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 68033623
--- Timings ---
Current time: 1529616063421 milliseconds
Total Time:         126.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.4 seconds, 30.4%
Fitness Testing:     67.4 seconds, 53.2%
Report:              20.7 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 41038.4035
Test mean error for best: 20.51920
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 59.732100971  
Correct output: 10.0760954048  | Program output: 12.3661596849 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 12.3661596849 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -36.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 12.3661596849 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -109.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 12.3661596849 
Correct output: -138.4095016371 | Program output: -60.4095016371
Correct output: -119.7462217731 | Program output: -90.7462217731
Correct output: -95.2566750864 | Program output: -15.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 57.7374026319 
Correct output: -49.1253212489 | Program output: 12.8746787511 
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 19.0948573392 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction tag_integer_640} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 12.095913131573536} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_add} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.28927807376871} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction in1} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_392 tagged_392 float_swap integer_min integer_mod tag_integer_640 float_max integer_dec float_yankdup float_frominteger float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 12.095913131573536 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod float_sin integer_dup float_pop -85.0550927390534 integer_dup_items float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_add float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.28927807376871 integer_dup_items float_pop in1 tagged_740 float_dec float_shove integer_dup_times tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items tagged_971 float_dec integer_dup_items float_rot float_rot integer_rot float_dup_items -50 in1 in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_shove integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [84.0 11 2.2901 9 23.0 3 11.6076 11 4.0 2 25.8737 10 23.0 2 10.3257 8 28.0 2 62.9391 13 1.7945 9 0.0 0 47.0 2 3.7532 9 37.8217 12 78.0 3 29.0 3 80.0 1 9.6667 9 5.5031 9 9.0 2 23.0 2 62.0 13 5.0 1 43.9041 11]
Total: 867.4795
Mean: 17.34959
Genome size: 154
Size: 155
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3175.1196544999975
Median total errors in population: 948.5415
Error averages by case: (171.2997214 11.039 85.03444069999924 9.894 128.1048167000004 6.203 103.702568800001 11.384 98.82061570000002 2.591 107.21650749999854 10.396 109.55905899999988 4.182 98.28135880000065 9.683 125.31804500000005 3.228 134.07055490000113 11.396 81.19432610000102 10.187 98.3957767 3.159 144.48188209999998 3.362 93.43431550000075 10.016 112.4072749 11.729 170.74473239999995 4.116 127.70045509999997 4.294 169.53095809999996 3.369 155.70425460000038 6.294 94.07825790000113 9.752 101.74156160000003 3.211 119.66527879999997 3.402 151.29493539999996 12.833 97.6595198 2.548 116.72543700000095 10.685)
Error minima by case: (10.2939 8 0.0812 7 5.6338 2 0.0414 8 0.0 0 0.7018 7 0.154 1 0.4797 7 1.8098 1 18.5379 2 0.2055 7 0.0 0 42.0 1 0.7532 8 0.7635 8 21.5905 2 14.6241 2 1.2567 1 5.6667 2 1.3842 7 0.0 0 13.2626 1 7.8747 9 0.0 0 0.7144 1)
Average genome size in population (length): 144.895
Average program size in population (points): 145.895
Average percent parens in population: 0.007
Minimum age in population: 37.12760573625565
Maximum age in population: 41.44482722878456
Average age in population: 39.40806021100283
Median age in population: 39.46850150078535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.968
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.968
Total error diversity:				 0.459
Error (vector) diversity:			 0.566
Behavioral diversity:				 0.566
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 71691742
--- Timings ---
Current time: 1529616069488 milliseconds
Total Time:         132.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.9 seconds, 30.1%
Fitness Testing:     70.8 seconds, 53.4%
Report:              21.9 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 40677.671500000004
Test mean error for best: 20.33884
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 58.732100971  
Correct output: 10.0760954048  | Program output: 10.3661596849 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 27.0892717501 
Correct output: 38.239902819   | Program output: 10.3661596849 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -37.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 10.3661596849 
Correct output: -5.0640064942  | Program output: -6.0640064942 
Correct output: -156.5700373509 | Program output: -110.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 10.3661596849 
Correct output: -138.4095016371 | Program output: -61.4095016371
Correct output: -119.7462217731 | Program output: -91.7462217731
Correct output: -95.2566750864 | Program output: -16.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -15.6640417064
Correct output: 34.7374026319  | Program output: 56.7374026319 
Correct output: -49.1253212489 | Program output: 11.8746787511 
Correct output: 17.2744201056  | Program output: 11.2744201056 
Correct output: 62.9989442076  | Program output: 17.0948573392 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 12.095913131573536} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_add} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.3384298320015} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_pop integer_min integer_fromfloat float_add float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 12.095913131573536 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_add float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min integer_mod integer_mod integer_pop float_rot -85.3384298320015 integer_dup_items float_pop in1 tagged_740 float_dec float_shove integer_dup_times tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec integer_dup_items tagged_971 float_dec integer_dup_items float_rot float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [83.0 11 0.2901 8 23.0 3 9.6076 10 5.0 2 27.8737 10 23.0 2 12.3257 9 27.0 2 60.9391 12 0.2055 8 1.0 1 46.0 2 5.7532 9 39.8217 11 77.0 3 28.0 2 79.0 2 7.6667 10 3.5031 9 10.0 1 22.0 2 61.0 13 6.0 1 45.9041 11]
Total: 858.8904999999999
Mean: 17.17781
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3798.3272383
Median total errors in population: 941.4972
Error averages by case: (192.82861380000008 11.171 111.66166069999936 10.163 163.60872630000003 7.334 128.458123600001 11.554 123.34909230000002 3.104 132.22469619999868 10.532 139.49163289999993 4.371 123.05090800000065 9.764 147.40073740000005 3.578 159.65312520000006 11.738 109.26851290000089 10.279 122.40253089999999 3.176 166.29636210000007 3.745 118.60226920000106 10.215 139.2106083000002 11.897 191.56902940000006 4.47 149.76991059999992 4.585 189.98837429999992 3.627 173.3615899000005 7.782 119.53976400000106 9.96 125.1848534 3.527 143.27653060000003 3.735 173.50838890000009 12.944 121.82205970000003 2.946 145.63913770000076 10.963)
Error minima by case: (15.8943 7 0.2276 7 4.6338 1 0.2414 7 0.0 0 0.1817 7 0.154 1 0.4797 7 15.7019 1 16.5379 2 0.2055 7 0.0 0 40.0 1 0.7532 8 1.7635 8 44.0711 2 22.0 2 0.9182 1 0.3333 2 0.0171 6 0.0 0 13.2626 1 0.0174 7 0.0 0 4.0964 1)
Average genome size in population (length): 148.145
Average program size in population (points): 149.145
Average percent parens in population: 0.007
Minimum age in population: 38.29766966402531
Maximum age in population: 42.86964493989944
Average age in population: 40.92218239867687
Median age in population: 40.9913405328989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.968
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.968
Total error diversity:				 0.495
Error (vector) diversity:			 0.598
Behavioral diversity:				 0.599
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 75433983
--- Timings ---
Current time: 1529616075555 milliseconds
Total Time:         138.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.4 seconds, 29.8%
Fitness Testing:     74.2 seconds, 53.5%
Report:              23.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 38858.99989999997
Test mean error for best: 19.42950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 55.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 78.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 24.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -55.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -40.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -9.0640064942 
Correct output: -156.5700373509 | Program output: -113.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -64.4095016371
Correct output: -119.7462217731 | Program output: -94.7462217731
Correct output: -95.2566750864 | Program output: -19.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -18.6640417064
Correct output: 34.7374026319  | Program output: 53.7374026319 
Correct output: -49.1253212489 | Program output: 8.8746787511  
Correct output: 17.2744201056  | Program output: 8.2744201056  
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat integer_fromfloat float_add float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod float_stackdepth float_swap integer_dup_times integer_fromfloat float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times float_mod float_dec float_dec float_shove integer_dup_times float_dec float_dec float_shove float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [80.0 11 8.3637 11 28.0 3 12.6076 11 8.0 2 22.6363 11 27.0 2 9.3257 9 24.0 2 63.9391 13 17.3637 11 4.0 1 43.0 2 2.7532 9 20.6363 11 74.0 3 25.0 3 76.0 2 10.6667 10 6.5031 9 13.0 2 19.0 2 58.0 13 9.0 2 6.6363 12]
Total: 836.4317000000001
Mean: 16.728634
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3523.1288591
Median total errors in population: 937.3141
Error averages by case: (188.50029110000006 11.039 95.10513339999952 10.163 141.59176430000042 7.784 111.3343177000009 11.436 119.35682510000011 3.12 114.6906028999987 10.28 128.35628709999995 3.966 105.79794640000057 9.455 144.93366490000002 3.623 143.90029430000075 11.532 92.08015880000093 10.137 118.380293 3.049 164.1596663000001 3.734 101.72898090000095 10.12 120.2637306 11.715 189.03701920000006 4.51 147.65000859999992 4.586 186.87156130000002 3.612 147.8333441000008 8.929 102.95512250000111 9.82 122.63458149999998 3.481 138.78490509999995 3.804 168.83401720000018 12.88 116.88395819999998 2.996 124.97038460000037 10.723)
Error minima by case: (13.0075 8 0.2301 7 4.6338 2 0.2153 7 0.0 0 0.3384 8 0.154 1 0.4797 7 0.8098 1 16.2677 2 0.2055 7 0.0 0 42.0 1 0.7532 7 0.7635 8 15.5905 2 13.8818 2 1.2016 1 0.3333 2 0.0171 6 0.0 0 0.6293 1 22.8747 9 0.0 0 3.7298 1)
Average genome size in population (length): 151.391
Average program size in population (points): 152.391
Average percent parens in population: 0.007
Minimum age in population: 40.18742907047272
Maximum age in population: 44.43284244835377
Average age in population: 42.40667188138142
Median age in population: 42.47272009402514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.52
Error (vector) diversity:			 0.597
Behavioral diversity:				 0.597
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 79257679
--- Timings ---
Current time: 1529616081555 milliseconds
Total Time:         144.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.8 seconds, 29.6%
Fitness Testing:     77.7 seconds, 53.7%
Report:              24.2 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 38858.99989999997
Test mean error for best: 19.42950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 55.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 78.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 24.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -55.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -40.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -9.0640064942 
Correct output: -156.5700373509 | Program output: -113.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -64.4095016371
Correct output: -119.7462217731 | Program output: -94.7462217731
Correct output: -95.2566750864 | Program output: -19.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -18.6640417064
Correct output: 34.7374026319  | Program output: 53.7374026319 
Correct output: -49.1253212489 | Program output: 8.8746787511  
Correct output: 17.2744201056  | Program output: 8.2744201056  
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat integer_fromfloat float_add float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod float_stackdepth float_swap integer_dup_times integer_fromfloat float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times float_mod float_dec float_dec float_shove integer_dup_times float_dec float_dec float_shove float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [80.0 11 8.3637 11 28.0 3 12.6076 11 8.0 2 22.6363 11 27.0 2 9.3257 9 24.0 2 63.9391 13 17.3637 11 4.0 1 43.0 2 2.7532 9 20.6363 11 74.0 3 25.0 3 76.0 2 10.6667 10 6.5031 9 13.0 2 19.0 2 58.0 13 9.0 2 6.6363 12]
Total: 836.4317000000001
Mean: 16.728634
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3504.3685547
Median total errors in population: 938.5001
Error averages by case: (182.2081936000002 11.019 99.21127319999948 10.258 156.90046180000016 7.038 117.42150170000104 11.501 111.79662650000004 2.924 119.59027109999865 10.301 133.564185 3.796 110.7256150000006 9.472 137.79735260000004 3.436 146.96440520000064 11.442 95.45905270000108 10.248 111.73819529999999 3.086 157.35746480000006 3.566 106.58876370000107 10.142 123.81512060000004 11.759 182.8912358 4.333 140.6426285999999 4.505 181.1962577 3.465 148.76073230000088 9.202 107.96671970000108 9.872 115.2421945 3.34 132.39489639999994 3.752 162.7762111000001 12.889 108.8850327 2.888 127.65916310000009 10.581)
Error minima by case: (11.2679 9 0.2301 7 5.6338 2 0.2414 8 0.0 0 7.4504 7 0.9041 1 0.0336 7 1.7188 1 15.5379 2 0.0233 6 0.0 0 41.0 1 0.7532 8 1.7635 8 28.5905 2 23.0 2 2.2016 1 0.3333 2 0.5031 7 0.0 0 0.6293 1 22.8747 9 0.0 0 3.6363 1)
Average genome size in population (length): 153.626
Average program size in population (points): 154.626
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 45.7503813020885
Average age in population: 43.68998074537516
Median age in population: 43.756935457699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.965
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.965
Total error diversity:				 0.53
Error (vector) diversity:			 0.619
Behavioral diversity:				 0.62
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 83132096
--- Timings ---
Current time: 1529616087771 milliseconds
Total Time:         150.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 29.3%
Fitness Testing:     81.3 seconds, 53.9%
Report:              25.2 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 38165.43589999997
Test mean error for best: 19.08272
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 56.732100971  
Correct output: 10.0760954048  | Program output: 16.4397589637 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 25.0892717501 
Correct output: 38.239902819   | Program output: 13.6035663778 
Correct output: -28.253581966  | Program output: -54.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -39.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.9352943572 
Correct output: -5.0640064942  | Program output: -8.0640064942 
Correct output: -156.5700373509 | Program output: -112.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.5514984625 
Correct output: -138.4095016371 | Program output: -63.4095016371
Correct output: -119.7462217731 | Program output: -93.7462217731
Correct output: -95.2566750864 | Program output: -18.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -17.6640417064
Correct output: 34.7374026319  | Program output: 54.7374026319 
Correct output: -49.1253212489 | Program output: 9.8746787511  
Correct output: 17.2744201056  | Program output: 9.2744201056  
Correct output: 62.9989442076  | Program output: 54.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_div} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_add} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_swap} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_add} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_pop integer_min float_dup print_integer integer_fromfloat tagged_392 integer_swap float_div float_yankdup integer_div float_flush integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop float_dup_times float_max integer_mod integer_flush integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_div float_pop float_min 47 float_sub integer_mod float_add integer_pop float_dup_items integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove float_rot integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot float_add integer_rot float_dup_items -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot integer_swap -50 integer_pop float_dec float_dec tagged_971 float_dec integer_dup_items float_rot integer_rot float_add -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [81.0 11 6.3637 11 23.0 3 10.6076 11 7.0 2 24.6363 11 26.0 2 11.3257 9 25.0 2 61.9391 13 15.3637 11 3.0 1 44.0 2 4.7532 9 22.6363 11 75.0 2 26.0 3 77.0 2 8.6667 10 4.5031 9 12.0 2 20.0 1 59.0 12 8.0 2 8.6363 12]
Total: 829.4317000000001
Mean: 16.588634
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3497.0156266999998
Median total errors in population: 927.9093999999999
Error averages by case: (174.87827140000007 11.035 105.42916809999953 10.282 152.08547430000027 6.135 122.99648710000112 11.592 104.53976670000006 2.862 126.02945099999862 10.41 128.33132149999994 3.748 117.3883450000007 9.576 132.69276190000002 3.37 151.7244209000005 11.448 102.55252640000104 10.351 107.10528099999996 3.116 152.25417020000012 3.495 112.64651090000113 10.146 130.38262220000001 11.816 177.71619729999995 4.253 135.50203199999996 4.453 176.92390349999994 3.463 160.06428760000094 9.251 113.59206680000102 9.925 111.71409440000002 3.311 124.93994149999999 3.579 156.10355540000003 12.868 102.85210999999998 2.756 132.8758596000002 10.454)
Error minima by case: (7.4607 9 0.2901 8 0.0206 2 0.1606 9 0.0 0 3.8586 8 3.8464 1 0.4797 7 0.8098 1 0.573 2 0.2055 8 0.0 0 38.0 1 0.7532 8 2.8242 8 23.5905 2 20.0 2 1.2016 1 0.3333 2 0.4969 6 0.0 0 3.6293 1 0.8747 9 0.0 0 0.7144 1)
Average genome size in population (length): 156.353
Average program size in population (points): 157.353
Average percent parens in population: 0.006
Minimum age in population: 42.48708509653807
Maximum age in population: 47.0746447108686
Average age in population: 45.12217759422492
Median age in population: 45.13167588133365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.512
Error (vector) diversity:			 0.638
Behavioral diversity:				 0.638
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 87071911
--- Timings ---
Current time: 1529616094081 milliseconds
Total Time:         157.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 29.1%
Fitness Testing:     85.0 seconds, 54.1%
Report:              26.4 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 37954.43589999997
Test mean error for best: 18.97722
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 57.732100971  
Correct output: 10.0760954048  | Program output: 16.4397589637 
Correct output: 106.0206148688 | Program output: 81.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 26.0892717501 
Correct output: 38.239902819   | Program output: 13.6035663778 
Correct output: -28.253581966  | Program output: -46.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -38.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.9352943572 
Correct output: -5.0640064942  | Program output: -7.0640064942 
Correct output: -156.5700373509 | Program output: -111.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.5514984625 
Correct output: -138.4095016371 | Program output: -62.4095016371
Correct output: -119.7462217731 | Program output: -92.7462217731
Correct output: -95.2566750864 | Program output: -17.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -16.6640417064
Correct output: 34.7374026319  | Program output: 55.7374026319 
Correct output: -49.1253212489 | Program output: 10.8746787511 
Correct output: 17.2744201056  | Program output: 10.2744201056 
Correct output: 62.9989442076  | Program output: 54.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction integer_min} {:instruction float_dup} {:instruction print_integer} {:instruction in2} {:instruction float_mod} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction in2} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_add} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_stackdepth} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_mult} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_pop integer_min float_dup print_integer in2 float_mod float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup in2 float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod integer_pop float_swap integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot integer_shove integer_mod integer_mod integer_pop float_swap integer_dup_times integer_fromfloat tag_float_538 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_740 float_dec float_shove integer_flush tagged_971 float_dec integer_dup_items float_add integer_rot float_dup_items -50 integer_pop in2 float_min integer_stackdepth tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items -50 integer_mult in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [82.0 11 6.3637 11 25.0 3 10.6076 11 6.0 2 24.6363 11 18.0 2 11.3257 9 26.0 2 61.9391 13 15.3637 11 2.0 1 45.0 2 4.7532 9 22.6363 11 76.0 3 27.0 3 78.0 2 8.6667 10 4.5031 9 11.0 2 21.0 2 60.0 13 7.0 1 8.6363 12]
Total: 829.4317000000001
Mean: 16.588634
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3395.087406000002
Median total errors in population: 917.3025
Error averages by case: (176.27528529999998 10.998 97.88355169999954 10.177 142.17188490000024 5.966 115.92689810000152 11.41 106.9083148 3.02 118.85619419999827 10.446 129.64628019999998 3.654 109.56811490000065 9.477 130.40577180000002 3.392 147.38721290000072 11.761 96.30270780000119 10.278 102.21286369999999 2.778 150.01446920000006 3.527 104.44675610000131 9.896 121.91376219999998 11.767 175.51156029999996 4.296 133.34961599999997 4.392 171.89748479999997 3.446 157.51197750000094 9.49 105.56691080000097 9.799 107.6143105 3.343 125.26893289999998 3.524 154.45418250000003 12.817 103.11543950000001 2.793 127.54592339999977 10.884)
Error minima by case: (13.2679 8 0.1263 7 0.0206 2 0.2153 9 0.0 0 3.8586 8 0.6338 1 0.7702 7 1.1902 1 0.573 2 0.2055 8 0.0 0 5.9333 1 0.7532 7 0.7635 9 17.5905 2 12.0667 2 0.2947 1 0.3333 2 0.4969 7 0.0 0 10.493 1 0.8747 8 0.0 0 0.2691 1)
Average genome size in population (length): 159.328
Average program size in population (points): 160.328
Average percent parens in population: 0.006
Minimum age in population: 43.98333491198719
Maximum age in population: 48.33986554248258
Average age in population: 46.43691456806799
Median age in population: 46.50378500367515
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.518
Error (vector) diversity:			 0.648
Behavioral diversity:				 0.649
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 91088053
--- Timings ---
Current time: 1529616100469 milliseconds
Total Time:         163.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 28.8%
Fitness Testing:     88.9 seconds, 54.3%
Report:              27.6 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 38495.78159999997
Test mean error for best: 19.24789
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 58.732100971  
Correct output: 10.0760954048  | Program output: 13.4397589637 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 7.3661596849  
Correct output: 32.0892717501  | Program output: 27.0892717501 
Correct output: 38.239902819   | Program output: 10.6035663778 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 7.3661596849  
Correct output: -64.8098353824 | Program output: -37.8098353824
Correct output: -50.5729717288 | Program output: 7.3661596849  
Correct output: 10.5716307984  | Program output: 22.9352943572 
Correct output: -5.0640064942  | Program output: -6.0640064942 
Correct output: -156.5700373509 | Program output: -110.5700373509
Correct output: 16.1193686865  | Program output: 7.3661596849  
Correct output: 50.1878349036  | Program output: 24.5514984625 
Correct output: -138.4095016371 | Program output: -61.4095016371
Correct output: -119.7462217731 | Program output: -91.7462217731
Correct output: -95.2566750864 | Program output: -16.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 7.3661596849  
Correct output: -5.6640417064  | Program output: -15.6640417064
Correct output: 34.7374026319  | Program output: 56.7374026319 
Correct output: -49.1253212489 | Program output: 11.8746787511 
Correct output: 17.2744201056  | Program output: 11.2744201056 
Correct output: 62.9989442076  | Program output: 51.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.28927807376871} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_854} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction integer_dup_times} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat float_add integer_mod integer_dup float_mod float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop integer_flush integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup float_min integer_mod integer_fromfloat integer_pop float_rot -85.28927807376871 integer_dup_items float_pop in1 tagged_740 float_dec float_shove integer_dup_times tagged_854 float_dec integer_flush tagged_971 integer_dup_times tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_dup_items float_rot integer_mult tagged_971 float_dec float_dec float_inc float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_shove integer_pop float_dup_items -50 integer_pop in2 float_min in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [83.0 11 3.3637 11 21.0 3 6.6076 10 5.0 2 27.6363 11 24.0 2 15.3257 9 27.0 2 57.9391 13 12.3637 11 1.0 1 46.0 2 8.7532 10 25.6363 11 77.0 3 28.0 2 79.0 2 5.6667 9 0.5031 8 10.0 1 22.0 2 61.0 13 6.0 1 11.6363 12]
Total: 827.4317000000001
Mean: 16.548634
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3241.350494300001
Median total errors in population: 897.6222500000001
Error averages by case: (162.87172380000007 11.036 96.33491199999993 10.52 145.24214090000024 5.74 115.70102620000137 11.417 92.06915850000001 2.774 114.75051309999849 10.642 120.72490189999994 3.501 106.05162080000063 9.531 123.17552789999999 3.147 148.31960360000045 11.857 96.40007100000106 10.615 97.44672800000001 2.56 141.56485490000003 3.223 101.82194150000134 9.895 116.18393099999965 11.604 168.42091680000001 4.004 124.96890509999996 4.055 167.79639659999998 3.162 148.84629270000102 9.441 104.88115920000094 9.79 103.8692977 3.049 110.3845796 3.245 142.5115719 12.885 90.873797 2.528 118.8169225999996 11.101)
Error minima by case: (15.9774 8 0.0198 8 7.6338 2 0.0797 6 0.0 0 3.0328 8 0.6338 1 0.7702 7 5.8098 1 0.573 2 0.2055 8 0.0 0 22.8343 1 0.7532 8 0.1758 8 4.6737 2 13.9895 2 0.2016 1 0.3333 1 0.5031 8 0.0 0 0.7374 1 0.8747 8 0.0 0 0.2691 1)
Average genome size in population (length): 161.103
Average program size in population (points): 162.103
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 49.92264071595855
Average age in population: 47.73495930358232
Median age in population: 47.83840362005867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.514
Error (vector) diversity:			 0.667
Behavioral diversity:				 0.668
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 95151930
--- Timings ---
Current time: 1529616106815 milliseconds
Total Time:         170.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.7 seconds, 28.6%
Fitness Testing:     92.7 seconds, 54.5%
Report:              28.6 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 38563.225099999974
Test mean error for best: 19.28161
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 58.732100971  
Correct output: 10.0760954048  | Program output: 14.4397589637 
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 7.3661596849  
Correct output: 32.0892717501  | Program output: 27.0892717501 
Correct output: 38.239902819   | Program output: 11.6035663778 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 7.3661596849  
Correct output: -64.8098353824 | Program output: -37.8098353824
Correct output: -50.5729717288 | Program output: 7.3661596849  
Correct output: 10.5716307984  | Program output: 23.9352943572 
Correct output: -5.0640064942  | Program output: -6.0640064942 
Correct output: -156.5700373509 | Program output: -110.5700373509
Correct output: 16.1193686865  | Program output: 7.3661596849  
Correct output: 50.1878349036  | Program output: 25.5514984625 
Correct output: -138.4095016371 | Program output: -61.4095016371
Correct output: -119.7462217731 | Program output: -91.7462217731
Correct output: -95.2566750864 | Program output: -16.2566750864
Correct output: 153.6667050749 | Program output: 160.3334101499
Correct output: 6.8630846811   | Program output: 7.3661596849  
Correct output: -5.6640417064  | Program output: -15.6640417064
Correct output: 34.7374026319  | Program output: 56.7374026319 
Correct output: -49.1253212489 | Program output: 11.8746787511 
Correct output: 17.2744201056  | Program output: 11.2744201056 
Correct output: 62.9989442076  | Program output: 52.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction float_add} {:instruction float_flush} {:instruction float_tan} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_rot} {:instruction -85.28927807376871} {:instruction integer_dup_items} {:instruction float_pop} {:instruction in1} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_854} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction integer_dup_times} {:instruction tagged_740} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_inc} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_swap} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_shove} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat float_inc float_add float_flush float_tan integer_dec float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_rot float_yankdup integer_div float_flush integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_inc float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop integer_flush integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 48 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_fromfloat integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 48 integer_dup integer_dup_items float_pop integer_dup_items integer_dup float_swap float_min 48 integer_dup integer_dup float_min integer_mod integer_fromfloat integer_pop float_rot -85.28927807376871 integer_dup_items float_pop in1 tagged_740 float_dec float_shove integer_dup_times tagged_854 float_dec integer_flush tagged_971 integer_dup_times tagged_740 float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_dup_items float_rot integer_mult tagged_971 float_dec float_dec float_inc float_rot integer_rot integer_swap -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_shove integer_pop float_dup_items -50 integer_pop in2 float_min in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [83.0 11 4.3637 11 22.0 3 6.6076 10 5.0 2 26.6363 11 24.0 2 15.3257 9 27.0 2 57.9391 13 13.3637 11 1.0 1 46.0 2 8.7532 10 24.6363 11 77.0 3 28.0 2 79.0 2 6.6667 10 0.5031 8 10.0 1 22.0 2 61.0 13 6.0 1 10.6363 11]
Total: 828.4317000000001
Mean: 16.568634
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3741.080185200002
Median total errors in population: 885.4522999999999
Error averages by case: (189.20132690000005 11.058 113.3597819000006 11.062 160.30177180000018 5.882 127.48149650000161 11.403 120.49455130000005 3.257 127.69183409999881 10.986 145.79880579999997 3.776 117.87016680000069 9.61 145.17715309999997 3.659 162.26878560000006 12.099 118.26375280000107 11.141 123.37036539999998 3.035 163.72562730000004 3.738 113.7239030000013 9.945 129.4135677999993 11.416 188.9975643 4.482 147.43935159999992 4.517 189.07324329999994 3.646 163.480325900001 9.69 116.48172440000101 9.836 128.76711360000002 3.498 139.266963 3.645 168.60210340000003 12.88 118.42027509999997 3.027 133.61163049999945 11.509)
Error minima by case: (1.8727 8 0.2901 8 6.6338 2 0.0617 7 0.0 0 1.8586 8 0.6338 1 0.8485 7 1.1902 1 1.3637 2 0.2055 8 0.0 0 24.43 1 0.579 7 0.1758 8 7.8727 2 7.2538 2 0.2016 1 3.6667 2 0.5031 8 0.0 0 0.7374 1 22.8747 8 0.0 0 0.6374 1)
Average genome size in population (length): 161.929
Average program size in population (points): 162.929
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 50.96072387660388
Average age in population: 48.94977302901738
Median age in population: 49.12556951772422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.481
Error (vector) diversity:			 0.614
Behavioral diversity:				 0.616
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 99241418
--- Timings ---
Current time: 1529616112922 milliseconds
Total Time:         176.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 28.4%
Fitness Testing:     96.6 seconds, 54.7%
Report:              29.7 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 37022.76379999998
Test mean error for best: 18.51138
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 51.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 76.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 20.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -44.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -13.0640064942
Correct output: -156.5700373509 | Program output: -117.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -68.4095016371
Correct output: -119.7462217731 | Program output: -98.7462217731
Correct output: -95.2566750864 | Program output: -23.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -22.6640417064
Correct output: 34.7374026319  | Program output: 49.7374026319 
Correct output: -49.1253212489 | Program output: 4.8746787511  
Correct output: 17.2744201056  | Program output: 4.2744201056  
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 48} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop integer_dup integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod float_dup float_swap integer_dup_times integer_fromfloat float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times float_mod float_dec float_dec float_shove integer_dup_times float_dec float_dec float_shove float_rot integer_rot integer_sub float_rot integer_rot float_dup_items -50 integer_pop in2 48 integer_mult float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_dec float_dec integer_dup_times integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [76.0 11 8.3637 11 30.0 2 12.6076 11 12.0 2 22.6363 11 19.0 2 9.3257 9 20.0 1 63.9391 13 17.3637 11 8.0 2 39.0 2 2.7532 9 20.6363 11 70.0 2 21.0 3 72.0 2 10.6667 10 6.5031 9 17.0 2 15.0 2 54.0 12 13.0 2 6.6363 12]
Total: 811.4317000000001
Mean: 16.228634
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3560.397579300005
Median total errors in population: 869.4522999999999
Error averages by case: (184.19944660000002 11.071 102.13154390000075 11.155 156.73136870000013 5.518 112.76225070000146 11.321 119.09936660000005 3.452 115.30508619999894 11.055 143.06917749999997 3.638 103.91778890000063 9.529 144.23172600000004 3.533 149.56470350000086 12.107 108.56749530000106 11.264 119.6744315 2.782 162.60569460000005 3.621 99.91875140000103 9.839 116.55263719999913 11.256 188.31123160000007 4.32 146.35717359999995 4.396 186.9748074 3.483 155.49878030000104 9.553 102.35161530000094 9.765 126.1390758 3.404 134.99230070000004 3.589 162.50428390000013 12.822 114.78627370000002 3.151 116.80856839999909 11.718)
Error minima by case: (0.2624 7 0.2901 8 6.6338 2 0.0829 8 0.0 0 5.0328 8 1.0526 1 0.6259 7 1.8098 1 0.573 2 0.2055 7 0.0 0 35.0 1 0.7532 8 0.1758 8 19.5905 2 16.5992 2 1.2016 1 0.3333 2 0.5031 8 0.0 0 0.7374 1 0.8747 8 0.0 0 0.2691 1)
Average genome size in population (length): 165.426
Average program size in population (points): 166.426
Average percent parens in population: 0.006
Minimum age in population: 47.95222291350365
Maximum age in population: 52.5484309149906
Average age in population: 50.47031504850538
Median age in population: 50.52154905931093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.437
Error (vector) diversity:			 0.588
Behavioral diversity:				 0.589
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 103422354
--- Timings ---
Current time: 1529616119436 milliseconds
Total Time:         182.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 28.2%
Fitness Testing:    100.4 seconds, 55.0%
Report:              30.6 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 37022.76379999998
Test mean error for best: 18.51138
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 51.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 76.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 20.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -44.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -13.0640064942
Correct output: -156.5700373509 | Program output: -117.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -68.4095016371
Correct output: -119.7462217731 | Program output: -98.7462217731
Correct output: -95.2566750864 | Program output: -23.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -22.6640417064
Correct output: 34.7374026319  | Program output: 49.7374026319 
Correct output: -49.1253212489 | Program output: 4.8746787511  
Correct output: 17.2744201056  | Program output: 4.2744201056  
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_392} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_392} {:instruction float_swap} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction -85.0550927390534} {:instruction integer_div} {:instruction float_pop} {:instruction float_div} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction float_min} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 48} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (tagged_392 print_integer integer_fromfloat tagged_392 float_swap integer_min integer_mod integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_yankdup integer_div float_flush integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop integer_dup integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items -85.0550927390534 integer_div float_pop float_div integer_dup float_pop float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_min float_pop float_min 48 integer_rot float_min integer_mod integer_mod float_dup float_swap integer_dup_times integer_fromfloat float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times float_mod float_dec float_dec float_shove integer_dup_times float_dec float_dec float_shove float_rot integer_rot integer_sub float_rot integer_rot float_dup_items -50 integer_pop in2 48 integer_mult float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_dec float_dec integer_dup_times integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [76.0 11 8.3637 11 30.0 2 12.6076 11 12.0 2 22.6363 11 19.0 2 9.3257 9 20.0 1 63.9391 13 17.3637 11 8.0 2 39.0 2 2.7532 9 20.6363 11 70.0 2 21.0 3 72.0 2 10.6667 10 6.5031 9 17.0 2 15.0 2 54.0 12 13.0 2 6.6363 12]
Total: 811.4317000000001
Mean: 16.228634
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4058.756409800004
Median total errors in population: 881.2443000000001
Error averages by case: (202.1672826999999 11.069 121.3665567000009 11.213 177.390685 5.962 135.47765000000143 11.28 141.81121130000005 4.073 134.62081449999906 11.074 162.06613779999995 4.076 123.29351640000063 9.628 162.50516329999996 3.991 169.51989259999942 12.174 127.60494130000096 11.338 140.13572530000002 3.29 181.71358290000006 4.1 119.60069590000134 9.963 136.33836779999925 11.264 205.91767220000006 4.758 165.61332709999988 4.841 204.60235390000005 3.966 171.2061671000011 9.796 123.47690740000102 9.8 146.93496189999996 3.797 156.20818000000014 4.063 181.89586300000005 12.711 137.32317450000005 3.723 136.1855791999993 11.83)
Error minima by case: (0.5466 3 0.2901 8 5.7323 2 0.037 5 0.0 0 4.0328 8 3.5648 1 1.0404 8 5.8098 1 0.3637 2 0.2055 8 0.0 0 2.0 1 0.7532 8 0.1758 8 11.5905 2 16.0 1 0.2567 1 0.6667 2 0.5031 8 0.0 0 0.7374 1 7.6856 2 0.0 0 0.2691 1)
Average genome size in population (length): 166.803
Average program size in population (points): 167.803
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 53.93086462980136
Average age in population: 51.7525474104727
Median age in population: 51.86982800347323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.464
Error (vector) diversity:			 0.635
Behavioral diversity:				 0.636
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 107640065
--- Timings ---
Current time: 1529616125996 milliseconds
Total Time:         189.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.0 seconds, 28.0%
Fitness Testing:    104.3 seconds, 55.1%
Report:              31.8 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 35455.41059999996
Test mean error for best: 17.72771
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 49.732100971  
Correct output: 10.0760954048  | Program output: 12.4397589637 
Correct output: 106.0206148688 | Program output: 77.0206148688 
Correct output: 0.7585604003   | Program output: 7.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 9.6035663778  
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 7.3661596849  
Correct output: -64.8098353824 | Program output: -46.8098353824
Correct output: -50.5729717288 | Program output: 7.3661596849  
Correct output: 10.5716307984  | Program output: 21.9352943572 
Correct output: -5.0640064942  | Program output: -15.0640064942
Correct output: -156.5700373509 | Program output: -119.5700373509
Correct output: 16.1193686865  | Program output: 7.3661596849  
Correct output: 50.1878349036  | Program output: 23.5514984625 
Correct output: -138.4095016371 | Program output: -70.4095016371
Correct output: -119.7462217731 | Program output: -100.7462217731
Correct output: -95.2566750864 | Program output: -25.2566750864
Correct output: 153.6667050749 | Program output: 158.3334101499
Correct output: 6.8630846811   | Program output: 7.3661596849  
Correct output: -5.6640417064  | Program output: -24.6640417064
Correct output: 34.7374026319  | Program output: 47.7374026319 
Correct output: -49.1253212489 | Program output: 2.8746787511  
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 50.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [74.0 11 2.3637 11 29.0 3 6.6076 10 14.0 2 28.6363 11 24.0 2 15.3257 9 18.0 2 57.9391 13 11.3637 11 10.0 1 37.0 2 8.7532 10 26.6363 11 68.0 3 19.0 2 70.0 1 4.6667 9 0.5031 8 19.0 2 13.0 2 52.0 13 15.0 2 12.6363 12]
Total: 800.4317000000001
Mean: 16.008635
Genome size: 172
Size: 173
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4485.998065100003
Median total errors in population: 884.00365
Error averages by case: (224.62078589999996 11.169 135.87122960000033 11.276 190.3477334999998 6.35 140.8932512000008 11.251 163.09766280000005 4.062 148.69006790000034 11.104 182.94001480000006 4.351 133.77028480000016 9.73 185.2991539999999 4.261 174.19950909999932 12.149 144.11272099999996 11.392 162.4705741 3.58 203.59833540000008 4.388 129.1869640000017 10.086 151.8621549000006 11.316 226.93346259999993 4.999 188.19862139999992 5.086 225.0568713 4.218 186.59471130000102 9.805 129.58448260000085 9.809 169.48230949999996 4.03 177.37554380000003 4.062 202.6180701999999 12.842 158.67205919999998 3.76 153.69749020000071 11.748)
Error minima by case: (5.9449 6 0.0761 8 4.6338 2 0.0326 8 0.0 0 5.0328 8 1.6338 1 0.0404 8 0.4354 1 0.573 2 0.2055 8 0.0 0 3.4854 1 0.7532 9 0.1758 9 0.0551 2 16.0 2 1.2016 1 0.3333 2 0.1771 7 0.0 0 0.6786 1 6.5095 2 0.0 0 0.2691 1)
Average genome size in population (length): 168.113
Average program size in population (points): 169.113
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 54.97356186408433
Average age in population: 52.92498751851641
Median age in population: 53.2387985728783
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.484
Error (vector) diversity:			 0.665
Behavioral diversity:				 0.666
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 111897918
--- Timings ---
Current time: 1529616132699 milliseconds
Total Time:         195.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 27.8%
Fitness Testing:    108.3 seconds, 55.3%
Report:              33.0 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 35689.912599999974
Test mean error for best: 17.84496
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 49.732100971  
Correct output: 10.0760954048  | Program output: 7.4397589637  
Correct output: 106.0206148688 | Program output: 87.0206148688 
Correct output: 0.7585604003   | Program output: 2.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 4.6035663778  
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 2.3661596849  
Correct output: -64.8098353824 | Program output: -46.8098353824
Correct output: -50.5729717288 | Program output: 2.3661596849  
Correct output: 10.5716307984  | Program output: 16.9352943572 
Correct output: -5.0640064942  | Program output: -15.0640064942
Correct output: -156.5700373509 | Program output: -119.5700373509
Correct output: 16.1193686865  | Program output: 2.3661596849  
Correct output: 50.1878349036  | Program output: 18.5514984625 
Correct output: -138.4095016371 | Program output: -70.4095016371
Correct output: -119.7462217731 | Program output: -100.7462217731
Correct output: -95.2566750864 | Program output: -25.2566750864
Correct output: 153.6667050749 | Program output: 153.3334101499
Correct output: 6.8630846811   | Program output: 2.3661596849  
Correct output: -5.6640417064  | Program output: -24.6640417064
Correct output: 34.7374026319  | Program output: 47.7374026319 
Correct output: -49.1253212489 | Program output: 2.8746787511  
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 57.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_dup_items} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mod} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dup_items} {:instruction tagged_483} {:instruction tagged_602} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction 78} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 50} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat float_dup_items integer_mod integer_dup float_mod float_swap integer_dup_times float_dec float_dup_times integer_mult float_yank integer_swap float_div float_dec integer_div float_flush integer_dup_items tagged_483 tagged_602 integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_dup_items float_pop float_mult integer_dup_items integer_swap integer_dup_items integer_dup float_pop float_min 47 integer_rot 78 integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min integer_mult integer_flush tagged_971 float_shove float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min -50 integer_pop in2 50 integer_mult float_dec float_dec float_dup_items -50 integer_pop float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min integer_div integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [74.0 11 2.6363 12 19.0 3 1.6076 10 14.0 2 33.6363 11 33.0 2 20.3257 8 18.0 2 52.9391 13 6.3637 10 10.0 1 37.0 2 13.7532 10 31.6363 11 68.0 3 19.0 2 70.0 1 0.3333 8 4.4969 8 19.0 2 13.0 2 52.0 13 15.0 2 5.6363 12]
Total: 795.3647000000001
Mean: 15.907294
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4157.300235400002
Median total errors in population: 881.45605
Error averages by case: (209.7697335 11.169 123.320455000001 11.192 176.6536815 6.128 135.91607980000114 11.151 148.69194730000004 3.871 137.96472669999952 11.004 156.92565799999994 4.052 128.15341070000062 9.752 167.84063189999998 4.083 168.07882379999964 12.069 129.27600750000093 11.326 147.49747749999995 3.469 186.7510912000001 4.236 124.36512170000171 10.1 138.85823679999967 11.284 210.55818379999994 4.873 170.7938831999999 4.954 210.24293859999997 4.068 176.36119610000105 9.765 126.18844620000094 9.763 154.0773757 3.869 161.39460520000006 3.882 189.45253200000002 12.842 145.27507179999998 3.607 138.7039198999998 11.68)
Error minima by case: (4.3357 9 0.2901 7 8.4761 2 0.0414 8 0.0 0 4.0328 7 2.6338 1 0.0404 8 1.2546 1 0.3637 2 0.1697 8 0.0 0 34.0 1 0.7532 8 0.1758 7 14.5905 2 11.6281 2 0.7984 1 0.3333 2 0.4969 7 0.0 0 4.2626 1 14.0143 2 0.0 0 0.2691 1)
Average genome size in population (length): 169.242
Average program size in population (points): 170.242
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 56.74383125422173
Average age in population: 53.91883225647103
Median age in population: 54.55067173143107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.5
Error (vector) diversity:			 0.699
Behavioral diversity:				 0.7
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 116188476
--- Timings ---
Current time: 1529616139251 milliseconds
Total Time:         202.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 27.6%
Fitness Testing:    112.3 seconds, 55.5%
Report:              34.2 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 35535.00799999996
Test mean error for best: 17.76750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 49.732100971  
Correct output: 10.0760954048  | Program output: 12.4397589637 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 7.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 9.6035663778  
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 7.3661596849  
Correct output: -64.8098353824 | Program output: -46.8098353824
Correct output: -50.5729717288 | Program output: 7.3661596849  
Correct output: 10.5716307984  | Program output: 21.9352943572 
Correct output: -5.0640064942  | Program output: -15.0640064942
Correct output: -156.5700373509 | Program output: -119.5700373509
Correct output: 16.1193686865  | Program output: 7.3661596849  
Correct output: 50.1878349036  | Program output: 23.5514984625 
Correct output: -138.4095016371 | Program output: -70.4095016371
Correct output: -119.7462217731 | Program output: -100.7462217731
Correct output: -95.2566750864 | Program output: -25.2566750864
Correct output: 153.6667050749 | Program output: 158.3334101499
Correct output: 6.8630846811   | Program output: 7.3661596849  
Correct output: -5.6640417064  | Program output: -24.6640417064
Correct output: 34.7374026319  | Program output: 47.7374026319 
Correct output: -49.1253212489 | Program output: 2.8746787511  
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 50.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_mod integer_yankdup integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_stackdepth float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -50 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop in2 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [74.0 11 2.3637 11 23.0 3 6.6076 10 14.0 2 28.6363 11 24.0 2 15.3257 9 18.0 2 57.9391 13 11.3637 11 10.0 1 37.0 2 8.7532 10 26.6363 11 68.0 3 19.0 2 70.0 1 4.6667 9 0.5031 8 19.0 2 13.0 2 52.0 13 15.0 2 12.6363 12]
Total: 794.4317000000001
Mean: 15.888634
Genome size: 172
Size: 173
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4185.049208300001
Median total errors in population: 875.26215
Error averages by case: (209.29222289999998 11.127 127.69239350000092 11.209 179.69467759999986 6.141 132.6933739000013 11.158 149.3590691 3.827 141.4485844999997 11.094 169.32785769999992 4.087 128.1714142000007 9.736 166.1616647 4.035 166.8294234999999 12.299 136.44081730000045 11.34 147.11856220000007 3.657 185.00314650000016 4.185 123.69386510000177 10.133 144.35017080000006 11.329 208.72789939999998 4.836 168.96219369999991 4.874 208.1774507 4.025 178.25248440000107 9.831 123.7568023000009 9.681 154.33029429999996 3.845 161.31367500000013 3.905 187.63621530000003 12.787 145.10867499999995 3.667 146.94427470000002 11.754)
Error minima by case: (1.1618 8 0.2901 7 5.6338 1 0.1606 8 0.0 0 3.4886 8 2.5784 1 1.074 7 0.1902 1 0.3637 2 0.2055 8 0.0 0 16.5401 1 0.7532 7 0.8242 8 10.5905 2 16.0 2 0.2016 1 0.3333 2 0.4969 7 0.0 0 4.2626 1 0.9736 2 0.0 0 0.2691 1)
Average genome size in population (length): 172.428
Average program size in population (points): 173.428
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 57.95166330093707
Average age in population: 55.23010933593479
Median age in population: 55.92762176460747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.537
Error (vector) diversity:			 0.721
Behavioral diversity:				 0.722
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 120563402
--- Timings ---
Current time: 1529616146007 milliseconds
Total Time:         209.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 27.4%
Fitness Testing:    116.4 seconds, 55.7%
Report:              35.3 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 35514.67509999998
Test mean error for best: 17.75734
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 48.732100971  
Correct output: 10.0760954048  | Program output: 12.4397589637 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 7.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 9.6035663778  
Correct output: -28.253581966  | Program output: -62.253581966 
Correct output: 22.691883669   | Program output: 7.3661596849  
Correct output: -64.8098353824 | Program output: -47.8098353824
Correct output: -50.5729717288 | Program output: 7.3661596849  
Correct output: 10.5716307984  | Program output: 21.9352943572 
Correct output: -5.0640064942  | Program output: -16.0640064942
Correct output: -156.5700373509 | Program output: -120.5700373509
Correct output: 16.1193686865  | Program output: 7.3661596849  
Correct output: 50.1878349036  | Program output: 23.5514984625 
Correct output: -138.4095016371 | Program output: -71.4095016371
Correct output: -119.7462217731 | Program output: -101.7462217731
Correct output: -95.2566750864 | Program output: -26.2566750864
Correct output: 153.6667050749 | Program output: 158.3334101499
Correct output: 6.8630846811   | Program output: 7.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 46.7374026319 
Correct output: -49.1253212489 | Program output: 1.8746787511  
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 59.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction tagged_344} {:instruction print_integer} {:instruction float_pop} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_min} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_swap} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction tagged_9} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_rot})
Best program: (float_dup print_integer integer_fromfloat tagged_344 print_integer float_pop integer_min integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_inc integer_stackdepth float_mult integer_yankdup integer_min integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot float_sub integer_swap float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min integer_mult integer_flush tagged_971 float_dec integer_dup_items float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec integer_dup_times tagged_971 float_dec float_dec integer_stackdepth float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 -50 integer_pop integer_rot float_dup_items -50 integer_pop float_dup_items -50 integer_pop in2 float_min tagged_9 integer_dup_times print_float float_dup_items integer_shove float_rot)
Errors: [73.0 11 2.3637 11 20.0 2 6.6076 10 15.0 2 28.6363 11 34.0 2 15.3257 9 17.0 2 57.9391 13 11.3637 11 11.0 2 36.0 2 8.7532 10 26.6363 11 67.0 3 18.0 2 69.0 2 4.6667 9 0.5031 8 20.0 1 12.0 2 51.0 13 16.0 1 3.6363 12]
Total: 787.4317000000001
Mean: 15.748634
Genome size: 191
Size: 192
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4360.598631900001
Median total errors in population: 878.4522999999999
Error averages by case: (217.33529320000005 11.193 127.87840730000089 11.254 173.4687551 6.348 138.95107500000123 11.156 160.23313640000006 4.129 143.8115347999994 11.093 174.50113990000006 4.398 132.61804740000068 9.711 178.94980429999998 4.387 173.2994587999997 12.269 134.59492700000078 11.327 159.45492720000001 3.916 198.73036430000016 4.62 128.51714230000192 10.185 145.57596469999984 11.378 220.58625070000002 5.223 182.48772959999988 5.177 219.20932160000004 4.404 184.558631300001 9.808 128.86636110000086 9.603 167.54775629999997 4.159 171.497223 4.256 196.3168695000002 12.764 155.64738559999998 4.086 147.28312549999984 11.834)
Error minima by case: (3.0315 6 0.2901 7 11.6338 2 0.1131 8 0.0 0 0.3701 8 4.7464 1 0.0404 8 1.8098 1 0.573 2 0.2055 8 0.0 0 22.5401 1 0.7532 8 0.8242 8 4.5905 2 9.8661 2 0.2016 1 0.3333 1 0.4969 7 0.0 0 5.6874 1 0.8747 2 0.0 0 0.7298 1)
Average genome size in population (length): 174.775
Average program size in population (points): 175.775
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 59.39778382420263
Average age in population: 56.56352209842424
Median age in population: 57.15501565347131
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.566
Error (vector) diversity:			 0.753
Behavioral diversity:				 0.754
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 125010896
--- Timings ---
Current time: 1529616152959 milliseconds
Total Time:         215.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 27.2%
Fitness Testing:    120.6 seconds, 55.8%
Report:              36.5 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 34095.18959999998
Test mean error for best: 17.04759
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 41.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 10.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -54.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -23.0640064942
Correct output: -156.5700373509 | Program output: -127.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -78.4095016371
Correct output: -119.7462217731 | Program output: -108.7462217731
Correct output: -95.2566750864 | Program output: -33.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 39.7374026319 
Correct output: -49.1253212489 | Program output: -5.1253212489 
Correct output: 17.2744201056  | Program output: -5.7255798944 
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction tagged_971} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 50} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot tagged_971 float_shove float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min -50 integer_pop in2 50 integer_mult float_dec float_dec float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot float_rot integer_rot float_dup_items -50 -50 integer_pop float_dup_times float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [66.0 11 8.3637 11 20.0 2 12.6076 11 22.0 2 22.6363 11 24.0 2 9.3257 9 10.0 1 63.9391 13 17.3637 11 18.0 2 29.0 2 2.7532 9 20.6363 11 60.0 2 11.0 2 62.0 2 10.6667 10 6.5031 9 27.0 2 5.0 1 44.0 2 23.0 12 6.6363 12]
Total: 764.4317000000001
Mean: 15.288634
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4388.963339800002
Median total errors in population: 867.26215
Error averages by case: (203.66352200000009 11.118 147.87176809999977 11.293 195.07588899999996 6.35 153.3795955000002 11.12 146.5060524000001 3.912 160.6097198000004 11.106 166.66950619999994 4.253 148.99068329999938 9.796 164.3115943 4.147 187.3603792999987 12.28 154.1469020999996 11.346 149.53026629999997 3.662 184.17700750000017 4.343 144.63320330000232 10.234 164.55530580000078 11.388 206.22231269999983 5.005 168.20106089999987 4.888 207.35880170000007 4.141 194.85395860000085 9.79 144.3247097000007 9.597 156.64054400000003 3.937 155.2338811 4.03 182.40610390000003 12.53 141.5779490999999 4.084 164.45862320000083 11.854)
Error minima by case: (0.6423 9 0.1544 7 7.6338 2 0.0655 8 0.0 0 0.1238 8 8.2536 1 0.9596 8 0.8098 1 0.573 2 0.2055 7 0.0 0 29.0 1 0.7532 7 0.1758 7 1.4095 2 11.0 2 1.2567 1 0.3333 2 0.4284 7 0.0 0 5.0 1 0.8747 2 0.0 0 0.6374 1)
Average genome size in population (length): 174.804
Average program size in population (points): 175.804
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 60.78658098347114
Average age in population: 57.32910994231005
Median age in population: 58.46943462449235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.599
Error (vector) diversity:			 0.777
Behavioral diversity:				 0.779
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 129478458
--- Timings ---
Current time: 1529616159929 milliseconds
Total Time:         223.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        60.2 seconds, 27.0%
Fitness Testing:    124.8 seconds, 55.9%
Report:              37.9 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 34095.18959999998
Test mean error for best: 17.04759
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 41.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 10.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -54.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -23.0640064942
Correct output: -156.5700373509 | Program output: -127.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -78.4095016371
Correct output: -119.7462217731 | Program output: -108.7462217731
Correct output: -95.2566750864 | Program output: -33.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 39.7374026319 
Correct output: -49.1253212489 | Program output: -5.1253212489 
Correct output: 17.2744201056  | Program output: -5.7255798944 
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction tagged_971} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 50} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot tagged_971 float_shove float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min -50 integer_pop in2 50 integer_mult float_dec float_dec float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot float_rot integer_rot float_dup_items -50 -50 integer_pop float_dup_times float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [66.0 11 8.3637 11 20.0 2 12.6076 11 22.0 2 22.6363 11 24.0 2 9.3257 9 10.0 1 63.9391 13 17.3637 11 18.0 2 29.0 2 2.7532 9 20.6363 11 60.0 2 11.0 2 62.0 2 10.6667 10 6.5031 9 27.0 2 5.0 1 44.0 2 23.0 12 6.6363 12]
Total: 764.4317000000001
Mean: 15.288634
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3947.733666400003
Median total errors in population: 857.4491999999999
Error averages by case: (195.0610541 11.146 111.34799180000073 11.225 178.68000419999987 6.445 123.89443230000144 10.986 141.7722658000001 3.99 126.29877719999895 11.022 158.30167359999993 4.366 118.01114820000069 9.684 160.57920750000005 4.081 160.15754150000032 12.284 120.03244050000094 11.159 143.26093799999995 3.816 181.23100650000012 4.282 114.03937410000096 10.174 129.88371449999903 11.241 203.27075599999998 4.931 164.91939119999992 4.723 199.665642 4.073 170.4704199000009 9.75 114.1645600000006 9.451 151.46477359999994 3.932 148.36998900000006 4.098 170.3661606000001 12.17 134.7680885 4.568 132.29531579999917 11.83)
Error minima by case: (2.0741 7 0.2901 7 7.6338 2 0.0617 7 0.0 0 0.1238 7 8.6338 1 0.0404 8 0.1902 1 0.3637 2 0.0581 6 0.0 0 28.0 1 0.2468 8 0.0848 7 1.5905 2 10.0 1 2.7984 1 0.3333 2 0.4969 7 0.0 0 4.0 1 0.8163 1 0.0 0 0.2691 1)
Average genome size in population (length): 176.758
Average program size in population (points): 177.758
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 62.19938833502101
Average age in population: 58.9300245031175
Median age in population: 59.75464180761242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.642
Error (vector) diversity:			 0.812
Behavioral diversity:				 0.814
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 134012362
--- Timings ---
Current time: 1529616167047 milliseconds
Total Time:         230.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        61.7 seconds, 26.8%
Fitness Testing:    129.1 seconds, 56.1%
Report:              39.2 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 34110.18959999999
Test mean error for best: 17.05509
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 41.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 10.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -54.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -23.0640064942
Correct output: -156.5700373509 | Program output: -127.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -78.4095016371
Correct output: -119.7462217731 | Program output: -108.7462217731
Correct output: -95.2566750864 | Program output: -33.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 39.7374026319 
Correct output: -49.1253212489 | Program output: -5.1253212489 
Correct output: 17.2744201056  | Program output: -5.7255798944 
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction tagged_971} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 50} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot tagged_971 float_shove float_rot in2 float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min -50 integer_pop in2 50 integer_mult float_dec float_dec float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot float_rot integer_rot float_dup_items -50 -50 integer_pop float_dup_times float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [66.0 11 8.3637 11 20.0 2 12.6076 11 22.0 2 22.6363 11 24.0 2 9.3257 9 10.0 1 63.9391 13 17.3637 11 18.0 2 29.0 2 2.7532 9 20.6363 11 60.0 2 11.0 2 62.0 2 10.6667 10 6.5031 9 27.0 2 5.0 1 44.0 2 23.0 12 6.6363 12]
Total: 764.4317000000001
Mean: 15.288634
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4807.732659100002
Median total errors in population: 859.45605
Error averages by case: (220.03470660000002 11.184 153.91355509999948 11.331 223.38290969999946 6.841 161.65781089999913 11.068 170.8742532 4.236 169.89316570000148 11.127 186.81080420000006 4.547 159.73088899999843 9.889 185.96775 4.303 196.11806899999806 12.425 162.02061029999876 11.264 174.3088085000001 4.116 204.3450988000002 4.459 155.58761730000242 10.427 172.3220834000018 11.368 226.94016410000003 5.139 188.48094519999992 4.891 225.39483979999997 4.29 217.72935100000092 10.036 154.74798250000055 9.62 179.69060559999994 4.148 174.29822290000013 4.272 198.64297970000004 11.786 166.58496269999998 5.198 178.17747390000187 12.112)
Error minima by case: (2.7321 6 0.2901 7 6.6338 1 0.2414 8 0.0 0 0.1238 7 1.2536 1 0.0404 8 1.1902 1 0.427 2 0.2055 7 0.0 0 28.0 1 0.7532 9 0.0523 7 2.5905 2 10.0 1 2.2198 1 0.3333 2 0.1369 7 0.0 0 1.7374 1 0.8747 1 0.0 0 0.2691 2)
Average genome size in population (length): 176.549
Average program size in population (points): 177.549
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 63.22657301106346
Average age in population: 60.25882906213139
Median age in population: 61.00747551030486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.618
Error (vector) diversity:			 0.805
Behavioral diversity:				 0.807
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 138557115
--- Timings ---
Current time: 1529616174376 milliseconds
Total Time:         237.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        63.1 seconds, 26.6%
Fitness Testing:    133.6 seconds, 56.3%
Report:              40.4 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 34095.18959999998
Test mean error for best: 17.04759
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 41.732100971  
Correct output: 10.0760954048  | Program output: 18.4397589637 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 10.0892717501 
Correct output: 38.239902819   | Program output: 15.6035663778 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -54.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.9352943572 
Correct output: -5.0640064942  | Program output: -23.0640064942
Correct output: -156.5700373509 | Program output: -127.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.5514984625 
Correct output: -138.4095016371 | Program output: -78.4095016371
Correct output: -119.7462217731 | Program output: -108.7462217731
Correct output: -95.2566750864 | Program output: -33.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 39.7374026319 
Correct output: -49.1253212489 | Program output: -5.1253212489 
Correct output: 17.2744201056  | Program output: -5.7255798944 
Correct output: 62.9989442076  | Program output: 56.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction tagged_971} {:instruction float_shove} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction 50} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction -50} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot tagged_971 float_shove float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec -50 integer_pop in2 float_min -50 integer_pop in2 50 integer_mult float_dec float_dec float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot float_rot integer_rot float_dup_items -50 -50 integer_pop float_dup_times float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [66.0 11 8.3637 11 20.0 2 12.6076 11 22.0 2 22.6363 11 24.0 2 9.3257 9 10.0 1 63.9391 13 17.3637 11 18.0 2 29.0 2 2.7532 9 20.6363 11 60.0 2 11.0 2 62.0 2 10.6667 10 6.5031 9 27.0 2 5.0 1 44.0 2 23.0 12 6.6363 12]
Total: 764.4317000000001
Mean: 15.288634
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5546.7476254
Median total errors in population: 870.60555
Error averages by case: (253.31259130000012 11.283 180.8762795999993 11.352 233.25281029999937 7.194 189.907480299999 11.001 207.19305799999995 4.718 197.4318188000015 11.017 214.8236203000001 4.923 187.93808649999838 9.921 220.57531509999993 4.81 222.0112147999981 12.286 187.50510559999842 11.264 208.44334120000002 4.563 240.12967040000018 5.02 184.6742372000022 10.443 198.46117040000195 11.355 261.2799163000001 5.668 224.8932604999999 5.339 257.9583538000001 4.823 226.92196610000093 9.871 181.87521890000053 9.603 216.50663420000006 4.59 209.2088719000001 4.792 234.33985180000008 11.311 204.3004840999999 6.135 197.66526800000184 11.98)
Error minima by case: (1.8045 7 0.0761 7 7.6338 1 0.0278 7 0.0 0 0.6363 7 0.3662 1 0.0404 7 5.1902 1 0.3637 2 0.2055 7 0.0 0 25.0 1 0.2468 8 0.096 7 6.5905 2 7.0 1 1.7896 1 0.3333 2 0.3496 7 0.0 0 1.0 1 1.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 177.549
Average program size in population (points): 178.549
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 64.20574321045194
Average age in population: 61.38378161259407
Median age in population: 62.35103144680767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.629
Error (vector) diversity:			 0.789
Behavioral diversity:				 0.792
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 143135130
--- Timings ---
Current time: 1529616181342 milliseconds
Total Time:         244.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        64.6 seconds, 26.4%
Fitness Testing:    137.9 seconds, 56.4%
Report:              41.9 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 33759.03479999998
Test mean error for best: 16.87952
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 40.732100971  
Correct output: 10.0760954048  | Program output: 15.4397589637 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 19.0892717501 
Correct output: 38.239902819   | Program output: 12.6035663778 
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -55.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 24.9352943572 
Correct output: -5.0640064942  | Program output: -24.0640064942
Correct output: -156.5700373509 | Program output: -128.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 26.5514984625 
Correct output: -138.4095016371 | Program output: -79.4095016371
Correct output: -119.7462217731 | Program output: -109.7462217731
Correct output: -95.2566750864 | Program output: -34.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -29.6640417064
Correct output: 34.7374026319  | Program output: 38.7374026319 
Correct output: -49.1253212489 | Program output: -6.1253212489 
Correct output: 17.2744201056  | Program output: 3.2744201056  
Correct output: 62.9989442076  | Program output: 53.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [65.0 11 5.3637 11 23.0 3 9.6076 10 13.0 2 25.6363 11 32.0 2 12.3257 9 9.0 2 60.9391 12 14.3637 11 19.0 2 28.0 2 5.7532 9 23.6363 11 59.0 3 10.0 1 61.0 2 7.6667 10 3.5031 9 24.0 2 4.0 1 43.0 2 14.0 2 9.6363 12]
Total: 734.4317000000001
Mean: 14.688634
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5212.875200300001
Median total errors in population: 867.74135
Error averages by case: (234.24601460000005 11.226 172.63428589999918 11.34 235.47671939999938 7.121 184.69855309999795 10.996 187.47899850000002 4.44 186.52796250000188 11.038 206.08513480000008 4.704 179.16393699999767 9.936 197.87399509999992 4.517 216.39534939999737 12.312 178.89949719999785 11.209 189.51028750000003 4.285 218.0536986000002 4.71 175.6982483000025 10.447 189.70592750000225 11.374 240.0368783 5.361 201.4017669999999 4.961 239.23695649999996 4.519 227.8036921000009 9.68 175.0387036000003 9.569 196.39586930000002 4.301 188.93815930000014 4.484 216.59599050000008 10.607 183.11591809999985 6.552 190.19765620000194 11.976)
Error minima by case: (2.2679 7 0.1571 6 4.1194 1 0.0617 6 0.0 0 0.1238 7 6.2704 1 0.0404 8 0.9554 1 0.2815 2 0.0975 7 0.0 0 23.0 1 0.0995 8 0.1758 7 5.5905 2 5.0 1 3.2016 1 0.3333 2 0.4426 7 0.0 0 0.2458 1 0.8747 1 0.0 0 0.2691 1)
Average genome size in population (length): 176.695
Average program size in population (points): 177.695
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 65.54413978834441
Average age in population: 62.18948943989287
Median age in population: 63.67405010154047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.653
Error (vector) diversity:			 0.799
Behavioral diversity:				 0.803
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 147693579
--- Timings ---
Current time: 1529616188511 milliseconds
Total Time:         251.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        66.0 seconds, 26.2%
Fitness Testing:    142.3 seconds, 56.6%
Report:              43.2 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 33759.03479999998
Test mean error for best: 16.87952
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 40.732100971  
Correct output: 10.0760954048  | Program output: 15.4397589637 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 19.0892717501 
Correct output: 38.239902819   | Program output: 12.6035663778 
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -55.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 24.9352943572 
Correct output: -5.0640064942  | Program output: -24.0640064942
Correct output: -156.5700373509 | Program output: -128.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 26.5514984625 
Correct output: -138.4095016371 | Program output: -79.4095016371
Correct output: -119.7462217731 | Program output: -109.7462217731
Correct output: -95.2566750864 | Program output: -34.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -29.6640417064
Correct output: 34.7374026319  | Program output: 38.7374026319 
Correct output: -49.1253212489 | Program output: -6.1253212489 
Correct output: 17.2744201056  | Program output: 3.2744201056  
Correct output: 62.9989442076  | Program output: 53.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [65.0 11 5.3637 11 23.0 3 9.6076 10 13.0 2 25.6363 11 32.0 2 12.3257 9 9.0 2 60.9391 12 14.3637 11 19.0 2 28.0 2 5.7532 9 23.6363 11 59.0 3 10.0 1 61.0 2 7.6667 10 3.5031 9 24.0 2 4.0 1 43.0 2 14.0 2 9.6363 12]
Total: 734.4317000000001
Mean: 14.688634
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5194.0282221
Median total errors in population: 867.942
Error averages by case: (245.46891260000007 11.203 158.47305009999937 11.23 219.86025219999954 7.335 172.42449159999933 10.96 200.0496157 4.475 171.64563880000088 11.011 198.95817000000002 4.779 164.0945155999988 9.831 213.75973569999996 4.507 206.57021399999866 12.354 163.10378689999902 11.161 203.19783590000003 4.371 231.1042319 4.72 161.02576920000212 10.286 172.21230660000126 11.298 253.46729370000006 5.341 216.8534646999999 4.941 251.82384910000005 4.498 209.48159710000098 9.755 162.84125700000047 9.512 211.75931989999998 4.292 201.5718406000001 4.437 228.56470290000019 9.564 200.9115450999999 7.498 173.5068252000011 11.939)
Error minima by case: (1.5358 7 0.0605 7 5.6338 2 0.1261 8 0.0 0 1.1238 8 1.2536 1 0.9596 8 7.0 1 2.3637 2 0.2055 8 0.0 0 26.0 1 0.2468 8 0.0848 7 0.4095 2 8.0 1 5.2567 1 0.3333 1 0.1369 7 0.0 0 2.0 1 6.0143 1 0.0 0 0.2691 2)
Average genome size in population (length): 178.936
Average program size in population (points): 179.936
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 66.80501616764977
Average age in population: 63.85499989163354
Median age in population: 64.96544071488015
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.659
Error (vector) diversity:			 0.812
Behavioral diversity:				 0.814
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 152310336
--- Timings ---
Current time: 1529616195481 milliseconds
Total Time:         258.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        67.4 seconds, 26.1%
Fitness Testing:    146.7 seconds, 56.7%
Report:              44.5 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 33781.338799999976
Test mean error for best: 16.89067
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 40.732100971  
Correct output: 10.0760954048  | Program output: 14.4397589637 
Correct output: 106.0206148688 | Program output: 82.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 19.0892717501 
Correct output: 38.239902819   | Program output: 11.6035663778 
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -55.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 23.9352943572 
Correct output: -5.0640064942  | Program output: -24.0640064942
Correct output: -156.5700373509 | Program output: -128.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 25.5514984625 
Correct output: -138.4095016371 | Program output: -79.4095016371
Correct output: -119.7462217731 | Program output: -109.7462217731
Correct output: -95.2566750864 | Program output: -34.2566750864
Correct output: 153.6667050749 | Program output: 160.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -29.6640417064
Correct output: 34.7374026319  | Program output: 38.7374026319 
Correct output: -49.1253212489 | Program output: -6.1253212489 
Correct output: 17.2744201056  | Program output: 3.2744201056  
Correct output: 62.9989442076  | Program output: 52.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add integer_add integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [65.0 11 4.3637 11 24.0 3 9.6076 10 13.0 2 26.6363 11 32.0 2 12.3257 9 9.0 2 60.9391 12 13.3637 11 19.0 2 28.0 2 5.7532 9 24.6363 11 59.0 3 10.0 1 61.0 2 6.6667 10 3.5031 9 24.0 2 4.0 1 43.0 2 14.0 2 10.6363 11]
Total: 734.4317000000001
Mean: 14.688634
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5654.7275896
Median total errors in population: 866.2518500000001
Error averages by case: (250.15115960000008 11.22 184.48868049999936 11.396 244.6416183999996 7.171 200.67967639999904 11.136 208.96963950000003 4.688 199.98902930000122 11.09 226.20387269999998 4.992 193.90099859999845 9.965 221.28027529999991 4.734 233.38791209999832 12.364 190.57496679999878 11.289 214.75690879999993 4.61 237.97424440000012 4.923 190.82348020000194 10.466 200.7328564000014 11.378 260.7890167000001 5.576 223.7669304999999 5.13 258.42724209999994 4.735 234.8831933000008 9.895 191.70239010000037 9.709 222.40548030000005 4.52 207.08572300000012 4.707 236.63779360000007 8.912 213.59565619999992 8.314 202.0458448000012 11.913)
Error minima by case: (0.2141 6 0.0796 6 5.6338 1 0.0478 7 0.0 0 0.1238 7 4.2536 1 0.0404 8 1.8098 1 0.3637 2 0.0688 8 0.0 0 6.0 1 0.2468 8 0.1758 7 9.4095 2 6.0 1 3.3938 1 0.3333 2 0.1369 7 1.0 1 0.0 0 2.5372 1 0.5451 1 0.2691 1)
Average genome size in population (length): 178.418
Average program size in population (points): 179.418
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 68.29896551128574
Average age in population: 64.43150137735643
Median age in population: 66.29912380485486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.669
Error (vector) diversity:			 0.809
Behavioral diversity:				 0.811
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 156915298
--- Timings ---
Current time: 1529616202694 milliseconds
Total Time:         265.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        68.8 seconds, 25.9%
Fitness Testing:    151.2 seconds, 56.9%
Report:              45.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 33636.03479999998
Test mean error for best: 16.81802
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 39.732100971  
Correct output: 10.0760954048  | Program output: 15.4397589637 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 12.6035663778 
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -56.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 24.9352943572 
Correct output: -5.0640064942  | Program output: -25.0640064942
Correct output: -156.5700373509 | Program output: -129.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 26.5514984625 
Correct output: -138.4095016371 | Program output: -80.4095016371
Correct output: -119.7462217731 | Program output: -110.7462217731
Correct output: -95.2566750864 | Program output: -35.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 37.7374026319 
Correct output: -49.1253212489 | Program output: -7.1253212489 
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 53.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush float_dup float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [64.0 11 5.3637 11 23.0 3 9.6076 10 14.0 2 25.6363 11 33.0 2 12.3257 9 8.0 2 60.9391 12 14.3637 11 20.0 1 27.0 2 5.7532 9 23.6363 11 58.0 3 9.0 1 60.0 1 7.6667 10 3.5031 9 25.0 2 3.0 1 42.0 2 15.0 2 9.6363 12]
Total: 729.4317000000001
Mean: 14.588634
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5990.858112100001
Median total errors in population: 867.59895
Error averages by case: (260.06045350000005 11.218 198.66984339999883 11.348 267.0976085999994 7.628 211.6654133999984 11.168 219.46377720000004 4.767 213.08713140000148 11.1 234.30386620000002 5.159 205.2230423999979 9.938 232.78246689999995 4.868 245.59312769999786 12.492 204.4429846999983 11.237 226.15372420000006 4.696 252.3498783000002 5.093 201.93859390000233 10.444 214.2856755000019 11.378 273.5862776 5.722 236.44435839999997 5.19 271.2982282000001 4.914 264.5647284000009 10.214 203.23164940000032 9.743 234.44030149999998 4.674 216.4826895000001 4.674 250.09162320000004 7.676 226.38228019999994 9.474 220.38738840000192 12.016)
Error minima by case: (0.2679 7 0.2901 7 6.6338 2 0.1672 8 0.0 0 2.1238 7 4.8358 1 0.9596 7 2.8371 1 0.6363 2 0.2055 7 0.0 0 20.1159 1 0.7298 8 0.8242 7 0.1776 2 6.0 1 5.2567 1 0.3333 2 0.2386 6 0.0 0 0.0 0 12.8474 1 0.0 0 0.2702 2)
Average genome size in population (length): 178.338
Average program size in population (points): 179.338
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 69.51086957277666
Average age in population: 65.3791632008429
Median age in population: 67.57694880065127
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.672
Error (vector) diversity:			 0.786
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 161521302
--- Timings ---
Current time: 1529616209759 milliseconds
Total Time:         272.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        70.3 seconds, 25.7%
Fitness Testing:    155.6 seconds, 57.0%
Report:              46.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 33636.03479999998
Test mean error for best: 16.81802
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 39.732100971  
Correct output: 10.0760954048  | Program output: 15.4397589637 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 12.6035663778 
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -56.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 24.9352943572 
Correct output: -5.0640064942  | Program output: -25.0640064942
Correct output: -156.5700373509 | Program output: -129.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 26.5514984625 
Correct output: -138.4095016371 | Program output: -80.4095016371
Correct output: -119.7462217731 | Program output: -110.7462217731
Correct output: -95.2566750864 | Program output: -35.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 37.7374026319 
Correct output: -49.1253212489 | Program output: -7.1253212489 
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 53.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush float_dup float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [64.0 11 5.3637 11 23.0 3 9.6076 10 14.0 2 25.6363 11 33.0 2 12.3257 9 8.0 2 60.9391 12 14.3637 11 20.0 1 27.0 2 5.7532 9 23.6363 11 58.0 3 9.0 1 60.0 1 7.6667 10 3.5031 9 25.0 2 3.0 1 42.0 2 15.0 2 9.6363 12]
Total: 729.4317000000001
Mean: 14.588634
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5491.6585533
Median total errors in population: 858.3009
Error averages by case: (243.7864484 11.161 183.02119049999877 11.223 252.18338209999933 7.645 193.06480809999832 11.063 200.94690559999995 4.609 197.158989700002 11.052 210.49268699999996 4.923 187.04392259999747 9.879 208.2416354999999 4.722 227.6816772999975 12.475 193.05839009999795 11.151 201.612703 4.576 229.71623830000016 4.912 183.95197280000238 10.363 200.6629097000021 11.289 251.01162370000006 5.566 212.2945091999999 5.018 247.33841239999995 4.765 237.3342723000009 10.048 183.96674070000049 9.616 209.42676440000005 4.546 199.8506139000003 4.485 225.92152000000016 7.168 201.2814356 9.713 206.76980040000208 11.871)
Error minima by case: (0.2158 6 0.0796 6 6.6338 1 0.3924 8 0.0 0 0.1238 8 4.1355 1 0.9596 8 4.0 1 1.6363 2 0.2055 7 0.0 0 23.0 1 0.613 8 0.1758 7 5.4095 2 5.0 1 0.2016 1 0.3333 2 0.2386 7 0.3427 1 0.0 0 0.8241 1 0.0 0 0.2691 1)
Average genome size in population (length): 180.916
Average program size in population (points): 181.916
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 71.16223419252334
Average age in population: 67.35739973430987
Median age in population: 68.97256300924143
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.691
Error (vector) diversity:			 0.814
Behavioral diversity:				 0.816
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 166196166
--- Timings ---
Current time: 1529616216976 milliseconds
Total Time:         280.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        71.8 seconds, 25.6%
Fitness Testing:    160.0 seconds, 57.1%
Report:              48.2 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 33745.15479999998
Test mean error for best: 16.87258
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 39.732100971  
Correct output: 10.0760954048  | Program output: 15.4397589637 
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 12.6035663778 
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -56.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 24.9352943572 
Correct output: -5.0640064942  | Program output: -25.0640064942
Correct output: -156.5700373509 | Program output: -129.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 26.5514984625 
Correct output: -138.4095016371 | Program output: -80.4095016371
Correct output: -119.7462217731 | Program output: -110.7462217731
Correct output: -95.2566750864 | Program output: -35.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 37.7374026319 
Correct output: -49.1253212489 | Program output: -7.1253212489 
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 53.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.74456319628908} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_yankdup} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush float_dup float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.74456319628908 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_yankdup -51 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [64.0 11 5.3637 11 22.0 3 9.6076 10 14.0 2 25.6363 11 33.0 2 12.3257 9 8.0 2 60.9391 12 14.3637 11 20.0 1 27.0 2 5.7532 9 23.6363 11 58.0 3 9.0 1 60.0 1 7.6667 10 3.5031 9 25.0 2 3.0 1 42.0 2 15.0 2 9.6363 12]
Total: 728.4317000000001
Mean: 14.568634
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6153.0115921
Median total errors in population: 848.9522999999999
Error averages by case: (270.8031988000001 11.292 211.3459469999988 11.373 273.24351229999905 8.05 220.63586049999822 11.172 229.6815665 4.79 224.16946700000167 11.19 248.40878040000004 5.399 215.80823439999745 10.036 235.94607879999992 4.952 253.47906099999744 12.624 216.94229969999805 11.279 227.39398070000001 4.851 254.56594470000013 5.157 212.2800709000023 10.52 225.82290960000213 11.399 276.08550160000016 5.804 239.1965122999999 5.143 270.6799087 4.992 253.67206300000078 10.273 213.33075130000026 9.783 236.52175100000002 4.735 226.87047870000015 4.582 252.56071520000015 6.722 230.12052369999992 10.402 225.04347430000215 11.883)
Error minima by case: (0.2679 7 0.0037 6 5.6338 2 0.0414 9 0.0 0 0.3195 8 4.2536 1 0.9596 7 1.0 1 1.3637 2 0.2055 8 0.0 0 20.0 1 0.2468 8 0.1758 7 5.5905 2 2.0 1 5.7433 1 0.3333 1 0.2386 7 0.336 1 0.0 0 7.8747 1 0.0 0 0.2691 1)
Average genome size in population (length): 180.406
Average program size in population (points): 181.406
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 72.26575752787392
Average age in population: 67.8784645999336
Median age in population: 70.09170032081454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.671
Error (vector) diversity:			 0.778
Behavioral diversity:				 0.78
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 170855972
--- Timings ---
Current time: 1529616224083 milliseconds
Total Time:         287.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        73.2 seconds, 25.5%
Fitness Testing:    164.6 seconds, 57.3%
Report:              49.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 33299.90039999998
Test mean error for best: 16.64995
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 36.732100971  
Correct output: 10.0760954048  | Program output: 13.4397589637 
Correct output: 106.0206148688 | Program output: 82.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 16.0892717501 
Correct output: 38.239902819   | Program output: 10.6035663778 
Correct output: -28.253581966  | Program output: -63.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -59.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 22.9352943572 
Correct output: -5.0640064942  | Program output: -28.0640064942
Correct output: -156.5700373509 | Program output: -132.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 24.5514984625 
Correct output: -138.4095016371 | Program output: -83.4095016371
Correct output: -119.7462217731 | Program output: -113.7462217731
Correct output: -95.2566750864 | Program output: -38.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 34.7374026319 
Correct output: -49.1253212489 | Program output: -10.1253212489
Correct output: 17.2744201056  | Program output: 0.2744201056  
Correct output: 62.9989442076  | Program output: 51.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.74456319628908} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_yankdup} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_816} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush float_dup float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.74456319628908 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_yankdup -51 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec integer_div float_dec float_dec tagged_816 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [61.0 11 3.3637 11 24.0 3 7.6076 10 16.0 2 27.6363 11 35.0 2 14.3257 9 5.0 2 58.9391 13 12.3637 11 23.0 2 24.0 2 7.7532 10 25.6363 11 55.0 2 6.0 1 57.0 2 5.6667 9 1.5031 8 27.0 2 0.0 0 39.0 2 17.0 2 11.6363 12]
Total: 715.4317000000001
Mean: 14.308634
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6216.2562688
Median total errors in population: 879.0790999999999
Error averages by case: (272.5391122 11.289 212.2257642999989 11.346 272.869296599999 8.067 221.61187799999817 11.188 232.3191493 4.88 227.31822780000152 11.149 249.1531868 5.342 217.2296171999979 10.065 241.34747489999995 5.018 251.72226419999765 12.505 217.41876429999837 11.354 233.3793266000001 4.859 259.04683870000014 5.23 213.45923040000218 10.5 228.3712785000019 11.409 280.47830190000013 5.856 244.39119099999996 5.194 276.25423950000004 5.027 254.02037800000093 10.174 213.81624370000054 9.832 243.6581583999999 4.785 230.12827260000014 4.568 253.93572740000016 6.871 233.86746919999982 10.234 227.01987730000178 11.933)
Error minima by case: (1.5287 7 0.0796 6 4.6338 2 0.2414 8 0.0 0 1.3701 8 4.1232 1 0.9596 8 0.0 0 0.0796 2 0.2055 8 0.0 0 18.0 1 0.7532 7 0.4946 7 8.5905 2 0.0 0 0.2016 1 0.3333 2 0.4631 6 0.0 0 0.0 0 0.7955 1 1.0 1 0.2691 2)
Average genome size in population (length): 180.443
Average program size in population (points): 181.443
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 73.24757191969042
Average age in population: 69.08299782777593
Median age in population: 71.3417240405992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.696
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.792
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 175519165
--- Timings ---
Current time: 1529616231219 milliseconds
Total Time:         294.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        74.6 seconds, 25.4%
Fitness Testing:    169.0 seconds, 57.4%
Report:              50.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 33299.90039999998
Test mean error for best: 16.64995
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 36.732100971  
Correct output: 10.0760954048  | Program output: 13.4397589637 
Correct output: 106.0206148688 | Program output: 82.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 16.0892717501 
Correct output: 38.239902819   | Program output: 10.6035663778 
Correct output: -28.253581966  | Program output: -63.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -59.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 22.9352943572 
Correct output: -5.0640064942  | Program output: -28.0640064942
Correct output: -156.5700373509 | Program output: -132.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 24.5514984625 
Correct output: -138.4095016371 | Program output: -83.4095016371
Correct output: -119.7462217731 | Program output: -113.7462217731
Correct output: -95.2566750864 | Program output: -38.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 34.7374026319 
Correct output: -49.1253212489 | Program output: -10.1253212489
Correct output: 17.2744201056  | Program output: 0.2744201056  
Correct output: 62.9989442076  | Program output: 51.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.74456319628908} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_yankdup} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_816} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush float_dup float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.74456319628908 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_yankdup -51 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec integer_div float_dec float_dec tagged_816 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [61.0 11 3.3637 11 24.0 3 7.6076 10 16.0 2 27.6363 11 35.0 2 14.3257 9 5.0 2 58.9391 13 12.3637 11 23.0 2 24.0 2 7.7532 10 25.6363 11 55.0 2 6.0 1 57.0 2 5.6667 9 1.5031 8 27.0 2 0.0 0 39.0 2 17.0 2 11.6363 12]
Total: 715.4317000000001
Mean: 14.308634
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5647.7948047
Median total errors in population: 848.67395
Error averages by case: (245.71064170000008 11.225 192.5656902999986 11.278 256.4005412999986 7.825 202.42209089999795 11.126 207.30989499999978 4.664 207.04960910000173 11.129 225.22811199999998 5.328 196.85264789999727 9.974 212.34576389999987 4.769 236.79387549999697 12.584 198.45291699999817 11.234 209.8127922 4.635 230.06725330000015 4.946 193.3588498000027 10.462 208.64960930000228 11.35 252.70886590000012 5.641 214.82262589999988 4.864 249.1661736 4.799 239.56955060000092 10.057 194.6170013000003 9.714 217.07972420000002 4.578 201.88936510000022 4.362 228.63979940000033 6.451 210.21186849999998 10.243 211.0385410000019 11.793)
Error minima by case: (0.58 9 0.0796 6 6.6338 2 0.1341 8 0.0 0 0.3195 7 2.7464 1 0.904 8 0.0 0 0.3637 2 0.1716 8 0.0 0 18.0 1 0.2468 7 0.1758 7 5.4095 2 0.0 0 2.2016 1 0.3333 2 0.0183 6 0.0 0 0.0 0 2.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.305
Average program size in population (points): 181.305
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 74.4137263315712
Average age in population: 70.6155172543779
Median age in population: 72.63926443793898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.727
Error (vector) diversity:			 0.808
Behavioral diversity:				 0.809
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 180181546
--- Timings ---
Current time: 1529616238501 milliseconds
Total Time:         301.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        76.1 seconds, 25.2%
Fitness Testing:    173.4 seconds, 57.5%
Report:              51.8 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 33299.90039999998
Test mean error for best: 16.64995
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 36.732100971  
Correct output: 10.0760954048  | Program output: 13.4397589637 
Correct output: 106.0206148688 | Program output: 82.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 16.0892717501 
Correct output: 38.239902819   | Program output: 10.6035663778 
Correct output: -28.253581966  | Program output: -63.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -59.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 22.9352943572 
Correct output: -5.0640064942  | Program output: -28.0640064942
Correct output: -156.5700373509 | Program output: -132.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 24.5514984625 
Correct output: -138.4095016371 | Program output: -83.4095016371
Correct output: -119.7462217731 | Program output: -113.7462217731
Correct output: -95.2566750864 | Program output: -38.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 34.7374026319 
Correct output: -49.1253212489 | Program output: -10.1253212489
Correct output: 17.2744201056  | Program output: 0.2744201056  
Correct output: 62.9989442076  | Program output: 51.3626077664 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction float_dup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.74456319628908} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_yankdup} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_816} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush float_dup float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.3636635588378 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.74456319628908 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_yankdup -51 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec integer_div float_dec float_dec tagged_816 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [61.0 11 3.3637 11 24.0 3 7.6076 10 16.0 2 27.6363 11 35.0 2 14.3257 9 5.0 2 58.9391 13 12.3637 11 23.0 2 24.0 2 7.7532 10 25.6363 11 55.0 2 6.0 1 57.0 2 5.6667 9 1.5031 8 27.0 2 0.0 0 39.0 2 17.0 2 11.6363 12]
Total: 715.4317000000001
Mean: 14.308634
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5781.6367267000005
Median total errors in population: 851.09125
Error averages by case: (251.10355780000003 11.241 195.8968966999989 11.238 261.07751669999885 7.897 203.36936859999827 11.027 214.23538559999986 4.725 210.4024449000018 11.019 233.03472169999998 5.4 199.76505029999765 9.867 217.90827429999993 4.8 237.41093669999728 12.512 203.61542249999806 11.213 218.39603170000004 4.68 236.50152860000017 5.034 195.87683150000248 10.417 214.2100049000024 11.298 257.76669610000016 5.697 221.06205829999982 4.84 256.47966219999995 4.816 245.0326147000009 10.075 195.40056470000036 9.58 226.33034130000007 4.627 209.08739870000008 4.369 238.45994600000014 6.34 220.74145999999993 10.216 213.8300122000021 11.714)
Error minima by case: (0.2679 8 0.0796 6 7.7323 2 0.0288 8 0.0 0 1.3051 7 0.7464 1 0.096 8 0.0 0 0.3637 2 0.2055 8 0.0 0 17.0 1 0.2468 8 0.1758 7 2.4095 2 0.0 0 2.7984 1 0.3333 1 0.1636 6 0.0 0 0.0 0 1.8259 1 0.0 0 0.2702 2)
Average genome size in population (length): 180.951
Average program size in population (points): 181.951
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 76.11898911956357
Average age in population: 72.11272016130268
Median age in population: 73.9639470156531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.714
Error (vector) diversity:			 0.801
Behavioral diversity:				 0.804
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 184862885
--- Timings ---
Current time: 1529616245742 milliseconds
Total Time:         308.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        77.5 seconds, 25.1%
Fitness Testing:    178.0 seconds, 57.6%
Report:              53.2 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 33002.83980000002
Test mean error for best: 16.50142
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 38.732100971  
Correct output: 10.0760954048  | Program output: 15.996534284  
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 13.1603416982 
Correct output: -28.253581966  | Program output: -62.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 25.4920696776 
Correct output: -5.0640064942  | Program output: -26.0640064942
Correct output: -156.5700373509 | Program output: -130.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 27.1082737828 
Correct output: -138.4095016371 | Program output: -81.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -36.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -31.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -8.1253212489 
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 53.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_yankdup integer_fromfloat integer_dup_times float_dec float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_max float_add float_inc integer_stackdepth float_mult in2 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 float_max float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [63.0 11 5.9204 9 22.0 3 9.6076 10 15.0 2 25.0796 11 34.0 2 12.3257 9 7.0 2 60.9391 12 14.9204 11 21.0 2 26.0 2 5.7532 9 23.0796 10 57.0 3 8.0 1 59.0 2 8.6667 10 3.5031 9 26.0 2 2.0 1 41.0 2 16.0 1 9.0796 9]
Total: 720.8750000000001
Mean: 14.4175
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5534.1550277
Median total errors in population: 859.47305
Error averages by case: (240.53821670000005 11.266 191.01050359999925 11.239 245.78910689999873 7.86 192.58520499999892 11.131 205.38552190000001 4.654 205.34038860000126 11.12 221.92104329999995 5.306 191.98582569999826 9.918 207.24414759999985 4.706 226.37633799999793 12.45 197.53206249999855 11.289 208.3193887 4.637 226.06933890000016 4.983 187.6900532000022 10.496 208.00645460000172 11.341 247.83769400000008 5.602 211.19714279999994 4.734 245.30206209999997 4.739 227.63767210000094 9.878 185.8739489000003 9.708 214.14955879999994 4.532 198.6873601000001 4.256 228.31359770000014 6.277 210.81249499999993 10.143 204.55690100000135 11.728)
Error minima by case: (0.0514 7 0.0796 7 9.6338 2 0.1341 8 0.0 0 0.1238 7 1.2536 1 0.0404 7 0.0 0 0.0796 2 0.2055 8 0.0 0 18.0 1 1.613 8 0.0848 6 3.4095 2 0.0 0 0.5794 1 0.3333 2 0.2161 7 0.0 0 0.0 0 2.8747 1 0.0 0 0.2691 1)
Average genome size in population (length): 181.082
Average program size in population (points): 182.082
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 77.64697328275902
Average age in population: 74.07374715641706
Median age in population: 75.38229897383056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.72
Error (vector) diversity:			 0.806
Behavioral diversity:				 0.808
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 189552110
--- Timings ---
Current time: 1529616252992 milliseconds
Total Time:         316.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.0 seconds, 25.0%
Fitness Testing:    182.5 seconds, 57.7%
Report:              54.5 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 33574.19510000003
Test mean error for best: 16.78710
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 39.732100971  
Correct output: 10.0760954048  | Program output: 10.996534284  
Correct output: 106.0206148688 | Program output: 79.0206148688 
Correct output: 0.7585604003   | Program output: 6.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 8.1603416982  
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 6.3661596849  
Correct output: -64.8098353824 | Program output: -56.8098353824
Correct output: -50.5729717288 | Program output: 6.3661596849  
Correct output: 10.5716307984  | Program output: 20.4920696776 
Correct output: -5.0640064942  | Program output: -25.0640064942
Correct output: -156.5700373509 | Program output: -129.5700373509
Correct output: 16.1193686865  | Program output: 6.3661596849  
Correct output: 50.1878349036  | Program output: 22.1082737828 
Correct output: -138.4095016371 | Program output: -80.4095016371
Correct output: -119.7462217731 | Program output: -110.7462217731
Correct output: -95.2566750864 | Program output: -35.2566750864
Correct output: 153.6667050749 | Program output: 157.3334101499
Correct output: 6.8630846811   | Program output: 6.3661596849  
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 37.7374026319 
Correct output: -49.1253212489 | Program output: -7.1253212489 
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 48.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_min} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_712} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_flush float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_shove integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items float_pop float_min integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_mult integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_pop -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_712 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec integer_stackdepth float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec float_dec float_dec -51 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [64.0 11 0.9204 8 27.0 3 5.6076 10 14.0 2 30.0796 10 33.0 2 16.3257 9 8.0 2 56.9391 13 9.9204 10 20.0 1 27.0 2 9.7532 9 28.0796 10 58.0 3 9.0 1 60.0 1 3.6667 9 0.4969 7 25.0 2 3.0 1 42.0 2 15.0 2 14.0796 9]
Total: 719.8688000000001
Mean: 14.397376
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 5373.320608200001
Median total errors in population: 848.39555
Error averages by case: (231.22130570000013 11.228 178.15620429999933 11.102 239.0892029999993 7.628 192.2877913999985 11.083 193.77208739999995 4.523 193.8307147000012 11.041 210.5449707 5.159 185.07726979999805 9.932 204.51018209999987 4.54 224.14957559999795 12.347 183.5909390999986 11.242 203.38333960000003 4.466 224.1349628000001 4.831 181.5295489000022 10.46 194.65432970000182 11.223 245.61820710000018 5.456 208.20792189999986 4.624 244.06040720000001 4.614 229.9860519000009 10.051 183.08288460000028 9.666 210.63002270000004 4.409 188.75602400000014 4.15 222.70934280000017 6.207 203.26943879999985 9.746 195.78488240000158 11.555)
Error minima by case: (0.9782 7 0.0796 7 5.6338 2 0.0715 8 0.0 0 0.3637 8 4.2536 1 1.9596 7 0.0 0 0.6363 2 0.2055 8 0.0 0 15.0 1 0.7532 8 0.1758 7 9.4095 2 0.0 0 1.7433 1 0.3333 2 0.4969 6 0.0 0 0.0 0 3.9139 1 0.0 0 0.2691 1)
Average genome size in population (length): 180.521
Average program size in population (points): 181.521
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 78.89376451756684
Average age in population: 74.96181024325843
Median age in population: 76.653539131232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.717
Error (vector) diversity:			 0.801
Behavioral diversity:				 0.806
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 194232100
--- Timings ---
Current time: 1529616260171 milliseconds
Total Time:         323.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.5 seconds, 24.9%
Fitness Testing:    187.1 seconds, 57.9%
Report:              55.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 32889.123400000026
Test mean error for best: 16.44456
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 37.732100971  
Correct output: 10.0760954048  | Program output: 14.996534284  
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 9.3661596849  
Correct output: 32.0892717501  | Program output: 16.0892717501 
Correct output: 38.239902819   | Program output: 12.1603416982 
Correct output: -28.253581966  | Program output: -63.253581966 
Correct output: 22.691883669   | Program output: 9.3661596849  
Correct output: -64.8098353824 | Program output: -58.8098353824
Correct output: -50.5729717288 | Program output: 9.3661596849  
Correct output: 10.5716307984  | Program output: 24.4920696776 
Correct output: -5.0640064942  | Program output: -27.0640064942
Correct output: -156.5700373509 | Program output: -131.5700373509
Correct output: 16.1193686865  | Program output: 9.3661596849  
Correct output: 50.1878349036  | Program output: 26.1082737828 
Correct output: -138.4095016371 | Program output: -82.4095016371
Correct output: -119.7462217731 | Program output: -112.7462217731
Correct output: -95.2566750864 | Program output: -37.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 9.3661596849  
Correct output: -5.6640417064  | Program output: -32.6640417064
Correct output: 34.7374026319  | Program output: 35.7374026319 
Correct output: -49.1253212489 | Program output: -9.1253212489 
Correct output: 17.2744201056  | Program output: 0.2744201056  
Correct output: 62.9989442076  | Program output: 52.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_yankdup integer_fromfloat integer_dup_times float_dec float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_max float_add float_inc integer_stackdepth float_mult in2 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 float_max float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 float_dec integer_mult integer_dup_times print_float float_dup_items)
Errors: [62.0 11 4.9204 9 23.0 3 8.6076 10 16.0 2 26.0796 11 35.0 2 13.3257 9 6.0 2 59.9391 13 13.9204 11 22.0 2 25.0 2 6.7532 10 24.0796 10 56.0 3 7.0 1 58.0 2 7.6667 10 2.5031 8 27.0 2 1.0 1 40.0 1 17.0 2 10.0796 8]
Total: 717.8750000000001
Mean: 14.3575
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5831.626233399999
Median total errors in population: 853.248
Error averages by case: (253.43199740000003 11.29 199.12064239999972 11.107 258.5856126999995 7.801 205.59720659999897 11.146 216.27087549999993 4.68 213.75840000000042 11.147 236.29288529999997 5.088 203.84149389999806 9.97 219.49421759999996 4.682 239.56628049999833 12.508 205.47939199999945 11.313 218.26122650000005 4.591 237.66573160000004 4.974 199.8375992000022 10.512 216.24061330000094 11.256 259.22987320000004 5.589 222.67310819999986 4.751 255.95844789999992 4.763 248.08559210000087 10.191 199.18696160000025 9.757 226.24073529999998 4.546 210.0372623000001 4.163 241.50203450000004 6.166 222.08925439999996 9.636 219.99078940000078 11.561)
Error minima by case: (0.6391 6 0.01 6 5.6338 2 0.017 8 0.0 0 1.6805 7 0.7862 1 1.0404 8 0.0 0 0.0796 2 0.2055 8 0.0 0 18.0 1 0.613 8 0.1758 7 1.4095 2 0.0 0 4.8741 1 0.3333 2 0.2386 6 0.0 0 0.0 0 0.5515 1 0.0 0 0.2702 1)
Average genome size in population (length): 181.23
Average program size in population (points): 182.23
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 80.08903153417427
Average age in population: 76.58683970259817
Median age in population: 77.92430501109865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.715
Error (vector) diversity:			 0.795
Behavioral diversity:				 0.799
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 198936744
--- Timings ---
Current time: 1529616267708 milliseconds
Total Time:         330.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.9 seconds, 24.8%
Fitness Testing:    191.7 seconds, 58.0%
Report:              56.8 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 33190.380100000024
Test mean error for best: 16.59519
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 37.732100971  
Correct output: 10.0760954048  | Program output: 15.996534284  
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 13.1603416982 
Correct output: -28.253581966  | Program output: -62.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -58.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 25.4920696776 
Correct output: -5.0640064942  | Program output: -27.0640064942
Correct output: -156.5700373509 | Program output: -131.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 27.1082737828 
Correct output: -138.4095016371 | Program output: -82.4095016371
Correct output: -119.7462217731 | Program output: -112.7462217731
Correct output: -95.2566750864 | Program output: -37.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -31.6640417064
Correct output: 34.7374026319  | Program output: 35.7374026319 
Correct output: -49.1253212489 | Program output: -9.1253212489 
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 53.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction integer_yank} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_874} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_yankdup integer_fromfloat integer_dup_times float_dec float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth in2 float_add float_inc integer_stackdepth float_mult in2 13.366159684860918 float_max float_rot float_inc in2 float_dup_times integer_yank -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 float_max float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_874 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [62.0 11 5.9204 9 22.0 3 9.6076 10 15.0 2 25.0796 11 34.0 2 12.3257 9 6.0 2 60.9391 12 14.9204 11 22.0 2 25.0 2 5.7532 9 23.0796 10 56.0 3 7.0 1 58.0 2 8.6667 10 3.5031 9 26.0 2 1.0 1 40.0 1 16.0 1 9.0796 9]
Total: 712.8750000000001
Mean: 14.2575
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5442.797420299999
Median total errors in population: 857.9240500000001
Error averages by case: (238.68674060000006 11.246 181.39212519999973 10.895 235.50506289999927 7.602 192.0554778999987 11.099 196.47484160000008 4.657 196.79471140000012 11.059 217.604827 4.872 188.66903589999816 9.937 209.57180519999994 4.733 224.40724899999785 12.417 186.74010209999986 11.244 207.16887650000004 4.604 229.6167330000001 4.972 184.9987216000022 10.502 198.5070130000005 11.166 250.34133350000005 5.602 213.92634179999982 4.828 248.80849130000001 4.776 220.91290080000076 9.957 184.56516860000028 9.644 215.85710979999993 4.616 196.39255570000003 4.255 225.83183780000007 6.603 200.50738459999997 8.74 196.13697350000032 11.298)
Error minima by case: (0.425 7 0.01 6 5.6338 2 0.2021 7 0.0 0 0.3195 7 3.7464 1 3.0404 7 0.0 0 1.427 2 0.2055 8 0.0 0 10.0 1 1.7532 8 0.2674 7 0.5905 2 0.0 0 0.1259 1 0.3333 1 0.0183 6 0.0 0 0.0 0 5.0 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.849
Average program size in population (points): 181.849
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 81.37204203586597
Average age in population: 77.80841177251222
Median age in population: 79.19047448357843
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.729
Error (vector) diversity:			 0.806
Behavioral diversity:				 0.809
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 203641221
--- Timings ---
Current time: 1529616275072 milliseconds
Total Time:         338.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        83.4 seconds, 24.7%
Fitness Testing:    196.3 seconds, 58.1%
Report:              58.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 33081.93700000002
Test mean error for best: 16.54097
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 37.732100971  
Correct output: 10.0760954048  | Program output: 14.996534284  
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 10.3661596849 
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 12.1603416982 
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 10.3661596849 
Correct output: -64.8098353824 | Program output: -58.8098353824
Correct output: -50.5729717288 | Program output: 10.3661596849 
Correct output: 10.5716307984  | Program output: 24.4920696776 
Correct output: -5.0640064942  | Program output: -27.0640064942
Correct output: -156.5700373509 | Program output: -131.5700373509
Correct output: 16.1193686865  | Program output: 10.3661596849 
Correct output: 50.1878349036  | Program output: 26.1082737828 
Correct output: -138.4095016371 | Program output: -82.4095016371
Correct output: -119.7462217731 | Program output: -112.7462217731
Correct output: -95.2566750864 | Program output: -37.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 10.3661596849 
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 35.7374026319 
Correct output: -49.1253212489 | Program output: -9.1253212489 
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 52.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -87.19822187763174} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -52} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_dup integer_div print_integer integer_flush integer_dup_times integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times float_dup float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max -87.19822187763174 integer_dup_items float_pop float_mult float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_dup_times integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush float_dec integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -52 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [62.0 11 4.9204 9 23.0 3 9.6076 10 14.0 2 26.0796 11 33.0 2 12.3257 9 6.0 2 60.9391 12 13.9204 11 22.0 2 25.0 2 5.7532 9 24.0796 10 56.0 3 7.0 1 58.0 2 7.6667 10 3.5031 9 25.0 2 1.0 1 40.0 1 15.0 2 10.0796 8]
Total: 709.8750000000001
Mean: 14.1975
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5411.7505825
Median total errors in population: 832.9866000000001
Error averages by case: (238.87869750000002 11.243 186.81407069999963 10.817 237.21391989999924 7.297 194.8077901999987 11.059 192.9870577999999 4.425 203.8033586000004 11.053 210.2976328 4.806 191.8857565999981 9.899 200.4318378999999 4.444 227.1973904999979 12.371 194.2050936999997 11.239 197.4587234 4.393 219.48829740000002 4.738 187.24911510000248 10.499 205.00705360000072 11.1 242.1344818000001 5.314 203.05620699999994 4.482 238.73490969999995 4.545 231.9363203000009 9.985 187.52494280000028 9.639 203.35546850000003 4.357 194.75781050000012 4.021 222.39955600000005 6.306 198.35735019999981 8.364 204.2027400000005 11.169)
Error minima by case: (0.2969 8 0.01 6 4.6338 2 0.1247 8 0.0 0 1.6805 7 1.8155 1 0.0404 8 0.0 0 0.0796 2 0.0796 8 0.0 0 5.2456 1 1.7532 8 0.1758 7 2.5905 2 0.6911 1 5.2567 1 0.3333 1 0.4969 6 0.0 0 0.0 0 0.1658 1 0.0 0 0.2702 1)
Average genome size in population (length): 181.698
Average program size in population (points): 182.698
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 82.76558179819288
Average age in population: 79.70873653028538
Median age in population: 80.45500051440231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.723
Error (vector) diversity:			 0.811
Behavioral diversity:				 0.815
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 208375359
--- Timings ---
Current time: 1529616282353 milliseconds
Total Time:         345.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.8 seconds, 24.6%
Fitness Testing:    200.9 seconds, 58.2%
Report:              59.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 33334.41710000003
Test mean error for best: 16.66721
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 37.732100971  
Correct output: 10.0760954048  | Program output: 11.996534284  
Correct output: 106.0206148688 | Program output: 80.0206148688 
Correct output: 0.7585604003   | Program output: 6.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 9.1603416982  
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 6.3661596849  
Correct output: -64.8098353824 | Program output: -58.8098353824
Correct output: -50.5729717288 | Program output: 6.3661596849  
Correct output: 10.5716307984  | Program output: 21.4920696776 
Correct output: -5.0640064942  | Program output: -27.0640064942
Correct output: -156.5700373509 | Program output: -131.5700373509
Correct output: 16.1193686865  | Program output: 6.3661596849  
Correct output: 50.1878349036  | Program output: 23.1082737828 
Correct output: -138.4095016371 | Program output: -82.4095016371
Correct output: -119.7462217731 | Program output: -112.7462217731
Correct output: -95.2566750864 | Program output: -37.2566750864
Correct output: 153.6667050749 | Program output: 158.3334101499
Correct output: 6.8630846811   | Program output: 6.3661596849  
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 35.7374026319 
Correct output: -49.1253212489 | Program output: -9.1253212489 
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 49.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_flush} {:instruction float_add} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_712} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -49} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_flush float_add integer_pop integer_mult integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_mult integer_dup_items float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 float_max float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_min 48 integer_pop -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_712 float_sub float_dec float_shove integer_dup_items tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec integer_stackdepth float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec float_dec float_dec -51 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -49 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [62.0 11 1.9204 9 26.0 2 5.6076 10 14.0 2 29.0796 11 33.0 2 16.3257 9 6.0 2 56.9391 13 10.9204 11 22.0 2 25.0 2 9.7532 9 27.0796 10 56.0 3 7.0 1 58.0 2 4.6667 9 0.4969 7 25.0 2 1.0 1 40.0 1 15.0 2 13.0796 9]
Total: 707.8688000000001
Mean: 14.157376
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5971.212355899998
Median total errors in population: 858.8853
Error averages by case: (260.71542229999994 11.286 203.20713099999978 10.664 263.917911199999 7.793 209.0901715999985 10.986 219.06153320000004 4.674 218.83632089999995 11.004 243.25632850000005 5.155 207.39577189999795 9.926 228.6946424999999 4.739 240.7795299999981 12.412 209.81449800000004 11.259 228.99274710000012 4.593 246.92871790000015 5.054 203.4253480000022 10.567 221.76512880000038 11.063 267.96747600000015 5.674 232.14817229999989 4.883 266.90924570000004 4.792 253.20178580000072 10.04 201.76576240000014 9.638 233.8970209999999 4.606 217.59180290000003 4.321 249.19963300000003 6.437 218.55614789999993 8.07 223.39810600000033 11.06)
Error minima by case: (0.9444 7 0.01 6 0.7323 2 0.1998 7 0.0 0 0.6805 7 6.0963 1 0.0404 8 0.0 0 0.573 2 0.0796 8 0.0 0 18.0 1 0.7532 8 0.8242 7 0.4095 2 0.0 0 0.2016 1 0.3333 2 0.2067 7 0.0 0 0.0 0 0.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.914
Average program size in population (points): 181.914
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 84.31345151577707
Average age in population: 80.309696722342
Median age in population: 81.60508873345044
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.724
Error (vector) diversity:			 0.79
Behavioral diversity:				 0.791
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 213092478
--- Timings ---
Current time: 1529616289668 milliseconds
Total Time:         352.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.3 seconds, 24.5%
Fitness Testing:    205.5 seconds, 58.3%
Report:              60.8 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 32861.40780000003
Test mean error for best: 16.43070
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 38.732100971  
Correct output: 10.0760954048  | Program output: 10.996534284  
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 6.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 8.1603416982  
Correct output: -28.253581966  | Program output: -56.253581966 
Correct output: 22.691883669   | Program output: 6.3661596849  
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 6.3661596849  
Correct output: 10.5716307984  | Program output: 20.4920696776 
Correct output: -5.0640064942  | Program output: -26.0640064942
Correct output: -156.5700373509 | Program output: -130.5700373509
Correct output: 16.1193686865  | Program output: 6.3661596849  
Correct output: 50.1878349036  | Program output: 22.1082737828 
Correct output: -138.4095016371 | Program output: -81.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -36.2566750864
Correct output: 153.6667050749 | Program output: 157.3334101499
Correct output: 6.8630846811   | Program output: 6.3661596849  
Correct output: -5.6640417064  | Program output: -31.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -8.1253212489 
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 48.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_dup} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -82.97816049277466} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction tagged_971} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_div} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_min} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_add integer_fromfloat integer_dup_times float_dec float_dup_times integer_mult integer_div print_integer integer_flush integer_dup_times integer_fromfloat float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_dec integer_dup 13.366159684860918 float_max float_add float_inc in2 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_pop -85.0550927390534 integer_dup_items float_pop float_pop integer_dup_items integer_dup float_pop float_min 47 integer_rot integer_yank integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_dup_times integer_dup float_pop float_pop float_min integer_dup integer_dup float_pop float_min integer_dup float_pop -82.97816049277466 tag_float_538 in1 tagged_971 float_sub float_dec float_shove float_dec tagged_971 integer_dup_times tagged_971 float_dec integer_div integer_flush tagged_971 tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_dec integer_stackdepth float_rot float_rot float_dup_items -50 float_dup float_min float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_dup integer_dup_times print_float float_dup_items)
Errors: [63.0 11 0.9204 8 21.0 3 5.6076 10 15.0 2 30.0796 10 28.0 2 16.3257 9 7.0 2 56.9391 13 9.9204 10 21.0 2 26.0 2 9.7532 9 28.0796 10 57.0 3 8.0 1 59.0 2 3.6667 9 0.4969 7 26.0 2 2.0 1 41.0 2 16.0 1 14.0796 9]
Total: 705.8688000000001
Mean: 14.117376
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5488.117413499999
Median total errors in population: 841.8324
Error averages by case: (239.8130296000001 11.287 186.3905828 10.556 242.86441459999918 7.82 192.60994459999858 10.978 198.8835418 4.558 200.8091868999996 10.976 222.9706718 4.835 192.3121059999976 9.907 209.17858589999986 4.562 227.44101839999743 12.403 192.10210740000036 11.215 204.90487099999999 4.53 227.91054850000012 4.867 188.15692200000265 10.53 203.83403260000003 10.952 249.52248250000008 5.487 212.50691589999985 4.674 245.0495181 4.643 233.12069360000083 10.024 186.59411830000028 9.573 211.45455449999997 4.464 196.59788810000015 4.181 224.5210887000002 6.303 197.0744249999999 7.862 203.54316489999985 10.764)
Error minima by case: (0.0218 6 0.01 6 6.6338 2 0.2413 8 1.0 1 1.3195 7 1.0153 1 0.0404 8 0.0 0 1.0796 2 0.0796 8 0.0 0 19.0 1 0.0495 7 0.1758 8 5.4095 2 1.0 1 2.7433 1 0.3333 1 0.2067 7 0.0 0 0.0 0 2.1837 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.646
Average program size in population (points): 181.646
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 85.5226134846286
Average age in population: 81.4472363124665
Median age in population: 82.81902150293013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.728
Error (vector) diversity:			 0.808
Behavioral diversity:				 0.811
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 217803170
--- Timings ---
Current time: 1529616297038 milliseconds
Total Time:         360.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.7 seconds, 24.4%
Fitness Testing:    210.1 seconds, 58.4%
Report:              62.1 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 33006.2227
Test mean error for best: 16.50311
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 35.732100971  
Correct output: 10.0760954048  | Program output: 11.3827488761 
Correct output: 106.0206148688 | Program output: 79.0206148688 
Correct output: 0.7585604003   | Program output: 6.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 8.5465562902  
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 6.3661596849  
Correct output: -64.8098353824 | Program output: -60.8098353824
Correct output: -50.5729717288 | Program output: 6.3661596849  
Correct output: 10.5716307984  | Program output: 20.8782842697 
Correct output: -5.0640064942  | Program output: -29.0640064942
Correct output: -156.5700373509 | Program output: -133.5700373509
Correct output: 16.1193686865  | Program output: 6.3661596849  
Correct output: 50.1878349036  | Program output: 22.4944883749 
Correct output: -138.4095016371 | Program output: -84.4095016371
Correct output: -119.7462217731 | Program output: -114.7462217731
Correct output: -95.2566750864 | Program output: -39.2566750864
Correct output: 153.6667050749 | Program output: 157.3334101499
Correct output: 6.8630846811   | Program output: 6.3661596849  
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 33.7374026319 
Correct output: -49.1253212489 | Program output: -11.1253212489
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 49.3055976789 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.306653471270906} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -87.19822187763174} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction float_yank} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_712} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -49} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.306653471270906 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 in2 float_dup_times float_max -87.19822187763174 integer_dup_items float_pop float_mult float_pop integer_dup_items integer_dup float_pop float_pop float_yank float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_pop -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_712 float_sub float_dec float_shove integer_dup_items tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec integer_stackdepth float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec float_dec float_dec -51 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -49 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [60.0 11 1.3067 11 27.0 3 5.6076 10 14.0 2 29.6933 10 33.0 2 16.3257 9 4.0 1 56.9391 13 10.3067 10 24.0 2 23.0 2 9.7532 9 27.6933 11 54.0 3 5.0 1 56.0 2 3.6667 9 0.4969 7 25.0 2 1.0 1 38.0 2 15.0 2 13.6933 12]
Total: 701.4825000000001
Mean: 14.02965
Genome size: 180
Size: 181
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 5855.1055281
Median total errors in population: 841.94355
Error averages by case: (257.31287130000004 11.296 197.60601660000023 10.527 252.45637939999935 8.133 205.67477939999824 10.931 220.0053367999999 4.713 212.4769960999992 10.966 234.2149374000001 5.083 204.9301928999974 9.929 226.1840602 4.776 239.2629325999975 12.496 203.5813872000007 11.185 225.44378390000003 4.633 244.3320421000002 5.063 201.04419560000258 10.619 213.96375709999964 10.859 265.5164840000001 5.696 229.37393949999986 4.924 264.25962690000006 4.859 237.50369200000063 10.233 198.9824954 9.584 232.17580880000006 4.655 214.93193200000016 4.352 243.42368270000006 6.701 217.09038359999988 7.812 212.7068145999996 10.626)
Error minima by case: (0.2158 9 0.01 6 4.6338 2 0.0617 7 0.0 1 0.1238 7 1.3662 1 1.0404 7 0.0 0 0.01 2 0.0796 7 0.0 0 19.0 1 0.7532 8 0.0287 7 1.5905 2 1.0 1 5.2567 1 0.3333 2 0.0716 7 0.0 0 0.0 0 13.1262 1 0.0 0 0.2702 1)
Average genome size in population (length): 181.145
Average program size in population (points): 182.145
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 86.47981512142105
Average age in population: 82.4407695941675
Median age in population: 84.05329158314773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.713
Error (vector) diversity:			 0.791
Behavioral diversity:				 0.794
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 222525913
--- Timings ---
Current time: 1529616304418 milliseconds
Total Time:         367.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.2 seconds, 24.3%
Fitness Testing:    214.7 seconds, 58.4%
Report:              63.5 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 32267.15950000005
Test mean error for best: 16.13358
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 36.732100971  
Correct output: 10.0760954048  | Program output: 10.0860942191 
Correct output: 106.0206148688 | Program output: 78.0206148688 
Correct output: 0.7585604003   | Program output: 5.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 7.2499016332  
Correct output: -28.253581966  | Program output: -62.253581966 
Correct output: 22.691883669   | Program output: 5.3661596849  
Correct output: -64.8098353824 | Program output: -59.8098353824
Correct output: -50.5729717288 | Program output: 5.3661596849  
Correct output: 10.5716307984  | Program output: 19.5816296127 
Correct output: -5.0640064942  | Program output: -28.0640064942
Correct output: -156.5700373509 | Program output: -132.5700373509
Correct output: 16.1193686865  | Program output: 5.3661596849  
Correct output: 50.1878349036  | Program output: 21.1978337179 
Correct output: -138.4095016371 | Program output: -83.4095016371
Correct output: -119.7462217731 | Program output: -113.7462217731
Correct output: -95.2566750864 | Program output: -38.2566750864
Correct output: 153.6667050749 | Program output: 156.3334101499
Correct output: 6.8630846811   | Program output: 5.3661596849  
Correct output: -5.6640417064  | Program output: -31.6640417064
Correct output: 34.7374026319  | Program output: 34.7374026319 
Correct output: -49.1253212489 | Program output: -10.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 48.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction float_yank} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_890} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times integer_mod integer_yankdup float_dup_times float_max float_swap integer_yankdup integer_dup float_pop float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap float_yank integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -50 float_yank in2 float_min integer_mult tagged_890 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_dec -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [61.0 11 0.01 6 28.0 3 4.6076 10 15.0 2 30.99 8 34.0 2 17.3257 9 5.0 2 55.9391 12 9.01 8 23.0 2 24.0 2 10.7532 10 28.99 8 55.0 2 6.0 1 57.0 2 2.6667 9 1.4969 8 26.0 2 0.0 0 39.0 2 16.0 1 14.99 9]
Total: 696.7792000000001
Mean: 13.935584
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 6089.770132499998
Median total errors in population: 852.3853000000001
Error averages by case: (266.21299229999994 11.33 206.57517340000004 10.513 257.2904780999996 8.246 216.01680869999802 11.015 226.78377869999994 4.933 220.81255979999935 10.914 245.36430660000002 5.121 212.68652719999724 9.974 235.90430149999986 4.937 247.79084519999745 12.409 214.5318918000006 11.24 235.91450440000008 4.755 253.93695360000012 5.173 209.40163710000255 10.688 223.3633382999998 10.891 274.8209044000001 5.799 239.4513092999999 4.991 273.2275637000002 4.936 250.18777660000046 10.142 207.67792330000006 9.585 240.74078149999994 4.759 224.58011420000022 4.511 253.9202836 6.5 228.38013250000003 8.078 222.14324669999993 10.614)
Error minima by case: (0.9444 8 0.01 6 4.6338 2 0.1341 8 0.0 0 1.0668 7 0.4891 1 0.9596 7 0.0 0 1.9204 2 0.01 7 0.0 0 17.0 1 0.7532 8 0.2078 7 3.5905 2 0.0 0 5.2567 1 0.3333 2 0.0716 7 0.0 0 0.0 0 5.8747 1 0.0 0 0.0011 1)
Average genome size in population (length): 181.128
Average program size in population (points): 182.128
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 87.47881711720959
Average age in population: 83.83214216890065
Median age in population: 85.29429900223616
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.744
Error (vector) diversity:			 0.797
Behavioral diversity:				 0.8
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 227247949
--- Timings ---
Current time: 1529616311801 milliseconds
Total Time:         374.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.7 seconds, 24.2%
Fitness Testing:    219.4 seconds, 58.5%
Report:              64.7 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 32352.2362
Test mean error for best: 16.17612
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 32.732100971  
Correct output: 10.0760954048  | Program output: 11.3827488761 
Correct output: 106.0206148688 | Program output: 68.0206148688 
Correct output: 0.7585604003   | Program output: 6.3661596849  
Correct output: 32.0892717501  | Program output: 18.0892717501 
Correct output: 38.239902819   | Program output: 8.5465562902  
Correct output: -28.253581966  | Program output: -61.253581966 
Correct output: 22.691883669   | Program output: 6.3661596849  
Correct output: -64.8098353824 | Program output: -63.8098353824
Correct output: -50.5729717288 | Program output: 6.3661596849  
Correct output: 10.5716307984  | Program output: 20.8782842697 
Correct output: -5.0640064942  | Program output: -32.0640064942
Correct output: -156.5700373509 | Program output: -136.5700373509
Correct output: 16.1193686865  | Program output: 6.3661596849  
Correct output: 50.1878349036  | Program output: 22.4944883749 
Correct output: -138.4095016371 | Program output: -87.4095016371
Correct output: -119.7462217731 | Program output: -117.7462217731
Correct output: -95.2566750864 | Program output: -42.2566750864
Correct output: 153.6667050749 | Program output: 157.3334101499
Correct output: 6.8630846811   | Program output: 6.3661596849  
Correct output: -5.6640417064  | Program output: -30.6640417064
Correct output: 34.7374026319  | Program output: 30.7374026319 
Correct output: -49.1253212489 | Program output: -14.1253212489
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 49.3055976789 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.306653471270906} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -87.19822187763174} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction float_min} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_712} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_items} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction -51} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -49} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.306653471270906 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max float_rot float_inc in2 in2 float_dup_times float_max -87.19822187763174 integer_dup_items float_pop float_mult float_pop integer_dup_items integer_dup float_pop float_pop float_min float_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_pop -85.0550927390534 integer_dup_items float_pop integer_dup_times integer_fromfloat tag_float_538 in1 tagged_712 float_sub float_dec float_shove integer_dup_items tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec integer_stackdepth float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec -51 integer_pop in2 float_min integer_mult tagged_971 float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec float_dec float_dec -51 integer_pop float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -49 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_pop float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_dup integer_dup_times print_float float_dup_items)
Errors: [57.0 10 1.3067 11 38.0 3 5.6076 10 14.0 2 29.6933 10 33.0 2 16.3257 9 1.0 1 56.9391 13 10.3067 10 27.0 2 20.0 1 9.7532 9 27.6933 11 51.0 3 2.0 1 53.0 2 3.6667 9 0.4969 7 25.0 2 4.0 1 35.0 2 15.0 2 13.6933 12]
Total: 695.4825000000001
Mean: 13.90965
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4877.220567799998
Median total errors in population: 826.41425
Error averages by case: (214.27374560000007 11.197 161.36576240000028 10.242 210.64215829999975 8.033 169.27947179999921 10.867 173.52895849999993 4.395 176.21840439999903 10.752 198.01585890000007 4.622 167.43307649999852 9.805 185.44183029999996 4.357 205.14210459999836 12.371 168.18939840000064 11.068 183.91189560000012 4.214 204.9166022000001 4.609 163.28335460000224 10.515 178.11743159999943 10.678 226.86653930000003 5.26 189.14865429999995 4.378 225.25959789999996 4.352 201.2691213000004 9.959 160.7671437 9.338 190.56844029999996 4.245 170.17476500000006 3.98 203.72106970000016 6.094 180.35884429999996 7.469 176.06733829999953 10.459)
Error minima by case: (0.2679 7 0.01 6 0.7323 2 0.0472 8 0.0 0 1.7701 7 4.2411 1 0.8003 7 0.0 0 0.0796 2 0.2055 8 0.0 0 19.0 1 0.7532 5 0.2674 7 0.4095 2 1.0 1 5.2567 1 0.3333 1 0.1369 7 0.3959 1 0.0 0 4.1837 1 0.7256 1 0.2702 1)
Average genome size in population (length): 181.304
Average program size in population (points): 182.304
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 88.87353179742168
Average age in population: 85.19260653434225
Median age in population: 86.47415930646676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.759
Error (vector) diversity:			 0.818
Behavioral diversity:				 0.821
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 231978107
--- Timings ---
Current time: 1529616319410 milliseconds
Total Time:         382.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.2 seconds, 24.1%
Fitness Testing:    224.0 seconds, 58.6%
Report:              66.0 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 32515.110900000025
Test mean error for best: 16.25756
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 35.732100971  
Correct output: 10.0760954048  | Program output: 12.996534284  
Correct output: 106.0206148688 | Program output: 81.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 12.0892717501 
Correct output: 38.239902819   | Program output: 10.1603416982 
Correct output: -28.253581966  | Program output: -56.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -60.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 22.4920696776 
Correct output: -5.0640064942  | Program output: -21.0640064942
Correct output: -156.5700373509 | Program output: -133.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 24.1082737828 
Correct output: -138.4095016371 | Program output: -84.4095016371
Correct output: -119.7462217731 | Program output: -114.7462217731
Correct output: -95.2566750864 | Program output: -39.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -24.6640417064
Correct output: 34.7374026319  | Program output: 33.7374026319 
Correct output: -49.1253212489 | Program output: -11.1253212489
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 50.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup tagged_392 float_dup print_integer float_dup print_integer float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop float_frominteger integer_dup float_stackdepth float_min 47 integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [60.0 11 2.9204 9 25.0 3 7.6076 10 20.0 1 28.0796 11 28.0 2 14.3257 9 4.0 1 58.9391 13 11.9204 11 16.0 2 23.0 2 7.7532 10 26.0796 10 54.0 3 5.0 1 56.0 2 5.6667 9 1.5031 8 19.0 2 1.0 1 38.0 2 15.0 2 12.0796 9]
Total: 684.8750000000001
Mean: 13.6975
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5388.2581768
Median total errors in population: 829.875
Error averages by case: (236.7458288000001 11.268 183.95631950000023 10.363 231.73564339999984 8.328 189.7910296999992 10.855 199.29111889999996 4.665 198.41808429999924 10.753 214.52484059999998 4.805 191.22380769999816 9.91 201.97293669999993 4.736 223.95766479999833 12.454 190.92375990000073 11.089 202.713221 4.515 221.6019034000001 4.962 187.17560740000258 10.607 200.18457879999957 10.728 243.16953350000006 5.631 206.18897679999995 4.715 241.30791679999996 4.702 216.3643212000005 10.018 184.01413610000003 9.43 208.2417614 4.561 194.49665100000004 4.319 225.43070220000018 6.246 199.8600828999999 7.627 197.09974999999963 10.581)
Error minima by case: (1.1678 6 0.01 6 5.6338 2 0.0012 7 0.0 0 1.6805 7 0.2536 1 0.9596 8 0.0 0 0.3067 2 0.2055 7 0.0 0 16.0 1 0.7532 6 0.2674 7 2.4095 2 0.0 0 2.3068 1 0.3333 1 0.0599 7 0.0 0 0.0 0 0.3268 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.823
Average program size in population (points): 181.823
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 89.87353179742168
Average age in population: 86.20411327200219
Median age in population: 87.72745184037856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.759
Error (vector) diversity:			 0.809
Behavioral diversity:				 0.812
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 236694908
--- Timings ---
Current time: 1529616326641 milliseconds
Total Time:         389.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.6 seconds, 24.0%
Fitness Testing:    228.5 seconds, 58.6%
Report:              67.5 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 32515.110900000025
Test mean error for best: 16.25756
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 35.732100971  
Correct output: 10.0760954048  | Program output: 12.996534284  
Correct output: 106.0206148688 | Program output: 81.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 12.0892717501 
Correct output: 38.239902819   | Program output: 10.1603416982 
Correct output: -28.253581966  | Program output: -56.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -60.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 22.4920696776 
Correct output: -5.0640064942  | Program output: -21.0640064942
Correct output: -156.5700373509 | Program output: -133.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 24.1082737828 
Correct output: -138.4095016371 | Program output: -84.4095016371
Correct output: -119.7462217731 | Program output: -114.7462217731
Correct output: -95.2566750864 | Program output: -39.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -24.6640417064
Correct output: 34.7374026319  | Program output: 33.7374026319 
Correct output: -49.1253212489 | Program output: -11.1253212489
Correct output: 17.2744201056  | Program output: 2.2744201056  
Correct output: 62.9989442076  | Program output: 50.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup tagged_392 float_dup print_integer float_dup print_integer float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_pop float_frominteger integer_dup float_stackdepth float_min float_yank integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [60.0 11 2.9204 9 25.0 3 7.6076 10 20.0 1 28.0796 11 28.0 2 14.3257 9 4.0 1 58.9391 13 11.9204 11 16.0 2 23.0 2 7.7532 10 26.0796 10 54.0 3 5.0 1 56.0 2 5.6667 9 1.5031 8 19.0 2 1.0 1 38.0 2 15.0 2 12.0796 9]
Total: 684.8750000000001
Mean: 13.6975
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5425.408101499999
Median total errors in population: 829.8583000000001
Error averages by case: (241.77520769999998 11.236 180.8325306000003 10.263 226.38251249999976 8.132 187.02234079999937 10.866 200.2890193000001 4.589 195.67707409999926 10.6 226.74355190000006 4.714 187.41177899999866 9.842 211.40396759999996 4.594 220.37996289999845 12.367 186.58952220000074 10.994 208.6843975000001 4.457 229.85071390000007 4.861 183.45988580000264 10.546 197.04078849999965 10.648 251.15938630000005 5.486 214.78635329999992 4.608 248.60178230000002 4.574 214.07213070000063 9.963 180.37228129999986 9.331 216.12057119999992 4.447 198.70532830000002 4.165 227.29995559999998 6.126 202.3623432999999 7.904 192.52771489999958 10.544)
Error minima by case: (0.6568 7 0.01 6 2.2677 2 0.0585 7 0.0 0 0.6805 7 3.6338 1 1.0404 7 0.0 0 0.3637 2 0.2055 8 0.0 0 18.0 1 0.7532 7 0.0287 7 1.5905 2 0.0 0 1.2016 1 0.3333 1 0.0599 7 0.5189 1 0.0 0 8.0293 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.676
Average program size in population (points): 181.676
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 91.00391317498945
Average age in population: 87.68034621889412
Median age in population: 89.0234052940274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.756
Error (vector) diversity:			 0.809
Behavioral diversity:				 0.812
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 241409741
--- Timings ---
Current time: 1529616333855 milliseconds
Total Time:         396.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.1 seconds, 24.0%
Fitness Testing:    232.9 seconds, 58.7%
Report:              68.8 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 32279.14040000003
Test mean error for best: 16.13957
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 34.732100971  
Correct output: 10.0760954048  | Program output: 25.8059186485 
Correct output: 106.0206148688 | Program output: 91.3867745537 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 11.0892717501 
Correct output: 38.239902819   | Program output: 22.9697260627 
Correct output: -28.253581966  | Program output: -57.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -61.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 35.3014540421 
Correct output: -5.0640064942  | Program output: -22.0640064942
Correct output: -156.5700373509 | Program output: -134.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 36.9176581473 
Correct output: -138.4095016371 | Program output: -85.4095016371
Correct output: -119.7462217731 | Program output: -115.7462217731
Correct output: -95.2566750864 | Program output: -40.2566750864
Correct output: 153.6667050749 | Program output: 171.6995698347
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 32.7374026319 
Correct output: -49.1253212489 | Program output: -12.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 63.7287674513 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction tagged_409} {:instruction integer_dup_times} {:instruction 74} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_add} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup tagged_392 float_dup print_integer float_dup print_integer float_yankdup integer_div integer_div print_integer tagged_409 integer_dup_times 74 float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_dup_times in1 48.3636635588378 float_max float_add float_add integer_dec integer_yankdup integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [59.0 10 15.7298 10 14.6338 12 7.6076 10 21.0 2 15.2702 11 29.0 2 14.3257 9 3.0 1 58.9391 13 24.7298 11 17.0 2 22.0 2 7.7532 10 13.2702 10 53.0 3 4.0 1 55.0 2 18.0329 10 1.5031 8 20.0 1 2.0 1 37.0 2 16.0 1 0.7298 10]
Total: 684.5251999999999
Mean: 13.690504
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 5475.137755899999
Median total errors in population: 838.62435
Error averages by case: (241.01605880000008 11.281 185.24386800000048 10.304 228.5752369999997 8.179 189.9069544999982 10.901 204.91913490000005 4.784 197.61382859999912 10.706 226.10177309999997 4.971 188.09160499999746 9.932 209.24531749999997 4.801 224.62138449999773 12.578 192.2248702000007 11.084 210.97362270000016 4.587 228.97461340000012 5.094 184.3758140000025 10.574 200.98646029999964 10.749 250.07725210000012 5.711 213.30269399999992 4.813 248.05187630000003 4.785 219.3889305000005 10.143 182.8590718999999 9.436 215.23231319999996 4.634 199.57938110000003 4.358 230.81517360000024 6.477 205.92402579999987 7.969 197.52149489999945 10.664)
Error minima by case: (0.2679 6 0.01 6 0.2677 1 0.0819 7 0.0 0 0.2299 6 1.6579 1 0.0404 7 0.0 0 0.0796 2 0.2055 8 0.0 0 18.0 1 0.2468 7 0.096 7 11.4095 2 0.0 0 1.6932 1 0.3333 1 0.0599 7 0.2873 1 0.0 0 10.0343 1 0.0 0 0.2702 1)
Average genome size in population (length): 181.081
Average program size in population (points): 182.081
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 92.71477023431754
Average age in population: 88.81485963740445
Median age in population: 90.27913783222259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.765
Error (vector) diversity:			 0.81
Behavioral diversity:				 0.811
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 246136028
--- Timings ---
Current time: 1529616341136 milliseconds
Total Time:         404.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.6 seconds, 23.9%
Fitness Testing:    237.4 seconds, 58.7%
Report:              70.0 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 32256.25040000002
Test mean error for best: 16.12813
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 34.732100971  
Correct output: 10.0760954048  | Program output: 13.996534284  
Correct output: 106.0206148688 | Program output: 80.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 11.0892717501 
Correct output: 38.239902819   | Program output: 11.1603416982 
Correct output: -28.253581966  | Program output: -57.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -61.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 23.4920696776 
Correct output: -5.0640064942  | Program output: -22.0640064942
Correct output: -156.5700373509 | Program output: -134.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 25.1082737828 
Correct output: -138.4095016371 | Program output: -85.4095016371
Correct output: -119.7462217731 | Program output: -115.7462217731
Correct output: -95.2566750864 | Program output: -40.2566750864
Correct output: 153.6667050749 | Program output: 160.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 32.7374026319 
Correct output: -49.1253212489 | Program output: -12.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 51.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_yankdup integer_fromfloat integer_dup_times float_dec float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_max float_add float_inc integer_stackdepth float_mult in2 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [59.0 10 3.9204 9 26.0 2 7.6076 10 21.0 2 27.0796 11 29.0 2 14.3257 9 3.0 1 58.9391 13 12.9204 11 17.0 2 22.0 2 7.7532 10 25.0796 10 53.0 3 4.0 1 55.0 2 6.6667 10 1.5031 8 20.0 1 2.0 1 37.0 2 16.0 1 11.0796 9]
Total: 682.8750000000001
Mean: 13.6575
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5448.603900799999
Median total errors in population: 836.08375
Error averages by case: (246.60910529999992 11.285 181.73211330000018 10.19 225.83804949999973 8.09 185.45099699999952 10.914 203.13166569999999 4.582 193.9436371999993 10.579 224.08223480000007 4.771 185.25463789999841 9.878 213.48176800000002 4.712 220.39982469999805 12.527 188.3271011000007 10.927 211.07048710000012 4.547 233.4583074000001 4.922 182.1042306000023 10.504 197.05336479999963 10.565 254.49177310000007 5.575 217.51773279999995 4.67 252.64865070000005 4.669 209.92083180000074 9.955 179.20208690000018 9.395 217.70124710000002 4.542 203.16266440000015 4.172 230.01570000000018 6.245 203.14336299999994 7.645 192.4053265999997 10.596)
Error minima by case: (0.7321 7 0.01 6 2.7323 2 0.2215 8 0.0 0 0.096 6 0.2536 1 0.096 7 1.0 1 0.0796 2 0.2055 7 0.0 0 18.0 1 0.096 6 0.7326 7 3.4095 2 0.0 0 3.2016 1 0.3333 2 0.0599 7 0.0 0 0.0 0 7.6579 1 0.0 0 0.2702 1)
Average genome size in population (length): 181.233
Average program size in population (points): 182.233
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 93.75103723556158
Average age in population: 90.42252498876675
Median age in population: 91.54315523943087
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.766
Error (vector) diversity:			 0.816
Behavioral diversity:				 0.82
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 250866028
--- Timings ---
Current time: 1529616348195 milliseconds
Total Time:         411.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.1 seconds, 23.9%
Fitness Testing:    241.8 seconds, 58.8%
Report:              71.3 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 32256.25040000002
Test mean error for best: 16.12813
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 34.732100971  
Correct output: 10.0760954048  | Program output: 13.996534284  
Correct output: 106.0206148688 | Program output: 80.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 11.0892717501 
Correct output: 38.239902819   | Program output: 11.1603416982 
Correct output: -28.253581966  | Program output: -57.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -61.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 23.4920696776 
Correct output: -5.0640064942  | Program output: -22.0640064942
Correct output: -156.5700373509 | Program output: -134.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 25.1082737828 
Correct output: -138.4095016371 | Program output: -85.4095016371
Correct output: -119.7462217731 | Program output: -115.7462217731
Correct output: -95.2566750864 | Program output: -40.2566750864
Correct output: 153.6667050749 | Program output: 160.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 32.7374026319 
Correct output: -49.1253212489 | Program output: -12.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 51.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_fromfloat float_yankdup integer_fromfloat integer_dup_times float_dec float_dup_times integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc integer_stackdepth float_max float_add float_inc integer_stackdepth float_mult in2 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [59.0 10 3.9204 9 26.0 2 7.6076 10 21.0 2 27.0796 11 29.0 2 14.3257 9 3.0 1 58.9391 13 12.9204 11 17.0 2 22.0 2 7.7532 10 25.0796 10 53.0 3 4.0 1 55.0 2 6.6667 10 1.5031 8 20.0 1 2.0 1 37.0 2 16.0 1 11.0796 9]
Total: 682.8750000000001
Mean: 13.6575
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5086.6413501
Median total errors in population: 820.40555
Error averages by case: (233.3972953 11.23 165.56707470000035 9.992 207.4806904999997 8.188 169.50474079999938 10.783 193.29731840000002 4.449 180.37442979999918 10.48 214.58837090000014 4.814 169.3667994999988 9.811 200.33246519999994 4.54 204.36012679999845 12.535 171.48077650000045 10.85 198.97896940000004 4.344 218.25473740000015 4.815 164.92054850000233 10.489 181.06649999999962 10.486 240.33752480000012 5.458 203.81252859999984 4.525 237.36801409999998 4.535 194.8915192000006 9.966 161.37231800000018 9.268 204.7099427000001 4.374 190.31457990000007 4.016 216.88404500000016 6.131 193.71904539999994 7.675 176.01498869999966 10.492)
Error minima by case: (0.2783 5 0.01 6 1.7323 2 0.3924 8 0.0 0 0.096 7 3.7464 1 1.0404 6 0.0 0 0.0796 2 0.7163 8 0.0 0 18.0 1 0.096 6 0.0287 7 2.4095 2 0.0 0 0.2016 1 0.3333 2 0.0599 7 0.336 1 0.0 0 0.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.448
Average program size in population (points): 181.448
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 94.84893696847993
Average age in population: 91.56646972382585
Median age in population: 92.78156772231556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.782
Error (vector) diversity:			 0.825
Behavioral diversity:				 0.827
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 255579034
--- Timings ---
Current time: 1529616355272 milliseconds
Total Time:         418.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.6 seconds, 23.8%
Fitness Testing:    246.2 seconds, 58.8%
Report:              72.5 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 31046.74730000007
Test mean error for best: 15.52337
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 34.732100971  
Correct output: 10.0760954048  | Program output: 12.0860942191 
Correct output: 106.0206148688 | Program output: 79.0206148688 
Correct output: 0.7585604003   | Program output: 7.3661596849  
Correct output: 32.0892717501  | Program output: 11.0892717501 
Correct output: 38.239902819   | Program output: 9.2499016332  
Correct output: -28.253581966  | Program output: -57.253581966 
Correct output: 22.691883669   | Program output: 7.3661596849  
Correct output: -64.8098353824 | Program output: -61.8098353824
Correct output: -50.5729717288 | Program output: 7.3661596849  
Correct output: 10.5716307984  | Program output: 21.5816296127 
Correct output: -5.0640064942  | Program output: -22.0640064942
Correct output: -156.5700373509 | Program output: -134.5700373509
Correct output: 16.1193686865  | Program output: 7.3661596849  
Correct output: 50.1878349036  | Program output: 23.1978337179 
Correct output: -138.4095016371 | Program output: -85.4095016371
Correct output: -119.7462217731 | Program output: -115.7462217731
Correct output: -95.2566750864 | Program output: -40.2566750864
Correct output: 153.6667050749 | Program output: 158.3334101499
Correct output: 6.8630846811   | Program output: 7.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 32.7374026319 
Correct output: -49.1253212489 | Program output: -12.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 50.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction -86.49420597346834} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction float_pop} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_add} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction integer_shove} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop -86.49420597346834 integer_dup_items float_pop float_pop -85.0550927390534 float_pop float_min 47 integer_rot integer_yank integer_mod float_add 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_dup_items float_pop float_frominteger float_pop float_min integer_dup integer_fromfloat tag_float_538 in1 tagged_971 integer_shove float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult print_float float_dup_items)
Errors: [59.0 10 2.01 7 27.0 3 6.6076 10 21.0 2 28.99 8 29.0 2 15.3257 9 3.0 1 57.9391 13 11.01 9 17.0 2 22.0 2 8.7532 10 26.99 8 53.0 3 4.0 1 55.0 2 4.6667 9 0.5031 8 20.0 1 2.0 1 37.0 2 16.0 1 12.99 9]
Total: 673.7854000000001
Mean: 13.475708
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5499.501271499998
Median total errors in population: 831.7503499999999
Error averages by case: (243.57737690000002 11.277 188.79269270000026 10.101 230.30802659999983 8.308 196.8037421999987 10.91 205.17353790000004 4.669 202.11635499999906 10.504 216.12428230000015 4.989 194.14635879999793 9.926 208.51720559999998 4.72 230.4505718999979 12.51 196.1412293000007 10.942 206.20806490000007 4.598 228.20018500000003 5.02 191.28017340000264 10.632 205.19664899999944 10.558 249.15700169999997 5.65 212.75401959999994 4.753 245.77159530000006 4.758 219.90305690000045 10.111 188.63290400000008 9.419 211.21173949999996 4.56 201.50266240000005 4.218 227.3306447 6.359 201.64082349999993 7.769 200.72337239999973 10.576)
Error minima by case: (0.0 1 0.01 6 0.7323 2 0.0844 8 0.0 1 0.096 6 0.2536 1 0.6528 6 0.0 1 0.01 2 0.2055 8 0.0 0 0.0 1 0.096 6 1.904 7 0.0 1 0.0 0 0.0 1 0.3333 2 0.0555 7 0.0 0 0.0 0 0.0 1 0.0 0 0.0089 1)
Average genome size in population (length): 180.502
Average program size in population (points): 181.502
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 96.14001400009268
Average age in population: 92.331917788354
Median age in population: 94.04514165490701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.772
Error (vector) diversity:			 0.806
Behavioral diversity:				 0.808
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 260289749
--- Timings ---
Current time: 1529616362353 milliseconds
Total Time:         425.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.0 seconds, 23.7%
Fitness Testing:    250.6 seconds, 58.9%
Report:              73.7 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 31620.80040000004
Test mean error for best: 15.81040
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 34.732100971  
Correct output: 10.0760954048  | Program output: 13.0860942191 
Correct output: 106.0206148688 | Program output: 81.0206148688 
Correct output: 0.7585604003   | Program output: 8.3661596849  
Correct output: 32.0892717501  | Program output: 13.0892717501 
Correct output: 38.239902819   | Program output: 10.2499016332 
Correct output: -28.253581966  | Program output: -55.253581966 
Correct output: 22.691883669   | Program output: 8.3661596849  
Correct output: -64.8098353824 | Program output: -61.8098353824
Correct output: -50.5729717288 | Program output: 8.3661596849  
Correct output: 10.5716307984  | Program output: 22.5816296127 
Correct output: -5.0640064942  | Program output: -20.0640064942
Correct output: -156.5700373509 | Program output: -134.5700373509
Correct output: 16.1193686865  | Program output: 8.3661596849  
Correct output: 50.1878349036  | Program output: 24.1978337179 
Correct output: -138.4095016371 | Program output: -85.4095016371
Correct output: -119.7462217731 | Program output: -115.7462217731
Correct output: -95.2566750864 | Program output: -40.2566750864
Correct output: 153.6667050749 | Program output: 159.3334101499
Correct output: 6.8630846811   | Program output: 8.3661596849  
Correct output: -5.6640417064  | Program output: -23.6640417064
Correct output: 34.7374026319  | Program output: 32.7374026319 
Correct output: -49.1253212489 | Program output: -12.1253212489
Correct output: 17.2744201056  | Program output: 3.2744201056  
Correct output: 62.9989442076  | Program output: 51.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction float_yank} {:instruction integer_rot} {:instruction float_cos} {:instruction float_dup} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_max} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction tagged_971} {:instruction integer_div} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times integer_mod integer_yankdup float_dup_times float_max float_swap integer_yankdup integer_dup float_pop float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap float_yank integer_rot float_cos float_dup float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 float_max float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop integer_fromfloat tag_float_538 in1 tagged_971 float_min integer_dup float_pop -85.0550927390534 tag_float_538 in1 tagged_971 float_sub float_dec float_shove float_dec tagged_971 integer_div tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_shove float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [59.0 10 3.01 7 25.0 3 7.6076 10 19.0 2 27.99 8 27.0 2 14.3257 9 3.0 1 58.9391 13 12.01 9 15.0 2 22.0 2 7.7532 10 25.99 8 53.0 3 4.0 1 55.0 2 5.6667 9 1.5031 8 18.0 2 2.0 1 37.0 2 14.0 2 11.99 9]
Total: 664.7854000000001
Mean: 13.295708
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5938.479047999998
Median total errors in population: 851.8995
Error averages by case: (260.3038698 11.324 203.51085200000063 10.176 248.97338979999978 8.786 209.76072739999833 10.91 224.52813890000004 5.012 215.8259142999987 10.559 237.30996620000005 5.352 208.72349449999749 9.952 229.77518069999988 5.161 241.48715809999777 12.561 208.7443977000012 11.042 228.84280930000014 5.038 248.9503889000002 5.532 204.65191630000263 10.67 216.32006109999915 10.608 268.2070327 6.066 233.59233599999982 5.208 265.61373679999997 5.239 236.72165600000028 10.19 202.47649770000004 9.455 233.85078429999996 5.006 221.38930800000014 4.66 248.0893526000001 6.568 222.90226279999996 7.617 214.57581609999937 10.66)
Error minima by case: (1.6929 6 0.01 6 0.7323 2 0.238 7 0.0 0 0.096 7 5.7109 1 1.9596 8 0.0 0 0.0796 2 0.2055 8 0.0 0 19.0 1 0.096 6 0.0287 7 3.4095 2 1.0 1 2.2016 1 0.3333 2 0.1369 7 0.0 0 0.0 0 1.9011 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.341
Average program size in population (points): 181.341
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 97.24648401714485
Average age in population: 93.30008403629715
Median age in population: 95.31938694938896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.744
Error (vector) diversity:			 0.78
Behavioral diversity:				 0.783
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 264992484
--- Timings ---
Current time: 1529616369492 milliseconds
Total Time:         432.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.6 seconds, 23.7%
Fitness Testing:    255.1 seconds, 58.9%
Report:              75.0 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 31626.17750000003
Test mean error for best: 15.81309
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 29.732100971  
Correct output: 10.0760954048  | Program output: 9.996534284   
Correct output: 106.0206148688 | Program output: 78.0206148688 
Correct output: 0.7585604003   | Program output: 5.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 7.1603416982  
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 5.3661596849  
Correct output: -64.8098353824 | Program output: -66.8098353824
Correct output: -50.5729717288 | Program output: 5.3661596849  
Correct output: 10.5716307984  | Program output: 19.4920696776 
Correct output: -5.0640064942  | Program output: -16.0640064942
Correct output: -156.5700373509 | Program output: -139.5700373509
Correct output: 16.1193686865  | Program output: 5.3661596849  
Correct output: 50.1878349036  | Program output: 21.1082737828 
Correct output: -138.4095016371 | Program output: -90.4095016371
Correct output: -119.7462217731 | Program output: -120.7462217731
Correct output: -95.2566750864 | Program output: -45.2566750864
Correct output: 153.6667050749 | Program output: 156.3334101499
Correct output: 6.8630846811   | Program output: 5.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 27.7374026319 
Correct output: -49.1253212489 | Program output: -17.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 47.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_mod} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup tagged_392 float_dup print_integer float_dup print_integer float_mod integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_div float_frominteger integer_dup float_stackdepth float_min 47 integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_tan float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [54.0 10 0.0796 10 28.0 3 4.6076 10 15.0 2 31.0796 11 32.0 2 17.3257 9 2.0 1 55.9391 12 8.9204 10 11.0 2 17.0 2 10.7532 10 29.0796 10 48.0 3 1.0 2 50.0 1 2.6667 9 1.4969 8 20.0 1 7.0 2 32.0 2 16.0 1 15.0796 9]
Total: 652.028
Mean: 13.04056
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6116.964854999998
Median total errors in population: 836.23865
Error averages by case: (274.80321480000003 11.277 209.54653400000078 10.103 249.80171809999965 8.516 211.3273617999985 10.919 232.98287579999993 4.917 221.68706689999883 10.463 241.84125720000003 5.157 212.2300549999977 9.917 241.0608050999999 4.925 243.74299149999786 12.524 216.6767763000009 10.974 238.2020732 4.89 259.4177422000001 5.298 207.89227060000272 10.67 224.44013329999933 10.52 279.9498143000001 5.914 244.74807119999994 4.974 276.79378610000015 5.072 238.85610870000036 10.192 205.02359360000014 9.433 243.10552120000003 4.802 234.85358050000022 4.46 255.4462293000001 6.487 232.32550579999986 7.483 219.72776849999943 10.595)
Error minima by case: (0.2367 7 0.01 6 0.7323 2 0.1302 9 0.0 0 0.096 6 2.5463 1 0.9596 7 0.0 0 0.9204 2 0.0796 8 0.0 0 17.0 1 0.096 6 0.1778 7 2.5905 2 0.0 0 5.2567 1 0.3333 1 0.4969 7 0.0 0 0.0 0 0.1207 1 1.0 1 0.2691 1)
Average genome size in population (length): 180.754
Average program size in population (points): 181.754
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 98.80441721822918
Average age in population: 94.8638325237159
Median age in population: 96.5946837716311
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.727
Error (vector) diversity:			 0.781
Behavioral diversity:				 0.783
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 269703069
--- Timings ---
Current time: 1529616376463 milliseconds
Total Time:         439.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.0 seconds, 23.7%
Fitness Testing:    259.4 seconds, 59.0%
Report:              76.1 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 31626.17750000003
Test mean error for best: 15.81309
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 29.732100971  
Correct output: 10.0760954048  | Program output: 9.996534284   
Correct output: 106.0206148688 | Program output: 78.0206148688 
Correct output: 0.7585604003   | Program output: 5.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 7.1603416982  
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 5.3661596849  
Correct output: -64.8098353824 | Program output: -66.8098353824
Correct output: -50.5729717288 | Program output: 5.3661596849  
Correct output: 10.5716307984  | Program output: 19.4920696776 
Correct output: -5.0640064942  | Program output: -16.0640064942
Correct output: -156.5700373509 | Program output: -139.5700373509
Correct output: 16.1193686865  | Program output: 5.3661596849  
Correct output: 50.1878349036  | Program output: 21.1082737828 
Correct output: -138.4095016371 | Program output: -90.4095016371
Correct output: -119.7462217731 | Program output: -120.7462217731
Correct output: -95.2566750864 | Program output: -45.2566750864
Correct output: 153.6667050749 | Program output: 156.3334101499
Correct output: 6.8630846811   | Program output: 5.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 27.7374026319 
Correct output: -49.1253212489 | Program output: -17.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 47.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_mod} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup tagged_392 float_dup print_integer float_dup print_integer float_mod integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_div float_frominteger integer_dup float_stackdepth float_min 47 integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_tan float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [54.0 10 0.0796 10 28.0 3 4.6076 10 15.0 2 31.0796 11 32.0 2 17.3257 9 2.0 1 55.9391 12 8.9204 10 11.0 2 17.0 2 10.7532 10 29.0796 10 48.0 3 1.0 2 50.0 1 2.6667 9 1.4969 8 20.0 1 7.0 2 32.0 2 16.0 1 15.0796 9]
Total: 652.028
Mean: 13.04056
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5003.1429849999995
Median total errors in population: 826.9936
Error averages by case: (218.60937290000007 11.157 169.34644930000044 9.952 206.70156419999986 8.184 174.35433799999942 10.954 181.90764640000015 4.534 181.8520174999992 10.41 210.1610181 4.793 173.81385439999863 9.859 190.8466616 4.493 207.337092399998 12.491 174.25138740000062 10.915 192.58842260000003 4.504 211.17092069999995 4.845 168.93035790000255 10.603 182.58399439999943 10.367 232.16111900000013 5.431 196.11951769999993 4.485 230.19141510000003 4.648 194.3618112000007 9.976 165.85063440000047 9.429 196.66191459999993 4.4 178.34256279999997 4.088 210.60107480000008 5.949 182.93454039999995 7.352 177.19129719999964 10.453)
Error minima by case: (0.2141 7 0.01 6 0.7323 2 0.1825 8 0.0 0 0.096 6 1.0805 1 0.2577 8 0.0 0 0.0796 2 0.01 7 0.0 0 16.0 1 0.096 6 0.5983 7 3.4095 2 0.0 0 0.2016 1 0.0551 2 0.096 7 0.3666 1 0.0 0 0.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.398
Average program size in population (points): 181.398
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 99.72538129620217
Average age in population: 96.35003806408353
Median age in population: 97.84026182030895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.782
Error (vector) diversity:			 0.823
Behavioral diversity:				 0.825
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 274405321
--- Timings ---
Current time: 1529616383423 milliseconds
Total Time:         446.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.5 seconds, 23.6%
Fitness Testing:    263.7 seconds, 59.0%
Report:              77.3 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 31626.17750000003
Test mean error for best: 15.81309
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 29.732100971  
Correct output: 10.0760954048  | Program output: 9.996534284   
Correct output: 106.0206148688 | Program output: 78.0206148688 
Correct output: 0.7585604003   | Program output: 5.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 7.1603416982  
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 5.3661596849  
Correct output: -64.8098353824 | Program output: -66.8098353824
Correct output: -50.5729717288 | Program output: 5.3661596849  
Correct output: 10.5716307984  | Program output: 19.4920696776 
Correct output: -5.0640064942  | Program output: -16.0640064942
Correct output: -156.5700373509 | Program output: -139.5700373509
Correct output: 16.1193686865  | Program output: 5.3661596849  
Correct output: 50.1878349036  | Program output: 21.1082737828 
Correct output: -138.4095016371 | Program output: -90.4095016371
Correct output: -119.7462217731 | Program output: -120.7462217731
Correct output: -95.2566750864 | Program output: -45.2566750864
Correct output: 153.6667050749 | Program output: 156.3334101499
Correct output: 6.8630846811   | Program output: 5.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 27.7374026319 
Correct output: -49.1253212489 | Program output: -17.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 47.9193830868 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction tagged_392} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_mod} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 47.92043887919795} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup tagged_392 float_dup print_integer float_dup print_integer float_mod integer_div integer_div print_integer integer_flush integer_dup_times float_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 47.92043887919795 float_max float_add float_inc in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup float_dup_times float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_div float_frominteger integer_dup float_stackdepth float_min 47 integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_tan float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [54.0 10 0.0796 10 28.0 3 4.6076 10 15.0 2 31.0796 11 32.0 2 17.3257 9 2.0 1 55.9391 12 8.9204 10 11.0 2 17.0 2 10.7532 10 29.0796 10 48.0 3 1.0 2 50.0 1 2.6667 9 1.4969 8 20.0 1 7.0 2 32.0 2 16.0 1 15.0796 9]
Total: 652.028
Mean: 13.04056
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5197.463514399998
Median total errors in population: 812.2444
Error averages by case: (230.9711312000001 11.22 174.30044440000083 9.911 217.96929610000004 8.097 179.18983969999906 11.016 193.8235644 4.56 187.44594319999862 10.305 215.51121350000003 4.819 180.06154139999808 9.928 198.70226959999997 4.424 212.7797742999981 12.498 181.53649700000094 10.936 200.42890160000007 4.486 216.49493100000012 4.822 175.51545070000225 10.677 189.98327939999925 10.373 238.47209070000005 5.44 200.9171920999999 4.424 236.78905109999997 4.605 202.86202120000033 10.008 172.81414970000034 9.488 204.67261109999998 4.43 188.9798022000002 4.012 219.29417460000022 5.966 196.5533219999999 7.434 187.0660221999992 10.45)
Error minima by case: (0.6957 8 0.01 6 0.7323 2 0.2414 7 1.0 1 0.096 7 1.2536 1 0.096 7 0.0 0 0.0796 2 0.0796 7 0.0 0 14.0 1 0.096 6 0.096 7 16.3544 2 0.0 0 2.7433 1 0.3333 1 0.2403 7 0.0 0 0.0 0 0.8747 1 2.0 1 0.2702 1)
Average genome size in population (length): 180.755
Average program size in population (points): 181.755
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 101.0535439908146
Average age in population: 97.52188929752278
Median age in population: 99.01327194032152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.755
Error (vector) diversity:			 0.803
Behavioral diversity:				 0.806
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 279112193
--- Timings ---
Current time: 1529616390611 milliseconds
Total Time:         453.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.0 seconds, 23.6%
Fitness Testing:    268.1 seconds, 59.1%
Report:              78.4 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 31086.61400000006
Test mean error for best: 15.54331
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 29.732100971  
Correct output: 10.0760954048  | Program output: 9.0860942191  
Correct output: 106.0206148688 | Program output: 77.0206148688 
Correct output: 0.7585604003   | Program output: 5.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 6.2499016332  
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 5.3661596849  
Correct output: -64.8098353824 | Program output: -66.8098353824
Correct output: -50.5729717288 | Program output: 5.3661596849  
Correct output: 10.5716307984  | Program output: 18.5816296127 
Correct output: -5.0640064942  | Program output: -16.0640064942
Correct output: -156.5700373509 | Program output: -139.5700373509
Correct output: 16.1193686865  | Program output: 5.3661596849  
Correct output: 50.1878349036  | Program output: 20.1978337179 
Correct output: -138.4095016371 | Program output: -90.4095016371
Correct output: -119.7462217731 | Program output: -120.7462217731
Correct output: -95.2566750864 | Program output: -45.2566750864
Correct output: 153.6667050749 | Program output: 155.3334101499
Correct output: 6.8630846811   | Program output: 5.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 27.7374026319 
Correct output: -49.1253212489 | Program output: -17.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 47.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_swap integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add integer_stackdepth float_add integer_dec in2 13.366159684860918 float_max float_add float_inc in2 float_dup_times float_max integer_shove integer_dup_items float_pop float_mult float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items float_div float_frominteger integer_dup float_stackdepth float_min 47 integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_tan float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [54.0 10 0.99 8 29.0 3 4.6076 10 15.0 2 31.99 8 32.0 2 17.3257 9 2.0 1 55.9391 12 8.01 8 11.0 2 17.0 2 10.7532 10 29.99 7 48.0 3 1.0 2 50.0 1 1.6667 9 1.4969 8 20.0 1 7.0 2 32.0 2 16.0 1 15.99 9]
Total: 644.7592000000001
Mean: 12.895184
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5427.509548099999
Median total errors in population: 813.852
Error averages by case: (241.26304539999998 11.237 184.61297340000053 9.802 221.6030348999998 7.987 189.55807409999835 10.919 203.84579240000014 4.547 198.99675229999852 10.192 219.52871410000003 4.925 188.8100073999975 9.91 209.58627219999997 4.542 220.48471399999792 12.439 190.1115061000011 10.804 210.27609280000004 4.588 227.4832019000001 4.987 185.92936380000245 10.656 199.00614909999902 10.3 249.04782659999998 5.581 212.1877391999999 4.57 247.93045000000004 4.754 208.3078983000004 9.932 182.0737380000003 9.46 216.82667349999994 4.493 199.42450890000006 4.05 230.15915440000012 6.057 202.6596573 7.328 193.39820799999907 10.338)
Error minima by case: (0.5954 8 0.01 6 0.2677 2 0.2012 8 0.0 0 0.096 7 1.2536 1 0.7423 7 0.0 0 0.01 2 0.01 6 0.0 0 13.0 1 0.096 5 0.096 7 0.4095 2 0.0 0 4.2567 1 0.3333 2 0.1339 6 0.0 0 0.0 0 16.3437 1 0.0 0 0.2691 1)
Average genome size in population (length): 179.849
Average program size in population (points): 180.849
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 102.6876483290287
Average age in population: 97.84100057869989
Median age in population: 100.2296455609035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.746
Error (vector) diversity:			 0.805
Behavioral diversity:				 0.807
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 283797227
--- Timings ---
Current time: 1529616397554 milliseconds
Total Time:         460.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.5 seconds, 23.5%
Fitness Testing:    272.4 seconds, 59.1%
Report:              79.8 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 31364.824700000063
Test mean error for best: 15.68241
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 30.732100971  
Correct output: 10.0760954048  | Program output: 8.0860942191  
Correct output: 106.0206148688 | Program output: 76.0206148688 
Correct output: 0.7585604003   | Program output: 4.3661596849  
Correct output: 32.0892717501  | Program output: 17.0892717501 
Correct output: 38.239902819   | Program output: 5.2499016332  
Correct output: -28.253581966  | Program output: -60.253581966 
Correct output: 22.691883669   | Program output: 4.3661596849  
Correct output: -64.8098353824 | Program output: -65.8098353824
Correct output: -50.5729717288 | Program output: 4.3661596849  
Correct output: 10.5716307984  | Program output: 17.5816296127 
Correct output: -5.0640064942  | Program output: -16.0640064942
Correct output: -156.5700373509 | Program output: -138.5700373509
Correct output: 16.1193686865  | Program output: 4.3661596849  
Correct output: 50.1878349036  | Program output: 19.1978337179 
Correct output: -138.4095016371 | Program output: -89.4095016371
Correct output: -119.7462217731 | Program output: -119.7462217731
Correct output: -95.2566750864 | Program output: -44.2566750864
Correct output: 153.6667050749 | Program output: 154.3334101499
Correct output: 6.8630846811   | Program output: 4.3661596849  
Correct output: -5.6640417064  | Program output: -25.6640417064
Correct output: 34.7374026319  | Program output: 28.7374026319 
Correct output: -49.1253212489 | Program output: -16.1253212489
Correct output: 17.2744201056  | Program output: 1.2744201056  
Correct output: 62.9989442076  | Program output: 46.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_swap} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_add} {:instruction integer_mod} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_min} {:instruction 47} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_swap integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add integer_stackdepth float_add integer_dec in2 13.366159684860918 float_max float_add integer_mod in2 float_dup_times float_max integer_shove integer_dup_items float_pop float_mult float_max integer_min integer_dup_times float_pop integer_min integer_shove integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_mult integer_dup_items integer_fromfloat float_frominteger integer_dup float_stackdepth float_min 47 integer_rot integer_dup_times integer_mod float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_tan float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec integer_flush tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 integer_sub float_dec integer_stackdepth float_rot integer_rot -50 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [55.0 11 1.99 8 30.0 2 3.6076 10 15.0 2 32.99 8 32.0 2 18.3257 9 1.0 1 54.9391 13 7.01 8 11.0 2 18.0 2 11.7532 10 30.99 8 49.0 3 0.0 0 51.0 2 0.6667 9 2.4969 8 20.0 1 6.0 2 33.0 2 16.0 1 16.99 9]
Total: 651.7592000000001
Mean: 13.035184
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5908.318210399999
Median total errors in population: 838.24225
Error averages by case: (255.71639779999995 11.243 198.36277520000067 9.875 246.74699329999936 8.175 208.57374279999834 10.993 220.40302499999993 4.928 211.8928736999988 10.271 239.90779899999998 5.266 205.22987539999772 9.956 232.05353339999994 4.91 239.05053389999776 12.479 207.11097020000093 10.878 232.0968920000001 4.902 251.21195340000017 5.319 201.4367427000024 10.691 216.35842989999918 10.404 271.49841450000014 5.871 236.2406343999998 4.932 268.22751960000005 5.133 230.90200480000047 10.058 199.13349800000043 9.566 237.15162460000005 4.806 216.2900523000001 4.422 249.26533980000022 6.351 223.06019669999995 7.549 210.99838799999918 10.42)
Error minima by case: (0.2679 8 0.01 6 0.2677 2 0.0024 7 0.0 0 0.096 7 1.1355 1 0.9596 8 0.0 0 0.01 2 0.01 7 0.0 0 14.0 1 0.096 6 0.096 7 3.4095 2 0.0 0 0.0428 1 0.3333 2 0.096 7 0.336 1 0.0 0 1.6896 1 0.0 0 0.0089 1)
Average genome size in population (length): 180.331
Average program size in population (points): 181.331
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 103.6251286649956
Average age in population: 99.5348768997792
Median age in population: 101.5685476354907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.737
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 288492059
--- Timings ---
Current time: 1529616404439 milliseconds
Total Time:         467.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.0 seconds, 23.5%
Fitness Testing:    276.7 seconds, 59.2%
Report:              80.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 29625.32020000007
Test mean error for best: 14.81266
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 26.732100971  
Correct output: 10.0760954048  | Program output: 7.0860942191  
Correct output: 106.0206148688 | Program output: 60.0206148688 
Correct output: 0.7585604003   | Program output: 2.3661596849  
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 4.2499016332  
Correct output: -28.253581966  | Program output: -67.253581966 
Correct output: 22.691883669   | Program output: 2.3661596849  
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 2.3661596849  
Correct output: 10.5716307984  | Program output: 16.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -142.5700373509
Correct output: 16.1193686865  | Program output: 2.3661596849  
Correct output: 50.1878349036  | Program output: 18.1978337179 
Correct output: -138.4095016371 | Program output: -93.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -48.2566750864
Correct output: 153.6667050749 | Program output: 153.3334101499
Correct output: 6.8630846811   | Program output: 2.3661596849  
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -20.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 45.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_tan)
Errors: [51.0 10 2.99 8 46.0 2 1.6076 10 4.0 2 33.99 8 39.0 2 20.3257 8 7.0 2 52.9391 13 6.01 8 0.0 0 14.0 2 13.7532 10 31.99 8 45.0 2 8.0 1 47.0 2 0.3333 8 4.4969 8 9.0 2 2.0 1 29.0 2 5.0 1 17.99 9]
Total: 621.4258000000001
Mean: 12.428516
Genome size: 191
Size: 192
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5508.3237291999985
Median total errors in population: 824.8054
Error averages by case: (246.0607604 11.249 186.01388330000034 9.872 227.20332649999972 8.119 189.1872263999989 11.003 209.16475530000017 4.801 197.4114243999989 10.303 220.23563620000013 5.321 185.50328229999818 9.944 215.91253629999994 4.759 220.7122942999979 12.502 193.1697148000009 10.849 211.65363840000006 4.843 235.4209725000002 5.158 182.2813310000024 10.697 202.88464729999907 10.352 255.82371600000002 5.762 220.4949266999999 4.824 252.63661369999997 4.978 217.67790310000052 10.055 179.86538270000042 9.53 218.2183152999999 4.703 207.22645920000008 4.443 230.37239830000013 6.459 205.54624909999987 7.303 199.44233569999903 10.375)
Error minima by case: (0.2679 2 0.01 6 0.2677 2 0.1131 9 0.0 0 1.096 7 0.9739 1 0.9596 8 0.0 0 0.01 2 0.01 7 0.0 0 14.0 1 0.904 6 0.096 7 10.0 1 0.0 0 0.5417 1 0.3333 2 0.096 6 0.0 0 0.0 0 2.7637 1 0.0 0 0.0011 2)
Average genome size in population (length): 180.002
Average program size in population (points): 181.002
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 105.1263059057715
Average age in population: 100.9414805183993
Median age in population: 102.9115225979926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.742
Error (vector) diversity:			 0.797
Behavioral diversity:				 0.799
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 293179871
--- Timings ---
Current time: 1529616411368 milliseconds
Total Time:         474.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.4 seconds, 23.5%
Fitness Testing:    281.0 seconds, 59.2%
Report:              82.1 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 29625.32020000007
Test mean error for best: 14.81266
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 26.732100971  
Correct output: 10.0760954048  | Program output: 7.0860942191  
Correct output: 106.0206148688 | Program output: 60.0206148688 
Correct output: 0.7585604003   | Program output: 2.3661596849  
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 4.2499016332  
Correct output: -28.253581966  | Program output: -67.253581966 
Correct output: 22.691883669   | Program output: 2.3661596849  
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 2.3661596849  
Correct output: 10.5716307984  | Program output: 16.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -142.5700373509
Correct output: 16.1193686865  | Program output: 2.3661596849  
Correct output: 50.1878349036  | Program output: 18.1978337179 
Correct output: -138.4095016371 | Program output: -93.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -48.2566750864
Correct output: 153.6667050749 | Program output: 153.3334101499
Correct output: 6.8630846811   | Program output: 2.3661596849  
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -20.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 45.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_tan)
Errors: [51.0 10 2.99 8 46.0 2 1.6076 10 4.0 2 33.99 8 39.0 2 20.3257 8 7.0 2 52.9391 13 6.01 8 0.0 0 14.0 2 13.7532 10 31.99 8 45.0 2 8.0 1 47.0 2 0.3333 8 4.4969 8 9.0 2 2.0 1 29.0 2 5.0 1 17.99 9]
Total: 621.4258000000001
Mean: 12.428516
Genome size: 191
Size: 192
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5273.223548099998
Median total errors in population: 810.7951
Error averages by case: (236.44265600000003 11.173 176.16877410000035 9.828 215.79550059999983 7.875 182.88109939999939 11.022 201.81768560000006 4.615 187.64976799999906 10.172 211.1132930000001 4.988 179.42181469999878 9.906 206.8174996 4.393 212.1954947999987 12.391 180.2942807000007 10.784 207.89040060000005 4.557 224.74341720000012 4.856 175.52101760000235 10.597 188.79786829999927 10.234 246.56475750000013 5.469 209.8807802999999 4.456 243.47435289999999 4.71 200.01117140000062 9.889 172.97064750000024 9.454 213.64849619999998 4.474 196.44983630000016 4.154 221.90984280000015 6.103 202.8003164 7.241 184.31477659999928 10.307)
Error minima by case: (0.2367 7 0.01 6 0.2677 2 0.0088 6 1.0 1 0.7701 7 1.8496 1 0.0404 7 0.0 0 0.01 2 0.01 7 0.0 0 13.0 1 0.7532 7 0.096 7 1.4095 2 0.0 0 5.2016 1 0.3333 2 0.096 6 0.0 0 0.0 0 6.8747 1 0.0917 1 0.2702 1)
Average genome size in population (length): 180.102
Average program size in population (points): 181.102
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 106.4723031297397
Average age in population: 102.4361720827628
Median age in population: 104.2418966894456
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.739
Error (vector) diversity:			 0.807
Behavioral diversity:				 0.81
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 297871839
--- Timings ---
Current time: 1529616418374 milliseconds
Total Time:         481.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.9 seconds, 23.5%
Fitness Testing:    285.3 seconds, 59.2%
Report:              83.2 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 29625.32020000007
Test mean error for best: 14.81266
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 26.732100971  
Correct output: 10.0760954048  | Program output: 7.0860942191  
Correct output: 106.0206148688 | Program output: 60.0206148688 
Correct output: 0.7585604003   | Program output: 2.3661596849  
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 4.2499016332  
Correct output: -28.253581966  | Program output: -67.253581966 
Correct output: 22.691883669   | Program output: 2.3661596849  
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 2.3661596849  
Correct output: 10.5716307984  | Program output: 16.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -142.5700373509
Correct output: 16.1193686865  | Program output: 2.3661596849  
Correct output: 50.1878349036  | Program output: 18.1978337179 
Correct output: -138.4095016371 | Program output: -93.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -48.2566750864
Correct output: 153.6667050749 | Program output: 153.3334101499
Correct output: 6.8630846811   | Program output: 2.3661596849  
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -20.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 45.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_div float_yank integer_yankdup float_cos float_pop float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_tan)
Errors: [51.0 10 2.99 8 46.0 2 1.6076 10 4.0 2 33.99 8 39.0 2 20.3257 8 7.0 2 52.9391 13 6.01 8 0.0 0 14.0 2 13.7532 10 31.99 8 45.0 2 8.0 1 47.0 2 0.3333 8 4.4969 8 9.0 2 2.0 1 29.0 2 5.0 1 17.99 9]
Total: 621.4258000000001
Mean: 12.428516
Genome size: 191
Size: 192
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5405.501715199999
Median total errors in population: 835.8152999999999
Error averages by case: (240.5534392 11.171 178.74102020000052 9.767 232.54055269999958 8.068 190.3933423999987 11.086 199.02859759999984 4.667 191.41736999999904 10.05 222.5600017000001 5.239 186.02778769999816 9.975 210.03066449999986 4.511 218.518183499998 12.237 185.41940650000086 10.75 204.71754920000004 4.71 228.85308320000016 5.038 183.25387540000239 10.579 193.84513409999934 10.232 250.15719070000017 5.614 213.72001899999992 4.627 246.00293090000002 4.841 218.88211410000076 10.009 181.95174370000004 9.635 211.52175340000005 4.55 201.02463380000012 4.203 224.57465390000004 6.25 202.6420966 7.072 193.97557119999894 10.268)
Error minima by case: (0.2679 6 0.01 6 0.2677 2 0.1141 7 0.0 0 0.2299 6 3.7464 1 0.0404 7 0.0 0 0.01 2 0.7945 2 0.0 0 13.0 1 0.904 6 0.096 2 4.5905 2 0.0 0 0.2016 1 0.3333 2 0.096 6 0.0 0 0.0 0 1.4322 1 1.0 1 0.0806 1)
Average genome size in population (length): 180.038
Average program size in population (points): 181.038
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 107.558507454481
Average age in population: 103.6040282101615
Median age in population: 105.5350917172823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.753
Error (vector) diversity:			 0.808
Behavioral diversity:				 0.81
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 302563679
--- Timings ---
Current time: 1529616425488 milliseconds
Total Time:         488.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.4 seconds, 23.4%
Fitness Testing:    289.7 seconds, 59.3%
Report:              84.4 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 29175.648200000054
Test mean error for best: 14.58782
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 26.732100971  
Correct output: 10.0760954048  | Program output: 16.0860942191 
Correct output: 106.0206148688 | Program output: 60.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 13.2499016332 
Correct output: -28.253581966  | Program output: -67.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -142.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.1978337179 
Correct output: -138.4095016371 | Program output: -93.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -48.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -20.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 54.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_min} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_div float_yank integer_yankdup float_cos float_pop float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove float_min tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_tan)
Errors: [51.0 10 6.01 7 46.0 2 10.6076 11 4.0 2 24.99 8 39.0 2 11.3257 9 7.0 2 61.9391 13 15.01 9 0.0 0 14.0 2 4.7532 9 22.99 8 45.0 2 8.0 1 47.0 2 8.6667 10 4.5031 9 9.0 2 2.0 1 29.0 2 5.0 1 8.99 9]
Total: 618.7854000000001
Mean: 12.375708
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5509.758225099998
Median total errors in population: 823.8477
Error averages by case: (241.2898646000001 11.195 184.86075060000022 9.65 237.64807699999957 8.142 195.5214969999995 11.033 208.10793439999992 4.699 200.50744829999908 9.854 217.77184650000007 5.028 194.0273881999988 9.95 208.69928609999985 4.508 221.57148819999898 12.24 192.55371750000074 10.552 209.97097 4.631 227.38908130000019 4.985 189.97048010000188 10.543 202.82728119999933 10.074 248.5791457000001 5.61 212.49252789999989 4.608 246.21904990000002 4.852 224.75531570000078 10.123 187.08540510000017 9.536 215.69236700000005 4.572 202.36483230000013 4.241 230.67290930000019 6.002 211.9299528 7.532 202.7856083999994 10.304)
Error minima by case: (0.9526 7 0.01 6 0.2677 2 0.3924 7 1.0 1 0.096 7 1.9111 1 0.096 6 0.0 0 0.01 2 0.01 6 0.0 0 12.0 1 0.096 5 0.096 7 1.4095 2 0.0 0 0.2016 1 0.3333 2 0.096 6 0.0 1 0.0 0 1.2027 1 2.0 1 0.2702 1)
Average genome size in population (length): 178.661
Average program size in population (points): 179.661
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 108.8708723052035
Average age in population: 104.3952628318328
Median age in population: 106.7541586905605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.751
Error (vector) diversity:			 0.807
Behavioral diversity:				 0.811
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 307215023
--- Timings ---
Current time: 1529616432418 milliseconds
Total Time:         495.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.8 seconds, 23.4%
Fitness Testing:    294.1 seconds, 59.3%
Report:              85.7 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 29175.648200000054
Test mean error for best: 14.58782
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 26.732100971  
Correct output: 10.0760954048  | Program output: 16.0860942191 
Correct output: 106.0206148688 | Program output: 60.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 13.2499016332 
Correct output: -28.253581966  | Program output: -67.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -57.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -142.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.1978337179 
Correct output: -138.4095016371 | Program output: -93.4095016371
Correct output: -119.7462217731 | Program output: -111.7462217731
Correct output: -95.2566750864 | Program output: -48.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 36.7374026319 
Correct output: -49.1253212489 | Program output: -20.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 54.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_div} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_min} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_div float_yank integer_yankdup float_cos float_pop float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_mod float_add integer_pop float_swap integer_dup_times float_min 48 integer_dup integer_yankdup integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_yankdup float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove float_min tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec integer_pop float_dec float_dec float_dec float_dec integer_pop float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_tan)
Errors: [51.0 10 6.01 7 46.0 2 10.6076 11 4.0 2 24.99 8 39.0 2 11.3257 9 7.0 2 61.9391 13 15.01 9 0.0 0 14.0 2 4.7532 9 22.99 8 45.0 2 8.0 1 47.0 2 8.6667 10 4.5031 9 9.0 2 2.0 1 29.0 2 5.0 1 8.99 9]
Total: 618.7854000000001
Mean: 12.375708
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5453.106099399998
Median total errors in population: 832.1929
Error averages by case: (249.44773029999988 11.217 175.67328310000028 9.395 231.33197429999936 7.839 184.49804109999883 10.958 209.5896447999999 4.692 190.74232899999865 9.679 218.67554000000015 4.869 183.69643839999796 9.898 216.62914680000003 4.537 213.136174499998 12.304 183.89921940000093 10.314 213.77614800000003 4.679 234.94209300000017 5.046 179.4808046000025 10.459 193.9531417999989 9.858 255.94121800000008 5.63 220.15591359999993 4.643 253.30273630000008 4.906 215.04369180000074 9.965 176.5223336000001 9.438 218.51329540000017 4.622 209.99877070000014 4.29 232.41164730000023 6.264 206.17922859999996 7.329 192.5015549999986 10.233)
Error minima by case: (0.2679 6 0.01 6 0.7323 2 0.0574 7 0.0 0 0.096 7 0.2341 1 0.0654 8 0.0 0 0.01 2 0.01 7 0.0 0 13.0 1 0.096 6 0.096 7 6.4095 2 0.0 0 1.2016 1 0.3333 2 0.096 7 0.336 1 0.0 0 0.8747 1 1.0 1 0.2702 1)
Average genome size in population (length): 179.674
Average program size in population (points): 180.674
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 110.1210200928909
Average age in population: 106.4544001760616
Median age in population: 108.1145893762384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.752
Error (vector) diversity:			 0.825
Behavioral diversity:				 0.829
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 311892126
--- Timings ---
Current time: 1529616439227 milliseconds
Total Time:         502.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.3 seconds, 23.3%
Fitness Testing:    298.3 seconds, 59.4%
Report:              86.8 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 32869.37210000006
Test mean error for best: 16.43469
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 32.732100971  
Correct output: 10.0760954048  | Program output: 37.1720783334 
Correct output: 106.0206148688 | Program output: 100.7529342386
Correct output: 0.7585604003   | Program output: -31.1454566712
Correct output: 32.0892717501  | Program output: 23.0892717501 
Correct output: 38.239902819   | Program output: 34.3358857475 
Correct output: -28.253581966  | Program output: -26.0         
Correct output: 22.691883669   | Program output: 14.7878665976 
Correct output: -64.8098353824 | Program output: -63.8098353824
Correct output: -50.5729717288 | Program output: -25.4769888002
Correct output: 10.5716307984  | Program output: 46.667613727  
Correct output: -5.0640064942  | Program output: -10.0640064942
Correct output: -156.5700373509 | Program output: -136.5700373509
Correct output: 16.1193686865  | Program output: 12.215351615  
Correct output: 50.1878349036  | Program output: 48.2838178322 
Correct output: -138.4095016371 | Program output: -87.4095016371
Correct output: -119.7462217731 | Program output: -117.7462217731
Correct output: -95.2566750864 | Program output: -42.2566750864
Correct output: 153.6667050749 | Program output: 183.0657295196
Correct output: 6.8630846811   | Program output: 6.9590676097  
Correct output: -5.6640417064  | Program output: -19.6640417064
Correct output: 34.7374026319  | Program output: 30.7374026319 
Correct output: -49.1253212489 | Program output: -14.1253212489
Correct output: 17.2744201056  | Program output: 7.2744201056  
Correct output: 62.9989442076  | Program output: 75.0949271362 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction float_dup} {:instruction print_integer} {:instruction float_dup} {:instruction print_integer} {:instruction float_sin} {:instruction integer_div} {:instruction integer_div} {:instruction print_integer} {:instruction tagged_409} {:instruction integer_dup_times} {:instruction 74} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction in1} {:instruction 48.3636635588378} {:instruction float_max} {:instruction float_add} {:instruction float_add} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction integer_dec} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_mult} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_add} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_sub} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_rot} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup float_dup print_integer float_dup print_integer float_sin integer_div integer_div print_integer tagged_409 integer_dup_times 74 float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_dup_times in1 48.3636635588378 float_max float_add float_add float_min integer_yankdup integer_dec in2 13.366159684860918 integer_dec float_add float_inc in2 float_dup_times float_max integer_mod integer_yankdup integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup_items float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_mult float_min integer_yankdup integer_dup integer_add float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec tagged_971 float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult integer_mult float_dec float_rot integer_pop float_sub float_rot float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_pop in2 float_min integer_div float_min integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec integer_div float_dec float_dec float_dec integer_div integer_rot float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec float_dec tagged_971 float_dec float_dec integer_max float_rot integer_pop float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float float_dup_items)
Errors: [57.0 10 27.096 10 5.2677 9 31.904 11 9.0 2 3.904 10 2.2536 10 7.904 10 1.0 1 25.096 10 36.096 10 5.0 2 20.0 1 3.904 7 1.904 10 51.0 3 2.0 1 53.0 2 29.399 9 0.096 8 14.0 2 4.0 1 35.0 2 10.0 1 12.096 10]
Total: 599.9203
Mean: 11.998406
Genome size: 183
Size: 184
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5499.2158148
Median total errors in population: 822.3302000000001
Error averages by case: (243.53699620000003 11.167 185.6653842000002 9.424 228.5821195999993 7.795 191.24181129999863 11.005 207.13538699999992 4.807 200.36431799999855 9.708 221.17362260000004 5.104 191.59398049999774 9.906 213.20264109999985 4.586 220.95540469999767 12.271 191.89415850000094 10.365 212.13643180000003 4.558 231.96866650000007 5.078 187.28574520000245 10.491 203.0322659999989 9.936 252.92156620000011 5.684 216.6599601999999 4.703 250.0248737 4.92 212.5167466000007 9.943 184.49533850000012 9.507 217.93226940000002 4.565 204.95381150000014 4.411 227.96050160000016 5.97 208.64991819999983 7.651 199.47989569999868 10.297)
Error minima by case: (0.2865 7 0.01 6 0.7323 1 0.2367 8 0.0 0 0.096 6 1.2344 1 0.096 7 0.0 0 0.01 1 0.01 7 0.0 0 7.4412 1 0.096 6 0.096 7 6.4095 2 0.0 0 0.7984 1 0.3333 2 0.07 6 0.5772 1 0.0 0 0.8747 1 0.0 0 0.097 1)
Average genome size in population (length): 179.705
Average program size in population (points): 180.705
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 111.6532743506438
Average age in population: 107.5804987457095
Median age in population: 109.4511596709717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.751
Error (vector) diversity:			 0.813
Behavioral diversity:				 0.815
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 316569588
--- Timings ---
Current time: 1529616446184 milliseconds
Total Time:         509.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.7 seconds, 23.3%
Fitness Testing:    302.8 seconds, 59.4%
Report:              87.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 28638.288400000038
Test mean error for best: 14.31914
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 17.0860942191 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 29.0892717501 
Correct output: 38.239902819   | Program output: 14.2499016332 
Correct output: -28.253581966  | Program output: -52.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -58.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 26.5816296127 
Correct output: -5.0640064942  | Program output: -4.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 28.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -112.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -13.6640417064
Correct output: 34.7374026319  | Program output: 35.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 13.2744201056 
Correct output: 62.9989442076  | Program output: 55.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_dup_times} {:instruction 48} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction tagged_731} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_dup_times 48 integer_fromfloat tag_integer_493 integer_yankdup integer_dup float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dup_items integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop float_dec integer_pop float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_pop tagged_731 float_dec tagged_971 float_dec float_min integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times integer_mult integer_dup_times print_float float_dup_items)
Errors: [53.0 10 7.01 7 21.0 3 12.6076 11 3.0 2 23.99 8 24.0 2 9.3257 9 6.0 2 63.9391 13 16.01 9 1.0 1 16.0 2 2.7532 9 21.99 8 47.0 3 7.0 1 49.0 2 9.6667 9 6.5031 9 8.0 2 1.0 1 31.0 2 4.0 1 7.99 9]
Total: 587.7854
Mean: 11.755708
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5596.398975499998
Median total errors in population: 818.3274000000001
Error averages by case: (243.97326020000006 11.179 193.89844920000002 9.483 237.3783378999995 7.771 196.44590559999924 11.09 209.95272509999995 5.01 206.04576659999898 9.701 228.3761755 5.195 196.8526413999985 9.984 213.52692699999994 4.682 223.73180449999793 12.239 198.22430740000073 10.272 211.30580770000014 4.79 233.07747460000013 5.182 193.46115100000216 10.488 208.76355459999917 9.847 252.77142440000017 5.787 219.20437309999994 4.905 249.7914559 5.023 223.85106920000078 10.068 189.03495429999992 9.556 217.65585029999997 4.782 208.06346180000017 4.57 228.40025250000016 6.382 207.7730237 7.485 209.00982199999885 10.358)
Error minima by case: (0.2035 7 0.01 6 0.7323 2 0.0414 8 0.0 0 0.096 6 2.2341 1 0.096 7 0.0 0 0.01 1 0.01 7 0.0 0 0.0 0 0.096 6 0.096 7 11.4095 2 0.0 0 2.6582 1 0.3333 2 0.096 6 0.195 1 0.0 0 1.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 179.405
Average program size in population (points): 180.405
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 112.9817750056284
Average age in population: 107.7697178687182
Median age in population: 110.7353253540912
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.76
Error (vector) diversity:			 0.815
Behavioral diversity:				 0.818
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 321234474
--- Timings ---
Current time: 1529616453214 milliseconds
Total Time:         516.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.1 seconds, 23.3%
Fitness Testing:    307.0 seconds, 59.5%
Report:              89.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 28900.595100000053
Test mean error for best: 14.45030
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 30.732100971  
Correct output: 10.0760954048  | Program output: 16.0860942191 
Correct output: 106.0206148688 | Program output: 73.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 27.0892717501 
Correct output: 38.239902819   | Program output: 13.2499016332 
Correct output: -28.253581966  | Program output: -54.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -65.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.5816296127 
Correct output: -5.0640064942  | Program output: -6.0640064942 
Correct output: -156.5700373509 | Program output: -138.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.1978337179 
Correct output: -138.4095016371 | Program output: -89.4095016371
Correct output: -119.7462217731 | Program output: -119.7462217731
Correct output: -95.2566750864 | Program output: -44.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -15.6640417064
Correct output: 34.7374026319  | Program output: 28.7374026319 
Correct output: -49.1253212489 | Program output: -16.1253212489
Correct output: 17.2744201056  | Program output: 11.2744201056 
Correct output: 62.9989442076  | Program output: 54.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult float_mod float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_stackdepth integer_dec integer_dup_times float_min 48 integer_dup float_swap integer_dup_times float_div tag_integer_375 3 integer_dup float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min float_dec float_dup_items integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [55.0 11 6.01 7 33.0 3 10.6076 11 5.0 2 24.99 8 26.0 2 11.3257 9 1.0 1 61.9391 13 15.01 9 1.0 1 18.0 2 4.7532 9 22.99 8 49.0 3 0.0 0 51.0 2 8.6667 10 4.5031 9 10.0 1 6.0 2 33.0 2 6.0 1 8.99 9]
Total: 608.7854000000001
Mean: 12.175708
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6235.456900999999
Median total errors in population: 819.8299000000001
Error averages by case: (273.78879720000003 11.232 215.95611350000033 9.593 261.3407152999992 8.218 221.9547055999987 11.125 240.33795659999996 5.252 228.5039600999989 9.762 251.9028549 5.173 220.9751607999979 10.092 242.83048890000003 4.8 250.24452999999778 12.384 218.8162494000012 10.324 239.89409100000006 4.926 261.1097686000001 5.389 217.96586500000274 10.514 227.11802149999914 9.963 281.1938768000001 5.975 246.26280499999984 4.975 276.34346159999996 5.224 245.8756284000008 10.204 213.72251439999988 9.65 246.60751020000004 4.968 237.36232600000017 4.69 255.42658260000027 6.295 235.23941649999983 7.67 225.79750109999853 10.488)
Error minima by case: (0.2979 7 0.01 6 0.7323 2 0.2414 7 0.0 0 0.2299 6 0.217 1 0.096 7 0.0 0 0.0796 2 0.01 7 0.0 0 0.0 0 0.2468 6 0.096 7 12.3544 2 0.0 0 1.2016 1 0.3333 2 0.096 7 0.0 0 0.0 0 11.1253 1 0.0 0 0.097 1)
Average genome size in population (length): 180.576
Average program size in population (points): 181.576
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 114.3180106403812
Average age in population: 109.6689758193644
Median age in population: 112.1521995996999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.721
Error (vector) diversity:			 0.781
Behavioral diversity:				 0.784
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 325924952
--- Timings ---
Current time: 1529616460213 milliseconds
Total Time:         523.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.6 seconds, 23.2%
Fitness Testing:    311.4 seconds, 59.5%
Report:              90.3 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 29525.807700000045
Test mean error for best: 14.76290
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 31.732100971  
Correct output: 10.0760954048  | Program output: 17.0860942191 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 14.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 26.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -137.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 28.1978337179 
Correct output: -138.4095016371 | Program output: -88.4095016371
Correct output: -119.7462217731 | Program output: -118.7462217731
Correct output: -95.2566750864 | Program output: -43.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 29.7374026319 
Correct output: -49.1253212489 | Program output: -15.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 55.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items integer_dup_times float_mult integer_yankdup float_shove float_pop print_integer integer_dup_items float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [56.0 11 7.01 7 21.0 3 11.6076 11 4.0 2 23.99 8 23.0 2 10.3257 8 0.0 0 62.9391 13 16.01 9 0.0 0 19.0 2 3.7532 9 21.99 8 50.0 2 1.0 1 52.0 2 9.6667 9 5.5031 9 9.0 2 5.0 2 34.0 2 5.0 1 7.99 9]
Total: 591.7854
Mean: 11.835708
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6483.218688799998
Median total errors in population: 860.8081999999999
Error averages by case: (278.8162088999999 11.215 227.11914930000017 9.708 275.03841999999935 8.246 237.04578429999876 11.134 239.84770819999991 5.502 240.22557869999864 9.81 265.3508343 5.324 233.5081918999977 10.108 251.24950659999993 5.132 259.8522852999975 12.208 232.20042860000112 10.353 245.66887870000002 5.129 272.62550250000015 5.727 228.3475252000027 10.489 240.76787769999893 10.009 291.40597550000024 6.295 255.93757009999987 5.382 286.37327760000016 5.486 258.77112650000083 10.2 223.97130199999967 9.7 251.35365749999997 5.117 241.446985 4.95 263.55581730000023 6.705 240.1242411 7.668 240.46985599999846 10.548)
Error minima by case: (0.7321 7 0.01 6 0.2677 2 0.0559 7 0.0 0 0.096 6 1.8483 1 0.0404 7 0.0 0 0.01 2 0.01 7 0.0 0 11.0 1 0.096 6 0.096 7 11.5905 2 0.0 0 0.7433 1 0.3333 1 0.096 6 0.1894 1 0.0 0 0.8747 1 0.7256 1 0.2702 2)
Average genome size in population (length): 179.68
Average program size in population (points): 180.68
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 115.3052371835615
Average age in population: 109.4066283862642
Median age in population: 113.4178659922987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.733
Error (vector) diversity:			 0.766
Behavioral diversity:				 0.768
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 330590235
--- Timings ---
Current time: 1529616467037 milliseconds
Total Time:         530.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.0 seconds, 23.2%
Fitness Testing:    315.7 seconds, 59.5%
Report:              91.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 29525.807700000045
Test mean error for best: 14.76290
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 31.732100971  
Correct output: 10.0760954048  | Program output: 17.0860942191 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 14.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 26.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -137.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 28.1978337179 
Correct output: -138.4095016371 | Program output: -88.4095016371
Correct output: -119.7462217731 | Program output: -118.7462217731
Correct output: -95.2566750864 | Program output: -43.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 29.7374026319 
Correct output: -49.1253212489 | Program output: -15.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 55.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times integer_dup_times in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items integer_dup_times float_mult integer_yankdup float_shove float_pop print_integer integer_dup_items float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [56.0 11 7.01 7 21.0 3 11.6076 11 4.0 2 23.99 8 23.0 2 10.3257 8 0.0 0 62.9391 13 16.01 9 0.0 0 19.0 2 3.7532 9 21.99 8 50.0 2 1.0 1 52.0 2 9.6667 9 5.5031 9 9.0 2 5.0 2 34.0 2 5.0 1 7.99 9]
Total: 591.7854
Mean: 11.835708
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6107.2976652
Median total errors in population: 846.7206999999999
Error averages by case: (264.5001291999999 11.16 210.15171920000023 9.712 262.6538941999991 8.248 218.9609052999987 11.221 232.2092209999999 5.492 220.13188859999886 9.785 248.61408830000016 5.203 214.0444236999981 10.084 236.12826979999988 4.888 243.2673228999978 12.153 215.0015700000007 10.329 234.5416765000001 4.943 254.10761040000017 5.408 210.45519230000244 10.482 223.81860869999932 10.011 274.11593300000015 6.033 240.9049255999999 5.084 271.2950118000001 5.215 249.2021410000008 10.197 206.8434261999996 9.769 241.69479390000004 4.899 228.0313342000001 4.757 252.5032263000002 6.219 228.7709766999999 7.592 225.9443763999986 10.521)
Error minima by case: (0.0213 6 0.01 6 0.2677 1 0.0858 8 0.0 0 0.096 6 0.5109 1 0.096 8 0.0 0 0.01 2 0.01 7 0.0 0 10.0 1 0.096 6 0.096 7 0.4095 2 0.0 0 3.0332 1 0.3333 2 0.096 6 0.0 0 0.0 0 5.107 1 0.0 0 0.2702 1)
Average genome size in population (length): 180.731
Average program size in population (points): 181.731
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 116.8256206640611
Average age in population: 111.3312179861286
Median age in population: 114.6284189587718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.744
Error (vector) diversity:			 0.782
Behavioral diversity:				 0.784
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 335282523
--- Timings ---
Current time: 1529616473960 milliseconds
Total Time:         537.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.6 seconds, 23.2%
Fitness Testing:    319.9 seconds, 59.6%
Report:              92.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 29525.807700000045
Test mean error for best: 14.76290
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 31.732100971  
Correct output: 10.0760954048  | Program output: 17.0860942191 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 14.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 26.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -137.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 28.1978337179 
Correct output: -138.4095016371 | Program output: -88.4095016371
Correct output: -119.7462217731 | Program output: -118.7462217731
Correct output: -95.2566750864 | Program output: -43.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 29.7374026319 
Correct output: -49.1253212489 | Program output: -15.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 55.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items integer_dup_times float_mult integer_yankdup float_shove float_pop print_integer integer_dup_items float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [56.0 11 7.01 7 21.0 3 11.6076 11 4.0 2 23.99 8 23.0 2 10.3257 8 0.0 0 62.9391 13 16.01 9 0.0 0 19.0 2 3.7532 9 21.99 8 50.0 2 1.0 1 52.0 2 9.6667 9 5.5031 9 9.0 2 5.0 2 34.0 2 5.0 1 7.99 9]
Total: 591.7854
Mean: 11.835708
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6112.408506899999
Median total errors in population: 857.57935
Error averages by case: (261.9672299 11.139 214.94766699999963 9.846 259.1045112999992 8.553 230.3003776999993 11.242 223.63063119999995 5.449 223.56590269999933 9.915 253.59626220000007 5.318 218.3308474999984 10.143 230.34652049999997 4.839 251.08817269999804 12.064 219.7240390000006 10.455 227.9252755000001 4.938 251.53617900000015 5.47 215.7464127000023 10.463 226.35520759999946 10.086 270.9253637000002 6.046 234.91467819999983 5.115 267.6677034 5.234 254.25689770000082 10.245 215.11305869999987 9.836 234.62748190000002 4.935 223.99672160000011 4.805 247.08131220000013 6.624 225.7848948 7.512 229.0851581999988 10.518)
Error minima by case: (0.0239 7 0.01 6 0.2677 1 0.1164 7 0.0 0 0.096 6 1.3394 1 0.0404 8 0.0 0 0.01 2 0.01 7 0.0 0 10.0 1 0.096 6 0.096 7 0.4095 2 0.0 0 2.7433 1 0.3333 1 0.096 6 0.0079 1 0.0 0 7.1661 1 0.0 0 0.096 1)
Average genome size in population (length): 180.85
Average program size in population (points): 181.85
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 118.5916440394849
Average age in population: 112.6277222193373
Median age in population: 115.9532035498033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.775
Error (vector) diversity:			 0.802
Behavioral diversity:				 0.804
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 339974773
--- Timings ---
Current time: 1529616480957 milliseconds
Total Time:         544.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.0 seconds, 23.2%
Fitness Testing:    324.3 seconds, 59.6%
Report:              93.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 28933.29280000004
Test mean error for best: 14.46665
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 17.0860942191 
Correct output: 106.0206148688 | Program output: 85.0206148688 
Correct output: 0.7585604003   | Program output: 12.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 14.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 12.3661596849 
Correct output: -64.8098353824 | Program output: -67.8098353824
Correct output: -50.5729717288 | Program output: 12.3661596849 
Correct output: 10.5716307984  | Program output: 26.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 12.3661596849 
Correct output: 50.1878349036  | Program output: 28.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -121.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 163.3334101499
Correct output: 6.8630846811   | Program output: 12.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 26.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 55.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items integer_dup_times float_mult integer_yankdup float_shove float_pop print_integer integer_dup_items float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [53.0 10 7.01 7 21.0 3 11.6076 11 4.0 2 23.99 8 23.0 2 10.3257 8 3.0 1 62.9391 13 16.01 9 0.0 0 16.0 2 3.7532 9 21.99 8 47.0 3 2.0 2 49.0 2 9.6667 9 5.5031 9 9.0 2 8.0 2 31.0 2 5.0 1 7.99 9]
Total: 585.7854
Mean: 11.715708
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6191.452851599999
Median total errors in population: 857.7561000000001
Error averages by case: (272.146658 11.137 213.57682419999966 9.843 268.2239765999993 8.582 222.5109872999991 11.263 234.31515059999998 5.492 221.89509139999907 9.91 256.0112541 5.386 217.4880709999986 10.135 240.12600039999998 4.84 242.58226159999788 12.031 221.43723970000073 10.493 236.8336694000002 4.859 257.9376148000002 5.461 213.98274690000207 10.4 227.23689769999925 10.037 277.72376820000017 6.049 244.20897879999995 5.086 273.53675990000005 5.194 248.10731320000085 10.308 210.65805419999964 9.843 242.41633320000005 4.958 236.3800851000002 4.755 251.64577970000025 6.291 231.62354729999998 7.544 228.42978829999848 10.521)
Error minima by case: (0.0239 8 0.01 6 0.1924 2 0.2414 8 0.0 0 0.0203 6 4.9856 1 0.0136 8 0.0 0 0.01 2 0.2055 7 0.0 0 6.0 1 0.096 6 0.096 7 8.4095 2 0.0 0 11.7984 1 0.3333 2 0.096 6 0.0 0 0.0 0 0.2506 1 0.0 0 0.2702 1)
Average genome size in population (length): 179.843
Average program size in population (points): 180.843
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 119.3403125295318
Average age in population: 113.142772272681
Median age in population: 117.2546875096435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.762
Error (vector) diversity:			 0.79
Behavioral diversity:				 0.792
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 344640987
--- Timings ---
Current time: 1529616487972 milliseconds
Total Time:         551.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.4 seconds, 23.1%
Fitness Testing:    328.6 seconds, 59.6%
Report:              94.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 28906.753200000046
Test mean error for best: 14.45338
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 16.0860942191 
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 13.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -67.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -121.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 26.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 54.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [53.0 10 6.01 7 22.0 3 10.6076 11 4.0 2 24.99 8 23.0 2 11.3257 9 3.0 1 61.9391 13 15.01 9 0.0 0 16.0 2 4.7532 9 22.99 8 47.0 3 2.0 2 49.0 2 8.6667 10 4.5031 9 9.0 2 8.0 2 31.0 2 5.0 1 8.99 9]
Total: 587.7854
Mean: 11.755708
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5683.538423699999
Median total errors in population: 839.34355
Error averages by case: (250.1820766 11.089 192.26794139999996 9.691 247.45110889999918 8.154 208.10794819999927 11.166 211.63602060000002 5.29 204.2178770999991 9.704 229.9644892999999 5.078 199.5898574999984 9.998 218.16982939999997 4.659 229.5120984999985 12.015 198.24317000000065 10.316 214.7133997000001 4.576 235.28073180000013 5.187 196.400944200002 10.377 206.75965649999938 9.912 256.18836220000003 5.79 221.82185659999993 4.862 252.76378359999995 4.95 234.1480971000009 10.093 195.29324179999992 9.731 220.18704979999993 4.72 210.57823910000008 4.475 233.9297179000001 5.926 212.12912889999998 7.458 208.31379699999877 10.471)
Error minima by case: (1.3098 7 0.01 6 0.2677 2 0.2414 7 0.0 0 0.096 6 0.6338 1 0.0136 7 0.0 0 0.99 2 0.01 7 0.0 0 8.0 1 0.096 6 0.096 7 0.4095 2 0.0 0 4.6932 1 0.3333 2 0.096 6 1.0 1 0.0 0 5.2671 1 0.0 0 0.2702 2)
Average genome size in population (length): 181.437
Average program size in population (points): 182.437
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 120.7834409171792
Average age in population: 115.747749518933
Median age in population: 118.5219235077681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.758
Error (vector) diversity:			 0.795
Behavioral diversity:				 0.797
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 349349654
--- Timings ---
Current time: 1529616494814 milliseconds
Total Time:         558.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.9 seconds, 23.1%
Fitness Testing:    332.9 seconds, 59.7%
Report:              96.1 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 28906.753200000046
Test mean error for best: 14.45338
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 16.0860942191 
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 13.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -67.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -121.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 26.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 54.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_yankdup} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_frominteger float_pop float_min 48 integer_yankdup -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [53.0 10 6.01 7 22.0 3 10.6076 11 4.0 2 24.99 8 23.0 2 11.3257 9 3.0 1 61.9391 13 15.01 9 0.0 0 16.0 2 4.7532 9 22.99 8 47.0 3 2.0 2 49.0 2 8.6667 10 4.5031 9 9.0 2 8.0 2 31.0 2 5.0 1 8.99 9]
Total: 587.7854
Mean: 11.755708
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6438.5135069
Median total errors in population: 876.5119500000001
Error averages by case: (282.0936039000002 11.157 224.98372669999998 9.751 270.1579953999991 8.45 233.38446519999883 11.236 244.15289370000002 5.513 234.8079595999987 9.754 259.529662 5.261 226.55904939999792 10.095 251.02077679999982 5.111 254.6580813999975 12.069 231.36123330000135 10.434 244.90064940000008 4.857 269.4502696000002 5.648 223.1961857000026 10.443 238.67600539999881 10.05 288.5492173000001 6.203 255.41350579999974 5.369 285.27411490000003 5.4 257.32270890000075 10.184 220.20324899999983 9.827 251.8542943999999 5.11 244.97928960000021 4.855 266.2948060000004 6.513 240.49966779999986 7.451 237.88909569999808 10.56)
Error minima by case: (0.2679 8 0.01 6 0.2677 2 0.1248 7 0.0 0 0.096 6 0.7464 1 0.096 8 0.0 0 0.573 2 0.01 7 0.0 0 6.0 1 0.096 6 0.096 7 7.5905 2 0.0 0 0.7433 1 0.3333 2 0.096 7 0.0 0 0.0 0 0.8747 1 0.0 0 0.2702 1)
Average genome size in population (length): 181.844
Average program size in population (points): 182.844
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 121.7987026124344
Average age in population: 117.2967019196914
Median age in population: 119.8084527656028
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.744
Error (vector) diversity:			 0.777
Behavioral diversity:				 0.78
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 354068891
--- Timings ---
Current time: 1529616501711 milliseconds
Total Time:         564.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.3 seconds, 23.1%
Fitness Testing:    337.2 seconds, 59.7%
Report:              97.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 28906.753200000046
Test mean error for best: 14.45338
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 16.0860942191 
Correct output: 106.0206148688 | Program output: 84.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 28.0892717501 
Correct output: 38.239902819   | Program output: 13.2499016332 
Correct output: -28.253581966  | Program output: -51.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -67.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 25.5816296127 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 27.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -121.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 162.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -14.6640417064
Correct output: 34.7374026319  | Program output: 26.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 12.2744201056 
Correct output: 62.9989442076  | Program output: 54.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_yankdup} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_rot} {:instruction -50} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_dup_items})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_frominteger float_pop float_min 48 integer_yankdup -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_stackdepth integer_pop integer_rot -50 integer_mod integer_dup_times print_float float_dup_items)
Errors: [53.0 10 6.01 7 22.0 3 10.6076 11 4.0 2 24.99 8 23.0 2 11.3257 9 3.0 1 61.9391 13 15.01 9 0.0 0 16.0 2 4.7532 9 22.99 8 47.0 3 2.0 2 49.0 2 8.6667 10 4.5031 9 9.0 2 8.0 2 31.0 2 5.0 1 8.99 9]
Total: 587.7854
Mean: 11.755708
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5495.722596099999
Median total errors in population: 826.79385
Error averages by case: (235.52184450000007 10.965 195.44923689999985 9.558 240.6430412999991 8.184 205.60725439999945 11.122 194.75491060000013 5.019 208.8024284999992 9.631 223.76553930000006 4.94 202.50295829999848 9.942 200.6498579999998 4.553 229.7474689999982 12.053 203.65183390000055 10.195 195.60258660000005 4.328 219.0443092000001 5.08 198.9117462000021 10.412 213.0826107999995 9.774 239.20296050000007 5.705 205.06627469999995 4.785 236.78081699999993 4.899 230.5935885000007 10.003 195.76830339999987 9.682 202.14324359999992 4.622 197.3675988000001 4.399 219.7619273000001 5.98 195.65512620000004 6.867 212.62812859999906 10.319)
Error minima by case: (0.2511 6 0.01 6 0.2677 2 0.0585 8 0.0 0 0.096 6 1.0246 1 0.096 8 0.0 0 0.573 2 0.01 2 0.0 0 8.0 1 0.096 6 0.096 3 0.5905 2 0.0 0 1.5776 1 0.3333 1 0.096 6 0.0 0 0.0 0 0.1321 1 0.0 0 0.2691 1)
Average genome size in population (length): 179.247
Average program size in population (points): 180.247
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 123.1675179405051
Average age in population: 116.6129661278381
Median age in population: 120.9252471058527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.743
Error (vector) diversity:			 0.78
Behavioral diversity:				 0.784
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 358717614
--- Timings ---
Current time: 1529616508478 milliseconds
Total Time:         571.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.7 seconds, 23.0%
Fitness Testing:    341.5 seconds, 59.7%
Report:              98.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 28606.782800000037
Test mean error for best: 14.30339
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 19.0860942191 
Correct output: 106.0206148688 | Program output: 87.0206148688 
Correct output: 0.7585604003   | Program output: 14.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 16.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 14.3661596849 
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: 14.3661596849 
Correct output: 10.5716307984  | Program output: 28.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 14.3661596849 
Correct output: 50.1878349036  | Program output: 30.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -118.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 165.3334101499
Correct output: 6.8630846811   | Program output: 14.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 29.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 57.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_min} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_1192} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items integer_dup_times float_mult integer_yankdup float_shove float_pop print_integer integer_dup_items float_pop integer_dup_items integer_min integer_rot float_sub integer_mod float_add integer_stackdepth float_swap integer_dup_times float_pop float_min -85.0550927390534 integer_dup_items float_pop float_max float_min float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_1192 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop integer_dup float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [53.0 10 9.01 7 19.0 3 13.6076 11 2.0 1 21.99 8 21.0 2 8.3257 9 0.0 0 64.9391 13 18.01 9 2.0 1 16.0 2 1.7532 9 19.99 7 47.0 3 1.0 1 49.0 2 11.6667 10 7.5031 9 7.0 2 5.0 2 31.0 2 3.0 1 5.99 9]
Total: 571.7854
Mean: 11.435708
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5885.2820295
Median total errors in population: 840.68125
Error averages by case: (264.2363867 11.05 194.8743184 9.39 252.7425317999992 7.989 202.1004303999991 11.051 225.67775869999988 5.282 206.65414369999894 9.566 235.77824090000013 5.125 198.1533133999984 9.87 231.56139419999982 4.82 227.61028179999798 12.273 205.4192518000006 10.121 225.9758822000001 4.528 248.4438568000002 5.369 194.1201171000024 10.375 215.03502909999943 9.759 269.0351424000002 5.998 235.6728189999999 5.102 264.94938590000004 5.153 243.8473558000006 10.149 193.14010659999974 9.604 233.05354729999985 4.833 228.05820270000015 4.698 246.98318810000012 6.1 227.68209779999992 7.151 218.74824689999858 10.373)
Error minima by case: (0.1549 7 0.01 6 0.2677 1 0.2414 7 0.0 0 0.2299 6 0.7464 1 0.096 8 0.0 0 0.01 2 0.01 7 0.0 0 6.0 1 0.6037 6 0.096 7 1.5905 2 0.0 0 0.8217 1 0.3333 2 0.096 6 1.0294 1 0.0 0 0.8747 1 0.0 0 0.2702 2)
Average genome size in population (length): 182.814
Average program size in population (points): 183.814
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 124.560308446514
Average age in population: 120.3286565331507
Median age in population: 122.2687505714629
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.73
Error (vector) diversity:			 0.773
Behavioral diversity:				 0.776
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 363455645
--- Timings ---
Current time: 1529616515499 milliseconds
Total Time:         578.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 23.0%
Fitness Testing:    345.9 seconds, 59.8%
Report:              99.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 28606.782800000037
Test mean error for best: 14.30339
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 28.732100971  
Correct output: 10.0760954048  | Program output: 19.0860942191 
Correct output: 106.0206148688 | Program output: 87.0206148688 
Correct output: 0.7585604003   | Program output: 14.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 16.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 14.3661596849 
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: 14.3661596849 
Correct output: 10.5716307984  | Program output: 28.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -140.5700373509
Correct output: 16.1193686865  | Program output: 14.3661596849 
Correct output: 50.1878349036  | Program output: 30.1978337179 
Correct output: -138.4095016371 | Program output: -91.4095016371
Correct output: -119.7462217731 | Program output: -118.7462217731
Correct output: -95.2566750864 | Program output: -46.2566750864
Correct output: 153.6667050749 | Program output: 165.3334101499
Correct output: 6.8630846811   | Program output: 14.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 29.7374026319 
Correct output: -49.1253212489 | Program output: -18.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 57.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_pop} {:instruction print_integer} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_min} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_min} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_1192} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_dup_items integer_dup_times float_mult integer_yankdup float_shove float_pop print_integer integer_dup_items float_pop integer_dup_items integer_min integer_rot float_sub integer_mod float_add integer_stackdepth float_swap integer_dup_times float_pop float_min -85.0550927390534 integer_dup_items float_pop float_max float_min float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_1192 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop integer_dup float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [53.0 10 9.01 7 19.0 3 13.6076 11 2.0 1 21.99 8 21.0 2 8.3257 9 0.0 0 64.9391 13 18.01 9 2.0 1 16.0 2 1.7532 9 19.99 7 47.0 3 1.0 1 49.0 2 11.6667 10 7.5031 9 7.0 2 5.0 2 31.0 2 3.0 1 5.99 9]
Total: 571.7854
Mean: 11.435708
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5507.100887699999
Median total errors in population: 829.2826
Error averages by case: (247.9174972 11.052 179.9156760000001 9.328 234.12619679999938 7.878 199.52420819999926 11.21 201.81233159999994 5.328 194.74022689999924 9.507 224.26611049999997 5.043 187.92427369999857 9.893 216.50244179999976 4.668 226.95861149999848 12.235 186.8855182000005 10.147 207.07462870000012 4.473 235.55090640000014 5.233 185.17978720000198 10.326 197.11021649999952 9.761 255.83261070000023 5.847 220.98351169999984 4.963 250.6760857 5.057 216.61918700000064 10.057 186.90388470000013 9.722 216.22687029999992 4.758 211.17268920000015 4.558 230.26196920000027 6.071 201.94660389999999 6.927 196.6268440999993 10.32)
Error minima by case: (1.1938 8 0.01 6 0.2677 1 0.2215 7 0.0 0 0.096 6 1.2536 1 0.096 8 0.0 0 1.573 2 0.01 2 0.0 0 6.0 1 0.096 6 0.096 2 2.4095 2 0.0 0 5.2567 1 0.3333 1 0.096 6 0.0 0 0.0 0 4.2638 1 0.0 0 0.0011 1)
Average genome size in population (length): 181.153
Average program size in population (points): 182.153
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 126.2265052405847
Average age in population: 119.7971321274937
Median age in population: 123.5399338532793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.762
Error (vector) diversity:			 0.816
Behavioral diversity:				 0.82
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 368150139
--- Timings ---
Current time: 1529616522469 milliseconds
Total Time:         585.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.5 seconds, 23.0%
Fitness Testing:    350.2 seconds, 59.8%
Report:             100.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 27516.58420000004
Test mean error for best: 13.75829
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 25.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 79.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 31.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -48.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -67.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -2.0640064942 
Correct output: -156.5700373509 | Program output: -143.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -94.4095016371
Correct output: -119.7462217731 | Program output: -121.7462217731
Correct output: -95.2566750864 | Program output: -49.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -11.6640417064
Correct output: 34.7374026319  | Program output: 26.7374026319 
Correct output: -49.1253212489 | Program output: -21.1253212489
Correct output: 17.2744201056  | Program output: 15.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (integer_flush integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_swap integer_dec in2 13.366159684860918 float_max integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult integer_max float_pop integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_stackdepth integer_dec integer_dup_times float_min 48 integer_dup float_swap integer_dup_times float_div tag_integer_375 3 integer_dup float_pop float_min integer_dup integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_yankdup float_pop float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec float_dec float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [50.0 10 8.01 7 27.0 3 12.6076 11 1.0 1 22.99 8 20.0 1 9.3257 9 3.0 1 63.9391 13 17.01 9 3.0 1 13.0 2 2.7532 9 20.99 8 44.0 3 2.0 2 46.0 2 10.6667 10 6.5031 9 6.0 2 8.0 2 28.0 2 2.0 1 6.99 9]
Total: 569.7854
Mean: 11.395708
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5567.164741999999
Median total errors in population: 820.8623500000001
Error averages by case: (234.19483409999998 11.016 190.9452241000006 9.187 249.83555969999918 7.837 206.30896509999855 11.222 202.00277169999998 5.235 204.39511639999859 9.462 229.00905990000018 5.139 199.62943179999783 9.865 207.2096846999999 4.585 237.51756729999724 12.544 196.26909160000085 10.155 204.83077420000012 4.36 224.59220070000018 5.176 196.73522630000252 10.299 205.02168199999903 9.71 244.7939797000001 5.802 212.06765369999985 4.952 241.45609509999994 5.015 238.20133130000082 10.348 198.2774841000002 9.762 211.84360029999993 4.698 202.10875220000014 4.625 222.7130172000004 6.023 203.95422409999998 6.694 209.2184146999985 10.322)
Error minima by case: (0.7321 7 0.01 6 0.2677 2 0.0617 7 0.0 0 0.096 6 2.2536 1 0.096 8 0.0 0 0.573 2 0.01 7 0.0 0 6.0 1 0.096 6 0.1778 7 5.3544 2 0.0 0 1.2016 1 0.3333 1 0.096 6 0.0 0 0.0 0 0.8747 1 0.0 0 0.904 1)
Average genome size in population (length): 182.923
Average program size in population (points): 183.923
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 127.174628254635
Average age in population: 122.7715940844317
Median age in population: 124.8044521013853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.713
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 372882905
--- Timings ---
Current time: 1529616529471 milliseconds
Total Time:         592.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.0 seconds, 22.9%
Fitness Testing:    354.7 seconds, 59.8%
Report:             101.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 27262.706500000037
Test mean error for best: 13.63135
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 22.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -70.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -146.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -97.4095016371
Correct output: -119.7462217731 | Program output: -124.7462217731
Correct output: -95.2566750864 | Program output: -52.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 23.7374026319 
Correct output: -49.1253212489 | Program output: -24.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_swap} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_min} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_pop integer_dup_items float_pop float_swap integer_mod float_add integer_stackdepth float_swap integer_dup_times float_pop float_min -85.0550927390534 integer_dup_items float_pop float_max float_min float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec integer_stackdepth float_dec float_dec float_rot float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [47.0 10 8.01 7 20.0 2 12.6076 11 2.0 1 22.99 8 21.0 2 9.3257 9 6.0 2 63.9391 13 17.01 9 2.0 1 10.0 1 2.7532 9 20.99 8 41.0 3 5.0 2 43.0 2 10.6667 10 6.5031 9 7.0 2 11.0 2 25.0 2 3.0 1 6.99 9]
Total: 559.7854
Mean: 11.195708
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5995.780608399999
Median total errors in population: 873.9635999999999
Error averages by case: (247.34618840000005 11.025 204.70356700000065 9.136 274.6399196999992 7.955 216.1753363999983 11.29 212.39662829999995 5.437 218.29947989999837 9.427 250.21246670000008 5.159 209.35232709999752 9.855 233.9125015 4.698 247.12267609999748 12.39 211.15863080000116 10.22 228.58937600000016 4.546 248.4752693000002 5.249 205.86633480000262 10.281 219.67321429999882 9.708 267.9136353000001 5.847 237.28469639999983 5.036 262.7349015 5.136 261.07165420000086 10.215 208.8052344000004 9.813 235.44485319999998 4.829 215.5226835000002 4.759 244.1946958000002 5.981 214.18004239999993 6.935 225.51729539999857 10.26)
Error minima by case: (0.681 8 0.01 6 0.2677 2 0.238 7 0.0 0 0.7701 7 0.7464 1 0.0404 8 0.0 0 0.573 2 0.01 7 0.0 0 6.0 1 0.613 6 0.904 7 0.4095 2 0.0 0 4.2016 1 0.3333 1 0.096 6 0.0 0 0.0 0 0.8747 1 0.0 0 1.2691 1)
Average genome size in population (length): 180.945
Average program size in population (points): 181.945
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 128.1451589424561
Average age in population: 122.3872373921375
Median age in population: 126.0562717622956
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.702
Error (vector) diversity:			 0.783
Behavioral diversity:				 0.787
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 377558420
--- Timings ---
Current time: 1529616536387 milliseconds
Total Time:         599.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.3 seconds, 22.9%
Fitness Testing:    359.1 seconds, 59.9%
Report:             103.1 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 27961.858600000043
Test mean error for best: 13.98093
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 24.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -68.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -144.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -95.4095016371
Correct output: -119.7462217731 | Program output: -122.7462217731
Correct output: -95.2566750864 | Program output: -50.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 25.7374026319 
Correct output: -49.1253212489 | Program output: -22.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_swap} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_min} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_pop integer_dup_items float_pop float_swap integer_mod float_add integer_stackdepth float_swap integer_dup_times float_pop float_min -85.0550927390534 integer_dup_items float_pop float_max float_min float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop integer_max tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec float_dec float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float)
Errors: [49.0 9 8.01 7 20.0 2 12.6076 11 2.0 1 22.99 8 21.0 2 9.3257 9 4.0 1 63.9391 13 17.01 9 2.0 1 12.0 2 2.7532 9 20.99 8 43.0 3 3.0 2 45.0 2 10.6667 10 6.5031 9 7.0 2 9.0 2 27.0 2 3.0 1 6.99 9]
Total: 562.7854
Mean: 11.255708
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5739.489177899997
Median total errors in population: 824.27855
Error averages by case: (249.99398360000004 11.027 188.41422280000103 8.875 249.7922337999989 7.841 203.86747999999784 11.222 213.54079419999988 5.398 201.90027279999825 9.275 234.86304550000006 5.137 196.45654549999725 9.728 224.74507509999984 4.67 238.25793609999718 12.534 192.83446850000107 10.052 220.33425830000039 4.474 243.94667470000027 5.291 192.81811770000292 10.182 201.1691909999989 9.547 263.41888120000027 5.899 228.9746621999998 5.083 260.1517088 5.088 237.745933700001 10.224 196.12771690000056 9.714 227.72324079999984 4.768 215.76018700000017 4.82 241.55553810000035 6.04 216.79861489999993 6.874 204.3693946999983 10.166)
Error minima by case: (0.0 0 0.01 6 1.7323 1 0.0414 8 0.0 0 0.096 7 0.1734 1 0.096 7 0.0 0 0.573 2 0.01 7 0.0 0 6.0 1 0.096 6 0.1778 7 4.4095 2 0.0 0 1.2016 1 0.3333 2 0.0158 7 0.0 0 0.0 0 0.8747 1 0.0 0 0.3772 1)
Average genome size in population (length): 179.894
Average program size in population (points): 180.894
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 129.3639322291651
Average age in population: 123.2734389107359
Median age in population: 127.3634372149725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.665
Error (vector) diversity:			 0.78
Behavioral diversity:				 0.783
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 382205865
--- Timings ---
Current time: 1529616543223 milliseconds
Total Time:         606.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.8 seconds, 22.9%
Fitness Testing:    363.4 seconds, 59.9%
Report:             104.2 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 27961.858600000043
Test mean error for best: 13.98093
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 24.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -68.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -144.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -95.4095016371
Correct output: -119.7462217731 | Program output: -122.7462217731
Correct output: -95.2566750864 | Program output: -50.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 25.7374026319 
Correct output: -49.1253212489 | Program output: -22.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_swap} {:instruction integer_mod} {:instruction float_add} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_min} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_rot} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_max} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_pop integer_dup_items float_pop float_swap integer_mod float_add integer_stackdepth float_swap integer_dup_times float_pop float_min -85.0550927390534 integer_dup_items float_pop float_max float_min float_pop float_min 48 integer_rot -85.0550927390534 integer_fromfloat -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop integer_max tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec float_dec float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float)
Errors: [49.0 9 8.01 7 20.0 2 12.6076 11 2.0 1 22.99 8 21.0 2 9.3257 9 4.0 1 63.9391 13 17.01 9 2.0 1 12.0 2 2.7532 9 20.99 8 43.0 3 3.0 2 45.0 2 10.6667 10 6.5031 9 7.0 2 9.0 2 27.0 2 3.0 1 6.99 9]
Total: 562.7854
Mean: 11.255708
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5742.3334884
Median total errors in population: 819.3593
Error averages by case: (253.84168649999995 11.045 196.24023410000146 8.873 250.755889799999 7.768 206.93200499999782 11.36 211.28411199999996 5.192 209.85331259999805 9.286 227.3775253000001 4.918 200.20131869999707 9.817 221.84165569999982 4.447 239.7036517999975 12.517 200.5601697000015 10.187 215.01290600000013 4.387 238.58854470000023 5.058 197.2038486000027 10.241 207.79285859999865 9.581 259.8623152000001 5.657 224.63331579999974 4.857 255.9030206999999 4.863 237.96042180000094 10.172 198.86498730000068 9.9 219.72941970000002 4.576 217.5185255000003 4.63 238.14566870000021 5.912 213.91318949999996 6.753 206.49590509999837 10.12)
Error minima by case: (1.2679 8 0.01 6 0.2677 1 0.0617 7 0.0 0 0.1602 6 1.2536 1 0.096 7 0.0 0 0.99 2 0.2055 8 0.0 0 6.0 1 0.2468 5 0.1778 7 4.4095 2 0.0 0 2.2016 1 0.3333 1 0.096 6 0.336 1 0.0 0 3.6143 1 0.0 0 0.4423 1)
Average genome size in population (length): 180.475
Average program size in population (points): 181.475
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 130.8328510134561
Average age in population: 125.1125293415842
Median age in population: 128.7664254338495
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.67
Error (vector) diversity:			 0.793
Behavioral diversity:				 0.797
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 386866526
--- Timings ---
Current time: 1529616550198 milliseconds
Total Time:         613.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.2 seconds, 22.9%
Fitness Testing:    367.7 seconds, 59.9%
Report:             105.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 28310.96680000004
Test mean error for best: 14.15548
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 27.732100971  
Correct output: 10.0760954048  | Program output: 19.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 31.0892717501 
Correct output: 38.239902819   | Program output: 16.2499016332 
Correct output: -28.253581966  | Program output: -48.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -65.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 28.5816296127 
Correct output: -5.0640064942  | Program output: -2.0640064942 
Correct output: -156.5700373509 | Program output: -141.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 30.1978337179 
Correct output: -138.4095016371 | Program output: -92.4095016371
Correct output: -119.7462217731 | Program output: -119.7462217731
Correct output: -95.2566750864 | Program output: -47.2566750864
Correct output: 153.6667050749 | Program output: 165.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -11.6640417064
Correct output: 34.7374026319  | Program output: 28.7374026319 
Correct output: -49.1253212489 | Program output: -19.1253212489
Correct output: 17.2744201056  | Program output: 15.2744201056 
Correct output: 62.9989442076  | Program output: 57.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_yankdup} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod float_mod float_pop integer_dup_times float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_frominteger float_pop float_min -8 float_max float_frominteger float_pop float_min 48 integer_yankdup -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec float_dec integer_sub in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [52.0 10 9.01 7 20.0 2 12.6076 11 1.0 1 21.99 8 20.0 1 9.3257 9 1.0 1 63.9391 13 18.01 9 3.0 1 15.0 2 2.7532 9 19.99 7 46.0 3 0.0 0 48.0 2 11.6667 10 6.5031 9 6.0 2 6.0 2 30.0 1 2.0 1 5.99 9]
Total: 561.7854
Mean: 11.235708
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5444.236673199998
Median total errors in population: 819.7945000000001
Error averages by case: (234.07666339999994 10.924 187.7618802000012 8.826 245.02692839999915 7.518 201.88338199999822 11.263 194.3272403 4.959 200.46106499999829 9.187 218.39822350000006 4.814 193.8562329999975 9.766 203.51832629999993 4.3 234.28756289999774 12.496 193.58047110000123 10.106 197.94739500000017 4.333 221.41494200000017 4.971 190.5169647000025 10.22 201.5055147999986 9.507 241.87214100000023 5.608 206.8403205999999 4.791 237.02069909999997 4.837 235.8944214000009 10.181 192.97375800000057 9.798 205.15330379999997 4.554 199.82278660000011 4.57 218.87731450000013 5.893 192.831983 6.377 204.45615259999835 10.132)
Error minima by case: (1.3338 7 0.01 6 0.2677 2 0.0414 7 0.0 0 0.096 7 0.2536 1 0.904 8 0.0 0 3.01 2 0.01 7 0.0 0 7.0 1 0.096 6 0.1778 7 11.4095 2 0.0 0 0.7984 1 0.3333 1 0.4969 7 0.3371 1 0.0 0 3.6143 1 0.0 0 0.0011 1)
Average genome size in population (length): 181.415
Average program size in population (points): 182.415
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 131.9394521541278
Average age in population: 126.8907484104203
Median age in population: 130.163150213531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.65
Error (vector) diversity:			 0.77
Behavioral diversity:				 0.774
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 391546216
--- Timings ---
Current time: 1529616557246 milliseconds
Total Time:         620.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.7 seconds, 22.8%
Fitness Testing:    371.9 seconds, 60.0%
Report:             106.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 28310.96680000004
Test mean error for best: 14.15548
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 27.732100971  
Correct output: 10.0760954048  | Program output: 19.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 31.0892717501 
Correct output: 38.239902819   | Program output: 16.2499016332 
Correct output: -28.253581966  | Program output: -48.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -65.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 28.5816296127 
Correct output: -5.0640064942  | Program output: -2.0640064942 
Correct output: -156.5700373509 | Program output: -141.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 30.1978337179 
Correct output: -138.4095016371 | Program output: -92.4095016371
Correct output: -119.7462217731 | Program output: -119.7462217731
Correct output: -95.2566750864 | Program output: -47.2566750864
Correct output: 153.6667050749 | Program output: 165.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -11.6640417064
Correct output: 34.7374026319  | Program output: 28.7374026319 
Correct output: -49.1253212489 | Program output: -19.1253212489
Correct output: 17.2744201056  | Program output: 15.2744201056 
Correct output: 62.9989442076  | Program output: 57.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction float_mod} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction -8} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_yankdup} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod float_mod float_pop integer_dup_times float_pop integer_dup_items float_mult float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_frominteger float_pop float_min -8 float_max float_frominteger float_pop float_min 48 integer_yankdup -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec float_dec integer_sub in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [52.0 10 9.01 7 20.0 2 12.6076 11 1.0 1 21.99 8 20.0 1 9.3257 9 1.0 1 63.9391 13 18.01 9 3.0 1 15.0 2 2.7532 9 19.99 7 46.0 3 0.0 0 48.0 2 11.6667 10 6.5031 9 6.0 2 6.0 2 30.0 1 2.0 1 5.99 9]
Total: 561.7854
Mean: 11.235708
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6134.336698199999
Median total errors in population: 838.54285
Error averages by case: (259.35359759999994 11.054 218.89170660000136 9.078 261.52658439999914 7.605 231.23306039999758 11.526 219.6391410999999 5.575 232.14171789999807 9.438 245.34432380000007 5.179 223.44473039999664 9.968 227.35355659999996 4.788 262.53684299999713 12.586 225.96522430000158 10.344 223.64144660000008 4.788 248.6024117000002 5.468 219.76599130000287 10.455 235.1494094999985 9.718 268.57322170000015 6.052 230.64741579999986 5.255 264.48133 5.321 264.36579400000085 10.324 221.84492490000068 10.091 227.7126675000001 4.945 221.8347090000002 5.009 247.5856015000003 6.371 219.90358969999986 6.838 234.6816988999986 10.34)
Error minima by case: (0.2405 8 0.01 6 3.7323 1 0.2414 8 0.0 0 0.7701 7 0.2536 1 0.904 8 0.0 0 0.573 2 0.01 7 0.0 0 5.0 1 0.412 6 0.1778 7 5.4095 2 0.0 0 1.2016 1 0.3333 1 0.4969 6 0.0 0 0.0 0 0.8747 1 0.0 0 0.6228 1)
Average genome size in population (length): 181.033
Average program size in population (points): 182.033
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 133.6446820533342
Average age in population: 127.8477519273911
Median age in population: 131.5130438726252
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.633
Error (vector) diversity:			 0.768
Behavioral diversity:				 0.77
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 396219020
--- Timings ---
Current time: 1529616564327 milliseconds
Total Time:         627.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.1 seconds, 22.8%
Fitness Testing:    376.3 seconds, 60.0%
Report:             107.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 27268.616400000035
Test mean error for best: 13.63431
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 22.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -70.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -146.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -97.4095016371
Correct output: -119.7462217731 | Program output: -124.7462217731
Correct output: -95.2566750864 | Program output: -52.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 23.7374026319 
Correct output: -49.1253212489 | Program output: -24.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction float_sub} {:instruction float_max} {:instruction integer_max} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction float_max} {:instruction float_pop} {:instruction float_mult} {:instruction float_inc} {:instruction float_pop} {:instruction integer_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_inc} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times float_div float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 float_sub float_max integer_max 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_sub integer_mod float_max float_pop float_mult float_inc float_pop integer_min 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_frominteger float_pop float_min 48 float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_inc float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [47.0 10 8.01 7 20.0 2 12.6076 11 2.0 1 22.99 8 21.0 2 9.3257 9 6.0 2 63.9391 13 17.01 9 2.0 1 10.0 1 2.7532 9 20.99 8 41.0 3 5.0 2 43.0 2 10.6667 10 6.5031 9 7.0 2 11.0 2 25.0 2 3.0 1 6.99 9]
Total: 559.7854
Mean: 11.195708
Genome size: 190
Size: 191
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5629.839877599998
Median total errors in population: 826.488
Error averages by case: (236.15021229999996 10.974 199.77867840000093 8.874 258.6144936999991 7.382 216.41207519999813 11.434 196.18333279999985 4.911 213.52638529999854 9.266 225.84037450000002 4.749 206.54632739999727 9.853 200.86744249999998 4.242 248.4589256999974 12.566 207.47396040000103 10.178 199.4842871000002 4.362 220.10076950000018 4.876 203.09053630000284 10.3 216.618944599999 9.561 241.75462910000016 5.501 204.15183459999992 4.673 239.95321089999993 4.733 253.94633310000083 10.3 206.22586490000083 9.948 204.71097640000002 4.444 197.4707320000001 4.505 223.3566835000002 5.904 198.72625850000003 6.52 220.08560889999885 10.255)
Error minima by case: (0.086 8 0.01 6 6.9966 1 0.0617 7 0.0 0 1.2299 7 2.7464 1 2.1057 8 0.0 0 0.573 2 0.01 7 0.0 0 4.99 1 0.7532 6 0.1778 7 11.3544 2 0.0 0 3.2016 1 0.3333 1 0.4969 6 0.0 0 0.0 0 0.7494 1 0.0 0 0.6238 1)
Average genome size in population (length): 181.101
Average program size in population (points): 182.101
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 135.2335433984617
Average age in population: 130.300520706548
Median age in population: 132.840773023779
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.631
Error (vector) diversity:			 0.772
Behavioral diversity:				 0.774
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 400897637
--- Timings ---
Current time: 1529616571325 milliseconds
Total Time:         634.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.6 seconds, 22.8%
Fitness Testing:    380.6 seconds, 60.0%
Report:             109.2 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 27790.08020000006
Test mean error for best: 13.89504
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 27.732100971  
Correct output: 10.0760954048  | Program output: 11.0860942191 
Correct output: 106.0206148688 | Program output: 80.0206148688 
Correct output: 0.7585604003   | Program output: 6.3661596849  
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 8.2499016332  
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 6.3661596849  
Correct output: -64.8098353824 | Program output: -66.8098353824
Correct output: -50.5729717288 | Program output: 6.3661596849  
Correct output: 10.5716307984  | Program output: 20.5816296127 
Correct output: -5.0640064942  | Program output: -1.0640064942 
Correct output: -156.5700373509 | Program output: -141.5700373509
Correct output: 16.1193686865  | Program output: 6.3661596849  
Correct output: 50.1878349036  | Program output: 22.1978337179 
Correct output: -138.4095016371 | Program output: -92.4095016371
Correct output: -119.7462217731 | Program output: -120.7462217731
Correct output: -95.2566750864 | Program output: -47.2566750864
Correct output: 153.6667050749 | Program output: 157.3334101499
Correct output: 6.8630846811   | Program output: 6.3661596849  
Correct output: -5.6640417064  | Program output: -10.6640417064
Correct output: 34.7374026319  | Program output: 27.7374026319 
Correct output: -49.1253212489 | Program output: -19.1253212489
Correct output: 17.2744201056  | Program output: 16.2744201056 
Correct output: 62.9989442076  | Program output: 49.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_min} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction tag_integer_838} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_min} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -49} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth})
Best program: (integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add integer_dec in2 13.366159684860918 float_max integer_max 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_sub integer_mod integer_dup_items float_pop float_mult float_dup_times float_pop integer_min 47 integer_rot float_sub integer_mod float_swap integer_dup_times integer_dup float_pop float_min 48 integer_dup float_swap integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop integer_dup_items float_pop float_max tag_integer_838 integer_dup float_pop integer_yankdup float_min integer_dup_times integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove float_min float_rot float_dec float_dec integer_flush tagged_971 tagged_971 float_dec float_dec float_dec integer_flush tagged_971 integer_stackdepth integer_stackdepth integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_dec float_rot integer_pop float_dec float_rot -49 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items float_dec float_dec float_dec float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec integer_inc tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_stackdepth)
Errors: [52.0 10 1.01 7 26.0 2 5.6076 10 0.0 0 29.99 7 19.0 2 16.3257 9 2.0 1 56.9391 13 10.01 8 4.0 1 15.0 2 9.7532 9 27.99 8 46.0 3 1.0 2 48.0 2 3.6667 9 0.4969 7 5.0 2 7.0 2 30.0 1 1.0 1 13.99 9]
Total: 558.7792
Mean: 11.175584
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5834.974197299998
Median total errors in population: 820.7956999999999
Error averages by case: (249.352699 10.897 199.1664263000015 8.814 257.96063119999894 7.336 215.1190314999976 11.349 217.26174780000005 5.536 212.993612799998 9.248 236.01085630000017 4.882 205.4817429999968 9.835 224.17080460000005 4.482 248.44849019999728 12.521 204.46997500000143 10.119 219.26789480000005 4.657 239.60027160000018 5.198 201.95077310000295 10.278 213.69524719999862 9.5 259.8848900000001 5.824 228.1427468999998 5.031 254.27981959999994 4.974 242.9720987000009 10.283 205.1021475000007 9.892 223.86232930000008 4.657 217.13104500000014 4.738 237.51823350000024 5.936 216.89942159999987 6.835 211.29126079999858 10.118)
Error minima by case: (1.6455 7 0.01 6 6.6338 2 0.2021 7 0.0 0 1.2299 7 0.2536 1 2.0404 8 0.0 0 0.573 2 0.01 7 0.0 0 7.0 1 0.412 6 0.1778 7 4.4095 2 0.0 0 2.2567 1 0.3333 2 0.4969 7 0.0 0 0.0 0 0.8747 1 0.0 0 0.3762 1)
Average genome size in population (length): 181.805
Average program size in population (points): 182.805
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 136.1605582258418
Average age in population: 131.7217198071833
Median age in population: 134.1282282104697
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.615
Error (vector) diversity:			 0.757
Behavioral diversity:				 0.76
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 405599274
--- Timings ---
Current time: 1529616578538 milliseconds
Total Time:         641.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.0 seconds, 22.7%
Fitness Testing:    385.1 seconds, 60.0%
Report:             110.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 27579.829700000035
Test mean error for best: 13.78991
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 21.732100971  
Correct output: 10.0760954048  | Program output: 19.0860942191 
Correct output: 106.0206148688 | Program output: 87.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 16.2499016332 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -74.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 28.5816296127 
Correct output: -5.0640064942  | Program output: -1.0640064942 
Correct output: -156.5700373509 | Program output: -147.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 30.1978337179 
Correct output: -138.4095016371 | Program output: -98.4095016371
Correct output: -119.7462217731 | Program output: -128.7462217731
Correct output: -95.2566750864 | Program output: -53.2566750864
Correct output: 153.6667050749 | Program output: 165.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -10.6640417064
Correct output: 34.7374026319  | Program output: 19.7374026319 
Correct output: -49.1253212489 | Program output: -25.1253212489
Correct output: 17.2744201056  | Program output: 16.2744201056 
Correct output: 62.9989442076  | Program output: 57.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction 66} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_add} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction tagged_698} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float})
Best program: (integer_flush integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_max integer_mod integer_dup_items float_pop float_cos float_pop float_pop float_mult integer_max float_pop integer_dup_items 47 integer_rot float_div tag_integer_375 3 66 float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_add float_min integer_dup_times integer_flush tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_rot integer_mult float_dec float_dec integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec integer_swap float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 tagged_698 in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub integer_pop float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float)
Errors: [46.0 10 9.01 7 19.0 3 12.6076 11 0.0 0 21.99 8 19.0 2 9.3257 9 10.0 1 63.9391 13 18.01 9 4.0 1 9.0 2 2.7532 9 19.99 7 40.0 2 9.0 2 42.0 2 11.6667 10 6.5031 9 5.0 2 15.0 2 24.0 2 1.0 1 5.99 9]
Total: 557.7854
Mean: 11.155708
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6023.752200699997
Median total errors in population: 846.0083
Error averages by case: (253.29995620000005 10.853 214.54428120000122 8.933 265.60507439999907 7.52 226.47538169999794 11.374 215.7570936 5.403 228.68537929999812 9.341 242.04573300000007 5.06 219.04334809999713 9.877 222.49092739999992 4.576 257.94974539999725 12.481 218.45558590000113 10.163 222.63827560000004 4.884 239.19214550000012 5.207 215.54617530000277 10.298 227.49326339999857 9.575 259.38230180000005 5.831 224.7652191999999 5.097 258.6953994 5.095 263.45147490000096 10.32 218.67152530000078 9.88 226.78236559999993 4.701 218.00200080000008 4.871 242.6763757 6.142 217.77247599999993 6.596 230.06869599999848 10.184)
Error minima by case: (0.1107 7 0.01 6 5.6338 2 0.0435 8 0.0 0 0.7557 7 2.0 1 0.3081 8 0.0 0 2.01 2 0.01 7 0.0 0 6.0 1 0.7532 6 0.1778 7 5.4095 2 0.0 0 2.7433 1 0.3333 1 0.4969 7 0.0 0 0.0 0 1.7494 1 0.0 0 0.3772 1)
Average genome size in population (length): 180.708
Average program size in population (points): 181.708
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 137.5610266753346
Average age in population: 131.8278278757216
Median age in population: 135.4158579950698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.619
Error (vector) diversity:			 0.767
Behavioral diversity:				 0.77
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 410272185
--- Timings ---
Current time: 1529616585434 milliseconds
Total Time:         648.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.4 seconds, 22.7%
Fitness Testing:    389.5 seconds, 60.0%
Report:             111.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 27311.225700000035
Test mean error for best: 13.65561
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 22.732100971  
Correct output: 10.0760954048  | Program output: 19.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 14.3661596849 
Correct output: 32.0892717501  | Program output: 30.0892717501 
Correct output: 38.239902819   | Program output: 16.2499016332 
Correct output: -28.253581966  | Program output: -49.253581966 
Correct output: 22.691883669   | Program output: 14.3661596849 
Correct output: -64.8098353824 | Program output: -70.8098353824
Correct output: -50.5729717288 | Program output: 14.3661596849 
Correct output: 10.5716307984  | Program output: 28.5816296127 
Correct output: -5.0640064942  | Program output: -3.0640064942 
Correct output: -156.5700373509 | Program output: -146.5700373509
Correct output: 16.1193686865  | Program output: 14.3661596849 
Correct output: 50.1878349036  | Program output: 30.1978337179 
Correct output: -138.4095016371 | Program output: -97.4095016371
Correct output: -119.7462217731 | Program output: -124.7462217731
Correct output: -95.2566750864 | Program output: -52.2566750864
Correct output: 153.6667050749 | Program output: 165.3334101499
Correct output: 6.8630846811   | Program output: 14.3661596849 
Correct output: -5.6640417064  | Program output: -12.6640417064
Correct output: 34.7374026319  | Program output: 23.7374026319 
Correct output: -49.1253212489 | Program output: -24.1253212489
Correct output: 17.2744201056  | Program output: 14.2744201056 
Correct output: 62.9989442076  | Program output: 57.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction integer_add} {:instruction integer_div} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_div} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction float_rot} {:instruction float_inc} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction -85.0550927390534} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_items} {:instruction float_mult} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_inc} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer integer_add integer_div print_integer integer_flush integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_div integer_dec 13.366159684860918 float_max float_rot float_inc in2 float_dup_times float_max -85.0550927390534 integer_mod integer_yankdup integer_dup_items float_pop float_mult integer_dup_items float_pop integer_dup_items integer_dup_items float_pop integer_dup_items float_mult float_mult float_yankdup integer_dup float_pop float_min 48 integer_dup integer_dup_times float_div tag_integer_375 3 integer_dup float_pop float_min integer_dup integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 float_min integer_dup_times integer_flush tag_float_538 in1 tagged_971 -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_inc float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [47.0 10 9.01 7 20.0 2 13.6076 11 2.0 1 21.99 8 21.0 2 8.3257 9 6.0 2 64.9391 13 18.01 9 2.0 1 10.0 1 1.7532 9 19.99 7 41.0 3 5.0 2 43.0 2 11.6667 10 7.5031 9 7.0 2 11.0 2 25.0 2 3.0 1 5.99 9]
Total: 559.7854
Mean: 11.195708
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5452.590319599998
Median total errors in population: 832.8028999999999
Error averages by case: (231.49866330000012 10.895 194.01858610000107 8.957 236.53862829999926 7.355 204.4137697999981 11.424 195.01632880000003 5.239 207.60687269999843 9.321 215.44351670000003 4.795 198.32005139999734 9.936 202.47991689999984 4.369 236.67455349999742 12.455 200.64570970000122 10.275 196.25969920000006 4.932 215.59951620000015 4.935 194.3505569000026 10.354 208.90830479999877 9.611 236.73781780000004 5.584 206.0448571999998 4.913 233.89406070000004 4.834 229.24384160000093 10.117 196.3385893000007 9.918 201.52826550000003 4.549 200.04785460000016 4.617 215.11127310000006 5.906 195.86715919999992 6.498 208.0039262999985 10.209)
Error minima by case: (0.5197 9 0.01 6 5.6338 2 0.1998 7 0.0 0 0.2299 6 2.7862 1 4.5934 7 0.0 0 1.01 2 0.01 7 0.0 0 7.0 1 0.1174 6 1.1778 7 0.5905 2 0.0 0 2.2567 1 0.3333 2 0.4969 6 0.0 0 0.0 0 2.0083 1 0.0 0 0.3772 1)
Average genome size in population (length): 180.972
Average program size in population (points): 181.972
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 138.7376323395978
Average age in population: 133.3607574596677
Median age in population: 136.8046965873787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.644
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.791
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 414955140
--- Timings ---
Current time: 1529616592394 milliseconds
Total Time:         655.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.9 seconds, 22.7%
Fitness Testing:    393.8 seconds, 60.1%
Report:             112.8 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 27907.922200000037
Test mean error for best: 13.95396
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 24.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -47.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -68.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -1.0640064942 
Correct output: -156.5700373509 | Program output: -144.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -95.4095016371
Correct output: -119.7462217731 | Program output: -122.7462217731
Correct output: -95.2566750864 | Program output: -50.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -10.6640417064
Correct output: 34.7374026319  | Program output: 25.7374026319 
Correct output: -49.1253212489 | Program output: -22.1253212489
Correct output: 17.2744201056  | Program output: 16.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction 66} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_add} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_stackdepth})
Best program: (float_swap print_integer float_yankdup integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_stackdepth float_mult integer_yankdup float_add float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max integer_mod integer_dup_items float_pop integer_dup_times float_max integer_mod integer_dup_items float_pop float_cos float_pop float_pop float_mult integer_max float_pop integer_dup_items 47 integer_rot float_div tag_integer_375 3 66 float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_add float_min integer_dup_times integer_flush tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_rot integer_mult float_dec float_dec integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec integer_swap float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_pop integer_stackdepth float_rot integer_pop integer_yank integer_mult integer_dup_times print_float float_stackdepth)
Errors: [49.0 9 8.01 7 20.0 2 12.6076 11 0.0 0 22.99 8 19.0 2 9.3257 9 4.0 1 63.9391 13 17.01 9 4.0 1 12.0 2 2.7532 9 20.99 8 43.0 3 3.0 2 45.0 2 10.6667 10 6.5031 9 5.0 2 9.0 2 27.0 2 1.0 1 6.99 9]
Total: 555.7854
Mean: 11.115708
Genome size: 188
Size: 189
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5764.322124699998
Median total errors in population: 827.7854
Error averages by case: (246.03840530000008 10.843 199.76181200000116 8.928 250.32187429999897 7.499 213.03571739999802 11.401 214.58446109999997 5.502 213.06664849999822 9.306 228.9880737000001 4.862 206.03766379999757 9.92 218.03410879999993 4.522 245.23742859999751 12.541 204.27706900000112 10.226 214.94342750000013 5.081 232.53524140000016 5.063 202.36708020000265 10.322 212.29767849999885 9.612 253.90962080000017 5.709 222.26808449999984 5.161 251.21646040000002 4.937 243.06935910000078 10.203 205.07898780000065 9.928 219.94997600000002 4.672 213.41212430000013 4.804 235.4654033000002 5.97 212.66964059999992 6.724 211.7567777999986 10.263)
Error minima by case: (0.336 8 0.01 6 5.6338 2 0.0587 8 0.0 0 3.2608 7 0.2536 1 4.4951 8 0.0 0 0.01 2 0.01 7 0.0 0 1.0 1 0.7532 7 0.1724 7 3.4095 2 0.0 0 2.7984 1 0.3333 1 0.4969 6 0.0 0 0.0 0 0.8747 1 0.0 0 0.6228 1)
Average genome size in population (length): 182.38
Average program size in population (points): 183.38
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 140.3220051155836
Average age in population: 135.2245435508832
Median age in population: 137.9261069919965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.618
Error (vector) diversity:			 0.771
Behavioral diversity:				 0.774
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 419672190
--- Timings ---
Current time: 1529616599543 milliseconds
Total Time:         662.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.3 seconds, 22.7%
Fitness Testing:    398.2 seconds, 60.1%
Report:             114.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 26917.130400000035
Test mean error for best: 13.45857
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 18.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 33.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -46.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -70.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -0.0640064942 
Correct output: -156.5700373509 | Program output: -150.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -101.4095016371
Correct output: -119.7462217731 | Program output: -124.7462217731
Correct output: -95.2566750864 | Program output: -56.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -9.6640417064 
Correct output: 34.7374026319  | Program output: 23.7374026319 
Correct output: -49.1253212489 | Program output: -28.1253212489
Correct output: 17.2744201056  | Program output: 17.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_shove} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 46} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_min} {:instruction float_yank} {:instruction integer_rot} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction tag_integer_493} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction float_yank} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction float_rot} {:instruction -51} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float})
Best program: (integer_flush integer_dup_times float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add float_inc integer_stackdepth float_mult integer_yankdup integer_add integer_dec 13.366159684860918 float_max integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_shove float_mult integer_max float_pop integer_dup_items 46 float_sub integer_dup_times integer_fromfloat integer_dup float_min float_yank integer_rot float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop integer_fromfloat tag_integer_493 integer_yank integer_dup float_inc float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_frominteger float_pop float_min 48 float_yank -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dec float_dec integer_flush tagged_971 integer_rot float_dup_items integer_mult float_dec float_dec integer_flush float_rot -51 float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec integer_stackdepth float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec -50 float_dec float_dec float_dec integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec tagged_971 float_dec float_dec tagged_971 float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec integer_inc tagged_971 float_dec float_dec float_dec float_dec float_dec float_dec integer_stackdepth float_rot integer_rot -50 integer_mult integer_dup_times print_float)
Errors: [43.0 11 8.01 7 20.0 2 12.6076 11 1.0 1 22.99 8 18.0 2 9.3257 9 6.0 2 63.9391 13 17.01 9 5.0 1 6.0 1 2.7532 9 20.99 8 37.0 2 5.0 2 39.0 2 10.6667 10 6.5031 9 4.0 1 11.0 2 21.0 2 0.0 0 6.99 9]
Total: 530.7854
Mean: 10.615708
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6009.954832399999
Median total errors in population: 834.7854000000001
Error averages by case: (254.07878670000005 10.886 207.75592080000106 8.982 261.79773859999915 7.527 220.26931169999816 11.554 216.96424639999998 5.293 221.32878579999834 9.395 248.37469080000008 4.923 214.64882059999715 9.991 229.89964569999987 4.514 253.3863034999974 12.611 214.8111645000011 10.299 225.95327400000014 5.308 245.42020420000017 5.124 210.70111410000288 10.377 223.18688569999873 9.656 265.36122790000024 5.721 233.30865129999992 5.127 263.18387029999997 5.037 250.14601030000088 10.227 212.8312761000008 9.98 231.68163689999994 4.596 220.41026520000014 4.746 246.84545660000018 6.185 221.90388009999995 6.599 220.83766459999873 10.21)
Error minima by case: (0.1072 8 0.01 6 4.3455 2 0.1247 8 0.0 0 0.7701 7 3.7464 1 6.3181 8 0.0 0 0.01 2 0.01 7 0.0 0 6.0 1 0.7532 6 0.1778 6 2.4095 2 0.0 0 0.2016 1 0.3333 2 0.4969 6 0.0 0 0.0 0 6.6507 1 0.0 0 0.2039 1)
Average genome size in population (length): 181.784
Average program size in population (points): 182.784
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 141.5623646374081
Average age in population: 136.2076163575397
Median age in population: 139.2691079769583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.623
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 424373445
--- Timings ---
Current time: 1529616606468 milliseconds
Total Time:         669.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.8 seconds, 22.7%
Fitness Testing:    402.6 seconds, 60.1%
Report:             115.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 27311.21220000004
Test mean error for best: 13.65561
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 19.732100971  
Correct output: 10.0760954048  | Program output: 15.0860942191 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 33.0892717501 
Correct output: 38.239902819   | Program output: 12.2499016332 
Correct output: -28.253581966  | Program output: -46.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -76.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 24.5816296127 
Correct output: -5.0640064942  | Program output: -0.0640064942 
Correct output: -156.5700373509 | Program output: -149.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 26.1978337179 
Correct output: -138.4095016371 | Program output: -100.4095016371
Correct output: -119.7462217731 | Program output: -130.7462217731
Correct output: -95.2566750864 | Program output: -55.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -9.6640417064 
Correct output: 34.7374026319  | Program output: 17.7374026319 
Correct output: -49.1253212489 | Program output: -27.1253212489
Correct output: 17.2744201056  | Program output: 17.2744201056 
Correct output: 62.9989442076  | Program output: 53.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 46} {:instruction integer_rot} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction 66} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_add} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_1165} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float})
Best program: (float_dup print_integer float_dup_items integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_dec in2 13.366159684860918 float_max integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult integer_max float_pop integer_dup_items 46 integer_rot float_div tag_integer_375 3 66 float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_add float_min integer_dup_times integer_flush tag_float_538 in1 tagged_1165 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_rot integer_mult float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_flush float_dec float_dec float_dec float_dec integer_stackdepth float_rot float_dec float_rot in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_rot -50 integer_mult integer_dup_times print_float)
Errors: [44.0 11 5.01 7 23.0 3 10.6076 11 1.0 1 25.99 8 18.0 2 11.3257 9 12.0 2 61.9391 13 14.01 9 5.0 1 7.0 2 4.7532 9 23.99 8 38.0 2 11.0 2 40.0 1 7.6667 10 4.5031 9 4.0 1 17.0 2 22.0 2 0.0 0 9.99 9]
Total: 555.7854
Mean: 11.115708
Genome size: 191
Size: 192
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5775.048586099998
Median total errors in population: 829.64225
Error averages by case: (247.26503989999995 10.801 202.24100570000084 8.861 249.62505909999908 7.36 213.31567909999794 11.37 211.8123836 5.585 216.3254562999983 9.275 233.80768130000007 4.894 208.8012130999972 9.898 217.71304569999987 4.519 245.74276119999746 12.582 206.04254950000106 10.184 215.08617790000005 5.26 234.7646564000002 5.138 204.4889277000028 10.313 214.4110421999988 9.536 255.1819174000001 5.759 220.9673314999998 5.108 251.06833970000005 5.024 238.10472030000076 10.173 206.22475370000075 9.855 218.90380599999997 4.585 213.51789340000013 4.729 234.27455870000009 6.05 210.96496229999994 6.607 210.82562439999867 10.106)
Error minima by case: (0.6774 8 0.01 6 4.215 2 0.0414 7 0.0 0 2.2299 7 4.7464 1 7.3257 8 0.0 0 0.573 2 0.01 7 0.0 0 2.0 1 0.7532 6 0.1778 7 3.94 2 0.0 0 3.2016 1 0.3333 2 0.4969 6 0.0 0 0.0 0 0.8747 1 0.0 0 0.3772 1)
Average genome size in population (length): 181.644
Average program size in population (points): 182.644
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 142.3852784025529
Average age in population: 137.1282724790422
Median age in population: 140.4889278458649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.611
Error (vector) diversity:			 0.766
Behavioral diversity:				 0.767
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 429070407
--- Timings ---
Current time: 1529616613492 milliseconds
Total Time:         676.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.2 seconds, 22.6%
Fitness Testing:    407.1 seconds, 60.2%
Report:             116.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 27311.21220000004
Test mean error for best: 13.65561
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 19.732100971  
Correct output: 10.0760954048  | Program output: 15.0860942191 
Correct output: 106.0206148688 | Program output: 83.0206148688 
Correct output: 0.7585604003   | Program output: 11.3661596849 
Correct output: 32.0892717501  | Program output: 33.0892717501 
Correct output: 38.239902819   | Program output: 12.2499016332 
Correct output: -28.253581966  | Program output: -46.253581966 
Correct output: 22.691883669   | Program output: 11.3661596849 
Correct output: -64.8098353824 | Program output: -76.8098353824
Correct output: -50.5729717288 | Program output: 11.3661596849 
Correct output: 10.5716307984  | Program output: 24.5816296127 
Correct output: -5.0640064942  | Program output: -0.0640064942 
Correct output: -156.5700373509 | Program output: -149.5700373509
Correct output: 16.1193686865  | Program output: 11.3661596849 
Correct output: 50.1878349036  | Program output: 26.1978337179 
Correct output: -138.4095016371 | Program output: -100.4095016371
Correct output: -119.7462217731 | Program output: -130.7462217731
Correct output: -95.2566750864 | Program output: -55.2566750864
Correct output: 153.6667050749 | Program output: 161.3334101499
Correct output: 6.8630846811   | Program output: 11.3661596849 
Correct output: -5.6640417064  | Program output: -9.6640417064 
Correct output: 34.7374026319  | Program output: 17.7374026319 
Correct output: -49.1253212489 | Program output: -27.1253212489
Correct output: 17.2744201056  | Program output: 17.2744201056 
Correct output: 62.9989442076  | Program output: 53.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_dec} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_max} {:instruction float_swap} {:instruction integer_flush} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 46} {:instruction integer_rot} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction 66} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction float_pop} {:instruction tag_integer_608} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_max} {:instruction float_frominteger} {:instruction float_add} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_1165} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_rot} {:instruction integer_rot} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction -50} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float})
Best program: (float_dup print_integer float_dup_items integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_dec in2 13.366159684860918 float_max integer_dec in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_max float_swap integer_flush float_dup_times float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult integer_max float_pop integer_dup_items 46 integer_rot float_div tag_integer_375 3 66 float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop float_pop tag_integer_608 integer_yankdup float_frominteger float_max float_frominteger float_add float_min integer_dup_times integer_flush tag_float_538 in1 tagged_1165 float_sub float_dec float_shove integer_dup_times tagged_971 float_dec float_dec integer_flush tagged_971 float_rot integer_mult float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec integer_flush float_dec float_dec float_dec float_dec integer_stackdepth float_rot float_dec float_rot in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec float_dec float_rot float_dec integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec tagged_971 float_dec float_dec float_dec tagged_971 float_dec float_min integer_sub float_dec integer_add float_rot integer_rot -50 float_dec float_dec integer_rot -50 integer_mult integer_dup_times print_float)
Errors: [44.0 11 5.01 7 23.0 3 10.6076 11 1.0 1 25.99 8 18.0 2 11.3257 9 12.0 2 61.9391 13 14.01 9 5.0 1 7.0 2 4.7532 9 23.99 8 38.0 2 11.0 2 40.0 1 7.6667 10 4.5031 9 4.0 1 17.0 2 22.0 2 0.0 0 9.99 9]
Total: 555.7854
Mean: 11.115708
Genome size: 191
Size: 192
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5806.990495999999
Median total errors in population: 830.0083
Error averages by case: (245.56326559999997 10.83 202.46257510000112 8.972 249.4530740999991 7.253 212.40315079999831 11.528 214.09432679999992 5.507 215.65579169999828 9.372 234.4386597000001 4.868 206.9975456999973 10.009 223.21506949999986 4.631 246.14249559999735 12.577 208.17236620000116 10.305 217.13411890000017 5.395 235.29442610000018 5.103 203.06046210000278 10.348 216.48256629999887 9.655 255.40614420000006 5.711 227.17151739999983 5.174 250.34267069999999 5.028 241.1955163000009 10.208 205.6096871000008 9.976 223.5653688 4.685 216.57652340000018 4.803 232.93628410000014 6.126 211.76845379999992 6.513 217.1004359999987 10.171)
Error minima by case: (0.2707 1 0.01 6 6.6338 2 0.017 8 0.0 0 0.4289 7 2.2536 1 0.3181 6 0.0 0 2.01 2 0.2055 8 0.0 0 5.0 1 0.7532 6 0.1778 7 6.4095 2 0.0 0 1.0816 1 0.3333 2 0.4969 6 0.0 0 0.0 0 1.3523 1 0.0 0 0.6228 1)
Average genome size in population (length): 181.175
Average program size in population (points): 182.175
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 143.9159087654733
Average age in population: 138.0938235847722
Median age in population: 141.8165990591198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.599
Error (vector) diversity:			 0.771
Behavioral diversity:				 0.773
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 433757371
--- Timings ---
Current time: 1529616620559 milliseconds
Total Time:         683.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.6 seconds, 22.6%
Fitness Testing:    411.5 seconds, 60.2%
Report:             117.5 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 26691.706500000037
Test mean error for best: 13.34585
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 19.732100971  
Correct output: 10.0760954048  | Program output: 18.0860942191 
Correct output: 106.0206148688 | Program output: 86.0206148688 
Correct output: 0.7585604003   | Program output: 13.3661596849 
Correct output: 32.0892717501  | Program output: 31.0892717501 
Correct output: 38.239902819   | Program output: 15.2499016332 
Correct output: -28.253581966  | Program output: -48.253581966 
Correct output: 22.691883669   | Program output: 13.3661596849 
Correct output: -64.8098353824 | Program output: -73.8098353824
Correct output: -50.5729717288 | Program output: 13.3661596849 
Correct output: 10.5716307984  | Program output: 27.5816296127 
Correct output: -5.0640064942  | Program output: -2.0640064942 
Correct output: -156.5700373509 | Program output: -149.5700373509
Correct output: 16.1193686865  | Program output: 13.3661596849 
Correct output: 50.1878349036  | Program output: 29.1978337179 
Correct output: -138.4095016371 | Program output: -100.4095016371
Correct output: -119.7462217731 | Program output: -127.7462217731
Correct output: -95.2566750864 | Program output: -55.2566750864
Correct output: 153.6667050749 | Program output: 164.3334101499
Correct output: 6.8630846811   | Program output: 13.3661596849 
Correct output: -5.6640417064  | Program output: -11.6640417064
Correct output: 34.7374026319  | Program output: 20.7374026319 
Correct output: -49.1253212489 | Program output: -27.1253212489
Correct output: 17.2744201056  | Program output: 15.2744201056 
Correct output: 62.9989442076  | Program output: 56.0089430218 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction in1} {:instruction 13.366159684860918} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction in1} {:instruction 48.009998814250736} {:instruction float_max} {:instruction float_add} {:instruction tag_integer_685} {:instruction integer_dec} {:instruction float_inc} {:instruction in2} {:instruction 13.366159684860918} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction in2} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction float_mult} {:instruction integer_max} {:instruction float_pop} {:instruction integer_dup_items} {:instruction 46} {:instruction integer_rot} {:instruction float_div} {:instruction tag_integer_375} {:instruction 3} {:instruction 66} {:instruction float_pop} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_yankdup} {:instruction -85.0550927390534} {:instruction integer_fromfloat} {:instruction tag_float_538} {:instruction in1} {:instruction tagged_971} {:instruction float_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_flush} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction integer_mult} {:instruction tagged_971} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction -51} {:instruction float_dec} {:instruction float_rot} {:instruction -50} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction in2} {:instruction float_dec} {:instruction -50} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction float_dup} {:instruction float_dec} {:instruction in2} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dup_items} {:instruction -50} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_min} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_971} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_inc} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_tan})
Best program: (float_dup print_integer float_dup_items integer_div print_integer float_dup_items integer_dup_times integer_shove float_stackdepth in1 13.366159684860918 integer_dup_times float_dup_times float_stackdepth in1 48.009998814250736 float_max float_add tag_integer_685 integer_dec float_inc in2 13.366159684860918 float_max integer_max float_sub in2 float_dup_times float_pop integer_mod integer_dup_items float_sub float_yank integer_yankdup float_cos float_pop float_pop float_mult integer_max float_pop integer_dup_items 46 integer_rot float_div tag_integer_375 3 66 float_pop float_min integer_dup float_pop -85.0550927390534 integer_dup_items float_pop float_max float_min integer_dup float_pop integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_pop float_min 48 integer_yankdup -85.0550927390534 integer_fromfloat tag_float_538 in1 tagged_971 float_sub float_dec float_shove integer_dup_times integer_sub float_dec float_dec float_dup float_dec integer_flush tagged_971 float_dec float_dec in2 float_min integer_mult tagged_971 float_dec float_rot integer_rot float_dup_items integer_mult float_dec float_dec float_rot integer_pop float_dec float_dec float_dec float_rot -51 float_dec float_rot -50 integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_dec float_dec integer_stackdepth float_dec float_dec float_rot float_dec -50 float_dec float_dec float_dec integer_pop in2 float_dec -50 float_dec float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 float_dup float_dec in2 float_min float_dec float_dec integer_div float_dec float_dec tagged_971 float_dec float_dec integer_stackdepth float_rot integer_rot float_dup_items -50 integer_pop float_dec float_dec float_dec tagged_971 float_dec float_dec float_dec integer_add float_dec float_min integer_pop float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec tagged_971 float_dec integer_swap integer_inc float_rot integer_rot integer_yank integer_mult integer_dup_times print_float float_tan)
Errors: [44.0 11 8.01 7 20.0 2 12.6076 11 1.0 1 22.99 8 20.0 1 9.3257 9 9.0 2 63.9391 13 17.01 9 3.0 1 7.0 2 2.7532 9 20.99 8 38.0 2 8.0 2 40.0 1 10.6667 10 6.5031 9 6.0 2 14.0 2 22.0 2 2.0 1 6.99 9]
Total: 549.7854
Mean: 10.995708
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5106.779438399998
Median total errors in population: 810.2854
Error averages by case: (223.2011073 10.693 176.00955720000061 8.688 224.78500769999917 6.858 189.18404889999863 11.419 188.52082469999988 5.21 188.7435089999988 9.15 198.68898910000001 4.348 178.6953184999983 9.827 190.33661769999995 4.115 224.90519099999753 12.597 181.51471120000048 10.088 186.19745120000002 4.795 203.4228742000001 4.673 175.2766003000024 10.123 188.63792529999918 9.431 224.93602930000017 5.288 192.24716709999993 4.685 223.25072319999998 4.612 217.32002560000095 10.037 179.83343330000093 9.812 192.8021965 4.238 190.54309060000014 4.352 207.64554160000012 5.606 187.09488589999995 6.437 185.92461199999903 9.98)
Error minima by case: (0.136 7 0.01 6 10.0206 2 0.0131 6 0.0 0 0.7701 7 0.2536 1 2.0404 6 0.0 0 1.8704 2 0.01 7 0.0 0 5.0 1 1.0753 6 0.1778 7 2.5905 2 0.0 0 5.2016 1 0.3333 2 0.4969 6 0.0 0 0.0 0 0.4227 1 0.0 0 0.1051 1)
Average genome size in population (length): 182.16
Average program size in population (points): 183.16
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 145.0354594731565
Average age in population: 140.373859800246
Median age in population: 143.1191761375043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.593
Error (vector) diversity:			 0.774
Behavioral diversity:				 0.776
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 438474511
--- Timings ---
Current time: 1529616627645 milliseconds
Total Time:         690.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.1 seconds, 22.6%
Fitness Testing:    415.9 seconds, 60.2%
Report:             118.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 4119.0
Test mean error for best: 2.05950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 

-23.267899029
Correct output: 10.0760954048  | Program output: 

11.0760954048
Correct output: 106.0206148688 | Program output: 

107.0206148688
Correct output: 0.7585604003   | Program output: 

1.7585604003
Correct output: 32.0892717501  | Program output: 

33.0892717501
Correct output: 38.239902819   | Program output: 

39.239902819
Correct output: -28.253581966  | Program output: 

-27.253581966
Correct output: 22.691883669   | Program output: 

23.691883669
Correct output: -64.8098353824 | Program output: 

-63.8098353824
Correct output: -50.5729717288 | Program output: 

-49.5729717288
Correct output: 10.5716307984  | Program output: 

11.5716307984
Correct output: -5.0640064942  | Program output: 

-4.0640064942
Correct output: -156.5700373509 | Program output: 

-155.5700373509
Correct output: 16.1193686865  | Program output: 

17.1193686865
Correct output: 50.1878349036  | Program output: 

51.1878349036
Correct output: -138.4095016371 | Program output: 

-137.4095016371
Correct output: -119.7462217731 | Program output: 

-118.7462217731
Correct output: -95.2566750864 | Program output: 

-94.2566750864
Correct output: 153.6667050749 | Program output: 

154.6667050749
Correct output: 6.8630846811   | Program output: 

7.8630846811
Correct output: -5.6640417064  | Program output: 

-4.6640417064
Correct output: 34.7374026319  | Program output: 

35.7374026319
Correct output: -49.1253212489 | Program output: 

-48.1253212489
Correct output: 17.2744201056  | Program output: 

18.2744201056
Correct output: 62.9989442076  | Program output: 

63.9989442076
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction print_float} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction print_newline} {:instruction integer_flush} {:instruction float_add} {:instruction float_shove} {:instruction print_float} {:instruction float_yank} {:instruction print_newline} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_cos} {:instruction print_float})
Best program: (float_frominteger print_float integer_rot integer_mult float_dup float_mult float_dup print_newline integer_flush float_add float_shove print_float float_yank print_newline integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger float_inc integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min float_mult integer_yank float_yank float_mult float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove integer_dup_items float_dup_times float_sub float_cos print_float)
Errors: [1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 4 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3 1.0 3]
Total: 101.0
Mean: 2.02
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 5911.801447599999
Median total errors in population: 830.7854000000001
Error averages by case: (251.15053770000006 10.777 209.23262430000133 9.001 246.8150411999994 6.908 219.81547639999795 11.499 216.15213009999997 5.346 223.0204432999982 9.383 234.35977650000007 4.836 215.33370919999732 10.034 223.35816079999995 4.531 252.89822099999753 12.627 216.0581730000013 10.321 217.7410458 5.036 236.58358580000018 5.111 210.48565420000278 10.371 223.75995349999874 9.716 258.1894059000001 5.737 225.45174389999988 5.072 254.59393419999998 5.004 246.82110860000088 10.163 212.98667780000076 10.01 222.80688490000006 4.6 221.63180820000022 4.746 238.53447240000023 6.195 217.7013722999999 6.558 222.5085065999984 10.229)
Error minima by case: (0.2679 3 0.01 3 1.0 1 0.0414 3 0.0 0 0.7701 3 0.409 1 1.0 3 0.0 0 1.0 2 0.01 3 0.0 0 1.0 1 1.0 3 0.1778 3 1.0 2 0.0 0 1.0 1 0.3333 2 0.4969 3 0.0 0 0.0 0 1.0 1 0.0 0 0.0089 1)
Average genome size in population (length): 181.719
Average program size in population (points): 182.719
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 146.4969319786142
Average age in population: 141.4312341720467
Median age in population: 144.4467488916992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.596
Error (vector) diversity:			 0.736
Behavioral diversity:				 0.74
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 443178945
--- Timings ---
Current time: 1529616633939 milliseconds
Total Time:         697.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.5 seconds, 22.6%
Fitness Testing:    420.3 seconds, 60.2%
Report:             119.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 3119.0
Test mean error for best: 1.55950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
-23.267899029
Correct output: 10.0760954048  | Program output: 
11.0760954048
Correct output: 106.0206148688 | Program output: 
107.0206148688
Correct output: 0.7585604003   | Program output: 
1.7585604003 
Correct output: 32.0892717501  | Program output: 
33.0892717501
Correct output: 38.239902819   | Program output: 
39.239902819 
Correct output: -28.253581966  | Program output: 
-27.253581966
Correct output: 22.691883669   | Program output: 
23.691883669 
Correct output: -64.8098353824 | Program output: 
-63.8098353824
Correct output: -50.5729717288 | Program output: 
-49.5729717288
Correct output: 10.5716307984  | Program output: 
11.5716307984
Correct output: -5.0640064942  | Program output: 
-4.0640064942
Correct output: -156.5700373509 | Program output: 
-155.5700373509
Correct output: 16.1193686865  | Program output: 
17.1193686865
Correct output: 50.1878349036  | Program output: 
51.1878349036
Correct output: -138.4095016371 | Program output: 
-137.4095016371
Correct output: -119.7462217731 | Program output: 
-118.7462217731
Correct output: -95.2566750864 | Program output: 
-94.2566750864
Correct output: 153.6667050749 | Program output: 
154.6667050749
Correct output: 6.8630846811   | Program output: 
7.8630846811 
Correct output: -5.6640417064  | Program output: 
-4.6640417064
Correct output: 34.7374026319  | Program output: 
35.7374026319
Correct output: -49.1253212489 | Program output: 
-48.1253212489
Correct output: 17.2744201056  | Program output: 
18.2744201056
Correct output: 62.9989442076  | Program output: 
63.9989442076
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction print_float} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction print_newline} {:instruction integer_flush} {:instruction float_add} {:instruction float_shove} {:instruction print_float} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_cos} {:instruction print_float})
Best program: (float_frominteger print_float integer_rot integer_mult float_dup float_mult float_dup print_newline integer_flush float_add float_shove print_float float_yank integer_dup integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger float_inc integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min float_mult integer_yank float_yank float_mult float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove integer_dup_items float_dup_times float_sub float_cos print_float)
Errors: [1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2]
Total: 76.0
Mean: 1.52
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 5235.598262499998
Median total errors in population: 837.7926
Error averages by case: (232.07822410000003 10.704 172.0091089 8.807 223.8505093999993 7.011 183.82023709999905 11.33 197.24329380000006 5.397 185.53967309999913 9.18 213.81019739999994 4.973 176.8159504999984 9.825 204.72776569999996 4.652 217.78632749999818 12.391 177.5736705000004 10.068 197.40820130000017 4.81 217.8840366000002 5.095 173.10812780000268 10.187 187.6272090999996 9.505 237.77075630000013 5.723 208.93416729999976 5.21 233.7004977999999 5.005 219.0348944000009 10.03 177.2363415000007 9.774 203.9883153999999 4.648 201.7265391000001 4.761 216.68341210000028 6.13 196.02783259999978 6.524 187.48697319999948 9.986)
Error minima by case: (0.005 2 0.01 2 1.0 2 0.1445 2 0.0 0 1.0 2 0.7464 1 1.0 2 0.0 0 1.0 2 0.01 2 0.0 0 1.0 1 0.7532 2 0.1778 2 1.0 2 0.0 0 0.2567 1 0.3333 2 0.1308 2 0.0 0 0.0 0 1.0 1 0.0 0 0.0089 1)
Average genome size in population (length): 179.525
Average program size in population (points): 180.525
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 147.377507993537
Average age in population: 140.7667044278852
Median age in population: 145.725372948286
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.627
Error (vector) diversity:			 0.759
Behavioral diversity:				 0.76
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 447827942
--- Timings ---
Current time: 1529616640336 milliseconds
Total Time:         704.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.9 seconds, 22.6%
Fitness Testing:    424.8 seconds, 60.3%
Report:             120.4 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 3119.0
Test mean error for best: 1.55950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
-23.267899029
Correct output: 10.0760954048  | Program output: 
11.0760954048
Correct output: 106.0206148688 | Program output: 
107.0206148688
Correct output: 0.7585604003   | Program output: 
1.7585604003 
Correct output: 32.0892717501  | Program output: 
33.0892717501
Correct output: 38.239902819   | Program output: 
39.239902819 
Correct output: -28.253581966  | Program output: 
-27.253581966
Correct output: 22.691883669   | Program output: 
23.691883669 
Correct output: -64.8098353824 | Program output: 
-63.8098353824
Correct output: -50.5729717288 | Program output: 
-49.5729717288
Correct output: 10.5716307984  | Program output: 
11.5716307984
Correct output: -5.0640064942  | Program output: 
-4.0640064942
Correct output: -156.5700373509 | Program output: 
-155.5700373509
Correct output: 16.1193686865  | Program output: 
17.1193686865
Correct output: 50.1878349036  | Program output: 
51.1878349036
Correct output: -138.4095016371 | Program output: 
-137.4095016371
Correct output: -119.7462217731 | Program output: 
-118.7462217731
Correct output: -95.2566750864 | Program output: 
-94.2566750864
Correct output: 153.6667050749 | Program output: 
154.6667050749
Correct output: 6.8630846811   | Program output: 
7.8630846811 
Correct output: -5.6640417064  | Program output: 
-4.6640417064
Correct output: 34.7374026319  | Program output: 
35.7374026319
Correct output: -49.1253212489 | Program output: 
-48.1253212489
Correct output: 17.2744201056  | Program output: 
18.2744201056
Correct output: 62.9989442076  | Program output: 
63.9989442076
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction print_float} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction print_newline} {:instruction integer_flush} {:instruction float_add} {:instruction float_shove} {:instruction print_float} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_cos} {:instruction print_float})
Best program: (float_frominteger print_float integer_rot integer_mult float_dup float_mult float_dup print_newline integer_flush float_add float_shove print_float float_yank integer_dup integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger float_inc integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min float_mult integer_yank float_yank float_mult float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove integer_dup_items float_dup_times float_sub float_cos print_float)
Errors: [1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 3 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2 1.0 2]
Total: 76.0
Mean: 1.52
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 6002.8864608999975
Median total errors in population: 825.6055000000001
Error averages by case: (260.0590275000001 10.631 210.0700126000016 8.841 246.39657989999904 6.941 218.62873859999743 11.187 227.09770620000003 5.287 224.26411509999787 9.134 239.44028110000002 5.073 214.94084259999636 9.819 232.45925869999985 4.909 249.29920169999718 12.279 215.9549151000018 10.103 227.7785966000001 4.781 244.0542979000002 5.342 210.63701110000284 10.185 224.0898306999982 9.465 264.18324340000015 5.939 236.06594059999986 5.422 260.66068029999997 5.264 239.114550700001 10.035 212.12673240000078 9.782 230.79612899999992 4.841 232.53018620000017 5.024 244.40837410000034 6.373 225.79621289999997 6.264 219.15699589999812 9.956)
Error minima by case: (0.5325 2 0.01 2 1.0 2 0.0617 2 0.0 0 1.0 2 1.0 1 0.9596 2 0.0 0 1.0 2 0.2055 2 0.0 0 1.0 1 1.0 2 0.1778 2 1.0 2 0.0 0 1.0 1 0.3333 2 0.4969 2 0.0 0 0.0 0 0.5091 1 0.0 0 0.0089 1)
Average genome size in population (length): 177.648
Average program size in population (points): 178.648
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 149.0410028593481
Average age in population: 141.7784198981553
Median age in population: 146.9927443260523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.535
Error (vector) diversity:			 0.687
Behavioral diversity:				 0.691
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 452424068
--- Timings ---
Current time: 1529616646681 milliseconds
Total Time:         710.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.3 seconds, 22.6%
Fitness Testing:    429.3 seconds, 60.4%
Report:             120.8 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 2124.0
Test mean error for best: 1.06200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: -23.267899029 
Correct output: 10.0760954048  | Program output: 11.0760954048 
Correct output: 106.0206148688 | Program output: 107.0206148688
Correct output: 0.7585604003   | Program output: 1.7585604003  
Correct output: 32.0892717501  | Program output: 33.0892717501 
Correct output: 38.239902819   | Program output: 39.239902819  
Correct output: -28.253581966  | Program output: -27.253581966 
Correct output: 22.691883669   | Program output: 23.691883669  
Correct output: -64.8098353824 | Program output: -63.8098353824
Correct output: -50.5729717288 | Program output: -49.5729717288
Correct output: 10.5716307984  | Program output: 11.5716307984 
Correct output: -5.0640064942  | Program output: -4.0640064942 
Correct output: -156.5700373509 | Program output: -155.5700373509
Correct output: 16.1193686865  | Program output: 17.1193686865 
Correct output: 50.1878349036  | Program output: 51.1878349036 
Correct output: -138.4095016371 | Program output: -137.4095016371
Correct output: -119.7462217731 | Program output: -118.7462217731
Correct output: -95.2566750864 | Program output: -94.2566750864
Correct output: 153.6667050749 | Program output: 154.6667050749
Correct output: 6.8630846811   | Program output: 7.8630846811  
Correct output: -5.6640417064  | Program output: -4.6640417064 
Correct output: 34.7374026319  | Program output: 35.7374026319 
Correct output: -49.1253212489 | Program output: -48.1253212489
Correct output: 17.2744201056  | Program output: 18.2744201056 
Correct output: 62.9989442076  | Program output: 63.9989442076 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction print_float} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_add} {:instruction float_shove} {:instruction print_float} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_cos} {:instruction print_float})
Best program: (float_frominteger print_float integer_rot integer_mult float_dup float_mult float_dup integer_rot integer_flush float_add float_shove print_float float_yank integer_dup integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger float_inc integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min float_mult integer_yank float_yank float_mult float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove integer_dup_items float_dup_times float_sub float_cos print_float)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 51.0
Mean: 1.02
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 6732.227445399999
Median total errors in population: 829.7854
Error averages by case: (287.7838193999999 10.315 236.9767013000014 8.739 279.54725769999925 7.254 246.02718009999782 10.714 255.8287542 5.589 248.34447489999818 8.958 264.04073690000007 5.422 241.03634469999722 9.543 265.7502665999999 5.39 272.84349409999817 11.892 241.38705520000147 9.803 260.3362821000001 5.356 275.3759778000001 5.815 237.90788960000233 9.911 248.7152065999986 9.322 292.6399007000001 6.321 268.9458128999999 5.928 290.6749394000001 5.575 275.51391190000083 9.787 240.13750850000054 9.518 263.92238009999994 5.212 262.4818510000001 5.324 276.60478430000023 6.528 257.3439937 6.553 247.64292169999842 9.649)
Error minima by case: (0.6834 1 0.01 1 1.0 1 0.0449 1 0.0 0 1.0 1 1.0 1 0.6819 1 0.0 0 0.573 2 0.01 1 0.0 0 1.0 1 1.0 1 0.1778 1 1.0 1 0.0 0 1.0 1 0.3333 1 0.4969 1 0.0 0 0.0 0 0.8747 1 0.0 0 0.0089 1)
Average genome size in population (length): 160.17
Average program size in population (points): 161.17
Average percent parens in population: 0.009
Minimum age in population: 0.0
Maximum age in population: 150.0187058294379
Average age in population: 138.0011073040157
Median age in population: 147.9424752047824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.528
Error (vector) diversity:			 0.644
Behavioral diversity:				 0.647
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 456556265
--- Timings ---
Current time: 1529616652543 milliseconds
Total Time:         716.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.8 seconds, 22.6%
Fitness Testing:    433.3 seconds, 60.5%
Report:             121.3 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 2000.0
Test mean error for best: 1.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 

-24.267899029
Correct output: 10.0760954048  | Program output: 

10.0760954048
Correct output: 106.0206148688 | Program output: 

106.0206148688
Correct output: 0.7585604003   | Program output: 

0.7585604003
Correct output: 32.0892717501  | Program output: 

32.0892717501
Correct output: 38.239902819   | Program output: 

38.239902819
Correct output: -28.253581966  | Program output: 

-28.253581966
Correct output: 22.691883669   | Program output: 

22.691883669
Correct output: -64.8098353824 | Program output: 

-64.8098353824
Correct output: -50.5729717288 | Program output: 

-50.5729717288
Correct output: 10.5716307984  | Program output: 

10.5716307984
Correct output: -5.0640064942  | Program output: 

-5.0640064942
Correct output: -156.5700373509 | Program output: 

-156.5700373509
Correct output: 16.1193686865  | Program output: 

16.1193686865
Correct output: 50.1878349036  | Program output: 

50.1878349036
Correct output: -138.4095016371 | Program output: 

-138.4095016371
Correct output: -119.7462217731 | Program output: 

-119.7462217731
Correct output: -95.2566750864 | Program output: 

-95.2566750864
Correct output: 153.6667050749 | Program output: 

153.6667050749
Correct output: 6.8630846811   | Program output: 

6.8630846811
Correct output: -5.6640417064  | Program output: 

-5.6640417064
Correct output: 34.7374026319  | Program output: 

34.7374026319
Correct output: -49.1253212489 | Program output: 

-49.1253212489
Correct output: 17.2744201056  | Program output: 

17.2744201056
Correct output: 62.9989442076  | Program output: 

62.9989442076
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction print_integer} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_shove} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_dup} {:instruction print_newline} {:instruction integer_flush} {:instruction float_add} {:instruction float_shove} {:instruction print_float} {:instruction float_yank} {:instruction print_newline} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_pop} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction float_pop} {:instruction -85.0550927390534} {:instruction integer_dup_items} {:instruction -8} {:instruction float_max} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_yankdup})
Best program: (float_dup print_integer float_dup_items integer_div float_shove float_dup_items integer_dup_times float_mult float_dup print_newline integer_flush float_add float_shove print_float float_yank print_newline integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times float_pop integer_dup_items integer_add integer_dup tag_float_939 tagged_456 integer_min float_mult integer_yank float_yank float_mult float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove integer_dup_items float_dup_times integer_dup float_pop integer_dup float_pop -85.0550927390534 integer_dup_items -8 float_max float_pop float_min 48 integer_yankdup)
Errors: [0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2 0.0 2]
Total: 50.0
Mean: 1.0
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 6324.325154199999
Median total errors in population: 600.7957000000001
Error averages by case: (265.32160730000004 8.178 228.62451960000092 7.362 245.68092859999962 6.464 234.61247569999878 8.326 246.12749680000002 5.685 235.39046569999908 7.373 235.09673500000005 5.657 232.51644309999824 7.702 254.7198115999999 5.771 247.6176328999988 9.34 230.7760950000007 7.918 248.56201340000004 5.875 261.88128860000006 6.151 230.50342180000143 8.021 237.642119599999 7.634 270.3027015 6.353 257.9618448999999 6.257 267.16520429999997 5.848 248.02497040000043 7.853 230.88076920000043 7.699 249.40750840000007 5.554 252.20065330000023 5.59 259.69334430000004 6.536 246.4770872 6.143 234.08201599999913 7.766)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 0 0.0 2 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 0 0.0 0 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 119.142
Average program size in population (points): 120.142
Average percent parens in population: 0.011
Minimum age in population: 0.0
Maximum age in population: 151.6093977186821
Average age in population: 133.045593351378
Median age in population: 133.3708506375654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.348
Error (vector) diversity:			 0.402
Behavioral diversity:				 0.41
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 459609296
--- Timings ---
Current time: 1529616657469 milliseconds
Total Time:         721.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.2 seconds, 22.6%
Fitness Testing:    436.4 seconds, 60.5%
Report:             121.7 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 1000.0
Test mean error for best: 0.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: 
-24.267899029
Correct output: 10.0760954048  | Program output: 
10.0760954048
Correct output: 106.0206148688 | Program output: 
106.0206148688
Correct output: 0.7585604003   | Program output: 
0.7585604003 
Correct output: 32.0892717501  | Program output: 
32.0892717501
Correct output: 38.239902819   | Program output: 
38.239902819 
Correct output: -28.253581966  | Program output: 
-28.253581966
Correct output: 22.691883669   | Program output: 
22.691883669 
Correct output: -64.8098353824 | Program output: 
-64.8098353824
Correct output: -50.5729717288 | Program output: 
-50.5729717288
Correct output: 10.5716307984  | Program output: 
10.5716307984
Correct output: -5.0640064942  | Program output: 
-5.0640064942
Correct output: -156.5700373509 | Program output: 
-156.5700373509
Correct output: 16.1193686865  | Program output: 
16.1193686865
Correct output: 50.1878349036  | Program output: 
50.1878349036
Correct output: -138.4095016371 | Program output: 
-138.4095016371
Correct output: -119.7462217731 | Program output: 
-119.7462217731
Correct output: -95.2566750864 | Program output: 
-95.2566750864
Correct output: 153.6667050749 | Program output: 
153.6667050749
Correct output: 6.8630846811   | Program output: 
6.8630846811 
Correct output: -5.6640417064  | Program output: 
-5.6640417064
Correct output: 34.7374026319  | Program output: 
34.7374026319
Correct output: -49.1253212489 | Program output: 
-49.1253212489
Correct output: 17.2744201056  | Program output: 
17.2744201056
Correct output: 62.9989442076  | Program output: 
62.9989442076
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction print_float} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction print_float} {:instruction float_yank} {:instruction print_newline} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction float_mult} {:instruction integer_yank} {:instruction float_yank} {:instruction float_mult} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin} {:instruction tagged_600} {:instruction integer_yank} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_cos} {:instruction print_float})
Best program: (float_frominteger print_float integer_rot integer_mult float_dup float_mult float_dup print_float float_yank print_newline integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min float_mult integer_yank float_yank float_mult float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove float_frominteger float_pop float_sin tagged_600 integer_yank integer_shove integer_dup_items float_dup_times float_sub float_cos print_float)
Errors: [0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1]
Total: 25.0
Mean: 0.5
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1854.3116331999995
Median total errors in population: 76.0
Error averages by case: (75.75016479999998 3.983 67.18194630000002 3.976 69.35642370000006 3.548 72.55727209999999 3.998 67.95669549999998 3.468 69.30809889999999 3.818 66.55272719999994 3.649 69.86703179999999 3.94 70.82874760000001 3.611 71.41088979999998 4.729 66.21457519999996 4.016 66.84627510000003 3.894 76.32010240000001 3.735 69.62183189999998 4.069 68.83933750000001 3.924 76.68274880000001 3.733 73.46423220000003 3.889 74.3849779 3.57 71.56328620000005 3.711 69.53011149999998 3.924 66.48914969999997 3.558 71.1277123 3.509 72.6538764 4.099 67.19850879999998 3.546 67.0299096 3.678)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 0 0.0 1)
Average genome size in population (length): 68.368
Average program size in population (points): 69.368
Average percent parens in population: 0.016
Minimum age in population: 77.85944584964982
Maximum age in population: 151.416802577599
Average age in population: 127.8923986183578
Median age in population: 129.1095258541795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.089
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 461331622
--- Timings ---
Current time: 1529616661007 milliseconds
Total Time:         724.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.5 seconds, 22.7%
Fitness Testing:    438.1 seconds, 60.4%
Report:             122.2 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: -24.267899029 
Correct output: 10.0760954048  | Program output: 10.0760954048 
Correct output: 106.0206148688 | Program output: 106.0206148688
Correct output: 0.7585604003   | Program output: 0.7585604003  
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 38.239902819  
Correct output: -28.253581966  | Program output: -28.253581966 
Correct output: 22.691883669   | Program output: 22.691883669  
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: -50.5729717288
Correct output: 10.5716307984  | Program output: 10.5716307984 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -156.5700373509
Correct output: 16.1193686865  | Program output: 16.1193686865 
Correct output: 50.1878349036  | Program output: 50.1878349036 
Correct output: -138.4095016371 | Program output: -138.4095016371
Correct output: -119.7462217731 | Program output: -119.7462217731
Correct output: -95.2566750864 | Program output: -95.2566750864
Correct output: 153.6667050749 | Program output: 153.6667050749
Correct output: 6.8630846811   | Program output: 6.8630846811  
Correct output: -5.6640417064  | Program output: -5.6640417064 
Correct output: 34.7374026319  | Program output: 34.7374026319 
Correct output: -49.1253212489 | Program output: -49.1253212489
Correct output: 17.2744201056  | Program output: 17.2744201056 
Correct output: 62.9989442076  | Program output: 62.9989442076 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction print_float} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction float_mult} {:instruction float_dup} {:instruction integer_rot} {:instruction integer_flush} {:instruction float_add} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_min} {:instruction print_float} {:instruction integer_max} {:instruction in1} {:instruction 0} {:instruction integer_pop} {:instruction in2} {:instruction float_frominteger} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_add} {:instruction float_max} {:instruction print_float} {:instruction float_sin} {:instruction float_swap} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_add} {:instruction integer_dup} {:instruction tag_float_939} {:instruction tagged_456} {:instruction integer_min} {:instruction integer_dup_items} {:instruction 47} {:instruction integer_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction float_add} {:instruction integer_pop} {:instruction float_swap} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_pop} {:instruction float_min} {:instruction 48} {:instruction integer_fromfloat})
Best program: (float_mult print_float integer_rot integer_mult float_dup float_mult float_dup integer_rot integer_flush float_add float_shove float_stackdepth float_yank integer_dup integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger in2 integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_fromfloat)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1525.0777596
Median total errors in population: 76.0
Error averages by case: (60.909230199999996 3.063 55.301461100000026 3.108 56.57798080000001 2.742 59.11030619999997 3.104 56.033387799999986 2.718 56.975099699999994 2.994 55.98802179999994 2.907 57.408062300000026 3.072 58.8809993 2.828 59.07333169999997 3.701 54.79774379999997 3.139 56.33189670000001 3.086 62.67881089999998 2.949 57.19601789999995 3.173 56.724276 3.063 62.66762920000003 2.913 61.10655900000003 3.051 61.5116544 2.762 58.94527150000002 2.85 57.03348829999997 3.047 56.07919879999997 2.827 57.58801259999999 2.753 59.86487229999999 3.212 55.54938 2.791 56.0710673 2.821)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 63.091
Average program size in population (points): 64.091
Average percent parens in population: 0.017
Minimum age in population: 100.589175528544
Maximum age in population: 145.2996342105746
Average age in population: 130.1880941415033
Median age in population: 130.8289068637738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.075
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 462916473
--- Timings ---
Current time: 1529616664574 milliseconds
Total Time:         728.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.9 seconds, 22.8%
Fitness Testing:    439.8 seconds, 60.4%
Report:             122.6 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 114
Successful program: (float_mult print_float integer_rot integer_mult float_dup float_mult float_dup integer_rot integer_flush float_add float_shove float_stackdepth float_yank integer_dup integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger in2 integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_fromfloat)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 56


Auto-simplifying with starting size: 56
step: 0
program: (float_mult print_float integer_rot integer_mult float_dup float_mult float_dup integer_rot integer_flush float_add float_shove float_stackdepth float_yank integer_dup integer_min print_float integer_max in1 0 integer_pop in2 float_frominteger in2 integer_dup_items integer_div integer_mod integer_sub integer_dec float_add float_max print_float float_sin float_swap float_inc integer_shove integer_dup_times integer_add integer_dup tag_float_939 tagged_456 integer_min integer_dup_items 47 integer_rot float_sub integer_mod float_add integer_pop float_swap integer_dup_times integer_dup float_pop float_min 48 integer_fromfloat)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 56

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -24.267899029  | Program output: -24.267899029 
Correct output: 10.0760954048  | Program output: 10.0760954048 
Correct output: 106.0206148688 | Program output: 106.0206148688
Correct output: 0.7585604003   | Program output: 0.7585604003  
Correct output: 32.0892717501  | Program output: 32.0892717501 
Correct output: 38.239902819   | Program output: 38.239902819  
Correct output: -28.253581966  | Program output: -28.253581966 
Correct output: 22.691883669   | Program output: 22.691883669  
Correct output: -64.8098353824 | Program output: -64.8098353824
Correct output: -50.5729717288 | Program output: -50.5729717288
Correct output: 10.5716307984  | Program output: 10.5716307984 
Correct output: -5.0640064942  | Program output: -5.0640064942 
Correct output: -156.5700373509 | Program output: -156.5700373509
Correct output: 16.1193686865  | Program output: 16.1193686865 
Correct output: 50.1878349036  | Program output: 50.1878349036 
Correct output: -138.4095016371 | Program output: -138.4095016371
Correct output: -119.7462217731 | Program output: -119.7462217731
Correct output: -95.2566750864 | Program output: -95.2566750864
Correct output: 153.6667050749 | Program output: 153.6667050749
Correct output: 6.8630846811   | Program output: 6.8630846811  
Correct output: -5.6640417064  | Program output: -5.6640417064 
Correct output: 34.7374026319  | Program output: 34.7374026319 
Correct output: -49.1253212489 | Program output: -49.1253212489
Correct output: 17.2744201056  | Program output: 17.2744201056 
Correct output: 62.9989442076  | Program output: 62.9989442076 
;;******************************
