Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-69.91057588408634 -95] -164.91057588408634]
Train Case:   1 | Input/Output: [[53.529791245711095 53] 106.5297912457111]
Train Case:   2 | Input/Output: [[95.07585049777057 -28] 67.07585049777057]
Train Case:   3 | Input/Output: [[55.600341592265494 81] 136.6003415922655]
Train Case:   4 | Input/Output: [[72.39159276985873 -72] 0.3915927698587325]
Train Case:   5 | Input/Output: [[22.763285087432877 -40] -17.236714912567123]
Train Case:   6 | Input/Output: [[-56.90089918903127 37] -19.90089918903127]
Train Case:   7 | Input/Output: [[54.20784524317969 85] 139.2078452431797]
Train Case:   8 | Input/Output: [[-68.02929132200703 73] 4.970708677992974]
Train Case:   9 | Input/Output: [[9.32538969334746 -20] -10.67461030665254]
Train Case:  10 | Input/Output: [[5.660079905101327 43] 48.66007990510133]
Train Case:  11 | Input/Output: [[27.55043933339823 2] 29.55043933339823]
Train Case:  12 | Input/Output: [[58.34978734939281 -25] 33.34978734939281]
Train Case:  13 | Input/Output: [[-47.099684526307705 -47] -94.0996845263077]
Train Case:  14 | Input/Output: [[65.31668974567745 64] 129.31668974567745]
Train Case:  15 | Input/Output: [[50.92618936351349 2] 52.92618936351349]
Train Case:  16 | Input/Output: [[72.94766236856381 -28] 44.94766236856381]
Train Case:  17 | Input/Output: [[-54.05437622855993 -7] -61.05437622855993]
Train Case:  18 | Input/Output: [[-30.374108003455817 -96] -126.37410800345582]
Train Case:  19 | Input/Output: [[-3.9691198959893086 -51] -54.96911989598931]
Train Case:  20 | Input/Output: [[32.61828454132785 44] 76.61828454132785]
Train Case:  21 | Input/Output: [[-97.239191621853 17] -80.239191621853]
Train Case:  22 | Input/Output: [[55.09307836449665 3] 58.09307836449665]
Train Case:  23 | Input/Output: [[14.54697356543997 42] 56.54697356543997]
Train Case:  24 | Input/Output: [[-88.97938520662439 36] -52.979385206624386]
Test Case:   0 | Input/Output: [[1.7131231075354236 -19] -17.286876892464576]
Test Case:   1 | Input/Output: [[9.368231077402584 -35] -25.631768922597416]
Test Case:   2 | Input/Output: [[48.76132328059117 -96] -47.23867671940883]
Test Case:   3 | Input/Output: [[-11.552463689758014 -76] -87.55246368975801]
Test Case:   4 | Input/Output: [[-65.89803364416203 60] -5.898033644162027]
Test Case:   5 | Input/Output: [[-0.9621537944334335 12] 11.037846205566566]
Test Case:   6 | Input/Output: [[-61.614963172729475 19] -42.614963172729475]
Test Case:   7 | Input/Output: [[93.6363012807513 -63] 30.636301280751297]
Test Case:   8 | Input/Output: [[61.28305040845581 44] 105.28305040845581]
Test Case:   9 | Input/Output: [[82.38633804047842 22] 104.38633804047842]
Test Case:  10 | Input/Output: [[-85.9686640311078 37] -48.96866403110781]
Test Case:  11 | Input/Output: [[62.526967002592585 -40] 22.526967002592585]
Test Case:  12 | Input/Output: [[43.06995748079973 93] 136.06995748079973]
Test Case:  13 | Input/Output: [[-99.95226149307945 100] 0.04773850692055248]
Test Case:  14 | Input/Output: [[-86.40552718176345 42] -44.405527181763446]
Test Case:  15 | Input/Output: [[44.806387317052696 76] 120.8063873170527]
Test Case:  16 | Input/Output: [[-10.058189334105478 7] -3.058189334105478]
Test Case:  17 | Input/Output: [[-77.19111006101554 33] -44.191110061015536]
Test Case:  18 | Input/Output: [[-62.26994025840129 -99] -161.26994025840128]
Test Case:  19 | Input/Output: [[-26.05376802083424 89] 62.94623197916576]
Test Case:  20 | Input/Output: [[-10.412991943214479 -66] -76.41299194321448]
Test Case:  21 | Input/Output: [[-66.4019477878675 -29] -95.4019477878675]
Test Case:  22 | Input/Output: [[75.32651278604052 -64] 11.326512786040524]
Test Case:  23 | Input/Output: [[59.227368358074045 -76] -16.772631641925955]
Test Case:  24 | Input/Output: [[-4.674453662030658 -94] -98.67445366203066]
Test Case:  25 | Input/Output: [[-55.2059448427056 60] 4.794055157294402]
Test Case:  26 | Input/Output: [[64.59182453414451 33] 97.59182453414451]
Test Case:  27 | Input/Output: [[37.43258999544733 -60] -22.56741000455267]
Test Case:  28 | Input/Output: [[30.09046703410621 29] 59.09046703410621]
Test Case:  29 | Input/Output: [[72.74329844584051 -26] 46.74329844584051]
Test Case:  30 | Input/Output: [[93.65151804026652 65] 158.65151804026652]
Test Case:  31 | Input/Output: [[-17.77293456506142 78] 60.22706543493858]
Test Case:  32 | Input/Output: [[70.26054883160072 68] 138.26054883160072]
Test Case:  33 | Input/Output: [[72.84535280204611 -88] -15.154647197953892]
Test Case:  34 | Input/Output: [[-59.41620642875509 94] 34.58379357124491]
Test Case:  35 | Input/Output: [[-25.266803834171327 76] 50.73319616582867]
Test Case:  36 | Input/Output: [[51.090029808226774 -59] -7.909970191773226]
Test Case:  37 | Input/Output: [[90.99524544409113 58] 148.99524544409113]
Test Case:  38 | Input/Output: [[-5.640140808369523 -49] -54.64014080836952]
Test Case:  39 | Input/Output: [[84.59118517530237 60] 144.59118517530237]
Test Case:  40 | Input/Output: [[91.26218476970763 -12] 79.26218476970763]
Test Case:  41 | Input/Output: [[-93.89917206291403 83] -10.899172062914033]
Test Case:  42 | Input/Output: [[22.277082974257368 7] 29.277082974257368]
Test Case:  43 | Input/Output: [[-60.192488473166165 -100] -160.19248847316618]
Test Case:  44 | Input/Output: [[-19.598004128026744 97] 77.40199587197326]
Test Case:  45 | Input/Output: [[-43.50950047717483 -42] -85.50950047717484]
Test Case:  46 | Input/Output: [[13.193422055518184 59] 72.19342205551818]
Test Case:  47 | Input/Output: [[-96.94672224626318 21] -75.94672224626318]
Test Case:  48 | Input/Output: [[-91.71163401030213 14] -77.71163401030213]
Test Case:  49 | Input/Output: [[-30.080482547992275 22] -8.080482547992275]
Test Case:  50 | Input/Output: [[-17.1558097315788 98] 80.8441902684212]
Test Case:  51 | Input/Output: [[91.925554128058 -42] 49.925554128057996]
Test Case:  52 | Input/Output: [[-96.26303256521086 31] -65.26303256521086]
Test Case:  53 | Input/Output: [[32.49388591267984 65] 97.49388591267984]
Test Case:  54 | Input/Output: [[16.21875198390525 5] 21.21875198390525]
Test Case:  55 | Input/Output: [[-43.435265286555236 -13] -56.435265286555236]
Test Case:  56 | Input/Output: [[65.24486599236172 31] 96.24486599236172]
Test Case:  57 | Input/Output: [[37.34011824102811 14] 51.34011824102811]
Test Case:  58 | Input/Output: [[-91.39062668247095 81] -10.390626682470952]
Test Case:  59 | Input/Output: [[-59.176612890742184 -64] -123.17661289074218]
Test Case:  60 | Input/Output: [[43.54520776739105 54] 97.54520776739105]
Test Case:  61 | Input/Output: [[75.90766891351043 99] 174.90766891351043]
Test Case:  62 | Input/Output: [[-25.345154314767427 98] 72.65484568523257]
Test Case:  63 | Input/Output: [[78.41465409794469 -36] 42.41465409794469]
Test Case:  64 | Input/Output: [[2.920605862269639 -12] -9.079394137730361]
Test Case:  65 | Input/Output: [[-17.904935868236095 -22] -39.904935868236095]
Test Case:  66 | Input/Output: [[-14.073808638802703 -19] -33.0738086388027]
Test Case:  67 | Input/Output: [[77.30184894267734 63] 140.30184894267734]
Test Case:  68 | Input/Output: [[39.341203411518904 -67] -27.658796588481096]
Test Case:  69 | Input/Output: [[-48.640707232634625 41] -7.640707232634625]
Test Case:  70 | Input/Output: [[-45.24869606250776 63] 17.75130393749224]
Test Case:  71 | Input/Output: [[-99.96786865327887 40] -59.96786865327887]
Test Case:  72 | Input/Output: [[71.66457200596247 -87] -15.33542799403753]
Test Case:  73 | Input/Output: [[26.20851184348838 -7] 19.20851184348838]
Test Case:  74 | Input/Output: [[-82.7133990117835 24] -58.713399011783494]
Test Case:  75 | Input/Output: [[60.64671791921606 94] 154.64671791921606]
Test Case:  76 | Input/Output: [[70.68491636760322 -2] 68.68491636760322]
Test Case:  77 | Input/Output: [[-38.78460469143845 -89] -127.78460469143846]
Test Case:  78 | Input/Output: [[23.087239564613625 -39] -15.912760435386375]
Test Case:  79 | Input/Output: [[9.706726138790842 -78] -68.29327386120916]
Test Case:  80 | Input/Output: [[88.19951219685635 19] 107.19951219685635]
Test Case:  81 | Input/Output: [[-52.36343008938904 10] -42.36343008938904]
Test Case:  82 | Input/Output: [[77.666903354173 17] 94.666903354173]
Test Case:  83 | Input/Output: [[76.19854851761991 51] 127.19854851761991]
Test Case:  84 | Input/Output: [[41.16572658691487 -96] -54.83427341308513]
Test Case:  85 | Input/Output: [[-47.425176380753165 52] 4.5748236192468354]
Test Case:  86 | Input/Output: [[-87.66346773910499 -85] -172.663467739105]
Test Case:  87 | Input/Output: [[83.08457280133638 2] 85.08457280133638]
Test Case:  88 | Input/Output: [[-11.0032402611765 1] -10.0032402611765]
Test Case:  89 | Input/Output: [[-30.606617833677745 -77] -107.60661783367775]
Test Case:  90 | Input/Output: [[-66.09226059268369 53] -13.092260592683687]
Test Case:  91 | Input/Output: [[17.11391613973707 28] 45.11391613973707]
Test Case:  92 | Input/Output: [[92.42993956370421 -75] 17.42993956370421]
Test Case:  93 | Input/Output: [[92.65491159300737 34] 126.65491159300737]
Test Case:  94 | Input/Output: [[-22.26831836963082 72] 49.73168163036918]
Test Case:  95 | Input/Output: [[-0.173678519786165 76] 75.82632148021384]
Test Case:  96 | Input/Output: [[-31.03269339942682 47] 15.967306600573181]
Test Case:  97 | Input/Output: [[48.65908937290678 8] 56.65908937290678]
Test Case:  98 | Input/Output: [[70.15034173699149 35] 105.15034173699149]
Test Case:  99 | Input/Output: [[36.827703858028855 6] 42.827703858028855]
Test Case: 100 | Input/Output: [[17.134743403109965 -60] -42.865256596890035]
Test Case: 101 | Input/Output: [[55.877132591750154 -14] 41.877132591750154]
Test Case: 102 | Input/Output: [[-82.12287529426685 -99] -181.12287529426686]
Test Case: 103 | Input/Output: [[46.49390413046518 -25] 21.493904130465182]
Test Case: 104 | Input/Output: [[14.567624767839462 85] 99.56762476783946]
Test Case: 105 | Input/Output: [[-41.536895234330686 -40] -81.53689523433069]
Test Case: 106 | Input/Output: [[18.445387207048384 72] 90.44538720704838]
Test Case: 107 | Input/Output: [[8.747374798060264 6] 14.747374798060264]
Test Case: 108 | Input/Output: [[-26.907892531010916 2] -24.907892531010916]
Test Case: 109 | Input/Output: [[70.20510581605862 8] 78.20510581605862]
Test Case: 110 | Input/Output: [[-58.04040974938349 -87] -145.04040974938349]
Test Case: 111 | Input/Output: [[24.74397507985624 -22] 2.7439750798562415]
Test Case: 112 | Input/Output: [[20.591099161134636 39] 59.591099161134636]
Test Case: 113 | Input/Output: [[-40.73870338380756 -78] -118.73870338380756]
Test Case: 114 | Input/Output: [[-80.95831918569777 -94] -174.95831918569777]
Test Case: 115 | Input/Output: [[57.15990391815362 59] 116.15990391815362]
Test Case: 116 | Input/Output: [[-93.86254178020184 -3] -96.86254178020184]
Test Case: 117 | Input/Output: [[-18.542943005559096 63] 44.457056994440904]
Test Case: 118 | Input/Output: [[29.48755790626265 41] 70.48755790626265]
Test Case: 119 | Input/Output: [[66.52122689996054 82] 148.52122689996054]
Test Case: 120 | Input/Output: [[-62.376248326124454 71] 8.623751673875546]
Test Case: 121 | Input/Output: [[68.18121909126847 69] 137.18121909126847]
Test Case: 122 | Input/Output: [[-79.40499637228166 -18] -97.40499637228166]
Test Case: 123 | Input/Output: [[-57.122788931877786 48] -9.122788931877786]
Test Case: 124 | Input/Output: [[71.77545280982366 18] 89.77545280982366]
Test Case: 125 | Input/Output: [[64.52725621145711 87] 151.52725621145711]
Test Case: 126 | Input/Output: [[-20.747328055936947 92] 71.25267194406305]
Test Case: 127 | Input/Output: [[-44.60941119305153 18] -26.60941119305153]
Test Case: 128 | Input/Output: [[0.10753414459807686 80] 80.10753414459808]
Test Case: 129 | Input/Output: [[64.53903809494477 -23] 41.53903809494477]
Test Case: 130 | Input/Output: [[69.95362124324174 -86] -16.04637875675826]
Test Case: 131 | Input/Output: [[52.49903002290111 7] 59.49903002290111]
Test Case: 132 | Input/Output: [[39.27932745313694 32] 71.27932745313694]
Test Case: 133 | Input/Output: [[-54.01158137114721 2] -52.01158137114721]
Test Case: 134 | Input/Output: [[39.08490099477959 41] 80.08490099477959]
Test Case: 135 | Input/Output: [[33.21019663521406 -45] -11.78980336478594]
Test Case: 136 | Input/Output: [[-46.9668863106171 -85] -131.9668863106171]
Test Case: 137 | Input/Output: [[-7.026275120236619 97] 89.97372487976338]
Test Case: 138 | Input/Output: [[-90.01936812421678 89] -1.0193681242167827]
Test Case: 139 | Input/Output: [[-64.87863926977863 -62] -126.87863926977863]
Test Case: 140 | Input/Output: [[-60.538746004580624 -5] -65.53874600458062]
Test Case: 141 | Input/Output: [[30.25520485672925 39] 69.25520485672925]
Test Case: 142 | Input/Output: [[-20.183326635622194 5] -15.183326635622194]
Test Case: 143 | Input/Output: [[88.37425361789275 -5] 83.37425361789275]
Test Case: 144 | Input/Output: [[57.55063483893264 89] 146.55063483893264]
Test Case: 145 | Input/Output: [[32.42540756778703 -87] -54.57459243221297]
Test Case: 146 | Input/Output: [[4.7825919084286 -46] -41.2174080915714]
Test Case: 147 | Input/Output: [[-57.45408578237643 -53] -110.45408578237644]
Test Case: 148 | Input/Output: [[98.91364090359596 40] 138.91364090359596]
Test Case: 149 | Input/Output: [[57.96828848303747 -30] 27.96828848303747]
Test Case: 150 | Input/Output: [[80.7140499379878 -61] 19.714049937987795]
Test Case: 151 | Input/Output: [[32.4040517457519 -38] -5.5959482542481]
Test Case: 152 | Input/Output: [[7.2023816885108545 14] 21.202381688510854]
Test Case: 153 | Input/Output: [[-52.16849770166554 -50] -102.16849770166553]
Test Case: 154 | Input/Output: [[-36.78935106140773 -3] -39.78935106140773]
Test Case: 155 | Input/Output: [[-31.78225031565522 79] 47.21774968434478]
Test Case: 156 | Input/Output: [[25.467857513642443 -33] -7.532142486357557]
Test Case: 157 | Input/Output: [[96.86540187053544 48] 144.86540187053544]
Test Case: 158 | Input/Output: [[77.78548393934412 -76] 1.7854839393441182]
Test Case: 159 | Input/Output: [[-59.92044420692322 10] -49.92044420692322]
Test Case: 160 | Input/Output: [[-7.85359636649126 -2] -9.85359636649126]
Test Case: 161 | Input/Output: [[36.3399099965265 -32] 4.339909996526501]
Test Case: 162 | Input/Output: [[-94.9479331255331 58] -36.9479331255331]
Test Case: 163 | Input/Output: [[-57.22546304197833 14] -43.22546304197833]
Test Case: 164 | Input/Output: [[13.091296218378545 -8] 5.091296218378545]
Test Case: 165 | Input/Output: [[13.814150647206233 94] 107.81415064720623]
Test Case: 166 | Input/Output: [[43.50617539564544 47] 90.50617539564544]
Test Case: 167 | Input/Output: [[93.04651617167843 37] 130.04651617167843]
Test Case: 168 | Input/Output: [[98.2093113743856 34] 132.2093113743856]
Test Case: 169 | Input/Output: [[3.593977446358693 -61] -57.40602255364131]
Test Case: 170 | Input/Output: [[63.330823017200714 -12] 51.330823017200714]
Test Case: 171 | Input/Output: [[-57.37401655001415 -52] -109.37401655001415]
Test Case: 172 | Input/Output: [[39.11303818821315 35] 74.11303818821315]
Test Case: 173 | Input/Output: [[-96.7176479301106 -87] -183.71764793011062]
Test Case: 174 | Input/Output: [[-84.34655116177372 -89] -173.34655116177373]
Test Case: 175 | Input/Output: [[-48.902867573151276 -3] -51.902867573151276]
Test Case: 176 | Input/Output: [[-49.674086259588755 -28] -77.67408625958876]
Test Case: 177 | Input/Output: [[-63.69519138750721 -74] -137.6951913875072]
Test Case: 178 | Input/Output: [[-58.78040933796247 99] 40.21959066203753]
Test Case: 179 | Input/Output: [[88.69398550735104 52] 140.69398550735104]
Test Case: 180 | Input/Output: [[19.329432751748726 48] 67.32943275174873]
Test Case: 181 | Input/Output: [[-13.661142338269556 -98] -111.66114233826956]
Test Case: 182 | Input/Output: [[68.425483385516 40] 108.425483385516]
Test Case: 183 | Input/Output: [[39.35735204073899 -76] -36.64264795926101]
Test Case: 184 | Input/Output: [[50.422267706650416 58] 108.42226770665042]
Test Case: 185 | Input/Output: [[-91.30660341713808 -66] -157.3066034171381]
Test Case: 186 | Input/Output: [[11.311076102268444 -39] -27.688923897731556]
Test Case: 187 | Input/Output: [[-87.62137200653812 55] -32.621372006538124]
Test Case: 188 | Input/Output: [[-60.135432033252535 8] -52.135432033252535]
Test Case: 189 | Input/Output: [[47.210538735565336 53] 100.21053873556534]
Test Case: 190 | Input/Output: [[66.68828355355231 -97] -30.31171644644769]
Test Case: 191 | Input/Output: [[-32.250405222144224 -23] -55.250405222144224]
Test Case: 192 | Input/Output: [[-2.9983871049474686 -70] -72.99838710494747]
Test Case: 193 | Input/Output: [[95.04513773188901 -98] -2.954862268110986]
Test Case: 194 | Input/Output: [[-29.838651441137515 -51] -80.83865144113751]
Test Case: 195 | Input/Output: [[71.55978775023453 47] 118.55978775023453]
Test Case: 196 | Input/Output: [[-25.990356731798585 -56] -81.99035673179858]
Test Case: 197 | Input/Output: [[45.89109958022004 68] 113.89109958022004]
Test Case: 198 | Input/Output: [[34.97588298179582 -11] 23.97588298179582]
Test Case: 199 | Input/Output: [[86.35353091153033 42] 128.35353091153033]
Test Case: 200 | Input/Output: [[-56.3655914407762 -87] -143.3655914407762]
Test Case: 201 | Input/Output: [[-7.729867821685346 7] -0.729867821685346]
Test Case: 202 | Input/Output: [[-88.51952521297986 39] -49.51952521297986]
Test Case: 203 | Input/Output: [[6.213328373133081 15] 21.21332837313308]
Test Case: 204 | Input/Output: [[-69.33893422941478 95] 25.661065770585225]
Test Case: 205 | Input/Output: [[-44.19711545060308 -43] -87.19711545060308]
Test Case: 206 | Input/Output: [[-12.359292549905021 28] 15.640707450094979]
Test Case: 207 | Input/Output: [[43.91954916730381 -84] -40.08045083269619]
Test Case: 208 | Input/Output: [[-55.064130367743935 13] -42.064130367743935]
Test Case: 209 | Input/Output: [[-70.57802197379672 -75] -145.57802197379672]
Test Case: 210 | Input/Output: [[45.54745470791474 20] 65.54745470791474]
Test Case: 211 | Input/Output: [[-93.76622153275316 -97] -190.76622153275315]
Test Case: 212 | Input/Output: [[58.84793783886866 83] 141.84793783886866]
Test Case: 213 | Input/Output: [[31.123127751156346 15] 46.123127751156346]
Test Case: 214 | Input/Output: [[-97.12899377280459 -52] -149.1289937728046]
Test Case: 215 | Input/Output: [[-78.71115000812603 58] -20.711150008126026]
Test Case: 216 | Input/Output: [[-35.2387695951808 -15] -50.2387695951808]
Test Case: 217 | Input/Output: [[5.717668729983274 41] 46.717668729983274]
Test Case: 218 | Input/Output: [[66.24029055356976 98] 164.24029055356976]
Test Case: 219 | Input/Output: [[-86.41511168749784 -30] -116.41511168749784]
Test Case: 220 | Input/Output: [[-24.362741640292214 -71] -95.36274164029221]
Test Case: 221 | Input/Output: [[69.63448737836794 -33] 36.634487378367936]
Test Case: 222 | Input/Output: [[-51.69232585348429 -1] -52.69232585348429]
Test Case: 223 | Input/Output: [[52.73143837040749 11] 63.73143837040749]
Test Case: 224 | Input/Output: [[-34.30181136859234 33] -1.3018113685923396]
Test Case: 225 | Input/Output: [[50.172830350201735 17] 67.17283035020174]
Test Case: 226 | Input/Output: [[-79.3953343589048 -23] -102.3953343589048]
Test Case: 227 | Input/Output: [[57.179536657583185 69] 126.17953665758318]
Test Case: 228 | Input/Output: [[-59.48346219012501 12] -47.48346219012501]
Test Case: 229 | Input/Output: [[-16.725657074167245 -82] -98.72565707416724]
Test Case: 230 | Input/Output: [[-80.36755871786075 81] 0.6324412821392542]
Test Case: 231 | Input/Output: [[54.5033407647918 -98] -43.4966592352082]
Test Case: 232 | Input/Output: [[34.14633708085012 6] 40.14633708085012]
Test Case: 233 | Input/Output: [[-9.50372787911573 -9] -18.50372787911573]
Test Case: 234 | Input/Output: [[-35.7847399521259 42] 6.2152600478740965]
Test Case: 235 | Input/Output: [[70.70280349652484 -71] -0.29719650347516335]
Test Case: 236 | Input/Output: [[86.2705350834546 -88] -1.7294649165453961]
Test Case: 237 | Input/Output: [[-32.753098369189274 13] -19.753098369189274]
Test Case: 238 | Input/Output: [[-57.297411280426445 -13] -70.29741128042645]
Test Case: 239 | Input/Output: [[81.23592064613942 42] 123.23592064613942]
Test Case: 240 | Input/Output: [[73.14536723536926 -6] 67.14536723536926]
Test Case: 241 | Input/Output: [[-72.76046166514939 12] -60.76046166514939]
Test Case: 242 | Input/Output: [[-75.73296170498136 -11] -86.73296170498136]
Test Case: 243 | Input/Output: [[-56.714632667804565 -53] -109.71463266780457]
Test Case: 244 | Input/Output: [[37.66367310182514 18] 55.66367310182514]
Test Case: 245 | Input/Output: [[-48.070775571592335 69] 20.929224428407665]
Test Case: 246 | Input/Output: [[-51.67887055784135 -40] -91.67887055784135]
Test Case: 247 | Input/Output: [[66.27330204170937 46] 112.27330204170937]
Test Case: 248 | Input/Output: [[7.473635064598639 -6] 1.4736350645986391]
Test Case: 249 | Input/Output: [[-85.49630840853027 -44] -129.49630840853027]
Test Case: 250 | Input/Output: [[-11.16575102216457 -31] -42.16575102216457]
Test Case: 251 | Input/Output: [[-67.75100489016046 -17] -84.75100489016046]
Test Case: 252 | Input/Output: [[80.96652618785077 -95] -14.033473812149225]
Test Case: 253 | Input/Output: [[-60.6743464768408 -18] -78.67434647684081]
Test Case: 254 | Input/Output: [[7.01306017188945 37] 44.01306017188945]
Test Case: 255 | Input/Output: [[-79.29352615661486 5] -74.29352615661486]
Test Case: 256 | Input/Output: [[19.678932012575245 -86] -66.32106798742475]
Test Case: 257 | Input/Output: [[-84.04331159360059 9] -75.04331159360059]
Test Case: 258 | Input/Output: [[-17.841327672477263 75] 57.15867232752274]
Test Case: 259 | Input/Output: [[0.8033422090146161 -65] -64.19665779098538]
Test Case: 260 | Input/Output: [[69.36598747663635 -91] -21.63401252336365]
Test Case: 261 | Input/Output: [[-2.4756012835029253 -77] -79.47560128350293]
Test Case: 262 | Input/Output: [[-55.26494233779178 -86] -141.26494233779178]
Test Case: 263 | Input/Output: [[-74.17387877345135 57] -17.17387877345135]
Test Case: 264 | Input/Output: [[-88.383937978652 67] -21.383937978652]
Test Case: 265 | Input/Output: [[-80.39081328103781 88] 7.609186718962192]
Test Case: 266 | Input/Output: [[45.02795197426323 56] 101.02795197426323]
Test Case: 267 | Input/Output: [[-93.51825311129613 -22] -115.51825311129613]
Test Case: 268 | Input/Output: [[0.7398496910375769 65] 65.73984969103758]
Test Case: 269 | Input/Output: [[66.95213779649424 -61] 5.952137796494242]
Test Case: 270 | Input/Output: [[35.4490962892026 51] 86.4490962892026]
Test Case: 271 | Input/Output: [[94.2302508413475 9] 103.2302508413475]
Test Case: 272 | Input/Output: [[-88.89445380186918 -66] -154.8944538018692]
Test Case: 273 | Input/Output: [[-49.0196648405822 49] -0.019664840582201748]
Test Case: 274 | Input/Output: [[-90.58131707210997 10] -80.58131707210997]
Test Case: 275 | Input/Output: [[-47.2577958220215 96] 48.7422041779785]
Test Case: 276 | Input/Output: [[-7.8151949447818225 11] 3.1848050552181775]
Test Case: 277 | Input/Output: [[51.19149533834994 51] 102.19149533834994]
Test Case: 278 | Input/Output: [[-43.91182890767884 15] -28.91182890767884]
Test Case: 279 | Input/Output: [[29.503640562604545 -40] -10.496359437395455]
Test Case: 280 | Input/Output: [[28.62147534909215 13] 41.62147534909215]
Test Case: 281 | Input/Output: [[-45.925669320417015 97] 51.074330679582985]
Test Case: 282 | Input/Output: [[50.53473965620324 11] 61.53473965620324]
Test Case: 283 | Input/Output: [[-23.991217158242975 61] 37.008782841757025]
Test Case: 284 | Input/Output: [[-39.29182129122641 -84] -123.29182129122641]
Test Case: 285 | Input/Output: [[-91.13875711952038 17] -74.13875711952038]
Test Case: 286 | Input/Output: [[1.9656228047780502 -47] -45.03437719522195]
Test Case: 287 | Input/Output: [[-64.17417089970806 69] 4.825829100291941]
Test Case: 288 | Input/Output: [[-65.0080207144639 49] -16.008020714463896]
Test Case: 289 | Input/Output: [[42.72834198127674 -78] -35.27165801872326]
Test Case: 290 | Input/Output: [[82.40131326218972 87] 169.40131326218972]
Test Case: 291 | Input/Output: [[67.4098419168568 -63] 4.409841916856806]
Test Case: 292 | Input/Output: [[-55.57907194834721 76] 20.420928051652787]
Test Case: 293 | Input/Output: [[-46.65546197410115 -92] -138.65546197410114]
Test Case: 294 | Input/Output: [[86.01988874762162 -42] 44.01988874762162]
Test Case: 295 | Input/Output: [[54.36837672848094 62] 116.36837672848094]
Test Case: 296 | Input/Output: [[-4.851337136467876 59] 54.148662863532124]
Test Case: 297 | Input/Output: [[29.78636537114994 -38] -8.213634628850059]
Test Case: 298 | Input/Output: [[13.804351321923548 -88] -74.19564867807645]
Test Case: 299 | Input/Output: [[42.6564366389876 93] 135.6564366389876]
Test Case: 300 | Input/Output: [[-37.88052120344514 29] -8.880521203445142]
Test Case: 301 | Input/Output: [[67.08285051964242 4] 71.08285051964242]
Test Case: 302 | Input/Output: [[-18.99264520195065 -56] -74.99264520195065]
Test Case: 303 | Input/Output: [[-20.286035486604774 16] -4.286035486604774]
Test Case: 304 | Input/Output: [[-67.89307273069596 -84] -151.89307273069596]
Test Case: 305 | Input/Output: [[20.169197696659438 10] 30.169197696659438]
Test Case: 306 | Input/Output: [[95.10670934762953 43] 138.10670934762953]
Test Case: 307 | Input/Output: [[29.299016537514802 -40] -10.700983462485198]
Test Case: 308 | Input/Output: [[59.008624580049656 -61] -1.9913754199503444]
Test Case: 309 | Input/Output: [[-51.38136772645139 -82] -133.3813677264514]
Test Case: 310 | Input/Output: [[42.487097316580105 27] 69.4870973165801]
Test Case: 311 | Input/Output: [[50.447847093433495 -26] 24.447847093433495]
Test Case: 312 | Input/Output: [[-56.23870720630531 0] -56.23870720630531]
Test Case: 313 | Input/Output: [[-21.02115962873725 61] 39.97884037126275]
Test Case: 314 | Input/Output: [[44.852613532131954 1] 45.852613532131954]
Test Case: 315 | Input/Output: [[78.87191418372242 47] 125.87191418372242]
Test Case: 316 | Input/Output: [[-76.61967887119033 -14] -90.61967887119033]
Test Case: 317 | Input/Output: [[47.99148540351126 30] 77.99148540351126]
Test Case: 318 | Input/Output: [[-26.982082096426367 76] 49.01791790357363]
Test Case: 319 | Input/Output: [[97.67859344654775 -56] 41.67859344654775]
Test Case: 320 | Input/Output: [[75.02627041452408 80] 155.02627041452408]
Test Case: 321 | Input/Output: [[-35.084987152790134 -96] -131.08498715279012]
Test Case: 322 | Input/Output: [[-65.41638830614968 82] 16.583611693850315]
Test Case: 323 | Input/Output: [[-5.335414245840212 -88] -93.33541424584021]
Test Case: 324 | Input/Output: [[-79.60904859519277 -5] -84.60904859519277]
Test Case: 325 | Input/Output: [[-26.429668913059402 67] 40.5703310869406]
Test Case: 326 | Input/Output: [[-46.21302433076777 0] -46.21302433076777]
Test Case: 327 | Input/Output: [[34.320404452112854 99] 133.32040445211285]
Test Case: 328 | Input/Output: [[45.22874140654312 -25] 20.228741406543122]
Test Case: 329 | Input/Output: [[-93.34461500587692 -61] -154.3446150058769]
Test Case: 330 | Input/Output: [[-70.00120960082725 99] 28.998790399172748]
Test Case: 331 | Input/Output: [[12.1385870191163 73] 85.1385870191163]
Test Case: 332 | Input/Output: [[24.856788155482818 -81] -56.14321184451718]
Test Case: 333 | Input/Output: [[68.1852620569131 -7] 61.1852620569131]
Test Case: 334 | Input/Output: [[0.8088141352547353 -11] -10.191185864745265]
Test Case: 335 | Input/Output: [[42.60355301007252 -83] -40.39644698992748]
Test Case: 336 | Input/Output: [[84.92752263018048 17] 101.92752263018048]
Test Case: 337 | Input/Output: [[57.25118973155705 23] 80.25118973155705]
Test Case: 338 | Input/Output: [[-12.302108109205605 -95] -107.3021081092056]
Test Case: 339 | Input/Output: [[59.07255480741955 -87] -27.92744519258045]
Test Case: 340 | Input/Output: [[17.385735471406022 10] 27.385735471406022]
Test Case: 341 | Input/Output: [[55.142061869919814 13] 68.14206186991981]
Test Case: 342 | Input/Output: [[37.092325730087396 3] 40.092325730087396]
Test Case: 343 | Input/Output: [[9.813644225373167 -45] -35.18635577462683]
Test Case: 344 | Input/Output: [[53.85252337157988 83] 136.85252337157988]
Test Case: 345 | Input/Output: [[-15.522819664437534 -30] -45.522819664437534]
Test Case: 346 | Input/Output: [[-42.776726912792576 -29] -71.77672691279258]
Test Case: 347 | Input/Output: [[-92.58977090573855 -58] -150.58977090573853]
Test Case: 348 | Input/Output: [[59.94385455230304 10] 69.94385455230304]
Test Case: 349 | Input/Output: [[82.29153631414681 86] 168.2915363141468]
Test Case: 350 | Input/Output: [[76.6228061332325 82] 158.6228061332325]
Test Case: 351 | Input/Output: [[69.00472620489438 15] 84.00472620489438]
Test Case: 352 | Input/Output: [[92.8937583608176 7] 99.8937583608176]
Test Case: 353 | Input/Output: [[-14.351002859062675 -29] -43.351002859062675]
Test Case: 354 | Input/Output: [[4.680095269562429 42] 46.68009526956243]
Test Case: 355 | Input/Output: [[-51.95994592283593 9] -42.95994592283593]
Test Case: 356 | Input/Output: [[-60.87242850502677 -82] -142.87242850502676]
Test Case: 357 | Input/Output: [[-70.87049513926694 75] 4.129504860733064]
Test Case: 358 | Input/Output: [[-91.17237863904913 93] 1.8276213609508716]
Test Case: 359 | Input/Output: [[12.21448963299052 44] 56.21448963299052]
Test Case: 360 | Input/Output: [[11.107966462922775 54] 65.10796646292278]
Test Case: 361 | Input/Output: [[91.3354121318281 -3] 88.3354121318281]
Test Case: 362 | Input/Output: [[23.728331739207434 67] 90.72833173920743]
Test Case: 363 | Input/Output: [[-35.078441909152815 -75] -110.07844190915282]
Test Case: 364 | Input/Output: [[-27.201147599933037 75] 47.79885240006696]
Test Case: 365 | Input/Output: [[2.6685392139925312 -37] -34.33146078600747]
Test Case: 366 | Input/Output: [[-10.863086625277035 -31] -41.863086625277035]
Test Case: 367 | Input/Output: [[75.9627572613019 48] 123.9627572613019]
Test Case: 368 | Input/Output: [[80.22930366011073 -54] 26.22930366011073]
Test Case: 369 | Input/Output: [[-54.39286978511537 7] -47.39286978511537]
Test Case: 370 | Input/Output: [[-76.4292167442368 24] -52.4292167442368]
Test Case: 371 | Input/Output: [[58.27489347846739 -36] 22.27489347846739]
Test Case: 372 | Input/Output: [[21.014447397027453 98] 119.01444739702745]
Test Case: 373 | Input/Output: [[54.597053827500645 31] 85.59705382750064]
Test Case: 374 | Input/Output: [[-30.635773891588002 32] 1.364226108411998]
Test Case: 375 | Input/Output: [[97.69345181882224 6] 103.69345181882224]
Test Case: 376 | Input/Output: [[34.06901552548024 23] 57.06901552548024]
Test Case: 377 | Input/Output: [[-72.37895832680564 41] -31.378958326805645]
Test Case: 378 | Input/Output: [[2.5686466940535837 -9] -6.431353305946416]
Test Case: 379 | Input/Output: [[-95.746446693905 -36] -131.746446693905]
Test Case: 380 | Input/Output: [[60.37941081799724 26] 86.37941081799724]
Test Case: 381 | Input/Output: [[8.40146100570631 -21] -12.59853899429369]
Test Case: 382 | Input/Output: [[52.82489917869964 -14] 38.82489917869964]
Test Case: 383 | Input/Output: [[50.5055728950268 4] 54.5055728950268]
Test Case: 384 | Input/Output: [[-75.33272467090946 -9] -84.33272467090946]
Test Case: 385 | Input/Output: [[-44.16016045629569 -31] -75.1601604562957]
Test Case: 386 | Input/Output: [[84.1717026306905 90] 174.1717026306905]
Test Case: 387 | Input/Output: [[49.91129576479602 -4] 45.91129576479602]
Test Case: 388 | Input/Output: [[36.9258033276146 -58] -21.074196672385398]
Test Case: 389 | Input/Output: [[-1.5656163329688297 13] 11.43438366703117]
Test Case: 390 | Input/Output: [[-74.8485648504035 52] -22.848564850403505]
Test Case: 391 | Input/Output: [[25.77855503232678 -35] -9.221444967673222]
Test Case: 392 | Input/Output: [[87.9323059182143 36] 123.9323059182143]
Test Case: 393 | Input/Output: [[29.375246543953153 18] 47.37524654395315]
Test Case: 394 | Input/Output: [[-2.7206671942227985 57] 54.2793328057772]
Test Case: 395 | Input/Output: [[27.33404395212382 -9] 18.33404395212382]
Test Case: 396 | Input/Output: [[0.13001391611415158 -81] -80.86998608388585]
Test Case: 397 | Input/Output: [[-38.34361946631055 14] -24.34361946631055]
Test Case: 398 | Input/Output: [[82.96604439720696 -26] 56.96604439720696]
Test Case: 399 | Input/Output: [[34.634480825055164 -25] 9.634480825055164]
Test Case: 400 | Input/Output: [[44.28539196092268 -1] 43.28539196092268]
Test Case: 401 | Input/Output: [[-6.412762995762591 52] 45.58723700423741]
Test Case: 402 | Input/Output: [[-72.20174946440665 -58] -130.20174946440665]
Test Case: 403 | Input/Output: [[45.74403933976487 62] 107.74403933976487]
Test Case: 404 | Input/Output: [[-28.332818593486138 65] 36.66718140651386]
Test Case: 405 | Input/Output: [[-30.669654492134214 2] -28.669654492134214]
Test Case: 406 | Input/Output: [[-41.01068517974409 -54] -95.01068517974409]
Test Case: 407 | Input/Output: [[19.97402388164305 11] 30.97402388164305]
Test Case: 408 | Input/Output: [[64.68145833945684 58] 122.68145833945684]
Test Case: 409 | Input/Output: [[93.8451699036701 -30] 63.8451699036701]
Test Case: 410 | Input/Output: [[16.650879225630575 89] 105.65087922563058]
Test Case: 411 | Input/Output: [[-28.93906277696543 24] -4.939062776965429]
Test Case: 412 | Input/Output: [[59.77654433329727 -21] 38.77654433329727]
Test Case: 413 | Input/Output: [[-4.601293814743741 -84] -88.60129381474374]
Test Case: 414 | Input/Output: [[21.416639447311866 -35] -13.583360552688134]
Test Case: 415 | Input/Output: [[-63.986302343155856 -89] -152.98630234315584]
Test Case: 416 | Input/Output: [[-97.00543691280717 8] -89.00543691280717]
Test Case: 417 | Input/Output: [[-46.87528155753415 -97] -143.87528155753415]
Test Case: 418 | Input/Output: [[-41.09255525148077 -2] -43.09255525148077]
Test Case: 419 | Input/Output: [[-94.45876332935521 27] -67.45876332935521]
Test Case: 420 | Input/Output: [[-1.9136759283553175 -48] -49.91367592835532]
Test Case: 421 | Input/Output: [[23.298883812938456 2] 25.298883812938456]
Test Case: 422 | Input/Output: [[36.103866721455404 36] 72.1038667214554]
Test Case: 423 | Input/Output: [[54.68961258245372 -26] 28.68961258245372]
Test Case: 424 | Input/Output: [[48.846760844260984 -69] -20.153239155739016]
Test Case: 425 | Input/Output: [[-39.66628536461529 -48] -87.66628536461529]
Test Case: 426 | Input/Output: [[36.13452062772643 28] 64.13452062772643]
Test Case: 427 | Input/Output: [[-76.24636817366535 -98] -174.24636817366536]
Test Case: 428 | Input/Output: [[37.479336841730316 -21] 16.479336841730316]
Test Case: 429 | Input/Output: [[0.20200182512770937 -73] -72.79799817487229]
Test Case: 430 | Input/Output: [[-45.149809813580944 83] 37.850190186419056]
Test Case: 431 | Input/Output: [[40.79716928163373 -48] -7.202830718366272]
Test Case: 432 | Input/Output: [[-1.7689870839581232 16] 14.231012916041877]
Test Case: 433 | Input/Output: [[-29.918948774678327 -82] -111.91894877467833]
Test Case: 434 | Input/Output: [[-92.04983354414176 10] -82.04983354414176]
Test Case: 435 | Input/Output: [[90.85887914091239 61] 151.8588791409124]
Test Case: 436 | Input/Output: [[-11.461818194971428 72] 60.53818180502857]
Test Case: 437 | Input/Output: [[18.721001533249478 -3] 15.721001533249478]
Test Case: 438 | Input/Output: [[-7.680163997252649 -5] -12.680163997252649]
Test Case: 439 | Input/Output: [[-54.79712709050477 -44] -98.79712709050477]
Test Case: 440 | Input/Output: [[-18.996972033521047 -82] -100.99697203352105]
Test Case: 441 | Input/Output: [[26.971289364296155 88] 114.97128936429615]
Test Case: 442 | Input/Output: [[-29.508559069636945 -4] -33.508559069636945]
Test Case: 443 | Input/Output: [[37.36224606800786 -80] -42.63775393199214]
Test Case: 444 | Input/Output: [[31.841501100642432 67] 98.84150110064243]
Test Case: 445 | Input/Output: [[66.94926645551186 -87] -20.05073354448814]
Test Case: 446 | Input/Output: [[89.9243893833198 84] 173.9243893833198]
Test Case: 447 | Input/Output: [[97.77850661913664 -24] 73.77850661913664]
Test Case: 448 | Input/Output: [[48.62404346861632 25] 73.62404346861632]
Test Case: 449 | Input/Output: [[96.62723124807488 -100] -3.372768751925122]
Test Case: 450 | Input/Output: [[-31.22908081752705 92] 60.77091918247295]
Test Case: 451 | Input/Output: [[-21.144888028905598 -18] -39.1448880289056]
Test Case: 452 | Input/Output: [[-23.822267620217218 -45] -68.82226762021722]
Test Case: 453 | Input/Output: [[-87.92583130617118 16] -71.92583130617118]
Test Case: 454 | Input/Output: [[-61.18330703990809 14] -47.18330703990809]
Test Case: 455 | Input/Output: [[28.619082676586714 9] 37.619082676586714]
Test Case: 456 | Input/Output: [[-10.241850714422654 73] 62.758149285577346]
Test Case: 457 | Input/Output: [[-84.07401255368765 19] -65.07401255368765]
Test Case: 458 | Input/Output: [[26.70497750015089 -85] -58.29502249984911]
Test Case: 459 | Input/Output: [[41.92841291175725 78] 119.92841291175725]
Test Case: 460 | Input/Output: [[62.912609016182785 26] 88.91260901618278]
Test Case: 461 | Input/Output: [[32.37126004696901 90] 122.37126004696901]
Test Case: 462 | Input/Output: [[98.45932882025576 -36] 62.45932882025576]
Test Case: 463 | Input/Output: [[-37.93680261137315 -66] -103.93680261137315]
Test Case: 464 | Input/Output: [[-32.45030760990679 -7] -39.45030760990679]
Test Case: 465 | Input/Output: [[-35.62756565212956 53] 17.37243434787044]
Test Case: 466 | Input/Output: [[-42.45021110650684 90] 47.54978889349316]
Test Case: 467 | Input/Output: [[-66.34620767806425 -91] -157.34620767806425]
Test Case: 468 | Input/Output: [[-15.674776881740087 -35] -50.67477688174009]
Test Case: 469 | Input/Output: [[58.885375372035895 -64] -5.114624627964105]
Test Case: 470 | Input/Output: [[-95.63379438620146 -21] -116.63379438620146]
Test Case: 471 | Input/Output: [[31.009382867534043 50] 81.00938286753404]
Test Case: 472 | Input/Output: [[81.52772433409157 14] 95.52772433409157]
Test Case: 473 | Input/Output: [[67.49438921418505 -55] 12.494389214185048]
Test Case: 474 | Input/Output: [[31.580424117646686 -4] 27.580424117646686]
Test Case: 475 | Input/Output: [[-16.786535083047653 -84] -100.78653508304765]
Test Case: 476 | Input/Output: [[57.770224041946875 3] 60.770224041946875]
Test Case: 477 | Input/Output: [[-60.13038805452926 86] 25.869611945470737]
Test Case: 478 | Input/Output: [[17.0621488277025 62] 79.0621488277025]
Test Case: 479 | Input/Output: [[-92.94735860646144 -8] -100.94735860646144]
Test Case: 480 | Input/Output: [[28.774991819792774 62] 90.77499181979277]
Test Case: 481 | Input/Output: [[69.18457045809257 67] 136.18457045809257]
Test Case: 482 | Input/Output: [[66.45862634518568 -48] 18.458626345185678]
Test Case: 483 | Input/Output: [[82.9731357017371 -45] 37.97313570173711]
Test Case: 484 | Input/Output: [[8.080434693679294 53] 61.080434693679294]
Test Case: 485 | Input/Output: [[45.016609070764076 59] 104.01660907076408]
Test Case: 486 | Input/Output: [[73.53168491601224 -89] -15.468315083987761]
Test Case: 487 | Input/Output: [[-61.386675066250774 -32] -93.38667506625077]
Test Case: 488 | Input/Output: [[40.457410430063874 -98] -57.542589569936126]
Test Case: 489 | Input/Output: [[66.18307672760102 -40] 26.18307672760102]
Test Case: 490 | Input/Output: [[-28.51005874598455 -66] -94.51005874598455]
Test Case: 491 | Input/Output: [[71.97432802821302 39] 110.97432802821302]
Test Case: 492 | Input/Output: [[32.95271689345242 27] 59.95271689345242]
Test Case: 493 | Input/Output: [[-29.018679474056924 -72] -101.01867947405692]
Test Case: 494 | Input/Output: [[51.981492555888536 -24] 27.981492555888536]
Test Case: 495 | Input/Output: [[28.052341070594167 22] 50.05234107059417]
Test Case: 496 | Input/Output: [[-58.40845693752059 68] 9.59154306247941]
Test Case: 497 | Input/Output: [[79.88559199115929 -85] -5.114408008840712]
Test Case: 498 | Input/Output: [[16.33425191348661 -3] 13.33425191348661]
Test Case: 499 | Input/Output: [[-25.840340665511306 -28] -53.840340665511306]
Test Case: 500 | Input/Output: [[-82.67943392659623 27] -55.67943392659623]
Test Case: 501 | Input/Output: [[99.66641160915083 92] 191.66641160915083]
Test Case: 502 | Input/Output: [[58.764704853976724 81] 139.76470485397672]
Test Case: 503 | Input/Output: [[-61.078960480453205 -29] -90.0789604804532]
Test Case: 504 | Input/Output: [[-25.56493099939985 50] 24.43506900060015]
Test Case: 505 | Input/Output: [[-34.48116121859009 9] -25.48116121859009]
Test Case: 506 | Input/Output: [[-91.1777863219964 -49] -140.1777863219964]
Test Case: 507 | Input/Output: [[84.57352424812791 24] 108.57352424812791]
Test Case: 508 | Input/Output: [[-35.20550023631853 60] 24.794499763681472]
Test Case: 509 | Input/Output: [[-89.62990356758971 -19] -108.62990356758971]
Test Case: 510 | Input/Output: [[-10.54132701454084 -11] -21.54132701454084]
Test Case: 511 | Input/Output: [[-14.103789215512634 -69] -83.10378921551263]
Test Case: 512 | Input/Output: [[-98.98281206864175 32] -66.98281206864175]
Test Case: 513 | Input/Output: [[91.04829261132318 -96] -4.951707388676823]
Test Case: 514 | Input/Output: [[71.80639817931078 65] 136.80639817931078]
Test Case: 515 | Input/Output: [[-94.07953321260419 -9] -103.07953321260419]
Test Case: 516 | Input/Output: [[-56.01128697356703 50] -6.011286973567032]
Test Case: 517 | Input/Output: [[-41.78837573000671 -23] -64.78837573000672]
Test Case: 518 | Input/Output: [[-50.366551390630555 -1] -51.366551390630555]
Test Case: 519 | Input/Output: [[-99.61936183467795 -78] -177.61936183467793]
Test Case: 520 | Input/Output: [[70.02019486883225 32] 102.02019486883225]
Test Case: 521 | Input/Output: [[-52.37557105153399 -13] -65.375571051534]
Test Case: 522 | Input/Output: [[89.04600831440925 -67] 22.04600831440925]
Test Case: 523 | Input/Output: [[-65.49546078028739 38] -27.495460780287388]
Test Case: 524 | Input/Output: [[-19.68985956438712 26] 6.31014043561288]
Test Case: 525 | Input/Output: [[-96.31268965607138 -51] -147.31268965607137]
Test Case: 526 | Input/Output: [[-8.32509811538371 53] 44.67490188461629]
Test Case: 527 | Input/Output: [[-52.02885341354182 -3] -55.02885341354182]
Test Case: 528 | Input/Output: [[87.50017422074416 96] 183.50017422074416]
Test Case: 529 | Input/Output: [[-16.913167800971138 -34] -50.91316780097114]
Test Case: 530 | Input/Output: [[-76.2934942905251 15] -61.2934942905251]
Test Case: 531 | Input/Output: [[-24.97035595498707 -53] -77.97035595498707]
Test Case: 532 | Input/Output: [[-92.90381449695346 8] -84.90381449695346]
Test Case: 533 | Input/Output: [[26.04883262006865 -21] 5.0488326200686515]
Test Case: 534 | Input/Output: [[-16.859230862426642 55] 38.14076913757336]
Test Case: 535 | Input/Output: [[-15.042367482917768 85] 69.95763251708223]
Test Case: 536 | Input/Output: [[83.9489360208652 -78] 5.9489360208652045]
Test Case: 537 | Input/Output: [[46.788518142821545 -44] 2.7885181428215446]
Test Case: 538 | Input/Output: [[-17.4313132142115 -26] -43.4313132142115]
Test Case: 539 | Input/Output: [[-29.84143421866999 92] 62.15856578133001]
Test Case: 540 | Input/Output: [[-98.38113940102605 -28] -126.38113940102605]
Test Case: 541 | Input/Output: [[-77.87846012413688 54] -23.87846012413688]
Test Case: 542 | Input/Output: [[40.80797725935548 -28] 12.807977259355482]
Test Case: 543 | Input/Output: [[24.216897818359627 86] 110.21689781835963]
Test Case: 544 | Input/Output: [[22.697128391643147 -92] -69.30287160835685]
Test Case: 545 | Input/Output: [[-13.813199277744715 -46] -59.813199277744715]
Test Case: 546 | Input/Output: [[50.259408926127094 -1] 49.259408926127094]
Test Case: 547 | Input/Output: [[-69.65738310836495 22] -47.657383108364954]
Test Case: 548 | Input/Output: [[-20.030859592318535 0] -20.030859592318535]
Test Case: 549 | Input/Output: [[-35.233222754203 -68] -103.233222754203]
Test Case: 550 | Input/Output: [[83.90311284002098 44] 127.90311284002098]
Test Case: 551 | Input/Output: [[14.419533473943005 -69] -54.580466526056995]
Test Case: 552 | Input/Output: [[-29.99946162563849 -33] -62.99946162563849]
Test Case: 553 | Input/Output: [[34.30096075346731 20] 54.30096075346731]
Test Case: 554 | Input/Output: [[89.81063845208277 72] 161.81063845208277]
Test Case: 555 | Input/Output: [[52.9356452681684 47] 99.9356452681684]
Test Case: 556 | Input/Output: [[6.32203493596964 -100] -93.67796506403036]
Test Case: 557 | Input/Output: [[-35.9803625988456 -99] -134.9803625988456]
Test Case: 558 | Input/Output: [[-99.90309184886344 4] -95.90309184886344]
Test Case: 559 | Input/Output: [[-25.782113960578386 -23] -48.782113960578386]
Test Case: 560 | Input/Output: [[-58.31851030476367 60] 1.6814896952363299]
Test Case: 561 | Input/Output: [[-72.80721039127103 25] -47.80721039127103]
Test Case: 562 | Input/Output: [[35.6641582826046 83] 118.6641582826046]
Test Case: 563 | Input/Output: [[39.7423996861902 56] 95.7423996861902]
Test Case: 564 | Input/Output: [[-42.09025940064963 -92] -134.09025940064964]
Test Case: 565 | Input/Output: [[58.97108502680561 13] 71.97108502680561]
Test Case: 566 | Input/Output: [[-34.092490413891724 -37] -71.09249041389172]
Test Case: 567 | Input/Output: [[95.12803888839164 81] 176.12803888839164]
Test Case: 568 | Input/Output: [[-93.55773423331866 -12] -105.55773423331866]
Test Case: 569 | Input/Output: [[-76.04835381101461 -92] -168.0483538110146]
Test Case: 570 | Input/Output: [[-44.179745297770445 -2] -46.179745297770445]
Test Case: 571 | Input/Output: [[-64.66055344490789 -53] -117.66055344490789]
Test Case: 572 | Input/Output: [[2.8306928979623365 -56] -53.16930710203766]
Test Case: 573 | Input/Output: [[-25.63150696073218 -39] -64.63150696073218]
Test Case: 574 | Input/Output: [[-54.73990581840802 43] -11.739905818408019]
Test Case: 575 | Input/Output: [[-34.223646161892646 -61] -95.22364616189265]
Test Case: 576 | Input/Output: [[54.23679362734302 -7] 47.23679362734302]
Test Case: 577 | Input/Output: [[-41.7493652150204 -79] -120.74936521502039]
Test Case: 578 | Input/Output: [[89.227275653464 -18] 71.227275653464]
Test Case: 579 | Input/Output: [[7.314466671744938 -62] -54.68553332825506]
Test Case: 580 | Input/Output: [[28.68630376031959 23] 51.68630376031959]
Test Case: 581 | Input/Output: [[-61.41855180052822 89] 27.58144819947178]
Test Case: 582 | Input/Output: [[-26.811709231264032 -34] -60.81170923126403]
Test Case: 583 | Input/Output: [[63.79407453122354 -24] 39.79407453122354]
Test Case: 584 | Input/Output: [[-89.63620504894183 -70] -159.63620504894183]
Test Case: 585 | Input/Output: [[20.084191202068354 -91] -70.91580879793165]
Test Case: 586 | Input/Output: [[-55.879768458958104 -46] -101.8797684589581]
Test Case: 587 | Input/Output: [[74.26979638139719 -21] 53.269796381397185]
Test Case: 588 | Input/Output: [[-70.02740592291303 69] -1.027405922913033]
Test Case: 589 | Input/Output: [[20.38035657661605 31] 51.38035657661605]
Test Case: 590 | Input/Output: [[93.75014846749917 72] 165.75014846749917]
Test Case: 591 | Input/Output: [[69.48892761165601 -6] 63.48892761165601]
Test Case: 592 | Input/Output: [[96.3754240944385 -73] 23.3754240944385]
Test Case: 593 | Input/Output: [[94.08136808645611 -82] 12.08136808645611]
Test Case: 594 | Input/Output: [[-37.1779230777979 -80] -117.1779230777979]
Test Case: 595 | Input/Output: [[-36.46568231913025 -100] -136.46568231913025]
Test Case: 596 | Input/Output: [[89.2796804703043 3] 92.2796804703043]
Test Case: 597 | Input/Output: [[51.46209454667542 33] 84.46209454667542]
Test Case: 598 | Input/Output: [[-12.158166583400828 -61] -73.15816658340083]
Test Case: 599 | Input/Output: [[-80.22671310785476 -11] -91.22671310785476]
Test Case: 600 | Input/Output: [[66.79520851698629 0] 66.79520851698629]
Test Case: 601 | Input/Output: [[20.4115604827781 -50] -29.5884395172219]
Test Case: 602 | Input/Output: [[-33.35592724728356 -71] -104.35592724728356]
Test Case: 603 | Input/Output: [[-61.798409996781075 -4] -65.79840999678107]
Test Case: 604 | Input/Output: [[9.142379419250318 -63] -53.85762058074968]
Test Case: 605 | Input/Output: [[66.35847230980573 -13] 53.358472309805734]
Test Case: 606 | Input/Output: [[-34.364540792984016 34] -0.3645407929840161]
Test Case: 607 | Input/Output: [[-26.021266571159885 67] 40.978733428840115]
Test Case: 608 | Input/Output: [[-74.1752776697342 0] -74.1752776697342]
Test Case: 609 | Input/Output: [[8.362315433842198 55] 63.3623154338422]
Test Case: 610 | Input/Output: [[79.14399966334557 -64] 15.143999663345568]
Test Case: 611 | Input/Output: [[76.0024055340098 57] 133.0024055340098]
Test Case: 612 | Input/Output: [[-91.56082623485011 51] -40.56082623485011]
Test Case: 613 | Input/Output: [[24.475114673481087 -8] 16.475114673481087]
Test Case: 614 | Input/Output: [[41.55161242234564 2] 43.55161242234564]
Test Case: 615 | Input/Output: [[-22.945495165220777 -47] -69.94549516522078]
Test Case: 616 | Input/Output: [[39.51402963067943 54] 93.51402963067943]
Test Case: 617 | Input/Output: [[-33.685211264005204 -66] -99.6852112640052]
Test Case: 618 | Input/Output: [[-77.38893335087455 62] -15.388933350874552]
Test Case: 619 | Input/Output: [[49.11251982876891 41] 90.11251982876891]
Test Case: 620 | Input/Output: [[-1.1784076854608685 93] 91.82159231453913]
Test Case: 621 | Input/Output: [[17.2298574422654 30] 47.2298574422654]
Test Case: 622 | Input/Output: [[24.064258586298948 -60] -35.93574141370105]
Test Case: 623 | Input/Output: [[-48.62006311445948 -80] -128.62006311445947]
Test Case: 624 | Input/Output: [[29.591115688525065 -56] -26.408884311474935]
Test Case: 625 | Input/Output: [[12.9974085425915 46] 58.9974085425915]
Test Case: 626 | Input/Output: [[3.9283079170465527 90] 93.92830791704655]
Test Case: 627 | Input/Output: [[-69.18535437759657 -50] -119.18535437759657]
Test Case: 628 | Input/Output: [[87.7690544063434 -18] 69.7690544063434]
Test Case: 629 | Input/Output: [[88.43120308628173 -63] 25.431203086281727]
Test Case: 630 | Input/Output: [[94.37443788282837 -16] 78.37443788282837]
Test Case: 631 | Input/Output: [[42.465614049718596 -10] 32.465614049718596]
Test Case: 632 | Input/Output: [[10.052170379246945 -69] -58.947829620753055]
Test Case: 633 | Input/Output: [[-3.011805114715017 54] 50.98819488528498]
Test Case: 634 | Input/Output: [[-99.99802048674628 -78] -177.99802048674627]
Test Case: 635 | Input/Output: [[19.478791851278828 -77] -57.52120814872117]
Test Case: 636 | Input/Output: [[-3.968352032537652 -33] -36.96835203253765]
Test Case: 637 | Input/Output: [[-94.84010394909194 -56] -150.84010394909194]
Test Case: 638 | Input/Output: [[-52.592878044103905 -35] -87.59287804410391]
Test Case: 639 | Input/Output: [[-8.874828339173774 -47] -55.874828339173774]
Test Case: 640 | Input/Output: [[-19.982626806321875 -57] -76.98262680632187]
Test Case: 641 | Input/Output: [[-26.765513755455146 45] 18.234486244544854]
Test Case: 642 | Input/Output: [[-62.33803048001045 17] -45.33803048001045]
Test Case: 643 | Input/Output: [[-24.12034708714839 52] 27.87965291285161]
Test Case: 644 | Input/Output: [[-42.09061793327567 -34] -76.09061793327567]
Test Case: 645 | Input/Output: [[86.24903283253954 -55] 31.24903283253954]
Test Case: 646 | Input/Output: [[-59.28578875855457 49] -10.285788758554567]
Test Case: 647 | Input/Output: [[79.78291889083934 -96] -16.21708110916066]
Test Case: 648 | Input/Output: [[46.17518039814314 72] 118.17518039814314]
Test Case: 649 | Input/Output: [[15.944447177615956 15] 30.944447177615956]
Test Case: 650 | Input/Output: [[-53.608426687395585 83] 29.391573312604415]
Test Case: 651 | Input/Output: [[81.74431829770501 63] 144.744318297705]
Test Case: 652 | Input/Output: [[-96.99667961406082 53] -43.996679614060824]
Test Case: 653 | Input/Output: [[-44.75636417674704 9] -35.75636417674704]
Test Case: 654 | Input/Output: [[61.18331074425896 -15] 46.18331074425896]
Test Case: 655 | Input/Output: [[48.185424365323485 -5] 43.185424365323485]
Test Case: 656 | Input/Output: [[86.58455788648376 -84] 2.584557886483765]
Test Case: 657 | Input/Output: [[22.24124200652973 24] 46.24124200652973]
Test Case: 658 | Input/Output: [[-3.7215669104586624 56] 52.27843308954134]
Test Case: 659 | Input/Output: [[29.129510573437045 0] 29.129510573437045]
Test Case: 660 | Input/Output: [[-30.2205307507965 -15] -45.2205307507965]
Test Case: 661 | Input/Output: [[68.5724441413144 -65] 3.5724441413144064]
Test Case: 662 | Input/Output: [[-73.57453206119023 29] -44.574532061190226]
Test Case: 663 | Input/Output: [[1.3015590313239187 -96] -94.69844096867608]
Test Case: 664 | Input/Output: [[-2.4331070069991085 -6] -8.433107006999109]
Test Case: 665 | Input/Output: [[-11.499053538098394 -76] -87.4990535380984]
Test Case: 666 | Input/Output: [[-75.32695714149797 47] -28.32695714149797]
Test Case: 667 | Input/Output: [[-50.8426661545871 40] -10.8426661545871]
Test Case: 668 | Input/Output: [[42.54352811419008 -55] -12.456471885809918]
Test Case: 669 | Input/Output: [[-65.16770082985352 16] -49.167700829853516]
Test Case: 670 | Input/Output: [[-28.582130904080955 -23] -51.582130904080955]
Test Case: 671 | Input/Output: [[49.67903907663754 -31] 18.679039076637537]
Test Case: 672 | Input/Output: [[-45.26035922910887 14] -31.26035922910887]
Test Case: 673 | Input/Output: [[-47.354733797452454 -92] -139.35473379745247]
Test Case: 674 | Input/Output: [[-55.21184359040612 -7] -62.21184359040612]
Test Case: 675 | Input/Output: [[34.0810978904677 -41] -6.918902109532297]
Test Case: 676 | Input/Output: [[-63.92975341194067 30] -33.92975341194067]
Test Case: 677 | Input/Output: [[-95.22062221774715 -82] -177.22062221774715]
Test Case: 678 | Input/Output: [[6.615366797029054 47] 53.615366797029054]
Test Case: 679 | Input/Output: [[9.304973260192057 -73] -63.69502673980794]
Test Case: 680 | Input/Output: [[-42.619149799196585 97] 54.380850200803415]
Test Case: 681 | Input/Output: [[78.24144344688011 76] 154.2414434468801]
Test Case: 682 | Input/Output: [[79.94909851697219 -48] 31.949098516972185]
Test Case: 683 | Input/Output: [[-51.28677111581419 -59] -110.28677111581419]
Test Case: 684 | Input/Output: [[99.21493526087522 43] 142.21493526087522]
Test Case: 685 | Input/Output: [[-13.169766441826596 19] 5.830233558173404]
Test Case: 686 | Input/Output: [[10.525411424041124 -75] -64.47458857595888]
Test Case: 687 | Input/Output: [[41.47908767378138 28] 69.47908767378138]
Test Case: 688 | Input/Output: [[-49.8061228786088 14] -35.8061228786088]
Test Case: 689 | Input/Output: [[90.49317687747904 32] 122.49317687747904]
Test Case: 690 | Input/Output: [[77.36782272677104 89] 166.36782272677104]
Test Case: 691 | Input/Output: [[41.681276361513824 -16] 25.681276361513824]
Test Case: 692 | Input/Output: [[-40.40369869616101 25] -15.403698696161008]
Test Case: 693 | Input/Output: [[-37.57004070202101 19] -18.57004070202101]
Test Case: 694 | Input/Output: [[-78.58032666233552 37] -41.58032666233552]
Test Case: 695 | Input/Output: [[90.75076146196156 -54] 36.75076146196156]
Test Case: 696 | Input/Output: [[10.105100076924174 52] 62.105100076924174]
Test Case: 697 | Input/Output: [[23.051356769683935 -10] 13.051356769683935]
Test Case: 698 | Input/Output: [[36.000130143828756 -62] -25.999869856171244]
Test Case: 699 | Input/Output: [[-12.701680401988085 48] 35.298319598011915]
Test Case: 700 | Input/Output: [[-26.842719860367367 -18] -44.84271986036737]
Test Case: 701 | Input/Output: [[-92.16818936433447 -90] -182.16818936433447]
Test Case: 702 | Input/Output: [[48.161839435840164 -7] 41.161839435840164]
Test Case: 703 | Input/Output: [[4.138692869600135 42] 46.138692869600135]
Test Case: 704 | Input/Output: [[10.715062615139288 -94] -83.28493738486071]
Test Case: 705 | Input/Output: [[91.20247635138182 81] 172.20247635138182]
Test Case: 706 | Input/Output: [[-56.42120436563649 -77] -133.4212043656365]
Test Case: 707 | Input/Output: [[10.108303838735907 -86] -75.8916961612641]
Test Case: 708 | Input/Output: [[-59.83009998401756 -26] -85.83009998401755]
Test Case: 709 | Input/Output: [[-61.58184113173757 87] 25.41815886826243]
Test Case: 710 | Input/Output: [[-14.875315673806071 52] 37.12468432619393]
Test Case: 711 | Input/Output: [[-18.778813149249316 -1] -19.778813149249316]
Test Case: 712 | Input/Output: [[53.74903910995437 -18] 35.74903910995437]
Test Case: 713 | Input/Output: [[-95.89958737603655 40] -55.89958737603655]
Test Case: 714 | Input/Output: [[5.415557951149424 36] 41.415557951149424]
Test Case: 715 | Input/Output: [[-64.70227630334705 10] -54.70227630334705]
Test Case: 716 | Input/Output: [[-59.5366689086928 12] -47.5366689086928]
Test Case: 717 | Input/Output: [[53.3075293979185 -8] 45.3075293979185]
Test Case: 718 | Input/Output: [[-51.98271141113855 38] -13.982711411138553]
Test Case: 719 | Input/Output: [[3.794617746358881 32] 35.79461774635888]
Test Case: 720 | Input/Output: [[-20.214513524443674 5] -15.214513524443674]
Test Case: 721 | Input/Output: [[-51.99535062714384 9] -42.99535062714384]
Test Case: 722 | Input/Output: [[-40.38606574595433 20] -20.386065745954333]
Test Case: 723 | Input/Output: [[-70.08700889174384 -83] -153.08700889174384]
Test Case: 724 | Input/Output: [[-67.36495214609099 -35] -102.36495214609099]
Test Case: 725 | Input/Output: [[-75.81112539822533 76] 0.1888746017746712]
Test Case: 726 | Input/Output: [[66.45685948095826 -67] -0.5431405190417422]
Test Case: 727 | Input/Output: [[11.09495143671029 54] 65.09495143671029]
Test Case: 728 | Input/Output: [[-59.10841450826388 -42] -101.10841450826388]
Test Case: 729 | Input/Output: [[-68.19740208525049 -95] -163.19740208525047]
Test Case: 730 | Input/Output: [[96.0233872350176 1] 97.0233872350176]
Test Case: 731 | Input/Output: [[-96.74993977532658 -89] -185.7499397753266]
Test Case: 732 | Input/Output: [[9.907891847140007 78] 87.90789184714001]
Test Case: 733 | Input/Output: [[45.88678041503863 73] 118.88678041503863]
Test Case: 734 | Input/Output: [[-77.02878409356053 -50] -127.02878409356053]
Test Case: 735 | Input/Output: [[98.6642006067639 -89] 9.664200606763899]
Test Case: 736 | Input/Output: [[95.25280190044393 86] 181.25280190044393]
Test Case: 737 | Input/Output: [[4.121646134941841 21] 25.12164613494184]
Test Case: 738 | Input/Output: [[-65.69818327717113 -57] -122.69818327717113]
Test Case: 739 | Input/Output: [[52.53260668614308 -39] 13.532606686143083]
Test Case: 740 | Input/Output: [[57.67434031431202 -67] -9.325659685687981]
Test Case: 741 | Input/Output: [[-31.90073745474234 44] 12.099262545257659]
Test Case: 742 | Input/Output: [[-52.320140640725235 70] 17.679859359274765]
Test Case: 743 | Input/Output: [[32.66867778704977 -89] -56.33132221295023]
Test Case: 744 | Input/Output: [[-24.399433281292772 -91] -115.39943328129277]
Test Case: 745 | Input/Output: [[-59.84312221685215 -13] -72.84312221685215]
Test Case: 746 | Input/Output: [[88.07468058228775 70] 158.07468058228775]
Test Case: 747 | Input/Output: [[-24.05217178312185 84] 59.94782821687815]
Test Case: 748 | Input/Output: [[96.17349008469031 -42] 54.173490084690314]
Test Case: 749 | Input/Output: [[-87.39980818485687 16] -71.39980818485687]
Test Case: 750 | Input/Output: [[75.52624074343234 55] 130.52624074343234]
Test Case: 751 | Input/Output: [[-7.441743024819118 -6] -13.441743024819118]
Test Case: 752 | Input/Output: [[-85.82445676943064 -68] -153.82445676943064]
Test Case: 753 | Input/Output: [[-82.83557837210947 4] -78.83557837210947]
Test Case: 754 | Input/Output: [[-5.191925249919763 80] 74.80807475008024]
Test Case: 755 | Input/Output: [[98.85378846079755 -46] 52.853788460797546]
Test Case: 756 | Input/Output: [[90.79694544440221 -31] 59.79694544440221]
Test Case: 757 | Input/Output: [[-70.6980952513492 -55] -125.6980952513492]
Test Case: 758 | Input/Output: [[-51.33631586108529 96] 44.66368413891471]
Test Case: 759 | Input/Output: [[74.50290221255705 17] 91.50290221255705]
Test Case: 760 | Input/Output: [[-26.3498511553707 -77] -103.3498511553707]
Test Case: 761 | Input/Output: [[36.04346073300786 -77] -40.95653926699214]
Test Case: 762 | Input/Output: [[-53.50842520139387 36] -17.50842520139387]
Test Case: 763 | Input/Output: [[-5.191684655931894 -92] -97.1916846559319]
Test Case: 764 | Input/Output: [[94.93291539265607 4] 98.93291539265607]
Test Case: 765 | Input/Output: [[0.2205975341162798 -100] -99.77940246588372]
Test Case: 766 | Input/Output: [[-30.178834581266216 -76] -106.17883458126622]
Test Case: 767 | Input/Output: [[-31.456353085759403 -74] -105.4563530857594]
Test Case: 768 | Input/Output: [[-95.38600808064612 -64] -159.38600808064612]
Test Case: 769 | Input/Output: [[-58.751742675084806 -48] -106.75174267508481]
Test Case: 770 | Input/Output: [[40.28018157916435 -57] -16.71981842083565]
Test Case: 771 | Input/Output: [[16.725550016318635 -44] -27.274449983681365]
Test Case: 772 | Input/Output: [[-49.98381210371399 -66] -115.98381210371399]
Test Case: 773 | Input/Output: [[44.81409305438817 57] 101.81409305438817]
Test Case: 774 | Input/Output: [[-38.02761009459814 -59] -97.02761009459815]
Test Case: 775 | Input/Output: [[-70.22645866267057 14] -56.22645866267057]
Test Case: 776 | Input/Output: [[78.28628915666795 -97] -18.713710843332052]
Test Case: 777 | Input/Output: [[94.6782711495542 -83] 11.678271149554206]
Test Case: 778 | Input/Output: [[28.9852989418074 -52] -23.0147010581926]
Test Case: 779 | Input/Output: [[-87.8591439864669 49] -38.859143986466904]
Test Case: 780 | Input/Output: [[76.76609344556454 -87] -10.233906554435464]
Test Case: 781 | Input/Output: [[39.60719425170487 -96] -56.39280574829513]
Test Case: 782 | Input/Output: [[-84.36797542123828 -99] -183.36797542123827]
Test Case: 783 | Input/Output: [[99.87631089840627 43] 142.87631089840627]
Test Case: 784 | Input/Output: [[-54.86752860778537 -15] -69.86752860778537]
Test Case: 785 | Input/Output: [[36.81864325035306 -69] -32.18135674964694]
Test Case: 786 | Input/Output: [[-17.251854082438783 32] 14.748145917561217]
Test Case: 787 | Input/Output: [[-3.4004037722131386 -57] -60.40040377221314]
Test Case: 788 | Input/Output: [[-64.41712729195407 63] -1.417127291954074]
Test Case: 789 | Input/Output: [[3.9480783335331893 36] 39.94807833353319]
Test Case: 790 | Input/Output: [[8.721474783154974 -58] -49.278525216845026]
Test Case: 791 | Input/Output: [[-53.53160907737862 -27] -80.53160907737862]
Test Case: 792 | Input/Output: [[9.66189859721483 -6] 3.6618985972148295]
Test Case: 793 | Input/Output: [[-40.81162471702564 97] 56.18837528297436]
Test Case: 794 | Input/Output: [[-12.9536281330993 56] 43.0463718669007]
Test Case: 795 | Input/Output: [[-27.729384214985814 62] 34.270615785014186]
Test Case: 796 | Input/Output: [[-29.262303366087906 22] -7.262303366087906]
Test Case: 797 | Input/Output: [[34.99177294485054 47] 81.99177294485054]
Test Case: 798 | Input/Output: [[31.641119671121373 0] 31.641119671121373]
Test Case: 799 | Input/Output: [[-81.13496851922801 92] 10.86503148077199]
Test Case: 800 | Input/Output: [[-29.678582913153818 -47] -76.67858291315382]
Test Case: 801 | Input/Output: [[34.103922170099565 49] 83.10392217009957]
Test Case: 802 | Input/Output: [[-67.28479931592389 -61] -128.2847993159239]
Test Case: 803 | Input/Output: [[-46.620154685767815 -85] -131.62015468576783]
Test Case: 804 | Input/Output: [[-72.00995554607834 78] 5.990044453921655]
Test Case: 805 | Input/Output: [[63.78010890893253 -25] 38.78010890893253]
Test Case: 806 | Input/Output: [[36.903918379088026 20] 56.903918379088026]
Test Case: 807 | Input/Output: [[-58.80570905721672 -36] -94.80570905721672]
Test Case: 808 | Input/Output: [[32.56785643179083 83] 115.56785643179083]
Test Case: 809 | Input/Output: [[62.23090995659234 -4] 58.23090995659234]
Test Case: 810 | Input/Output: [[-15.515633887520082 -13] -28.51563388752008]
Test Case: 811 | Input/Output: [[53.51283303583182 22] 75.51283303583182]
Test Case: 812 | Input/Output: [[-50.212791729314475 60] 9.787208270685525]
Test Case: 813 | Input/Output: [[87.63680586950485 -45] 42.636805869504855]
Test Case: 814 | Input/Output: [[-28.927525902285694 2] -26.927525902285694]
Test Case: 815 | Input/Output: [[92.98953524777187 -85] 7.989535247771869]
Test Case: 816 | Input/Output: [[64.9829000682918 -51] 13.982900068291798]
Test Case: 817 | Input/Output: [[-55.164477189956095 -22] -77.1644771899561]
Test Case: 818 | Input/Output: [[-79.90018586368892 55] -24.900185863688918]
Test Case: 819 | Input/Output: [[18.181089222342933 -10] 8.181089222342933]
Test Case: 820 | Input/Output: [[-31.348632288173178 53] 21.651367711826822]
Test Case: 821 | Input/Output: [[68.07931436540449 -48] 20.079314365404485]
Test Case: 822 | Input/Output: [[70.92477054839321 -29] 41.92477054839321]
Test Case: 823 | Input/Output: [[31.420685972092457 -8] 23.420685972092457]
Test Case: 824 | Input/Output: [[-47.62909728797455 68] 20.370902712025448]
Test Case: 825 | Input/Output: [[28.53305811503631 -39] -10.466941884963688]
Test Case: 826 | Input/Output: [[6.0587830823476025 -3] 3.0587830823476025]
Test Case: 827 | Input/Output: [[-36.85394995971698 74] 37.14605004028302]
Test Case: 828 | Input/Output: [[-74.48922759581929 99] 24.510772404180713]
Test Case: 829 | Input/Output: [[48.7435053273488 47] 95.7435053273488]
Test Case: 830 | Input/Output: [[-97.26509281310098 65] -32.26509281310098]
Test Case: 831 | Input/Output: [[-19.583007379365696 -32] -51.5830073793657]
Test Case: 832 | Input/Output: [[98.98258682754971 41] 139.9825868275497]
Test Case: 833 | Input/Output: [[-79.14882276160165 28] -51.14882276160165]
Test Case: 834 | Input/Output: [[-66.30165021634676 -18] -84.30165021634676]
Test Case: 835 | Input/Output: [[-73.00278694582573 97] 23.997213054174267]
Test Case: 836 | Input/Output: [[83.85803193442246 97] 180.85803193442246]
Test Case: 837 | Input/Output: [[-10.054297863418 11] 0.9457021365819998]
Test Case: 838 | Input/Output: [[90.04385243769596 -45] 45.04385243769596]
Test Case: 839 | Input/Output: [[-76.72762300688069 -48] -124.72762300688069]
Test Case: 840 | Input/Output: [[-31.904458996841186 67] 35.095541003158814]
Test Case: 841 | Input/Output: [[-64.86381109839003 -36] -100.86381109839003]
Test Case: 842 | Input/Output: [[64.26667429300164 44] 108.26667429300164]
Test Case: 843 | Input/Output: [[77.169573823051 -46] 31.169573823050996]
Test Case: 844 | Input/Output: [[55.51077621388001 77] 132.51077621388]
Test Case: 845 | Input/Output: [[-45.006993391831564 -50] -95.00699339183157]
Test Case: 846 | Input/Output: [[-97.59726074453816 61] -36.59726074453816]
Test Case: 847 | Input/Output: [[-97.39015694901809 35] -62.39015694901809]
Test Case: 848 | Input/Output: [[40.95888709325445 -52] -11.041112906745553]
Test Case: 849 | Input/Output: [[39.15573017699364 -17] 22.155730176993643]
Test Case: 850 | Input/Output: [[-8.148569817062452 12] 3.8514301829375484]
Test Case: 851 | Input/Output: [[-25.488450765775468 93] 67.51154923422453]
Test Case: 852 | Input/Output: [[29.95303275808112 -56] -26.04696724191888]
Test Case: 853 | Input/Output: [[53.36593665495815 91] 144.36593665495815]
Test Case: 854 | Input/Output: [[78.61390996544034 18] 96.61390996544034]
Test Case: 855 | Input/Output: [[5.818837835227342 -93] -87.18116216477266]
Test Case: 856 | Input/Output: [[-15.540224910712297 -22] -37.5402249107123]
Test Case: 857 | Input/Output: [[-34.71866041485548 68] 33.28133958514452]
Test Case: 858 | Input/Output: [[2.7955285025147845 30] 32.795528502514784]
Test Case: 859 | Input/Output: [[91.35514841111447 -17] 74.35514841111447]
Test Case: 860 | Input/Output: [[42.74394752215292 88] 130.74394752215292]
Test Case: 861 | Input/Output: [[-94.31733845555735 8] -86.31733845555735]
Test Case: 862 | Input/Output: [[40.998965267268915 -82] -41.001034732731085]
Test Case: 863 | Input/Output: [[5.182881482429465 23] 28.182881482429465]
Test Case: 864 | Input/Output: [[5.232654328730774 75] 80.23265432873077]
Test Case: 865 | Input/Output: [[-49.325386219119174 -73] -122.32538621911917]
Test Case: 866 | Input/Output: [[19.805405731396192 91] 110.80540573139619]
Test Case: 867 | Input/Output: [[30.974417158545464 -72] -41.025582841454536]
Test Case: 868 | Input/Output: [[-93.38980357655153 45] -48.38980357655153]
Test Case: 869 | Input/Output: [[-59.4841103832225 -74] -133.48411038322251]
Test Case: 870 | Input/Output: [[67.19758646822754 -19] 48.19758646822754]
Test Case: 871 | Input/Output: [[64.10437648187249 96] 160.1043764818725]
Test Case: 872 | Input/Output: [[-79.28722094949987 -18] -97.28722094949987]
Test Case: 873 | Input/Output: [[-11.613094746974937 58] 46.38690525302506]
Test Case: 874 | Input/Output: [[-21.942473777720423 57] 35.05752622227958]
Test Case: 875 | Input/Output: [[-81.93829410778557 68] -13.938294107785566]
Test Case: 876 | Input/Output: [[14.415826242947062 -92] -77.58417375705294]
Test Case: 877 | Input/Output: [[-53.241539704023054 2] -51.241539704023054]
Test Case: 878 | Input/Output: [[-58.29288961553474 -75] -133.29288961553473]
Test Case: 879 | Input/Output: [[-92.6006042765956 70] -22.600604276595604]
Test Case: 880 | Input/Output: [[16.304643796695828 58] 74.30464379669583]
Test Case: 881 | Input/Output: [[-16.081121407912974 90] 73.91887859208703]
Test Case: 882 | Input/Output: [[-81.75075727485128 8] -73.75075727485128]
Test Case: 883 | Input/Output: [[-30.845188503484906 -42] -72.8451885034849]
Test Case: 884 | Input/Output: [[-15.164974893565557 -89] -104.16497489356556]
Test Case: 885 | Input/Output: [[37.616826317938376 -93] -55.383173682061624]
Test Case: 886 | Input/Output: [[78.7709374665506 11] 89.7709374665506]
Test Case: 887 | Input/Output: [[49.9771308450064 65] 114.9771308450064]
Test Case: 888 | Input/Output: [[62.38651398974093 68] 130.38651398974093]
Test Case: 889 | Input/Output: [[-73.76838563472994 98] 24.23161436527006]
Test Case: 890 | Input/Output: [[41.83666314887279 -29] 12.836663148872788]
Test Case: 891 | Input/Output: [[-23.82684160389013 44] 20.17315839610987]
Test Case: 892 | Input/Output: [[44.63255960601842 90] 134.63255960601842]
Test Case: 893 | Input/Output: [[30.635974430675304 23] 53.635974430675304]
Test Case: 894 | Input/Output: [[-32.347134373366245 15] -17.347134373366245]
Test Case: 895 | Input/Output: [[77.33337658505476 27] 104.33337658505476]
Test Case: 896 | Input/Output: [[21.272270938527043 -58] -36.72772906147296]
Test Case: 897 | Input/Output: [[83.93735232445408 -2] 81.93735232445408]
Test Case: 898 | Input/Output: [[-92.82411167013898 38] -54.824111670138976]
Test Case: 899 | Input/Output: [[92.54489328006773 63] 155.54489328006773]
Test Case: 900 | Input/Output: [[24.44912492380415 -44] -19.55087507619585]
Test Case: 901 | Input/Output: [[8.268207138830348 43] 51.26820713883035]
Test Case: 902 | Input/Output: [[-8.472938872454634 -98] -106.47293887245463]
Test Case: 903 | Input/Output: [[-96.06862466412632 -9] -105.06862466412632]
Test Case: 904 | Input/Output: [[-77.78004971865711 -91] -168.7800497186571]
Test Case: 905 | Input/Output: [[65.26540760882975 39] 104.26540760882975]
Test Case: 906 | Input/Output: [[44.07666422577594 -66] -21.923335774224057]
Test Case: 907 | Input/Output: [[50.00468152846466 -69] -18.99531847153534]
Test Case: 908 | Input/Output: [[8.641945830402321 -99] -90.35805416959768]
Test Case: 909 | Input/Output: [[44.2347171014203 27] 71.2347171014203]
Test Case: 910 | Input/Output: [[51.86341014563561 -80] -28.136589854364388]
Test Case: 911 | Input/Output: [[5.708664513758549 80] 85.70866451375855]
Test Case: 912 | Input/Output: [[5.0935310111136545 -87] -81.90646898888635]
Test Case: 913 | Input/Output: [[59.14134223556212 -29] 30.14134223556212]
Test Case: 914 | Input/Output: [[89.97079635709346 6] 95.97079635709346]
Test Case: 915 | Input/Output: [[46.84228170902895 -58] -11.157718290971047]
Test Case: 916 | Input/Output: [[19.37898009183114 65] 84.37898009183114]
Test Case: 917 | Input/Output: [[-52.40469118445983 83] 30.59530881554017]
Test Case: 918 | Input/Output: [[93.33287880427287 -19] 74.33287880427287]
Test Case: 919 | Input/Output: [[26.033593080561104 -56] -29.966406919438896]
Test Case: 920 | Input/Output: [[2.9845397917004135 57] 59.98453979170041]
Test Case: 921 | Input/Output: [[-86.04402861864695 -72] -158.04402861864696]
Test Case: 922 | Input/Output: [[20.50790497674255 24] 44.50790497674255]
Test Case: 923 | Input/Output: [[-59.9300932489397 -77] -136.9300932489397]
Test Case: 924 | Input/Output: [[21.954371233252232 75] 96.95437123325223]
Test Case: 925 | Input/Output: [[35.5332704897443 65] 100.5332704897443]
Test Case: 926 | Input/Output: [[-31.70870632864799 98] 66.29129367135201]
Test Case: 927 | Input/Output: [[-51.498663555431044 -32] -83.49866355543105]
Test Case: 928 | Input/Output: [[-1.3025083876701444 20] 18.697491612329856]
Test Case: 929 | Input/Output: [[3.6102953381920173 -40] -36.38970466180798]
Test Case: 930 | Input/Output: [[-79.70218259479026 -3] -82.70218259479026]
Test Case: 931 | Input/Output: [[9.786595245227275 62] 71.78659524522728]
Test Case: 932 | Input/Output: [[-62.7068903369409 32] -30.7068903369409]
Test Case: 933 | Input/Output: [[-74.2331574655012 -18] -92.2331574655012]
Test Case: 934 | Input/Output: [[47.132957749062285 -83] -35.867042250937715]
Test Case: 935 | Input/Output: [[-66.509541196179 43] -23.509541196179]
Test Case: 936 | Input/Output: [[69.2327235951856 -17] 52.232723595185604]
Test Case: 937 | Input/Output: [[-22.498083649876335 -78] -100.49808364987634]
Test Case: 938 | Input/Output: [[53.7123346264668 -57] -3.2876653735332013]
Test Case: 939 | Input/Output: [[23.668463566432067 73] 96.66846356643207]
Test Case: 940 | Input/Output: [[-65.73555327968062 -78] -143.73555327968063]
Test Case: 941 | Input/Output: [[-39.98323690459282 63] 23.01676309540718]
Test Case: 942 | Input/Output: [[-86.8796314680773 10] -76.8796314680773]
Test Case: 943 | Input/Output: [[-52.64546426852079 -55] -107.64546426852078]
Test Case: 944 | Input/Output: [[59.019540069887285 34] 93.01954006988728]
Test Case: 945 | Input/Output: [[-25.44278494762831 76] 50.55721505237169]
Test Case: 946 | Input/Output: [[-24.210029428126916 73] 48.789970571873084]
Test Case: 947 | Input/Output: [[-90.98346070783612 40] -50.983460707836116]
Test Case: 948 | Input/Output: [[-58.65218864944977 -85] -143.65218864944978]
Test Case: 949 | Input/Output: [[-79.68603126025357 89] 9.313968739746429]
Test Case: 950 | Input/Output: [[-93.35725837366356 -52] -145.35725837366357]
Test Case: 951 | Input/Output: [[82.32204407812293 -83] -0.6779559218770714]
Test Case: 952 | Input/Output: [[6.695932658846175 25] 31.695932658846175]
Test Case: 953 | Input/Output: [[37.99230145105682 91] 128.99230145105682]
Test Case: 954 | Input/Output: [[-70.99443653742617 -2] -72.99443653742617]
Test Case: 955 | Input/Output: [[-67.11776908864726 32] -35.117769088647265]
Test Case: 956 | Input/Output: [[-46.26744417057256 -57] -103.26744417057256]
Test Case: 957 | Input/Output: [[-15.448373059361359 -95] -110.44837305936136]
Test Case: 958 | Input/Output: [[-63.639567875074036 69] 5.360432124925964]
Test Case: 959 | Input/Output: [[-21.964773787224104 9] -12.964773787224104]
Test Case: 960 | Input/Output: [[62.72404975292997 93] 155.72404975292997]
Test Case: 961 | Input/Output: [[21.379994992340954 7] 28.379994992340954]
Test Case: 962 | Input/Output: [[-92.358711935929 32] -60.358711935928994]
Test Case: 963 | Input/Output: [[93.96305987919604 -18] 75.96305987919604]
Test Case: 964 | Input/Output: [[16.763412446366033 40] 56.76341244636603]
Test Case: 965 | Input/Output: [[70.28217967349758 82] 152.28217967349758]
Test Case: 966 | Input/Output: [[-8.778714327430407 59] 50.22128567256959]
Test Case: 967 | Input/Output: [[-85.51284311685741 -63] -148.51284311685743]
Test Case: 968 | Input/Output: [[-52.534186929280494 -94] -146.5341869292805]
Test Case: 969 | Input/Output: [[49.56813998424596 92] 141.56813998424596]
Test Case: 970 | Input/Output: [[38.17244136604154 21] 59.17244136604154]
Test Case: 971 | Input/Output: [[-66.99670874587882 -54] -120.99670874587882]
Test Case: 972 | Input/Output: [[-16.351158684959714 66] 49.648841315040286]
Test Case: 973 | Input/Output: [[71.02901902940485 -48] 23.02901902940485]
Test Case: 974 | Input/Output: [[52.62432938239269 85] 137.6243293823927]
Test Case: 975 | Input/Output: [[89.82863285751043 -69] 20.828632857510428]
Test Case: 976 | Input/Output: [[-19.838012378281448 -51] -70.83801237828145]
Test Case: 977 | Input/Output: [[68.94939221423826 41] 109.94939221423826]
Test Case: 978 | Input/Output: [[68.75426807876028 -18] 50.754268078760276]
Test Case: 979 | Input/Output: [[-14.88806353483865 -21] -35.88806353483865]
Test Case: 980 | Input/Output: [[77.90901010851954 5] 82.90901010851954]
Test Case: 981 | Input/Output: [[47.177471831820355 43] 90.17747183182036]
Test Case: 982 | Input/Output: [[70.3253806997927 75] 145.3253806997927]
Test Case: 983 | Input/Output: [[45.95603494235502 8] 53.95603494235502]
Test Case: 984 | Input/Output: [[35.221481423598476 -65] -29.778518576401524]
Test Case: 985 | Input/Output: [[-11.910405913899908 61] 49.08959408610009]
Test Case: 986 | Input/Output: [[-14.970880419369294 91] 76.0291195806307]
Test Case: 987 | Input/Output: [[-21.510408116342234 3] -18.510408116342234]
Test Case: 988 | Input/Output: [[-92.86438096123007 -51] -143.86438096123007]
Test Case: 989 | Input/Output: [[10.541425121232422 -81] -70.45857487876758]
Test Case: 990 | Input/Output: [[-1.6184171859289052 36] 34.381582814071095]
Test Case: 991 | Input/Output: [[-73.84625857902904 -19] -92.84625857902904]
Test Case: 992 | Input/Output: [[-68.08795362377829 -22] -90.08795362377829]
Test Case: 993 | Input/Output: [[32.73797464873485 95] 127.73797464873485]
Test Case: 994 | Input/Output: [[-28.499096216881156 96] 67.50090378311884]
Test Case: 995 | Input/Output: [[32.404904377719305 39] 71.4049043777193]
Test Case: 996 | Input/Output: [[-64.63095500716523 97] 32.36904499283477]
Test Case: 997 | Input/Output: [[69.8814473803142 -40] 29.8814473803142]
Test Case: 998 | Input/Output: [[-26.11501981149371 85] 58.88498018850629]
Test Case: 999 | Input/Output: [[59.99833693292882 31] 90.99833693292882]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 95 -122 -93 -108 0 40 98 40 -88 -16 -9 70 21 -18 -12 -110
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 53131.0
Test mean error for best: 26.56550
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -69.9105758841
Correct output: 106.5297912457 | Program output: 53.5297912457 
Correct output: 67.0758504978  | Program output: 95.0758504978 
Correct output: 136.6003415923 | Program output: 55.6003415923 
Correct output: 0.3915927699   | Program output: 72.3915927699 
Correct output: -17.2367149126 | Program output: 22.7632850874 
Correct output: -19.900899189  | Program output: -56.900899189 
Correct output: 139.2078452432 | Program output: 54.2078452432 
Correct output: 4.970708678    | Program output: -68.029291322 
Correct output: -10.6746103067 | Program output: 9.3253896933  
Correct output: 48.6600799051  | Program output: 5.6600799051  
Correct output: 29.5504393334  | Program output: 27.5504393334 
Correct output: 33.3497873494  | Program output: 58.3497873494 
Correct output: -94.0996845263 | Program output: -47.0996845263
Correct output: 129.3166897457 | Program output: 65.3166897457 
Correct output: 52.9261893635  | Program output: 50.9261893635 
Correct output: 44.9476623686  | Program output: 72.9476623686 
Correct output: -61.0543762286 | Program output: -54.0543762286
Correct output: -126.3741080035 | Program output: -30.3741080035
Correct output: -54.969119896  | Program output: -3.969119896  
Correct output: 76.6182845413  | Program output: 32.6182845413 
Correct output: -80.2391916219 | Program output: -97.2391916219
Correct output: 58.0930783645  | Program output: 55.0930783645 
Correct output: 56.5469735654  | Program output: 14.5469735654 
Correct output: -52.9793852066 | Program output: -88.9793852066
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction print_integer} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_flush} {:instruction float_yank} {:instruction float_cos} {:instruction in1} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_max} {:instruction float_shove} {:instruction float_min} {:instruction integer_flush} {:instruction in2} {:instruction integer_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_sub} {:instruction print_float} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction float_inc} {:instruction float_pop})
Best program: (float_tan print_integer float_sub integer_fromfloat integer_yankdup print_integer integer_flush float_yank float_cos in1 integer_mod float_dup_items integer_inc integer_max float_shove float_min integer_flush in2 integer_sub float_yankdup integer_yankdup float_frominteger float_rot integer_sub print_float integer_stackdepth float_cos float_inc float_pop)
Errors: [95.0 2 53.0 3 28.0 2 81.0 3 72.0 2 40.0 13 37.0 2 85.0 3 73.0 12 20.0 13 43.0 2 2.0 1 25.0 2 47.0 2 64.0 3 2.0 1 28.0 2 7.0 2 96.0 3 51.0 2 44.0 2 17.0 2 3.0 1 42.0 2 36.0 2]
Total: 1175.0
Mean: 23.5
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 18103.2109555
Median total errors in population: 25336.0
Error averages by case: (743.3900670999966 14.019 715.4972599000018 13.316 715.6222818000026 12.558 722.7274021000026 13.345 707.634944299999 11.729 705.8773132000003 13.896 702.7902715000006 12.561 724.4398173999973 13.292 702.7256378999992 11.547 701.299477400001 13.721 698.6283320999983 12.512 689.5054216999972 12.542 709.1796993999998 12.742 724.1400367000022 13.244 721.058075599999 13.38 693.2213622999984 12.472 711.5046187000015 12.659 717.3505734000021 13.216 732.6696222000008 14.094 716.8627670999983 12.466 706.1139511999974 12.553 713.2444962999983 13.223 691.8695224000029 12.433 703.0576148000018 12.647 709.3663889999985 13.267)
Error minima by case: (24.0894 2 0.4702 3 3.3544 2 21.3997 2 0.0185 2 1.2367 8 0.0991 2 26.3878 2 0.8093 7 0.3254 8 1.6601 1 0.3377 1 2.0463 2 1.0997 2 0.3167 3 0.0738 1 2.0523 2 1.0685 2 18.3741 2 0.6402 1 0.3817 2 0.2392 2 0.9069 1 0.2398 2 0.9794 2)
Average genome size in population (length): 50.074
Average program size in population (points): 51.074
Average percent parens in population: 0.044
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.304
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1255489
--- Timings ---
Current time: 1529615052641 milliseconds
Total Time:           4.0 seconds
Initialization:       0.1 seconds,  2.8%
Reproduction:         0.6 seconds, 14.3%
Fitness Testing:      3.3 seconds, 82.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 12270.325000000003
Test mean error for best: 6.13516
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -165          
Correct output: 106.5297912457 | Program output: 105           
Correct output: 67.0758504978  | Program output: 66            
Correct output: 136.6003415923 | Program output: 135           
Correct output: 0.3915927699   | Program output: -1            
Correct output: -17.2367149126 | Program output: -19           
Correct output: -19.900899189  | Program output: -20           
Correct output: 139.2078452432 | Program output: 138           
Correct output: 4.970708678    | Program output: 4             
Correct output: -10.6746103067 | Program output: -12           
Correct output: 48.6600799051  | Program output: 47            
Correct output: 29.5504393334  | Program output: 28            
Correct output: 33.3497873494  | Program output: 32            
Correct output: -94.0996845263 | Program output: -95           
Correct output: 129.3166897457 | Program output: 128           
Correct output: 52.9261893635  | Program output: 51            
Correct output: 44.9476623686  | Program output: 43            
Correct output: -61.0543762286 | Program output: -62           
Correct output: -126.3741080035 | Program output: -127          
Correct output: -54.969119896  | Program output: -55           
Correct output: 76.6182845413  | Program output: 75            
Correct output: -80.2391916219 | Program output: -81           
Correct output: 58.0930783645  | Program output: 57            
Correct output: 56.5469735654  | Program output: 55            
Correct output: -52.9793852066 | Program output: -53           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.0894 11 1.5298 11 1.0759 12 1.6003 11 1.3916 11 1.7633 11 0.0991 11 1.2078 11 0.9707 10 1.3254 12 1.6601 11 1.5504 12 1.3498 12 0.9003 11 1.3167 11 1.9262 11 1.9477 11 0.9456 11 0.6259 11 0.0309 11 1.6183 11 0.7608 11 1.0931 11 1.547 11 0.0206 11]
Total: 306.34670000000006
Mean: 6.126934
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 6459.957829700006
Median total errors in population: 1956.1352000000004
Error averages by case: (313.0602326000012 11.749 259.6175057999978 11.492 255.43273679999882 10.871 280.1986132999979 11.604 238.6830302000004 10.037 228.36813539999991 12.874 231.2711465000007 10.934 281.6469215000001 11.367 234.77665019999986 10.912 216.83150289999986 12.59 223.8917512000008 10.807 199.3950611000002 10.85 236.27012399999902 11.203 267.6963235999992 11.23 273.66837189999944 11.546 213.8570795999982 10.742 242.5233461999981 10.847 247.1094652999979 11.229 289.36297339999845 12.088 245.6048594999977 10.573 240.6700861000005 10.737 257.93746270000236 11.254 220.5096046999992 10.637 229.8670071999988 11.026 251.22883800000184 11.28)
Error minima by case: (0.0894 2 0.4702 3 1.0759 2 1.6003 2 0.0185 2 1.2367 8 0.0991 2 1.2078 2 0.8093 7 0.3254 8 1.6601 1 0.3377 1 1.3498 2 0.9003 2 0.3167 3 0.0738 1 1.9477 2 0.9456 2 0.6259 2 0.0309 1 0.3817 2 0.2392 2 0.9069 1 0.2398 2 0.0206 2)
Average genome size in population (length): 60.629
Average program size in population (points): 61.629
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.525
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.26
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2776464
--- Timings ---
Current time: 1529615056695 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.7 seconds, 32.2%
Fitness Testing:      5.0 seconds, 60.6%
Report:               0.5 seconds,  5.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 12270.325000000003
Test mean error for best: 6.13516
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -165          
Correct output: 106.5297912457 | Program output: 105           
Correct output: 67.0758504978  | Program output: 66            
Correct output: 136.6003415923 | Program output: 135           
Correct output: 0.3915927699   | Program output: -1            
Correct output: -17.2367149126 | Program output: -19           
Correct output: -19.900899189  | Program output: -20           
Correct output: 139.2078452432 | Program output: 138           
Correct output: 4.970708678    | Program output: 4             
Correct output: -10.6746103067 | Program output: -12           
Correct output: 48.6600799051  | Program output: 47            
Correct output: 29.5504393334  | Program output: 28            
Correct output: 33.3497873494  | Program output: 32            
Correct output: -94.0996845263 | Program output: -95           
Correct output: 129.3166897457 | Program output: 128           
Correct output: 52.9261893635  | Program output: 51            
Correct output: 44.9476623686  | Program output: 43            
Correct output: -61.0543762286 | Program output: -62           
Correct output: -126.3741080035 | Program output: -127          
Correct output: -54.969119896  | Program output: -55           
Correct output: 76.6182845413  | Program output: 75            
Correct output: -80.2391916219 | Program output: -81           
Correct output: 58.0930783645  | Program output: 57            
Correct output: 56.5469735654  | Program output: 55            
Correct output: -52.9793852066 | Program output: -53           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_sin integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod float_dup float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.0894 11 1.5298 11 1.0759 12 1.6003 11 1.3916 11 1.7633 11 0.0991 11 1.2078 11 0.9707 10 1.3254 12 1.6601 11 1.5504 12 1.3498 12 0.9003 11 1.3167 11 1.9262 11 1.9477 11 0.9456 11 0.6259 11 0.0309 11 1.6183 11 0.7608 11 1.0931 11 1.547 11 0.0206 11]
Total: 306.34670000000006
Mean: 6.126934
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 4410.935684200005
Median total errors in population: 1243.0
Error averages by case: (215.4159425000007 7.614 174.26668999999947 8.051 173.14653069999974 7.271 193.4624336999996 8.061 190.79782660000046 6.883 160.84755380000001 13.044 164.99267549999982 7.445 195.60825180000046 7.825 188.4569330999996 11.87 140.34757050000024 12.882 148.35426739999946 7.11 124.850064899999 6.736 160.55290029999975 7.472 177.70839089999998 7.355 185.0251750999993 7.854 132.07285910000041 6.723 166.4423619999998 7.094 154.1204389999992 7.394 204.480609299999 8.335 167.72889819999966 6.814 162.1473450000004 7.055 166.16895550000032 7.61 134.54635009999956 6.647 155.57549760000026 7.23 174.0041616 7.44)
Error minima by case: (0.0894 2 1.5298 3 1.0759 2 1.6003 2 0.1428 2 1.7633 9 0.0991 2 1.2078 2 0.9707 8 1.3254 8 1.3399 1 0.3377 1 1.3498 2 0.9003 2 1.3167 3 0.3863 1 1.9477 2 0.0544 2 0.6259 2 0.0309 1 1.6183 2 0.7608 2 1.0931 1 1.547 2 0.0206 2)
Average genome size in population (length): 54.67
Average program size in population (points): 55.67
Average percent parens in population: 0.022
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0045
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.144
Error (vector) diversity:			 0.154
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4148614
--- Timings ---
Current time: 1529615060025 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.1 seconds, 35.5%
Fitness Testing:      6.5 seconds, 56.8%
Report:               0.8 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 12270.325000000003
Test mean error for best: 6.13516
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -165          
Correct output: 106.5297912457 | Program output: 105           
Correct output: 67.0758504978  | Program output: 66            
Correct output: 136.6003415923 | Program output: 135           
Correct output: 0.3915927699   | Program output: -1            
Correct output: -17.2367149126 | Program output: -19           
Correct output: -19.900899189  | Program output: -20           
Correct output: 139.2078452432 | Program output: 138           
Correct output: 4.970708678    | Program output: 4             
Correct output: -10.6746103067 | Program output: -12           
Correct output: 48.6600799051  | Program output: 47            
Correct output: 29.5504393334  | Program output: 28            
Correct output: 33.3497873494  | Program output: 32            
Correct output: -94.0996845263 | Program output: -95           
Correct output: 129.3166897457 | Program output: 128           
Correct output: 52.9261893635  | Program output: 51            
Correct output: 44.9476623686  | Program output: 43            
Correct output: -61.0543762286 | Program output: -62           
Correct output: -126.3741080035 | Program output: -127          
Correct output: -54.969119896  | Program output: -55           
Correct output: 76.6182845413  | Program output: 75            
Correct output: -80.2391916219 | Program output: -81           
Correct output: 58.0930783645  | Program output: 57            
Correct output: 56.5469735654  | Program output: 55            
Correct output: -52.9793852066 | Program output: -53           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction print_integer} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max print_integer float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.0894 11 1.5298 11 1.0759 12 1.6003 11 1.3916 11 1.7633 11 0.0991 11 1.2078 11 0.9707 10 1.3254 12 1.6601 11 1.5504 12 1.3498 12 0.9003 11 1.3167 11 1.9262 11 1.9477 11 0.9456 11 0.6259 11 0.0309 11 1.6183 11 0.7608 11 1.0931 11 1.547 11 0.0206 11]
Total: 306.34670000000006
Mean: 6.126934
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 3827.0396869
Median total errors in population: 1175.0
Error averages by case: (194.99439639999997 4.078 155.35225519999992 4.742 135.50848059999996 3.878 179.4644259 4.649 169.8381277000001 3.789 144.15172390000004 13.2 143.96742500000005 3.833 182.54814780000012 4.646 174.2447548000001 12.201 124.99381070000004 13.127 142.67567829999987 3.681 109.82462409999988 3.017 132.59364109999996 3.881 153.85075709999998 3.907 164.9759686999999 4.716 110.34292100000008 3.087 134.94826740000008 3.862 120.07097690000002 3.93 195.0688859 4.807 155.51571559999996 3.71 147.34511600000008 3.859 128.17184860000003 3.981 112.38859789999991 2.987 145.08603880000004 3.843 143.7721015 3.934)
Error minima by case: (0.0894 2 0.5298 3 1.0759 2 1.6003 2 0.2558 2 1.7633 10 0.0991 2 1.2078 2 0.9707 7 1.3254 9 1.6601 1 0.3906 1 1.3498 2 0.9003 2 1.3167 3 0.3906 1 1.9477 2 0.9456 2 0.6259 2 0.0309 1 1.6183 2 0.7608 2 1.0931 1 1.547 2 0.0206 2)
Average genome size in population (length): 44.985
Average program size in population (points): 45.985
Average percent parens in population: 0.027
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.521
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.06
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5277639
--- Timings ---
Current time: 1529615063515 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.9 seconds, 38.9%
Fitness Testing:      8.0 seconds, 52.9%
Report:               1.1 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 12270.325000000003
Test mean error for best: 6.13516
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -165          
Correct output: 106.5297912457 | Program output: 105           
Correct output: 67.0758504978  | Program output: 66            
Correct output: 136.6003415923 | Program output: 135           
Correct output: 0.3915927699   | Program output: -1            
Correct output: -17.2367149126 | Program output: -19           
Correct output: -19.900899189  | Program output: -20           
Correct output: 139.2078452432 | Program output: 138           
Correct output: 4.970708678    | Program output: 4             
Correct output: -10.6746103067 | Program output: -12           
Correct output: 48.6600799051  | Program output: 47            
Correct output: 29.5504393334  | Program output: 28            
Correct output: 33.3497873494  | Program output: 32            
Correct output: -94.0996845263 | Program output: -95           
Correct output: 129.3166897457 | Program output: 128           
Correct output: 52.9261893635  | Program output: 51            
Correct output: 44.9476623686  | Program output: 43            
Correct output: -61.0543762286 | Program output: -62           
Correct output: -126.3741080035 | Program output: -127          
Correct output: -54.969119896  | Program output: -55           
Correct output: 76.6182845413  | Program output: 75            
Correct output: -80.2391916219 | Program output: -81           
Correct output: 58.0930783645  | Program output: 57            
Correct output: 56.5469735654  | Program output: 55            
Correct output: -52.9793852066 | Program output: -53           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_flush} {:instruction float_max} {:instruction integer_swap} {:instruction float_sub} {:instruction float_swap} {:instruction float_dec} {:instruction float_mult} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction tagged_459} {:instruction float_swap} {:instruction integer_div} {:instruction tag_float_116} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_max} {:instruction integer_yank} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_min} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction float_min} {:instruction print_float} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_yank} {:instruction float_div} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_mult} {:instruction integer_sub} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_mult} {:instruction integer_sub} {:instruction -64.66732309265075})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush integer_fromfloat float_pop float_flush float_max integer_swap float_sub float_swap float_dec float_mult float_tan integer_fromfloat integer_inc tagged_459 float_swap integer_div tag_float_116 integer_dup integer_dec float_max integer_yank integer_sub float_stackdepth integer_mult float_min float_tan integer_fromfloat float_mult float_min print_float integer_mult float_dup_items float_pop float_frominteger float_yank float_div integer_yankdup integer_rot float_mult integer_sub print_float integer_dup_times float_yank float_mult integer_sub -64.66732309265075)
Errors: [0.0894 11 1.5298 11 1.0759 12 1.6003 11 1.3916 11 1.7633 11 0.0991 11 1.2078 11 0.9707 10 1.3254 12 1.6601 11 1.5504 12 1.3498 12 0.9003 11 1.3167 11 1.9262 11 1.9477 11 0.9456 11 0.6259 11 0.0309 11 1.6183 11 0.7608 11 1.0931 11 1.547 11 0.0206 11]
Total: 306.34670000000006
Mean: 6.126934
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4342.987969900001
Median total errors in population: 1175.0
Error averages by case: (208.1550043999997 5.259 173.38690149999994 5.798 157.85727769999968 5.132 194.8252054 5.631 184.91867850000037 4.908 165.1329755000003 12.962 166.0815014000003 5.0 197.5786436000004 5.727 191.4271103000005 11.84 147.50070060000021 12.846 157.29518119999958 4.868 131.81497589999933 4.391 155.10490309999975 5.13 173.75376479999983 5.063 181.71911749999953 5.772 132.3131105000003 4.314 157.54990280000007 4.988 145.69009820000045 5.092 208.02657120000057 5.771 175.48017330000013 4.859 168.00336120000028 4.99 153.3731632000001 5.149 133.77097819999972 4.244 166.24966270000027 4.976 166.16900720000004 5.1)
Error minima by case: (0.0894 2 1.5298 3 1.0759 1 1.6003 2 0.3916 2 1.7633 9 0.0991 2 1.2078 2 0.9707 9 1.3254 8 1.6601 1 0.1585 1 1.3498 2 0.9003 2 1.3167 3 0.1585 1 1.9477 1 0.9456 2 0.6259 2 0.0309 1 1.6183 2 0.7608 2 0.1585 1 1.547 2 0.0206 2)
Average genome size in population (length): 45.727
Average program size in population (points): 46.727
Average percent parens in population: 0.027
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.047625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.055
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6424989
--- Timings ---
Current time: 1529615067326 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.9 seconds, 42.0%
Fitness Testing:      9.4 seconds, 50.0%
Report:               1.4 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_flush} {:instruction float_max} {:instruction integer_swap} {:instruction float_sub} {:instruction float_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div in1 integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush integer_fromfloat float_pop float_flush float_max integer_swap float_sub float_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 3353.456222599999
Median total errors in population: 306.34670000000006
Error averages by case: (148.09124729999903 8.864 127.02062870000059 9.07 124.64039869999941 9.179 137.98132940000107 8.907 124.89011730000097 8.528 124.75625740000125 11.969 124.29639520000153 8.699 139.0294313000008 9.016 135.88276740000134 10.76 113.52421970000069 12.143 110.07972329999899 8.615 104.09812559999877 8.886 121.65785059999955 9.193 131.75737489999872 8.704 131.43808119999912 9.038 105.98998780000085 8.359 123.71522360000074 8.631 119.03970540000117 8.719 146.95661810000007 8.965 130.44493389999943 8.546 124.28318230000065 8.633 120.85693720000036 8.777 106.81329609999912 8.31 122.59284270000123 8.622 125.70754750000123 8.779)
Error minima by case: (0.0894 2 0.5298 3 0.0759 2 0.6003 2 0.3916 2 0.7633 10 0.0991 2 0.2078 2 0.0293 7 0.3254 8 0.6601 1 0.1585 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.9477 2 0.0544 2 0.3741 2 0.0309 1 0.6183 2 0.2392 2 0.0931 1 0.547 2 0.0206 2)
Average genome size in population (length): 48.837
Average program size in population (points): 49.837
Average percent parens in population: 0.023
Minimum age in population: 5.375
Maximum age in population: 9.375
Average age in population: 7.6373125
Median age in population: 7.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.061
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7650814
--- Timings ---
Current time: 1529615071113 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.5 seconds, 42.2%
Fitness Testing:     11.1 seconds, 49.3%
Report:               1.8 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction print_integer} {:instruction float_max} {:instruction float_min} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max print_integer float_max float_min float_swap integer_flush integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1648.362779399998
Median total errors in population: 306.34670000000006
Error averages by case: (59.96141779999923 11.242 56.73058819999881 11.193 56.75993050000123 11.887 58.54507239999895 11.22 52.05296540000085 10.955 53.880017799999294 11.301 54.18256819999974 11.1 58.35768239999864 11.141 54.61942449999967 10.082 47.52972500000083 12.077 49.322410200000476 11.071 50.14831360000007 11.91 54.14507100000133 11.949 56.25280520000046 11.113 57.97019700000104 11.19 52.467915800000966 11.1 55.792191499999035 11.083 54.337681599999534 11.13 57.92999329999952 11.255 52.81032099999963 10.955 54.71056150000036 11.048 57.301081599998966 11.177 52.309441699998985 11.088 53.24294099999922 11.096 56.476461200000934 11.163)
Error minima by case: (0.0894 2 0.5298 3 0.0759 2 0.6003 2 0.3916 2 0.7633 11 0.0991 2 0.2078 3 0.0293 8 0.3254 10 0.6601 2 0.4496 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.9477 2 0.0544 2 0.3741 2 0.0309 2 0.6183 2 0.2392 2 0.0931 1 0.547 2 0.0206 2)
Average genome size in population (length): 43.725
Average program size in population (points): 44.725
Average percent parens in population: 0.024
Minimum age in population: 6.5
Maximum age in population: 10.8125
Average age in population: 9.1521875
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.032
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8749314
--- Timings ---
Current time: 1529615074188 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.1 seconds, 43.1%
Fitness Testing:     12.3 seconds, 47.8%
Report:               2.2 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction float_shove} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec integer_yank float_flush integer_add in1 float_div integer_sub integer_fromfloat integer_add integer_yankdup integer_sub float_add float_shove float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_max 69.78423145127292 integer_mod -31.62335852033054 float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1624.8217701999974
Median total errors in population: 306.34670000000006
Error averages by case: (58.66775359999949 11.307 55.499177599998596 11.249 55.16470280000142 11.783 57.09607389999888 11.288 51.22244100000097 11.023 52.1880177999993 11.476 53.468171499999826 10.961 56.87972139999846 11.202 54.69941579999975 10.251 46.971748800000746 11.905 49.36071070000034 11.145 49.49666240000007 11.803 53.04102160000147 11.836 55.33240410000026 11.188 56.523147100001204 11.237 51.456989600001 11.168 54.494348399998934 11.14 53.54212319999972 11.194 56.91430959999972 11.31 52.621660499999734 10.848 53.801653000000506 11.119 55.97169199999925 11.236 51.22353479999893 11.151 52.56276999999924 11.161 55.408519000000666 11.232)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 11 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 42.445
Average program size in population (points): 43.445
Average percent parens in population: 0.024
Minimum age in population: 7.5
Maximum age in population: 12.515625
Average age in population: 10.60384375
Median age in population: 10.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9814189
--- Timings ---
Current time: 1529615076835 milliseconds
Total Time:          28.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.5 seconds, 43.9%
Fitness Testing:     13.3 seconds, 46.9%
Report:               2.5 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction print_integer} {:instruction float_max} {:instruction float_min} {:instruction float_swap} {:instruction float_flush} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_min} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max print_integer float_max float_min float_swap float_flush integer_pop float_yankdup float_flush float_min float_swap integer_flush integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1492.8423594999986
Median total errors in population: 286.4601
Error averages by case: (52.2890522000008 11.3 50.12676039999901 11.247 50.01926070000121 11.311 51.565868799998874 11.29 48.28251720000065 11.031 46.72656829999929 11.938 49.44674720000025 10.469 51.326188799998675 11.211 49.90034560000014 10.727 43.07456620000082 11.411 46.022489000000476 11.157 44.083708800000075 11.325 47.84967580000109 11.341 48.27070829999946 11.189 51.11976320000098 11.223 46.329801400001 11.172 49.32244669999923 11.137 46.98687040000048 11.172 49.67330170000048 11.302 46.38037850000022 10.359 48.61099680000007 11.123 51.14943360000106 11.252 46.05251069999894 11.151 47.448923999999224 11.163 51.54647519999895 11.236)
Error minima by case: (0.0894 5 0.4702 4 0.0759 4 0.3997 4 0.3916 4 0.2367 10 0.0991 6 0.2078 4 0.0293 9 0.3254 11 0.3399 3 0.4496 4 0.3498 4 0.0997 4 0.3167 4 0.0738 4 0.0523 4 0.0544 5 0.3741 5 0.0309 4 0.3817 4 0.2392 4 0.0931 4 0.453 4 0.0206 5)
Average genome size in population (length): 40.619
Average program size in population (points): 41.619
Average percent parens in population: 0.025
Minimum age in population: 8.5
Maximum age in population: 13.921875
Average age in population: 12.01609375
Median age in population: 12.0546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.032
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10830914
--- Timings ---
Current time: 1529615079629 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 44.9%
Fitness Testing:     14.3 seconds, 45.9%
Report:               2.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction integer_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_shove integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop float_pop integer_rot float_yank in1 print_integer integer_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1329.5451463999989
Median total errors in population: 286.4601
Error averages by case: (47.531288400000506 11.235 44.26858819999943 11.2 43.20550170000051 11.134 45.994873299999014 11.248 38.817992799999935 10.995 41.702645399999355 12.056 42.966575800000335 10.275 45.81330579999915 11.177 41.469670599999624 10.856 35.399613800000544 11.264 36.98135110000035 11.114 37.08676320000007 11.151 41.43087740000053 11.165 43.13512579999944 11.145 45.26951370000046 11.176 39.03798960000087 11.126 42.761865099999746 11.087 41.40161280000064 11.114 45.29917920000067 11.25 42.13381919999977 10.205 41.935271299999656 11.093 43.9066688000007 11.194 38.79353479999907 11.095 40.89331699999927 11.123 44.64820159999941 11.182)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 9 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 40.734
Average program size in population (points): 41.734
Average percent parens in population: 0.025
Minimum age in population: 9.5
Maximum age in population: 15.51171875
Average age in population: 13.56499609375
Median age in population: 13.623046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.037
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11850239
--- Timings ---
Current time: 1529615082574 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.7 seconds, 46.0%
Fitness Testing:     15.3 seconds, 44.8%
Report:               3.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_dup})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_inc integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_dup)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1229.3924155999982
Median total errors in population: 286.4601
Error averages by case: (43.475735400000374 11.238 40.1436191999998 11.173 38.607930400000214 11.133 41.67087179999905 11.223 35.713060399999776 11.01 36.501560999999406 12.074 37.888727700000345 10.247 41.45726679999945 11.164 37.50840429999938 10.877 32.95894850000055 11.222 34.7540306000004 11.102 34.55728270000007 11.135 36.42874080000023 11.158 39.23904829999942 11.147 40.990197000000244 11.16 36.392757600000905 11.125 37.89365500000012 11.103 37.26696120000058 11.131 41.260056900000606 11.249 37.46559399999944 10.193 37.48656359999938 11.091 39.86118280000033 11.19 36.02096899999905 11.1 36.242108399999296 11.12 40.064142199999786 11.178)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.2288 2 0.2367 11 0.0991 3 0.2078 2 0.0293 9 0.3254 9 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 40.43
Average program size in population (points): 41.43
Average percent parens in population: 0.025
Minimum age in population: 12.375
Maximum age in population: 17.072265625
Average age in population: 15.0974296875
Median age in population: 15.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.028
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12861739
--- Timings ---
Current time: 1529615085451 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.3 seconds, 46.7%
Fitness Testing:     16.3 seconds, 44.0%
Report:               3.3 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_flush} {:instruction float_max} {:instruction integer_swap} {:instruction float_sub} {:instruction float_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div in1 integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod float_dup float_yankdup float_flush integer_fromfloat float_pop float_flush float_max integer_swap float_sub float_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1628.8842046999991
Median total errors in population: 286.4601
Error averages by case: (60.76125520000126 11.288 55.31976039999852 11.235 55.65833660000153 11.164 56.97046909999887 11.282 52.008866800000995 11.007 53.802674699999194 12.081 54.80408030000038 10.32 56.76439659999837 11.202 52.30505150000038 10.866 49.23082020000092 11.293 49.00312940000056 11.135 48.29725920000007 11.161 53.20172520000149 11.189 56.21903209999929 11.179 56.43434670000131 11.198 50.472727600001036 11.145 54.78728979999876 11.114 54.488579200000686 11.154 57.914697200000695 11.309 54.11746810000076 10.213 52.54999680000046 11.093 56.78338640000168 11.233 50.28960379999891 11.129 51.164111999999186 11.143 57.1861397999984 11.216)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 2 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 40.241
Average program size in population (points): 41.241
Average percent parens in population: 0.025
Minimum age in population: 13.578125
Maximum age in population: 18.5078125
Average age in population: 16.5588359375
Median age in population: 16.62353515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.037
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13868489
--- Timings ---
Current time: 1529615088419 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 47.1%
Fitness Testing:     17.4 seconds, 43.6%
Report:               3.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 70.49131342586575} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_inc integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 70.49131342586575 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1567.279386499999
Median total errors in population: 286.4601
Error averages by case: (57.07134460000097 11.269 52.50417099999874 11.217 54.2294884000013 11.166 53.76526849999882 11.27 50.864258400000836 11.019 51.89343799999918 12.069 51.657882100000386 10.3 53.51698099999864 11.206 49.647051500000316 10.866 48.752494800000946 11.266 47.12012940000054 11.134 46.06550720000007 11.169 52.38342480000136 11.184 53.40683269999927 11.167 53.378446500001026 11.198 48.103096600001095 11.138 53.728185199999 11.115 51.6965248000007 11.154 54.563323100000716 11.29 51.19943720000041 10.221 50.57199680000026 11.106 52.78634320000144 11.225 47.84413829999884 11.119 48.96656499999913 11.129 53.3530573999987 11.213)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 9 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 40.431
Average program size in population (points): 41.431
Average percent parens in population: 0.025
Minimum age in population: 15.33984375
Maximum age in population: 20.00048828125
Average age in population: 17.993794921875
Median age in population: 18.044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14879889
--- Timings ---
Current time: 1529615091254 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.3 seconds, 47.4%
Fitness Testing:     18.5 seconds, 43.2%
Report:               3.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction 69.78423145127292} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_sub integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_max 69.78423145127292 float_flush in2 integer_inc integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1365.4648590999986
Median total errors in population: 286.4601
Error averages by case: (48.227897600000965 11.247 45.24052859999915 11.208 43.58370280000086 11.156 46.691470599998915 11.249 42.36591660000036 11.016 42.53041409999924 12.071 45.078792000000355 10.282 46.47443559999897 11.175 42.74427519999984 10.879 40.39537580000087 11.243 41.46342990000049 11.126 37.981662400000076 11.158 41.507021600000726 11.183 44.27382969999933 11.165 46.12519700000072 11.181 40.11713720000101 11.144 42.95734839999953 11.102 42.77301440000064 11.137 46.068445400000684 11.268 42.91840630000011 10.194 42.83708829999987 11.1 46.5374960000011 11.211 39.82034859999894 11.122 41.7517529999992 11.141 47.047871999998954 11.194)
Error minima by case: (0.0894 5 0.4702 4 0.0759 4 0.3997 5 0.3916 3 0.2367 11 0.0991 5 0.2078 4 0.0293 9 0.3254 10 0.3399 4 0.4496 3 0.3498 4 0.0997 5 0.3167 6 0.0738 3 0.0523 4 0.0544 5 0.3741 5 0.0309 5 0.3817 4 0.2392 5 0.0931 3 0.453 4 0.0206 5)
Average genome size in population (length): 40.096
Average program size in population (points): 41.096
Average percent parens in population: 0.025
Minimum age in population: 17.216796875
Maximum age in population: 21.248291015625
Average age in population: 19.52383959960938
Median age in population: 19.5496826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 15882714
--- Timings ---
Current time: 1529615093897 milliseconds
Total Time:          45.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.7 seconds, 47.7%
Fitness Testing:     19.5 seconds, 42.8%
Report:               4.2 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_inc} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_mult} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_inc in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop float_mult float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1360.6570007999992
Median total errors in population: 286.4601
Error averages by case: (47.945182400000576 11.276 46.336886199999064 11.229 45.08108230000089 11.178 47.81307539999887 11.288 43.35695760000055 11.021 40.81341409999932 12.034 44.82308930000038 10.335 47.561760399998924 11.212 44.42837380000004 10.847 37.14137580000081 11.254 40.54237080000053 11.149 34.88571680000007 11.198 42.33407100000086 11.219 43.33222849999942 11.17 47.477997400000746 11.209 37.73403020000095 11.169 44.014191499999406 11.122 41.85123200000067 11.165 44.8931864000007 11.308 40.99115909999998 10.22 44.34298109999998 11.108 46.5934960000011 11.247 37.67874509999899 11.15 42.82950499999917 11.148 47.37589259999902 11.223)
Error minima by case: (0.0894 9 0.4702 9 0.0759 10 0.3997 10 0.3916 10 0.2367 10 0.0991 9 0.2078 9 0.0293 8 0.3254 10 0.3399 10 0.4496 10 0.3498 10 0.0997 9 0.3167 9 0.0738 10 0.0523 9 0.0544 9 0.3741 9 0.0309 9 0.3817 9 0.2392 10 0.0931 10 0.453 9 0.0206 9)
Average genome size in population (length): 39.806
Average program size in population (points): 40.806
Average percent parens in population: 0.025
Minimum age in population: 18.31005859375
Maximum age in population: 23.07958984375
Average age in population: 20.98943908691406
Median age in population: 21.020751953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.038
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16878314
--- Timings ---
Current time: 1529615096570 milliseconds
Total Time:          48.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.1 seconds, 48.1%
Fitness Testing:     20.4 seconds, 42.4%
Report:               4.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_sub} {:instruction in1} {:instruction print_integer} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod float_dup_times float_mod in2 integer_min integer_rot float_dec float_yankdup float_flush integer_add in1 float_div in1 integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot integer_sub in1 print_integer float_swap integer_flush integer_pop float_yankdup float_flush in2 float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1577.436295799999
Median total errors in population: 286.4601
Error averages by case: (58.244881000001065 11.329 54.39840939999877 11.265 54.218082300001356 11.202 56.98567119999888 11.322 47.30052500000077 11.032 49.03378109999929 12.072 52.28599020000039 10.364 56.744851199998585 11.234 51.01874780000032 10.845 44.62609800000087 11.277 48.149489000000465 11.162 46.128158400000075 11.21 50.72502160000129 11.241 52.180134799999365 11.221 56.716296800001075 11.243 49.11472760000103 11.193 52.75229609999909 11.153 51.05803520000067 11.192 54.65907850000069 11.354 48.84774620000037 10.238 52.66870660000029 11.118 55.96601760000147 11.275 49.1437899999989 11.172 49.74784699999922 11.185 55.56391319999866 11.259)
Error minima by case: (0.0894 9 0.4702 9 0.0759 10 0.3997 9 0.3916 10 0.2367 10 0.0991 8 0.2078 9 0.0293 8 0.3254 10 0.3399 8 0.4496 10 0.3498 9 0.0997 9 0.3167 9 0.0738 9 0.0523 9 0.0544 9 0.3741 9 0.0309 8 0.3817 8 0.2392 9 0.0931 9 0.453 9 0.0206 9)
Average genome size in population (length): 39.897
Average program size in population (points): 40.897
Average percent parens in population: 0.025
Minimum age in population: 19.8251953125
Maximum age in population: 24.4415283203125
Average age in population: 22.44208312988281
Median age in population: 22.46661376953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.04
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17876214
--- Timings ---
Current time: 1529615099373 milliseconds
Total Time:          50.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.6 seconds, 48.4%
Fitness Testing:     21.4 seconds, 42.1%
Report:               4.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_min} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction print_integer} {:instruction float_max} {:instruction float_pop})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub integer_min integer_rot float_yank in1 print_integer float_mult float_max print_integer float_max float_pop)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 1484.3456491999987
Median total errors in population: 286.4601
Error averages by case: (53.02521850000082 11.259 49.85737929999886 11.216 50.668354200001225 11.156 51.31576969999887 11.273 49.06719850000087 11.015 47.65825689999928 12.062 49.491102500000416 10.308 51.09251959999871 11.191 49.619430200000274 10.862 43.14778030000083 11.246 45.19392960000048 11.128 40.13151150000007 11.162 48.660220900001256 11.193 48.90122969999937 11.165 50.82116310000095 11.183 42.26385890000098 11.141 50.11474349999914 11.112 47.492459700000694 11.15 50.48444150000072 11.295 47.50675150000035 10.193 48.38896970000022 11.092 50.557866100001355 11.242 42.127569599998964 11.127 47.263799699999225 11.13 51.38012449999878 11.213)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 11 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 39.557
Average program size in population (points): 40.557
Average percent parens in population: 0.025
Minimum age in population: 21.350830078125
Maximum age in population: 25.8521728515625
Average age in population: 23.91100161743164
Median age in population: 23.9693603515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.027
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 18865689
--- Timings ---
Current time: 1529615102159 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 48.6%
Fitness Testing:     22.5 seconds, 41.7%
Report:               5.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction float_pop} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction tag_float_323} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_flush} {:instruction tag_float_718} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_add} {:instruction integer_sub} {:instruction float_min} {:instruction float_rot} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_sub} {:instruction tagged_636} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction -6} {:instruction integer_yank} {:instruction in2} {:instruction integer_flush} {:instruction float_max} {:instruction float_sub} {:instruction float_add} {:instruction float_div} {:instruction float_dec} {:instruction float_pop} {:instruction float_div} {:instruction float_flush} {:instruction integer_swap} {:instruction float_shove} {:instruction float_dup_items} {:instruction integer_add} {:instruction print_float} {:instruction integer_max} {:instruction tagged_881} {:instruction -54} {:instruction float_min})
Best program: (float_dec float_mod integer_yankdup float_rot float_dup_times float_mod in2 float_swap integer_add in1 integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank integer_rot float_yank in1 float_pop float_mult float_max integer_min float_max float_max 69.78423145127292 integer_mod -31.62335852033054 in1 print_integer float_mult tag_float_323 float_stackdepth integer_dup_times float_flush tag_float_718 integer_fromfloat float_dup float_shove integer_inc integer_stackdepth float_mod float_add integer_sub float_min float_rot float_yank integer_dup integer_mod integer_min integer_pop float_tan integer_sub tagged_636 integer_dup_times integer_swap integer_fromfloat float_frominteger -6 integer_yank in2 integer_flush float_max float_sub float_add float_div float_dec float_pop float_div float_flush integer_swap float_shove float_dup_items integer_add print_float integer_max tagged_881 -54 float_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 1710.9495302999987
Median total errors in population: 286.4601
Error averages by case: (64.60443400000126 11.312 60.23776039999842 11.261 59.27434990000151 11.178 62.050069399998705 11.299 54.5805172000009 11.018 54.9159352999992 12.093 56.6115668000004 10.335 61.847604399998204 11.226 55.51755340000047 10.855 49.956963000000876 11.311 53.210809200000575 11.145 49.877259200000076 11.179 55.8801778000015 11.208 59.583334199999264 11.204 61.503663400001415 11.236 52.51472760000113 11.168 57.747969699998905 11.129 56.906416000000725 11.182 62.07294900000075 11.32 56.745622600000544 10.247 57.542760200000544 11.131 60.60303760000166 11.259 52.5486037999988 11.129 55.61101799999909 11.168 60.17242819999849 11.239)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 2 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 39.786
Average program size in population (points): 40.786
Average percent parens in population: 0.025
Minimum age in population: 22.85858154296875
Maximum age in population: 27.16986083984375
Average age in population: 25.44673374938965
Median age in population: 25.47141265869141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.037
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 19861089
--- Timings ---
Current time: 1529615105083 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.6 seconds, 48.9%
Fitness Testing:     23.4 seconds, 41.5%
Report:               5.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction float_max} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_add in1 float_div float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_inc integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 float_max integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1464.1459544999982
Median total errors in population: 286.4601
Error averages by case: (52.54861280000052 11.209 48.869170999999206 11.16 49.732019700000805 11.122 50.19666819999908 11.207 44.8495680000004 10.998 47.46741409999941 12.059 47.75828750000033 10.23 49.97377319999911 11.137 44.80735240000004 10.885 44.047677400000666 11.232 45.19846930000035 11.096 40.80530560000007 11.127 48.06717380000087 11.136 48.943832699999454 11.125 49.60939660000058 11.134 43.301391800000786 11.099 49.34292369999948 11.076 47.45347040000057 11.097 50.66920080000059 11.227 47.88459170000015 10.158 47.552141900000045 11.055 48.789300000000885 11.162 43.22476589999917 11.086 46.578470999999396 11.095 49.40497499999923 11.158)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 2 0.2078 2 0.0293 9 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 39.637
Average program size in population (points): 40.637
Average percent parens in population: 0.025
Minimum age in population: 24.3984375
Maximum age in population: 29.07543182373047
Average age in population: 26.91386743927002
Median age in population: 26.94451522827148
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 20852414
--- Timings ---
Current time: 1529615107944 milliseconds
Total Time:          59.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 49.1%
Fitness Testing:     24.4 seconds, 41.0%
Report:               5.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_inc} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_mult} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_inc in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop float_mult float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 1469.311984199999
Median total errors in population: 286.4601
Error averages by case: (53.707165800000645 11.272 49.821409399999055 11.212 48.89879200000094 11.157 51.26487029999888 11.258 45.81199960000053 11.011 46.35507099999926 12.066 47.6565848000004 10.296 51.02122779999899 11.179 46.912344499999996 10.863 41.4083996000008 11.256 41.6521294000004 11.125 42.31970880000007 11.163 46.229824000001 11.185 49.49823149999936 11.172 50.859613500000656 11.184 44.90572760000103 11.148 47.889080599999374 11.108 47.81657920000068 11.14 51.126071300000696 11.275 46.39749900000008 10.203 47.78923340000004 11.092 50.935821600001134 11.216 45.418883099998915 11.122 44.586658999999244 11.145 50.98105739999899 11.2)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 9 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 39.49
Average program size in population (points): 40.49
Average percent parens in population: 0.026
Minimum age in population: 25.61030578613281
Maximum age in population: 30.15169525146484
Average age in population: 28.36478331756592
Median age in population: 28.40065574645996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 21840114
--- Timings ---
Current time: 1529615110638 milliseconds
Total Time:          62.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.7 seconds, 49.3%
Fitness Testing:     25.3 seconds, 40.7%
Report:               6.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_cos} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction print_float} {:instruction integer_shove} {:instruction float_div} {:instruction integer_max} {:instruction float_dup} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_min})
Best program: (float_dup_times float_mod in2 float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup float_cos integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush integer_flush integer_pop float_yankdup float_flush in2 integer_dup_items integer_sub print_float integer_shove float_div integer_max float_dup integer_inc integer_dec float_frominteger integer_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1811.8132865999987
Median total errors in population: 286.4601
Error averages by case: (65.90289760000095 11.298 64.19370079999871 11.259 62.66756430000133 11.176 65.4934690999989 11.301 58.55808360000094 11.036 60.12114809999932 12.076 62.53917940000041 10.329 65.24839659999861 11.232 61.45996360000039 10.852 55.15116940000075 11.275 57.195508700000396 11.168 53.907856000000066 11.193 60.862075000001376 11.206 62.14623149999936 11.201 64.93607990000105 11.224 56.58831800000095 11.173 62.180237499998995 11.126 60.5706880000007 11.181 63.62919360000071 11.317 60.60834450000048 10.249 62.6229968000004 11.131 63.92114720000144 11.259 56.64285899999899 11.144 61.502017999999254 11.166 64.3521603999987 11.24)
Error minima by case: (0.0894 9 0.4702 9 0.0759 10 0.3997 10 0.3916 10 0.2367 10 0.0991 9 0.2078 9 0.0293 8 0.3254 10 0.3399 10 0.4496 10 0.3498 10 0.0997 9 0.3167 9 0.0738 10 0.0523 9 0.0544 9 0.3741 9 0.0309 9 0.3817 9 0.2392 9 0.0931 10 0.453 9 0.0206 9)
Average genome size in population (length): 39.186
Average program size in population (points): 40.186
Average percent parens in population: 0.026
Minimum age in population: 27.10090637207031
Maximum age in population: 31.72562789916992
Average age in population: 29.83298093605042
Median age in population: 29.86861419677734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.031
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 22820164
--- Timings ---
Current time: 1529615113305 milliseconds
Total Time:          64.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.1 seconds, 49.5%
Fitness Testing:     26.2 seconds, 40.5%
Report:               6.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction print_integer} {:instruction print_integer} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_min} {:instruction integer_inc} {:instruction float_dec} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_add in1 float_div float_min integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_pop integer_rot float_yank in1 print_integer float_mult float_max print_integer print_integer integer_dup_items integer_rot integer_min integer_inc float_dec 69.78423145127292 integer_mod integer_dup_items float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1372.702036799999
Median total errors in population: 286.4601
Error averages by case: (48.797003600000295 11.269 44.71358819999943 11.214 46.18779200000057 11.166 46.089271499999256 11.266 45.26469200000044 11.021 42.49320129999958 12.071 43.873593800000336 10.302 45.851058999999374 11.191 44.362403100000066 10.867 39.79214560000051 11.266 40.21409000000011 11.142 37.24266240000007 11.164 44.190774600000665 11.188 44.81072699999967 11.17 45.59088030000034 11.187 39.70098960000057 11.14 45.68108059999971 11.112 43.60850400000061 11.143 46.30793460000063 11.283 42.95803549999999 10.216 43.24956150000004 11.099 45.355213600000695 11.223 40.3995347999993 11.129 41.78148799999954 11.143 46.00881019999944 11.205)
Error minima by case: (0.0894 5 0.4702 5 0.0759 5 0.3997 5 0.3916 5 0.2367 10 0.0991 4 0.2078 5 0.0293 9 0.3254 10 0.3399 4 0.4496 2 0.3498 5 0.0997 5 0.3167 5 0.0738 2 0.0523 5 0.0544 4 0.3741 6 0.0309 5 0.3817 4 0.2392 4 0.0931 2 0.453 4 0.0206 4)
Average genome size in population (length): 39.388
Average program size in population (points): 40.388
Average percent parens in population: 0.026
Minimum age in population: 28.67605209350586
Maximum age in population: 33.1151294708252
Average age in population: 31.33211515617371
Median age in population: 31.36369848251343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 23805164
--- Timings ---
Current time: 1529615116200 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.7 seconds, 49.8%
Fitness Testing:     27.2 seconds, 40.1%
Report:               6.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction float_add} {:instruction integer_sub} {:instruction in1} {:instruction print_integer} {:instruction float_add} {:instruction float_max} {:instruction -57.4607898102363} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_sub integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_max 69.78423145127292 integer_mod float_add integer_sub in1 print_integer float_add float_max -57.4607898102363 float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1345.9144993999987
Median total errors in population: 286.4601
Error averages by case: (47.48682480000018 11.255 44.1361179999996 11.222 44.680488400000456 11.167 45.70707239999918 11.271 41.804651000000334 11.021 41.62038479999954 12.068 43.419386600000365 10.315 45.4966823999995 11.185 42.963040799999874 10.853 38.861193200000415 11.262 40.599370800000216 11.144 36.319212800000074 11.169 42.62472520000051 11.196 43.192726999999614 11.163 45.14356360000019 11.183 38.68406340000058 11.155 44.06328979999982 11.103 41.818395200000595 11.142 44.824682800000666 11.281 41.666942799999916 10.208 42.631416399999814 11.094 44.70106080000058 11.225 38.43953479999937 11.125 41.49467599999947 11.146 45.37799559999954 11.204)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 9 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 39.278
Average program size in population (points): 40.278
Average percent parens in population: 0.026
Minimum age in population: 30.53900671005249
Maximum age in population: 34.66876411437988
Average age in population: 32.82070727586746
Median age in population: 32.85046291351318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.038
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 24787514
--- Timings ---
Current time: 1529615118938 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.2 seconds, 50.0%
Fitness Testing:     28.1 seconds, 39.9%
Report:               7.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_min} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_add} {:instruction float_max} {:instruction float_min} {:instruction 68.86461203912393} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_pop} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction tag_float_323} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_flush} {:instruction print_float} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction in1} {:instruction integer_sub} {:instruction float_min} {:instruction float_rot} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_pop})
Best program: (float_cos float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_add in1 float_div float_min integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_min float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_add float_max float_min 68.86461203912393 integer_mod integer_pop float_pop float_flush in2 integer_inc tag_float_323 float_stackdepth integer_dup_times float_flush print_float integer_fromfloat float_dup float_shove integer_inc integer_stackdepth float_mod in1 integer_sub float_min float_rot float_yank integer_dup integer_mod integer_min integer_pop)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1536.0960679999985
Median total errors in population: 286.4601
Error averages by case: (56.20636120000066 11.303 52.79317099999921 11.236 52.49421140000074 11.176 54.56246759999887 11.282 48.058824900000346 11.02 48.7786692999993 12.092 50.551071300000366 10.323 54.370357599999075 11.207 49.73753389999993 10.851 44.600153400000806 11.286 47.1791885000005 11.153 43.32595680000007 11.178 49.72693080000079 11.201 51.43002909999929 11.188 54.00412980000062 11.213 45.686170400000975 11.17 51.48375419999954 11.125 48.68117760000063 11.155 53.47343820000064 11.305 49.47522089999998 10.238 50.80090529999979 11.131 52.1567120000009 11.241 45.53404519999896 11.134 49.35428299999921 11.162 53.03630459999914 11.225)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 39.092
Average program size in population (points): 40.092
Average percent parens in population: 0.026
Minimum age in population: 31.95934677124023
Maximum age in population: 36.27292346954346
Average age in population: 34.24343441605568
Median age in population: 34.27944850921631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 25765064
--- Timings ---
Current time: 1529615121803 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 50.0%
Fitness Testing:     29.2 seconds, 39.9%
Report:               7.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction float_min} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_cos} {:instruction integer_rot} {:instruction in1} {:instruction float_sin} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_rot} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292})
Best program: (print_integer float_mod in2 float_swap integer_add float_dec float_dec float_yankdup integer_inc float_min in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup float_cos integer_rot in1 float_sin print_integer float_mult float_max integer_rot float_max float_min 69.78423145127292)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 1253.9620975999987
Median total errors in population: 286.4601
Error averages by case: (44.00864600000028 11.238 40.42223719999959 11.209 41.14924740000044 11.161 42.15947359999893 11.258 38.30039319999992 11.024 38.17012419999926 12.037 39.95139560000034 10.311 41.96251359999945 11.178 39.79623519999961 10.853 33.56237580000074 11.235 35.140730400000415 11.138 33.319065600000066 11.172 39.07592280000055 11.192 39.466926399999345 11.153 41.471463800000265 11.178 35.48154680000091 11.144 40.56466219999981 11.091 37.69061280000063 11.139 41.48843100000065 11.266 38.125004599999535 10.198 38.91088959999956 11.086 40.90645280000056 11.212 35.282093399999034 11.124 37.75786399999919 11.142 41.86578959999949 11.193)
Error minima by case: (0.0894 9 0.4702 9 0.0759 10 0.3997 10 0.3916 10 0.2367 10 0.0991 9 0.2078 9 0.0293 8 0.3254 10 0.3399 10 0.4496 10 0.3498 10 0.0997 9 0.3167 9 0.0738 10 0.0523 9 0.0544 9 0.3741 9 0.0309 9 0.3817 8 0.2392 10 0.0931 9 0.453 9 0.0206 10)
Average genome size in population (length): 38.613
Average program size in population (points): 39.613
Average percent parens in population: 0.026
Minimum age in population: 32.95934677124023
Maximum age in population: 37.96885180473328
Average age in population: 35.6775696502924
Median age in population: 35.72323083877563
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.04
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 26730639
--- Timings ---
Current time: 1529615124481 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.1 seconds, 50.1%
Fitness Testing:     30.2 seconds, 39.7%
Report:               7.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_sub} {:instruction float_div} {:instruction integer_inc} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_sub} {:instruction float_pop} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction tagged_726} {:instruction in1} {:instruction print_integer} {:instruction integer_inc} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction 69.78423145127292} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_sub float_div integer_inc in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_sub float_pop float_add integer_sub float_pop float_pop integer_rot tagged_726 in1 print_integer integer_inc print_integer float_mult float_max float_max float_max 69.78423145127292 integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1517.858582799999
Median total errors in population: 286.4601
Error averages by case: (56.46418240000047 11.294 51.75887959999929 11.259 50.58310890000071 11.177 53.58987029999894 11.302 49.155342400000386 11.025 48.97246189999934 12.084 50.50538660000034 10.338 53.39222779999916 11.219 48.152875699999846 10.847 46.94077100000074 11.283 46.01523390000044 11.162 40.732259200000065 11.182 48.15697620000079 11.216 51.548228499999425 11.201 52.97498010000051 11.223 43.36158000000089 11.167 49.72255129999953 11.124 49.482232000000636 11.173 53.71818640000065 11.32 48.89791240000006 10.239 48.8834699999999 11.12 52.49706080000086 11.254 43.34860379999906 11.138 47.422205999999264 11.174 52.82899559999924 11.232)
Error minima by case: (0.0894 5 0.4702 5 0.0759 5 0.3997 5 0.3916 5 0.2367 10 0.0991 4 0.2078 5 0.0293 9 0.3254 10 0.3399 4 0.4496 2 0.3498 5 0.0997 5 0.3167 5 0.0738 2 0.0523 5 0.0544 4 0.3741 6 0.0309 5 0.3817 4 0.2392 4 0.0931 2 0.453 4 0.0206 4)
Average genome size in population (length): 38.246
Average program size in population (points): 39.246
Average percent parens in population: 0.026
Minimum age in population: 34.34709358215332
Maximum age in population: 39.2584627866745
Average age in population: 37.18191365933418
Median age in population: 37.23167523741722
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.044
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 27686914
--- Timings ---
Current time: 1529615127262 milliseconds
Total Time:          78.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.6 seconds, 50.3%
Fitness Testing:     31.1 seconds, 39.5%
Report:               8.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_pop} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_mult} {:instruction in1} {:instruction print_integer} {:instruction float_shove} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction 47} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_div} {:instruction float_flush} {:instruction float_sub} {:instruction float_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div in1 integer_fromfloat integer_add integer_yankdup float_pop float_add integer_sub float_pop integer_rot integer_mult in1 print_integer float_shove float_max integer_min float_max float_min 69.78423145127292 integer_mod 47 float_dup_items float_flush float_div float_flush float_sub float_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1433.8871196999987
Median total errors in population: 286.4601
Error averages by case: (51.21716580000058 11.279 46.996111399999215 11.232 48.677108900000846 11.17 48.463867299998896 11.288 48.22777340000047 11.02 45.66867469999929 12.076 46.58628750000042 10.319 48.23914979999911 11.205 47.402179799999985 10.853 43.75051860000088 11.274 41.92254810000045 11.14 39.23575520000007 11.173 46.66367580000092 11.191 47.05623149999938 11.181 48.021813100000514 11.202 41.75546560000102 11.149 48.102446699999504 11.116 45.76268800000071 11.147 48.590323100000724 11.295 45.55652989999998 10.213 45.42766869999985 11.102 47.82930000000095 11.232 41.52367279999892 11.132 44.27418899999923 11.157 48.57397499999916 11.216)
Error minima by case: (0.0894 2 0.4702 3 0.0759 2 0.3997 3 0.3916 2 0.2367 11 0.0991 2 0.2078 3 0.0293 9 0.3254 9 0.3399 2 0.4496 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 38.021
Average program size in population (points): 39.021
Average percent parens in population: 0.027
Minimum age in population: 35.34709358215332
Maximum age in population: 40.68424227833748
Average age in population: 38.67354966267943
Median age in population: 38.73784044384956
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 28637539
--- Timings ---
Current time: 1529615129813 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.0 seconds, 50.4%
Fitness Testing:     32.0 seconds, 39.4%
Report:               8.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_min} {:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_shove} {:instruction in1} {:instruction float_div} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 68.86461203912393} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_mod} {:instruction in2} {:instruction integer_inc} {:instruction float_sub} {:instruction float_max})
Best program: (float_dup_times integer_min float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_shove in1 float_div integer_fromfloat integer_add integer_yankdup in1 print_integer float_mult integer_rot float_yank in1 print_integer float_mult float_mult float_max integer_min float_max float_min 68.86461203912393 integer_yankdup integer_pop float_yankdup float_mod in2 integer_inc float_sub float_max)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1720.5172157999991
Median total errors in population: 286.4601
Error averages by case: (65.79214920000092 11.324 59.56523059999887 11.271 60.89633660000119 11.196 62.228868799998914 11.321 53.22486680000076 11.023 56.30896459999928 12.09 57.459269500000396 10.376 62.00018879999879 11.232 56.68478780000026 10.836 49.13412180000087 11.294 52.00852840000045 11.163 50.24095680000006 11.207 56.97972520000122 11.241 59.847035099999296 11.208 61.85603000000088 11.232 52.12924420000082 11.193 59.151289799999134 11.13 57.44403520000068 11.189 62.783208000000684 11.352 57.39693160000021 10.235 57.62852360000014 11.128 60.7937552000013 11.279 53.29504519999914 11.164 55.56073599999925 11.178 60.99238699999881 11.253)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 37.901
Average program size in population (points): 38.901
Average percent parens in population: 0.027
Minimum age in population: 37.3123494386673
Maximum age in population: 42.03972724080086
Average age in population: 40.1387889534533
Median age in population: 40.19238298386335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.04
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 29585164
--- Timings ---
Current time: 1529615132481 milliseconds
Total Time:          84.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.5 seconds, 50.5%
Fitness Testing:     32.9 seconds, 39.2%
Report:               8.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_div} {:instruction float_div} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_min} {:instruction float_frominteger} {:instruction float_dup_items})
Best program: (float_dup_times float_mod float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_fromfloat in1 float_div float_div integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_pop integer_pop float_min float_frominteger float_dup_items)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1386.5972599999989
Median total errors in population: 286.4601
Error averages by case: (51.989182400000395 11.243 46.28505179999956 11.18 46.487577600000456 11.125 48.113268499999194 11.225 41.08399280000014 10.973 44.10317199999955 12.077 44.79148570000031 10.27 47.93298099999931 11.135 44.371080799999994 10.857 36.18626460000049 11.285 36.763528400000204 11.082 37.60865440000007 11.127 43.99552760000055 11.16 47.16712879999963 11.149 47.43707990000026 11.143 40.20239180000056 11.111 45.56691739999974 11.076 44.83717760000054 11.108 49.53118640000059 11.248 45.161128200000036 10.182 44.26005039999995 11.06 46.90682160000058 11.188 39.28595209999936 11.063 42.011641999999505 11.108 47.18101619999955 11.162)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 37.917
Average program size in population (points): 38.917
Average percent parens in population: 0.027
Minimum age in population: 38.97636313736439
Maximum age in population: 43.48414553701878
Average age in population: 41.62833877982944
Median age in population: 41.70127254351974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.041
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 30533139
--- Timings ---
Current time: 1529615135262 milliseconds
Total Time:          86.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.0 seconds, 50.7%
Fitness Testing:     33.9 seconds, 39.0%
Report:               8.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 11494.901400000002
Test mean error for best: 5.74745
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164
         
Correct output: 106.5297912457 | Program output: 106
          
Correct output: 67.0758504978  | Program output: 67
           
Correct output: 136.6003415923 | Program output: 136
          
Correct output: 0.3915927699   | Program output: 0
            
Correct output: -17.2367149126 | Program output: -18
          
Correct output: -19.900899189  | Program output: -19
          
Correct output: 139.2078452432 | Program output: 139
          
Correct output: 4.970708678    | Program output: 5
            
Correct output: -10.6746103067 | Program output: -11
          
Correct output: 48.6600799051  | Program output: 48
           
Correct output: 29.5504393334  | Program output: 29
           
Correct output: 33.3497873494  | Program output: 33
           
Correct output: -94.0996845263 | Program output: -94
          
Correct output: 129.3166897457 | Program output: 129
          
Correct output: 52.9261893635  | Program output: 52
           
Correct output: 44.9476623686  | Program output: 44
           
Correct output: -61.0543762286 | Program output: -61
          
Correct output: -126.3741080035 | Program output: -126
         
Correct output: -54.969119896  | Program output: -54
          
Correct output: 76.6182845413  | Program output: 76
           
Correct output: -80.2391916219 | Program output: -80
          
Correct output: 58.0930783645  | Program output: 58
           
Correct output: 56.5469735654  | Program output: 56
           
Correct output: -52.9793852066 | Program output: -52
          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_mod} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_min} {:instruction in1} {:instruction print_integer} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction float_rot} {:instruction float_min} {:instruction float_swap} {:instruction float_max} {:instruction integer_min} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_rot} {:instruction float_mult} {:instruction tag_float_323} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_flush} {:instruction tag_float_718} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_sub} {:instruction float_min} {:instruction float_rot} {:instruction float_yank} {:instruction integer_dup} {:instruction print_newline} {:instruction integer_min} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_sub} {:instruction tagged_636} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_frominteger} {:instruction -6} {:instruction integer_yank} {:instruction in2} {:instruction integer_flush} {:instruction float_max} {:instruction float_sub} {:instruction float_add} {:instruction float_div} {:instruction float_dec})
Best program: (float_dec float_mod float_mod in2 float_swap float_div float_dec float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_min in1 print_integer print_integer float_max print_integer float_rot float_min float_swap float_max integer_min float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush float_max float_min 69.78423145127292 integer_mod float_dup float_yankdup integer_min integer_fromfloat float_pop float_rot float_mult tag_float_323 float_stackdepth integer_dup_times float_flush tag_float_718 integer_fromfloat float_dup float_shove integer_inc integer_stackdepth integer_stackdepth float_add integer_sub float_min float_rot float_yank integer_dup print_newline integer_min integer_pop float_tan integer_sub tagged_636 integer_dup_times integer_swap integer_fromfloat float_frominteger -6 integer_yank in2 integer_flush float_max float_sub float_add float_div float_dec)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1394.3351460999986
Median total errors in population: 286.4601
Error averages by case: (49.52137780000063 11.257 46.75035639999905 11.205 45.81262690000098 11.154 47.915075399998884 11.248 40.77378280000014 11.014 43.304650799999294 12.059 46.98019740000039 10.286 47.63476039999898 11.174 46.181549600000096 10.875 37.16035200000084 11.244 38.91569100000047 11.139 39.321065600000075 11.16 43.70467180000092 11.177 45.75102609999933 11.165 47.6610972000007 11.168 41.713546800001005 11.145 45.16240069999944 11.093 44.72255840000068 11.141 46.84455330000069 11.264 44.1988501000001 10.191 44.3555994 11.092 48.51840960000116 11.212 41.43809339999893 11.121 43.13714599999923 11.127 48.949707199998954 11.195)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 9 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 37.974
Average program size in population (points): 38.974
Average percent parens in population: 0.027
Minimum age in population: 40.21916073560715
Maximum age in population: 45.17118414863944
Average age in population: 43.12056341803074
Median age in population: 43.2162177991122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.041
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 31482489
--- Timings ---
Current time: 1529615138224 milliseconds
Total Time:          89.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.5 seconds, 50.8%
Fitness Testing:     34.8 seconds, 38.9%
Report:               9.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_max} {:instruction print_integer} {:instruction float_max} {:instruction print_integer} {:instruction float_swap} {:instruction integer_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_sin} {:instruction in2} {:instruction integer_inc} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup integer_add in1 float_div integer_sub integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_max print_integer float_max print_integer float_swap integer_add integer_pop float_yankdup float_sin in2 integer_inc float_yankdup float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 1433.387167499999
Median total errors in population: 286.4601
Error averages by case: (52.05373540000104 11.256 47.80457219999892 11.224 48.55341250000126 11.157 49.43688999999896 11.258 45.61925940000075 11.014 44.74867469999932 12.075 45.402369000000355 10.306 49.21714499999869 11.185 45.687952900000305 10.868 41.1438440000008 11.274 42.16415510000047 11.131 40.65519860000007 11.159 45.9643754000012 11.189 47.538826699999376 11.168 48.89157980000103 11.187 43.12540480000096 11.15 47.57223749999909 11.097 45.58955840000061 11.141 49.57830870000064 11.274 45.56803550000039 10.212 45.76510540000017 11.1 47.85836660000122 11.226 43.104784599998986 11.121 44.302554299999244 11.142 47.92682099999887 11.2)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 11 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 37.361
Average program size in population (points): 38.361
Average percent parens in population: 0.027
Minimum age in population: 41.65389636158943
Maximum age in population: 46.40096566267312
Average age in population: 44.64689209139533
Median age in population: 44.7107298001647
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 32416528
--- Timings ---
Current time: 1529615140930 milliseconds
Total Time:          92.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.0 seconds, 50.8%
Fitness Testing:     35.8 seconds, 38.7%
Report:               9.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_inc} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_mult} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_shove} {:instruction float_flush} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_add float_dec float_yankdup float_flush integer_inc in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup float_stackdepth float_add integer_sub float_pop float_mult float_yank in1 print_integer integer_mod integer_pop float_shove float_flush in2 integer_stackdepth integer_mult float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 1942.058450999999
Median total errors in population: 286.4601
Error averages by case: (73.15541740000106 11.303 69.32957499999893 11.251 69.55142580000116 11.172 70.7424630999992 11.304 62.15521650000095 11.01 65.93209489999929 12.091 67.9532785000002 10.353 70.48924059999887 11.211 63.84424790000048 10.852 60.77254240000085 11.293 62.441607200000504 11.155 56.89474720000007 11.176 66.38252760000142 11.208 68.8364368999996 11.202 70.50374590000084 11.209 60.07294160000103 11.161 68.30191739999914 11.115 66.20776320000068 11.169 70.12808570000071 11.334 66.1549625000006 10.211 67.05801250000044 11.096 70.03262560000132 11.268 60.361810799998906 11.14 65.31362499999922 11.157 70.77113979999855 11.23)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 9 0.0991 2 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 37.026
Average program size in population (points): 38.026
Average percent parens in population: 0.027
Minimum age in population: 42.90959862433374
Maximum age in population: 48.16796830389649
Average age in population: 46.09147764616739
Median age in population: 46.12167373904958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 33342178
--- Timings ---
Current time: 1529615143627 milliseconds
Total Time:          95.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 51.0%
Fitness Testing:     36.7 seconds, 38.5%
Report:               9.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_mult} {:instruction in2} {:instruction integer_mult} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_mod} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec})
Best program: (float_dup_times integer_mult in2 integer_mult float_div float_dec float_yankdup float_dec float_yankdup float_flush integer_add in1 float_div float_min integer_fromfloat integer_add integer_rot integer_mod in1 print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 integer_mod integer_pop float_yankdup float_flush in2 integer_inc integer_dec)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1683.164109899999
Median total errors in population: 286.4601
Error averages by case: (62.35798240000106 11.285 57.53961999999867 11.238 58.88128310000141 11.166 59.00246519999864 11.271 52.897272100000784 11.021 55.65041389999906 12.069 55.27304940000043 10.319 58.76419559999857 11.202 53.189330800000164 10.861 52.16551600000112 11.277 52.03871320000062 11.153 51.27427900000008 11.181 56.6301312000015 11.204 58.306727899999146 11.191 58.52459940000105 11.196 53.36690310000124 11.158 58.08530669999896 11.113 56.52185690000075 11.169 59.96992910000076 11.304 56.318793900000315 10.232 55.61786310000018 11.106 57.443139500001415 11.238 53.1777214999987 11.131 54.21104439999901 11.15 57.512972499998725 11.208)
Error minima by case: (0.0894 9 0.4702 9 0.0759 2 0.3997 9 0.2288 2 0.2367 10 0.0991 9 0.2078 9 0.0293 8 0.3254 10 0.3399 9 0.4496 10 0.3498 10 0.0997 10 0.3167 9 0.0738 9 0.0523 2 0.0544 9 0.3741 9 0.0309 8 0.3817 8 0.2392 8 0.0931 9 0.453 9 0.0206 9)
Average genome size in population (length): 36.954
Average program size in population (points): 37.954
Average percent parens in population: 0.027
Minimum age in population: 43.90959862433374
Maximum age in population: 49.80918208882213
Average age in population: 47.55833611196885
Median age in population: 47.61876509338617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.04
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 34266028
--- Timings ---
Current time: 1529615146238 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 51.1%
Fitness Testing:     37.6 seconds, 38.4%
Report:              10.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_sin} {:instruction in2} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_flush} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_sin in2 integer_stackdepth float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_add float_pop integer_rot float_yank in1 print_integer integer_flush integer_pop integer_mod float_flush integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 1512.3278233999993
Median total errors in population: 286.4601
Error averages by case: (55.21479290000081 11.273 52.3357528999989 11.234 50.05544590000086 11.155 55.01128579999889 11.286 45.2038089000004 11.006 47.99698219999922 12.063 51.70691980000032 10.322 54.82088499999875 11.191 51.62667320000004 10.833 40.1836187000008 11.289 43.56801680000054 11.137 42.97825650000008 11.169 47.63165710000094 11.196 49.43342819999934 11.172 54.38218860000095 11.195 45.308233200001 11.155 49.29300179999938 11.103 47.34254310000063 11.136 52.643065200000706 11.29 47.683358800000114 10.219 50.554400000000015 11.106 52.56887600000123 11.235 45.20111639999894 11.117 47.481869399999184 11.152 53.85864699999887 11.209)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 9 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 36.808
Average program size in population (points): 37.808
Average percent parens in population: 0.028
Minimum age in population: 46.18135765660554
Maximum age in population: 50.8991078324616
Average age in population: 49.08234239002806
Median age in population: 49.16623463458382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.041
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 35186253
--- Timings ---
Current time: 1529615148777 milliseconds
Total Time:         100.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 51.2%
Fitness Testing:     38.5 seconds, 38.4%
Report:              10.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_mod} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_rot} {:instruction in1} {:instruction float_mult} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_pop} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction tagged_726} {:instruction float_add} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction float_mult} {:instruction float_max})
Best program: (float_rot float_mod float_mod in2 float_swap float_div float_dup float_yankdup float_flush integer_rot in1 float_mult float_mod integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop float_pop integer_yankdup float_add integer_sub float_pop integer_rot tagged_726 float_add print_integer integer_mult print_integer float_mult float_max)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1275.838414699998
Median total errors in population: 286.4601
Error averages by case: (47.16673540000059 11.206 42.80752859999946 11.172 42.334019700000596 11.124 44.611873299999 11.21 39.35656599999991 10.994 38.11936089999939 12.06 38.55708930000037 10.251 44.41030579999918 11.131 37.360520299999365 10.869 33.68737580000067 11.232 36.59507030000034 11.101 31.371112000000075 11.125 39.169523600000225 11.155 42.289228499999425 11.129 43.96951370000051 11.133 34.58721100000081 11.113 41.080819099999715 11.069 39.36323200000064 11.102 44.82205690000065 11.22 39.69215909999962 10.162 40.2867980999996 11.062 41.9440176000007 11.174 34.66525549999915 11.091 38.498128999999395 11.106 41.94791319999941 11.154)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 11 0.0991 2 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 36.78
Average program size in population (points): 37.78
Average percent parens in population: 0.028
Minimum age in population: 47.54015530366451
Maximum age in population: 52.69207949843258
Average age in population: 50.55635927932383
Median age in population: 50.60553186252946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.038
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 36105753
--- Timings ---
Current time: 1529615151360 milliseconds
Total Time:         102.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.7 seconds, 51.2%
Fitness Testing:     39.4 seconds, 38.3%
Report:              10.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_mod} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_min} {:instruction in1} {:instruction print_integer} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction 86})
Best program: (float_dec float_mod float_mod in2 float_swap float_div float_dec float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub integer_rot integer_rot float_min in1 print_integer print_integer float_yankdup float_flush in2 float_dup_times integer_dec float_frominteger float_frominteger 86)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1626.9812986999987
Median total errors in population: 286.4601
Error averages by case: (59.42682480000077 11.275 55.95647129999894 11.247 56.074892700000966 11.167 57.3438717999989 11.277 51.974906900000626 11.032 52.50277069999931 12.073 52.92269040000041 10.312 57.09726679999882 11.205 53.90728590000012 10.866 48.44014560000078 11.268 50.27609000000044 11.145 48.97401120000007 11.177 54.050976200001045 11.197 55.61552759999936 11.191 56.89793020000084 11.211 50.57444770000101 11.162 55.08361499999934 11.116 52.61540920000071 11.165 57.25093460000072 11.288 53.42837140000024 10.22 53.88640430000012 11.121 55.090821600001114 11.243 50.89406929999893 11.13 52.85348799999924 11.151 55.39207549999892 11.211)
Error minima by case: (0.0894 5 0.4702 5 0.0759 5 0.3997 5 0.3897 5 0.2367 10 0.0991 4 0.2078 5 0.0293 8 0.3254 10 0.3399 4 0.4496 2 0.3498 5 0.0997 5 0.3167 5 0.0738 2 0.0523 5 0.0544 4 0.3741 6 0.0309 5 0.3817 4 0.2392 4 0.0931 2 0.453 4 0.0206 4)
Average genome size in population (length): 36.548
Average program size in population (points): 37.548
Average percent parens in population: 0.028
Minimum age in population: 48.8463992215693
Maximum age in population: 54.0550522566773
Average age in population: 52.03874568770477
Median age in population: 52.09547198121436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 37019453
--- Timings ---
Current time: 1529615153946 milliseconds
Total Time:         105.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.1 seconds, 51.3%
Fitness Testing:     40.3 seconds, 38.2%
Report:              11.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_tan} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_swap} {:instruction integer_max} {:instruction integer_shove} {:instruction in2} {:instruction float_swap} {:instruction float_dec} {:instruction integer_yank} {:instruction float_flush} {:instruction float_pop} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer} {:instruction -14.553898387308834} {:instruction in1} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction integer_mod})
Best program: (float_mod in2 float_swap float_tan float_dec float_yankdup float_swap integer_max integer_shove in2 float_swap float_dec integer_yank float_flush float_pop in1 float_div integer_sub integer_fromfloat integer_add print_integer -14.553898387308834 in1 integer_min float_max float_min 69.78423145127292 integer_mod)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 1613.1499011999986
Median total errors in population: 286.4601
Error averages by case: (59.043450600000796 11.317 55.28934979999895 11.26 55.600349900001014 11.187 57.02566969999878 11.309 51.968602200000426 11.035 52.49311879999917 12.091 54.29087310000039 10.348 56.842812199998846 11.221 53.69642550000009 10.844 47.36601060000089 11.299 49.22848900000051 11.167 46.26950720000007 11.193 53.53347820000107 11.229 54.46902909999923 11.213 56.36634670000082 11.226 48.62480140000109 11.184 54.960074299999285 11.131 52.2470688000007 11.173 56.39106410000072 11.331 52.166128200000095 10.248 53.72785170000006 11.13 55.64247280000114 11.261 48.53951069999886 11.149 52.146111999999086 11.182 56.25130459999897 11.242)
Error minima by case: (0.0894 9 0.4702 10 0.0759 10 0.3997 9 0.3916 9 0.2367 10 0.0991 9 0.2078 9 0.0293 8 0.3254 10 0.3399 9 0.4496 10 0.3498 10 0.0997 10 0.3167 9 0.0738 9 0.0523 9 0.0544 9 0.3741 9 0.0309 8 0.3817 8 0.2392 9 0.0931 9 0.453 9 0.0206 9)
Average genome size in population (length): 36.967
Average program size in population (points): 37.967
Average percent parens in population: 0.027
Minimum age in population: 50.32416055211797
Maximum age in population: 55.35082780884113
Average age in population: 53.50829234625184
Median age in population: 53.56305714676273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.035
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 37943628
--- Timings ---
Current time: 1529615156570 milliseconds
Total Time:         108.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 51.4%
Fitness Testing:     41.2 seconds, 38.1%
Report:              11.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mult} {:instruction in2} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction print_float} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_cos} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction float_yankdup} {:instruction in2} {:instruction float_swap} {:instruction integer_mod} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction integer_swap})
Best program: (float_dup_times float_mult in2 float_swap integer_dup_times float_dec print_float float_flush integer_add in1 float_div integer_min integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_yank print_integer float_mult float_max float_mult float_max integer_min float_max float_cos 69.78423145127292 integer_mod -31.62335852033054 float_yankdup in2 float_swap integer_mod float_dup float_yankdup float_max integer_min integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1646.6824126999988
Median total errors in population: 286.4601
Error averages by case: (62.091930800000995 11.311 56.07529679999877 11.288 57.18659090000133 11.184 57.90487479999875 11.32 54.21107680000079 11.022 54.798432599999195 12.084 55.59746770000043 10.369 57.72034479999852 11.226 54.81626040000024 10.826 47.789780400000886 11.321 48.56171070000049 11.172 46.040414400000074 11.193 54.91067980000134 11.231 57.1127239999992 11.213 57.27709720000095 11.235 48.54476820000109 11.188 56.411492699999116 11.113 55.260048000000765 11.175 59.085423800000775 11.337 55.237633800000374 10.258 54.30812620000009 11.135 57.300037600001374 11.269 48.625814099998856 11.141 52.99695799999916 11.18 57.78342819999861 11.243)
Error minima by case: (0.0894 2 0.4702 3 0.0759 2 0.3997 3 0.3916 2 0.2367 10 0.0991 2 0.2078 3 0.0293 8 0.3254 10 0.3399 2 0.4496 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 36.296
Average program size in population (points): 37.296
Average percent parens in population: 0.028
Minimum age in population: 51.71660466818139
Maximum age in population: 56.91919913851598
Average age in population: 54.99183482859367
Median age in population: 55.05226931595826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.035
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 38851028
--- Timings ---
Current time: 1529615159247 milliseconds
Total Time:         110.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 51.6%
Fitness Testing:     42.1 seconds, 38.0%
Report:              11.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_shove} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_times} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_flush} {:instruction float_max} {:instruction integer_swap} {:instruction float_sub} {:instruction float_swap})
Best program: (float_dup_times integer_shove in2 float_swap float_div float_dec float_yankdup float_flush integer_add float_flush float_flush float_dup_times in1 float_div integer_shove integer_fromfloat in1 float_div integer_shove integer_fromfloat integer_add integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_max integer_add integer_mod integer_pop float_yankdup float_sin integer_fromfloat float_pop float_flush float_max integer_swap float_sub float_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1755.9649837999987
Median total errors in population: 286.4601
Error averages by case: (64.91870220000119 11.278 61.351051799998515 11.221 60.892653500001494 11.149 63.29466669999884 11.275 59.92995080000109 11.002 58.94298849999921 12.094 60.075080300000366 10.304 63.15673419999841 11.186 59.50190500000061 10.858 53.525590000000925 11.296 54.699868300000546 11.127 49.40590240000007 11.157 59.25557700000158 11.178 60.1776332999993 11.175 62.40717970000124 11.193 52.082982200001055 11.144 60.56576049999881 11.102 57.91836160000066 11.141 62.90882670000071 11.298 59.40659170000069 10.22 59.90766870000056 11.094 60.600864800001595 11.226 52.34402109999888 11.118 58.90628299999913 11.138 61.605139799998504 11.209)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 2 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 36.005
Average program size in population (points): 37.005
Average percent parens in population: 0.028
Minimum age in population: 53.77342219353886
Maximum age in population: 58.42521913081873
Average age in population: 56.4978990406899
Median age in population: 56.55354363489823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 39751178
--- Timings ---
Current time: 1529615161856 milliseconds
Total Time:         113.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.5 seconds, 51.6%
Fitness Testing:     43.0 seconds, 37.9%
Report:              11.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction in1} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec integer_dup_times float_swap float_div float_dec in1 float_flush integer_add in1 float_div in1 integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 1684.783956999999
Median total errors in population: 286.4601
Error averages by case: (60.875288400001374 11.308 56.83123059999829 11.254 57.87012220000168 11.176 60.098067899998696 11.302 52.2330348000011 11.037 55.21364539999915 12.083 57.70508930000044 10.321 59.873565399998164 11.227 57.98416870000071 10.857 49.15666140000098 11.285 52.035188500000615 11.166 52.53595680000007 11.19 56.0431284000018 11.203 54.9205245999992 11.206 59.60144650000147 11.228 54.32217040000121 11.181 57.380126599998654 11.129 55.353830400000746 11.176 58.402927400000756 11.315 53.625695600000704 10.254 57.25314190000065 11.145 58.88225680000191 11.259 54.035231399998736 11.143 54.25556499999905 11.163 59.448892599998224 11.239)
Error minima by case: (0.0894 10 0.4702 9 0.0759 10 0.3997 10 0.3916 10 0.2367 10 0.0991 9 0.2078 9 0.0293 8 0.3254 10 0.3399 10 0.4496 10 0.3498 10 0.0997 10 0.3167 9 0.0738 10 0.0523 9 0.0544 9 0.3741 9 0.0309 10 0.3817 10 0.2392 9 0.0931 10 0.453 10 0.0206 10)
Average genome size in population (length): 35.589
Average program size in population (points): 36.589
Average percent parens in population: 0.029
Minimum age in population: 54.92583588900743
Maximum age in population: 59.84968576114625
Average age in population: 57.9754638594853
Median age in population: 58.0156481470076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 40640903
--- Timings ---
Current time: 1529615164424 milliseconds
Total Time:         116.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 51.7%
Fitness Testing:     43.9 seconds, 37.8%
Report:              12.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_min} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction float_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction 69.78423145127292} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_swap integer_rot float_dec float_yankdup float_flush integer_add in1 float_div integer_sub integer_fromfloat integer_add integer_yankdup integer_sub integer_dup_times integer_min print_integer float_mult float_max float_mult float_inc integer_min float_max float_max 69.78423145127292 float_flush in2 integer_inc integer_dec integer_min integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1804.8928900999986
Median total errors in population: 286.4601
Error averages by case: (66.91293080000081 11.237 64.1074689999988 11.204 62.64826070000122 11.123 66.39887179999891 11.24 52.61030140000065 10.994 60.21343799999932 12.074 62.66869290000034 10.279 66.15126679999871 11.171 60.66833380000042 10.885 53.219098000000706 11.267 55.66609000000043 11.109 54.511259200000076 11.135 60.38137540000128 11.152 61.959424899999455 11.15 65.96029680000092 11.176 56.84972760000089 11.115 61.845342099999066 11.073 61.05883040000066 11.132 64.54842380000078 11.264 60.0536647000005 10.182 62.33594320000041 11.076 64.80821360000138 11.204 56.79578999999906 11.1 60.00903499999921 11.115 64.86881019999876 11.185)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 2 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 35.873
Average program size in population (points): 36.873
Average percent parens in population: 0.028
Minimum age in population: 56.54003728937823
Maximum age in population: 61.2187694183358
Average age in population: 59.40397754105097
Median age in population: 59.43907178455993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 41537753
--- Timings ---
Current time: 1529615167025 milliseconds
Total Time:         118.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 51.8%
Fitness Testing:     44.8 seconds, 37.7%
Report:              12.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_shove} {:instruction in1} {:instruction float_div} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_sub} {:instruction print_integer} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_min} {:instruction float_max} {:instruction float_min})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_shove in1 float_div integer_fromfloat integer_add integer_yankdup integer_rot float_yank in1 print_integer float_sub print_integer float_mult integer_swap integer_min float_max float_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 1307.6989280999987
Median total errors in population: 286.4601
Error averages by case: (47.44762940000024 11.23 42.61105839999959 11.191 44.056792000000506 11.138 44.237271499999245 11.233 43.48317440000044 11.003 41.552597599999565 12.072 41.17218840000025 10.274 44.041058999999436 11.154 41.398432400000026 10.859 36.861423400000405 11.248 38.35807030000014 11.109 32.33511200000007 11.137 41.718824000000545 11.161 43.247128799999714 11.149 43.56851370000025 11.15 34.446211000000446 11.128 43.46697599999974 11.083 39.73817760000051 11.113 45.29831590000057 11.252 41.97731360000011 10.184 41.01494319999996 11.079 40.955017600000524 11.196 34.249255499999514 11.094 39.85848799999957 11.124 43.068954399999534 11.175)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 11 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 35.668
Average program size in population (points): 36.668
Average percent parens in population: 0.028
Minimum age in population: 57.73670651961584
Maximum age in population: 63.00024594282058
Average age in population: 60.84323966801594
Median age in population: 60.86619350546198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.032
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 42429453
--- Timings ---
Current time: 1529615169601 milliseconds
Total Time:         121.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 51.9%
Fitness Testing:     45.6 seconds, 37.7%
Report:              12.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mult} {:instruction in2} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dec} {:instruction print_float} {:instruction float_flush} {:instruction integer_div} {:instruction in1} {:instruction float_div} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_cos} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction float_yankdup} {:instruction in2} {:instruction float_swap} {:instruction integer_mod} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction integer_swap})
Best program: (float_dup_times float_mult in2 float_swap integer_dup_times float_dec print_float float_flush integer_div in1 float_div integer_add integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_yank print_integer float_mult float_max float_mult float_max integer_min float_max float_cos 69.78423145127292 integer_mod -31.62335852033054 float_yankdup in2 float_swap integer_mod float_dup float_yankdup float_max integer_min integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1155.4976346999988
Median total errors in population: 286.4601
Error averages by case: (40.82067920000011 11.235 35.22618419999985 11.214 37.9799305000004 11.146 36.5912774999991 11.243 36.05091560000011 11.012 34.78630769999967 12.071 35.03341360000033 10.286 36.31021499999962 11.175 34.44672539999974 10.875 31.764098000000317 11.239 30.335592499999997 11.126 30.322321600000073 11.139 35.67807100000031 11.184 36.88231919999955 11.165 36.198214300000124 11.174 32.55236600000058 11.135 37.19719149999993 11.102 35.94191840000063 11.138 37.956913000000654 11.264 34.229232099999734 10.177 33.56030919999944 11.092 37.023236800000475 11.216 32.06039679999936 11.106 31.45242799999957 11.133 37.26937759999964 11.181)
Error minima by case: (0.0894 5 0.4702 5 0.0759 5 0.3997 5 0.3916 5 0.2367 10 0.0991 4 0.2078 5 0.0293 8 0.3254 11 0.3399 4 0.4496 2 0.3498 5 0.0997 5 0.3167 5 0.0738 2 0.0523 5 0.0544 4 0.3741 6 0.0309 5 0.3817 4 0.2392 4 0.0931 2 0.453 4 0.0206 4)
Average genome size in population (length): 35.016
Average program size in population (points): 36.016
Average percent parens in population: 0.029
Minimum age in population: 59.36005099686736
Maximum age in population: 64.44581403778648
Average age in population: 62.28299406261421
Median age in population: 62.32192318559692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 43304853
--- Timings ---
Current time: 1529615172218 milliseconds
Total Time:         123.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 51.9%
Fitness Testing:     46.6 seconds, 37.6%
Report:              12.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_yank} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction float_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_max} {:instruction float_max} {:instruction float_frominteger} {:instruction integer_mod} {:instruction integer_add} {:instruction print_integer} {:instruction float_mult} {:instruction float_swap} {:instruction integer_min})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_flush integer_add in1 float_div integer_sub integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_yank print_integer float_mult float_max float_mult float_inc integer_min float_max float_max float_frominteger integer_mod integer_add print_integer float_mult float_swap integer_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1531.2178504999988
Median total errors in population: 286.4601
Error averages by case: (56.21071880000064 11.252 52.10705839999924 11.216 52.02910890000079 11.149 53.69687029999908 11.255 46.86151720000064 11.001 50.4100948999995 12.056 51.54027850000039 10.306 53.482227799999116 11.181 48.73384640000017 10.848 45.26254240000063 11.266 43.98648900000023 11.129 43.24646080000007 11.16 49.820675800000906 11.184 51.9951287999996 11.172 53.1908803000005 11.181 45.54243240000078 11.144 51.31544669999951 11.094 50.279340800000696 11.13 53.6621936000007 11.272 49.81034450000025 10.207 49.3714700000001 11.097 53.702908000001074 11.218 45.48297619999916 11.11 47.55765899999946 11.141 53.961180999999 11.189)
Error minima by case: (0.0894 2 0.4702 3 0.0759 2 0.3997 3 0.3916 2 0.2367 10 0.0991 2 0.2078 3 0.0293 8 0.3254 10 0.3399 2 0.4496 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 35.103
Average program size in population (points): 36.103
Average percent parens in population: 0.029
Minimum age in population: 61.03666986753524
Maximum age in population: 65.90228256919909
Average age in population: 63.78238463432989
Median age in population: 63.84523649123446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.05
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 44182428
--- Timings ---
Current time: 1529615174670 milliseconds
Total Time:         126.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 52.0%
Fitness Testing:     47.4 seconds, 37.6%
Report:              13.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_dup} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction in1} {:instruction print_integer} {:instruction integer_add} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_rot} {:instruction float_tan} {:instruction in1} {:instruction float_div} {:instruction float_mult} {:instruction float_max} {:instruction float_max} {:instruction integer_min} {:instruction float_tan} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction float_rot} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_pop} {:instruction float_max})
Best program: (float_dup_times float_mod in2 float_dup in1 integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub float_pop in1 print_integer integer_add in1 print_integer float_mult float_max integer_rot float_tan in1 float_div float_mult float_max float_max integer_min float_tan 69.78423145127292 integer_mod float_rot float_yankdup float_flush integer_fromfloat float_pop integer_pop float_max)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1363.4668653999986
Median total errors in population: 286.4601
Error averages by case: (49.31823220000022 11.249 44.0620053999996 11.228 45.88239920000045 11.144 45.585076899998946 11.255 42.41004160000015 11.017 42.34672789999931 12.07 43.99961180000037 10.286 45.35779939999951 11.178 43.78781329999964 10.874 38.704471000000595 11.241 38.83931170000029 11.133 36.35626720000007 11.155 43.97562240000054 11.181 45.527418899999354 11.18 45.07731410000019 11.186 39.429177800001 11.141 45.346557599999834 11.093 44.35697280000068 11.146 46.70378350000069 11.268 44.103046699999716 10.192 42.515690899999576 11.103 45.279758400000624 11.224 39.25155889999894 11.115 41.35678699999921 11.138 45.90041879999945 11.196)
Error minima by case: (0.0894 5 0.4702 5 0.0759 5 0.3997 5 0.3916 5 0.2367 10 0.0991 4 0.2078 5 0.0293 9 0.3254 10 0.3399 4 0.4496 2 0.3498 5 0.0997 5 0.3167 5 0.0738 2 0.0523 5 0.0544 4 0.3741 6 0.0309 5 0.3817 4 0.2392 4 0.0931 2 0.453 4 0.0206 4)
Average genome size in population (length): 34.879
Average program size in population (points): 35.879
Average percent parens in population: 0.029
Minimum age in population: 62.65605323525756
Maximum age in population: 67.30872005943252
Average age in population: 65.2673383002893
Median age in population: 65.31518697285696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.032
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 45054428
--- Timings ---
Current time: 1529615177220 milliseconds
Total Time:         128.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 52.0%
Fitness Testing:     48.3 seconds, 37.5%
Report:              13.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_mod} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer} {:instruction integer_flush} {:instruction float_max} {:instruction float_max} {:instruction integer_min} {:instruction integer_shove} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_cos} {:instruction integer_sub} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_min} {:instruction 69.78423145127292} {:instruction float_dup} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_min} {:instruction float_swap} {:instruction integer_flush} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_fromfloat} {:instruction float_min})
Best program: (float_dup_times integer_mod in2 float_swap integer_add float_swap float_yankdup float_flush integer_add in1 integer_sub integer_fromfloat integer_add print_integer integer_flush float_max float_max integer_min integer_shove float_min integer_yankdup integer_sub float_cos integer_sub print_integer float_mult float_max integer_min float_max float_min 69.78423145127292 float_dup integer_pop float_yankdup float_frominteger float_min float_swap integer_flush integer_pop float_yankdup float_flush in2 integer_inc integer_dec integer_min integer_fromfloat float_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1389.7488818999987
Median total errors in population: 286.4601
Error averages by case: (49.04793080000066 11.223 45.99412459999926 11.202 46.21724740000077 11.133 47.45687629999892 11.233 41.93178280000028 11.005 42.846177399999256 12.053 46.80649470000037 10.289 47.21938379999903 11.158 47.99254960000018 10.88 34.719304400000766 11.247 38.86199150000044 11.114 39.922569600000074 11.135 44.01192280000073 11.162 44.91792339999936 11.14 46.93858090000062 11.157 41.76380880000103 11.131 45.541662199999536 11.075 43.746265600000676 11.117 46.400423800000674 11.236 43.450571999999845 10.167 44.434454299999864 11.079 48.14621360000109 11.207 41.64502439999896 11.107 43.267786999999196 11.119 48.91681019999894 11.182)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 11 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 33.799
Average program size in population (points): 34.799
Average percent parens in population: 0.030
Minimum age in population: 64.34714985918492
Maximum age in population: 68.71558854281949
Average age in population: 66.7741615849776
Median age in population: 66.83863147820014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 45899403
--- Timings ---
Current time: 1529615179923 milliseconds
Total Time:         131.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 52.1%
Fitness Testing:     49.2 seconds, 37.4%
Report:              13.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_mod} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_rot} {:instruction float_dup_times} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer} {:instruction integer_sub} {:instruction float_add} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_min} {:instruction in1} {:instruction print_integer})
Best program: (float_rot float_mod float_mod in2 float_swap float_div float_dup float_yankdup float_flush integer_rot float_dup_times in1 float_div integer_shove integer_fromfloat integer_add print_integer integer_sub float_add float_cos float_pop float_pop integer_rot integer_min in1 print_integer)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 1588.4791856999987
Median total errors in population: 286.4601
Error averages by case: (59.7613778000007 11.265 55.60159479999901 11.235 54.19452080000099 11.158 57.221418599998984 11.265 49.89280600000067 11.03 50.5483535999994 12.066 53.16837760000031 10.302 56.999459599998886 11.186 52.21608080000027 10.857 44.70433080000053 11.265 48.69334050000026 11.148 42.84628660000007 11.167 51.420585600001104 11.187 55.203926399999425 11.177 56.62339880000086 11.19 45.71686580000083 11.162 53.17498939999923 11.105 51.37772160000061 11.15 57.43455330000064 11.27 52.19785010000044 10.218 53.35500270000024 11.114 55.162908000001124 11.227 45.74257289999911 11.12 51.279661999999334 11.147 55.731201599999004 11.199)
Error minima by case: (0.0894 9 0.4702 9 0.0759 10 0.3997 9 0.3916 10 0.2367 10 0.0991 9 0.2078 9 0.0293 7 0.3254 9 0.3399 9 0.4496 10 0.3498 10 0.0997 9 0.3167 9 0.0738 10 0.0523 9 0.0544 9 0.3741 9 0.0309 9 0.3817 9 0.2392 10 0.0931 9 0.453 9 0.0206 9)
Average genome size in population (length): 33.72
Average program size in population (points): 34.72
Average percent parens in population: 0.030
Minimum age in population: 65.82416251470272
Maximum age in population: 70.13113665387567
Average age in population: 68.25307580285839
Median age in population: 68.24693800954792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 46742428
--- Timings ---
Current time: 1529615182417 milliseconds
Total Time:         134.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 52.2%
Fitness Testing:     50.0 seconds, 37.3%
Report:              14.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_swap} {:instruction integer_swap} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction integer_min} {:instruction integer_yank})
Best program: (in2 float_swap integer_swap float_swap float_div float_dec float_yankdup float_dec float_yankdup float_flush integer_add in1 float_div float_min integer_fromfloat integer_add float_pop integer_rot float_yank in1 print_integer float_mult float_min integer_min integer_yank)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 1456.1778935999987
Median total errors in population: 286.4601
Error averages by case: (53.94328840000081 11.259 48.30660139999906 11.239 48.66532910000108 11.166 49.655623699998934 11.264 45.659728800000785 11.034 45.51183239999935 12.077 47.92829650000039 10.301 49.38399219999882 11.195 46.75463750000036 10.876 41.29102140000075 11.254 42.077902100000394 11.141 40.68989140000007 11.169 45.928828600001076 11.204 50.001125799999414 11.183 49.31578270000084 11.2 43.1289802000009 11.162 47.56615889999922 11.112 48.440612800000686 11.156 51.4219274000007 11.282 47.947881000000436 10.192 46.089513799999956 11.112 50.35469200000124 11.231 43.08906249999904 11.131 44.42241399999933 11.156 50.30476899999889 11.202)
Error minima by case: (0.0894 3 0.4702 10 0.0759 9 0.3997 10 0.3916 10 0.2367 10 0.0991 3 0.2078 9 0.0293 7 0.3254 9 0.3399 9 0.4496 10 0.3498 10 0.0997 3 0.3167 9 0.0738 10 0.0523 9 0.0544 3 0.3741 3 0.0309 2 0.3817 9 0.2392 3 0.0931 9 0.453 10 0.0206 3)
Average genome size in population (length): 34.161
Average program size in population (points): 35.161
Average percent parens in population: 0.030
Minimum age in population: 67.08058725517026
Maximum age in population: 71.76251655622328
Average age in population: 69.69400728137869
Median age in population: 69.73521623516913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.03
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 47596478
--- Timings ---
Current time: 1529615184886 milliseconds
Total Time:         136.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 52.2%
Fitness Testing:     50.9 seconds, 37.3%
Report:              14.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_flush} {:instruction in2} {:instruction float_swap} {:instruction integer_add} {:instruction float_dec} {:instruction integer_sub} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_sub} {:instruction float_max} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_max} {:instruction float_mult} {:instruction float_sin})
Best program: (float_dup_times integer_flush in2 float_swap integer_add float_dec integer_sub float_flush integer_add in1 float_div float_min integer_fromfloat integer_add integer_rot integer_shove integer_fromfloat integer_add float_yank in1 print_integer float_mult float_max integer_sub float_max in1 print_integer float_mult float_max integer_min float_max float_mult float_sin)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1376.1696708999984
Median total errors in population: 286.4601
Error averages by case: (49.752450600000465 11.236 44.398177599999286 11.195 45.596930500000724 11.136 45.57007239999887 11.23 44.0088736000003 11.007 44.17446729999925 12.07 45.87549470000042 10.272 45.30668239999913 11.158 43.729578899999794 10.882 40.92032820000094 11.234 39.4700506000005 11.116 35.764212800000074 11.138 43.65207100000078 11.174 46.292228499999354 11.149 45.21719700000051 11.165 38.12806340000102 11.128 45.0441914999996 11.086 45.52312320000071 11.124 47.35406410000071 11.247 45.02715909999994 10.174 42.535034699999756 11.076 47.20469200000098 11.2 38.896534799998875 11.1 41.4432229999992 11.12 47.69776899999914 11.17)
Error minima by case: (0.0894 2 0.4702 3 0.0759 2 0.3997 3 0.3916 2 0.2367 10 0.0991 2 0.2078 3 0.0293 8 0.3254 10 0.3399 2 0.4496 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 33.978
Average program size in population (points): 34.978
Average percent parens in population: 0.030
Minimum age in population: 68.63352983131902
Maximum age in population: 73.55440377863495
Average age in population: 71.17663730891756
Median age in population: 71.2260082835178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 48445928
--- Timings ---
Current time: 1529615187374 milliseconds
Total Time:         138.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.7 seconds, 52.3%
Fitness Testing:     51.7 seconds, 37.2%
Report:              14.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_min} {:instruction float_pop} {:instruction integer_add} {:instruction float_yank} {:instruction print_integer} {:instruction float_max} {:instruction float_min} {:instruction float_cos} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_flush} {:instruction float_flush} {:instruction in2} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_dup_times float_mod in2 float_yankdup float_flush integer_add in1 float_div float_min integer_fromfloat integer_add integer_yankdup integer_dup float_add integer_min float_pop integer_add float_yank print_integer float_max float_min float_cos integer_yankdup integer_pop float_yankdup float_flush float_flush float_flush in2 integer_inc integer_dec float_frominteger integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1454.7931022999985
Median total errors in population: 286.4601
Error averages by case: (52.28821560000058 11.266 48.479654399999276 11.238 48.33775740000075 11.156 49.79907839999876 11.263 47.33017440000031 11.027 45.66749119999918 12.085 47.150133300000405 10.294 49.54583839999906 11.195 45.76617009999994 10.88 43.692145600000906 11.262 43.9912562000004 11.144 40.23971680000007 11.16 46.92192280000085 11.179 48.32576079999926 11.184 49.30526420000047 11.202 42.716903500001024 11.153 48.26466219999957 11.102 46.84494900000071 11.155 49.78441660000073 11.28 47.11038659999985 10.207 46.76350929999986 11.113 49.608951300001024 11.226 42.72558029999891 11.124 46.00561599999922 11.15 49.8765478999991 11.206)
Error minima by case: (0.0894 6 0.4702 6 0.0759 4 0.3997 6 0.3916 3 0.2367 11 0.0991 5 0.2078 6 0.0293 8 0.3254 10 0.3399 4 0.4496 3 0.3498 4 0.0997 5 0.3167 6 0.0738 3 0.0523 4 0.0544 5 0.3741 7 0.0309 5 0.3817 4 0.2392 5 0.0931 3 0.453 4 0.0206 5)
Average genome size in population (length): 33.608
Average program size in population (points): 34.608
Average percent parens in population: 0.030
Minimum age in population: 69.72944269863575
Maximum age in population: 74.9922417011412
Average age in population: 72.66206082048002
Median age in population: 72.73710005666867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 49286128
--- Timings ---
Current time: 1529615189840 milliseconds
Total Time:         141.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.0 seconds, 52.4%
Fitness Testing:     52.5 seconds, 37.2%
Report:              14.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_mod} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_flush} {:instruction integer_rot} {:instruction in1} {:instruction float_mult} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_frominteger} {:instruction float_max} {:instruction 69.57902487456539} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction in1} {:instruction integer_min})
Best program: (float_rot float_mod float_mod in2 float_swap float_div float_dup integer_yankdup float_flush integer_rot in1 float_mult float_mod integer_fromfloat integer_add integer_yankdup 69.78423145127292 integer_mod -31.62335852033054 in1 print_integer float_mult integer_inc integer_dec float_frominteger float_max 69.57902487456539 integer_mod -31.62335852033054 in1 integer_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1570.4952155999983
Median total errors in population: 286.4601
Error averages by case: (57.89784140000096 11.266 54.65829679999887 11.231 53.93800640000112 11.159 56.154675699998926 11.266 47.71530720000049 11.025 49.56654439999932 12.087 51.3626028000004 10.302 55.9029681999986 11.19 48.526608200000034 10.872 46.12909800000081 11.251 48.49035110000042 11.151 44.574561600000074 11.166 50.97542080000118 11.203 53.44832519999939 11.191 55.70778050000106 11.202 47.90613720000098 11.161 52.69513919999923 11.111 51.41561280000068 11.163 55.243797900000686 11.301 50.824695600000354 10.211 52.38312620000025 11.103 54.59936640000124 11.237 48.02534859999896 11.138 50.73195799999924 11.165 53.26664539999887 11.203)
Error minima by case: (0.0894 9 0.4702 9 0.0759 9 0.3997 9 0.3916 9 0.2367 10 0.0991 8 0.2078 9 0.0293 8 0.3254 10 0.3399 10 0.4496 9 0.3498 8 0.0997 9 0.3167 9 0.0738 8 0.0523 9 0.0544 9 0.3741 9 0.0309 9 0.3817 9 0.2392 10 0.0931 7 0.453 9 0.0206 9)
Average genome size in population (length): 33.244
Average program size in population (points): 34.244
Average percent parens in population: 0.031
Minimum age in population: 71.51556491766239
Maximum age in population: 76.02379167017877
Average age in population: 74.15133550530511
Median age in population: 74.20194570057129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 50117228
--- Timings ---
Current time: 1529615192308 milliseconds
Total Time:         143.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.4 seconds, 52.4%
Fitness Testing:     53.4 seconds, 37.1%
Report:              15.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_div} {:instruction float_dec} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_min} {:instruction in1} {:instruction print_integer} {:instruction print_integer} {:instruction float_max} {:instruction print_integer})
Best program: (float_dup_times float_mod in2 float_div float_dec float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_add integer_yankdup integer_sub float_add integer_sub integer_rot integer_rot float_min in1 print_integer print_integer float_max print_integer)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 1689.4337106999983
Median total errors in population: 286.4601
Error averages by case: (64.23619900000101 11.272 59.01993919999868 11.235 57.85503300000132 11.158 60.53127149999879 11.271 50.824168600000604 11.022 55.446041699999284 12.094 58.87459380000045 10.308 60.30305899999857 11.181 56.126245900000356 10.882 48.4448916000009 11.29 50.07610970000051 11.145 46.51860800000007 11.158 55.59332600000136 11.189 59.87512579999929 11.194 60.06298010000104 11.187 49.45394900000109 11.152 57.07249899999907 11.097 58.18261280000078 11.158 61.647301500000786 11.294 58.077757400000465 10.212 56.31894320000034 11.096 60.92245280000151 11.237 49.646324499998855 11.125 54.95648799999917 11.148 61.04978959999862 11.213)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 32.674
Average program size in population (points): 33.674
Average percent parens in population: 0.031
Minimum age in population: 72.92069282513795
Maximum age in population: 77.49444588912193
Average age in population: 75.60082203452652
Median age in population: 75.653777340822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 50934078
--- Timings ---
Current time: 1529615194725 milliseconds
Total Time:         146.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.8 seconds, 52.5%
Fitness Testing:     54.2 seconds, 37.0%
Report:              15.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 11494.901400000002
Test mean error for best: 5.74745
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164
         
Correct output: 106.5297912457 | Program output: 106
          
Correct output: 67.0758504978  | Program output: 67
           
Correct output: 136.6003415923 | Program output: 136
          
Correct output: 0.3915927699   | Program output: 0
            
Correct output: -17.2367149126 | Program output: -18
          
Correct output: -19.900899189  | Program output: -19
          
Correct output: 139.2078452432 | Program output: 139
          
Correct output: 4.970708678    | Program output: 5
            
Correct output: -10.6746103067 | Program output: -11
          
Correct output: 48.6600799051  | Program output: 48
           
Correct output: 29.5504393334  | Program output: 29
           
Correct output: 33.3497873494  | Program output: 33
           
Correct output: -94.0996845263 | Program output: -94
          
Correct output: 129.3166897457 | Program output: 129
          
Correct output: 52.9261893635  | Program output: 52
           
Correct output: 44.9476623686  | Program output: 44
           
Correct output: -61.0543762286 | Program output: -61
          
Correct output: -126.3741080035 | Program output: -126
         
Correct output: -54.969119896  | Program output: -54
          
Correct output: 76.6182845413  | Program output: 76
           
Correct output: -80.2391916219 | Program output: -80
          
Correct output: 58.0930783645  | Program output: 58
           
Correct output: 56.5469735654  | Program output: 56
           
Correct output: -52.9793852066 | Program output: -52
          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_swap} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_dup_times} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction print_newline} {:instruction integer_shove} {:instruction integer_min} {:instruction float_max} {:instruction integer_inc} {:instruction 69.34628774185292} {:instruction integer_mod})
Best program: (in2 float_swap integer_shove float_dec float_yankdup float_flush float_dup_times in1 float_div integer_shove integer_fromfloat integer_add print_integer integer_sub float_add integer_sub float_pop float_pop integer_rot float_sin integer_rot float_yank in1 print_integer print_newline integer_shove integer_min float_max integer_inc 69.34628774185292 integer_mod)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1526.9074366999985
Median total errors in population: 286.4601
Error averages by case: (57.53989760000083 11.241 53.561588199998894 11.217 53.366336600001134 11.14 55.08327299999881 11.243 44.70521640000045 10.983 48.158621499999285 12.067 50.96287310000039 10.315 54.82209799999877 11.153 50.09669990000023 10.852 37.92079640000063 11.269 43.09876980000033 11.114 40.533910400000075 11.137 49.56267580000117 11.19 52.86463329999937 11.148 54.836197000000865 11.163 43.65350620000093 11.139 51.80628979999922 11.073 49.957416000000705 11.118 54.54594900000073 11.262 49.98965350000034 10.179 50.98056150000023 11.07 54.08214720000124 11.215 43.765069299999 11.103 49.03603499999921 11.131 54.2722221999989 11.183)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 32.538
Average program size in population (points): 33.538
Average percent parens in population: 0.032
Minimum age in population: 74.2405661539556
Maximum age in population: 78.95605616485604
Average age in population: 77.05115192324146
Median age in population: 77.10645522125667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.047
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 51747528
--- Timings ---
Current time: 1529615197231 milliseconds
Total Time:         148.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.2 seconds, 52.6%
Fitness Testing:     55.0 seconds, 37.0%
Report:              15.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction float_min} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_rot} {:instruction float_dec} {:instruction in1} {:instruction print_integer} {:instruction print_integer} {:instruction float_max} {:instruction tagged_806} {:instruction float_rot} {:instruction float_min} {:instruction float_swap} {:instruction float_rot} {:instruction integer_min} {:instruction float_min} {:instruction print_integer} {:instruction float_mult} {:instruction integer_yank} {:instruction print_integer} {:instruction integer_sub} {:instruction float_add} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction integer_min})
Best program: (float_dup_times float_mod in2 float_swap float_div float_dec float_yankdup float_dec float_yankdup float_flush integer_add in1 float_div float_min integer_fromfloat integer_add integer_rot float_dec in1 print_integer print_integer float_max tagged_806 float_rot float_min float_swap float_rot integer_min float_min print_integer float_mult integer_yank print_integer integer_sub float_add integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_min integer_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1647.951282899999
Median total errors in population: 286.4601
Error averages by case: (60.609646000000886 11.279 56.45076699999893 11.24 56.847881200001105 11.169 57.91727299999884 11.272 51.60377600000061 11.024 54.64109489999924 12.085 55.3808821000004 10.327 57.69009799999871 11.198 54.47919800000018 10.861 47.86886780000087 11.275 49.28676980000049 11.155 48.487360000000066 11.171 54.38822720000117 11.201 56.52922549999929 11.188 57.40619700000083 11.201 50.78058000000105 11.163 56.03881279999921 11.101 54.393504000000696 11.156 58.254431000000714 11.306 54.978911900000256 10.217 54.803034700000104 11.11 57.73658240000139 11.242 50.716976199998896 11.134 53.573128999999184 11.158 58.641057399998736 11.214)
Error minima by case: (0.0894 6 0.4702 6 0.0759 4 0.3997 6 0.3916 5 0.2367 10 0.0991 4 0.2078 6 0.0293 8 0.3254 10 0.3399 4 0.4496 3 0.3498 3 0.0997 6 0.3167 6 0.0738 3 0.0523 4 0.0544 5 0.3741 7 0.0309 6 0.3817 5 0.2392 5 0.0931 3 0.453 4 0.0206 5)
Average genome size in population (length): 32.013
Average program size in population (points): 33.013
Average percent parens in population: 0.032
Minimum age in population: 75.46913011409563
Maximum age in population: 80.5483792113896
Average age in population: 78.4878509761616
Median age in population: 78.54921493227995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.037
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 52547853
--- Timings ---
Current time: 1529615199745 milliseconds
Total Time:         151.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.6 seconds, 52.6%
Fitness Testing:     55.9 seconds, 36.9%
Report:              15.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_mod} {:instruction float_dup_times} {:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction integer_add} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_add} {:instruction float_max} {:instruction float_min} {:instruction 68.86461203912393} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_mult} {:instruction float_min} {:instruction integer_min})
Best program: (float_dup_times float_mod float_dup_times float_mod in2 float_swap float_div integer_add float_yankdup float_flush integer_add in1 integer_fromfloat integer_add integer_yank integer_yankdup print_integer integer_add float_max float_min 68.86461203912393 integer_mod integer_pop integer_sub float_pop integer_rot float_yank in1 print_integer float_mult float_min integer_min)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 1672.0871878999983
Median total errors in population: 286.4601
Error averages by case: (62.19989760000096 11.293 58.618073799998726 11.239 55.63382990000121 11.177 60.08405369999887 11.278 53.0058184000007 11.029 55.82204169999924 12.097 58.061665900000385 10.309 59.862803699998615 11.19 55.87545430000035 10.862 49.71289160000081 11.288 50.7762529000005 11.155 47.043190100000075 11.175 53.466562200001235 11.191 58.220832699999335 11.2 59.543813600001045 11.193 49.54002780000098 11.163 54.88596249999908 11.107 55.66347040000066 11.148 59.96919360000069 11.292 55.975468100000334 10.227 56.11463530000024 11.108 59.7515592000014 11.231 49.62173569999896 11.133 54.371442599999156 11.159 59.806510599998745 11.216)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 32.302
Average program size in population (points): 33.302
Average percent parens in population: 0.032
Minimum age in population: 76.46913011409563
Maximum age in population: 82.03353687545037
Average age in population: 79.93814297665105
Median age in population: 79.99307898194186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 53355428
--- Timings ---
Current time: 1529615202224 milliseconds
Total Time:         153.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.0 seconds, 52.7%
Fitness Testing:     56.7 seconds, 36.8%
Report:              16.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 11494.901400000002
Test mean error for best: 5.74745
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164
         
Correct output: 106.5297912457 | Program output: 106
          
Correct output: 67.0758504978  | Program output: 67
           
Correct output: 136.6003415923 | Program output: 136
          
Correct output: 0.3915927699   | Program output: 0
            
Correct output: -17.2367149126 | Program output: -18
          
Correct output: -19.900899189  | Program output: -19
          
Correct output: 139.2078452432 | Program output: 139
          
Correct output: 4.970708678    | Program output: 5
            
Correct output: -10.6746103067 | Program output: -11
          
Correct output: 48.6600799051  | Program output: 48
           
Correct output: 29.5504393334  | Program output: 29
           
Correct output: 33.3497873494  | Program output: 33
           
Correct output: -94.0996845263 | Program output: -94
          
Correct output: 129.3166897457 | Program output: 129
          
Correct output: 52.9261893635  | Program output: 52
           
Correct output: 44.9476623686  | Program output: 44
           
Correct output: -61.0543762286 | Program output: -61
          
Correct output: -126.3741080035 | Program output: -126
         
Correct output: -54.969119896  | Program output: -54
          
Correct output: 76.6182845413  | Program output: 76
           
Correct output: -80.2391916219 | Program output: -80
          
Correct output: 58.0930783645  | Program output: 58
           
Correct output: 56.5469735654  | Program output: 56
           
Correct output: -52.9793852066 | Program output: -52
          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_swap} {:instruction integer_shove} {:instruction float_dec} {:instruction float_swap} {:instruction float_flush} {:instruction float_dup_times} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer} {:instruction integer_sub} {:instruction float_add} {:instruction float_cos} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_min} {:instruction print_newline} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_min} {:instruction in1} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_yankdup})
Best program: (in2 float_swap integer_shove float_dec float_swap float_flush float_dup_times in1 float_div integer_shove integer_fromfloat integer_add print_integer integer_sub float_add float_cos float_pop float_pop integer_rot integer_min print_newline integer_shove integer_min integer_min in1 float_mod float_pop integer_mod integer_pop float_yankdup)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 1689.2405742999988
Median total errors in population: 286.4601
Error averages by case: (63.06973540000063 11.209 60.492468999999055 11.194 59.59918480000099 11.124 62.72267119999886 11.22 48.922476200000546 10.995 55.01636089999925 12.051 57.7539902000004 10.285 62.45285119999892 11.142 54.45877330000017 10.871 46.37602660000079 11.241 51.98082890000045 11.116 45.77625920000008 11.136 56.308025600001045 11.162 57.91572699999933 11.144 62.425563600000736 11.137 50.00072760000093 11.121 58.24339439999935 11.057 55.75950400000072 11.111 60.70130870000072 11.24 55.23712820000013 10.155 58.91447000000004 11.052 60.54173520000114 11.197 50.305696899999006 11.093 56.15075299999919 11.119 60.780913199998984 11.162)
Error minima by case: (0.0894 2 0.4702 3 0.0759 2 0.3997 3 0.3916 2 0.2367 10 0.0991 2 0.2078 3 0.0293 8 0.3254 10 0.3399 2 0.4496 1 0.3498 2 0.0997 2 0.3167 3 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 32.202
Average program size in population (points): 33.202
Average percent parens in population: 0.032
Minimum age in population: 78.6452316323284
Maximum age in population: 83.47901968700417
Average age in population: 81.4440805618798
Median age in population: 81.47153220052734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 54160478
--- Timings ---
Current time: 1529615204749 milliseconds
Total Time:         156.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.5 seconds, 52.8%
Fitness Testing:     57.5 seconds, 36.8%
Report:              16.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 11483.9014
Test mean error for best: 5.74195
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164          
Correct output: 106.5297912457 | Program output: 106           
Correct output: 67.0758504978  | Program output: 67            
Correct output: 136.6003415923 | Program output: 136           
Correct output: 0.3915927699   | Program output: 0             
Correct output: -17.2367149126 | Program output: -18           
Correct output: -19.900899189  | Program output: -19           
Correct output: 139.2078452432 | Program output: 139           
Correct output: 4.970708678    | Program output: 5             
Correct output: -10.6746103067 | Program output: -11           
Correct output: 48.6600799051  | Program output: 48            
Correct output: 29.5504393334  | Program output: 29            
Correct output: 33.3497873494  | Program output: 33            
Correct output: -94.0996845263 | Program output: -94           
Correct output: 129.3166897457 | Program output: 129           
Correct output: 52.9261893635  | Program output: 52            
Correct output: 44.9476623686  | Program output: 44            
Correct output: -61.0543762286 | Program output: -61           
Correct output: -126.3741080035 | Program output: -126          
Correct output: -54.969119896  | Program output: -54           
Correct output: 76.6182845413  | Program output: 76            
Correct output: -80.2391916219 | Program output: -80           
Correct output: 58.0930783645  | Program output: 58            
Correct output: 56.5469735654  | Program output: 56            
Correct output: -52.9793852066 | Program output: -52           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_mod} {:instruction in2} {:instruction integer_rot} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_sub} {:instruction float_flush} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction tagged_975} {:instruction -31.62335852033054} {:instruction in1} {:instruction print_integer} {:instruction float_max} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_sin} {:instruction 44} {:instruction integer_inc} {:instruction float_pop} {:instruction float_mult} {:instruction float_yank} {:instruction -95} {:instruction integer_sub} {:instruction integer_pop} {:instruction integer_sub} {:instruction float_pop} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction float_sub} {:instruction float_mult} {:instruction float_max} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_max} {:instruction 69.78423145127292} {:instruction integer_mod} {:instruction -31.62335852033054} {:instruction float_yankdup} {:instruction float_min} {:instruction float_rot} {:instruction in1} {:instruction integer_swap})
Best program: (float_tan float_mod in2 integer_rot integer_add in1 float_div integer_sub float_flush integer_add in1 float_div integer_shove integer_fromfloat integer_add integer_yankdup float_cos float_add float_yank float_mult tagged_975 -31.62335852033054 in1 print_integer float_max float_min float_cos integer_mod integer_pop float_sin 44 integer_inc float_pop float_mult float_yank -95 integer_sub integer_pop integer_sub float_pop integer_rot float_yank in1 float_sub float_mult float_max integer_min float_yankdup float_max 69.78423145127292 integer_mod -31.62335852033054 float_yankdup float_min float_rot in1 integer_swap)
Errors: [0.9106 11 0.5298 11 0.0759 11 0.6003 11 0.3916 11 0.7633 12 0.9009 10 0.2078 11 0.0293 11 0.3254 11 0.6601 11 0.5504 11 0.3498 11 0.0997 11 0.3167 11 0.9262 11 0.9477 11 0.0544 11 0.3741 11 0.9691 10 0.6183 11 0.2392 11 0.0931 11 0.547 11 0.9794 11]
Total: 286.4601
Mean: 5.729202
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1442.3832235999987
Median total errors in population: 286.4601
Error averages by case: (51.41400490000041 11.221 48.06288619999962 11.19 48.67769590000041 11.126 49.84885749999915 11.222 42.96199960000017 11.007 47.02407099999947 12.06 47.86044230000029 10.263 49.9223447999995 11.148 47.59533809999975 10.878 40.25870120000058 11.239 40.30752280000027 11.112 40.50031360000007 11.131 47.75452360000051 11.155 47.15862129999955 11.148 49.722730600000226 11.159 41.783052400000685 11.124 48.41592369999982 11.08 46.863483200000545 11.109 49.24854710000062 11.229 46.11235569999987 10.171 47.11410469999969 11.077 49.286366400000595 11.188 41.782605999999255 11.098 45.85259899999943 11.121 49.431131999999515 11.167)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 31.382
Average program size in population (points): 32.382
Average percent parens in population: 0.033
Minimum age in population: 79.6452316323284
Maximum age in population: 84.92639987097745
Average age in population: 82.9256102939923
Median age in population: 83.0011277710364
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.033
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 54945078
--- Timings ---
Current time: 1529615207587 milliseconds
Total Time:         159.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 52.8%
Fitness Testing:     58.5 seconds, 36.8%
Report:              16.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 10056.901399999997
Test mean error for best: 5.02845
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.0        
Correct output: 106.5297912457 | Program output: 106.0         
Correct output: 67.0758504978  | Program output: 67.0          
Correct output: 136.6003415923 | Program output: 136.0         
Correct output: 0.3915927699   | Program output: 0.0           
Correct output: -17.2367149126 | Program output: -18.0         
Correct output: -19.900899189  | Program output: -19.0         
Correct output: 139.2078452432 | Program output: 139.0         
Correct output: 4.970708678    | Program output: 5.0           
Correct output: -10.6746103067 | Program output: -11.0         
Correct output: 48.6600799051  | Program output: 48.0          
Correct output: 29.5504393334  | Program output: 29.0          
Correct output: 33.3497873494  | Program output: 33.0          
Correct output: -94.0996845263 | Program output: -94.0         
Correct output: 129.3166897457 | Program output: 129.0         
Correct output: 52.9261893635  | Program output: 52.0          
Correct output: 44.9476623686  | Program output: 44.0          
Correct output: -61.0543762286 | Program output: -61.0         
Correct output: -126.3741080035 | Program output: -126.0        
Correct output: -54.969119896  | Program output: -54.0         
Correct output: 76.6182845413  | Program output: 76.0          
Correct output: -80.2391916219 | Program output: -80.0         
Correct output: 58.0930783645  | Program output: 58.0          
Correct output: 56.5469735654  | Program output: 56.0          
Correct output: -52.9793852066 | Program output: -52.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction float_sin} {:instruction float_min} {:instruction 69.19158041932033} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction in2} {:instruction float_sin} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_fromfloat integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max integer_shove integer_min float_sin float_min 69.19158041932033 integer_mod integer_pop float_pop integer_rot in2 float_sin integer_dec float_frominteger integer_swap)
Errors: [0.9106 9 0.5298 10 0.0759 9 0.6003 9 0.3916 10 0.7633 11 0.9009 8 0.2078 9 0.0293 9 0.3254 10 0.6601 9 0.5504 9 0.3498 10 0.0997 9 0.3167 10 0.9262 10 0.9477 10 0.0544 9 0.3741 9 0.9691 9 0.6183 10 0.2392 10 0.0931 9 0.547 10 0.9794 9]
Total: 248.4601
Mean: 4.969202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1713.8260971999987
Median total errors in population: 286.4601
Error averages by case: (64.50016580000111 11.258 59.73570079999866 11.213 58.29613550000127 11.152 61.34166819999895 11.246 53.96046840000087 11.02 56.147804999999295 12.076 58.73475600000037 10.298 61.13677319999854 11.164 57.14593430000043 10.854 50.53221700000078 11.274 52.67918850000041 11.121 48.830956800000074 11.159 55.39258100000103 11.181 60.26003209999938 11.17 60.698396600001175 11.164 51.55917040000093 11.142 57.100806499999095 11.084 57.94457920000067 11.131 62.728323100000694 11.271 58.265653500000596 10.214 57.51728700000052 11.089 62.32392800000152 11.215 50.71413829999903 11.101 55.98673599999928 11.129 62.378695999998605 11.188)
Error minima by case: (0.0894 3 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 10 0.0991 3 0.2078 2 0.0293 8 0.3254 10 0.3399 1 0.4496 2 0.3498 2 0.0997 3 0.3167 2 0.0738 2 0.0523 2 0.0544 3 0.3741 3 0.0309 2 0.3817 2 0.2392 3 0.0931 2 0.453 2 0.0206 3)
Average genome size in population (length): 31.312
Average program size in population (points): 32.312
Average percent parens in population: 0.033
Minimum age in population: 81.62634468572895
Maximum age in population: 86.38746549360567
Average age in population: 84.43085049884402
Median age in population: 84.4898397965639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.047
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 55727903
--- Timings ---
Current time: 1529615210111 milliseconds
Total Time:         161.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.3 seconds, 52.8%
Fitness Testing:     59.3 seconds, 36.7%
Report:              16.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 10056.901399999997
Test mean error for best: 5.02845
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.0        
Correct output: 106.5297912457 | Program output: 106.0         
Correct output: 67.0758504978  | Program output: 67.0          
Correct output: 136.6003415923 | Program output: 136.0         
Correct output: 0.3915927699   | Program output: 0.0           
Correct output: -17.2367149126 | Program output: -18.0         
Correct output: -19.900899189  | Program output: -19.0         
Correct output: 139.2078452432 | Program output: 139.0         
Correct output: 4.970708678    | Program output: 5.0           
Correct output: -10.6746103067 | Program output: -11.0         
Correct output: 48.6600799051  | Program output: 48.0          
Correct output: 29.5504393334  | Program output: 29.0          
Correct output: 33.3497873494  | Program output: 33.0          
Correct output: -94.0996845263 | Program output: -94.0         
Correct output: 129.3166897457 | Program output: 129.0         
Correct output: 52.9261893635  | Program output: 52.0          
Correct output: 44.9476623686  | Program output: 44.0          
Correct output: -61.0543762286 | Program output: -61.0         
Correct output: -126.3741080035 | Program output: -126.0        
Correct output: -54.969119896  | Program output: -54.0         
Correct output: 76.6182845413  | Program output: 76.0          
Correct output: -80.2391916219 | Program output: -80.0         
Correct output: 58.0930783645  | Program output: 58.0          
Correct output: 56.5469735654  | Program output: 56.0          
Correct output: -52.9793852066 | Program output: -52.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_shove} {:instruction integer_min} {:instruction float_sin} {:instruction float_min} {:instruction 69.19158041932033} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction in2} {:instruction float_sin} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_fromfloat integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max integer_shove integer_min float_sin float_min 69.19158041932033 integer_mod integer_pop float_pop integer_rot in2 float_sin integer_dec float_frominteger integer_swap)
Errors: [0.9106 9 0.5298 10 0.0759 9 0.6003 9 0.3916 10 0.7633 11 0.9009 8 0.2078 9 0.0293 9 0.3254 10 0.6601 9 0.5504 9 0.3498 10 0.0997 9 0.3167 10 0.9262 10 0.9477 10 0.0544 9 0.3741 9 0.9691 9 0.6183 10 0.2392 10 0.0931 9 0.547 10 0.9794 9]
Total: 248.4601
Mean: 4.969202
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1573.7089329999988
Median total errors in population: 286.4601
Error averages by case: (57.31593080000076 11.215 53.02665439999892 11.208 54.07232330000104 11.129 55.103076899998904 11.226 45.43117440000039 11.006 51.4531773999993 12.06 53.05719740000037 10.277 54.81979939999886 11.162 52.4157547000002 10.88 43.52330440000062 11.236 45.98401120000029 11.118 47.31656960000007 11.136 51.72127260000111 11.159 52.811023099999346 11.15 54.79521430000082 11.163 49.75780880000102 11.133 53.23160989999928 11.073 52.44615680000066 11.118 55.12142380000066 11.237 51.01266470000014 10.175 52.11821770000015 11.084 55.39740960000117 11.205 48.99221059999909 11.102 49.82023999999921 11.129 55.412707199998955 11.171)
Error minima by case: (0.0894 4 0.4702 3 0.0759 3 0.3997 3 0.3916 3 0.2367 10 0.0991 4 0.2078 3 0.0293 9 0.3254 10 0.3399 2 0.4496 3 0.3498 3 0.0997 4 0.3167 3 0.0738 3 0.0523 3 0.0544 4 0.3741 4 0.0309 3 0.3817 3 0.2392 4 0.0931 3 0.453 3 0.0206 4)
Average genome size in population (length): 30.983
Average program size in population (points): 31.983
Average percent parens in population: 0.034
Minimum age in population: 83.56259915985493
Maximum age in population: 87.89182549590319
Average age in population: 85.91741784457328
Median age in population: 85.95515295939119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.041
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 56502578
--- Timings ---
Current time: 1529615212710 milliseconds
Total Time:         164.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.8 seconds, 52.9%
Fitness Testing:     60.1 seconds, 36.6%
Report:              17.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 10056.901399999997
Test mean error for best: 5.02845
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.0        
Correct output: 106.5297912457 | Program output: 106.0         
Correct output: 67.0758504978  | Program output: 67.0          
Correct output: 136.6003415923 | Program output: 136.0         
Correct output: 0.3915927699   | Program output: 0.0           
Correct output: -17.2367149126 | Program output: -18.0         
Correct output: -19.900899189  | Program output: -19.0         
Correct output: 139.2078452432 | Program output: 139.0         
Correct output: 4.970708678    | Program output: 5.0           
Correct output: -10.6746103067 | Program output: -11.0         
Correct output: 48.6600799051  | Program output: 48.0          
Correct output: 29.5504393334  | Program output: 29.0          
Correct output: 33.3497873494  | Program output: 33.0          
Correct output: -94.0996845263 | Program output: -94.0         
Correct output: 129.3166897457 | Program output: 129.0         
Correct output: 52.9261893635  | Program output: 52.0          
Correct output: 44.9476623686  | Program output: 44.0          
Correct output: -61.0543762286 | Program output: -61.0         
Correct output: -126.3741080035 | Program output: -126.0        
Correct output: -54.969119896  | Program output: -54.0         
Correct output: 76.6182845413  | Program output: 76.0          
Correct output: -80.2391916219 | Program output: -80.0         
Correct output: 58.0930783645  | Program output: 58.0          
Correct output: 56.5469735654  | Program output: 56.0          
Correct output: -52.9793852066 | Program output: -52.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_shove} {:instruction float_max} {:instruction float_frominteger})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_fromfloat integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max integer_shove float_max float_frominteger)
Errors: [0.9106 9 0.5298 10 0.0759 9 0.6003 9 0.3916 10 0.7633 11 0.9009 8 0.2078 9 0.0293 9 0.3254 10 0.6601 9 0.5504 9 0.3498 10 0.0997 9 0.3167 10 0.9262 10 0.9477 10 0.0544 9 0.3741 9 0.9691 9 0.6183 10 0.2392 10 0.0931 9 0.547 10 0.9794 9]
Total: 248.4601
Mean: 4.969202
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 1461.393887999999
Median total errors in population: 286.4601
Error averages by case: (55.587335800000865 11.18 50.020600299999 11.191 51.38812120000103 11.094 52.36587249999899 11.181 43.01236270000045 11.0 45.191925599999315 12.034 45.072188000000324 10.233 52.08180999999878 11.114 44.70315970000008 10.829 40.49470950000076 11.201 42.251416300000436 11.076 39.637773000000074 11.091 47.32887930000096 11.149 50.14553079999942 11.108 52.079809200000966 11.145 43.020656700000934 11.112 49.39543339999932 11.063 48.282072200000634 11.077 53.02282890000067 11.194 46.22328610000018 10.152 46.673812600000105 11.064 50.19998740000118 11.181 43.139870899999 11.063 44.34900409999924 11.112 48.95644179999897 11.125)
Error minima by case: (0.0894 5 0.4702 5 0.0759 5 0.3997 5 0.3916 5 0.2367 10 0.0991 4 0.2078 5 0.0293 8 0.3254 10 0.3399 4 0.4496 2 0.3498 5 0.0997 5 0.3167 5 0.0738 2 0.0523 5 0.0544 4 0.3741 6 0.0309 5 0.3817 4 0.2392 4 0.0931 2 0.453 4 0.0206 4)
Average genome size in population (length): 31.305
Average program size in population (points): 32.305
Average percent parens in population: 0.033
Minimum age in population: 85.05100419490348
Maximum age in population: 89.2893238768503
Average age in population: 87.35790042508592
Median age in population: 87.38704622258015
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.042
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 57285328
--- Timings ---
Current time: 1529615215139 milliseconds
Total Time:         166.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.2 seconds, 52.9%
Fitness Testing:     60.9 seconds, 36.5%
Report:              17.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 10056.901399999997
Test mean error for best: 5.02845
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.0        
Correct output: 106.5297912457 | Program output: 106.0         
Correct output: 67.0758504978  | Program output: 67.0          
Correct output: 136.6003415923 | Program output: 136.0         
Correct output: 0.3915927699   | Program output: 0.0           
Correct output: -17.2367149126 | Program output: -18.0         
Correct output: -19.900899189  | Program output: -19.0         
Correct output: 139.2078452432 | Program output: 139.0         
Correct output: 4.970708678    | Program output: 5.0           
Correct output: -10.6746103067 | Program output: -11.0         
Correct output: 48.6600799051  | Program output: 48.0          
Correct output: 29.5504393334  | Program output: 29.0          
Correct output: 33.3497873494  | Program output: 33.0          
Correct output: -94.0996845263 | Program output: -94.0         
Correct output: 129.3166897457 | Program output: 129.0         
Correct output: 52.9261893635  | Program output: 52.0          
Correct output: 44.9476623686  | Program output: 44.0          
Correct output: -61.0543762286 | Program output: -61.0         
Correct output: -126.3741080035 | Program output: -126.0        
Correct output: -54.969119896  | Program output: -54.0         
Correct output: 76.6182845413  | Program output: 76.0          
Correct output: -80.2391916219 | Program output: -80.0         
Correct output: 58.0930783645  | Program output: 58.0          
Correct output: 56.5469735654  | Program output: 56.0          
Correct output: -52.9793852066 | Program output: -52.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction float_add} {:instruction float_yank} {:instruction float_mult} {:instruction tagged_975} {:instruction -31.62335852033054} {:instruction in1} {:instruction print_integer} {:instruction float_max} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_pop} {:instruction float_sin} {:instruction 44} {:instruction integer_inc} {:instruction float_pop} {:instruction float_mult} {:instruction float_yank})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_fromfloat integer_add float_dec float_add float_frominteger print_float float_add float_yank float_mult tagged_975 -31.62335852033054 in1 print_integer float_max float_min float_cos integer_mod integer_pop float_sin 44 integer_inc float_pop float_mult float_yank)
Errors: [0.9106 9 0.5298 10 0.0759 9 0.6003 9 0.3916 10 0.7633 11 0.9009 8 0.2078 9 0.0293 9 0.3254 10 0.6601 9 0.5504 9 0.3498 10 0.0997 9 0.3167 10 0.9262 10 0.9477 10 0.0544 9 0.3741 9 0.9691 9 0.6183 10 0.2392 10 0.0931 9 0.547 10 0.9794 9]
Total: 248.4601
Mean: 4.969202
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1463.1796453999984
Median total errors in population: 286.4601
Error averages by case: (54.4581824000007 11.003 49.54647879999902 11.081 50.88923410000111 10.911 50.76648819999882 10.988 44.88887360000033 10.912 47.92386359999914 11.969 47.62664520000042 10.024 50.48468609999893 10.936 46.58263569999991 10.677 39.698185400000916 11.091 40.175614400000505 10.878 39.81630250000007 10.893 48.41947020000111 11.054 50.99482969999924 10.932 50.39443670000069 11.053 42.16008070000107 11.004 49.95198229999926 10.987 48.77217760000071 10.909 52.29843820000072 11.011 48.1161900000001 10.058 47.56542989999991 10.975 50.3008680000011 11.077 42.37490049999887 10.873 45.6315877999992 11.005 50.10006379999903 10.941)
Error minima by case: (0.0894 4 0.4702 3 0.0759 4 0.3997 3 0.3916 3 0.2367 10 0.0991 2 0.2078 3 0.0293 8 0.3254 9 0.3399 2 0.4496 1 0.3498 4 0.0997 4 0.3167 3 0.0738 1 0.0523 4 0.0544 4 0.3741 5 0.0309 3 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 31.354
Average program size in population (points): 32.354
Average percent parens in population: 0.033
Minimum age in population: 86.47359047429072
Maximum age in population: 90.52827006268866
Average age in population: 88.76274193147609
Median age in population: 88.80052244071415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.046
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 58069203
--- Timings ---
Current time: 1529615217730 milliseconds
Total Time:         169.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.6 seconds, 52.9%
Fitness Testing:     61.8 seconds, 36.5%
Report:              17.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 10056.901399999997
Test mean error for best: 5.02845
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.0        
Correct output: 106.5297912457 | Program output: 106.0         
Correct output: 67.0758504978  | Program output: 67.0          
Correct output: 136.6003415923 | Program output: 136.0         
Correct output: 0.3915927699   | Program output: 0.0           
Correct output: -17.2367149126 | Program output: -18.0         
Correct output: -19.900899189  | Program output: -19.0         
Correct output: 139.2078452432 | Program output: 139.0         
Correct output: 4.970708678    | Program output: 5.0           
Correct output: -10.6746103067 | Program output: -11.0         
Correct output: 48.6600799051  | Program output: 48.0          
Correct output: 29.5504393334  | Program output: 29.0          
Correct output: 33.3497873494  | Program output: 33.0          
Correct output: -94.0996845263 | Program output: -94.0         
Correct output: 129.3166897457 | Program output: 129.0         
Correct output: 52.9261893635  | Program output: 52.0          
Correct output: 44.9476623686  | Program output: 44.0          
Correct output: -61.0543762286 | Program output: -61.0         
Correct output: -126.3741080035 | Program output: -126.0        
Correct output: -54.969119896  | Program output: -54.0         
Correct output: 76.6182845413  | Program output: 76.0          
Correct output: -80.2391916219 | Program output: -80.0         
Correct output: 58.0930783645  | Program output: 58.0          
Correct output: 56.5469735654  | Program output: 56.0          
Correct output: -52.9793852066 | Program output: -52.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec integer_fromfloat integer_fromfloat integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max)
Errors: [0.9106 9 0.5298 10 0.0759 9 0.6003 9 0.3916 10 0.7633 11 0.9009 8 0.2078 9 0.0293 9 0.3254 10 0.6601 9 0.5504 9 0.3498 10 0.0997 9 0.3167 10 0.9262 10 0.9477 10 0.0544 9 0.3741 9 0.9691 9 0.6183 10 0.2392 10 0.0931 9 0.547 10 0.9794 9]
Total: 248.4601
Mean: 4.969202
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 1770.1088076999984
Median total errors in population: 286.4601
Error averages by case: (65.31983120000072 10.364 61.370283599998935 10.809 62.776997000001 10.236 62.74917849999896 10.35 58.71302560000052 10.59 60.44485279999938 11.621 61.01427050000038 9.386 62.54066199999882 10.311 61.3673109000002 9.91 54.386804200000725 10.754 55.61398290000039 10.203 54.75987440000007 10.228 61.094634400001034 10.766 61.551944399999435 10.269 62.147881500000786 10.798 56.56729060000091 10.703 62.3606955999993 10.695 60.24734880000067 10.239 63.17373320000068 10.36 60.50067320000027 9.777 60.12654890000019 10.688 61.93044340000109 10.819 56.367315299999035 10.199 59.2300189999993 10.73 62.64620579999901 10.302)
Error minima by case: (0.0894 2 0.4702 2 0.0759 2 0.3997 2 0.3916 2 0.2367 9 0.0991 2 0.2078 2 0.0293 7 0.3254 9 0.3399 1 0.4496 1 0.3498 2 0.0997 2 0.3167 2 0.0738 1 0.0523 2 0.0544 2 0.3741 3 0.0309 2 0.3817 2 0.2392 2 0.0931 1 0.453 2 0.0206 2)
Average genome size in population (length): 32.272
Average program size in population (points): 33.272
Average percent parens in population: 0.032
Minimum age in population: 87.47359047429072
Maximum age in population: 91.8634335649322
Average age in population: 90.20492023031711
Median age in population: 90.27702074295306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.053
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 58876003
--- Timings ---
Current time: 1529615220506 milliseconds
Total Time:         172.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.0 seconds, 52.9%
Fitness Testing:     62.8 seconds, 36.5%
Report:              18.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 2134.0
Test mean error for best: 1.06700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -165.9105758841
Correct output: 106.5297912457 | Program output: 105.5297912457
Correct output: 67.0758504978  | Program output: 66.0758504978 
Correct output: 136.6003415923 | Program output: 135.6003415923
Correct output: 0.3915927699   | Program output: -0.6084072301 
Correct output: -17.2367149126 | Program output: -18.2367149126
Correct output: -19.900899189  | Program output: -20.900899189 
Correct output: 139.2078452432 | Program output: 138.2078452432
Correct output: 4.970708678    | Program output: 3.970708678   
Correct output: -10.6746103067 | Program output: -11.6746103067
Correct output: 48.6600799051  | Program output: 47.6600799051 
Correct output: 29.5504393334  | Program output: 28.5504393334 
Correct output: 33.3497873494  | Program output: 32.3497873494 
Correct output: -94.0996845263 | Program output: -95.0996845263
Correct output: 129.3166897457 | Program output: 128.3166897457
Correct output: 52.9261893635  | Program output: 51.9261893635 
Correct output: 44.9476623686  | Program output: 43.9476623686 
Correct output: -61.0543762286 | Program output: -62.0543762286
Correct output: -126.3741080035 | Program output: -127.3741080035
Correct output: -54.969119896  | Program output: -55.969119896 
Correct output: 76.6182845413  | Program output: 75.6182845413 
Correct output: -80.2391916219 | Program output: -81.2391916219
Correct output: 58.0930783645  | Program output: 57.0930783645 
Correct output: 56.5469735654  | Program output: 55.5469735654 
Correct output: -52.9793852066 | Program output: -53.9793852066
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec float_frominteger float_add integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 11 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 61.0
Mean: 1.22
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 1430.6952156999985
Median total errors in population: 248.4601
Error averages by case: (53.89088640000083 9.478 46.42917579999954 10.363 50.07691450000079 9.36 47.81457159999907 9.461 48.50580420000046 10.179 48.36911759999937 11.198 48.09187900000038 8.462 47.59502029999938 9.456 47.77403579999997 9.114 44.15976900000071 10.223 42.08343840000029 9.319 41.59866660000007 9.326 48.232400600000794 10.326 50.29641569999941 9.392 47.23931010000031 10.364 43.17583420000078 10.243 49.59604189999954 10.273 49.3388722000007 9.38 51.722010900000704 9.451 49.25077590000012 9.311 45.12162719999978 10.245 49.072295000000835 10.377 42.93466799999918 9.333 44.15135679999938 10.286 49.82432799999919 9.43)
Error minima by case: (0.0894 1 0.4702 1 0.0759 1 0.3997 1 0.3196 2 0.2367 1 0.0991 2 0.2078 1 0.0293 1 0.3254 1 0.3399 1 0.4496 1 0.3498 1 0.0997 1 0.3167 1 0.0738 1 0.0523 1 0.0544 1 0.3741 1 0.0309 1 0.3817 1 0.2392 1 0.0931 1 0.453 1 0.0206 1)
Average genome size in population (length): 33.13
Average program size in population (points): 34.13
Average percent parens in population: 0.031
Minimum age in population: 88.47359047429072
Maximum age in population: 93.63454350700216
Average age in population: 91.66119962359026
Median age in population: 91.74154729592429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.048
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 59704253
--- Timings ---
Current time: 1529615223233 milliseconds
Total Time:         174.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.5 seconds, 52.9%
Fitness Testing:     63.8 seconds, 36.5%
Report:              18.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 2134.0
Test mean error for best: 1.06700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -165.9105758841
Correct output: 106.5297912457 | Program output: 105.5297912457
Correct output: 67.0758504978  | Program output: 66.0758504978 
Correct output: 136.6003415923 | Program output: 135.6003415923
Correct output: 0.3915927699   | Program output: -0.6084072301 
Correct output: -17.2367149126 | Program output: -18.2367149126
Correct output: -19.900899189  | Program output: -20.900899189 
Correct output: 139.2078452432 | Program output: 138.2078452432
Correct output: 4.970708678    | Program output: 3.970708678   
Correct output: -10.6746103067 | Program output: -11.6746103067
Correct output: 48.6600799051  | Program output: 47.6600799051 
Correct output: 29.5504393334  | Program output: 28.5504393334 
Correct output: 33.3497873494  | Program output: 32.3497873494 
Correct output: -94.0996845263 | Program output: -95.0996845263
Correct output: 129.3166897457 | Program output: 128.3166897457
Correct output: 52.9261893635  | Program output: 51.9261893635 
Correct output: 44.9476623686  | Program output: 43.9476623686 
Correct output: -61.0543762286 | Program output: -62.0543762286
Correct output: -126.3741080035 | Program output: -127.3741080035
Correct output: -54.969119896  | Program output: -55.969119896 
Correct output: 76.6182845413  | Program output: 75.6182845413 
Correct output: -80.2391916219 | Program output: -81.2391916219
Correct output: 58.0930783645  | Program output: 57.0930783645 
Correct output: 56.5469735654  | Program output: 55.5469735654 
Correct output: -52.9793852066 | Program output: -53.9793852066
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max})
Best program: (float_mod in2 float_swap float_div float_dec float_yankdup integer_inc integer_add in1 float_div integer_dec float_frominteger float_add integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 11 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 61.0
Mean: 1.22
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 1148.656121799998
Median total errors in population: 248.4601
Error averages by case: (42.063467200000474 9.369 34.69600140000002 10.277 39.189390300000575 9.272 35.92778169999898 9.354 39.58178280000026 10.163 37.882124199999325 11.126 35.63062180000037 8.348 35.683284899999855 9.36 35.66340889999938 9.04 35.5353758000008 10.139 31.981201000000382 9.225 31.28080860000007 9.22 37.65530560000065 10.255 38.70092639999938 9.297 35.40423719999983 10.279 32.77614580000095 10.168 38.90465389999974 10.204 37.756286400000654 9.287 39.91617920000067 9.346 37.74981919999984 9.227 33.60433429999904 10.187 36.4415994000004 10.282 32.434623999999005 9.242 32.783688999999285 10.214 37.20607279999946 9.326)
Error minima by case: (0.0894 1 0.4702 1 0.0759 1 0.3997 1 0.3916 8 0.2367 1 0.0991 2 0.2078 1 0.0293 1 0.3254 1 0.3399 1 0.4496 1 0.3498 1 0.0997 1 0.2527 1 0.0738 1 0.0523 1 0.0544 1 0.3741 1 0.0309 1 0.3817 1 0.2392 1 0.0931 1 0.453 1 0.0206 1)
Average genome size in population (length): 32.924
Average program size in population (points): 33.924
Average percent parens in population: 0.031
Minimum age in population: 90.05978987079916
Maximum age in population: 95.06770875433286
Average age in population: 93.14616844272712
Median age in population: 93.1867258470261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.039
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 60527353
--- Timings ---
Current time: 1529615225730 milliseconds
Total Time:         177.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.8 seconds, 52.9%
Fitness Testing:     64.7 seconds, 36.5%
Report:              18.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.9105758841
Correct output: 106.5297912457 | Program output: 106.5297912457
Correct output: 67.0758504978  | Program output: 67.0758504978 
Correct output: 136.6003415923 | Program output: 136.6003415923
Correct output: 0.3915927699   | Program output: 0.3915927699  
Correct output: -17.2367149126 | Program output: -17.2367149126
Correct output: -19.900899189  | Program output: -19.900899189 
Correct output: 139.2078452432 | Program output: 139.2078452432
Correct output: 4.970708678    | Program output: 4.970708678   
Correct output: -10.6746103067 | Program output: -10.6746103067
Correct output: 48.6600799051  | Program output: 48.6600799051 
Correct output: 29.5504393334  | Program output: 29.5504393334 
Correct output: 33.3497873494  | Program output: 33.3497873494 
Correct output: -94.0996845263 | Program output: -94.0996845263
Correct output: 129.3166897457 | Program output: 129.3166897457
Correct output: 52.9261893635  | Program output: 52.9261893635 
Correct output: 44.9476623686  | Program output: 44.9476623686 
Correct output: -61.0543762286 | Program output: -61.0543762286
Correct output: -126.3741080035 | Program output: -126.3741080035
Correct output: -54.969119896  | Program output: -54.969119896 
Correct output: 76.6182845413  | Program output: 76.6182845413 
Correct output: -80.2391916219 | Program output: -80.2391916219
Correct output: 58.0930783645  | Program output: 58.0930783645 
Correct output: 56.5469735654  | Program output: 56.5469735654 
Correct output: -52.9793852066 | Program output: -52.9793852066
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction in2} {:instruction float_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_max} {:instruction integer_inc} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction float_div} {:instruction integer_dec} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction float_add} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dec} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max})
Best program: (float_mod in2 float_swap float_div float_dec float_max integer_inc integer_add float_yankdup integer_inc integer_add in1 float_div integer_dec float_frominteger float_add integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max float_mult float_max float_dup_times float_max)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1388.2718396999983
Median total errors in population: 248.4601
Error averages by case: (51.695563000000895 9.169 45.04842259999892 10.04 49.057590900001166 9.056 46.50113909999902 9.165 50.00790200000096 10.185 47.267461899999375 10.857 44.96179590000031 8.215 46.30590059999883 9.154 46.33934730000038 8.821 44.261312200000745 9.918 41.53741550000044 9.02 41.27784800000007 9.025 47.71067980000119 10.006 48.00424349999948 9.09 45.82735110000092 10.043 42.6397940000009 9.929 48.88049269999916 9.952 46.81629440000065 9.069 49.86385550000067 9.16 46.43967320000047 9.022 43.92407310000024 9.931 45.47684320000122 10.033 42.282810799999055 9.028 42.74500399999927 9.963 46.427025399998904 9.121)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 32.543
Average program size in population (points): 33.543
Average percent parens in population: 0.032
Minimum age in population: 91.56173835715902
Maximum age in population: 96.8555966252677
Average age in population: 94.6164547371916
Median age in population: 94.62482800064527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.051
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 61340953
--- Timings ---
Current time: 1529615228525 milliseconds
Total Time:         180.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.4 seconds, 53.0%
Fitness Testing:     65.6 seconds, 36.4%
Report:              19.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 64
Successful program: (float_mod in2 float_swap float_div float_dec float_max integer_inc integer_add float_yankdup integer_inc integer_add in1 float_div integer_dec float_frominteger float_add integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max float_mult float_max float_dup_times float_max)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 32


Auto-simplifying with starting size: 32
step: 0
program: (float_mod in2 float_swap float_div float_dec float_max integer_inc integer_add float_yankdup integer_inc integer_add in1 float_div integer_dec float_frominteger float_add integer_add float_dec float_add float_frominteger print_float integer_dec float_max float_mult float_max float_dup_times float_max float_mult float_max float_dup_times float_max)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 32

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -164.9105758841 | Program output: -164.9105758841
Correct output: 106.5297912457 | Program output: 106.5297912457
Correct output: 67.0758504978  | Program output: 67.0758504978 
Correct output: 136.6003415923 | Program output: 136.6003415923
Correct output: 0.3915927699   | Program output: 0.3915927699  
Correct output: -17.2367149126 | Program output: -17.2367149126
Correct output: -19.900899189  | Program output: -19.900899189 
Correct output: 139.2078452432 | Program output: 139.2078452432
Correct output: 4.970708678    | Program output: 4.970708678   
Correct output: -10.6746103067 | Program output: -10.6746103067
Correct output: 48.6600799051  | Program output: 48.6600799051 
Correct output: 29.5504393334  | Program output: 29.5504393334 
Correct output: 33.3497873494  | Program output: 33.3497873494 
Correct output: -94.0996845263 | Program output: -94.0996845263
Correct output: 129.3166897457 | Program output: 129.3166897457
Correct output: 52.9261893635  | Program output: 52.9261893635 
Correct output: 44.9476623686  | Program output: 44.9476623686 
Correct output: -61.0543762286 | Program output: -61.0543762286
Correct output: -126.3741080035 | Program output: -126.3741080035
Correct output: -54.969119896  | Program output: -54.969119896 
Correct output: 76.6182845413  | Program output: 76.6182845413 
Correct output: -80.2391916219 | Program output: -80.2391916219
Correct output: 58.0930783645  | Program output: 58.0930783645 
Correct output: 56.5469735654  | Program output: 56.5469735654 
Correct output: -52.9793852066 | Program output: -52.9793852066
;;******************************
