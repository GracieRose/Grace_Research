Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[64.71022042057325 87] 151.71022042057325]
Train Case:   1 | Input/Output: [[-4.717172997536039 22] 17.28282700246396]
Train Case:   2 | Input/Output: [[-68.8695510410994 92] 23.1304489589006]
Train Case:   3 | Input/Output: [[68.07855916456776 69] 137.07855916456776]
Train Case:   4 | Input/Output: [[24.90821896680974 -61] -36.09178103319026]
Train Case:   5 | Input/Output: [[-82.141948510233 20] -62.14194851023299]
Train Case:   6 | Input/Output: [[-79.84790902021692 97] 17.152090979783083]
Train Case:   7 | Input/Output: [[23.391210086759216 -33] -9.608789913240784]
Train Case:   8 | Input/Output: [[40.49321743597474 35] 75.49321743597474]
Train Case:   9 | Input/Output: [[-25.796207961746205 78] 52.203792038253795]
Train Case:  10 | Input/Output: [[6.1652867423715065 -86] -79.8347132576285]
Train Case:  11 | Input/Output: [[91.81544919596556 63] 154.81544919596556]
Train Case:  12 | Input/Output: [[-66.1443327626346 47] -19.144332762634605]
Train Case:  13 | Input/Output: [[97.0725301747008 83] 180.0725301747008]
Train Case:  14 | Input/Output: [[-95.33993585780519 -33] -128.3399358578052]
Train Case:  15 | Input/Output: [[7.223163084599889 -28] -20.77683691540011]
Train Case:  16 | Input/Output: [[-91.49725907741862 -15] -106.49725907741862]
Train Case:  17 | Input/Output: [[59.412951624499556 2] 61.412951624499556]
Train Case:  18 | Input/Output: [[-4.480239380077492 43] 38.51976061992251]
Train Case:  19 | Input/Output: [[-68.08579690847392 64] -4.085796908473924]
Train Case:  20 | Input/Output: [[-42.85383490585877 -51] -93.85383490585878]
Train Case:  21 | Input/Output: [[23.78826949451461 4] 27.78826949451461]
Train Case:  22 | Input/Output: [[-65.3323619160427 -80] -145.33236191604271]
Train Case:  23 | Input/Output: [[37.17948839169807 40] 77.17948839169807]
Train Case:  24 | Input/Output: [[5.34638704981063 -73] -67.65361295018937]
Test Case:   0 | Input/Output: [[70.86213306166721 93] 163.8621330616672]
Test Case:   1 | Input/Output: [[-10.903284934757522 -19] -29.903284934757522]
Test Case:   2 | Input/Output: [[63.73719410604946 92] 155.73719410604946]
Test Case:   3 | Input/Output: [[99.94393495204812 34] 133.94393495204812]
Test Case:   4 | Input/Output: [[-42.4208797829047 79] 36.5791202170953]
Test Case:   5 | Input/Output: [[-2.536597905320349 -72] -74.53659790532035]
Test Case:   6 | Input/Output: [[-17.775369449021 -17] -34.775369449021]
Test Case:   7 | Input/Output: [[-56.95855555084754 91] 34.04144444915246]
Test Case:   8 | Input/Output: [[-66.03185481423827 -54] -120.03185481423827]
Test Case:   9 | Input/Output: [[61.73158378443449 80] 141.7315837844345]
Test Case:  10 | Input/Output: [[-18.065984203274382 -86] -104.06598420327438]
Test Case:  11 | Input/Output: [[-79.00029325177098 63] -16.000293251770984]
Test Case:  12 | Input/Output: [[88.90609150618607 84] 172.90609150618607]
Test Case:  13 | Input/Output: [[-71.78158318869438 1] -70.78158318869438]
Test Case:  14 | Input/Output: [[-22.13058815794841 58] 35.86941184205159]
Test Case:  15 | Input/Output: [[-47.219780761058104 -58] -105.2197807610581]
Test Case:  16 | Input/Output: [[-24.390115013246884 56] 31.609884986753116]
Test Case:  17 | Input/Output: [[26.111624526423412 -4] 22.111624526423412]
Test Case:  18 | Input/Output: [[-30.626957401657222 48] 17.373042598342778]
Test Case:  19 | Input/Output: [[84.6354113228264 40] 124.6354113228264]
Test Case:  20 | Input/Output: [[-69.84618783996994 -92] -161.84618783996996]
Test Case:  21 | Input/Output: [[-2.9570244254835814 -51] -53.95702442548358]
Test Case:  22 | Input/Output: [[-83.88543904449186 60] -23.88543904449186]
Test Case:  23 | Input/Output: [[-54.63371628407312 56] 1.3662837159268832]
Test Case:  24 | Input/Output: [[39.2506239382102 78] 117.2506239382102]
Test Case:  25 | Input/Output: [[-41.6692551622436 -67] -108.6692551622436]
Test Case:  26 | Input/Output: [[85.95747956114326 78] 163.95747956114326]
Test Case:  27 | Input/Output: [[-13.576235930510848 -42] -55.57623593051085]
Test Case:  28 | Input/Output: [[91.36074276161489 99] 190.3607427616149]
Test Case:  29 | Input/Output: [[98.69741211686883 -99] -0.30258788313116725]
Test Case:  30 | Input/Output: [[-30.20015120996962 -14] -44.20015120996962]
Test Case:  31 | Input/Output: [[-33.9537292771722 3] -30.9537292771722]
Test Case:  32 | Input/Output: [[-30.719741791727003 58] 27.280258208272997]
Test Case:  33 | Input/Output: [[52.82929461268182 50] 102.82929461268182]
Test Case:  34 | Input/Output: [[92.21090194140245 10] 102.21090194140245]
Test Case:  35 | Input/Output: [[-86.93073892180976 -13] -99.93073892180976]
Test Case:  36 | Input/Output: [[62.23863517575191 -22] 40.23863517575191]
Test Case:  37 | Input/Output: [[17.697918110017156 -85] -67.30208188998284]
Test Case:  38 | Input/Output: [[66.13932110921414 67] 133.13932110921414]
Test Case:  39 | Input/Output: [[34.131488577224275 56] 90.13148857722427]
Test Case:  40 | Input/Output: [[-96.0776454677332 -79] -175.0776454677332]
Test Case:  41 | Input/Output: [[76.80609193105346 -88] -11.193908068946541]
Test Case:  42 | Input/Output: [[-69.9685938137186 10] -59.9685938137186]
Test Case:  43 | Input/Output: [[-17.956464896229065 55] 37.043535103770935]
Test Case:  44 | Input/Output: [[-53.73811459862758 63] 9.261885401372417]
Test Case:  45 | Input/Output: [[43.52214226941956 -68] -24.47785773058044]
Test Case:  46 | Input/Output: [[13.226027009891311 2] 15.226027009891311]
Test Case:  47 | Input/Output: [[52.47663659350266 -11] 41.47663659350266]
Test Case:  48 | Input/Output: [[67.95688135260858 -57] 10.956881352608576]
Test Case:  49 | Input/Output: [[18.5098160590001 35] 53.5098160590001]
Test Case:  50 | Input/Output: [[75.86937281139018 5] 80.86937281139018]
Test Case:  51 | Input/Output: [[65.15057060253736 -80] -14.849429397462643]
Test Case:  52 | Input/Output: [[18.616800036520132 100] 118.61680003652013]
Test Case:  53 | Input/Output: [[82.05518987735647 -72] 10.055189877356469]
Test Case:  54 | Input/Output: [[-14.781971395841211 76] 61.21802860415879]
Test Case:  55 | Input/Output: [[22.812633757143644 58] 80.81263375714364]
Test Case:  56 | Input/Output: [[-28.16624690942217 -100] -128.16624690942217]
Test Case:  57 | Input/Output: [[-18.275415575299036 74] 55.724584424700964]
Test Case:  58 | Input/Output: [[-94.09199379554589 2] -92.09199379554589]
Test Case:  59 | Input/Output: [[0.040197668936457376 -80] -79.95980233106354]
Test Case:  60 | Input/Output: [[63.71198821744687 -80] -16.288011782553127]
Test Case:  61 | Input/Output: [[23.352464608567942 94] 117.35246460856794]
Test Case:  62 | Input/Output: [[2.0900235764988366 -40] -37.90997642350116]
Test Case:  63 | Input/Output: [[-21.833432965234678 68] 46.16656703476532]
Test Case:  64 | Input/Output: [[-17.036773488701428 -2] -19.036773488701428]
Test Case:  65 | Input/Output: [[18.256696264482144 50] 68.25669626448214]
Test Case:  66 | Input/Output: [[-53.200026658402535 11] -42.200026658402535]
Test Case:  67 | Input/Output: [[82.0167066690995 -52] 30.016706669099506]
Test Case:  68 | Input/Output: [[72.65945907604888 -34] 38.659459076048876]
Test Case:  69 | Input/Output: [[69.69277661825711 31] 100.69277661825711]
Test Case:  70 | Input/Output: [[40.39890038498993 35] 75.39890038498993]
Test Case:  71 | Input/Output: [[10.525058357975524 53] 63.525058357975524]
Test Case:  72 | Input/Output: [[76.83421476264613 -31] 45.83421476264613]
Test Case:  73 | Input/Output: [[-28.655066625737447 -61] -89.65506662573745]
Test Case:  74 | Input/Output: [[-57.85946360656562 -79] -136.8594636065656]
Test Case:  75 | Input/Output: [[-27.319343185719163 -85] -112.31934318571916]
Test Case:  76 | Input/Output: [[-61.190437668874885 -41] -102.19043766887489]
Test Case:  77 | Input/Output: [[-35.003869969267114 -77] -112.00386996926711]
Test Case:  78 | Input/Output: [[-51.911154095752444 -26] -77.91115409575244]
Test Case:  79 | Input/Output: [[-20.284743235907897 64] 43.7152567640921]
Test Case:  80 | Input/Output: [[22.694965248191792 89] 111.69496524819179]
Test Case:  81 | Input/Output: [[-56.3079301446189 -27] -83.3079301446189]
Test Case:  82 | Input/Output: [[-65.66274923224076 79] 13.337250767759244]
Test Case:  83 | Input/Output: [[25.77055803257433 54] 79.77055803257433]
Test Case:  84 | Input/Output: [[35.78943879407336 -76] -40.21056120592664]
Test Case:  85 | Input/Output: [[-45.10737389687787 -43] -88.10737389687787]
Test Case:  86 | Input/Output: [[24.292091345394624 -7] 17.292091345394624]
Test Case:  87 | Input/Output: [[-66.92215381251418 31] -35.92215381251418]
Test Case:  88 | Input/Output: [[60.737739797673584 -8] 52.737739797673584]
Test Case:  89 | Input/Output: [[2.4962745747079396 26] 28.49627457470794]
Test Case:  90 | Input/Output: [[98.22164854280246 -56] 42.221648542802455]
Test Case:  91 | Input/Output: [[10.050215528222822 -13] -2.9497844717771784]
Test Case:  92 | Input/Output: [[-21.082466103555646 -90] -111.08246610355565]
Test Case:  93 | Input/Output: [[-27.437753971983895 69] 41.562246028016105]
Test Case:  94 | Input/Output: [[-83.62497925960315 -95] -178.62497925960315]
Test Case:  95 | Input/Output: [[74.21515514912511 -58] 16.21515514912511]
Test Case:  96 | Input/Output: [[-68.74088115134809 75] 6.259118848651909]
Test Case:  97 | Input/Output: [[39.29699691840676 -54] -14.703003081593238]
Test Case:  98 | Input/Output: [[-45.08454397017165 65] 19.91545602982835]
Test Case:  99 | Input/Output: [[-9.470280909897227 -6] -15.470280909897227]
Test Case: 100 | Input/Output: [[41.09324985611431 -15] 26.093249856114312]
Test Case: 101 | Input/Output: [[-39.71117172116716 17] -22.71117172116716]
Test Case: 102 | Input/Output: [[-57.856015716609235 26] -31.856015716609235]
Test Case: 103 | Input/Output: [[-88.88721542187723 82] -6.8872154218772295]
Test Case: 104 | Input/Output: [[-14.788986057333474 9] -5.788986057333474]
Test Case: 105 | Input/Output: [[2.8336843605514304 54] 56.83368436055143]
Test Case: 106 | Input/Output: [[-4.568219520773482 10] 5.431780479226518]
Test Case: 107 | Input/Output: [[24.66959953224024 -76] -51.33040046775976]
Test Case: 108 | Input/Output: [[-83.75875344275929 87] 3.2412465572407143]
Test Case: 109 | Input/Output: [[3.2843038692405457 -64] -60.715696130759454]
Test Case: 110 | Input/Output: [[68.59968654448429 -17] 51.599686544484285]
Test Case: 111 | Input/Output: [[-1.9226304122634872 98] 96.07736958773651]
Test Case: 112 | Input/Output: [[-72.48904502937296 39] -33.48904502937296]
Test Case: 113 | Input/Output: [[-80.7787419781362 57] -23.778741978136196]
Test Case: 114 | Input/Output: [[-11.818872649927442 96] 84.18112735007256]
Test Case: 115 | Input/Output: [[-33.172229454753506 -13] -46.172229454753506]
Test Case: 116 | Input/Output: [[99.94743288218834 72] 171.94743288218834]
Test Case: 117 | Input/Output: [[-27.589514995249246 -43] -70.58951499524925]
Test Case: 118 | Input/Output: [[-30.92446461276242 41] 10.07553538723758]
Test Case: 119 | Input/Output: [[94.24055782100453 -25] 69.24055782100453]
Test Case: 120 | Input/Output: [[-74.02026730303584 -71] -145.02026730303584]
Test Case: 121 | Input/Output: [[-71.2702227042046 -3] -74.2702227042046]
Test Case: 122 | Input/Output: [[-2.6006101654132436 8] 5.399389834586756]
Test Case: 123 | Input/Output: [[-15.19588950726201 -45] -60.19588950726201]
Test Case: 124 | Input/Output: [[77.00558397493822 93] 170.00558397493822]
Test Case: 125 | Input/Output: [[-14.588574821507521 85] 70.41142517849248]
Test Case: 126 | Input/Output: [[55.13547899811567 -26] 29.135478998115673]
Test Case: 127 | Input/Output: [[93.31073875321974 53] 146.31073875321974]
Test Case: 128 | Input/Output: [[92.75163611256639 81] 173.7516361125664]
Test Case: 129 | Input/Output: [[96.768679317622 -95] 1.7686793176220021]
Test Case: 130 | Input/Output: [[56.379839710833124 -54] 2.3798397108331244]
Test Case: 131 | Input/Output: [[48.04609855847991 -41] 7.046098558479912]
Test Case: 132 | Input/Output: [[-98.69819452474322 84] -14.698194524743215]
Test Case: 133 | Input/Output: [[-71.5568679836204 76] 4.443132016379593]
Test Case: 134 | Input/Output: [[-22.740783773502756 -84] -106.74078377350276]
Test Case: 135 | Input/Output: [[-71.60976588860481 47] -24.609765888604812]
Test Case: 136 | Input/Output: [[-49.8322226100111 58] 8.167777389988899]
Test Case: 137 | Input/Output: [[-6.281807340999322 -50] -56.28180734099932]
Test Case: 138 | Input/Output: [[54.92058538638432 3] 57.92058538638432]
Test Case: 139 | Input/Output: [[-99.36154294103956 43] -56.36154294103956]
Test Case: 140 | Input/Output: [[-2.5436124088828933 -66] -68.5436124088829]
Test Case: 141 | Input/Output: [[23.60300071708417 -65] -41.39699928291583]
Test Case: 142 | Input/Output: [[90.57460382895164 77] 167.57460382895164]
Test Case: 143 | Input/Output: [[-53.01349729738991 1] -52.01349729738991]
Test Case: 144 | Input/Output: [[-68.54816884340678 52] -16.548168843406785]
Test Case: 145 | Input/Output: [[98.46822057236912 -95] 3.4682205723691197]
Test Case: 146 | Input/Output: [[11.120358086787462 0] 11.120358086787462]
Test Case: 147 | Input/Output: [[-93.3894723790462 75] -18.389472379046197]
Test Case: 148 | Input/Output: [[97.00063219349954 -42] 55.00063219349954]
Test Case: 149 | Input/Output: [[60.24678236556841 67] 127.24678236556841]
Test Case: 150 | Input/Output: [[81.72398639520108 -57] 24.72398639520108]
Test Case: 151 | Input/Output: [[40.6965508837321 59] 99.6965508837321]
Test Case: 152 | Input/Output: [[30.42661070368007 85] 115.42661070368007]
Test Case: 153 | Input/Output: [[75.6842093990735 54] 129.6842093990735]
Test Case: 154 | Input/Output: [[46.79047871154688 -44] 2.790478711546882]
Test Case: 155 | Input/Output: [[-23.298418197869594 -22] -45.298418197869594]
Test Case: 156 | Input/Output: [[-8.97544254497447 -23] -31.97544254497447]
Test Case: 157 | Input/Output: [[30.324038823939304 83] 113.3240388239393]
Test Case: 158 | Input/Output: [[-79.63327992350924 74] -5.633279923509235]
Test Case: 159 | Input/Output: [[-23.45324272700644 2] -21.45324272700644]
Test Case: 160 | Input/Output: [[97.41739054988412 -89] 8.417390549884118]
Test Case: 161 | Input/Output: [[-92.04983383887459 70] -22.04983383887459]
Test Case: 162 | Input/Output: [[56.42854240386643 -36] 20.42854240386643]
Test Case: 163 | Input/Output: [[2.4844990415055577 73] 75.48449904150556]
Test Case: 164 | Input/Output: [[26.370903962325514 85] 111.37090396232551]
Test Case: 165 | Input/Output: [[44.24408191359498 -35] 9.244081913594982]
Test Case: 166 | Input/Output: [[-56.29433763956906 -20] -76.29433763956905]
Test Case: 167 | Input/Output: [[14.442761484822597 -42] -27.557238515177403]
Test Case: 168 | Input/Output: [[-99.4791427921887 78] -21.479142792188696]
Test Case: 169 | Input/Output: [[80.02564819107056 -23] 57.02564819107056]
Test Case: 170 | Input/Output: [[53.58666592264149 92] 145.5866659226415]
Test Case: 171 | Input/Output: [[12.812476132685873 -12] 0.8124761326858732]
Test Case: 172 | Input/Output: [[0.5238052249063827 -95] -94.47619477509362]
Test Case: 173 | Input/Output: [[-80.5459372448253 -32] -112.5459372448253]
Test Case: 174 | Input/Output: [[1.4820140352842799 65] 66.48201403528428]
Test Case: 175 | Input/Output: [[87.46694550315368 1] 88.46694550315368]
Test Case: 176 | Input/Output: [[88.14076835743901 89] 177.14076835743901]
Test Case: 177 | Input/Output: [[-64.81906943541918 85] 20.18093056458082]
Test Case: 178 | Input/Output: [[26.68218778948288 91] 117.68218778948288]
Test Case: 179 | Input/Output: [[36.05277433501794 43] 79.05277433501794]
Test Case: 180 | Input/Output: [[-85.86236674073172 33] -52.862366740731716]
Test Case: 181 | Input/Output: [[-15.098281822641653 -91] -106.09828182264165]
Test Case: 182 | Input/Output: [[-35.914977400755774 36] 0.08502259924422617]
Test Case: 183 | Input/Output: [[68.60570268925798 -66] 2.6057026892579813]
Test Case: 184 | Input/Output: [[-10.030592410255167 98] 87.96940758974483]
Test Case: 185 | Input/Output: [[-91.53232546402982 -9] -100.53232546402982]
Test Case: 186 | Input/Output: [[91.20297570672719 68] 159.2029757067272]
Test Case: 187 | Input/Output: [[20.014117561692473 -80] -59.98588243830753]
Test Case: 188 | Input/Output: [[-35.136868725449915 83] 47.863131274550085]
Test Case: 189 | Input/Output: [[89.20426296867188 9] 98.20426296867188]
Test Case: 190 | Input/Output: [[19.60786316072472 49] 68.60786316072472]
Test Case: 191 | Input/Output: [[-11.928695642386984 52] 40.071304357613016]
Test Case: 192 | Input/Output: [[15.59220815220543 -3] 12.59220815220543]
Test Case: 193 | Input/Output: [[51.54197770221799 -92] -40.45802229778201]
Test Case: 194 | Input/Output: [[74.4270522832937 60] 134.4270522832937]
Test Case: 195 | Input/Output: [[-84.77304627549643 83] -1.7730462754964265]
Test Case: 196 | Input/Output: [[99.7555972646459 -5] 94.7555972646459]
Test Case: 197 | Input/Output: [[40.38190183590257 -93] -52.61809816409743]
Test Case: 198 | Input/Output: [[-99.08203590940077 -74] -173.08203590940076]
Test Case: 199 | Input/Output: [[65.22756615263881 -84] -18.772433847361185]
Test Case: 200 | Input/Output: [[-7.730701412203885 -52] -59.730701412203885]
Test Case: 201 | Input/Output: [[4.177921888294776 82] 86.17792188829478]
Test Case: 202 | Input/Output: [[70.69205995918222 45] 115.69205995918222]
Test Case: 203 | Input/Output: [[11.280383458766693 -47] -35.71961654123331]
Test Case: 204 | Input/Output: [[-69.90050229158035 22] -47.90050229158035]
Test Case: 205 | Input/Output: [[-13.10146361238806 46] 32.89853638761194]
Test Case: 206 | Input/Output: [[89.68467101743846 13] 102.68467101743846]
Test Case: 207 | Input/Output: [[-66.92013645065566 -36] -102.92013645065566]
Test Case: 208 | Input/Output: [[-93.90148477757651 -96] -189.9014847775765]
Test Case: 209 | Input/Output: [[-85.1646761245781 17] -68.1646761245781]
Test Case: 210 | Input/Output: [[69.49885316154695 -83] -13.501146838453053]
Test Case: 211 | Input/Output: [[-16.03731522688281 0] -16.03731522688281]
Test Case: 212 | Input/Output: [[59.14401505707187 73] 132.14401505707187]
Test Case: 213 | Input/Output: [[-4.400041146849645 -69] -73.40004114684965]
Test Case: 214 | Input/Output: [[99.25415874345941 72] 171.2541587434594]
Test Case: 215 | Input/Output: [[-61.79396240078565 51] -10.793962400785652]
Test Case: 216 | Input/Output: [[22.616130355566526 23] 45.616130355566526]
Test Case: 217 | Input/Output: [[9.016450707852314 -42] -32.983549292147686]
Test Case: 218 | Input/Output: [[-67.41412710386439 -35] -102.41412710386439]
Test Case: 219 | Input/Output: [[73.92032608700967 28] 101.92032608700967]
Test Case: 220 | Input/Output: [[-59.823566685165375 57] -2.8235666851653747]
Test Case: 221 | Input/Output: [[96.20989365297183 7] 103.20989365297183]
Test Case: 222 | Input/Output: [[-45.53644463100473 -93] -138.5364446310047]
Test Case: 223 | Input/Output: [[14.430440863181659 66] 80.43044086318166]
Test Case: 224 | Input/Output: [[-83.22468071901163 -58] -141.22468071901164]
Test Case: 225 | Input/Output: [[62.833556575751345 58] 120.83355657575135]
Test Case: 226 | Input/Output: [[-38.341394799370555 -96] -134.34139479937056]
Test Case: 227 | Input/Output: [[-14.1969252799407 -78] -92.1969252799407]
Test Case: 228 | Input/Output: [[-29.317396640091303 72] 42.6826033599087]
Test Case: 229 | Input/Output: [[-30.780454952381618 1] -29.780454952381618]
Test Case: 230 | Input/Output: [[30.122004011809736 -93] -62.877995988190264]
Test Case: 231 | Input/Output: [[-21.337013605256345 -1] -22.337013605256345]
Test Case: 232 | Input/Output: [[61.08118722576833 -12] 49.08118722576833]
Test Case: 233 | Input/Output: [[-59.51850996078492 -37] -96.51850996078491]
Test Case: 234 | Input/Output: [[-73.08419342243354 72] -1.0841934224335432]
Test Case: 235 | Input/Output: [[-49.8819077926929 -14] -63.8819077926929]
Test Case: 236 | Input/Output: [[-15.815447006556667 5] -10.815447006556667]
Test Case: 237 | Input/Output: [[3.086686993936567 61] 64.08668699393657]
Test Case: 238 | Input/Output: [[64.17823775219318 -37] 27.178237752193183]
Test Case: 239 | Input/Output: [[58.350072250529536 -86] -27.649927749470464]
Test Case: 240 | Input/Output: [[-82.65601257024002 -12] -94.65601257024002]
Test Case: 241 | Input/Output: [[60.18149128992283 45] 105.18149128992283]
Test Case: 242 | Input/Output: [[-66.1437575643691 69] 2.8562424356309037]
Test Case: 243 | Input/Output: [[-4.95722035851513 86] 81.04277964148487]
Test Case: 244 | Input/Output: [[27.6536388916425 -69] -41.3463611083575]
Test Case: 245 | Input/Output: [[86.38864050745022 -63] 23.38864050745022]
Test Case: 246 | Input/Output: [[44.06200315174385 -71] -26.937996848256148]
Test Case: 247 | Input/Output: [[-75.1725339850625 18] -57.1725339850625]
Test Case: 248 | Input/Output: [[47.737546148479595 76] 123.7375461484796]
Test Case: 249 | Input/Output: [[-64.59894197277501 81] 16.40105802722499]
Test Case: 250 | Input/Output: [[-50.69580095133111 -26] -76.69580095133111]
Test Case: 251 | Input/Output: [[61.27999443952089 -84] -22.72000556047911]
Test Case: 252 | Input/Output: [[30.91121545836188 -62] -31.08878454163812]
Test Case: 253 | Input/Output: [[-77.54162612395461 12] -65.54162612395461]
Test Case: 254 | Input/Output: [[-45.96455150493248 100] 54.03544849506752]
Test Case: 255 | Input/Output: [[-22.18712981488575 44] 21.81287018511425]
Test Case: 256 | Input/Output: [[-51.62661709821978 -44] -95.62661709821978]
Test Case: 257 | Input/Output: [[-16.93083203455943 75] 58.06916796544057]
Test Case: 258 | Input/Output: [[73.90416313834345 26] 99.90416313834345]
Test Case: 259 | Input/Output: [[-58.162200239916984 52] -6.162200239916984]
Test Case: 260 | Input/Output: [[-66.13605735787957 63] -3.136057357879565]
Test Case: 261 | Input/Output: [[22.131652609183305 -4] 18.131652609183305]
Test Case: 262 | Input/Output: [[91.31485759658239 23] 114.31485759658239]
Test Case: 263 | Input/Output: [[94.37317719355133 19] 113.37317719355133]
Test Case: 264 | Input/Output: [[72.12900009478415 -26] 46.129000094784146]
Test Case: 265 | Input/Output: [[-66.79034176017782 43] -23.790341760177824]
Test Case: 266 | Input/Output: [[40.12211447387509 -44] -3.8778855261249134]
Test Case: 267 | Input/Output: [[40.67680603905063 -7] 33.67680603905063]
Test Case: 268 | Input/Output: [[1.1769323952780724 -91] -89.82306760472193]
Test Case: 269 | Input/Output: [[-73.55989904968823 33] -40.55989904968823]
Test Case: 270 | Input/Output: [[29.304794028505256 -42] -12.695205971494744]
Test Case: 271 | Input/Output: [[91.80950726424823 32] 123.80950726424823]
Test Case: 272 | Input/Output: [[58.95056989539748 -97] -38.04943010460252]
Test Case: 273 | Input/Output: [[-30.6237463698495 -83] -113.6237463698495]
Test Case: 274 | Input/Output: [[-27.040163541510225 -66] -93.04016354151022]
Test Case: 275 | Input/Output: [[-16.998420520602807 -24] -40.99842052060281]
Test Case: 276 | Input/Output: [[-31.05224673055389 23] -8.05224673055389]
Test Case: 277 | Input/Output: [[-32.48337715926964 92] 59.51662284073036]
Test Case: 278 | Input/Output: [[93.33721332248405 18] 111.33721332248405]
Test Case: 279 | Input/Output: [[53.7192500973909 -30] 23.719250097390898]
Test Case: 280 | Input/Output: [[-53.67547332330875 -39] -92.67547332330875]
Test Case: 281 | Input/Output: [[0.15500209214300753 48] 48.15500209214301]
Test Case: 282 | Input/Output: [[76.39367763660636 -68] 8.393677636606355]
Test Case: 283 | Input/Output: [[-26.23377405907415 -66] -92.23377405907415]
Test Case: 284 | Input/Output: [[54.42375579557367 -94] -39.57624420442633]
Test Case: 285 | Input/Output: [[87.2387011837061 -40] 47.2387011837061]
Test Case: 286 | Input/Output: [[90.79055063435953 -96] -5.209449365640467]
Test Case: 287 | Input/Output: [[-61.47403823839854 69] 7.525961761601458]
Test Case: 288 | Input/Output: [[-59.70806514225542 61] 1.2919348577445788]
Test Case: 289 | Input/Output: [[-29.241876626391587 82] 52.75812337360841]
Test Case: 290 | Input/Output: [[-18.277512747354223 94] 75.72248725264578]
Test Case: 291 | Input/Output: [[18.36059532848138 -34] -15.63940467151862]
Test Case: 292 | Input/Output: [[-34.681544265866364 -70] -104.68154426586636]
Test Case: 293 | Input/Output: [[85.77102292338088 -64] 21.771022923380883]
Test Case: 294 | Input/Output: [[78.08861556231577 -6] 72.08861556231577]
Test Case: 295 | Input/Output: [[-99.75227863386115 -24] -123.75227863386115]
Test Case: 296 | Input/Output: [[2.69544436838882 37] 39.69544436838882]
Test Case: 297 | Input/Output: [[-82.17044223224957 20] -62.17044223224957]
Test Case: 298 | Input/Output: [[83.88421222602696 16] 99.88421222602696]
Test Case: 299 | Input/Output: [[38.27908758013274 40] 78.27908758013274]
Test Case: 300 | Input/Output: [[6.095229271088613 7] 13.095229271088613]
Test Case: 301 | Input/Output: [[66.45929508161893 8] 74.45929508161893]
Test Case: 302 | Input/Output: [[-71.47373853444697 43] -28.473738534446966]
Test Case: 303 | Input/Output: [[-61.014448074536396 59] -2.0144480745363964]
Test Case: 304 | Input/Output: [[-90.95561607764961 93] 2.0443839223503915]
Test Case: 305 | Input/Output: [[14.762951942832487 9] 23.762951942832487]
Test Case: 306 | Input/Output: [[54.67011055693237 27] 81.67011055693237]
Test Case: 307 | Input/Output: [[-85.64258549076393 -35] -120.64258549076393]
Test Case: 308 | Input/Output: [[-45.92091668162554 -36] -81.92091668162554]
Test Case: 309 | Input/Output: [[29.025094237323344 -29] 0.02509423732334426]
Test Case: 310 | Input/Output: [[91.20188761243222 96] 187.20188761243222]
Test Case: 311 | Input/Output: [[54.97089051780935 -83] -28.02910948219065]
Test Case: 312 | Input/Output: [[-45.98978381660031 -40] -85.98978381660031]
Test Case: 313 | Input/Output: [[-74.72510072968024 -7] -81.72510072968024]
Test Case: 314 | Input/Output: [[-41.617502534357456 57] 15.382497465642544]
Test Case: 315 | Input/Output: [[23.758580984414834 -12] 11.758580984414834]
Test Case: 316 | Input/Output: [[-95.62825290184745 -52] -147.62825290184745]
Test Case: 317 | Input/Output: [[-41.77956115954395 2] -39.77956115954395]
Test Case: 318 | Input/Output: [[-15.937212244640037 -36] -51.93721224464004]
Test Case: 319 | Input/Output: [[-33.07318107024095 -96] -129.07318107024093]
Test Case: 320 | Input/Output: [[81.19465928280181 -21] 60.19465928280181]
Test Case: 321 | Input/Output: [[84.52405615670213 94] 178.52405615670213]
Test Case: 322 | Input/Output: [[27.544283757212114 -69] -41.45571624278789]
Test Case: 323 | Input/Output: [[28.729422607933373 71] 99.72942260793337]
Test Case: 324 | Input/Output: [[-64.56053172181808 -98] -162.56053172181808]
Test Case: 325 | Input/Output: [[-81.46970080035467 5] -76.46970080035467]
Test Case: 326 | Input/Output: [[-87.16050271561404 40] -47.160502715614044]
Test Case: 327 | Input/Output: [[-1.3145062744299452 -75] -76.31450627442995]
Test Case: 328 | Input/Output: [[36.01639458979639 -96] -59.98360541020361]
Test Case: 329 | Input/Output: [[88.67228483349305 -43] 45.67228483349305]
Test Case: 330 | Input/Output: [[-68.95095658347903 -55] -123.95095658347903]
Test Case: 331 | Input/Output: [[63.31543474629885 29] 92.31543474629885]
Test Case: 332 | Input/Output: [[-0.8405278767819055 17] 16.159472123218094]
Test Case: 333 | Input/Output: [[32.7319215278728 -5] 27.7319215278728]
Test Case: 334 | Input/Output: [[-41.08561012504932 90] 48.91438987495068]
Test Case: 335 | Input/Output: [[86.66053489521644 23] 109.66053489521644]
Test Case: 336 | Input/Output: [[70.54319038066242 77] 147.54319038066242]
Test Case: 337 | Input/Output: [[-4.556255288660836 -10] -14.556255288660836]
Test Case: 338 | Input/Output: [[7.13286994360935 -32] -24.86713005639065]
Test Case: 339 | Input/Output: [[45.00217539355299 -56] -10.997824606447011]
Test Case: 340 | Input/Output: [[-93.98100195739505 -5] -98.98100195739505]
Test Case: 341 | Input/Output: [[-7.485216836101543 20] 12.514783163898457]
Test Case: 342 | Input/Output: [[-62.68088927562665 98] 35.31911072437335]
Test Case: 343 | Input/Output: [[82.18483571760083 41] 123.18483571760083]
Test Case: 344 | Input/Output: [[-37.89088352465275 -31] -68.89088352465275]
Test Case: 345 | Input/Output: [[-23.708260514187657 78] 54.29173948581234]
Test Case: 346 | Input/Output: [[-67.74207261037937 93] 25.257927389620633]
Test Case: 347 | Input/Output: [[59.002208910051735 -70] -10.997791089948265]
Test Case: 348 | Input/Output: [[-78.5985694220809 81] 2.4014305779191005]
Test Case: 349 | Input/Output: [[59.20258984134074 88] 147.20258984134074]
Test Case: 350 | Input/Output: [[21.057297737071707 -63] -41.94270226292829]
Test Case: 351 | Input/Output: [[56.81657469423226 13] 69.81657469423226]
Test Case: 352 | Input/Output: [[-20.28425765788245 19] -1.2842576578824492]
Test Case: 353 | Input/Output: [[51.91724316674703 -80] -28.082756833252972]
Test Case: 354 | Input/Output: [[-75.37306169569115 -80] -155.37306169569115]
Test Case: 355 | Input/Output: [[49.5943768892802 73] 122.5943768892802]
Test Case: 356 | Input/Output: [[3.4777954092741794 -90] -86.52220459072582]
Test Case: 357 | Input/Output: [[85.25021160577623 21] 106.25021160577623]
Test Case: 358 | Input/Output: [[95.01537796484348 -37] 58.01537796484348]
Test Case: 359 | Input/Output: [[88.67236613593656 7] 95.67236613593656]
Test Case: 360 | Input/Output: [[-56.62209414682542 58] 1.3779058531745818]
Test Case: 361 | Input/Output: [[25.720566933167618 78] 103.72056693316762]
Test Case: 362 | Input/Output: [[-80.5155065176563 41] -39.515506517656306]
Test Case: 363 | Input/Output: [[-11.14455632660571 18] 6.855443673394291]
Test Case: 364 | Input/Output: [[3.3933122205669406 -91] -87.60668777943306]
Test Case: 365 | Input/Output: [[87.02773801007814 -93] -5.972261989921861]
Test Case: 366 | Input/Output: [[-66.5660906383466 -67] -133.5660906383466]
Test Case: 367 | Input/Output: [[89.47315537914841 -65] 24.47315537914841]
Test Case: 368 | Input/Output: [[-79.41638648805977 20] -59.41638648805977]
Test Case: 369 | Input/Output: [[34.97691629253325 5] 39.97691629253325]
Test Case: 370 | Input/Output: [[-25.65830958061308 -18] -43.65830958061308]
Test Case: 371 | Input/Output: [[96.59751663993637 87] 183.59751663993637]
Test Case: 372 | Input/Output: [[21.35657934568127 89] 110.35657934568127]
Test Case: 373 | Input/Output: [[-7.188628432390232 14] 6.811371567609768]
Test Case: 374 | Input/Output: [[-29.07982304343119 -31] -60.07982304343119]
Test Case: 375 | Input/Output: [[18.074895023836433 -70] -51.92510497616357]
Test Case: 376 | Input/Output: [[75.229927276361 -78] -2.7700727236390037]
Test Case: 377 | Input/Output: [[-34.26785232102665 14] -20.267852321026652]
Test Case: 378 | Input/Output: [[-47.16448231894177 91] 43.83551768105823]
Test Case: 379 | Input/Output: [[50.18866561103127 -31] 19.18866561103127]
Test Case: 380 | Input/Output: [[59.34700349062675 14] 73.34700349062675]
Test Case: 381 | Input/Output: [[80.10250358794158 62] 142.10250358794158]
Test Case: 382 | Input/Output: [[-59.17836393334812 -19] -78.17836393334812]
Test Case: 383 | Input/Output: [[90.06452703643072 -42] 48.06452703643072]
Test Case: 384 | Input/Output: [[-40.40952321292628 41] 0.5904767870737189]
Test Case: 385 | Input/Output: [[91.98278813896525 -79] 12.982788138965248]
Test Case: 386 | Input/Output: [[2.371721751275331 41] 43.37172175127533]
Test Case: 387 | Input/Output: [[-12.443336415420745 -54] -66.44333641542075]
Test Case: 388 | Input/Output: [[86.56242576489365 67] 153.56242576489365]
Test Case: 389 | Input/Output: [[80.93809336381139 64] 144.9380933638114]
Test Case: 390 | Input/Output: [[-51.879072556995865 -46] -97.87907255699587]
Test Case: 391 | Input/Output: [[91.82664266345489 -20] 71.82664266345489]
Test Case: 392 | Input/Output: [[22.411823348811467 -37] -14.588176651188533]
Test Case: 393 | Input/Output: [[32.43966505077543 -88] -55.56033494922457]
Test Case: 394 | Input/Output: [[0.7951698315112878 -77] -76.20483016848871]
Test Case: 395 | Input/Output: [[42.75659493615177 -45] -2.243405063848229]
Test Case: 396 | Input/Output: [[2.2700966394024107 64] 66.27009663940241]
Test Case: 397 | Input/Output: [[16.30987423310573 -94] -77.69012576689427]
Test Case: 398 | Input/Output: [[40.77262804704071 -37] 3.772628047040712]
Test Case: 399 | Input/Output: [[9.548487427759028 -56] -46.45151257224097]
Test Case: 400 | Input/Output: [[87.09317197033172 -7] 80.09317197033172]
Test Case: 401 | Input/Output: [[95.10770954269 -47] 48.10770954269]
Test Case: 402 | Input/Output: [[67.54403309844656 78] 145.54403309844656]
Test Case: 403 | Input/Output: [[-85.60983636878893 81] -4.609836368788933]
Test Case: 404 | Input/Output: [[-99.09945321439974 21] -78.09945321439974]
Test Case: 405 | Input/Output: [[-73.50252460653455 -39] -112.50252460653455]
Test Case: 406 | Input/Output: [[8.693266063411102 31] 39.6932660634111]
Test Case: 407 | Input/Output: [[-33.110608499980955 52] 18.889391500019045]
Test Case: 408 | Input/Output: [[-32.74536686515492 -15] -47.74536686515492]
Test Case: 409 | Input/Output: [[-12.908011471659037 84] 71.09198852834096]
Test Case: 410 | Input/Output: [[-97.00946195227682 11] -86.00946195227682]
Test Case: 411 | Input/Output: [[-91.41158645026341 82] -9.411586450263414]
Test Case: 412 | Input/Output: [[-47.81808210886993 52] 4.18191789113007]
Test Case: 413 | Input/Output: [[-86.61534148755669 -27] -113.61534148755669]
Test Case: 414 | Input/Output: [[-89.88495388046114 19] -70.88495388046114]
Test Case: 415 | Input/Output: [[-56.08412886805312 31] -25.08412886805312]
Test Case: 416 | Input/Output: [[27.015456985197076 46] 73.01545698519708]
Test Case: 417 | Input/Output: [[-34.237847498799724 58] 23.762152501200276]
Test Case: 418 | Input/Output: [[-20.46700136065516 38] 17.53299863934484]
Test Case: 419 | Input/Output: [[-22.29956876445975 49] 26.70043123554025]
Test Case: 420 | Input/Output: [[-62.3399874780455 46] -16.3399874780455]
Test Case: 421 | Input/Output: [[63.17581080859057 -3] 60.17581080859057]
Test Case: 422 | Input/Output: [[84.09133357471313 33] 117.09133357471313]
Test Case: 423 | Input/Output: [[93.63131597393166 58] 151.63131597393166]
Test Case: 424 | Input/Output: [[-87.50668241188924 -20] -107.50668241188924]
Test Case: 425 | Input/Output: [[29.417923271204245 -87] -57.582076728795755]
Test Case: 426 | Input/Output: [[-51.50222645401252 16] -35.50222645401252]
Test Case: 427 | Input/Output: [[77.15158550949576 40] 117.15158550949576]
Test Case: 428 | Input/Output: [[-4.175300921919558 85] 80.82469907808044]
Test Case: 429 | Input/Output: [[-22.36049009235603 -90] -112.36049009235603]
Test Case: 430 | Input/Output: [[-8.139850388749622 -17] -25.139850388749622]
Test Case: 431 | Input/Output: [[-39.38180498656108 -41] -80.38180498656108]
Test Case: 432 | Input/Output: [[77.77810993937862 -68] 9.778109939378623]
Test Case: 433 | Input/Output: [[75.39693294778266 78] 153.39693294778266]
Test Case: 434 | Input/Output: [[-18.58501275171163 -69] -87.58501275171163]
Test Case: 435 | Input/Output: [[-66.91553658335445 -51] -117.91553658335445]
Test Case: 436 | Input/Output: [[-95.18897404784556 -5] -100.18897404784556]
Test Case: 437 | Input/Output: [[76.80998183082357 27] 103.80998183082357]
Test Case: 438 | Input/Output: [[-19.471779760433748 64] 44.52822023956625]
Test Case: 439 | Input/Output: [[84.67011324148649 -30] 54.67011324148649]
Test Case: 440 | Input/Output: [[-20.566191072454615 -55] -75.56619107245461]
Test Case: 441 | Input/Output: [[-67.07201892895904 -59] -126.07201892895904]
Test Case: 442 | Input/Output: [[39.14175641741946 -53] -13.858243582580542]
Test Case: 443 | Input/Output: [[62.020136320132025 -91] -28.979863679867975]
Test Case: 444 | Input/Output: [[-20.344603993183313 -84] -104.34460399318331]
Test Case: 445 | Input/Output: [[-10.77243272481266 81] 70.22756727518734]
Test Case: 446 | Input/Output: [[62.31569346891024 50] 112.31569346891024]
Test Case: 447 | Input/Output: [[-79.53339660897115 36] -43.533396608971145]
Test Case: 448 | Input/Output: [[65.42779476252517 -3] 62.42779476252517]
Test Case: 449 | Input/Output: [[-70.14032924600801 65] -5.140329246008008]
Test Case: 450 | Input/Output: [[2.434375044295109 -90] -87.56562495570489]
Test Case: 451 | Input/Output: [[85.23709676640041 -48] 37.23709676640041]
Test Case: 452 | Input/Output: [[62.18906727659899 5] 67.18906727659899]
Test Case: 453 | Input/Output: [[58.428303889437046 16] 74.42830388943705]
Test Case: 454 | Input/Output: [[43.74135524870164 -39] 4.7413552487016375]
Test Case: 455 | Input/Output: [[-95.51008614892069 -26] -121.51008614892069]
Test Case: 456 | Input/Output: [[81.05012696370909 -79] 2.05012696370909]
Test Case: 457 | Input/Output: [[29.577883033811474 99] 128.57788303381147]
Test Case: 458 | Input/Output: [[95.05835026579228 74] 169.05835026579228]
Test Case: 459 | Input/Output: [[-17.768272738274675 78] 60.231727261725325]
Test Case: 460 | Input/Output: [[-32.21314511931239 54] 21.786854880687613]
Test Case: 461 | Input/Output: [[-98.27217602012306 84] -14.272176020123055]
Test Case: 462 | Input/Output: [[14.44640828630483 24] 38.44640828630483]
Test Case: 463 | Input/Output: [[-12.919894080926127 71] 58.08010591907387]
Test Case: 464 | Input/Output: [[35.082864615316765 36] 71.08286461531677]
Test Case: 465 | Input/Output: [[-27.85669558421786 5] -22.85669558421786]
Test Case: 466 | Input/Output: [[-97.96591926643046 84] -13.965919266430461]
Test Case: 467 | Input/Output: [[-70.05434486778215 13] -57.05434486778215]
Test Case: 468 | Input/Output: [[-53.03049722601179 -15] -68.03049722601179]
Test Case: 469 | Input/Output: [[-78.48902149452041 -74] -152.48902149452041]
Test Case: 470 | Input/Output: [[-70.65455322321162 -88] -158.65455322321162]
Test Case: 471 | Input/Output: [[-23.16932523609401 90] 66.83067476390599]
Test Case: 472 | Input/Output: [[7.8615710284653915 -55] -47.13842897153461]
Test Case: 473 | Input/Output: [[98.69173219604747 36] 134.69173219604747]
Test Case: 474 | Input/Output: [[-34.20756383206118 28] -6.207563832061183]
Test Case: 475 | Input/Output: [[-68.28847782147562 -43] -111.28847782147562]
Test Case: 476 | Input/Output: [[1.9785614626604229 84] 85.97856146266042]
Test Case: 477 | Input/Output: [[-12.47931720311361 46] 33.52068279688639]
Test Case: 478 | Input/Output: [[96.69717122409745 56] 152.69717122409745]
Test Case: 479 | Input/Output: [[-4.324296036864752 39] 34.67570396313525]
Test Case: 480 | Input/Output: [[92.4873722826207 -63] 29.487372282620697]
Test Case: 481 | Input/Output: [[-61.84646193789503 -96] -157.84646193789501]
Test Case: 482 | Input/Output: [[-99.63335010627317 1] -98.63335010627317]
Test Case: 483 | Input/Output: [[-87.01953828429583 -15] -102.01953828429583]
Test Case: 484 | Input/Output: [[65.8752599544913 11] 76.8752599544913]
Test Case: 485 | Input/Output: [[-19.228862135138215 33] 13.771137864861785]
Test Case: 486 | Input/Output: [[33.30641915457983 71] 104.30641915457983]
Test Case: 487 | Input/Output: [[-80.12636359634342 -11] -91.12636359634342]
Test Case: 488 | Input/Output: [[-30.728745857747697 -10] -40.7287458577477]
Test Case: 489 | Input/Output: [[29.849384786388896 24] 53.849384786388896]
Test Case: 490 | Input/Output: [[-4.4488444451797875 64] 59.55115555482021]
Test Case: 491 | Input/Output: [[22.366596441673494 -54] -31.633403558326506]
Test Case: 492 | Input/Output: [[19.15423075130643 47] 66.15423075130643]
Test Case: 493 | Input/Output: [[-21.033245044606176 -73] -94.03324504460618]
Test Case: 494 | Input/Output: [[40.734929870184885 -66] -25.265070129815115]
Test Case: 495 | Input/Output: [[5.596736205351988 38] 43.59673620535199]
Test Case: 496 | Input/Output: [[55.711523703296876 57] 112.71152370329688]
Test Case: 497 | Input/Output: [[-92.03322621834617 -72] -164.03322621834616]
Test Case: 498 | Input/Output: [[67.32891212441933 36] 103.32891212441933]
Test Case: 499 | Input/Output: [[62.70781574616407 -60] 2.707815746164073]
Test Case: 500 | Input/Output: [[-83.39150771400202 71] -12.391507714002017]
Test Case: 501 | Input/Output: [[76.64959013044535 86] 162.64959013044535]
Test Case: 502 | Input/Output: [[-30.19774857485396 71] 40.80225142514604]
Test Case: 503 | Input/Output: [[-26.211285460809506 78] 51.788714539190494]
Test Case: 504 | Input/Output: [[46.330373856829766 -65] -18.669626143170234]
Test Case: 505 | Input/Output: [[40.16061373121997 94] 134.16061373121997]
Test Case: 506 | Input/Output: [[39.63736622185664 84] 123.63736622185664]
Test Case: 507 | Input/Output: [[-30.540334562141553 63] 32.45966543785845]
Test Case: 508 | Input/Output: [[-19.37745632871939 28] 8.62254367128061]
Test Case: 509 | Input/Output: [[45.51944166384564 -1] 44.51944166384564]
Test Case: 510 | Input/Output: [[-53.71421526137199 20] -33.71421526137199]
Test Case: 511 | Input/Output: [[9.462037331325178 7] 16.462037331325178]
Test Case: 512 | Input/Output: [[35.479302476052766 -88] -52.520697523947234]
Test Case: 513 | Input/Output: [[59.909957060310404 -90] -30.090042939689596]
Test Case: 514 | Input/Output: [[57.500021187649 52] 109.500021187649]
Test Case: 515 | Input/Output: [[47.56187302903484 64] 111.56187302903484]
Test Case: 516 | Input/Output: [[44.64194696635991 87] 131.6419469663599]
Test Case: 517 | Input/Output: [[49.36770754115304 74] 123.36770754115304]
Test Case: 518 | Input/Output: [[3.8336718011611453 42] 45.833671801161145]
Test Case: 519 | Input/Output: [[15.993574328160534 -100] -84.00642567183947]
Test Case: 520 | Input/Output: [[31.485983241817536 58] 89.48598324181754]
Test Case: 521 | Input/Output: [[-28.428693357463032 -76] -104.42869335746303]
Test Case: 522 | Input/Output: [[99.44901647142925 -44] 55.449016471429246]
Test Case: 523 | Input/Output: [[-66.55036824461429 22] -44.55036824461429]
Test Case: 524 | Input/Output: [[-87.92332088743646 -92] -179.92332088743646]
Test Case: 525 | Input/Output: [[4.278319843325434 59] 63.278319843325434]
Test Case: 526 | Input/Output: [[-20.68376238960319 42] 21.31623761039681]
Test Case: 527 | Input/Output: [[3.7412540698216645 -41] -37.258745930178335]
Test Case: 528 | Input/Output: [[93.99489308954352 -25] 68.99489308954352]
Test Case: 529 | Input/Output: [[-61.918929027768655 -56] -117.91892902776866]
Test Case: 530 | Input/Output: [[66.63614302427305 -15] 51.63614302427305]
Test Case: 531 | Input/Output: [[9.794512746752005 98] 107.794512746752]
Test Case: 532 | Input/Output: [[-44.18563629261636 30] -14.185636292616358]
Test Case: 533 | Input/Output: [[31.895849137917253 -57] -25.104150862082747]
Test Case: 534 | Input/Output: [[-40.80361053216579 -2] -42.80361053216579]
Test Case: 535 | Input/Output: [[59.44000122211571 -1] 58.44000122211571]
Test Case: 536 | Input/Output: [[92.76673030310621 -50] 42.766730303106215]
Test Case: 537 | Input/Output: [[72.20483580285148 41] 113.20483580285148]
Test Case: 538 | Input/Output: [[59.5772971051278 -23] 36.5772971051278]
Test Case: 539 | Input/Output: [[61.93359128578004 -82] -20.06640871421996]
Test Case: 540 | Input/Output: [[-82.47233906398586 -15] -97.47233906398586]
Test Case: 541 | Input/Output: [[-69.71768169314296 30] -39.717681693142964]
Test Case: 542 | Input/Output: [[-62.46341993925704 51] -11.463419939257037]
Test Case: 543 | Input/Output: [[-52.13949588422795 -20] -72.13949588422796]
Test Case: 544 | Input/Output: [[-94.20058671542 -14] -108.20058671542]
Test Case: 545 | Input/Output: [[36.57256471014264 99] 135.57256471014264]
Test Case: 546 | Input/Output: [[0.6169483160130937 -63] -62.383051683986906]
Test Case: 547 | Input/Output: [[43.03789745978648 -3] 40.03789745978648]
Test Case: 548 | Input/Output: [[-39.53088200838355 86] 46.46911799161645]
Test Case: 549 | Input/Output: [[68.29568098086304 52] 120.29568098086304]
Test Case: 550 | Input/Output: [[81.5866622394208 49] 130.5866622394208]
Test Case: 551 | Input/Output: [[88.9846833776106 -67] 21.984683377610594]
Test Case: 552 | Input/Output: [[-81.85009310483707 -40] -121.85009310483707]
Test Case: 553 | Input/Output: [[36.15772419179996 61] 97.15772419179996]
Test Case: 554 | Input/Output: [[79.78522535217024 6] 85.78522535217024]
Test Case: 555 | Input/Output: [[-41.59747819271009 -6] -47.59747819271009]
Test Case: 556 | Input/Output: [[41.60656905969606 8] 49.60656905969606]
Test Case: 557 | Input/Output: [[74.26333830205408 54] 128.26333830205408]
Test Case: 558 | Input/Output: [[-89.25592609741251 22] -67.25592609741251]
Test Case: 559 | Input/Output: [[88.3824870703414 76] 164.3824870703414]
Test Case: 560 | Input/Output: [[-89.08379906488139 18] -71.08379906488139]
Test Case: 561 | Input/Output: [[39.336167331201125 32] 71.33616733120112]
Test Case: 562 | Input/Output: [[-73.62743402616204 5] -68.62743402616204]
Test Case: 563 | Input/Output: [[86.73024216532176 84] 170.73024216532176]
Test Case: 564 | Input/Output: [[-16.196475486040086 -100] -116.19647548604009]
Test Case: 565 | Input/Output: [[-96.16194616821909 -78] -174.1619461682191]
Test Case: 566 | Input/Output: [[17.714363039111447 -41] -23.285636960888553]
Test Case: 567 | Input/Output: [[69.06056411576557 -60] 9.060564115765573]
Test Case: 568 | Input/Output: [[49.373155567856344 98] 147.37315556785634]
Test Case: 569 | Input/Output: [[71.50093611612468 21] 92.50093611612468]
Test Case: 570 | Input/Output: [[-36.367123432977344 -78] -114.36712343297734]
Test Case: 571 | Input/Output: [[-92.36526850923275 -85] -177.36526850923275]
Test Case: 572 | Input/Output: [[36.08045531700873 76] 112.08045531700873]
Test Case: 573 | Input/Output: [[-53.158753831548644 93] 39.841246168451356]
Test Case: 574 | Input/Output: [[27.71866488443004 -67] -39.28133511556996]
Test Case: 575 | Input/Output: [[68.09470456772576 71] 139.09470456772576]
Test Case: 576 | Input/Output: [[-31.60136585066367 -21] -52.60136585066367]
Test Case: 577 | Input/Output: [[60.24483803107498 82] 142.24483803107498]
Test Case: 578 | Input/Output: [[79.67222212749147 -1] 78.67222212749147]
Test Case: 579 | Input/Output: [[96.11875766213734 -6] 90.11875766213734]
Test Case: 580 | Input/Output: [[82.2376210794763 -90] -7.762378920523702]
Test Case: 581 | Input/Output: [[-27.324783903231193 -38] -65.3247839032312]
Test Case: 582 | Input/Output: [[48.90859696280759 42] 90.9085969628076]
Test Case: 583 | Input/Output: [[72.53086472564664 49] 121.53086472564664]
Test Case: 584 | Input/Output: [[39.55850080750997 -49] -9.441499192490028]
Test Case: 585 | Input/Output: [[19.023565392446812 -39] -19.976434607553188]
Test Case: 586 | Input/Output: [[49.975935071692675 79] 128.97593507169267]
Test Case: 587 | Input/Output: [[-75.17595512891326 70] -5.175955128913259]
Test Case: 588 | Input/Output: [[34.87836709583439 -80] -45.12163290416561]
Test Case: 589 | Input/Output: [[27.377350055625584 16] 43.377350055625584]
Test Case: 590 | Input/Output: [[38.41820364387138 -72] -33.58179635612862]
Test Case: 591 | Input/Output: [[8.571740417393329 2] 10.571740417393329]
Test Case: 592 | Input/Output: [[11.255515503558811 63] 74.25551550355881]
Test Case: 593 | Input/Output: [[31.218853736464723 -53] -21.781146263535277]
Test Case: 594 | Input/Output: [[-42.746913995019376 -19] -61.746913995019376]
Test Case: 595 | Input/Output: [[-90.3319266814671 20] -70.3319266814671]
Test Case: 596 | Input/Output: [[54.88869146833221 60] 114.88869146833221]
Test Case: 597 | Input/Output: [[-89.38268825216385 -98] -187.38268825216386]
Test Case: 598 | Input/Output: [[59.99538462172674 -16] 43.99538462172674]
Test Case: 599 | Input/Output: [[-2.4651790172325576 -46] -48.46517901723256]
Test Case: 600 | Input/Output: [[95.9752886601672 39] 134.9752886601672]
Test Case: 601 | Input/Output: [[-54.64572873808709 -69] -123.64572873808709]
Test Case: 602 | Input/Output: [[78.8266748818433 -90] -11.173325118156697]
Test Case: 603 | Input/Output: [[58.78647323726193 27] 85.78647323726193]
Test Case: 604 | Input/Output: [[26.979561819055675 -20] 6.979561819055675]
Test Case: 605 | Input/Output: [[87.83063149979802 71] 158.83063149979802]
Test Case: 606 | Input/Output: [[46.76692919793348 83] 129.76692919793348]
Test Case: 607 | Input/Output: [[-49.69351627737482 -97] -146.6935162773748]
Test Case: 608 | Input/Output: [[41.826224948054914 14] 55.826224948054914]
Test Case: 609 | Input/Output: [[-25.977221175710795 78] 52.022778824289205]
Test Case: 610 | Input/Output: [[30.120677734750984 73] 103.12067773475098]
Test Case: 611 | Input/Output: [[-43.08410602686865 -77] -120.08410602686865]
Test Case: 612 | Input/Output: [[93.2368390458351 99] 192.2368390458351]
Test Case: 613 | Input/Output: [[-15.973474375114279 20] 4.026525624885721]
Test Case: 614 | Input/Output: [[-48.55225489696997 75] 26.44774510303003]
Test Case: 615 | Input/Output: [[62.141097995890306 29] 91.1410979958903]
Test Case: 616 | Input/Output: [[2.091392273168239 79] 81.09139227316824]
Test Case: 617 | Input/Output: [[-81.83840563058334 -97] -178.83840563058334]
Test Case: 618 | Input/Output: [[3.0031287049000923 94] 97.00312870490009]
Test Case: 619 | Input/Output: [[89.44485205739409 -85] 4.444852057394087]
Test Case: 620 | Input/Output: [[-5.296685271468448 -89] -94.29668527146845]
Test Case: 621 | Input/Output: [[-14.328003951088064 -82] -96.32800395108806]
Test Case: 622 | Input/Output: [[20.71388022698875 50] 70.71388022698875]
Test Case: 623 | Input/Output: [[-10.000830434107172 -46] -56.00083043410717]
Test Case: 624 | Input/Output: [[-90.35399584218725 91] 0.6460041578127544]
Test Case: 625 | Input/Output: [[-8.043473515358528 58] 49.95652648464147]
Test Case: 626 | Input/Output: [[14.837029257419715 -89] -74.16297074258028]
Test Case: 627 | Input/Output: [[7.227635224186926 36] 43.227635224186926]
Test Case: 628 | Input/Output: [[81.7664525078111 -16] 65.7664525078111]
Test Case: 629 | Input/Output: [[96.62731901188059 52] 148.6273190118806]
Test Case: 630 | Input/Output: [[-60.01656659435055 47] -13.01656659435055]
Test Case: 631 | Input/Output: [[-60.59215140262737 -92] -152.59215140262737]
Test Case: 632 | Input/Output: [[11.551989834697224 -71] -59.448010165302776]
Test Case: 633 | Input/Output: [[9.830774029423068 -97] -87.16922597057693]
Test Case: 634 | Input/Output: [[-19.557661041662968 -66] -85.55766104166297]
Test Case: 635 | Input/Output: [[11.989548334353373 89] 100.98954833435337]
Test Case: 636 | Input/Output: [[4.734146686226296 -5] -0.2658533137737038]
Test Case: 637 | Input/Output: [[77.00318779893743 -92] -14.996812201062568]
Test Case: 638 | Input/Output: [[-20.743836136789668 -79] -99.74383613678967]
Test Case: 639 | Input/Output: [[18.88172643269317 73] 91.88172643269317]
Test Case: 640 | Input/Output: [[70.24001302819212 -47] 23.240013028192124]
Test Case: 641 | Input/Output: [[18.499732408552077 -55] -36.50026759144792]
Test Case: 642 | Input/Output: [[-97.30135543804084 -48] -145.30135543804084]
Test Case: 643 | Input/Output: [[-93.81492950506836 -26] -119.81492950506836]
Test Case: 644 | Input/Output: [[32.681488754010616 11] 43.681488754010616]
Test Case: 645 | Input/Output: [[-87.39159226184843 91] 3.60840773815157]
Test Case: 646 | Input/Output: [[-57.175757294304574 -3] -60.175757294304574]
Test Case: 647 | Input/Output: [[-2.9317017231416287 89] 86.06829827685837]
Test Case: 648 | Input/Output: [[-37.671331019095234 -36] -73.67133101909523]
Test Case: 649 | Input/Output: [[40.44069474630376 28] 68.44069474630376]
Test Case: 650 | Input/Output: [[-51.368699086175674 -55] -106.36869908617567]
Test Case: 651 | Input/Output: [[4.504672318256624 -90] -85.49532768174338]
Test Case: 652 | Input/Output: [[46.58121524500737 30] 76.58121524500737]
Test Case: 653 | Input/Output: [[-82.0001229308965 -75] -157.0001229308965]
Test Case: 654 | Input/Output: [[-15.040714720629225 -60] -75.04071472062923]
Test Case: 655 | Input/Output: [[-57.78807302467022 -93] -150.7880730246702]
Test Case: 656 | Input/Output: [[31.633998073811625 82] 113.63399807381163]
Test Case: 657 | Input/Output: [[-9.9115213441803 20] 10.0884786558197]
Test Case: 658 | Input/Output: [[43.53766730567199 7] 50.53766730567199]
Test Case: 659 | Input/Output: [[45.384777099833514 -79] -33.615222900166486]
Test Case: 660 | Input/Output: [[93.89726371159477 -26] 67.89726371159477]
Test Case: 661 | Input/Output: [[-44.73268141945104 82] 37.26731858054896]
Test Case: 662 | Input/Output: [[98.14831430862654 -71] 27.14831430862654]
Test Case: 663 | Input/Output: [[18.310028595114886 56] 74.31002859511489]
Test Case: 664 | Input/Output: [[15.433631158095906 80] 95.4336311580959]
Test Case: 665 | Input/Output: [[-65.29415713191429 81] 15.70584286808571]
Test Case: 666 | Input/Output: [[62.13304350651805 -61] 1.1330435065180495]
Test Case: 667 | Input/Output: [[51.23057324476085 -90] -38.76942675523915]
Test Case: 668 | Input/Output: [[90.24108026347326 0] 90.24108026347326]
Test Case: 669 | Input/Output: [[53.069301250569396 72] 125.0693012505694]
Test Case: 670 | Input/Output: [[52.57411433146905 -99] -46.42588566853095]
Test Case: 671 | Input/Output: [[-3.852575768208766 -26] -29.852575768208766]
Test Case: 672 | Input/Output: [[-29.983296040760706 66] 36.016703959239294]
Test Case: 673 | Input/Output: [[61.68013332922641 67] 128.6801333292264]
Test Case: 674 | Input/Output: [[-72.30634107312696 52] -20.30634107312696]
Test Case: 675 | Input/Output: [[40.36788534706841 -17] 23.36788534706841]
Test Case: 676 | Input/Output: [[-30.035304701205916 48] 17.964695298794084]
Test Case: 677 | Input/Output: [[82.10882731610329 58] 140.1088273161033]
Test Case: 678 | Input/Output: [[93.26382694381877 -21] 72.26382694381877]
Test Case: 679 | Input/Output: [[10.673535566479657 70] 80.67353556647966]
Test Case: 680 | Input/Output: [[-19.87805582557911 88] 68.12194417442089]
Test Case: 681 | Input/Output: [[-94.5156180768699 62] -32.5156180768699]
Test Case: 682 | Input/Output: [[-46.937198564961726 -23] -69.93719856496173]
Test Case: 683 | Input/Output: [[74.12462188954453 -89] -14.875378110455472]
Test Case: 684 | Input/Output: [[-5.389086021211796 -67] -72.3890860212118]
Test Case: 685 | Input/Output: [[76.56896614777128 77] 153.56896614777128]
Test Case: 686 | Input/Output: [[-87.56296501396952 -34] -121.56296501396952]
Test Case: 687 | Input/Output: [[-50.87329773079272 -32] -82.87329773079273]
Test Case: 688 | Input/Output: [[-86.85436942749418 84] -2.854369427494177]
Test Case: 689 | Input/Output: [[-26.92012289747734 92] 65.07987710252266]
Test Case: 690 | Input/Output: [[3.929131538146848 17] 20.929131538146848]
Test Case: 691 | Input/Output: [[18.57801097927603 13] 31.57801097927603]
Test Case: 692 | Input/Output: [[-65.71135179216049 99] 33.288648207839515]
Test Case: 693 | Input/Output: [[4.285915899352318 71] 75.28591589935232]
Test Case: 694 | Input/Output: [[-90.44565339987776 -86] -176.44565339987776]
Test Case: 695 | Input/Output: [[10.743654332064793 83] 93.74365433206479]
Test Case: 696 | Input/Output: [[4.849691502732199 92] 96.8496915027322]
Test Case: 697 | Input/Output: [[-16.670301351487055 74] 57.329698648512945]
Test Case: 698 | Input/Output: [[-48.42766120979274 -68] -116.42766120979275]
Test Case: 699 | Input/Output: [[89.18366270764724 33] 122.18366270764724]
Test Case: 700 | Input/Output: [[-9.652522063625213 38] 28.347477936374787]
Test Case: 701 | Input/Output: [[-20.137066920411414 6] -14.137066920411414]
Test Case: 702 | Input/Output: [[-13.669355774975301 100] 86.3306442250247]
Test Case: 703 | Input/Output: [[-73.15810981590249 -64] -137.1581098159025]
Test Case: 704 | Input/Output: [[-60.62449333355819 -95] -155.62449333355818]
Test Case: 705 | Input/Output: [[-82.49888031245895 27] -55.49888031245895]
Test Case: 706 | Input/Output: [[-45.17039238621459 24] -21.170392386214587]
Test Case: 707 | Input/Output: [[79.59668790866883 51] 130.59668790866883]
Test Case: 708 | Input/Output: [[-50.5137662789789 -1] -51.5137662789789]
Test Case: 709 | Input/Output: [[33.27401353705051 -33] 0.27401353705050724]
Test Case: 710 | Input/Output: [[-94.8651362259032 54] -40.8651362259032]
Test Case: 711 | Input/Output: [[-2.235257813948394 -65] -67.2352578139484]
Test Case: 712 | Input/Output: [[56.79032886602201 -95] -38.20967113397799]
Test Case: 713 | Input/Output: [[98.98528529745758 82] 180.98528529745758]
Test Case: 714 | Input/Output: [[-51.950191579924706 65] 13.049808420075294]
Test Case: 715 | Input/Output: [[89.27573070254721 -51] 38.27573070254721]
Test Case: 716 | Input/Output: [[-80.57256571197956 -94] -174.57256571197956]
Test Case: 717 | Input/Output: [[41.44109264964777 41] 82.44109264964777]
Test Case: 718 | Input/Output: [[-24.417141549684757 95] 70.58285845031524]
Test Case: 719 | Input/Output: [[-93.76396773001889 19] -74.76396773001889]
Test Case: 720 | Input/Output: [[-26.811793068909267 41] 14.188206931090733]
Test Case: 721 | Input/Output: [[-86.46332167767139 83] -3.463321677671388]
Test Case: 722 | Input/Output: [[-90.71235034359135 -1] -91.71235034359135]
Test Case: 723 | Input/Output: [[-95.77694383368687 -96] -191.77694383368686]
Test Case: 724 | Input/Output: [[-46.55538096845617 -23] -69.55538096845618]
Test Case: 725 | Input/Output: [[-45.83615456833705 -20] -65.83615456833705]
Test Case: 726 | Input/Output: [[-67.76297641350313 -24] -91.76297641350313]
Test Case: 727 | Input/Output: [[-45.625076143690315 -86] -131.6250761436903]
Test Case: 728 | Input/Output: [[8.832467890679084 68] 76.83246789067908]
Test Case: 729 | Input/Output: [[42.75997114729904 34] 76.75997114729904]
Test Case: 730 | Input/Output: [[-7.237643535180908 -73] -80.23764353518091]
Test Case: 731 | Input/Output: [[-46.681710818899845 -66] -112.68171081889984]
Test Case: 732 | Input/Output: [[-6.173909917868173 36] 29.826090082131827]
Test Case: 733 | Input/Output: [[-99.58689457807301 -29] -128.58689457807301]
Test Case: 734 | Input/Output: [[-72.70363124742369 63] -9.703631247423687]
Test Case: 735 | Input/Output: [[-97.52824948739452 -65] -162.52824948739453]
Test Case: 736 | Input/Output: [[-25.37518077673768 -61] -86.37518077673768]
Test Case: 737 | Input/Output: [[-22.600195494889704 -21] -43.600195494889704]
Test Case: 738 | Input/Output: [[-97.57680419507338 -6] -103.57680419507338]
Test Case: 739 | Input/Output: [[-50.68628840090055 -21] -71.68628840090055]
Test Case: 740 | Input/Output: [[39.98578628012979 -55] -15.014213719870213]
Test Case: 741 | Input/Output: [[-95.16415472812685 -45] -140.16415472812685]
Test Case: 742 | Input/Output: [[98.29533754633161 32] 130.2953375463316]
Test Case: 743 | Input/Output: [[-54.244664925609044 77] 22.755335074390956]
Test Case: 744 | Input/Output: [[-96.0959525880924 -33] -129.09595258809242]
Test Case: 745 | Input/Output: [[66.69341018950303 71] 137.69341018950303]
Test Case: 746 | Input/Output: [[6.912021659531263 -23] -16.087978340468737]
Test Case: 747 | Input/Output: [[54.36228467628058 62] 116.36228467628058]
Test Case: 748 | Input/Output: [[57.54599356256088 61] 118.54599356256088]
Test Case: 749 | Input/Output: [[93.75568603611589 -25] 68.75568603611589]
Test Case: 750 | Input/Output: [[13.573068071578803 39] 52.5730680715788]
Test Case: 751 | Input/Output: [[-18.513891409167726 -31] -49.51389140916773]
Test Case: 752 | Input/Output: [[-34.5559371528785 -4] -38.5559371528785]
Test Case: 753 | Input/Output: [[-35.75959015519645 13] -22.75959015519645]
Test Case: 754 | Input/Output: [[-47.149757074685205 35] -12.149757074685205]
Test Case: 755 | Input/Output: [[-27.490625252475184 9] -18.490625252475184]
Test Case: 756 | Input/Output: [[39.84611798881684 96] 135.84611798881684]
Test Case: 757 | Input/Output: [[58.76501534557147 -60] -1.23498465442853]
Test Case: 758 | Input/Output: [[-34.52410178282332 39] 4.4758982171766775]
Test Case: 759 | Input/Output: [[-9.531795918469825 -82] -91.53179591846983]
Test Case: 760 | Input/Output: [[51.850917989202856 -57] -5.1490820107971444]
Test Case: 761 | Input/Output: [[-47.69268805061433 62] 14.30731194938567]
Test Case: 762 | Input/Output: [[-55.58870411890568 -65] -120.58870411890568]
Test Case: 763 | Input/Output: [[39.39048877743855 -77] -37.60951122256145]
Test Case: 764 | Input/Output: [[-68.6380346486441 -56] -124.6380346486441]
Test Case: 765 | Input/Output: [[-29.666822163656548 93] 63.33317783634345]
Test Case: 766 | Input/Output: [[53.81357996965215 -40] 13.813579969652153]
Test Case: 767 | Input/Output: [[7.192789976798267 77] 84.19278997679827]
Test Case: 768 | Input/Output: [[-41.0226363110415 100] 58.9773636889585]
Test Case: 769 | Input/Output: [[56.651570753055864 -71] -14.348429246944136]
Test Case: 770 | Input/Output: [[64.31660971438754 55] 119.31660971438754]
Test Case: 771 | Input/Output: [[-97.1812623896981 47] -50.181262389698105]
Test Case: 772 | Input/Output: [[39.760051157194624 82] 121.76005115719462]
Test Case: 773 | Input/Output: [[89.84653719958428 28] 117.84653719958428]
Test Case: 774 | Input/Output: [[77.99805161635888 -44] 33.99805161635888]
Test Case: 775 | Input/Output: [[24.772135815601388 -96] -71.22786418439861]
Test Case: 776 | Input/Output: [[-54.58757166021171 14] -40.58757166021171]
Test Case: 777 | Input/Output: [[83.22834257431609 -87] -3.7716574256839124]
Test Case: 778 | Input/Output: [[-66.68717990806843 -70] -136.68717990806843]
Test Case: 779 | Input/Output: [[-91.2698273250827 3] -88.2698273250827]
Test Case: 780 | Input/Output: [[-45.049977196713 68] 22.950022803287]
Test Case: 781 | Input/Output: [[-41.03594912009096 14] -27.03594912009096]
Test Case: 782 | Input/Output: [[78.24758485285167 -94] -15.752415147148326]
Test Case: 783 | Input/Output: [[5.817670098875766 75] 80.81767009887577]
Test Case: 784 | Input/Output: [[-92.31070298593285 -53] -145.31070298593283]
Test Case: 785 | Input/Output: [[64.00093993767925 41] 105.00093993767925]
Test Case: 786 | Input/Output: [[67.81170414298302 68] 135.81170414298302]
Test Case: 787 | Input/Output: [[53.10022204090788 0] 53.10022204090788]
Test Case: 788 | Input/Output: [[-57.97682818998775 -68] -125.97682818998774]
Test Case: 789 | Input/Output: [[-20.043800703557423 92] 71.95619929644258]
Test Case: 790 | Input/Output: [[-21.98917543001167 2] -19.98917543001167]
Test Case: 791 | Input/Output: [[-85.75861764914276 -9] -94.75861764914276]
Test Case: 792 | Input/Output: [[-55.593376509317395 17] -38.593376509317395]
Test Case: 793 | Input/Output: [[2.318887282505571 -63] -60.68111271749443]
Test Case: 794 | Input/Output: [[-51.5788923727112 -29] -80.57889237271121]
Test Case: 795 | Input/Output: [[-53.302988195535605 33] -20.302988195535605]
Test Case: 796 | Input/Output: [[60.601951992286786 -2] 58.601951992286786]
Test Case: 797 | Input/Output: [[-3.958882653778417 52] 48.04111734622158]
Test Case: 798 | Input/Output: [[97.11598790760274 -7] 90.11598790760274]
Test Case: 799 | Input/Output: [[-7.992015676539594 26] 18.007984323460406]
Test Case: 800 | Input/Output: [[53.28919631719097 -64] -10.71080368280903]
Test Case: 801 | Input/Output: [[86.31078919867318 -1] 85.31078919867318]
Test Case: 802 | Input/Output: [[39.202614076558405 100] 139.2026140765584]
Test Case: 803 | Input/Output: [[88.20249541472066 93] 181.20249541472066]
Test Case: 804 | Input/Output: [[-78.44948097206206 -73] -151.44948097206208]
Test Case: 805 | Input/Output: [[-33.062208901685494 -24] -57.062208901685494]
Test Case: 806 | Input/Output: [[65.65254947174185 -71] -5.34745052825815]
Test Case: 807 | Input/Output: [[-58.62046102940708 -52] -110.62046102940708]
Test Case: 808 | Input/Output: [[-64.93984879082598 -34] -98.93984879082598]
Test Case: 809 | Input/Output: [[7.972870396837919 90] 97.97287039683792]
Test Case: 810 | Input/Output: [[-48.2037185029371 -17] -65.20371850293711]
Test Case: 811 | Input/Output: [[-93.32182339155202 83] -10.321823391552016]
Test Case: 812 | Input/Output: [[-38.9944168976043 -41] -79.99441689760431]
Test Case: 813 | Input/Output: [[40.377032400667474 59] 99.37703240066747]
Test Case: 814 | Input/Output: [[92.9638314724684 82] 174.9638314724684]
Test Case: 815 | Input/Output: [[85.8154638891971 96] 181.8154638891971]
Test Case: 816 | Input/Output: [[-66.25230606829254 97] 30.74769393170746]
Test Case: 817 | Input/Output: [[-47.81373102195725 -43] -90.81373102195725]
Test Case: 818 | Input/Output: [[50.720245710289134 36] 86.72024571028913]
Test Case: 819 | Input/Output: [[84.35871829192973 44] 128.35871829192973]
Test Case: 820 | Input/Output: [[51.87150884449906 -25] 26.87150884449906]
Test Case: 821 | Input/Output: [[-17.999661417090778 64] 46.00033858290922]
Test Case: 822 | Input/Output: [[34.49947012984927 -26] 8.499470129849271]
Test Case: 823 | Input/Output: [[-43.27551721037506 27] -16.275517210375057]
Test Case: 824 | Input/Output: [[45.02236438517036 -96] -50.97763561482964]
Test Case: 825 | Input/Output: [[-27.77984577785466 28] 0.22015422214533942]
Test Case: 826 | Input/Output: [[73.51247677348795 -11] 62.51247677348795]
Test Case: 827 | Input/Output: [[70.16013153570785 77] 147.16013153570785]
Test Case: 828 | Input/Output: [[-75.80671175175141 -2] -77.80671175175141]
Test Case: 829 | Input/Output: [[-26.201502207009767 -30] -56.20150220700977]
Test Case: 830 | Input/Output: [[-8.88444439295175 73] 64.11555560704825]
Test Case: 831 | Input/Output: [[74.55664509420433 -85] -10.443354905795672]
Test Case: 832 | Input/Output: [[8.171018180588746 76] 84.17101818058875]
Test Case: 833 | Input/Output: [[40.7456643108855 -32] 8.745664310885502]
Test Case: 834 | Input/Output: [[-88.69281371264974 84] -4.692813712649738]
Test Case: 835 | Input/Output: [[-9.520868197529069 48] 38.47913180247093]
Test Case: 836 | Input/Output: [[47.474318671292025 8] 55.474318671292025]
Test Case: 837 | Input/Output: [[3.288585170855768 31] 34.28858517085577]
Test Case: 838 | Input/Output: [[-83.34136126836826 42] -41.34136126836826]
Test Case: 839 | Input/Output: [[36.29789264337393 20] 56.29789264337393]
Test Case: 840 | Input/Output: [[-33.86364474196668 46] 12.13635525803332]
Test Case: 841 | Input/Output: [[21.07640316993266 90] 111.07640316993266]
Test Case: 842 | Input/Output: [[-60.92904956987988 94] 33.07095043012012]
Test Case: 843 | Input/Output: [[-25.187663271109926 -9] -34.187663271109926]
Test Case: 844 | Input/Output: [[-4.786059037183193 -1] -5.786059037183193]
Test Case: 845 | Input/Output: [[75.58306342455313 -76] -0.4169365754468686]
Test Case: 846 | Input/Output: [[-15.57409900262941 -35] -50.57409900262941]
Test Case: 847 | Input/Output: [[38.500445154886535 31] 69.50044515488653]
Test Case: 848 | Input/Output: [[-91.34451497624853 -33] -124.34451497624853]
Test Case: 849 | Input/Output: [[68.74437301703531 67] 135.74437301703531]
Test Case: 850 | Input/Output: [[89.35668028538893 -9] 80.35668028538893]
Test Case: 851 | Input/Output: [[75.81804337817107 -95] -19.18195662182893]
Test Case: 852 | Input/Output: [[64.56092790074484 4] 68.56092790074484]
Test Case: 853 | Input/Output: [[-54.75902892200355 27] -27.75902892200355]
Test Case: 854 | Input/Output: [[89.49080491684919 76] 165.49080491684919]
Test Case: 855 | Input/Output: [[-13.605024018731541 -21] -34.60502401873154]
Test Case: 856 | Input/Output: [[95.72987842531296 29] 124.72987842531296]
Test Case: 857 | Input/Output: [[-72.3184268136577 82] 9.681573186342305]
Test Case: 858 | Input/Output: [[-59.47501458442635 53] -6.475014584426347]
Test Case: 859 | Input/Output: [[11.717714061885417 13] 24.717714061885417]
Test Case: 860 | Input/Output: [[3.3208141112038874 -47] -43.67918588879611]
Test Case: 861 | Input/Output: [[-59.5239961408462 -9] -68.52399614084621]
Test Case: 862 | Input/Output: [[-93.7250018175223 18] -75.7250018175223]
Test Case: 863 | Input/Output: [[-94.47185345677842 50] -44.47185345677842]
Test Case: 864 | Input/Output: [[62.712647749089 71] 133.712647749089]
Test Case: 865 | Input/Output: [[25.565743531820885 -74] -48.434256468179115]
Test Case: 866 | Input/Output: [[97.77400422843158 -19] 78.77400422843158]
Test Case: 867 | Input/Output: [[-38.95005559120583 -90] -128.95005559120582]
Test Case: 868 | Input/Output: [[60.08114905247308 0] 60.08114905247308]
Test Case: 869 | Input/Output: [[27.557648381445546 -96] -68.44235161855445]
Test Case: 870 | Input/Output: [[38.88041768355802 -33] 5.880417683558022]
Test Case: 871 | Input/Output: [[61.753694917343694 -71] -9.246305082656306]
Test Case: 872 | Input/Output: [[96.42682629313802 -40] 56.42682629313802]
Test Case: 873 | Input/Output: [[-47.89411222783875 51] 3.1058877721612532]
Test Case: 874 | Input/Output: [[90.98377765064279 -36] 54.98377765064279]
Test Case: 875 | Input/Output: [[11.53436536052503 86] 97.53436536052503]
Test Case: 876 | Input/Output: [[29.922929242753185 -28] 1.9229292427531846]
Test Case: 877 | Input/Output: [[-14.401651013138817 -15] -29.401651013138817]
Test Case: 878 | Input/Output: [[66.50152204187742 49] 115.50152204187742]
Test Case: 879 | Input/Output: [[-47.56221771450462 63] 15.43778228549538]
Test Case: 880 | Input/Output: [[19.258355356550297 86] 105.2583553565503]
Test Case: 881 | Input/Output: [[-24.0253096791984 62] 37.9746903208016]
Test Case: 882 | Input/Output: [[45.06151873178504 43] 88.06151873178504]
Test Case: 883 | Input/Output: [[26.694468762836493 -89] -62.30553123716351]
Test Case: 884 | Input/Output: [[-43.6370434478355 -7] -50.6370434478355]
Test Case: 885 | Input/Output: [[31.444810751812923 -9] 22.444810751812923]
Test Case: 886 | Input/Output: [[4.488857560522646 58] 62.488857560522646]
Test Case: 887 | Input/Output: [[-27.544582002262132 32] 4.455417997737868]
Test Case: 888 | Input/Output: [[96.34231747247674 87] 183.34231747247674]
Test Case: 889 | Input/Output: [[-15.454957404847264 -49] -64.45495740484726]
Test Case: 890 | Input/Output: [[42.26896264571204 -33] 9.268962645712037]
Test Case: 891 | Input/Output: [[-70.78837022237845 -52] -122.78837022237845]
Test Case: 892 | Input/Output: [[-78.54812217119576 -21] -99.54812217119576]
Test Case: 893 | Input/Output: [[-23.107852240459152 66] 42.89214775954085]
Test Case: 894 | Input/Output: [[-80.92549672283577 92] 11.074503277164226]
Test Case: 895 | Input/Output: [[82.89591076465103 97] 179.89591076465103]
Test Case: 896 | Input/Output: [[-0.39197897736778486 49] 48.608021022632215]
Test Case: 897 | Input/Output: [[71.32726596368786 -80] -8.672734036312136]
Test Case: 898 | Input/Output: [[46.49309227260542 47] 93.49309227260542]
Test Case: 899 | Input/Output: [[49.85216982652253 62] 111.85216982652253]
Test Case: 900 | Input/Output: [[90.05911635049551 74] 164.05911635049551]
Test Case: 901 | Input/Output: [[-92.64892334116139 -85] -177.64892334116138]
Test Case: 902 | Input/Output: [[-69.54968148298725 9] -60.54968148298725]
Test Case: 903 | Input/Output: [[19.103359014578203 -98] -78.8966409854218]
Test Case: 904 | Input/Output: [[28.925090208826674 13] 41.925090208826674]
Test Case: 905 | Input/Output: [[-30.61706980422987 -72] -102.61706980422987]
Test Case: 906 | Input/Output: [[15.339917383771478 -91] -75.66008261622852]
Test Case: 907 | Input/Output: [[-38.33421373660961 -24] -62.33421373660961]
Test Case: 908 | Input/Output: [[56.40897281295406 19] 75.40897281295406]
Test Case: 909 | Input/Output: [[-40.95179565984528 32] -8.951795659845281]
Test Case: 910 | Input/Output: [[-97.19451107243853 39] -58.19451107243853]
Test Case: 911 | Input/Output: [[-33.26110346268007 -47] -80.26110346268007]
Test Case: 912 | Input/Output: [[32.95918534881338 -12] 20.959185348813378]
Test Case: 913 | Input/Output: [[59.979678035607634 -74] -14.020321964392366]
Test Case: 914 | Input/Output: [[91.30383796816767 -79] 12.30383796816767]
Test Case: 915 | Input/Output: [[86.59972587166214 -3] 83.59972587166214]
Test Case: 916 | Input/Output: [[23.31458994392493 -53] -29.68541005607507]
Test Case: 917 | Input/Output: [[-64.06144167136867 32] -32.06144167136867]
Test Case: 918 | Input/Output: [[2.8784635376322854 -13] -10.121536462367715]
Test Case: 919 | Input/Output: [[-35.58659137978215 71] 35.41340862021785]
Test Case: 920 | Input/Output: [[98.49491061448776 -47] 51.494910614487765]
Test Case: 921 | Input/Output: [[16.71730852634022 83] 99.71730852634022]
Test Case: 922 | Input/Output: [[-18.173163271658993 -88] -106.17316327165899]
Test Case: 923 | Input/Output: [[33.413172195874665 72] 105.41317219587467]
Test Case: 924 | Input/Output: [[-56.53967687612589 -20] -76.5396768761259]
Test Case: 925 | Input/Output: [[90.99317481840632 -12] 78.99317481840632]
Test Case: 926 | Input/Output: [[-1.6620388914103472 56] 54.33796110858965]
Test Case: 927 | Input/Output: [[87.31193804872774 -50] 37.31193804872774]
Test Case: 928 | Input/Output: [[56.6175212779776 -75] -18.382478722022398]
Test Case: 929 | Input/Output: [[-2.6304362144012714 -82] -84.63043621440127]
Test Case: 930 | Input/Output: [[14.778009890879787 92] 106.77800989087979]
Test Case: 931 | Input/Output: [[-94.03391839759078 24] -70.03391839759078]
Test Case: 932 | Input/Output: [[79.16678338437904 -100] -20.833216615620955]
Test Case: 933 | Input/Output: [[46.19455064242055 -56] -9.805449357579448]
Test Case: 934 | Input/Output: [[57.53047220538849 31] 88.53047220538849]
Test Case: 935 | Input/Output: [[-54.52633621967633 -19] -73.52633621967632]
Test Case: 936 | Input/Output: [[86.91163257658897 34] 120.91163257658897]
Test Case: 937 | Input/Output: [[-13.35377205610611 45] 31.64622794389389]
Test Case: 938 | Input/Output: [[68.14124938285335 3] 71.14124938285335]
Test Case: 939 | Input/Output: [[53.149398957525136 32] 85.14939895752514]
Test Case: 940 | Input/Output: [[-42.47731799198624 84] 41.52268200801376]
Test Case: 941 | Input/Output: [[29.882456300929306 63] 92.8824563009293]
Test Case: 942 | Input/Output: [[75.33770726811585 9] 84.33770726811585]
Test Case: 943 | Input/Output: [[-7.452422680396779 -60] -67.45242268039678]
Test Case: 944 | Input/Output: [[84.78181474689421 -7] 77.78181474689421]
Test Case: 945 | Input/Output: [[-30.366003217138868 -14] -44.36600321713887]
Test Case: 946 | Input/Output: [[61.30355394679836 51] 112.30355394679836]
Test Case: 947 | Input/Output: [[66.33281062712811 -60] 6.3328106271281115]
Test Case: 948 | Input/Output: [[-46.431918788009874 34] -12.431918788009874]
Test Case: 949 | Input/Output: [[-12.521366206660687 -2] -14.521366206660687]
Test Case: 950 | Input/Output: [[20.085099375056387 51] 71.08509937505639]
Test Case: 951 | Input/Output: [[-25.308851258231016 24] -1.308851258231016]
Test Case: 952 | Input/Output: [[-42.30500209611132 -8] -50.30500209611132]
Test Case: 953 | Input/Output: [[-54.700065335365665 27] -27.700065335365665]
Test Case: 954 | Input/Output: [[-9.737726513918858 48] 38.26227348608114]
Test Case: 955 | Input/Output: [[-8.430847193870505 -51] -59.430847193870505]
Test Case: 956 | Input/Output: [[88.82732354223322 88] 176.82732354223322]
Test Case: 957 | Input/Output: [[-88.83605191924386 -54] -142.83605191924386]
Test Case: 958 | Input/Output: [[9.009003793324723 -61] -51.99099620667528]
Test Case: 959 | Input/Output: [[-79.88049677577125 3] -76.88049677577125]
Test Case: 960 | Input/Output: [[47.98209354915028 -94] -46.01790645084972]
Test Case: 961 | Input/Output: [[-10.108221528031038 -50] -60.10822152803104]
Test Case: 962 | Input/Output: [[31.93253357046123 2] 33.93253357046123]
Test Case: 963 | Input/Output: [[-13.889141753059576 -61] -74.88914175305958]
Test Case: 964 | Input/Output: [[-52.49215810178476 -69] -121.49215810178475]
Test Case: 965 | Input/Output: [[60.23599257150693 86] 146.23599257150693]
Test Case: 966 | Input/Output: [[-60.86879640897516 29] -31.868796408975157]
Test Case: 967 | Input/Output: [[86.38633263742011 -85] 1.3863326374201108]
Test Case: 968 | Input/Output: [[-57.255209980992646 -99] -156.25520998099265]
Test Case: 969 | Input/Output: [[-61.5438442276284 30] -31.543844227628398]
Test Case: 970 | Input/Output: [[-6.797021613965342 75] 68.20297838603466]
Test Case: 971 | Input/Output: [[0.6871625679232238 38] 38.687162567923224]
Test Case: 972 | Input/Output: [[-94.34991804594766 44] -50.34991804594766]
Test Case: 973 | Input/Output: [[79.64277033446683 -48] 31.64277033446683]
Test Case: 974 | Input/Output: [[-13.304326111731868 -7] -20.304326111731868]
Test Case: 975 | Input/Output: [[-56.93644887043341 -34] -90.93644887043341]
Test Case: 976 | Input/Output: [[-91.95929674702265 74] -17.95929674702265]
Test Case: 977 | Input/Output: [[79.79814205095258 61] 140.79814205095258]
Test Case: 978 | Input/Output: [[-92.39067676631491 49] -43.39067676631491]
Test Case: 979 | Input/Output: [[93.30386220997138 66] 159.30386220997138]
Test Case: 980 | Input/Output: [[-82.59786314453457 -96] -178.59786314453459]
Test Case: 981 | Input/Output: [[-5.479941409626264 78] 72.52005859037374]
Test Case: 982 | Input/Output: [[-43.092539741519474 -71] -114.09253974151947]
Test Case: 983 | Input/Output: [[-63.017626732078405 2] -61.017626732078405]
Test Case: 984 | Input/Output: [[-93.15624671913633 58] -35.156246719136334]
Test Case: 985 | Input/Output: [[-0.05681171851539091 -65] -65.05681171851539]
Test Case: 986 | Input/Output: [[43.93620192634762 84] 127.93620192634762]
Test Case: 987 | Input/Output: [[-76.91541838883316 10] -66.91541838883316]
Test Case: 988 | Input/Output: [[-87.17484517991782 -31] -118.17484517991782]
Test Case: 989 | Input/Output: [[-53.890121481654106 23] -30.890121481654106]
Test Case: 990 | Input/Output: [[-91.83004086914148 -6] -97.83004086914148]
Test Case: 991 | Input/Output: [[-96.99699744481333 -100] -196.99699744481333]
Test Case: 992 | Input/Output: [[88.61362393624458 10] 98.61362393624458]
Test Case: 993 | Input/Output: [[19.69223711390653 51] 70.69223711390653]
Test Case: 994 | Input/Output: [[-40.116250752526426 -19] -59.116250752526426]
Test Case: 995 | Input/Output: [[21.873014838690068 -42] -20.126985161309932]
Test Case: 996 | Input/Output: [[-87.77630687772744 -37] -124.77630687772744]
Test Case: 997 | Input/Output: [[65.19090026416205 65] 130.19090026416205]
Test Case: 998 | Input/Output: [[-36.75030766539555 -29] -65.75030766539555]
Test Case: 999 | Input/Output: [[-0.25453247675142165 -30] -30.25453247675142]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 75 65 -80 10 85 -121 -77 26 84 78 16 -74 -94 -8 60 -8
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 56185.0
Test mean error for best: 28.09250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 65.7102204206 
Correct output: 17.2828270025  | Program output: -3.7171729975 
Correct output: 23.1304489589  | Program output: -67.8695510411
Correct output: 137.0785591646 | Program output: 69.0785591646 
Correct output: -36.0917810332 | Program output: 25.9082189668 
Correct output: -62.1419485102 | Program output: -81.1419485102
Correct output: 17.1520909798  | Program output: -78.8479090202
Correct output: -9.6087899132  | Program output: 24.3912100868 
Correct output: 75.493217436   | Program output: 41.493217436  
Correct output: 52.2037920383  | Program output: -24.7962079617
Correct output: -79.8347132576 | Program output: 7.1652867424  
Correct output: 154.815449196  | Program output: 92.815449196  
Correct output: -19.1443327626 | Program output: -65.1443327626
Correct output: 180.0725301747 | Program output: 98.0725301747 
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 8.2231630846  
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 60.4129516245 
Correct output: 38.5197606199  | Program output: -3.4802393801 
Correct output: -4.0857969085  | Program output: -67.0857969085
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 24.7882694945 
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 38.1794883917 
Correct output: -67.6536129502 | Program output: 6.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_pop integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc print_float float_inc float_rot integer_inc integer_mult float_dup_times)
Errors: [86.0 2 21.0 11 91.0 13 68.0 3 62.0 12 19.0 2 96.0 10 34.0 12 34.0 2 77.0 11 87.0 12 62.0 3 46.0 2 82.0 2 34.0 3 29.0 12 16.0 2 1.0 1 42.0 11 63.0 2 52.0 2 3.0 1 81.0 2 39.0 2 74.0 12]
Total: 1446.0
Mean: 28.92
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 18682.227199899997
Median total errors in population: 25339.0
Error averages by case: (751.0734010999979 13.323 718.7364390999998 13.021 729.6614385000015 13.127 746.4965157000008 13.347 730.6598939000014 13.716 731.3504108000005 13.206 731.8079803999999 12.905 723.1181491000007 12.993 729.759176100002 11.781 731.0124152000009 12.963 737.4954802000002 13.788 749.1227256999997 12.671 725.4942923000007 13.322 757.9359973000012 13.213 753.6810022000019 14.215 720.6303431999996 13.633 745.9675932000008 14.042 716.9464899999988 12.535 722.4920745 13.106 724.5074579999998 12.471 743.1563060000004 13.31 709.978883500001 12.559 757.0725041999997 13.434 730.086827400001 12.583 734.9944022999996 13.725)
Error minima by case: (1.0147 2 2.2828 8 1.1247 9 0.9214 2 0.0918 9 1.0007 1 1.8479 8 0.3912 7 0.8724 2 0.1314 8 0.0506 8 22.9853 2 0.1443 2 2.9853 2 33.0 3 0.7552 8 13.7779 2 1.0 1 0.4802 8 0.6532 2 1.1345 2 2.7218 1 14.6676 2 0.8139 1 0.1088 9)
Average genome size in population (length): 50.311
Average program size in population (points): 51.311
Average percent parens in population: 0.042
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.31
Error (vector) diversity:			 0.342
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1262440
--- Timings ---
Current time: 1529614977418 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.6 seconds, 16.0%
Fitness Testing:      2.8 seconds, 80.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 56185.0
Test mean error for best: 28.09250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 65.7102204206 
Correct output: 17.2828270025  | Program output: -3.7171729975 
Correct output: 23.1304489589  | Program output: -67.8695510411
Correct output: 137.0785591646 | Program output: 69.0785591646 
Correct output: -36.0917810332 | Program output: 25.9082189668 
Correct output: -62.1419485102 | Program output: -81.1419485102
Correct output: 17.1520909798  | Program output: -78.8479090202
Correct output: -9.6087899132  | Program output: 24.3912100868 
Correct output: 75.493217436   | Program output: 41.493217436  
Correct output: 52.2037920383  | Program output: -24.7962079617
Correct output: -79.8347132576 | Program output: 7.1652867424  
Correct output: 154.815449196  | Program output: 92.815449196  
Correct output: -19.1443327626 | Program output: -65.1443327626
Correct output: 180.0725301747 | Program output: 98.0725301747 
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 8.2231630846  
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 60.4129516245 
Correct output: 38.5197606199  | Program output: -3.4802393801 
Correct output: -4.0857969085  | Program output: -67.0857969085
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 24.7882694945 
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 38.1794883917 
Correct output: -67.6536129502 | Program output: 6.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_pop integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc print_float float_inc float_rot integer_inc integer_mult float_dup_times)
Errors: [86.0 2 21.0 11 91.0 13 68.0 3 62.0 12 19.0 2 96.0 10 34.0 12 34.0 2 77.0 11 87.0 12 62.0 3 46.0 2 82.0 2 34.0 3 29.0 12 16.0 2 1.0 1 42.0 11 63.0 2 52.0 2 3.0 1 81.0 2 39.0 2 74.0 12]
Total: 1446.0
Mean: 28.92
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 6651.751096100001
Median total errors in population: 2092.2007
Error averages by case: (294.0056257999995 10.942 218.14669459999925 11.967 242.5494234999994 12.402 283.5956984000012 10.994 243.9882109999996 12.518 247.78902579999854 10.472 247.02222790000081 11.585 224.31390759999942 12.104 245.13946799999908 9.681 249.46008729999915 11.785 262.99058670000096 12.773 291.79253499999993 10.604 234.9536570000018 10.833 311.8624740000016 10.721 291.75907489999963 11.685 219.79851069999967 12.386 278.2979735999983 11.392 232.3634040000001 10.299 230.3141029000004 12.23 229.64868990000036 10.11 270.6525706000016 10.818 211.3313688999981 10.276 306.0271972000029 11.025 246.9477943999994 10.272 254.71978639999932 12.407)
Error minima by case: (1.0147 2 2.2828 8 1.0484 9 0.9214 2 0.0918 9 5.1647 1 1.8479 8 0.3912 7 5.4932 2 0.1314 8 0.0506 8 22.9853 2 0.1443 2 2.9853 2 31.3399 3 0.7552 8 13.4973 2 1.0 1 2.4802 8 1.0858 2 1.1345 2 2.7883 1 14.6676 2 2.8205 1 0.1088 8)
Average genome size in population (length): 59.525
Average program size in population (points): 60.525
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.291
Error (vector) diversity:			 0.312
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2756415
--- Timings ---
Current time: 1529614981477 milliseconds
Total Time:           7.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.7 seconds, 34.7%
Fitness Testing:      4.3 seconds, 56.4%
Report:               0.6 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 56185.0
Test mean error for best: 28.09250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 65.7102204206 
Correct output: 17.2828270025  | Program output: -3.7171729975 
Correct output: 23.1304489589  | Program output: -67.8695510411
Correct output: 137.0785591646 | Program output: 69.0785591646 
Correct output: -36.0917810332 | Program output: 25.9082189668 
Correct output: -62.1419485102 | Program output: -81.1419485102
Correct output: 17.1520909798  | Program output: -78.8479090202
Correct output: -9.6087899132  | Program output: 24.3912100868 
Correct output: 75.493217436   | Program output: 41.493217436  
Correct output: 52.2037920383  | Program output: -24.7962079617
Correct output: -79.8347132576 | Program output: 7.1652867424  
Correct output: 154.815449196  | Program output: 92.815449196  
Correct output: -19.1443327626 | Program output: -65.1443327626
Correct output: 180.0725301747 | Program output: 98.0725301747 
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 8.2231630846  
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 60.4129516245 
Correct output: 38.5197606199  | Program output: -3.4802393801 
Correct output: -4.0857969085  | Program output: -67.0857969085
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 24.7882694945 
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 38.1794883917 
Correct output: -67.6536129502 | Program output: 6.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_pop integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc print_float float_inc float_rot integer_inc integer_mult float_dup_times)
Errors: [86.0 2 21.0 11 91.0 13 68.0 3 62.0 12 19.0 2 96.0 10 34.0 12 34.0 2 77.0 11 87.0 12 62.0 3 46.0 2 82.0 2 34.0 3 29.0 12 16.0 2 1.0 1 42.0 11 63.0 2 52.0 2 3.0 1 81.0 2 39.0 2 74.0 12]
Total: 1446.0
Mean: 28.92
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4440.950159899993
Median total errors in population: 1475.0
Error averages by case: (199.1923272000003 7.034 139.63518639999998 11.985 194.39745400000035 13.453 186.74165930000007 7.079 167.69687430000027 12.567 153.66906379999975 5.834 198.80440929999952 11.117 147.06193779999995 12.668 155.59686379999968 5.913 181.46741780000013 11.629 184.22400069999952 13.064 187.93483440000006 6.836 164.86599700000045 6.472 203.6518975000002 6.864 169.77802609999998 7.305 140.17145339999968 12.405 155.8454064999999 7.191 132.7653091000001 6.176 154.6136283000001 12.585 174.93335670000008 6.268 170.40976970000028 6.513 126.65346590000003 5.62 196.78435900000065 6.617 158.51908689999973 5.669 174.26237500000002 12.41)
Error minima by case: (22.2898 2 2.2828 7 1.1247 9 0.9214 3 23.9082 10 18.8581 1 1.8479 7 0.3912 7 4.3678 2 2.7512 9 5.1653 7 28.8154 3 0.8557 2 14.0725 2 33.0 3 6.2232 8 15.0 2 1.0 1 2.4802 8 1.0858 2 8.1462 2 3.0 1 14.6676 2 2.6815 1 4.3464 9)
Average genome size in population (length): 55.065
Average program size in population (points): 56.065
Average percent parens in population: 0.021
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.978
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.138
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4137365
--- Timings ---
Current time: 1529614984997 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.0 seconds, 36.5%
Fitness Testing:      5.9 seconds, 53.4%
Report:               1.0 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 56185.0
Test mean error for best: 28.09250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 65.7102204206 
Correct output: 17.2828270025  | Program output: -3.7171729975 
Correct output: 23.1304489589  | Program output: -67.8695510411
Correct output: 137.0785591646 | Program output: 69.0785591646 
Correct output: -36.0917810332 | Program output: 25.9082189668 
Correct output: -62.1419485102 | Program output: -81.1419485102
Correct output: 17.1520909798  | Program output: -78.8479090202
Correct output: -9.6087899132  | Program output: 24.3912100868 
Correct output: 75.493217436   | Program output: 41.493217436  
Correct output: 52.2037920383  | Program output: -24.7962079617
Correct output: -79.8347132576 | Program output: 7.1652867424  
Correct output: 154.815449196  | Program output: 92.815449196  
Correct output: -19.1443327626 | Program output: -65.1443327626
Correct output: 180.0725301747 | Program output: 98.0725301747 
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 8.2231630846  
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 60.4129516245 
Correct output: 38.5197606199  | Program output: -3.4802393801 
Correct output: -4.0857969085  | Program output: -67.0857969085
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 24.7882694945 
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 38.1794883917 
Correct output: -67.6536129502 | Program output: 6.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_tan} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_dup} {:instruction float_sin} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_flush} {:instruction 51} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_fromfloat})
Best program: (float_sub float_tan integer_yank integer_dup_items integer_min float_dup float_sin integer_yank float_yankdup integer_flush 51 float_max integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc print_float float_inc float_rot integer_inc integer_mult integer_fromfloat)
Errors: [86.0 2 21.0 11 91.0 13 68.0 3 62.0 12 19.0 2 96.0 10 34.0 12 34.0 2 77.0 11 87.0 12 62.0 3 46.0 2 82.0 2 34.0 3 29.0 12 16.0 2 1.0 1 42.0 11 63.0 2 52.0 2 3.0 1 81.0 2 39.0 2 74.0 12]
Total: 1446.0
Mean: 28.92
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3737.6225302999997
Median total errors in population: 1457.0
Error averages by case: (174.03828779999998 4.035 115.07520430000001 11.504 177.50119889999996 13.36 157.8123328 4.181 150.3763172 12.46 113.65764769999998 2.602 181.95433330000003 10.576 125.11085369999999 12.397 126.86576570000001 3.159 165.1434312 11.438 173.1807434 13.1 152.6071837 4.042 137.38188540000002 3.339 170.7663891 4.027 126.3299593 4.307 120.7376948 12.331 109.99781989999998 4.113 97.26514809999999 3.079 133.77782630000002 12.246 152.4476945 3.292 142.0466183 3.338 98.85782719999999 2.316 168.53628759999998 3.297 131.34597129999997 2.484 161.4231088 12.362)
Error minima by case: (2.8557 2 3.7829 8 2.0648 8 17.4873 3 13.4371 11 12.6131 1 3.9136 9 9.4389 10 1.7897 2 5.8256 10 30.3059 11 0.2496 3 18.1589 2 25.5067 2 33.0 3 20.7768 9 15.0 2 1.0 1 7.8585 10 4.0858 2 44.325 2 3.0 1 80.0 2 0.1034 1 18.1248 10)
Average genome size in population (length): 46.523
Average program size in population (points): 47.523
Average percent parens in population: 0.023
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.47
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.036
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5309340
--- Timings ---
Current time: 1529614988535 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.7 seconds, 38.3%
Fitness Testing:      7.4 seconds, 50.4%
Report:               1.6 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 56162.0
Test mean error for best: 28.08100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: -2.7171729975 
Correct output: 23.1304489589  | Program output: -66.8695510411
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 26.9082189668 
Correct output: -62.1419485102 | Program output: -80.1419485102
Correct output: 17.1520909798  | Program output: -77.8479090202
Correct output: -9.6087899132  | Program output: 25.3912100868 
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: -23.7962079617
Correct output: -79.8347132576 | Program output: 8.1652867424  
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: -64.1443327626
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 9.2231630846  
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: -2.4802393801 
Correct output: -4.0857969085  | Program output: -66.0857969085
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 7.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_pop integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc float_inc print_float float_inc float_rot integer_inc integer_mult float_dup_times)
Errors: [85.0 3 20.0 11 90.0 13 67.0 3 63.0 11 18.0 2 95.0 10 35.0 12 33.0 2 76.0 11 88.0 13 61.0 3 45.0 2 81.0 3 35.0 3 30.0 12 17.0 3 0.0 0 41.0 12 62.0 2 53.0 2 2.0 1 82.0 3 38.0 2 75.0 12]
Total: 1443.0
Mean: 28.86
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3795.8872348999994
Median total errors in population: 1446.0
Error averages by case: (175.95693870000002 3.484 117.2813176 11.434 180.15377 13.281 159.73285750000002 4.096 153.65729149999999 12.447 115.6943621 2.944 184.6310905 10.559 128.40507970000002 12.328 129.0319047 3.046 167.6407754 11.428 176.26362529999997 12.617 154.39185880000002 3.945 139.7689861 3.231 172.4466672 3.484 128.8567108 4.196 123.94537680000002 12.324 112.60660890000001 3.563 99.3508913 2.517 136.18181850000002 11.768 154.9754389 3.19 144.8845578 3.233 101.11651479999999 2.213 171.1309701 3.199 133.52942800000002 2.825 164.5393939 12.361)
Error minima by case: (50.7148 2 16.2828 10 22.8874 9 36.0831 2 34.1461 9 18.0 1 16.1864 10 7.6631 9 25.5022 2 48.7916 11 77.889 10 53.82 3 17.1986 2 79.0771 2 32.0 3 18.8311 10 14.0 2 0.0 0 37.5466 9 2.1401 2 50.0 1 2.0 1 79.0 2 23.8159 1 65.7079 10)
Average genome size in population (length): 49.792
Average program size in population (points): 50.792
Average percent parens in population: 0.021
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.9805
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6585515
--- Timings ---
Current time: 1529614991885 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.0 seconds, 38.7%
Fitness Testing:      9.0 seconds, 49.8%
Report:               2.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 56162.0
Test mean error for best: 28.08100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: -2.7171729975 
Correct output: 23.1304489589  | Program output: -66.8695510411
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 26.9082189668 
Correct output: -62.1419485102 | Program output: -80.1419485102
Correct output: 17.1520909798  | Program output: -77.8479090202
Correct output: -9.6087899132  | Program output: 25.3912100868 
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: -23.7962079617
Correct output: -79.8347132576 | Program output: 8.1652867424  
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: -64.1443327626
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 9.2231630846  
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: -2.4802393801 
Correct output: -4.0857969085  | Program output: -66.0857969085
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 7.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction print_integer} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_pop integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush print_integer integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc float_inc print_float float_inc float_rot integer_inc integer_mult float_dup_times)
Errors: [85.0 3 20.0 11 90.0 13 67.0 3 63.0 11 18.0 2 95.0 10 35.0 12 33.0 2 76.0 11 88.0 13 61.0 3 45.0 2 81.0 3 35.0 3 30.0 12 17.0 3 0.0 0 41.0 12 62.0 2 53.0 2 2.0 1 82.0 3 38.0 2 75.0 12]
Total: 1443.0
Mean: 28.86
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2559.4457915000003
Median total errors in population: 1446.0
Error averages by case: (128.2249781 2.604 66.99074809999999 11.183 133.5024042 13.101 111.0844517 3.537 105.064143 12.169 65.30242489999999 2.601 138.240447 10.244 78.35669459999998 12.125 78.56661499999998 2.51 120.26055559999999 11.169 128.97039599999997 12.146 105.4325846 3.464 90.7804339 2.603 124.52835590000001 2.595 79.74121729999999 3.598 73.6352176 12.129 62.5898465 2.654 47.1413759 1.596 86.98322409999999 11.2 106.8702 2.577 96.6754165 2.6 48.9424968 1.595 124.37985359999999 2.592 83.323853 2.548 116.5708576 12.147)
Error minima by case: (64.7102 2 4.7172 10 22.1333 10 67.0 3 34.1461 10 18.0 1 16.1546 10 7.6631 8 33.0 2 25.7962 10 77.889 10 61.0 3 17.1986 2 81.0 2 33.0 3 18.8311 10 15.0 2 0.0 0 4.4802 9 2.1401 2 51.0 2 2.0 1 80.0 2 37.1795 1 65.7079 11)
Average genome size in population (length): 53.032
Average program size in population (points): 54.032
Average percent parens in population: 0.019
Minimum age in population: 5.125
Maximum age in population: 9.375
Average age in population: 7.467375
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.013
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7958390
--- Timings ---
Current time: 1529614995351 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.4 seconds, 39.0%
Fitness Testing:     10.6 seconds, 49.3%
Report:               2.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 56162.0
Test mean error for best: 28.08100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: -2.7171729975 
Correct output: 23.1304489589  | Program output: -66.8695510411
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 26.9082189668 
Correct output: -62.1419485102 | Program output: -80.1419485102
Correct output: 17.1520909798  | Program output: -77.8479090202
Correct output: -9.6087899132  | Program output: 25.3912100868 
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: -23.7962079617
Correct output: -79.8347132576 | Program output: 8.1652867424  
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: -64.1443327626
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 9.2231630846  
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: -2.4802393801 
Correct output: -4.0857969085  | Program output: -66.0857969085
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 7.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_pop integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin float_mult float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc float_inc print_float float_inc float_rot integer_inc integer_mult float_dup_times)
Errors: [85.0 3 20.0 11 90.0 13 67.0 3 63.0 11 18.0 2 95.0 10 35.0 12 33.0 2 76.0 11 88.0 13 61.0 3 45.0 2 81.0 3 35.0 3 30.0 12 17.0 3 0.0 0 41.0 12 62.0 2 53.0 2 2.0 1 82.0 3 38.0 2 75.0 12]
Total: 1443.0
Mean: 28.86
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2479.2003482
Median total errors in population: 1446.0
Error averages by case: (125.02628290000003 2.6 64.04647860000001 11.16 130.31267839999995 13.084 107.81515299999998 3.526 101.15770499999998 12.127 62.5634909 2.596 134.99608550000005 10.219 74.4006911 12.11 74.96876829999998 2.505 117.34402270000001 11.15 125.29417650000003 12.158 102.3057821 3.467 87.7082722 2.598 121.51854339999998 2.597 77.4670322 3.588 69.75060870000002 12.115 60.219221700000006 2.653 43.5439721 1.564 84.09784149999999 11.208 103.6731327 2.563 94.15016369999998 2.593 45.108796999999996 1.59 122.09770419999998 2.62 79.7238273 2.543 112.84791650000003 12.128)
Error minima by case: (85.0 2 13.6099 9 7.7623 10 67.0 3 0.3691 9 18.0 1 13.7406 9 4.6088 8 33.0 2 21.3111 9 43.3738 10 61.0 3 14.1443 2 81.0 2 33.0 3 15.684 10 15.0 2 0.0 0 7.6271 10 0.9142 2 51.0 2 2.0 1 80.0 2 38.0 1 31.1927 10)
Average genome size in population (length): 53.011
Average program size in population (points): 54.011
Average percent parens in population: 0.019
Minimum age in population: 6.75
Maximum age in population: 10.65625
Average age in population: 8.9695
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9328865
--- Timings ---
Current time: 1529614998750 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.8 seconds, 39.1%
Fitness Testing:     12.2 seconds, 49.1%
Report:               2.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 56162.0
Test mean error for best: 28.08100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: -2.7171729975 
Correct output: 23.1304489589  | Program output: -66.8695510411
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 26.9082189668 
Correct output: -62.1419485102 | Program output: -80.1419485102
Correct output: 17.1520909798  | Program output: -77.8479090202
Correct output: -9.6087899132  | Program output: 25.3912100868 
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: -23.7962079617
Correct output: -79.8347132576 | Program output: 8.1652867424  
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: -64.1443327626
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 9.2231630846  
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: -2.4802393801 
Correct output: -4.0857969085  | Program output: -66.0857969085
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 7.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_div} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_mod} {:instruction float_div} {:instruction float_frominteger} {:instruction tagged_953} {:instruction -6} {:instruction tagged_14} {:instruction float_swap} {:instruction float_yankdup} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 float_tan float_yankdup float_dec float_yankdup integer_div integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_sin integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot float_mod float_div float_frominteger tagged_953 -6 tagged_14 float_swap float_yankdup in1 float_inc float_inc print_float float_inc float_rot)
Errors: [85.0 3 20.0 11 90.0 13 67.0 3 63.0 11 18.0 2 95.0 10 35.0 12 33.0 2 76.0 11 88.0 13 61.0 3 45.0 2 81.0 3 35.0 3 30.0 12 17.0 3 0.0 0 41.0 12 62.0 2 53.0 2 2.0 1 82.0 3 38.0 2 75.0 12]
Total: 1443.0
Mean: 28.86
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2966.0247958999994
Median total errors in population: 1446.0
Error averages by case: (142.1038242 2.969 85.4155369 11.245 150.2763872 13.137 125.25025499999998 3.728 119.1260696 12.073 83.98708230000001 2.816 154.8642794 10.32 92.87999289999999 12.175 93.1095748 2.706 137.5155573 11.231 142.7076307 12.366 119.83556800000001 3.642 108.60184050000001 2.825 138.64322449999997 2.971 98.72660960000002 3.81 88.2959901 12.182 81.89832820000001 3.046 62.32616659999999 1.655 105.00991160000001 11.432 124.2265907 2.787 115.04838779999999 2.824 63.881669200000005 1.825 142.3074182 2.981 97.76986859999998 2.75 130.519032 12.202)
Error minima by case: (63.7102 2 5.7172 10 21.478 8 67.0 3 22.9108 10 18.0 1 15.2401 8 3.5722 9 33.0 2 26.7962 10 5.1653 10 61.0 3 5.9633 2 81.0 2 33.0 3 6.2232 9 15.0 2 0.0 0 5.4802 9 3.1401 2 43.8538 2 2.0 1 66.3324 2 36.1795 1 4.3464 10)
Average genome size in population (length): 52.913
Average program size in population (points): 53.913
Average percent parens in population: 0.019
Minimum age in population: 7.75
Maximum age in population: 12.140625
Average age in population: 10.487015625
Median age in population: 10.5078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10695065
--- Timings ---
Current time: 1529615002211 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.2 seconds, 39.4%
Fitness Testing:     13.8 seconds, 48.7%
Report:               3.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 56148.0
Test mean error for best: 28.07400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: -0.7171729975 
Correct output: 23.1304489589  | Program output: -64.8695510411
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 28.9082189668 
Correct output: -62.1419485102 | Program output: -78.1419485102
Correct output: 17.1520909798  | Program output: -75.8479090202
Correct output: -9.6087899132  | Program output: 27.3912100868 
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: -21.7962079617
Correct output: -79.8347132576 | Program output: 10.1652867424 
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: -62.1443327626
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -91.3399358578
Correct output: -20.7768369154 | Program output: 11.2231630846 
Correct output: -106.4972590774 | Program output: -87.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: -0.4802393801 
Correct output: -4.0857969085  | Program output: -64.0857969085
Correct output: -93.8538349059 | Program output: -38.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -61.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 9.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [83.0 3 18.0 11 88.0 13 65.0 3 65.0 12 16.0 2 93.0 10 37.0 12 31.0 2 74.0 11 90.0 13 59.0 2 43.0 2 79.0 2 37.0 3 32.0 12 19.0 3 2.0 1 39.0 12 60.0 1 55.0 2 0.0 0 84.0 3 36.0 2 77.0 12]
Total: 1431.0
Mean: 28.62
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2917.2521328
Median total errors in population: 1443.0
Error averages by case: (141.49292909999997 3.421 81.0203648 11.232 146.29545059999998 13.147 124.6111395 3.675 119.71788289999998 11.568 79.4001836 2.76 150.9195805 10.313 93.44309210000002 12.178 92.51962709999998 2.658 133.4218907 11.223 143.3053403 12.874 119.1195606 3.601 104.3061979 2.762 137.9311031 3.417 95.11337150000001 3.752 88.83699290000001 12.181 78.2063156 3.482 61.650145800000004 1.08 100.7197867 11.932 120.0790001 2.732 111.68245489999998 2.758 63.3103977 1.755 139.0193262 3.425 97.19474489999999 2.694 131.1032537 12.212)
Error minima by case: (83.0 2 15.4775 9 21.3251 8 65.0 3 22.4294 11 16.0 1 15.3467 9 4.0536 9 31.0 2 50.3984 10 66.1723 10 59.0 2 5.4819 2 79.0 2 33.0 3 7.1144 9 15.0 2 0.0 0 36.7144 8 2.1401 1 51.0 2 0.0 0 80.0 2 36.0 1 53.9912 10)
Average genome size in population (length): 53.657
Average program size in population (points): 54.657
Average percent parens in population: 0.019
Minimum age in population: 9.0
Maximum age in population: 13.7421875
Average age in population: 12.0739765625
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12077115
--- Timings ---
Current time: 1529615005630 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.6 seconds, 39.4%
Fitness Testing:     15.5 seconds, 48.6%
Report:               3.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 56148.0
Test mean error for best: 28.07400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: -0.7171729975 
Correct output: 23.1304489589  | Program output: -64.8695510411
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 28.9082189668 
Correct output: -62.1419485102 | Program output: -78.1419485102
Correct output: 17.1520909798  | Program output: -75.8479090202
Correct output: -9.6087899132  | Program output: 27.3912100868 
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: -21.7962079617
Correct output: -79.8347132576 | Program output: 10.1652867424 
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: -62.1443327626
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -91.3399358578
Correct output: -20.7768369154 | Program output: 11.2231630846 
Correct output: -106.4972590774 | Program output: -87.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: -0.4802393801 
Correct output: -4.0857969085  | Program output: -64.0857969085
Correct output: -93.8538349059 | Program output: -38.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -61.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 9.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [83.0 3 18.0 11 88.0 13 65.0 3 65.0 12 16.0 2 93.0 10 37.0 12 31.0 2 74.0 11 90.0 13 59.0 2 43.0 2 79.0 2 37.0 3 32.0 12 19.0 3 2.0 1 39.0 12 60.0 1 55.0 2 0.0 0 84.0 3 36.0 2 77.0 12]
Total: 1431.0
Mean: 28.62
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2912.9284353999997
Median total errors in population: 1443.0
Error averages by case: (141.06699360000002 3.661 80.7346949 11.199 146.07404220000004 13.103 124.21803369999999 3.652 120.1340856 11.273 79.09212830000001 2.734 150.70916429999997 10.278 93.8497078 12.139 92.2219447 2.631 133.15773460000003 11.181 142.77119629999999 13.098 118.71480799999999 3.581 104.06838529999999 2.733 137.4808136 3.64 95.30810289999998 3.721 88.36362929999999 12.143 78.4049672 3.711 61.437481 0.808 100.4339782 12.15 119.85378289999998 2.688 111.92970379999998 2.733 63.0913162 1.723 139.24395560000002 3.66 96.8905272 2.676 130.5792582 12.182)
Error minima by case: (15.0 2 14.2829 9 20.2396 10 33.0 2 33.1461 10 16.0 2 14.2753 10 6.6631 9 31.0 2 49.6388 9 76.889 10 39.0 2 16.1986 2 19.0 1 34.0 2 17.8311 9 16.0 2 0.0 0 35.6184 9 1.1401 1 52.0 2 0.0 0 81.0 2 36.0 2 64.7079 10)
Average genome size in population (length): 54.05
Average program size in population (points): 55.05
Average percent parens in population: 0.018
Minimum age in population: 11.375
Maximum age in population: 15.3984375
Average age in population: 13.6241015625
Median age in population: 13.67578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.021
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13467390
--- Timings ---
Current time: 1529615009080 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.9 seconds, 39.3%
Fitness Testing:     17.2 seconds, 48.6%
Report:               4.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 56148.0
Test mean error for best: 28.07400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: -0.7171729975 
Correct output: 23.1304489589  | Program output: -64.8695510411
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 28.9082189668 
Correct output: -62.1419485102 | Program output: -78.1419485102
Correct output: 17.1520909798  | Program output: -75.8479090202
Correct output: -9.6087899132  | Program output: 27.3912100868 
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: -21.7962079617
Correct output: -79.8347132576 | Program output: 10.1652867424 
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: -62.1443327626
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -91.3399358578
Correct output: -20.7768369154 | Program output: 11.2231630846 
Correct output: -106.4972590774 | Program output: -87.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: -0.4802393801 
Correct output: -4.0857969085  | Program output: -64.0857969085
Correct output: -93.8538349059 | Program output: -38.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -61.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 9.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [83.0 3 18.0 11 88.0 13 65.0 3 65.0 12 16.0 2 93.0 10 37.0 12 31.0 2 74.0 11 90.0 13 59.0 2 43.0 2 79.0 2 37.0 3 32.0 12 19.0 3 2.0 1 39.0 12 60.0 1 55.0 2 0.0 0 84.0 3 36.0 2 77.0 12]
Total: 1431.0
Mean: 28.62
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2907.3574027999994
Median total errors in population: 1443.0
Error averages by case: (141.34867840000004 3.771 79.6112061 11.185 144.507982 13.05 124.4821761 3.771 120.02016579999999 11.331 78.36426000000002 2.867 149.05954110000002 10.269 93.74257300000001 12.107 92.27912100000002 2.736 131.92279470000003 11.151 143.6826999 13.067 119.0853349 3.633 102.8079057 2.875 137.91694300000003 3.671 95.21000159999997 3.838 89.2110461 12.128 78.2593162 3.846 61.7386073 1.013 99.33331370000002 12.116 118.3586604 2.755 111.43147369999998 2.865 63.004386999999994 1.805 138.95319329999998 3.79 96.94182099999998 2.796 131.4832008 12.165)
Error minima by case: (83.0 2 9.2828 9 15.1304 9 65.0 3 30.0918 9 16.0 2 9.1521 10 3.6088 9 31.0 2 44.2038 9 73.8347 11 59.0 2 13.1443 2 79.0 1 33.8054 2 14.7768 10 15.8054 2 0.0 0 30.5198 10 1.9142 1 51.8054 2 0.0 0 80.8054 2 36.0 2 61.6536 8)
Average genome size in population (length): 54.057
Average program size in population (points): 55.057
Average percent parens in population: 0.018
Minimum age in population: 12.375
Maximum age in population: 17.232421875
Average age in population: 14.983837890625
Median age in population: 15.0126953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.025
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 14855065
--- Timings ---
Current time: 1529615012421 milliseconds
Total Time:          38.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.2 seconds, 39.4%
Fitness Testing:     18.8 seconds, 48.5%
Report:               4.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 56138.0
Test mean error for best: 28.06900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 69.7102204206 
Correct output: 17.2828270025  | Program output: 0.2828270025  
Correct output: 23.1304489589  | Program output: -63.8695510411
Correct output: 137.0785591646 | Program output: 73.0785591646 
Correct output: -36.0917810332 | Program output: 29.9082189668 
Correct output: -62.1419485102 | Program output: -77.1419485102
Correct output: 17.1520909798  | Program output: -74.8479090202
Correct output: -9.6087899132  | Program output: 28.3912100868 
Correct output: 75.493217436   | Program output: 45.493217436  
Correct output: 52.2037920383  | Program output: -20.7962079617
Correct output: -79.8347132576 | Program output: 11.1652867424 
Correct output: 154.815449196  | Program output: 96.815449196  
Correct output: -19.1443327626 | Program output: -61.1443327626
Correct output: 180.0725301747 | Program output: 102.0725301747
Correct output: -128.3399358578 | Program output: -90.3399358578
Correct output: -20.7768369154 | Program output: 12.2231630846 
Correct output: -106.4972590774 | Program output: -86.4972590774
Correct output: 61.4129516245  | Program output: 64.4129516245 
Correct output: 38.5197606199  | Program output: 0.5197606199  
Correct output: -4.0857969085  | Program output: -63.0857969085
Correct output: -93.8538349059 | Program output: -37.8538349059
Correct output: 27.7882694945  | Program output: 28.7882694945 
Correct output: -145.332361916 | Program output: -60.332361916 
Correct output: 77.1794883917  | Program output: 42.1794883917 
Correct output: -67.6536129502 | Program output: 10.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc float_mod float_div float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [82.0 3 17.0 2 87.0 12 64.0 2 66.0 12 15.0 2 92.0 10 38.0 12 30.0 1 73.0 10 91.0 13 58.0 3 42.0 2 78.0 2 38.0 3 33.0 11 20.0 2 3.0 1 38.0 2 59.0 2 56.0 2 1.0 1 85.0 3 35.0 2 78.0 13]
Total: 1407.0
Mean: 28.14
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2991.6743306
Median total errors in population: 1443.0
Error averages by case: (144.4075593 3.827 83.2459305 11.129 147.3645347 12.995 127.01102429999997 3.83 123.29458679999999 11.604 82.0246136 2.92 151.85515780000006 10.24 97.16692740000002 12.08 95.38571149999999 2.784 134.99541490000004 11.034 146.91357280000005 12.958 121.75176790000002 3.4 106.14942310000002 2.931 140.5454212 3.343 100.0514615 3.82 92.692235 12.034 83.61774880000002 3.91 65.4850758 1.372 102.67601939999999 12.046 121.44956390000002 2.594 115.9608693 2.919 65.65060120000001 1.657 143.4906602 3.849 99.46916139999999 2.849 134.7542883 12.14)
Error minima by case: (81.0 2 5.2067 1 15.1304 9 63.0 2 27.3746 9 1.7677 1 7.415 9 9.6088 9 20.2683 1 3.0211 7 16.5937 9 57.0 2 17.1986 2 77.0 1 33.0 2 20.7768 9 15.0 2 0.0 0 16.7052 2 2.1401 1 30.8289 2 0.0 0 80.0 2 21.9546 1 4.5923 9)
Average genome size in population (length): 55.725
Average program size in population (points): 56.725
Average percent parens in population: 0.018
Minimum age in population: 13.890625
Maximum age in population: 18.3828125
Average age in population: 16.34196875
Median age in population: 16.392578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.033
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16277665
--- Timings ---
Current time: 1529615015924 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.6 seconds, 39.3%
Fitness Testing:     20.4 seconds, 48.5%
Report:               5.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 56138.0
Test mean error for best: 28.06900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 69.7102204206 
Correct output: 17.2828270025  | Program output: 0.2828270025  
Correct output: 23.1304489589  | Program output: -63.8695510411
Correct output: 137.0785591646 | Program output: 73.0785591646 
Correct output: -36.0917810332 | Program output: 29.9082189668 
Correct output: -62.1419485102 | Program output: -77.1419485102
Correct output: 17.1520909798  | Program output: -74.8479090202
Correct output: -9.6087899132  | Program output: 28.3912100868 
Correct output: 75.493217436   | Program output: 45.493217436  
Correct output: 52.2037920383  | Program output: -20.7962079617
Correct output: -79.8347132576 | Program output: 11.1652867424 
Correct output: 154.815449196  | Program output: 96.815449196  
Correct output: -19.1443327626 | Program output: -61.1443327626
Correct output: 180.0725301747 | Program output: 102.0725301747
Correct output: -128.3399358578 | Program output: -90.3399358578
Correct output: -20.7768369154 | Program output: 12.2231630846 
Correct output: -106.4972590774 | Program output: -86.4972590774
Correct output: 61.4129516245  | Program output: 64.4129516245 
Correct output: 38.5197606199  | Program output: 0.5197606199  
Correct output: -4.0857969085  | Program output: -63.0857969085
Correct output: -93.8538349059 | Program output: -37.8538349059
Correct output: 27.7882694945  | Program output: 28.7882694945 
Correct output: -145.332361916 | Program output: -60.332361916 
Correct output: 77.1794883917  | Program output: 42.1794883917 
Correct output: -67.6536129502 | Program output: 10.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_9902} {:instruction float_sub} {:instruction float_dup} {:instruction integer_div} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_flush} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_9902 float_sub float_dup integer_div float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_flush float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [82.0 3 17.0 2 87.0 12 64.0 2 66.0 12 15.0 2 92.0 10 38.0 12 30.0 1 73.0 10 91.0 13 58.0 3 42.0 2 78.0 2 38.0 3 33.0 11 20.0 2 3.0 1 38.0 2 59.0 2 56.0 2 1.0 1 85.0 3 35.0 2 78.0 13]
Total: 1407.0
Mean: 28.14
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2922.2197591000004
Median total errors in population: 1431.0
Error averages by case: (140.85200410000004 3.886 79.03091380000001 11.01 142.2172156999999 12.952 124.04063959999993 3.864 121.32674339999997 12.095 79.06209740000004 3.096 146.52564950000013 10.266 95.1276993 12.073 91.41335869999997 2.827 130.61722250000005 11.052 145.16397990000007 12.983 119.04930180000008 2.971 101.7601186 3.128 138.58896699999994 2.93 100.15041740000007 4.016 90.79346630000003 12.049 83.12387920000005 4.063 64.2366317 1.943 98.65152699999994 11.914 116.52371960000002 2.271 115.05310819999993 3.097 62.0236664 1.23 143.0618208 4.02 96.01410569999999 2.909 133.00750550000004 12.159)
Error minima by case: (81.0 2 13.2828 1 19.8874 9 63.0 2 35.1461 9 1.9166 1 13.1864 7 8.6631 9 8.368 1 3.126 10 30.3306 8 57.0 2 18.1443 2 77.0 1 33.0 2 19.8311 8 15.0 2 0.0 0 10.5581 2 3.0858 1 51.0 2 0.0 0 80.0 2 10.0542 1 48.3072 9)
Average genome size in population (length): 58.843
Average program size in population (points): 59.843
Average percent parens in population: 0.017
Minimum age in population: 15.3046875
Maximum age in population: 19.49658203125
Average age in population: 17.65108935546875
Median age in population: 17.68701171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 17759365
--- Timings ---
Current time: 1529615019394 milliseconds
Total Time:          45.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.9 seconds, 39.4%
Fitness Testing:     22.0 seconds, 48.3%
Report:               5.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 56222.0
Test mean error for best: 28.11100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 73.7102204206 
Correct output: 17.2828270025  | Program output: 4.2828270025  
Correct output: 23.1304489589  | Program output: -59.8695510411
Correct output: 137.0785591646 | Program output: 77.0785591646 
Correct output: -36.0917810332 | Program output: 33.9082189668 
Correct output: -62.1419485102 | Program output: -73.1419485102
Correct output: 17.1520909798  | Program output: -70.8479090202
Correct output: -9.6087899132  | Program output: 32.3912100868 
Correct output: 75.493217436   | Program output: 49.493217436  
Correct output: 52.2037920383  | Program output: -16.7962079617
Correct output: -79.8347132576 | Program output: 15.1652867424 
Correct output: 154.815449196  | Program output: 100.815449196 
Correct output: -19.1443327626 | Program output: -57.1443327626
Correct output: 180.0725301747 | Program output: 106.0725301747
Correct output: -128.3399358578 | Program output: -86.3399358578
Correct output: -20.7768369154 | Program output: 16.2231630846 
Correct output: -106.4972590774 | Program output: -82.4972590774
Correct output: 61.4129516245  | Program output: 68.4129516245 
Correct output: 38.5197606199  | Program output: 4.5197606199  
Correct output: -4.0857969085  | Program output: -59.0857969085
Correct output: -93.8538349059 | Program output: -33.8538349059
Correct output: 27.7882694945  | Program output: 32.7882694945 
Correct output: -145.332361916 | Program output: -56.332361916 
Correct output: 77.1794883917  | Program output: 46.1794883917 
Correct output: -67.6536129502 | Program output: 14.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc float_mod float_div float_inc float_inc float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [78.0 3 13.0 2 83.0 13 60.0 2 70.0 11 11.0 2 88.0 10 42.0 12 26.0 2 69.0 12 95.0 13 54.0 2 38.0 2 74.0 2 42.0 3 37.0 12 24.0 3 7.0 1 34.0 2 55.0 2 60.0 1 5.0 2 89.0 3 31.0 2 82.0 13]
Total: 1399.0
Mean: 27.98
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2998.414617
Median total errors in population: 1431.0
Error averages by case: (144.0059602 3.915 81.6791575 10.2 145.23544569999996 12.89 127.25545809999997 3.849 125.25357689999998 12.083 81.22525050000003 3.066 149.62044220000007 10.228 99.111051 12.012 94.8614931 2.804 133.39764120000007 11.082 149.0485536 13.026 122.20274720000005 3.039 104.45544220000001 3.085 141.0256345 2.983 102.41276540000003 4.042 94.7843256 12.035 85.47312820000002 3.99 68.29768779999999 2.01 101.31816999999997 11.051 119.4015399 2.211 117.70973459999998 3.071 65.7797728 1.238 145.4401722 3.994 99.4547022 2.93 136.9047644 12.226)
Error minima by case: (78.0 2 12.1791 1 10.5833 8 60.0 2 27.9835 9 6.1646 1 14.1521 8 2.177 8 26.0 1 37.6995 8 75.8347 10 54.0 2 15.1443 1 74.0 1 33.0 2 16.7768 8 15.0 2 0.0 0 33.5217 2 0.0858 1 51.0 1 0.0 0 80.0 2 31.0 1 63.6536 9)
Average genome size in population (length): 58.987
Average program size in population (points): 59.987
Average percent parens in population: 0.017
Minimum age in population: 16.830078125
Maximum age in population: 20.985595703125
Average age in population: 19.12827172851562
Median age in population: 19.16162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19239540
--- Timings ---
Current time: 1529615022779 milliseconds
Total Time:          49.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.3 seconds, 39.3%
Fitness Testing:     23.7 seconds, 48.3%
Report:               5.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 56222.0
Test mean error for best: 28.11100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 73.7102204206 
Correct output: 17.2828270025  | Program output: 4.2828270025  
Correct output: 23.1304489589  | Program output: -59.8695510411
Correct output: 137.0785591646 | Program output: 77.0785591646 
Correct output: -36.0917810332 | Program output: 33.9082189668 
Correct output: -62.1419485102 | Program output: -73.1419485102
Correct output: 17.1520909798  | Program output: -70.8479090202
Correct output: -9.6087899132  | Program output: 32.3912100868 
Correct output: 75.493217436   | Program output: 49.493217436  
Correct output: 52.2037920383  | Program output: -16.7962079617
Correct output: -79.8347132576 | Program output: 15.1652867424 
Correct output: 154.815449196  | Program output: 100.815449196 
Correct output: -19.1443327626 | Program output: -57.1443327626
Correct output: 180.0725301747 | Program output: 106.0725301747
Correct output: -128.3399358578 | Program output: -86.3399358578
Correct output: -20.7768369154 | Program output: 16.2231630846 
Correct output: -106.4972590774 | Program output: -82.4972590774
Correct output: 61.4129516245  | Program output: 68.4129516245 
Correct output: 38.5197606199  | Program output: 4.5197606199  
Correct output: -4.0857969085  | Program output: -59.0857969085
Correct output: -93.8538349059 | Program output: -33.8538349059
Correct output: 27.7882694945  | Program output: 32.7882694945 
Correct output: -145.332361916 | Program output: -56.332361916 
Correct output: 77.1794883917  | Program output: 46.1794883917 
Correct output: -67.6536129502 | Program output: 14.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction -13.66242252953667} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat -13.66242252953667 integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc float_mod float_div float_inc float_inc float_inc float_dup_items integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [78.0 3 13.0 2 83.0 13 60.0 2 70.0 11 11.0 2 88.0 10 42.0 12 26.0 2 69.0 12 95.0 13 54.0 2 38.0 2 74.0 2 42.0 3 37.0 12 24.0 3 7.0 1 34.0 2 55.0 2 60.0 1 5.0 2 89.0 3 31.0 2 82.0 13]
Total: 1399.0
Mean: 27.98
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3073.087573400001
Median total errors in population: 1431.0
Error averages by case: (146.0470343 3.93 85.05691450000003 6.938 147.79102919999994 12.637 129.33289459999995 3.639 128.68772559999996 12.017 85.02383580000004 3.193 152.05305020000011 10.283 102.65297420000005 11.964 97.05144199999997 2.589 136.37007250000005 10.983 152.31489430000002 13.071 124.16676580000006 3.415 107.51152440000001 3.212 142.90216350000003 3.028 107.57499120000008 4.192 98.26117720000005 11.843 90.67330150000006 3.888 71.5691931 2.04 104.59097099999995 7.515 122.19322520000003 2.688 122.37612329999995 3.196 69.14892689999999 1.634 150.21974260000002 4.125 101.73071349999998 2.964 140.193887 12.609)
Error minima by case: (78.0 2 11.2828 1 6.1925 1 60.0 2 8.3927 9 1.019 1 11.1521 2 8.6156 8 26.0 1 22.8808 2 33.3927 11 54.0 2 2.5701 1 74.0 1 33.0 2 21.7185 10 15.0 2 0.0 0 9.1968 1 3.0858 1 51.0 1 0.0 0 80.0 2 31.0 1 20.3927 9)
Average genome size in population (length): 59.543
Average program size in population (points): 60.543
Average percent parens in population: 0.017
Minimum age in population: 17.830078125
Maximum age in population: 22.505615234375
Average age in population: 20.51747277832031
Median age in population: 20.56072998046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.046
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 20730715
--- Timings ---
Current time: 1529615026270 milliseconds
Total Time:          52.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.7 seconds, 39.4%
Fitness Testing:     25.3 seconds, 48.2%
Report:               6.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 56377.0
Test mean error for best: 28.18850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 77.7102204206 
Correct output: 17.2828270025  | Program output: 8.2828270025  
Correct output: 23.1304489589  | Program output: -55.8695510411
Correct output: 137.0785591646 | Program output: 81.0785591646 
Correct output: -36.0917810332 | Program output: 37.9082189668 
Correct output: -62.1419485102 | Program output: -69.1419485102
Correct output: 17.1520909798  | Program output: -66.8479090202
Correct output: -9.6087899132  | Program output: 36.3912100868 
Correct output: 75.493217436   | Program output: 53.493217436  
Correct output: 52.2037920383  | Program output: -12.7962079617
Correct output: -79.8347132576 | Program output: 19.1652867424 
Correct output: 154.815449196  | Program output: 104.815449196 
Correct output: -19.1443327626 | Program output: -53.1443327626
Correct output: 180.0725301747 | Program output: 110.0725301747
Correct output: -128.3399358578 | Program output: -82.3399358578
Correct output: -20.7768369154 | Program output: 20.2231630846 
Correct output: -106.4972590774 | Program output: -78.4972590774
Correct output: 61.4129516245  | Program output: 72.4129516245 
Correct output: 38.5197606199  | Program output: 8.5197606199  
Correct output: -4.0857969085  | Program output: -55.0857969085
Correct output: -93.8538349059 | Program output: -29.8538349059
Correct output: 27.7882694945  | Program output: 36.7882694945 
Correct output: -145.332361916 | Program output: -52.332361916 
Correct output: 77.1794883917  | Program output: 50.1794883917 
Correct output: -67.6536129502 | Program output: 18.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap float_tan integer_sub float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_mod float_div integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [74.0 3 9.0 2 79.0 13 56.0 3 74.0 11 7.0 1 84.0 11 46.0 12 22.0 2 65.0 11 99.0 12 50.0 1 34.0 2 70.0 1 46.0 2 41.0 10 28.0 3 11.0 2 30.0 1 51.0 2 64.0 2 9.0 2 93.0 3 27.0 2 86.0 13]
Total: 1382.0
Mean: 27.64
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3035.2718943000004
Median total errors in population: 1407.0
Error averages by case: (145.37723410000004 3.994 82.5026052 3.58 145.33633799999996 12.274 128.69078919999998 3.407 127.97751289999995 11.989 82.63428600000002 3.196 149.61136090000008 10.294 101.90319420000003 12.026 96.07809469999995 2.344 133.90283230000003 10.656 151.9074056000001 13.074 123.85950410000005 3.934 105.10663089999998 3.152 142.67974079999996 3.18 106.39959130000003 4.141 97.75860760000005 11.504 89.46036180000003 3.523 71.8065122 2.195 102.06097770000001 3.646 119.74955950000003 3.062 121.10711299999994 3.202 68.9927494 2.256 149.09620020000003 4.125 100.63398669999995 3.111 139.79270600000004 12.981)
Error minima by case: (74.0 2 9.0 1 11.3206 8 56.0 2 35.0918 10 3.1027 1 6.3206 9 8.6088 9 22.0 1 24.3397 8 78.8347 8 50.0 1 7.8997 1 70.0 1 34.0 2 19.7768 10 16.0 2 0.0 0 10.6603 1 0.7198 1 52.0 1 0.0 0 81.0 2 27.0 2 66.6536 10)
Average genome size in population (length): 60.368
Average program size in population (points): 61.368
Average percent parens in population: 0.017
Minimum age in population: 19.5736083984375
Maximum age in population: 23.85565185546875
Average age in population: 21.84571594238281
Median age in population: 21.88726806640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.047
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 22240490
--- Timings ---
Current time: 1529615029679 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.0 seconds, 39.4%
Fitness Testing:     26.9 seconds, 48.2%
Report:               6.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 56377.0
Test mean error for best: 28.18850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 77.7102204206 
Correct output: 17.2828270025  | Program output: 8.2828270025  
Correct output: 23.1304489589  | Program output: -55.8695510411
Correct output: 137.0785591646 | Program output: 81.0785591646 
Correct output: -36.0917810332 | Program output: 37.9082189668 
Correct output: -62.1419485102 | Program output: -69.1419485102
Correct output: 17.1520909798  | Program output: -66.8479090202
Correct output: -9.6087899132  | Program output: 36.3912100868 
Correct output: 75.493217436   | Program output: 53.493217436  
Correct output: 52.2037920383  | Program output: -12.7962079617
Correct output: -79.8347132576 | Program output: 19.1652867424 
Correct output: 154.815449196  | Program output: 104.815449196 
Correct output: -19.1443327626 | Program output: -53.1443327626
Correct output: 180.0725301747 | Program output: 110.0725301747
Correct output: -128.3399358578 | Program output: -82.3399358578
Correct output: -20.7768369154 | Program output: 20.2231630846 
Correct output: -106.4972590774 | Program output: -78.4972590774
Correct output: 61.4129516245  | Program output: 72.4129516245 
Correct output: 38.5197606199  | Program output: 8.5197606199  
Correct output: -4.0857969085  | Program output: -55.0857969085
Correct output: -93.8538349059 | Program output: -29.8538349059
Correct output: 27.7882694945  | Program output: 36.7882694945 
Correct output: -145.332361916 | Program output: -52.332361916 
Correct output: 77.1794883917  | Program output: 50.1794883917 
Correct output: -67.6536129502 | Program output: 18.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_pop} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times integer_fromfloat float_sub float_pop float_add integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_mod float_div integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [74.0 3 9.0 2 79.0 13 56.0 3 74.0 11 7.0 1 84.0 11 46.0 12 22.0 2 65.0 11 99.0 12 50.0 1 34.0 2 70.0 1 46.0 2 41.0 10 28.0 3 11.0 2 30.0 1 51.0 2 64.0 2 9.0 2 93.0 3 27.0 2 86.0 13]
Total: 1382.0
Mean: 27.64
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3356.3210507999997
Median total errors in population: 1407.0
Error averages by case: (156.33055800000002 3.872 94.23911700000005 3.561 156.0003137999999 12.502 139.84050660000003 3.735 141.1362356 11.649 96.48957780000005 3.468 159.99335430000016 10.301 115.51045720000002 12.038 107.64068239999996 2.718 145.44978120000007 11.256 164.74275230000003 13.045 135.06711650000005 3.941 117.18977010000003 3.259 153.63096100000007 3.26 122.69208200000011 4.25 111.34151290000004 11.801 105.90865120000008 4.12 85.80616280000002 2.277 113.53008699999994 3.473 131.05580180000004 3.342 136.16196649999995 3.442 82.9727755 2.72 164.0892151000001 4.38 112.13342409999998 3.167 152.80118810000002 12.99)
Error minima by case: (74.0 2 9.0 1 16.3495 1 56.0 2 7.1836 9 5.0 1 11.1521 2 6.6088 7 22.0 1 9.7782 2 69.6694 10 50.0 1 1.4299 1 70.0 1 35.0 2 9.5537 10 17.0 2 0.0 0 3.9058 1 0.0858 1 53.0 1 0.0 0 82.0 2 27.0 1 58.3072 8)
Average genome size in population (length): 64.216
Average program size in population (points): 65.216
Average percent parens in population: 0.016
Minimum age in population: 21.091552734375
Maximum age in population: 25.32040405273438
Average age in population: 23.48376193237305
Median age in population: 23.53572082519531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.062
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 23846890
--- Timings ---
Current time: 1529615033161 milliseconds
Total Time:          59.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.3 seconds, 39.3%
Fitness Testing:     28.6 seconds, 48.1%
Report:               7.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 56377.0
Test mean error for best: 28.18850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 77.7102204206 
Correct output: 17.2828270025  | Program output: 8.2828270025  
Correct output: 23.1304489589  | Program output: -55.8695510411
Correct output: 137.0785591646 | Program output: 81.0785591646 
Correct output: -36.0917810332 | Program output: 37.9082189668 
Correct output: -62.1419485102 | Program output: -69.1419485102
Correct output: 17.1520909798  | Program output: -66.8479090202
Correct output: -9.6087899132  | Program output: 36.3912100868 
Correct output: 75.493217436   | Program output: 53.493217436  
Correct output: 52.2037920383  | Program output: -12.7962079617
Correct output: -79.8347132576 | Program output: 19.1652867424 
Correct output: 154.815449196  | Program output: 104.815449196 
Correct output: -19.1443327626 | Program output: -53.1443327626
Correct output: 180.0725301747 | Program output: 110.0725301747
Correct output: -128.3399358578 | Program output: -82.3399358578
Correct output: -20.7768369154 | Program output: 20.2231630846 
Correct output: -106.4972590774 | Program output: -78.4972590774
Correct output: 61.4129516245  | Program output: 72.4129516245 
Correct output: 38.5197606199  | Program output: 8.5197606199  
Correct output: -4.0857969085  | Program output: -55.0857969085
Correct output: -93.8538349059 | Program output: -29.8538349059
Correct output: 27.7882694945  | Program output: 36.7882694945 
Correct output: -145.332361916 | Program output: -52.332361916 
Correct output: 77.1794883917  | Program output: 50.1794883917 
Correct output: -67.6536129502 | Program output: 18.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_mult} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap float_tan integer_sub float_dec float_yankdup float_add integer_add float_sin integer_mult float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_mod float_div integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc)
Errors: [74.0 3 9.0 2 79.0 13 56.0 3 74.0 11 7.0 1 84.0 11 46.0 12 22.0 2 65.0 11 99.0 12 50.0 1 34.0 2 70.0 1 46.0 2 41.0 10 28.0 3 11.0 2 30.0 1 51.0 2 64.0 2 9.0 2 93.0 3 27.0 2 86.0 13]
Total: 1382.0
Mean: 27.64
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3174.4640458999984
Median total errors in population: 1404.0
Error averages by case: (147.1100843 3.953 83.76377540000001 3.349 148.48788649999986 12.887 130.5415827999999 3.931 134.21934049999993 11.269 88.98214080000005 3.361 152.42040280000018 10.446 108.53040970000005 12.029 97.73177249999995 3.105 138.0077313000001 11.966 158.17489090000015 12.969 126.03842380000012 3.688 109.70893199999998 3.333 144.90654829999994 3.272 119.19410370000014 4.296 104.50829350000008 12.11 102.32408150000008 4.358 79.56945630000001 2.422 103.07590609999994 3.075 123.62820290000005 3.324 132.4166436999999 3.208 76.248836 3.165 160.59508330000006 4.253 102.25431519999995 3.176 146.15520210000008 12.925)
Error minima by case: (73.0 2 5.5 1 12.1304 9 55.0 2 3.7466 8 2.9948 1 6.1521 8 2.7715 7 21.0 1 10.7739 8 1.5361 9 49.0 1 6.764 1 69.0 1 35.0 2 8.3965 9 17.0 2 0.0 0 2.9102 1 0.0858 1 12.483 1 0.0 0 63.9615 2 26.0 1 7.7323 8)
Average genome size in population (length): 70.415
Average program size in population (points): 71.415
Average percent parens in population: 0.014
Minimum age in population: 23.17739868164062
Maximum age in population: 26.99331665039062
Average age in population: 24.97607690429688
Median age in population: 25.02304077148438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.067
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 25608340
--- Timings ---
Current time: 1529615036763 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 39.3%
Fitness Testing:     30.3 seconds, 48.1%
Report:               7.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 56828.0
Test mean error for best: 28.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 81.7102204206 
Correct output: 17.2828270025  | Program output: 12.2828270025 
Correct output: 23.1304489589  | Program output: -51.8695510411
Correct output: 137.0785591646 | Program output: 85.0785591646 
Correct output: -36.0917810332 | Program output: 41.9082189668 
Correct output: -62.1419485102 | Program output: -65.1419485102
Correct output: 17.1520909798  | Program output: -62.8479090202
Correct output: -9.6087899132  | Program output: 40.3912100868 
Correct output: 75.493217436   | Program output: 57.493217436  
Correct output: 52.2037920383  | Program output: -8.7962079617 
Correct output: -79.8347132576 | Program output: 23.1652867424 
Correct output: 154.815449196  | Program output: 108.815449196 
Correct output: -19.1443327626 | Program output: -49.1443327626
Correct output: 180.0725301747 | Program output: 114.0725301747
Correct output: -128.3399358578 | Program output: -78.3399358578
Correct output: -20.7768369154 | Program output: 24.2231630846 
Correct output: -106.4972590774 | Program output: -74.4972590774
Correct output: 61.4129516245  | Program output: 76.4129516245 
Correct output: 38.5197606199  | Program output: 12.5197606199 
Correct output: -4.0857969085  | Program output: -51.0857969085
Correct output: -93.8538349059 | Program output: -25.8538349059
Correct output: 27.7882694945  | Program output: 40.7882694945 
Correct output: -145.332361916 | Program output: -48.332361916 
Correct output: 77.1794883917  | Program output: 54.1794883917 
Correct output: -67.6536129502 | Program output: 22.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_pop} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod integer_dup float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap float_tan integer_pop float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_mod float_div float_inc float_inc float_inc float_inc float_mod float_div integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [70.0 2 5.0 1 75.0 13 52.0 3 78.0 12 3.0 1 80.0 11 50.0 12 18.0 2 61.0 11 103.0 13 46.0 2 30.0 1 66.0 2 50.0 2 45.0 11 32.0 3 15.0 2 26.0 2 47.0 2 68.0 2 13.0 2 97.0 2 23.0 2 90.0 13]
Total: 1372.0
Mean: 27.44
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3273.878375599998
Median total errors in population: 1396.0
Error averages by case: (151.02116560000005 4.096 86.66489650000004 3.367 149.08891429999977 12.857 134.5759065999999 4.037 140.6193313999999 11.199 90.79898360000008 3.269 152.94023350000023 10.75 114.82072970000004 12.021 101.81238599999996 3.206 138.18324800000008 11.872 164.66351810000018 12.734 130.21531440000015 3.306 111.01673969999996 3.612 148.93098550000002 3.311 123.36965210000021 4.476 111.00298960000015 11.911 106.41945570000009 4.354 86.9730895 2.791 106.0262203999999 3.287 124.58977390000003 3.413 136.3898696999999 3.327 83.6491209 3.293 164.61334770000008 4.14 106.26302009999995 3.193 152.68448310000002 12.723)
Error minima by case: (70.0 2 3.5059 1 2.9714 8 52.0 2 37.0918 8 3.0 1 2.0286 7 10.6088 8 18.0 1 16.9714 9 80.8347 9 46.0 1 11.4819 1 66.0 1 34.0 2 13.1771 9 16.0 2 1.0 1 6.0706 1 0.5766 1 52.0 1 0.0 0 81.0 2 23.0 1 68.6536 9)
Average genome size in population (length): 73.434
Average program size in population (points): 74.434
Average percent parens in population: 0.014
Minimum age in population: 24.17739868164062
Maximum age in population: 28.43766021728516
Average age in population: 26.50388606262207
Median age in population: 26.5714225769043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.071
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 27444690
--- Timings ---
Current time: 1529615040365 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.1 seconds, 39.2%
Fitness Testing:     32.1 seconds, 48.2%
Report:               8.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 57091.0
Test mean error for best: 28.54550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 83.7102204206 
Correct output: 17.2828270025  | Program output: 14.2828270025 
Correct output: 23.1304489589  | Program output: -49.8695510411
Correct output: 137.0785591646 | Program output: 87.0785591646 
Correct output: -36.0917810332 | Program output: 43.9082189668 
Correct output: -62.1419485102 | Program output: -63.1419485102
Correct output: 17.1520909798  | Program output: -60.8479090202
Correct output: -9.6087899132  | Program output: 42.3912100868 
Correct output: 75.493217436   | Program output: 59.493217436  
Correct output: 52.2037920383  | Program output: -6.7962079617 
Correct output: -79.8347132576 | Program output: 25.1652867424 
Correct output: 154.815449196  | Program output: 110.815449196 
Correct output: -19.1443327626 | Program output: -47.1443327626
Correct output: 180.0725301747 | Program output: 116.0725301747
Correct output: -128.3399358578 | Program output: -76.3399358578
Correct output: -20.7768369154 | Program output: 26.2231630846 
Correct output: -106.4972590774 | Program output: -72.4972590774
Correct output: 61.4129516245  | Program output: 78.4129516245 
Correct output: 38.5197606199  | Program output: 14.5197606199 
Correct output: -4.0857969085  | Program output: -49.0857969085
Correct output: -93.8538349059 | Program output: -23.8538349059
Correct output: 27.7882694945  | Program output: 42.7882694945 
Correct output: -145.332361916 | Program output: -46.332361916 
Correct output: 77.1794883917  | Program output: 56.1794883917 
Correct output: -67.6536129502 | Program output: 24.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction tag_float_237} {:instruction tagged_570} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction tag_float_650} {:instruction float_dec} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_mod} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (float_sub integer_dup_times tag_float_237 tagged_570 float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_sub float_dup integer_sub tagged_67 float_sub float_dup float_mult integer_fromfloat tag_float_650 float_dec integer_sub float_mod integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_mod float_mod integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc float_rot integer_dup float_inc integer_shove float_inc float_rot integer_dup float_inc integer_shove float_inc float_mod float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [68.0 3 3.0 1 73.0 13 50.0 2 80.0 11 1.0 1 78.0 11 52.0 12 16.0 2 59.0 11 105.0 13 44.0 2 28.0 2 64.0 2 52.0 3 47.0 11 34.0 3 17.0 2 24.0 2 45.0 1 70.0 1 15.0 2 99.0 2 21.0 2 92.0 13]
Total: 1365.0
Mean: 27.3
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3177.6534515999992
Median total errors in population: 1384.0
Error averages by case: (145.2762307 3.991 81.89924430000002 3.083 143.96569189999985 12.86 128.72044539999993 4.098 139.81667719999993 11.146 84.49338750000005 2.926 147.96005020000018 10.951 113.99898630000003 12.021 96.01388099999996 3.067 133.56321250000008 11.53 163.59883320000014 12.498 124.1209776000001 2.807 105.4050928 3.49 143.4807282 2.872 121.35091180000012 4.076 109.97685560000008 11.231 104.46783100000007 4.307 84.59660230000001 2.943 101.39764729999996 2.902 119.18543210000001 3.301 134.93022159999992 3.441 81.50069269999999 3.124 163.0736943000001 4.164 100.51692859999996 3.152 151.6261955 12.736)
Error minima by case: (68.0 2 1.5 1 9.1657 2 50.0 2 4.2794 9 1.0 1 4.1521 1 11.2152 7 16.0 1 34.4222 2 29.2794 9 44.0 1 5.4278 1 64.0 1 35.0 2 15.1771 9 17.0 2 0.0 0 24.0 1 1.5766 1 53.0 1 2.0 1 82.0 2 21.0 1 16.2794 10)
Average genome size in population (length): 76.667
Average program size in population (points): 77.667
Average percent parens in population: 0.013
Minimum age in population: 25.67999267578125
Maximum age in population: 29.65935134887695
Average age in population: 28.03490278244019
Median age in population: 28.10815811157227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.065
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 29361915
--- Timings ---
Current time: 1529615044199 milliseconds
Total Time:          70.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 39.1%
Fitness Testing:     33.9 seconds, 48.2%
Report:               8.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 57506.0
Test mean error for best: 28.75300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 86.7102204206 
Correct output: 17.2828270025  | Program output: 17.2828270025 
Correct output: 23.1304489589  | Program output: -46.8695510411
Correct output: 137.0785591646 | Program output: 90.0785591646 
Correct output: -36.0917810332 | Program output: 46.9082189668 
Correct output: -62.1419485102 | Program output: -60.1419485102
Correct output: 17.1520909798  | Program output: -57.8479090202
Correct output: -9.6087899132  | Program output: 45.3912100868 
Correct output: 75.493217436   | Program output: 62.493217436  
Correct output: 52.2037920383  | Program output: -3.7962079617 
Correct output: -79.8347132576 | Program output: 28.1652867424 
Correct output: 154.815449196  | Program output: 113.815449196 
Correct output: -19.1443327626 | Program output: -44.1443327626
Correct output: 180.0725301747 | Program output: 119.0725301747
Correct output: -128.3399358578 | Program output: -73.3399358578
Correct output: -20.7768369154 | Program output: 29.2231630846 
Correct output: -106.4972590774 | Program output: -69.4972590774
Correct output: 61.4129516245  | Program output: 81.4129516245 
Correct output: 38.5197606199  | Program output: 17.5197606199 
Correct output: -4.0857969085  | Program output: -46.0857969085
Correct output: -93.8538349059 | Program output: -20.8538349059
Correct output: 27.7882694945  | Program output: 45.7882694945 
Correct output: -145.332361916 | Program output: -43.332361916 
Correct output: 77.1794883917  | Program output: 59.1794883917 
Correct output: -67.6536129502 | Program output: 27.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_yank} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank float_yank float_dup tagged_67 float_sub float_dup tagged_67 tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc)
Errors: [65.0 3 0.0 0 70.0 13 47.0 3 83.0 11 2.0 1 75.0 10 55.0 12 13.0 2 56.0 11 108.0 13 41.0 2 25.0 2 61.0 2 55.0 3 50.0 11 37.0 3 20.0 1 21.0 2 42.0 1 73.0 2 18.0 2 102.0 2 18.0 2 95.0 12]
Total: 1358.0
Mean: 27.16
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3628.6362830999997
Median total errors in population: 1382.0
Error averages by case: (161.28578800000003 4.253 99.68642120000004 3.203 160.36103939999992 12.815 145.12348699999998 4.291 158.8651909 11.481 102.10278400000004 2.897 164.3052020000001 11.128 133.61713590000005 11.97 113.24812099999997 3.236 149.97710949999998 11.282 182.24071690000005 12.579 140.80020800000003 3.02 122.55532920000002 3.58 159.11386640000003 3.094 140.6870807 4.157 129.66657610000001 10.986 124.12143020000006 4.54 104.82313950000002 3.332 118.480578 3.148 136.21627270000002 3.466 153.9976139000001 3.641 101.69712 3.365 181.5301898000001 4.272 117.53940470000002 3.414 170.4784781 12.966)
Error minima by case: (9.2898 2 0.0 0 5.1304 9 12.0786 2 3.7886 8 1.0 1 0.8479 7 6.6978 7 12.0 1 5.7782 7 9.2275 8 40.0 1 7.3022 1 24.6907 1 33.0 2 1.6978 9 15.0 2 1.0 1 7.9058 1 3.5858 1 21.1462 1 1.0 1 27.6676 2 10.1795 1 3.7725 9)
Average genome size in population (length): 80.373
Average program size in population (points): 81.373
Average percent parens in population: 0.012
Minimum age in population: 27.04849243164062
Maximum age in population: 31.35255241394043
Average age in population: 29.43740099334717
Median age in population: 29.484450340271
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.076
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 31371915
--- Timings ---
Current time: 1529615047937 milliseconds
Total Time:          74.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.8 seconds, 38.9%
Fitness Testing:     35.8 seconds, 48.3%
Report:               9.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 57506.0
Test mean error for best: 28.75300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 86.7102204206 
Correct output: 17.2828270025  | Program output: 17.2828270025 
Correct output: 23.1304489589  | Program output: -46.8695510411
Correct output: 137.0785591646 | Program output: 90.0785591646 
Correct output: -36.0917810332 | Program output: 46.9082189668 
Correct output: -62.1419485102 | Program output: -60.1419485102
Correct output: 17.1520909798  | Program output: -57.8479090202
Correct output: -9.6087899132  | Program output: 45.3912100868 
Correct output: 75.493217436   | Program output: 62.493217436  
Correct output: 52.2037920383  | Program output: -3.7962079617 
Correct output: -79.8347132576 | Program output: 28.1652867424 
Correct output: 154.815449196  | Program output: 113.815449196 
Correct output: -19.1443327626 | Program output: -44.1443327626
Correct output: 180.0725301747 | Program output: 119.0725301747
Correct output: -128.3399358578 | Program output: -73.3399358578
Correct output: -20.7768369154 | Program output: 29.2231630846 
Correct output: -106.4972590774 | Program output: -69.4972590774
Correct output: 61.4129516245  | Program output: 81.4129516245 
Correct output: 38.5197606199  | Program output: 17.5197606199 
Correct output: -4.0857969085  | Program output: -46.0857969085
Correct output: -93.8538349059 | Program output: -20.8538349059
Correct output: 27.7882694945  | Program output: 45.7882694945 
Correct output: -145.332361916 | Program output: -43.332361916 
Correct output: 77.1794883917  | Program output: 59.1794883917 
Correct output: -67.6536129502 | Program output: 27.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_yank} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank float_yank float_dup tagged_67 float_sub float_dup tagged_67 tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_mult integer_inc float_inc float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc)
Errors: [65.0 3 0.0 0 70.0 13 47.0 3 83.0 11 2.0 1 75.0 10 55.0 12 13.0 2 56.0 11 108.0 13 41.0 2 25.0 2 61.0 2 55.0 3 50.0 11 37.0 3 20.0 1 21.0 2 42.0 1 73.0 2 18.0 2 102.0 2 18.0 2 95.0 12]
Total: 1358.0
Mean: 27.16
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3544.6784127
Median total errors in population: 1377.0
Error averages by case: (155.78003379999998 3.98 94.25713189999999 2.663 155.70283009999991 12.789 139.5115053 4.107 158.39876739999997 11.824 96.86494150000004 2.76 159.6872324000001 11.141 132.92495780000004 11.925 107.64611409999998 3.089 145.17232130000005 11.195 181.76314720000008 12.943 134.95175380000006 3.257 117.50647959999999 3.365 153.3075566 3.335 139.4324742000001 4.267 128.93378820000007 11.294 122.99958100000003 4.431 103.54195 3.259 113.30678240000005 3.364 131.28305820000003 3.301 153.20034020000003 3.52 100.59530519999998 3.304 180.63431590000008 3.828 112.08348059999999 3.303 169.96656399999998 12.982)
Error minima by case: (2.2898 2 0.0 0 8.1304 9 19.0786 2 36.0918 9 0.0 0 2.1521 7 9.2908 9 4.0 1 37.2038 1 54.282 9 32.0 1 0.6457 1 34.0725 1 14.5744 2 9.5744 10 3.4256 2 2.77 1 12.0 1 0.0858 1 28.1462 1 1.0664 1 34.6676 1 9.0 1 54.5744 9)
Average genome size in population (length): 85.521
Average program size in population (points): 86.521
Average percent parens in population: 0.012
Minimum age in population: 28.62559509277344
Maximum age in population: 32.83049392700195
Average age in population: 30.91639094257355
Median age in population: 30.97476816177368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.076
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 33510690
--- Timings ---
Current time: 1529615051888 milliseconds
Total Time:          77.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.2 seconds, 38.7%
Fitness Testing:     37.7 seconds, 48.4%
Report:               9.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 57506.0
Test mean error for best: 28.75300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 86.7102204206 
Correct output: 17.2828270025  | Program output: 17.2828270025 
Correct output: 23.1304489589  | Program output: -46.8695510411
Correct output: 137.0785591646 | Program output: 90.0785591646 
Correct output: -36.0917810332 | Program output: 46.9082189668 
Correct output: -62.1419485102 | Program output: -60.1419485102
Correct output: 17.1520909798  | Program output: -57.8479090202
Correct output: -9.6087899132  | Program output: 45.3912100868 
Correct output: 75.493217436   | Program output: 62.493217436  
Correct output: 52.2037920383  | Program output: -3.7962079617 
Correct output: -79.8347132576 | Program output: 28.1652867424 
Correct output: 154.815449196  | Program output: 113.815449196 
Correct output: -19.1443327626 | Program output: -44.1443327626
Correct output: 180.0725301747 | Program output: 119.0725301747
Correct output: -128.3399358578 | Program output: -73.3399358578
Correct output: -20.7768369154 | Program output: 29.2231630846 
Correct output: -106.4972590774 | Program output: -69.4972590774
Correct output: 61.4129516245  | Program output: 81.4129516245 
Correct output: 38.5197606199  | Program output: 17.5197606199 
Correct output: -4.0857969085  | Program output: -46.0857969085
Correct output: -93.8538349059 | Program output: -20.8538349059
Correct output: 27.7882694945  | Program output: 45.7882694945 
Correct output: -145.332361916 | Program output: -43.332361916 
Correct output: 77.1794883917  | Program output: 59.1794883917 
Correct output: -67.6536129502 | Program output: 27.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_mod} {:instruction float_mod} {:instruction float_inc} {:instruction integer_sub} {:instruction in2} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678})
Best program: (tag_float_237 float_sin integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc float_inc float_mod float_div integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_mod float_mod float_inc integer_sub in2 float_inc float_mod float_div integer_shove float_inc integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div float_inc float_inc float_sub integer_inc float_inc float_inc float_div float_inc float_inc float_sub integer_inc float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678)
Errors: [65.0 3 0.0 0 70.0 13 47.0 3 83.0 11 2.0 1 75.0 10 55.0 12 13.0 2 56.0 11 108.0 13 41.0 2 25.0 2 61.0 2 55.0 3 50.0 11 37.0 3 20.0 1 21.0 2 42.0 1 73.0 2 18.0 2 102.0 2 18.0 2 95.0 12]
Total: 1358.0
Mean: 27.16
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3308.0626228
Median total errors in population: 1372.0
Error averages by case: (143.30070400000002 3.944 80.68115320000004 2.564 145.12942819999995 12.842 126.94613649999998 4.076 150.15682719999995 11.854 88.79016990000008 2.757 148.99292030000012 11.074 124.52532560000003 11.996 94.2223099 3.167 134.06502780000005 10.898 174.05306410000006 12.844 122.59235490000005 3.259 107.61861449999999 3.426 142.0713525 3.344 136.5239900000001 4.381 120.62497900000001 11.32 119.69759450000011 4.439 94.44694860000001 3.223 99.46123809999999 3.407 121.10711120000003 2.965 149.40077869999996 3.431 91.18646040000004 3.28 177.47704680000012 3.587 98.7691486 3.226 162.0789383 12.839)
Error minima by case: (2.2898 2 0.0 0 2.1466 8 14.3294 2 1.0918 8 0.0 0 0.1521 7 4.4054 8 2.0 1 1.2038 1 26.0918 9 8.3294 1 1.2938 1 28.3294 1 34.0 2 19.1771 8 16.0 2 1.0 1 10.0 1 0.9142 1 28.1462 1 2.0 1 34.6676 1 7.0 1 13.0918 8)
Average genome size in population (length): 89.981
Average program size in population (points): 90.981
Average percent parens in population: 0.011
Minimum age in population: 30.22001695632935
Maximum age in population: 34.19985914230347
Average age in population: 32.48680752277374
Median age in population: 32.51063442230225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.095
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 35762065
--- Timings ---
Current time: 1529615055777 milliseconds
Total Time:          81.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 38.5%
Fitness Testing:     39.7 seconds, 48.5%
Report:              10.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 57481.95449999999
Test mean error for best: 28.74098
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 77.7102204206 
Correct output: 17.2828270025  | Program output: 8.2828270025  
Correct output: 23.1304489589  | Program output: 2.0           
Correct output: 137.0785591646 | Program output: 81.0785591646 
Correct output: -36.0917810332 | Program output: 40.9082189668 
Correct output: -62.1419485102 | Program output: 2.0           
Correct output: 17.1520909798  | Program output: 2.0           
Correct output: -9.6087899132  | Program output: 39.3912100868 
Correct output: 75.493217436   | Program output: 53.493217436  
Correct output: 52.2037920383  | Program output: 2.0           
Correct output: -79.8347132576 | Program output: 22.1652867424 
Correct output: 154.815449196  | Program output: 104.815449196 
Correct output: -19.1443327626 | Program output: 2.0           
Correct output: 180.0725301747 | Program output: 110.0725301747
Correct output: -128.3399358578 | Program output: -79.3399358578
Correct output: -20.7768369154 | Program output: 23.2231630846 
Correct output: -106.4972590774 | Program output: -75.4972590774
Correct output: 61.4129516245  | Program output: 72.4129516245 
Correct output: 38.5197606199  | Program output: 8.5197606199  
Correct output: -4.0857969085  | Program output: 2.0           
Correct output: -93.8538349059 | Program output: -26.8538349059
Correct output: 27.7882694945  | Program output: 36.7882694945 
Correct output: -145.332361916 | Program output: -49.332361916 
Correct output: 77.1794883917  | Program output: 50.1794883917 
Correct output: -67.6536129502 | Program output: 21.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap float_tan integer_sub float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc integer_shove float_inc integer_dup float_rot integer_dup float_inc integer_shove float_inc in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_inc integer_shove float_inc float_mod float_div float_inc float_min integer_shove float_inc float_inc float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [74.0 3 9.0 2 21.1304 10 56.0 3 77.0 12 64.1419 11 15.1521 11 49.0 11 22.0 2 50.2038 10 102.0 13 50.0 1 21.1443 13 70.0 1 49.0 3 44.0 11 31.0 3 11.0 2 30.0 1 6.0858 11 67.0 2 9.0 2 96.0 2 27.0 2 89.0 13]
Total: 1294.8583
Mean: 25.897165
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3765.605854699998
Median total errors in population: 1360.0
Error averages by case: (160.8763814000001 4.289 99.45239960000002 2.755 159.27176689999985 12.758 144.94181319999996 4.427 169.4879874999999 11.87 107.48572460000004 3.224 163.02101740000012 10.925 144.32653080000006 11.996 112.66632069999997 3.42 149.80538199999998 10.39 193.12554020000007 12.68 141.91905000000008 3.466 123.18695920000002 3.901 160.26432519999992 3.557 155.03648280000004 4.711 140.77707460000002 11.45 138.6083151 4.604 116.7797376 3.414 116.97494460000003 3.568 136.06786310000004 3.002 167.38263960000006 3.812 112.97105360000002 3.542 195.08763700000014 3.866 116.92160839999997 3.51 181.43029960000004 12.6)
Error minima by case: (1.7102 2 0.0 0 1.3449 2 23.0786 2 15.2119 2 0.0 0 0.0391 1 7.6088 1 0.0 0 21.0 1 21.0 2 28.0 1 7.394 1 38.0725 1 35.0 2 15.606 8 17.0 2 0.0 0 5.4506 1 0.0858 1 32.1462 1 0.7883 1 38.6676 1 5.0 1 21.0 2)
Average genome size in population (length): 94.254
Average program size in population (points): 95.254
Average percent parens in population: 0.011
Minimum age in population: 31.22001695632935
Maximum age in population: 35.84430766105652
Average age in population: 33.98990768361092
Median age in population: 34.0538489818573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.095
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 38121490
--- Timings ---
Current time: 1529615059711 milliseconds
Total Time:          85.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.9 seconds, 38.3%
Fitness Testing:     41.8 seconds, 48.7%
Report:              11.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 57481.95449999999
Test mean error for best: 28.74098
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 77.7102204206 
Correct output: 17.2828270025  | Program output: 8.2828270025  
Correct output: 23.1304489589  | Program output: 2.0           
Correct output: 137.0785591646 | Program output: 81.0785591646 
Correct output: -36.0917810332 | Program output: 40.9082189668 
Correct output: -62.1419485102 | Program output: 2.0           
Correct output: 17.1520909798  | Program output: 2.0           
Correct output: -9.6087899132  | Program output: 39.3912100868 
Correct output: 75.493217436   | Program output: 53.493217436  
Correct output: 52.2037920383  | Program output: 2.0           
Correct output: -79.8347132576 | Program output: 22.1652867424 
Correct output: 154.815449196  | Program output: 104.815449196 
Correct output: -19.1443327626 | Program output: 2.0           
Correct output: 180.0725301747 | Program output: 110.0725301747
Correct output: -128.3399358578 | Program output: -79.3399358578
Correct output: -20.7768369154 | Program output: 23.2231630846 
Correct output: -106.4972590774 | Program output: -75.4972590774
Correct output: 61.4129516245  | Program output: 72.4129516245 
Correct output: 38.5197606199  | Program output: 8.5197606199  
Correct output: -4.0857969085  | Program output: 2.0           
Correct output: -93.8538349059 | Program output: -26.8538349059
Correct output: 27.7882694945  | Program output: 36.7882694945 
Correct output: -145.332361916 | Program output: -49.332361916 
Correct output: 77.1794883917  | Program output: 50.1794883917 
Correct output: -67.6536129502 | Program output: 21.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap float_tan integer_sub float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc integer_shove float_inc integer_dup float_rot integer_dup float_inc integer_shove float_inc in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_inc integer_shove float_inc float_mod float_div float_inc float_min integer_shove float_inc float_inc float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [74.0 3 9.0 2 21.1304 10 56.0 3 77.0 12 64.1419 11 15.1521 11 49.0 11 22.0 2 50.2038 10 102.0 13 50.0 1 21.1443 13 70.0 1 49.0 3 44.0 11 31.0 3 11.0 2 30.0 1 6.0858 11 67.0 2 9.0 2 96.0 2 27.0 2 89.0 13]
Total: 1294.8583
Mean: 25.897165
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4667.871998
Median total errors in population: 1359.0
Error averages by case: (195.86239970000003 4.824 136.07308590000002 2.898 194.55598359999988 12.827 180.46378570000005 4.888 204.70823349999995 11.772 145.10017480000002 3.681 198.13213070000012 10.835 180.76448860000005 12.044 149.5815616 3.773 184.51136110000002 10.742 226.8469855000001 12.865 177.5480061 3.864 159.83810120000012 4.299 195.06969089999998 4.013 190.77551440000002 5.115 176.7942906 11.509 174.9768959 5.119 154.11149989999998 3.573 153.16734890000004 3.944 172.25474060000005 3.38 202.56144540000008 4.217 150.61552159999994 3.96 229.25416990000016 4.304 153.7352486 3.963 215.59433330000002 12.566)
Error minima by case: (54.0 2 0.0 0 0.6327 8 36.0 2 6.3843 8 0.0 0 0.5386 7 5.5886 7 2.0 1 5.5155 1 18.6157 9 30.0 1 10.3162 1 50.0 1 45.0 2 6.6838 8 27.0 2 4.0 1 2.9058 1 0.9142 1 37.7325 1 2.0 1 89.211 1 7.0 1 5.6157 9)
Average genome size in population (length): 95.153
Average program size in population (points): 96.153
Average percent parens in population: 0.010
Minimum age in population: 32.74641704559326
Maximum age in population: 37.50061285495758
Average age in population: 35.56149417746067
Median age in population: 35.60320919752121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.089
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 40502340
--- Timings ---
Current time: 1529615063677 milliseconds
Total Time:          89.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 38.2%
Fitness Testing:     43.9 seconds, 48.9%
Report:              11.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 55984.6632
Test mean error for best: 27.99233
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 71.7102204206 
Correct output: 17.2828270025  | Program output: 5.1110970271  
Correct output: 23.1304489589  | Program output: 2.0           
Correct output: 137.0785591646 | Program output: 75.0785591646 
Correct output: -36.0917810332 | Program output: 34.9082189668 
Correct output: -62.1419485102 | Program output: 2.0           
Correct output: 17.1520909798  | Program output: 2.0           
Correct output: -9.6087899132  | Program output: 33.3912100868 
Correct output: 75.493217436   | Program output: 47.493217436  
Correct output: 52.2037920383  | Program output: 2.0           
Correct output: -79.8347132576 | Program output: 16.1652867424 
Correct output: 154.815449196  | Program output: 98.815449196  
Correct output: -19.1443327626 | Program output: 2.0           
Correct output: 180.0725301747 | Program output: 104.0725301747
Correct output: -128.3399358578 | Program output: -85.3399358578
Correct output: -20.7768369154 | Program output: 17.2231630846 
Correct output: -106.4972590774 | Program output: -81.4972590774
Correct output: 61.4129516245  | Program output: 66.4129516245 
Correct output: 38.5197606199  | Program output: 5.1185637195  
Correct output: -4.0857969085  | Program output: 2.0           
Correct output: -93.8538349059 | Program output: -32.8538349059
Correct output: 27.7882694945  | Program output: 30.7882694945 
Correct output: -145.332361916 | Program output: -55.332361916 
Correct output: 77.1794883917  | Program output: 44.1794883917 
Correct output: -67.6536129502 | Program output: 15.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_rot} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub integer_mod float_sub integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_rot tagged_67 float_sub float_dup integer_sub integer_sub integer_yankdup float_dup integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_inc integer_shove float_inc float_mod float_div float_inc float_min integer_shove float_inc float_inc float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [80.0 2 12.1717 10 21.1304 10 62.0 3 71.0 11 64.1419 11 15.1521 11 43.0 12 28.0 2 50.2038 10 96.0 13 56.0 3 21.1443 13 76.0 2 43.0 3 38.0 12 25.0 3 5.0 1 33.4012 8 6.0858 11 61.0 2 3.0 2 90.0 2 33.0 2 83.0 13]
Total: 1288.4312
Mean: 25.768623
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4316.078503700001
Median total errors in population: 1358.0
Error averages by case: (182.30887680000006 4.715 122.0085888 2.751 179.0293134999999 12.653 166.6979266000001 4.752 191.37792839999997 11.668 132.4803209000001 3.791 182.21204200000022 10.699 166.96533899999991 12.005 135.21747749999994 3.697 171.30468319999994 10.769 214.37723070000007 12.892 162.80311799999998 3.804 145.36081189999996 4.534 180.66990090000007 3.952 177.45553780000006 5.07 163.4236194 11.449 161.54128210000005 4.977 137.75087879999998 3.364 139.6101063 3.905 156.89603990000006 3.598 189.61643110000006 4.108 134.41544469999997 3.842 216.5771853000001 4.187 139.43719579999996 3.853 203.03722429999996 12.469)
Error minima by case: (37.6807 2 0.0 0 1.8826 2 23.0504 2 4.9814 9 0.0 0 0.1125 1 6.8458 9 1.0 1 30.9559 1 20.0186 2 29.0 1 1.9278 1 49.0 1 32.9814 2 1.8458 8 21.0 2 3.6591 1 9.0 1 1.0858 1 14.9814 1 0.8941 1 14.0186 1 6.0 1 7.0186 3)
Average genome size in population (length): 93.988
Average program size in population (points): 94.988
Average percent parens in population: 0.011
Minimum age in population: 34.53390800952911
Maximum age in population: 38.99639499187469
Average age in population: 37.00506892418861
Median age in population: 37.04491743445396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.103
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 42853440
--- Timings ---
Current time: 1529615067542 milliseconds
Total Time:          93.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.6 seconds, 38.0%
Fitness Testing:     46.0 seconds, 49.1%
Report:              12.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 55043.9611
Test mean error for best: 27.52198
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 71.7102204206 
Correct output: 17.2828270025  | Program output: 4.0           
Correct output: 23.1304489589  | Program output: 4.0           
Correct output: 137.0785591646 | Program output: 75.0785591646 
Correct output: -36.0917810332 | Program output: 32.9082189668 
Correct output: -62.1419485102 | Program output: 4.0           
Correct output: 17.1520909798  | Program output: 4.0           
Correct output: -9.6087899132  | Program output: 31.3912100868 
Correct output: 75.493217436   | Program output: 47.493217436  
Correct output: 52.2037920383  | Program output: 4.0           
Correct output: -79.8347132576 | Program output: 14.1652867424 
Correct output: 154.815449196  | Program output: 98.815449196  
Correct output: -19.1443327626 | Program output: 4.0           
Correct output: 180.0725301747 | Program output: 104.0725301747
Correct output: -128.3399358578 | Program output: -87.3399358578
Correct output: -20.7768369154 | Program output: 15.2231630846 
Correct output: -106.4972590774 | Program output: -83.4972590774
Correct output: 61.4129516245  | Program output: 66.4129516245 
Correct output: 38.5197606199  | Program output: 4.0           
Correct output: -4.0857969085  | Program output: 4.0           
Correct output: -93.8538349059 | Program output: -34.8538349059
Correct output: 27.7882694945  | Program output: 30.7882694945 
Correct output: -145.332361916 | Program output: -57.332361916 
Correct output: 77.1794883917  | Program output: 44.1794883917 
Correct output: -67.6536129502 | Program output: 13.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_rot} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub integer_mod float_sub integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_rot tagged_67 float_sub float_dup integer_sub integer_sub integer_yankdup float_dup integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_dec integer_shove float_inc float_mod float_div float_inc float_min integer_shove float_inc float_inc float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [80.0 2 13.2828 11 19.1304 11 62.0 3 69.0 11 66.1419 12 13.1521 11 41.0 12 28.0 2 48.2038 11 94.0 13 56.0 3 23.1443 13 76.0 2 41.0 3 36.0 12 23.0 3 5.0 1 34.5198 11 8.0858 10 59.0 2 3.0 2 88.0 3 33.0 2 81.0 13]
Total: 1279.6609
Mean: 25.593218
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3777.426734899999
Median total errors in population: 1358.0
Error averages by case: (162.30970340000002 4.354 101.4919395 2.462 151.62458889999942 12.299 146.3280035 4.386 171.09852349999997 11.603 119.36510850000039 4.922 153.41563850000074 10.667 145.93029499999997 11.947 114.56261249999994 3.334 148.8030284000002 10.751 194.32853860000003 12.956 143.89370110000007 3.364 123.57214469999998 5.827 162.09547199999994 3.46 154.53234310000002 4.681 142.00697840000004 11.393 138.15866490000002 4.579 115.69488480000004 2.978 119.6195564 3.444 130.82788550000015 4.731 167.74731690000002 3.697 112.3881144 3.446 194.99464740000016 3.826 118.88394309999998 3.454 182.64510190000001 12.547)
Error minima by case: (1.7102 1 0.0 0 2.3495 2 23.0786 2 36.0918 9 0.0 0 0.4132 1 9.6088 8 2.0 1 17.3628 1 79.8347 8 30.0 1 9.1443 1 38.0725 1 39.0 2 20.7768 9 21.0 2 4.0 1 10.0 1 2.9142 1 57.0 1 2.0 1 86.0 1 7.0 1 67.6536 9)
Average genome size in population (length): 90.361
Average program size in population (points): 91.361
Average percent parens in population: 0.011
Minimum age in population: 35.97765231132507
Maximum age in population: 40.61100536584854
Average age in population: 38.5031945284903
Median age in population: 38.52581617236137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.116
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 45114090
--- Timings ---
Current time: 1529615071415 milliseconds
Total Time:          97.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.0 seconds, 37.9%
Fitness Testing:     48.0 seconds, 49.2%
Report:              12.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 56227.35969999999
Test mean error for best: 28.11368
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 76.7102204206 
Correct output: 17.2828270025  | Program output: 7.2828270025  
Correct output: 23.1304489589  | Program output: 3.0           
Correct output: 137.0785591646 | Program output: 80.0785591646 
Correct output: -36.0917810332 | Program output: 37.9082189668 
Correct output: -62.1419485102 | Program output: 3.0           
Correct output: 17.1520909798  | Program output: 3.0           
Correct output: -9.6087899132  | Program output: 36.3912100868 
Correct output: 75.493217436   | Program output: 52.493217436  
Correct output: 52.2037920383  | Program output: 3.0           
Correct output: -79.8347132576 | Program output: 19.1652867424 
Correct output: 154.815449196  | Program output: 103.815449196 
Correct output: -19.1443327626 | Program output: 3.0           
Correct output: 180.0725301747 | Program output: 109.0725301747
Correct output: -128.3399358578 | Program output: -82.3399358578
Correct output: -20.7768369154 | Program output: 20.2231630846 
Correct output: -106.4972590774 | Program output: -78.4972590774
Correct output: 61.4129516245  | Program output: 71.4129516245 
Correct output: 38.5197606199  | Program output: 7.5197606199  
Correct output: -4.0857969085  | Program output: 3.0           
Correct output: -93.8538349059 | Program output: -29.8538349059
Correct output: 27.7882694945  | Program output: 35.7882694945 
Correct output: -145.332361916 | Program output: -52.332361916 
Correct output: 77.1794883917  | Program output: 49.1794883917 
Correct output: -67.6536129502 | Program output: 18.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_flush} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap float_tan integer_sub float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup integer_yankdup float_flush float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc float_inc integer_shove float_inc integer_dup float_rot integer_dup float_inc integer_shove float_inc in2 float_dup_items integer_yankdup integer_dup integer_dup integer_stackdepth float_inc float_mod float_div float_inc float_min integer_shove float_inc float_inc float_div integer_dup_items float_inc print_float float_inc float_inc print_float float_flush float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [75.0 3 10.0 1 20.1304 10 57.0 3 74.0 11 65.1419 12 14.1521 11 46.0 12 23.0 2 49.2038 11 99.0 12 51.0 2 22.1443 13 71.0 2 46.0 2 41.0 10 28.0 3 10.0 1 31.0 2 7.0858 11 64.0 2 8.0 2 93.0 3 28.0 2 86.0 13]
Total: 1274.8583
Mean: 25.497166
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3589.237708499997
Median total errors in population: 1301.8583
Error averages by case: (163.59929170000007 4.549 98.27488709999999 3.288 123.56380869999849 11.174 147.6233308 4.614 160.80569849999995 11.668 138.28829650000043 9.203 120.61849720000184 10.923 135.3884444 11.828 114.6080814 3.559 139.1958073000007 10.712 184.17745600000003 12.961 144.86760200000006 3.529 114.5935882 10.363 163.47442089999993 3.56 142.09070790000004 4.599 131.42492990000005 11.354 125.50250840000008 4.388 107.13515800000006 3.346 117.21392669999999 3.578 108.25926360000042 8.887 155.48489350000006 3.636 102.73578839999998 3.706 183.07721150000015 3.96 118.8398158 3.738 172.42629409999998 12.845)
Error minima by case: (57.0 2 0.0 0 1.1604 2 39.0 2 36.0918 10 0.0 0 0.6348 2 9.6088 8 5.0 1 30.4076 2 59.282 9 33.0 1 11.1443 1 53.0 1 35.0 2 20.5469 8 17.0 2 0.0 0 11.6113 1 1.0858 1 53.0 1 0.0 0 82.0 1 10.0 1 67.6536 9)
Average genome size in population (length): 81.683
Average program size in population (points): 82.683
Average percent parens in population: 0.012
Minimum age in population: 37.812779545784
Maximum age in population: 42.05580911040306
Average age in population: 40.0716842136234
Median age in population: 40.11625940352678
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.16
Error (vector) diversity:			 0.194
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 47156665
--- Timings ---
Current time: 1529615075148 milliseconds
Total Time:         101.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.4 seconds, 37.9%
Fitness Testing:     49.9 seconds, 49.2%
Report:              12.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 54215.5483
Test mean error for best: 27.10777
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: 1.0           
Correct output: 23.1304489589  | Program output: 1.0           
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 29.9082189668 
Correct output: -62.1419485102 | Program output: 1.0           
Correct output: 17.1520909798  | Program output: 1.0           
Correct output: -9.6087899132  | Program output: 28.3912100868 
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: 1.0           
Correct output: -79.8347132576 | Program output: 11.1652867424 
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: 1.0           
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -90.3399358578
Correct output: -20.7768369154 | Program output: 12.2231630846 
Correct output: -106.4972590774 | Program output: -86.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: 1.0           
Correct output: -4.0857969085  | Program output: 1.0           
Correct output: -93.8538349059 | Program output: -37.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -60.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 10.3463870498 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_rot} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction print_float} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub integer_mod float_sub integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_rot tagged_67 float_sub float_dup integer_sub integer_sub integer_yankdup float_dup integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup_items float_rot in1 float_inc integer_shove float_inc integer_sub integer_yankdup integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_dec integer_shove float_inc float_mod float_div float_inc float_min integer_shove float_inc print_float float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [83.0 3 16.2828 10 22.1304 11 65.0 3 66.0 12 63.1419 12 16.1521 10 38.0 12 31.0 2 51.2038 11 91.0 13 59.0 2 20.1443 12 79.0 2 38.0 3 33.0 11 20.0 2 2.0 1 37.5198 11 5.0858 11 56.0 2 0.0 0 85.0 3 36.0 2 78.0 13]
Total: 1265.6609
Mean: 25.313217
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3144.4891934999896
Median total errors in population: 1292.8583
Error averages by case: (149.2323906 4.277 82.24311170000001 4.032 98.38848479999858 10.704 132.9207271 4.349 144.2233705 11.351 129.10156130000118 10.728 93.77173860000129 10.998 118.39817580000003 11.927 99.5100253 3.354 120.36528490000157 10.676 167.64163630000002 12.898 129.1406197 3.473 94.88568479999996 11.936 147.9741148 3.438 123.25252500000009 4.305 114.07091049999998 11.374 106.50930590000003 4.028 85.99932570000001 2.886 101.57058439999993 4.165 83.49133880000053 10.308 137.2105837 3.367 81.71306969999999 3.447 165.028982 4.022 103.82426410000002 3.41 155.6533775 12.915)
Error minima by case: (9.2898 2 0.0 0 2.4927 2 10.0786 2 13.0 2 2.0 1 2.8099 2 8.2728 8 11.0 1 13.0 2 13.0 2 39.0 1 7.2119 1 25.0725 1 36.0 2 11.1771 2 18.0 2 1.0 1 11.5718 1 0.0858 1 22.1462 1 0.0 0 28.6676 1 8.1795 1 13.0 2)
Average genome size in population (length): 75.961
Average program size in population (points): 76.961
Average percent parens in population: 0.013
Minimum age in population: 39.45167443156242
Maximum age in population: 43.65407507121563
Average age in population: 41.51862835179269
Median age in population: 41.56130940467119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.156
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 49056365
--- Timings ---
Current time: 1529615078768 milliseconds
Total Time:         105.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.8 seconds, 37.9%
Fitness Testing:     51.7 seconds, 49.2%
Report:              13.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 53801.6767
Test mean error for best: 26.90084
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: 0.0           
Correct output: 23.1304489589  | Program output: 0.0           
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 27.9082189668 
Correct output: -62.1419485102 | Program output: 0.0           
Correct output: 17.1520909798  | Program output: 0.0           
Correct output: -9.6087899132  | Program output: 26.3912100868 
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: 0.0           
Correct output: -79.8347132576 | Program output: 9.1652867424  
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: 0.0           
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 10.2231630846 
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: 0.0           
Correct output: -4.0857969085  | Program output: 0.0           
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 8.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_inc} {:instruction print_float} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction integer_inc} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop integer_swap float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_yankdup integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_dec integer_shove float_inc float_mod float_div float_inc print_float integer_dec float_inc float_inc float_div float_inc float_inc print_float float_inc float_rot integer_inc 40.42559520246678 float_dup_times)
Errors: [85.0 3 17.2828 11 23.1304 11 67.0 3 64.0 12 62.1419 12 17.1521 11 36.0 12 33.0 2 52.2038 11 89.0 12 61.0 3 19.1443 13 81.0 3 36.0 2 31.0 11 18.0 3 0.0 0 38.5198 11 4.0858 11 54.0 2 2.0 1 83.0 3 38.0 2 76.0 12]
Total: 1264.6609
Mean: 25.293219
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3083.362240399993
Median total errors in population: 1284.8583
Error averages by case: (149.5871435 4.122 81.70315270000008 5.225 97.83537359999939 10.857 133.6755540999999 4.198 137.2988414 11.148 129.42922420000147 10.937 93.16008760000095 11.054 111.51222770000001 12.037 99.91065919999996 3.324 120.22386250000187 10.932 160.97229340000007 12.728 129.0067597000001 3.69 93.87646369999995 11.869 148.9458401999999 3.46 117.88337640000005 4.142 107.28627920000002 11.539 100.97298700000006 4.172 82.5676725 2.685 101.3958820999998 5.178 82.20825910000053 10.144 131.62687219999992 3.333 78.3418437 3.325 159.66425130000005 4.069 105.10478719999995 3.291 148.91654620000003 12.797)
Error minima by case: (11.2898 2 5.0 1 1.8406 7 10.0786 2 0.4888 9 5.0 1 3.6175 9 8.6226 9 14.6619 1 35.3057 8 16.895 9 35.7679 1 6.7942 1 25.0725 1 34.0 2 20.7768 9 16.0 2 0.0 0 2.1412 1 0.501 1 22.1462 1 0.0 0 28.6676 1 8.1795 1 4.7139 9)
Average genome size in population (length): 73.816
Average program size in population (points): 74.816
Average percent parens in population: 0.013
Minimum age in population: 40.55663028359413
Maximum age in population: 45.29866387695074
Average age in population: 42.97549404577911
Median age in population: 43.00557269901037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.165
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 50903040
--- Timings ---
Current time: 1529615082182 milliseconds
Total Time:         108.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.1 seconds, 37.9%
Fitness Testing:     53.4 seconds, 49.2%
Report:              13.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 53849.04520000001
Test mean error for best: 26.92452
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 67.7102204206 
Correct output: 17.2828270025  | Program output: -0.2828270025 
Correct output: 23.1304489589  | Program output: -1.0          
Correct output: 137.0785591646 | Program output: 71.0785591646 
Correct output: -36.0917810332 | Program output: 28.9082189668 
Correct output: -62.1419485102 | Program output: -1.0          
Correct output: 17.1520909798  | Program output: -1.0          
Correct output: -9.6087899132  | Program output: 27.3912100868 
Correct output: 75.493217436   | Program output: 43.493217436  
Correct output: 52.2037920383  | Program output: -1.0          
Correct output: -79.8347132576 | Program output: 10.1652867424 
Correct output: 154.815449196  | Program output: 94.815449196  
Correct output: -19.1443327626 | Program output: -1.0          
Correct output: 180.0725301747 | Program output: 100.0725301747
Correct output: -128.3399358578 | Program output: -91.3399358578
Correct output: -20.7768369154 | Program output: 11.2231630846 
Correct output: -106.4972590774 | Program output: -87.4972590774
Correct output: 61.4129516245  | Program output: 62.4129516245 
Correct output: 38.5197606199  | Program output: -0.0395212398 
Correct output: -4.0857969085  | Program output: -1.0          
Correct output: -93.8538349059 | Program output: -38.8538349059
Correct output: 27.7882694945  | Program output: 26.7882694945 
Correct output: -145.332361916 | Program output: -61.332361916 
Correct output: 77.1794883917  | Program output: 40.1794883917 
Correct output: -67.6536129502 | Program output: 9.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_yank} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_dec} {:instruction float_dup} {:instruction integer_flush} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction in2} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_min integer_max integer_pop integer_swap integer_yank float_yank float_dup tagged_67 float_sub float_dup tagged_67 tagged_67 float_sub float_dup tagged_67 float_dec float_dup integer_flush float_dup_times integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup float_rot in1 float_inc integer_shove float_inc integer_sub float_inc integer_shove in2 in2 float_dup_items integer_yankdup integer_dup integer_dup integer_pop float_inc integer_shove integer_yank float_mod float_div print_float float_min integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_shove float_inc float_inc float_min float_inc float_inc print_float float_inc float_rot in2 40.42559520246678 float_dup_times)
Errors: [84.0 3 17.5657 2 24.1304 11 66.0 3 65.0 12 61.1419 11 18.1521 11 37.0 12 32.0 2 53.2038 11 90.0 13 60.0 2 18.1443 11 80.0 1 37.0 3 32.0 12 19.0 3 1.0 1 38.5593 10 3.0858 10 55.0 2 1.0 1 84.0 3 37.0 2 77.0 12]
Total: 1254.9832999999999
Mean: 25.099667
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3283.359432099999
Median total errors in population: 1278.8583
Error averages by case: (159.2515021 4.266 95.22034750000022 5.964 110.92244199999818 10.99 143.08081209999992 4.411 138.8058079 11.261 140.3221100000002 10.963 105.95650500000207 11.127 113.06066560000001 12.011 110.45395079999997 3.419 132.8405371000015 11.088 162.25569680000004 12.679 139.41279610000004 3.99 105.83448099999994 11.814 157.86218960000002 3.624 120.66477340000009 4.15 108.72554210000001 11.697 104.09111790000007 4.141 92.4574745 2.76 113.5980636999995 5.988 95.14365710000054 9.979 134.56154149999998 3.35 88.25051389999996 3.372 162.22196890000006 4.024 114.72923989999997 3.539 150.2556956 12.773)
Error minima by case: (4.2898 2 6.0 1 9.3565 7 6.0786 2 3.6407 9 6.0 1 1.1825 8 6.1047 9 12.4932 1 42.1197 8 14.6457 9 35.8154 1 9.1443 1 21.0725 1 34.0 2 11.1047 9 16.0 2 0.0 0 27.0 1 0.0858 1 15.1462 1 0.0 0 21.6676 2 4.1795 1 1.6457 9)
Average genome size in population (length): 73.574
Average program size in population (points): 74.574
Average percent parens in population: 0.014
Minimum age in population: 41.70252802968025
Maximum age in population: 47.00830866023898
Average age in population: 44.53099486546405
Median age in population: 44.60941646341234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.163
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 52742840
--- Timings ---
Current time: 1529615085801 milliseconds
Total Time:         111.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.4 seconds, 37.9%
Fitness Testing:     55.1 seconds, 49.2%
Report:              14.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 53895.66019999999
Test mean error for best: 26.94783
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 65.7102204206 
Correct output: 17.2828270025  | Program output: -0.2828270025 
Correct output: 23.1304489589  | Program output: -2.0          
Correct output: 137.0785591646 | Program output: 69.0785591646 
Correct output: -36.0917810332 | Program output: 27.9082189668 
Correct output: -62.1419485102 | Program output: -2.0          
Correct output: 17.1520909798  | Program output: -2.0          
Correct output: -9.6087899132  | Program output: 26.3912100868 
Correct output: 75.493217436   | Program output: 41.493217436  
Correct output: 52.2037920383  | Program output: -2.0          
Correct output: -79.8347132576 | Program output: 9.1652867424  
Correct output: 154.815449196  | Program output: 92.815449196  
Correct output: -19.1443327626 | Program output: -2.0          
Correct output: 180.0725301747 | Program output: 98.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 10.2231630846 
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 60.4129516245 
Correct output: 38.5197606199  | Program output: -0.5197606199 
Correct output: -4.0857969085  | Program output: -2.0          
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 24.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 38.1794883917 
Correct output: -67.6536129502 | Program output: 8.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_rot} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_rot} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction in2} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub integer_mod float_sub integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_rot tagged_67 float_sub float_dup integer_sub integer_sub integer_yankdup float_dup integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup_items float_rot in1 integer_sub float_inc integer_shove in2 in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_inc integer_shove integer_yank float_mod float_div print_float float_min integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_shove float_inc float_inc float_min float_inc float_inc print_float float_inc float_rot in2 40.42559520246678 float_dup_times)
Errors: [86.0 2 17.5657 2 25.1304 11 68.0 3 64.0 12 60.1419 10 19.1521 11 36.0 12 34.0 2 54.2038 10 89.0 12 62.0 3 17.1443 12 82.0 2 36.0 2 31.0 11 18.0 3 1.0 1 39.0395 2 2.0858 10 54.0 2 3.0 1 83.0 3 39.0 2 76.0 12]
Total: 1249.4634999999998
Mean: 24.98927
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3205.896283
Median total errors in population: 1273.4312
Error averages by case: (160.01258070000006 4.195 96.17886410000021 7.327 108.34941579999844 11.101 143.49796599999993 4.091 131.65727230000002 11.456 138.8093314000007 10.93 103.61767920000182 11.174 105.72521680000003 11.943 111.23831999999999 3.136 132.02619860000178 11.002 155.2098723 12.826 139.74635930000005 3.663 104.25575849999993 11.977 157.7763718 3.238 112.69959400000009 4.035 101.28014750000003 11.779 95.82694810000008 3.932 87.97221820000003 2.436 115.5437562999995 7.476 92.93043550000057 10.138 127.12292089999994 3.204 86.9094689 2.74 154.98742920000004 3.961 115.53858989999999 3.27 143.10556770000002 12.848)
Error minima by case: (2.2898 2 5.8411 1 0.9019 7 10.0786 2 8.3071 8 7.0 1 2.0599 9 9.6088 9 16.4932 1 28.0974 9 16.6929 8 39.8154 1 13.1443 1 25.0725 1 34.0 2 20.7768 10 16.0 2 0.0 0 13.9427 1 0.0858 1 22.1462 1 0.0 0 28.6676 2 8.1795 1 3.6929 10)
Average genome size in population (length): 72.43
Average program size in population (points): 73.43
Average percent parens in population: 0.014
Minimum age in population: 42.70252802968025
Maximum age in population: 48.44442517776042
Average age in population: 46.12328665568493
Median age in population: 46.15346354106441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.16
Error (vector) diversity:			 0.191
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 54554190
--- Timings ---
Current time: 1529615089292 milliseconds
Total Time:         115.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.8 seconds, 38.0%
Fitness Testing:     56.7 seconds, 49.1%
Report:              14.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 53895.66019999999
Test mean error for best: 26.94783
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 65.7102204206 
Correct output: 17.2828270025  | Program output: -0.2828270025 
Correct output: 23.1304489589  | Program output: -2.0          
Correct output: 137.0785591646 | Program output: 69.0785591646 
Correct output: -36.0917810332 | Program output: 27.9082189668 
Correct output: -62.1419485102 | Program output: -2.0          
Correct output: 17.1520909798  | Program output: -2.0          
Correct output: -9.6087899132  | Program output: 26.3912100868 
Correct output: 75.493217436   | Program output: 41.493217436  
Correct output: 52.2037920383  | Program output: -2.0          
Correct output: -79.8347132576 | Program output: 9.1652867424  
Correct output: 154.815449196  | Program output: 92.815449196  
Correct output: -19.1443327626 | Program output: -2.0          
Correct output: 180.0725301747 | Program output: 98.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 10.2231630846 
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 60.4129516245 
Correct output: 38.5197606199  | Program output: -0.5197606199 
Correct output: -4.0857969085  | Program output: -2.0          
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 24.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 38.1794883917 
Correct output: -67.6536129502 | Program output: 8.3463870498  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_rot} {:instruction tagged_67} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_rot} {:instruction float_max} {:instruction float_rot} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction tag_integer_730} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction float_rot} {:instruction in1} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction float_rot} {:instruction in2} {:instruction 40.42559520246678} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub integer_mod float_sub integer_pop integer_swap integer_yank integer_dec float_dup tagged_67 float_sub float_dup tagged_67 float_sub float_dup integer_dec float_dup tagged_67 float_rot tagged_67 float_sub float_dup integer_sub integer_sub integer_yankdup float_dup integer_rot float_max float_rot float_shove integer_stackdepth integer_add float_mod tag_integer_730 integer_sub integer_yankdup integer_dup_items float_rot in1 integer_sub float_inc integer_shove in2 in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc float_inc integer_shove integer_yank float_mod float_div print_float float_min integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_shove float_inc float_inc float_min float_inc float_inc print_float float_inc float_rot in2 40.42559520246678 float_dup_times)
Errors: [86.0 2 17.5657 2 25.1304 11 68.0 3 64.0 12 60.1419 10 19.1521 11 36.0 12 34.0 2 54.2038 10 89.0 12 62.0 3 17.1443 12 82.0 2 36.0 2 31.0 11 18.0 3 1.0 1 39.0395 2 2.0858 10 54.0 2 3.0 1 83.0 3 39.0 2 76.0 12]
Total: 1249.4634999999998
Mean: 24.98927
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3030.6359133000055
Median total errors in population: 1267.6609
Error averages by case: (154.90273520000002 4.175 88.99223710000032 8.701 100.90226349999865 11.171 138.29063369999994 4.019 125.7900422 11.765 129.1407174000013 10.916 96.09086080000137 10.94 99.7014596 11.922 105.49568440000002 3.04 123.97587600000163 10.983 149.5038038 12.86 134.01121710000007 3.692 94.69291119999995 11.686 153.17562060000003 3.282 104.61409650000006 3.947 95.34259790000002 11.645 87.638098 3.729 79.77304680000002 2.255 108.55949159999943 9.046 83.36514940000056 10.176 119.4580731 3.027 77.2006253 2.379 147.47660900000002 3.972 109.83723229999998 3.246 137.37083080000002 12.76)
Error minima by case: (74.0 2 5.978 1 11.8257 8 56.0 2 10.3547 9 9.0 1 5.8473 9 8.3914 8 22.0 1 0.953 8 8.0753 11 50.0 1 12.1443 1 70.0 1 34.0 2 16.4591 8 16.0 2 0.0 0 27.215 1 0.0858 1 52.0 1 0.0 0 81.0 2 27.0 1 21.0753 9)
Average genome size in population (length): 72.423
Average program size in population (points): 73.423
Average percent parens in population: 0.014
Minimum age in population: 44.76203348487616
Maximum age in population: 50.11243226239458
Average age in population: 47.57106675814139
Median age in population: 47.5997831185814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.152
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 56365990
--- Timings ---
Current time: 1529615092850 milliseconds
Total Time:         119.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.2 seconds, 38.0%
Fitness Testing:     58.4 seconds, 49.0%
Report:              15.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 49697.33679999998
Test mean error for best: 24.84867
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: 4.3680295664  
Correct output: 23.1304489589  | Program output: 4.0149544895  
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 4.0           
Correct output: -62.1419485102 | Program output: 4.0124778598  
Correct output: 17.1520909798  | Program output: 4.0128455602  
Correct output: -9.6087899132  | Program output: 4.0           
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: 4.0420235023  
Correct output: -79.8347132576 | Program output: 4.0           
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: 4.0155898418  
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -90.3399358578
Correct output: -20.7768369154 | Program output: 4.0           
Correct output: -106.4972590774 | Program output: -86.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: 4.4031868891  
Correct output: -4.0857969085  | Program output: 4.0151318445  
Correct output: -93.8538349059 | Program output: -37.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -60.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 4.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc float_div float_inc float_inc print_float float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div)
Errors: [83.0 3 12.9148 11 19.1155 8 65.0 3 40.0918 12 66.1544 11 13.1392 11 13.6088 11 31.0 2 48.1618 10 83.8347 13 59.0 2 23.1599 13 79.0 2 38.0 3 24.7768 13 20.0 2 2.0 1 34.1166 11 8.1009 8 56.0 2 0.0 0 85.0 3 36.0 2 71.6536 12]
Total: 1181.8288000000002
Mean: 23.636576
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3181.3389389000045
Median total errors in population: 1263.8583
Error averages by case: (167.28613930000006 4.126 103.78456380000057 7.899 114.84213319999814 11.288 151.72465459999995 4.154 118.48869919999996 11.845 144.30674059999998 11.102 110.35023640000193 11.125 92.16385210000001 11.974 118.96135449999994 3.166 137.81972070000114 11.162 142.27712820000005 12.799 146.5211078000001 3.753 108.93722819999995 11.646 165.88745699999996 3.364 97.03318740000005 3.833 87.76362570000003 11.668 79.87484140000004 3.782 91.4798997 2.256 123.05574939999873 8.705 97.00647700000054 10.335 112.09460819999994 2.946 90.82831379999999 2.354 140.32370179999998 3.941 123.47849799999996 3.327 129.92002090000003 12.579)
Error minima by case: (57.1893 2 3.223 1 14.7489 7 55.0 2 33.2746 10 9.0 1 10.3235 8 9.6088 9 10.6344 1 42.0135 9 62.9003 9 38.9942 2 12.1443 1 69.0 1 33.0 2 4.9003 8 15.0 2 0.0 0 22.6113 1 0.0858 1 51.0 1 0.0 0 80.0 2 26.0 1 49.9003 7)
Average genome size in population (length): 72.871
Average program size in population (points): 73.871
Average percent parens in population: 0.014
Minimum age in population: 46.65347614698112
Maximum age in population: 51.27628778084181
Average age in population: 49.15316762725823
Median age in population: 49.17736828187481
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.132
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 58188840
--- Timings ---
Current time: 1529615096316 milliseconds
Total Time:         122.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.6 seconds, 38.0%
Fitness Testing:     60.0 seconds, 49.0%
Report:              15.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 49697.33679999998
Test mean error for best: 24.84867
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: 4.3680295664  
Correct output: 23.1304489589  | Program output: 4.0149544895  
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 4.0           
Correct output: -62.1419485102 | Program output: 4.0124778598  
Correct output: 17.1520909798  | Program output: 4.0128455602  
Correct output: -9.6087899132  | Program output: 4.0           
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: 4.0420235023  
Correct output: -79.8347132576 | Program output: 4.0           
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: 4.0155898418  
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -90.3399358578
Correct output: -20.7768369154 | Program output: 4.0           
Correct output: -106.4972590774 | Program output: -86.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: 4.4031868891  
Correct output: -4.0857969085  | Program output: 4.0151318445  
Correct output: -93.8538349059 | Program output: -37.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -60.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 4.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc float_div float_inc float_inc print_float float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div)
Errors: [83.0 3 12.9148 11 19.1155 8 65.0 3 40.0918 12 66.1544 11 13.1392 11 13.6088 11 31.0 2 48.1618 10 83.8347 13 59.0 2 23.1599 13 79.0 2 38.0 3 24.7768 13 20.0 2 2.0 1 34.1166 11 8.1009 8 56.0 2 0.0 0 85.0 3 36.0 2 71.6536 12]
Total: 1181.8288000000002
Mean: 23.636576
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3504.3286226000023
Median total errors in population: 1254.9832999999999
Error averages by case: (182.75019100000003 4.132 117.19338730000158 5.673 129.72884309999773 11.366 166.80331869999998 4.237 126.73758909999998 11.871 158.35662149999928 10.669 124.98184090000274 11.257 100.71640420000001 11.872 134.67036309999997 3.247 152.66110550000028 11.032 150.87566510000005 12.753 162.54443770000003 3.955 123.47918209999992 11.306 180.3955557 3.341 107.96121410000002 4.039 96.7630703 11.785 91.04095190000002 4.167 109.06359409999999 2.557 136.13619459999893 7.222 113.01177110000057 10.016 121.74694949999994 3.299 106.80236629999999 2.592 149.9318814 4.207 138.63015079999997 3.525 138.79097350000004 12.435)
Error minima by case: (15.2898 2 4.0 1 4.0 1 6.0786 2 4.0 1 9.0 2 4.0 2 4.0 1 12.4932 1 4.0 1 4.0 1 35.8154 2 5.1039 1 21.0725 1 33.0 1 4.0 2 15.0 2 0.0 0 4.0 1 0.0858 1 15.1462 1 0.0 0 21.6676 2 4.1795 1 4.0 1)
Average genome size in population (length): 76.67
Average program size in population (points): 77.67
Average percent parens in population: 0.013
Minimum age in population: 47.99039924610406
Maximum age in population: 53.04654662124813
Average age in population: 50.76444281938171
Median age in population: 50.79311914887512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.155
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 60106115
--- Timings ---
Current time: 1529615099998 milliseconds
Total Time:         126.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 38.0%
Fitness Testing:     61.9 seconds, 49.0%
Report:              16.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 49697.33679999998
Test mean error for best: 24.84867
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 68.7102204206 
Correct output: 17.2828270025  | Program output: 4.3680295664  
Correct output: 23.1304489589  | Program output: 4.0149544895  
Correct output: 137.0785591646 | Program output: 72.0785591646 
Correct output: -36.0917810332 | Program output: 4.0           
Correct output: -62.1419485102 | Program output: 4.0124778598  
Correct output: 17.1520909798  | Program output: 4.0128455602  
Correct output: -9.6087899132  | Program output: 4.0           
Correct output: 75.493217436   | Program output: 44.493217436  
Correct output: 52.2037920383  | Program output: 4.0420235023  
Correct output: -79.8347132576 | Program output: 4.0           
Correct output: 154.815449196  | Program output: 95.815449196  
Correct output: -19.1443327626 | Program output: 4.0155898418  
Correct output: 180.0725301747 | Program output: 101.0725301747
Correct output: -128.3399358578 | Program output: -90.3399358578
Correct output: -20.7768369154 | Program output: 4.0           
Correct output: -106.4972590774 | Program output: -86.4972590774
Correct output: 61.4129516245  | Program output: 63.4129516245 
Correct output: 38.5197606199  | Program output: 4.4031868891  
Correct output: -4.0857969085  | Program output: 4.0151318445  
Correct output: -93.8538349059 | Program output: -37.8538349059
Correct output: 27.7882694945  | Program output: 27.7882694945 
Correct output: -145.332361916 | Program output: -60.332361916 
Correct output: 77.1794883917  | Program output: 41.1794883917 
Correct output: -67.6536129502 | Program output: 4.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tag_float_424} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add tag_float_424 integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc float_div float_inc float_inc print_float float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div)
Errors: [83.0 3 12.9148 11 19.1155 8 65.0 3 40.0918 12 66.1544 11 13.1392 11 13.6088 11 31.0 2 48.1618 10 83.8347 13 59.0 2 23.1599 13 79.0 2 38.0 3 24.7768 13 20.0 2 2.0 1 34.1166 11 8.1009 8 56.0 2 0.0 0 85.0 3 36.0 2 71.6536 12]
Total: 1181.8288000000002
Mean: 23.636576
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3422.8150137999887
Median total errors in population: 1249.4634999999998
Error averages by case: (178.8938304 3.598 115.75228640000142 4.29 124.94310359999815 11.309 162.8077969 4.077 125.68153339999995 11.982 154.5338650999996 10.422 119.89105040000214 11.347 99.65551660000006 11.916 131.2461575 3.099 149.17616560000027 10.656 150.1010191000001 12.412 158.212907 4.081 117.75782829999989 11.778 176.44232790000004 3.33 106.49140070000009 3.63 95.92163570000008 11.527 89.50974730000004 4.178 103.4307181 2.425 134.78416039999965 4.516 105.1061812000006 10.063 120.72732259999992 3.255 103.0975701 2.411 148.90022320000003 4.167 135.61935230000003 3.336 138.01931400000004 12.307)
Error minima by case: (19.2898 2 4.1399 1 10.8043 2 2.0786 2 21.2621 8 15.0 1 10.1392 2 9.3914 8 8.4932 1 39.8057 2 74.9991 9 31.8154 2 11.6161 2 17.0725 1 33.0 2 17.4591 9 15.0 2 0.0 0 31.1166 2 0.0858 1 51.0 1 0.0 0 80.0 2 0.1795 1 67.1809 9)
Average genome size in population (length): 77.665
Average program size in population (points): 78.665
Average percent parens in population: 0.013
Minimum age in population: 50.01981546636671
Maximum age in population: 54.21819475991651
Average age in population: 52.22070819632505
Median age in population: 52.23700011859182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.112
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 62048290
--- Timings ---
Current time: 1529615103550 milliseconds
Total Time:         129.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 38.0%
Fitness Testing:     63.7 seconds, 49.1%
Report:              16.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 49621.60899999999
Test mean error for best: 24.81080
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: 2.3680295664  
Correct output: 23.1304489589  | Program output: 2.0149544895  
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 2.0124778598  
Correct output: 17.1520909798  | Program output: 2.0128455602  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: 2.0420235023  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: 2.0155898418  
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: 2.4031868891  
Correct output: -4.0857969085  | Program output: 2.0151318445  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_dec integer_fromfloat float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [85.0 3 14.9148 11 21.1155 7 67.0 3 38.0918 12 64.1544 10 15.1392 11 11.6088 11 33.0 2 50.1618 9 81.8347 13 61.0 3 21.1599 13 81.0 3 36.0 2 22.7768 12 18.0 3 0.0 0 36.1166 11 6.1009 9 54.0 2 2.0 1 83.0 3 38.0 2 69.6536 12]
Total: 1178.8288000000002
Mean: 23.576576
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3032.6102470999876
Median total errors in population: 1249.4634999999998
Error averages by case: (164.9777663 3.43 97.40275230000077 5.439 109.23854349999888 10.99 148.61217269999995 4.052 107.84427269999962 12.055 138.00705900000068 10.196 104.36560090000151 11.314 81.73521360000025 11.866 116.28486999999997 3.112 132.73382770000163 10.493 135.0913877000006 12.345 144.16950240000008 3.852 102.20309039999981 11.821 162.71573489999994 3.212 91.70107530000004 3.381 80.10509400000022 11.603 74.46578150000006 3.861 87.71660210000002 2.289 117.03828549999915 5.473 90.13602910000053 9.651 106.31247549999993 3.027 86.3985759 2.165 134.72274009999998 3.973 120.71529679999999 3.233 122.95849720000041 12.125)
Error minima by case: (78.0 2 2.4655 2 8.8043 2 60.0 2 2.0 1 9.1581 1 10.1392 2 2.0 1 26.0 1 27.4076 2 2.0 1 54.0 2 0.5704 1 74.0 1 33.0 2 2.0 2 15.0 2 0.0 0 25.4077 2 0.0858 1 40.87 1 0.0 0 80.0 2 31.0 1 2.0 1)
Average genome size in population (length): 76.44
Average program size in population (points): 77.44
Average percent parens in population: 0.013
Minimum age in population: 51.23802813328803
Maximum age in population: 55.59122067128192
Average age in population: 53.56085234711855
Median age in population: 53.59277210672735
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.108
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 63960015
--- Timings ---
Current time: 1529615107232 milliseconds
Total Time:         133.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 38.0%
Fitness Testing:     65.5 seconds, 49.1%
Report:              17.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 49621.60899999999
Test mean error for best: 24.81080
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: 2.3680295664  
Correct output: 23.1304489589  | Program output: 2.0149544895  
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 2.0124778598  
Correct output: 17.1520909798  | Program output: 2.0128455602  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: 2.0420235023  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: 2.0155898418  
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: 2.4031868891  
Correct output: -4.0857969085  | Program output: 2.0151318445  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_dec integer_fromfloat float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [85.0 3 14.9148 11 21.1155 7 67.0 3 38.0918 12 64.1544 10 15.1392 11 11.6088 11 33.0 2 50.1618 9 81.8347 13 61.0 3 21.1599 13 81.0 3 36.0 2 22.7768 12 18.0 3 0.0 0 36.1166 11 6.1009 9 54.0 2 2.0 1 83.0 3 38.0 2 69.6536 12]
Total: 1178.8288000000002
Mean: 23.576576
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2565.943414999994
Median total errors in population: 1191.2277000000001
Error averages by case: (141.92583960000002 3.923 72.97016309999955 9.012 85.62651169999971 9.747 125.09649569999992 4.113 88.91740099999949 12.001 115.20164340000017 10.143 81.06899890000015 11.066 63.14478020000082 11.392 91.49104909999994 3.12 108.37720170000125 10.325 124.7922610000018 12.781 121.07256880000008 3.515 81.48534339999952 11.718 140.11827099999994 3.226 84.45293120000004 3.994 68.7259204 12.459 67.02622540000002 3.689 63.98874980000001 2.342 92.94437129999947 9.067 70.57758509999984 8.507 98.48973069999988 3.18 61.399917 1.85 127.52155899999998 4.15 95.97709119999995 3.25 112.87880530000085 12.102)
Error minima by case: (78.0 2 8.5657 1 0.5073 2 59.1106 2 28.9759 9 9.9875 2 0.7476 2 3.1244 7 26.0 1 22.4076 2 2.6712 10 54.0 2 1.4378 1 74.0 1 34.0 2 1.705 9 16.0 2 0.0 0 29.0048 2 1.0858 1 25.1636 1 0.0 0 3.8364 2 31.0 1 9.5099 9)
Average genome size in population (length): 74.601
Average program size in population (points): 75.601
Average percent parens in population: 0.013
Minimum age in population: 52.23802813328803
Maximum age in population: 56.92181565309875
Average age in population: 54.91315596369321
Median age in population: 54.94582173075469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.121
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 65825640
--- Timings ---
Current time: 1529615110765 milliseconds
Total Time:         136.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.0 seconds, 38.0%
Fitness Testing:     67.2 seconds, 49.0%
Report:              17.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 49621.60899999999
Test mean error for best: 24.81080
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: 2.3680295664  
Correct output: 23.1304489589  | Program output: 2.0149544895  
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 2.0124778598  
Correct output: 17.1520909798  | Program output: 2.0128455602  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: 2.0420235023  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: 2.0155898418  
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: 2.4031868891  
Correct output: -4.0857969085  | Program output: 2.0151318445  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_sub float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_dec integer_fromfloat float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [85.0 3 14.9148 11 21.1155 7 67.0 3 38.0918 12 64.1544 10 15.1392 11 11.6088 11 33.0 2 50.1618 9 81.8347 13 61.0 3 21.1599 13 81.0 3 36.0 2 22.7768 12 18.0 3 0.0 0 36.1166 11 6.1009 9 54.0 2 2.0 1 83.0 3 38.0 2 69.6536 12]
Total: 1178.8288000000002
Mean: 23.576576
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2167.84190580001
Median total errors in population: 1181.8288000000002
Error averages by case: (123.74429340000007 4.127 52.251028099999274 10.804 65.79885069999996 8.766 107.9009542999999 4.151 73.46527870000014 11.951 99.16877159999966 10.463 60.154798399999265 11.031 47.57598200000097 11.159 71.79279019999991 3.167 89.2810733000011 10.293 113.46420060000229 12.983 102.82800610000011 3.339 64.10551559999928 12.078 122.99684199999992 3.225 76.61545740000001 3.878 56.41573819999973 12.861 58.17025120000003 3.254 45.299058500000015 2.367 72.60952260000013 10.797 52.13394199999939 8.157 90.78620239999992 2.92 40.6616638 1.751 119.78954559999998 3.861 76.39248279999994 3.277 101.6956563000013 12.084)
Error minima by case: (58.7605 2 4.1826 1 12.8043 7 61.0 2 36.0918 10 10.9875 2 8.5317 9 9.6088 10 27.0 1 5.98 8 79.8347 9 45.9261 2 0.5704 2 75.0 1 34.0 2 20.2082 9 16.0 2 0.0 0 24.9656 1 2.0858 1 52.0 1 0.0 0 81.0 2 32.0 1 67.6536 10)
Average genome size in population (length): 74.397
Average program size in population (points): 75.397
Average percent parens in population: 0.013
Minimum age in population: 53.95931597475283
Maximum age in population: 58.1461205221276
Average age in population: 56.39394755643602
Median age in population: 56.47822268967866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.114
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 67686065
--- Timings ---
Current time: 1529615114291 milliseconds
Total Time:         140.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.4 seconds, 38.0%
Fitness Testing:     68.9 seconds, 49.0%
Report:              18.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 49621.60899999999
Test mean error for best: 24.81080
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: 2.3680295664  
Correct output: 23.1304489589  | Program output: 2.0149544895  
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 2.0124778598  
Correct output: 17.1520909798  | Program output: 2.0128455602  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: 2.0420235023  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: 2.0155898418  
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: 2.4031868891  
Correct output: -4.0857969085  | Program output: 2.0151318445  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction -30.992180209735835} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction float_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sub integer_pop integer_stackdepth integer_sub float_tan integer_max integer_pop -30.992180209735835 integer_sub float_dec float_yankdup float_add integer_add float_sin float_min float_max integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_dup integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc print_float float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div)
Errors: [85.0 3 14.9148 11 21.1155 7 67.0 3 38.0918 12 64.1544 10 15.1392 11 11.6088 11 33.0 2 50.1618 9 81.8347 13 61.0 3 21.1599 13 81.0 3 36.0 2 22.7768 12 18.0 3 0.0 0 36.1166 11 6.1009 9 54.0 2 2.0 1 83.0 3 38.0 2 69.6536 12]
Total: 1178.8288000000002
Mean: 23.576576
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2122.9066779000077
Median total errors in population: 1180.8288000000002
Error averages by case: (124.85377530000005 3.976 52.489522199999385 10.888 65.10414459999994 8.523 107.67341159999991 4.069 69.3358664000003 11.703 96.33425769999968 10.263 60.411745399999326 10.955 43.02760990000089 11.186 72.49523069999992 3.124 88.33644980000108 10.214 110.35966840000222 12.967 104.73261460000013 3.459 61.82509719999936 11.868 123.75662879999994 2.979 71.0396121 3.831 52.16382159999973 12.737 53.23443620000002 3.733 43.50676540000002 2.182 72.2600486 10.778 51.35864799999939 8.487 85.39374589999993 2.996 40.543940600000006 2.112 115.17075179999995 3.934 77.00974609999994 3.209 98.22713900000129 12.089)
Error minima by case: (78.0 2 1.2527 1 9.5565 7 60.0 2 7.4428 9 4.482 2 1.3825 8 9.6088 8 26.0 2 19.0609 9 51.1857 9 54.0 2 10.4249 2 74.0 1 34.0 2 7.8722 9 16.0 2 0.0 0 29.1166 2 0.0858 1 52.0 2 0.0 0 81.0 2 31.0 1 39.0046 8)
Average genome size in population (length): 76.553
Average program size in population (points): 77.553
Average percent parens in population: 0.013
Minimum age in population: 54.95931597475283
Maximum age in population: 59.66450338394134
Average age in population: 57.87257030612517
Median age in population: 57.89448626209378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.134
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 69599940
--- Timings ---
Current time: 1529615117755 milliseconds
Total Time:         144.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 38.0%
Fitness Testing:     70.6 seconds, 49.1%
Report:              18.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 49621.60899999999
Test mean error for best: 24.81080
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 66.7102204206 
Correct output: 17.2828270025  | Program output: 2.3680295664  
Correct output: 23.1304489589  | Program output: 2.0149544895  
Correct output: 137.0785591646 | Program output: 70.0785591646 
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 2.0124778598  
Correct output: 17.1520909798  | Program output: 2.0128455602  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 42.493217436  
Correct output: 52.2037920383  | Program output: 2.0420235023  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 93.815449196  
Correct output: -19.1443327626 | Program output: 2.0155898418  
Correct output: 180.0725301747 | Program output: 99.0725301747 
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 61.4129516245 
Correct output: 38.5197606199  | Program output: 2.4031868891  
Correct output: -4.0857969085  | Program output: 2.0151318445  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 25.7882694945 
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 39.1794883917 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_sub} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction -30.992180209735835} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction float_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sub integer_pop float_dup integer_sub float_tan integer_max integer_pop -30.992180209735835 integer_sub float_dec float_yankdup float_add integer_add float_sin float_min float_max integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_dup integer_dup_items float_mod in1 float_rot integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc print_float float_inc integer_sub integer_yankdup integer_dup float_rot integer_dup float_inc integer_shove float_inc integer_stackdepth float_div)
Errors: [85.0 3 14.9148 11 21.1155 7 67.0 3 38.0918 12 64.1544 10 15.1392 11 11.6088 11 33.0 2 50.1618 9 81.8347 13 61.0 3 21.1599 13 81.0 3 36.0 2 22.7768 12 18.0 3 0.0 0 36.1166 11 6.1009 9 54.0 2 2.0 1 83.0 3 38.0 2 69.6536 12]
Total: 1178.8288000000002
Mean: 23.576576
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2224.0162477000076
Median total errors in population: 1179.8288000000002
Error averages by case: (127.34374020000001 4.158 55.589569699999224 11.047 67.62611589999995 8.238 110.31027649999993 4.155 75.06435859999966 11.743 98.59334399999962 9.89 63.0570110999994 11.062 49.40832570000103 11.186 75.51360509999994 3.185 91.23141750000116 9.856 115.78262860000221 12.974 107.3860112000001 3.78 64.04090649999922 11.906 126.09073649999999 3.457 77.95648430000001 3.633 58.9396254999997 12.406 60.34275870000002 4.061 46.22791460000002 1.906 75.81703299999991 10.875 52.68521129999967 8.67 91.93381539999993 3.13 44.60817 2.386 121.30898569999995 4.044 80.02792959999992 3.268 104.01427250000111 12.1)
Error minima by case: (78.0 2 9.7217 2 2.4877 7 60.0 2 36.0918 10 14.9875 2 3.3099 8 9.6088 9 26.0 1 24.4076 8 79.8347 8 54.0 2 13.4516 2 74.0 1 35.0 2 20.7768 9 17.0 2 0.0 0 0.4775 2 1.7722 1 53.0 2 0.0 0 82.0 3 23.8454 1 67.6536 9)
Average genome size in population (length): 78.997
Average program size in population (points): 79.997
Average percent parens in population: 0.013
Minimum age in population: 57.05835240239321
Maximum age in population: 61.24357717294697
Average age in population: 59.33139824063016
Median age in population: 59.3658177258676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.813
Total error diversity:				 0.123
Error (vector) diversity:			 0.128
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 71574890
--- Timings ---
Current time: 1529615121307 milliseconds
Total Time:         147.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 37.9%
Fitness Testing:     72.4 seconds, 49.1%
Report:              19.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 47130.45649999996
Test mean error for best: 23.56523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.4204408411
Correct output: 17.2828270025  | Program output: 3.7360591327  
Correct output: 23.1304489589  | Program output: 3.029908979   
Correct output: 137.0785591646 | Program output: 139.1571183291
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 3.0249557197  
Correct output: 17.1520909798  | Program output: 3.0256911204  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 83.9864348719 
Correct output: 52.2037920383  | Program output: 3.0840470046  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 186.6308983919
Correct output: -19.1443327626 | Program output: 3.0311796836  
Correct output: 180.0725301747 | Program output: 197.1450603494
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 121.825903249 
Correct output: 38.5197606199  | Program output: 3.8063737783  
Correct output: -4.0857969085  | Program output: 3.0302636889  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 50.576538989  
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 77.3589767834 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat float_dec integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_inc integer_stackdepth float_div)
Errors: [19.2898 10 13.5468 11 20.1005 8 2.0786 10 38.0918 12 65.1669 11 14.1264 11 11.6088 11 8.4932 11 49.1197 11 81.8347 13 31.8154 10 22.1755 11 17.0725 11 36.0 2 22.7768 12 18.0 3 60.413 9 34.7134 11 7.1161 10 54.0 2 22.7883 10 83.0 3 0.1795 9 69.6536 12]
Total: 1037.1613
Mean: 20.743225
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1705.3737081000104
Median total errors in population: 1178.8288000000002
Error averages by case: (108.45051260000004 3.937 34.36890619999952 10.995 45.72009689999992 7.972 91.5819650999999 3.949 55.132759500000375 11.929 78.87302269999964 9.578 40.895564900000096 10.975 28.87717050000079 11.105 54.683872099999945 2.986 70.35023420000111 9.435 96.2649450000019 12.966 86.29911240000013 3.885 42.44851959999938 12.03 107.36659299999992 3.795 57.254781999999985 2.807 38.173029199999704 12.085 39.424103700000025 3.599 23.497563800000016 1.319 54.85453190000068 11.082 30.767287200000336 8.629 72.83006089999996 2.648 23.046646600000013 2.145 102.18470429999999 3.594 59.354313599999934 3.044 84.17341020000057 12.011)
Error minima by case: (19.2898 2 5.0505 2 10.8043 2 1.0786 2 36.0918 10 14.9875 1 7.1392 2 8.6929 10 6.6069 1 21.0609 2 79.8347 9 30.8154 2 15.1443 2 16.0725 1 33.0 2 18.1923 9 15.0 2 0.0 0 5.5102 2 0.0858 1 51.0 1 0.0 0 80.0 2 0.1795 1 67.6536 9)
Average genome size in population (length): 81.236
Average program size in population (points): 82.236
Average percent parens in population: 0.012
Minimum age in population: 58.63737383884836
Maximum age in population: 63.06689270892184
Average age in population: 60.76731591620383
Median age in population: 60.81190253663272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.099
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 73605865
--- Timings ---
Current time: 1529615124935 milliseconds
Total Time:         151.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 37.9%
Fitness Testing:     74.3 seconds, 49.1%
Report:              19.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 47130.45649999996
Test mean error for best: 23.56523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.4204408411
Correct output: 17.2828270025  | Program output: 3.7360591327  
Correct output: 23.1304489589  | Program output: 3.029908979   
Correct output: 137.0785591646 | Program output: 139.1571183291
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 3.0249557197  
Correct output: 17.1520909798  | Program output: 3.0256911204  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 83.9864348719 
Correct output: 52.2037920383  | Program output: 3.0840470046  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 186.6308983919
Correct output: -19.1443327626 | Program output: 3.0311796836  
Correct output: 180.0725301747 | Program output: 197.1450603494
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 121.825903249 
Correct output: 38.5197606199  | Program output: 3.8063737783  
Correct output: -4.0857969085  | Program output: 3.0302636889  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 50.576538989  
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 77.3589767834 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat float_dec integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_inc integer_stackdepth float_div)
Errors: [19.2898 10 13.5468 11 20.1005 8 2.0786 10 38.0918 12 65.1669 11 14.1264 11 11.6088 11 8.4932 11 49.1197 11 81.8347 13 31.8154 10 22.1755 11 17.0725 11 36.0 2 22.7768 12 18.0 3 60.413 9 34.7134 11 7.1161 10 54.0 2 22.7883 10 83.0 3 0.1795 9 69.6536 12]
Total: 1037.1613
Mean: 20.743225
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2100.3903272000084
Median total errors in population: 1178.8288000000002
Error averages by case: (122.99751180000001 4.101 50.91041439999923 11.048 64.42036349999994 8.195 104.79408419999989 4.135 70.41300540000029 12.001 93.84328129999963 9.653 59.26038489999934 11.038 44.52309250000113 11.154 70.06670679999993 3.15 86.51799130000113 9.554 110.66652170000229 12.989 102.00374930000011 4.077 59.80961789999925 11.983 120.82169379999996 4.018 73.44107699999999 3.144 52.977537199999695 12.109 55.97093220000002 3.896 38.98462870000002 1.544 70.36453480000023 11.133 47.94983019999961 8.724 87.90599639999992 2.961 38.39078840000003 2.34 117.85948489999997 3.879 74.69062229999992 3.233 98.66547630000107 12.082)
Error minima by case: (15.91 2 6.1826 2 13.1155 1 2.0786 2 36.9333 9 14.9875 2 7.1392 2 10.4503 9 8.4932 1 26.4076 1 80.6762 9 31.8154 2 2.5704 2 17.0725 1 34.0 2 3.7826 9 16.0 2 0.0 0 18.1355 1 0.0858 1 52.0 1 0.0 0 81.0 2 0.1795 1 68.4951 10)
Average genome size in population (length): 81.331
Average program size in population (points): 82.331
Average percent parens in population: 0.012
Minimum age in population: 59.99446141878252
Maximum age in population: 64.16487659383165
Average age in population: 62.21854105111504
Median age in population: 62.29634583222037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.103
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 75639365
--- Timings ---
Current time: 1529615128480 milliseconds
Total Time:         154.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 37.9%
Fitness Testing:     76.0 seconds, 49.1%
Report:              19.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 47130.45649999996
Test mean error for best: 23.56523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.4204408411
Correct output: 17.2828270025  | Program output: 3.7360591327  
Correct output: 23.1304489589  | Program output: 3.029908979   
Correct output: 137.0785591646 | Program output: 139.1571183291
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 3.0249557197  
Correct output: 17.1520909798  | Program output: 3.0256911204  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 83.9864348719 
Correct output: 52.2037920383  | Program output: 3.0840470046  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 186.6308983919
Correct output: -19.1443327626 | Program output: 3.0311796836  
Correct output: 180.0725301747 | Program output: 197.1450603494
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 121.825903249 
Correct output: 38.5197606199  | Program output: 3.8063737783  
Correct output: -4.0857969085  | Program output: 3.0302636889  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 50.576538989  
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 77.3589767834 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_inc integer_stackdepth float_div)
Errors: [19.2898 10 13.5468 11 20.1005 8 2.0786 10 38.0918 12 65.1669 11 14.1264 11 11.6088 11 8.4932 11 49.1197 11 81.8347 13 31.8154 10 22.1755 11 17.0725 11 36.0 2 22.7768 12 18.0 3 60.413 9 34.7134 11 7.1161 10 54.0 2 22.7883 10 83.0 3 0.1795 9 69.6536 12]
Total: 1037.1613
Mean: 20.743225
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2113.0221803000086
Median total errors in population: 1178.8288000000002
Error averages by case: (122.49473580000002 4.066 51.888147699999244 10.999 65.84447519999996 8.156 106.61642759999997 4.078 69.85497220000023 11.982 95.58407779999962 9.601 60.59518299999949 11.034 44.136531200000896 11.157 71.9860164999999 3.124 88.1537889000011 9.562 110.85317420000197 12.981 103.45497030000004 4.021 61.06767289999932 11.903 121.37645199999999 3.979 70.181054 3.015 53.7270988999997 12.11 52.55585100000003 3.775 41.560793300000014 1.458 72.35235970000024 11.081 49.130246599999644 8.658 85.31715169999994 2.838 42.92533350000001 2.297 114.34134229999998 3.763 77.17135019999992 3.155 98.98697380000091 12.073)
Error minima by case: (17.2898 2 6.9148 1 13.1155 2 2.0786 2 13.1836 10 9.9875 2 6.5317 2 2.1102 9 8.4932 1 11.7567 1 75.6694 9 31.8154 2 1.2371 2 17.0725 1 34.0 2 15.5537 9 16.0 2 0.0 0 27.1906 2 0.0858 1 52.0 2 0.0 0 81.0 2 0.1795 1 64.3072 10)
Average genome size in population (length): 80.579
Average program size in population (points): 81.579
Average percent parens in population: 0.012
Minimum age in population: 61.40334432315649
Maximum age in population: 65.6046484138069
Average age in population: 63.7270269285159
Median age in population: 63.77592104191967
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.107
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 77653865
--- Timings ---
Current time: 1529615132038 milliseconds
Total Time:         158.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.0 seconds, 37.9%
Fitness Testing:     77.8 seconds, 49.2%
Report:              20.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 47130.45649999996
Test mean error for best: 23.56523
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.4204408411
Correct output: 17.2828270025  | Program output: 3.7360591327  
Correct output: 23.1304489589  | Program output: 3.029908979   
Correct output: 137.0785591646 | Program output: 139.1571183291
Correct output: -36.0917810332 | Program output: 2.0           
Correct output: -62.1419485102 | Program output: 3.0249557197  
Correct output: 17.1520909798  | Program output: 3.0256911204  
Correct output: -9.6087899132  | Program output: 2.0           
Correct output: 75.493217436   | Program output: 83.9864348719 
Correct output: 52.2037920383  | Program output: 3.0840470046  
Correct output: -79.8347132576 | Program output: 2.0           
Correct output: 154.815449196  | Program output: 186.6308983919
Correct output: -19.1443327626 | Program output: 3.0311796836  
Correct output: 180.0725301747 | Program output: 197.1450603494
Correct output: -128.3399358578 | Program output: -92.3399358578
Correct output: -20.7768369154 | Program output: 2.0           
Correct output: -106.4972590774 | Program output: -88.4972590774
Correct output: 61.4129516245  | Program output: 121.825903249 
Correct output: 38.5197606199  | Program output: 3.8063737783  
Correct output: -4.0857969085  | Program output: 3.0302636889  
Correct output: -93.8538349059 | Program output: -39.8538349059
Correct output: 27.7882694945  | Program output: 50.576538989  
Correct output: -145.332361916 | Program output: -62.332361916 
Correct output: 77.1794883917  | Program output: 77.3589767834 
Correct output: -67.6536129502 | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat float_dec integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_inc integer_yank float_mod float_div print_float float_min integer_shove integer_mod float_inc float_inc float_inc integer_shove float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_dup_times float_inc float_inc integer_mult float_inc float_inc print_float float_inc)
Errors: [19.2898 10 13.5468 11 20.1005 8 2.0786 10 38.0918 12 65.1669 11 14.1264 11 11.6088 11 8.4932 11 49.1197 11 81.8347 13 31.8154 10 22.1755 11 17.0725 11 36.0 2 22.7768 12 18.0 3 60.413 9 34.7134 11 7.1161 10 54.0 2 22.7883 10 83.0 3 0.1795 9 69.6536 12]
Total: 1037.1613
Mean: 20.743225
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2097.821194800009
Median total errors in population: 1178.8288000000002
Error averages by case: (116.44348469999996 4.697 50.28671069999925 11.041 63.762501999999955 8.24 99.96906699999977 4.715 71.3169265000002 11.984 93.25406289999955 9.726 59.22127159999952 11.06 45.11246360000095 11.15 68.42955529999985 3.897 86.76117370000094 9.713 111.63578600000216 12.974 98.5442610000003 4.658 58.68039349999928 11.865 116.08605229999978 4.714 75.16185 3.175 54.049014599999744 12.088 57.68646430000001 3.935 45.08840890000005 2.273 70.65683960000021 11.112 47.54256629999987 8.836 89.41012109999993 3.023 40.90207330000001 3.092 118.52180149999995 3.917 71.86932779999984 3.828 99.6490166000008 12.067)
Error minima by case: (15.2898 2 9.5468 1 10.8043 7 0.0641 2 36.0918 10 6.482 2 10.1264 7 9.6088 9 5.7152 1 26.4076 7 79.8347 9 29.8047 2 13.1759 2 15.0623 1 34.0 2 20.7768 9 16.0 2 0.0 0 30.7134 2 0.9142 2 10.1462 1 0.0 0 16.6676 2 0.1795 2 67.4521 9)
Average genome size in population (length): 79.848
Average program size in population (points): 80.848
Average percent parens in population: 0.013
Minimum age in population: 62.40334432315649
Maximum age in population: 67.30009597602805
Average age in population: 65.17134684773106
Median age in population: 65.22595224314045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.116
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 79650090
--- Timings ---
Current time: 1529615135678 milliseconds
Total Time:         161.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.3 seconds, 37.9%
Fitness Testing:     79.6 seconds, 49.2%
Report:              20.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 46802.478499999954
Test mean error for best: 23.40124
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.4204408411
Correct output: 17.2828270025  | Program output: 2.7360591327  
Correct output: 23.1304489589  | Program output: 2.029908979   
Correct output: 137.0785591646 | Program output: 138.1571183291
Correct output: -36.0917810332 | Program output: 1.0           
Correct output: -62.1419485102 | Program output: 2.0249557197  
Correct output: 17.1520909798  | Program output: 2.0256911204  
Correct output: -9.6087899132  | Program output: 1.0           
Correct output: 75.493217436   | Program output: 82.9864348719 
Correct output: 52.2037920383  | Program output: 2.0840470046  
Correct output: -79.8347132576 | Program output: 1.0           
Correct output: 154.815449196  | Program output: 185.6308983919
Correct output: -19.1443327626 | Program output: 2.0311796836  
Correct output: 180.0725301747 | Program output: 196.1450603494
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 1.0           
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 120.825903249 
Correct output: 38.5197606199  | Program output: 2.8063737783  
Correct output: -4.0857969085  | Program output: 2.0302636889  
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 49.576538989  
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 76.3589767834 
Correct output: -67.6536129502 | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_tan} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_mod} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction float_mult} {:instruction float_inc} {:instruction float_mod} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 tag_float_237 integer_mod float_mult float_pop float_tan integer_max integer_pop integer_swap integer_sub float_dec float_yankdup float_add integer_add float_sin float_min integer_max integer_pop float_sin float_tan integer_fromfloat float_mod integer_fromfloat float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_stackdepth integer_add float_mod float_flush float_sin integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_mod float_div print_float float_min integer_dup_times integer_flush float_mult float_inc float_mod float_inc integer_stackdepth float_div)
Errors: [20.2898 9 14.5468 11 21.1005 8 1.0786 10 37.0918 12 64.1669 10 15.1264 11 10.6088 11 7.4932 11 50.1197 10 80.8347 13 30.8154 10 21.1755 11 16.0725 11 35.0 3 21.7768 13 17.0 3 59.413 10 35.7134 12 6.1161 10 53.0 2 21.7883 10 82.0 3 0.8205 10 68.6536 12]
Total: 1027.8023
Mean: 20.556046
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2136.743315400007
Median total errors in population: 1178.8288000000002
Error averages by case: (103.66877599999968 6.722 53.52788539999912 11.103 68.23142200000005 8.553 85.80470079999951 6.713 72.76921639999995 11.993 98.5788349999991 10.093 64.4296231999998 11.118 47.15830550000105 11.131 65.05162769999956 6.455 90.21103040000048 10.256 113.30855650000218 12.952 95.18484660000072 6.679 64.15745589999926 11.484 102.7441270999994 7.036 75.78370050000002 3.349 55.958379099999746 12.108 58.43132100000001 4.088 64.43045620000014 4.837 73.93358739999984 11.18 53.172777299999524 9.23 88.52659979999994 3.196 49.87015810000005 5.659 117.79270359999994 4.073 64.70800759999956 5.859 101.37921630000109 12.063)
Error minima by case: (15.2898 2 4.0 2 4.0 1 0.0345 2 4.0 1 13.9626 2 4.0 2 4.0 1 6.4191 1 2.6114 1 4.0 1 29.7828 2 15.1443 2 15.0416 1 29.6911 2 4.0 2 15.1797 2 0.0 0 4.0 2 0.0858 1 10.1462 1 0.0 0 16.6676 2 0.1795 2 3.9626 1)
Average genome size in population (length): 78.8
Average program size in population (points): 79.8
Average percent parens in population: 0.013
Minimum age in population: 64.07787369987147
Maximum age in population: 68.63897057074917
Average age in population: 66.65611496523701
Median age in population: 66.68783258856615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.139
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 81620090
--- Timings ---
Current time: 1529615139345 milliseconds
Total Time:         165.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.7 seconds, 37.9%
Fitness Testing:     81.4 seconds, 49.2%
Report:              21.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 46802.478499999954
Test mean error for best: 23.40124
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.4204408411
Correct output: 17.2828270025  | Program output: 2.7360591327  
Correct output: 23.1304489589  | Program output: 2.029908979   
Correct output: 137.0785591646 | Program output: 138.1571183291
Correct output: -36.0917810332 | Program output: 1.0           
Correct output: -62.1419485102 | Program output: 2.0249557197  
Correct output: 17.1520909798  | Program output: 2.0256911204  
Correct output: -9.6087899132  | Program output: 1.0           
Correct output: 75.493217436   | Program output: 82.9864348719 
Correct output: 52.2037920383  | Program output: 2.0840470046  
Correct output: -79.8347132576 | Program output: 1.0           
Correct output: 154.815449196  | Program output: 185.6308983919
Correct output: -19.1443327626 | Program output: 2.0311796836  
Correct output: 180.0725301747 | Program output: 196.1450603494
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 1.0           
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 120.825903249 
Correct output: 38.5197606199  | Program output: 2.8063737783  
Correct output: -4.0857969085  | Program output: 2.0302636889  
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 49.576538989  
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 76.3589767834 
Correct output: -67.6536129502 | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat float_dec integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush float_sin integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub integer_yank float_mod float_div print_float float_min integer_shove integer_mod float_inc float_inc float_inc integer_shove float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_div print_float float_min integer_dup_times float_inc float_inc integer_mult float_inc float_inc print_float float_inc)
Errors: [20.2898 9 14.5468 11 21.1005 8 1.0786 10 37.0918 12 64.1669 10 15.1264 11 10.6088 11 7.4932 11 50.1197 10 80.8347 13 30.8154 10 21.1755 11 16.0725 11 35.0 3 21.7768 13 17.0 3 59.413 10 35.7134 12 6.1161 10 53.0 2 21.7883 10 82.0 3 0.8205 10 68.6536 12]
Total: 1027.8023
Mean: 20.556046
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2324.591118800002
Median total errors in population: 1037.1613
Error averages by case: (84.34215859999922 9.657 60.16414219999854 11.087 76.87750920000032 8.938 71.65912230000015 9.703 83.30959689999952 11.938 109.50961539999847 10.594 72.94194460000011 11.057 57.84855970000104 11.054 63.960037999998924 10.195 99.2469369999998 10.973 123.02156540000259 12.853 94.4773057000013 9.647 74.25478999999896 10.853 88.31441649999958 10.446 85.95954380000009 3.809 66.75359189999976 12.1 69.33273560000012 4.495 99.71987730000033 8.641 80.03485859999932 11.169 63.148908699999545 9.684 97.15908240000002 3.651 68.92061680000009 9.435 125.91048339999993 4.455 59.0782503999992 8.874 111.29746840000153 12.04)
Error minima by case: (16.2898 2 3.9176 1 4.0174 7 0.0641 3 32.7113 9 13.0 1 4.3009 8 6.2283 8 6.4691 2 2.6114 7 76.4542 9 14.0923 2 16.1443 1 15.0623 1 33.0 2 17.3963 9 15.0 2 0.0 0 3.2958 2 1.0858 1 10.1462 2 1.0 1 16.6676 2 0.1795 1 64.2731 9)
Average genome size in population (length): 77.116
Average program size in population (points): 78.116
Average percent parens in population: 0.013
Minimum age in population: 65.568639593321
Maximum age in population: 70.19930439967712
Average age in population: 68.09213954613618
Median age in population: 68.1259706953062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.13
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 83548115
--- Timings ---
Current time: 1529615142898 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 37.9%
Fitness Testing:     83.1 seconds, 49.2%
Report:              21.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 46834.8984
Test mean error for best: 23.41745
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 130.4204408411
Correct output: 17.2828270025  | Program output: 1.3680295664  
Correct output: 23.1304489589  | Program output: 1.0149544895  
Correct output: 137.0785591646 | Program output: 137.1571183291
Correct output: -36.0917810332 | Program output: 0.0           
Correct output: -62.1419485102 | Program output: 1.0124778598  
Correct output: 17.1520909798  | Program output: 1.0128455602  
Correct output: -9.6087899132  | Program output: 0.0           
Correct output: 75.493217436   | Program output: 81.9864348719 
Correct output: 52.2037920383  | Program output: 1.0420235023  
Correct output: -79.8347132576 | Program output: 0.0           
Correct output: 154.815449196  | Program output: 184.6308983919
Correct output: -19.1443327626 | Program output: 1.0155898418  
Correct output: 180.0725301747 | Program output: 195.1450603494
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 0.0           
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 119.825903249 
Correct output: 38.5197606199  | Program output: 1.4031868891  
Correct output: -4.0857969085  | Program output: 1.0151318445  
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 48.576538989  
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 75.3589767834 
Correct output: -67.6536129502 | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_sub} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat integer_fromfloat float_dec integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add float_sub float_sin integer_dec float_dup float_flush float_sin integer_pop integer_add float_dup_items integer_sub float_mod in1 float_rot integer_shove float_inc float_mod in1 integer_dup_items in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub integer_flush integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_swap integer_stackdepth float_div)
Errors: [21.2898 10 15.9148 10 22.1155 8 0.0786 9 36.0918 12 63.1544 11 16.1392 10 9.6088 11 6.4932 11 51.1618 10 79.8347 13 29.8154 9 20.1599 12 15.0725 11 35.0 3 20.7768 12 17.0 3 58.413 9 37.1166 11 5.1009 9 53.0 2 20.7883 10 82.0 3 1.8205 10 67.6536 12]
Total: 1016.6001000000001
Mean: 20.332003
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2534.147929200002
Median total errors in population: 1037.1613
Error averages by case: (92.0386878999993 9.73 70.54683319999874 11.154 87.22042430000026 9.098 75.86111449999994 9.822 92.80862589999927 11.981 117.55710489999856 10.517 83.23255669999975 11.097 67.13123290000098 11.105 71.43705689999906 10.343 108.22798789999938 10.993 131.77588640000255 12.917 99.71891580000154 9.758 83.6446309999991 10.791 92.40841039999955 10.538 95.23645710000008 3.874 75.01308640000032 12.212 78.72926180000009 4.477 106.22590740000035 8.879 90.41341329999935 11.28 72.99785839999959 9.677 106.85273939999996 3.658 75.10819590000011 9.582 135.0144069 4.448 65.97311669999935 9.071 119.90301720000157 12.069)
Error minima by case: (12.2898 2 1.6608 2 11.3043 7 0.0641 2 14.1836 10 13.975 1 7.1264 8 9.6088 7 6.4691 1 0.6114 8 76.6694 9 14.0923 3 5.3741 2 15.0623 2 33.0 2 16.5537 9 15.0 2 0.0 0 6.7184 2 1.0858 1 9.1462 2 1.0 1 15.6676 2 0.1795 1 65.3072 9)
Average genome size in population (length): 76.66
Average program size in population (points): 77.66
Average percent parens in population: 0.013
Minimum age in population: 66.568639593321
Maximum age in population: 71.50478161461896
Average age in population: 69.55966427481744
Median age in population: 69.59613409266058
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.131
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 85464715
--- Timings ---
Current time: 1529615146430 milliseconds
Total Time:         172.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 37.9%
Fitness Testing:     84.8 seconds, 49.1%
Report:              22.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 46834.8984
Test mean error for best: 23.41745
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 130.4204408411
Correct output: 17.2828270025  | Program output: 1.3680295664  
Correct output: 23.1304489589  | Program output: 1.0149544895  
Correct output: 137.0785591646 | Program output: 137.1571183291
Correct output: -36.0917810332 | Program output: 0.0           
Correct output: -62.1419485102 | Program output: 1.0124778598  
Correct output: 17.1520909798  | Program output: 1.0128455602  
Correct output: -9.6087899132  | Program output: 0.0           
Correct output: 75.493217436   | Program output: 81.9864348719 
Correct output: 52.2037920383  | Program output: 1.0420235023  
Correct output: -79.8347132576 | Program output: 0.0           
Correct output: 154.815449196  | Program output: 184.6308983919
Correct output: -19.1443327626 | Program output: 1.0155898418  
Correct output: 180.0725301747 | Program output: 195.1450603494
Correct output: -128.3399358578 | Program output: -93.3399358578
Correct output: -20.7768369154 | Program output: 0.0           
Correct output: -106.4972590774 | Program output: -89.4972590774
Correct output: 61.4129516245  | Program output: 119.825903249 
Correct output: 38.5197606199  | Program output: 1.4031868891  
Correct output: -4.0857969085  | Program output: 1.0151318445  
Correct output: -93.8538349059 | Program output: -40.8538349059
Correct output: 27.7882694945  | Program output: 48.576538989  
Correct output: -145.332361916 | Program output: -63.332361916 
Correct output: 77.1794883917  | Program output: 75.3589767834 
Correct output: -67.6536129502 | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_sub} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat integer_fromfloat float_dec integer_pop float_sin float_tan integer_fromfloat float_dec float_yankdup float_add float_sub float_sin integer_dec float_dup float_flush float_sin integer_pop integer_add float_dup_items integer_sub float_mod in1 float_rot integer_shove float_inc float_mod in1 integer_dup_items in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub integer_flush integer_yank float_mod float_div print_float float_min integer_shove integer_shove float_inc float_inc float_inc integer_shove float_inc float_mod float_swap integer_stackdepth float_div)
Errors: [21.2898 10 15.9148 10 22.1155 8 0.0786 9 36.0918 12 63.1544 11 16.1392 10 9.6088 11 6.4932 11 51.1618 10 79.8347 13 29.8154 9 20.1599 12 15.0725 11 35.0 3 20.7768 12 17.0 3 58.413 9 37.1166 11 5.1009 9 53.0 2 20.7883 10 82.0 3 1.8205 10 67.6536 12]
Total: 1016.6001000000001
Mean: 20.332003
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2424.1141519000016
Median total errors in population: 1037.1613
Error averages by case: (87.90928469999918 9.591 63.85349469999869 11.142 80.97940220000028 8.987 71.34806540000024 9.89 89.16287369999938 11.995 111.50558989999837 10.408 77.04115499999978 11.104 63.89930370000111 11.075 66.86054969999893 10.482 101.50779959999946 10.777 127.67310540000246 12.911 96.44244770000176 9.831 76.75095499999901 10.928 88.07402329999945 10.636 92.38101860000005 3.991 71.83483650000016 12.369 76.28054360000012 4.397 105.82228170000035 9.185 84.21700509999931 11.461 65.69697189999955 9.74 104.0753012 3.576 71.74358100000012 9.685 131.7668972 4.368 61.330368999999756 9.346 116.01229610000145 12.07)
Error minima by case: (16.2898 2 3.1313 8 10.1005 7 0.0641 2 35.3595 8 13.975 1 4.1264 8 8.9328 8 5.4191 2 0.1197 8 79.666 8 14.0923 3 11.1443 2 14.0725 2 33.0 2 20.5826 9 14.2233 2 0.0 0 10.8154 7 0.0555 1 9.1462 2 1.3333 1 15.6676 2 0.1795 1 67.5043 9)
Average genome size in population (length): 76.141
Average program size in population (points): 77.141
Average percent parens in population: 0.013
Minimum age in population: 68.79911162901857
Maximum age in population: 73.045058798267
Average age in population: 71.03321365487362
Median age in population: 71.10629213946874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.138
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 87368290
--- Timings ---
Current time: 1529615149996 milliseconds
Total Time:         176.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 37.9%
Fitness Testing:     86.6 seconds, 49.1%
Report:              22.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 46577.13889999995
Test mean error for best: 23.28857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 130.4204408411
Correct output: 17.2828270025  | Program output: 1.7360591327  
Correct output: 23.1304489589  | Program output: 1.029908979   
Correct output: 137.0785591646 | Program output: 137.1571183291
Correct output: -36.0917810332 | Program output: 0.0           
Correct output: -62.1419485102 | Program output: 1.0249557197  
Correct output: 17.1520909798  | Program output: 1.0256911204  
Correct output: -9.6087899132  | Program output: 0.0           
Correct output: 75.493217436   | Program output: 81.9864348719 
Correct output: 52.2037920383  | Program output: 1.0840470046  
Correct output: -79.8347132576 | Program output: 0.0           
Correct output: 154.815449196  | Program output: 184.6308983919
Correct output: -19.1443327626 | Program output: 1.0311796836  
Correct output: 180.0725301747 | Program output: 195.1450603494
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 0.0           
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 119.825903249 
Correct output: 38.5197606199  | Program output: 1.8063737783  
Correct output: -4.0857969085  | Program output: 1.0302636889  
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 48.576538989  
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 75.3589767834 
Correct output: -67.6536129502 | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_dup float_sin integer_dec float_dup tagged_67 float_flush 61 integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div print_float float_min float_dec integer_shove float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [21.2898 10 15.5468 10 22.1005 9 0.0786 9 36.0918 12 63.1669 11 16.1264 10 9.6088 11 6.4932 11 51.1197 11 79.8347 13 29.8154 9 20.1755 10 15.0725 11 34.0 3 20.7768 12 16.0 2 58.413 9 36.7134 12 5.1161 10 52.0 2 20.7883 10 81.0 2 1.8205 10 67.6536 12]
Total: 1011.8023000000001
Mean: 20.236046
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2670.544488599996
Median total errors in population: 1027.8023
Error averages by case: (99.1923143999992 9.247 74.6282841999987 11.125 92.22453420000024 9.159 83.81074209999964 9.801 96.17934609999858 12.079 121.07752389999852 10.096 88.65354639999974 11.1 71.07901870000101 11.133 78.19703989999903 10.385 112.28808339999932 10.513 134.92514210000255 12.919 108.28078340000182 9.783 88.00513609999918 10.904 100.05834619999881 10.527 99.65968160000011 4.544 79.38474760000051 12.726 83.06997530000008 4.549 114.72449460000036 9.531 94.80765359999882 11.814 77.06958129999964 9.751 111.72476459999996 3.713 83.2333453000001 9.677 139.9610682 4.543 73.56905940000061 9.677 123.34027600000175 12.104)
Error minima by case: (0.2919 2 4.1399 2 0.5073 7 0.0345 2 35.1018 8 13.9874 1 9.1305 8 8.6188 8 4.4932 2 1.6114 8 73.356 9 10.2696 2 15.1443 2 13.0725 1 34.0 2 7.4428 8 16.0 2 0.0 0 17.7759 2 0.0858 2 9.1462 2 1.0 1 15.6676 2 0.1795 1 63.3547 9)
Average genome size in population (length): 75.931
Average program size in population (points): 76.931
Average percent parens in population: 0.013
Minimum age in population: 70.09235895438438
Maximum age in population: 74.60443353912265
Average age in population: 72.52371865113645
Median age in population: 72.55469012029909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.15
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 89266615
--- Timings ---
Current time: 1529615153540 milliseconds
Total Time:         179.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 37.9%
Fitness Testing:     88.2 seconds, 49.1%
Report:              23.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 46577.13889999995
Test mean error for best: 23.28857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 130.4204408411
Correct output: 17.2828270025  | Program output: 1.7360591327  
Correct output: 23.1304489589  | Program output: 1.029908979   
Correct output: 137.0785591646 | Program output: 137.1571183291
Correct output: -36.0917810332 | Program output: 0.0           
Correct output: -62.1419485102 | Program output: 1.0249557197  
Correct output: 17.1520909798  | Program output: 1.0256911204  
Correct output: -9.6087899132  | Program output: 0.0           
Correct output: 75.493217436   | Program output: 81.9864348719 
Correct output: 52.2037920383  | Program output: 1.0840470046  
Correct output: -79.8347132576 | Program output: 0.0           
Correct output: 154.815449196  | Program output: 184.6308983919
Correct output: -19.1443327626 | Program output: 1.0311796836  
Correct output: 180.0725301747 | Program output: 195.1450603494
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 0.0           
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 119.825903249 
Correct output: 38.5197606199  | Program output: 1.8063737783  
Correct output: -4.0857969085  | Program output: 1.0302636889  
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 48.576538989  
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 75.3589767834 
Correct output: -67.6536129502 | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_dup float_sin integer_dec float_dup tagged_67 float_flush 61 integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div print_float float_min float_dec integer_shove float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [21.2898 10 15.5468 10 22.1005 9 0.0786 9 36.0918 12 63.1669 11 16.1264 10 9.6088 11 6.4932 11 51.1197 11 79.8347 13 29.8154 9 20.1755 10 15.0725 11 34.0 3 20.7768 12 16.0 2 58.413 9 36.7134 12 5.1161 10 52.0 2 20.7883 10 81.0 2 1.8205 10 67.6536 12]
Total: 1011.8023000000001
Mean: 20.236046
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2501.0201941999926
Median total errors in population: 1027.8023
Error averages by case: (92.57198199999917 9.253 69.27590519999868 11.008 85.24128190000017 9.068 74.7044726999998 9.711 90.28324699999942 12.093 115.56117069999843 10.092 81.05369049999976 10.957 64.79476640000114 11.144 71.35055579999892 10.431 105.95299159999996 10.415 130.01748920000256 12.936 98.4198431000013 9.664 80.50012909999909 10.912 91.30553799999952 10.564 93.14869130000007 4.406 73.63796740000048 12.717 76.4175903000001 4.307 108.58016530000036 9.502 90.05571379999903 11.793 69.16281669999955 9.61 105.07067689999998 3.487 75.99069100000011 9.681 133.43661099999997 4.295 66.36313270000092 9.749 118.22807460000122 12.1)
Error minima by case: (18.2898 2 7.1826 2 19.1005 7 0.0786 2 35.3422 10 9.7389 1 13.1264 8 8.9182 9 5.4191 2 2.6114 8 79.6716 9 15.0923 3 7.3902 2 14.0416 2 32.0 2 20.5874 9 14.0 2 0.5 1 28.0673 2 0.0858 1 9.1462 1 2.5 1 15.6676 2 0.1795 1 67.5105 3)
Average genome size in population (length): 75.875
Average program size in population (points): 76.875
Average percent parens in population: 0.013
Minimum age in population: 71.1631755677819
Maximum age in population: 75.71208091489142
Average age in population: 74.0537788155948
Median age in population: 74.09502650371451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.125
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 91163490
--- Timings ---
Current time: 1529615157090 milliseconds
Total Time:         183.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.5 seconds, 37.9%
Fitness Testing:     89.9 seconds, 49.1%
Report:              23.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 46577.13889999995
Test mean error for best: 23.28857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 130.4204408411
Correct output: 17.2828270025  | Program output: 1.7360591327  
Correct output: 23.1304489589  | Program output: 1.029908979   
Correct output: 137.0785591646 | Program output: 137.1571183291
Correct output: -36.0917810332 | Program output: 0.0           
Correct output: -62.1419485102 | Program output: 1.0249557197  
Correct output: 17.1520909798  | Program output: 1.0256911204  
Correct output: -9.6087899132  | Program output: 0.0           
Correct output: 75.493217436   | Program output: 81.9864348719 
Correct output: 52.2037920383  | Program output: 1.0840470046  
Correct output: -79.8347132576 | Program output: 0.0           
Correct output: 154.815449196  | Program output: 184.6308983919
Correct output: -19.1443327626 | Program output: 1.0311796836  
Correct output: 180.0725301747 | Program output: 195.1450603494
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: 0.0           
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 119.825903249 
Correct output: 38.5197606199  | Program output: 1.8063737783  
Correct output: -4.0857969085  | Program output: 1.0302636889  
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 48.576538989  
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 75.3589767834 
Correct output: -67.6536129502 | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_dec} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction float_min} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction tag_float_154} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_dec tag_float_237 integer_mod float_mult float_pop float_sin float_min integer_max -76 float_sin float_tan integer_fromfloat integer_fromfloat float_dec integer_pop integer_pop integer_add float_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div print_float tag_float_154 float_dec integer_shove float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [21.2898 10 15.5468 10 22.1005 9 0.0786 9 36.0918 12 63.1669 11 16.1264 10 9.6088 11 6.4932 11 51.1197 11 79.8347 13 29.8154 9 20.1755 10 15.0725 11 34.0 3 20.7768 12 16.0 2 58.413 9 36.7134 12 5.1161 10 52.0 2 20.7883 10 81.0 2 1.8205 10 67.6536 12]
Total: 1011.8023000000001
Mean: 20.236046
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2406.628422699994
Median total errors in population: 1027.8023
Error averages by case: (91.67426919999924 9.673 65.21605319999902 10.61 80.78554700000008 9.104 74.8019789999997 9.477 84.21026099999919 12.059 109.07796729999914 10.352 76.32049179999999 10.597 58.88172310000107 11.121 69.82523659999896 10.53 101.37864130000034 10.427 123.57790110000244 12.938 97.69354240000189 9.433 73.91086789999922 11.095 93.18863969999875 10.61 89.46692580000011 4.334 67.63973340000001 12.361 72.32083910000007 4.221 106.84336260000033 9.295 85.29975749999905 11.421 62.174023399999456 9.251 102.07011719999993 3.393 73.22127910000015 9.794 131.0448912999999 4.208 65.8099714000008 9.866 111.93940130000148 12.085)
Error minima by case: (1.7956 2 5.5468 2 10.6647 2 0.0786 3 35.0918 10 15.975 1 6.1264 2 8.6088 9 0.6577 2 10.7567 2 1.551 9 15.0923 3 8.3902 2 13.0725 2 33.0 2 19.7768 9 15.0 2 0.0 0 22.6536 2 1.0858 2 7.0727 2 0.3661 1 13.6203 2 0.1795 1 13.7321 9)
Average genome size in population (length): 77.97
Average program size in population (points): 78.97
Average percent parens in population: 0.013
Minimum age in population: 72.31843722603865
Maximum age in population: 77.339441564991
Average age in population: 75.67549626260748
Median age in population: 75.72015026497084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 93112840
--- Timings ---
Current time: 1529615160689 milliseconds
Total Time:         186.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.9 seconds, 37.9%
Fitness Testing:     91.7 seconds, 49.1%
Report:              24.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 46531.9034
Test mean error for best: 23.26595
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 129.4204408411
Correct output: 17.2828270025  | Program output: 0.3680295664  
Correct output: 23.1304489589  | Program output: 0.0149544895  
Correct output: 137.0785591646 | Program output: 136.1571183291
Correct output: -36.0917810332 | Program output: -1.0          
Correct output: -62.1419485102 | Program output: 0.0124778598  
Correct output: 17.1520909798  | Program output: 0.0128455602  
Correct output: -9.6087899132  | Program output: -1.0          
Correct output: 75.493217436   | Program output: 80.9864348719 
Correct output: 52.2037920383  | Program output: 0.0420235023  
Correct output: -79.8347132576 | Program output: -1.0          
Correct output: 154.815449196  | Program output: 183.6308983919
Correct output: -19.1443327626 | Program output: 0.0155898418  
Correct output: 180.0725301747 | Program output: 194.1450603494
Correct output: -128.3399358578 | Program output: -94.3399358578
Correct output: -20.7768369154 | Program output: -1.0          
Correct output: -106.4972590774 | Program output: -90.4972590774
Correct output: 61.4129516245  | Program output: 118.825903249 
Correct output: 38.5197606199  | Program output: 0.4031868891  
Correct output: -4.0857969085  | Program output: 0.0151318445  
Correct output: -93.8538349059 | Program output: -41.8538349059
Correct output: 27.7882694945  | Program output: 47.576538989  
Correct output: -145.332361916 | Program output: -64.332361916 
Correct output: 77.1794883917  | Program output: 74.3589767834 
Correct output: -67.6536129502 | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sin} {:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mult} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_times} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_dup} {:instruction float_flush} {:instruction float_sin} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction integer_dup_items} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_dup} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min})
Best program: (tag_float_237 integer_mod float_sin tag_float_237 integer_mod float_mult float_pop float_sin integer_dup_times integer_max -76 float_sin float_tan float_min integer_fromfloat float_add integer_add float_sin integer_dec float_dup tagged_67 float_flush 61 integer_pop integer_add float_dup_items integer_dec float_dup float_flush float_sin integer_pop integer_add float_dup_items integer_sub float_mod in1 float_rot integer_shove float_inc float_mod in1 integer_dup_items in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_dup float_inc float_mod float_div float_sub integer_mult integer_yank float_dec float_div print_float float_min)
Errors: [22.2898 10 16.9148 11 23.1155 8 0.9214 10 35.0918 11 62.1544 11 17.1392 11 8.6088 10 5.4932 11 52.1618 10 78.8347 12 28.8154 10 19.1599 13 14.0725 11 34.0 3 19.7768 12 16.0 2 57.413 9 38.1166 11 4.1009 9 52.0 2 19.7883 9 81.0 2 2.8205 10 66.6536 11]
Total: 1005.4429000000001
Mean: 20.108858
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2544.5750664000007
Median total errors in population: 1016.6001000000001
Error averages by case: (94.66432799999916 9.936 69.97849789999911 10.447 87.34269909999999 9.404 76.5050356999993 9.237 92.20435879999899 12.047 112.96175539999933 10.422 83.60924790000016 10.403 67.0342520000011 11.13 71.66329349999883 10.504 107.22972100000058 10.576 129.4591979000025 12.906 102.21590770000195 9.212 79.76078929999929 10.839 94.96186149999889 10.613 101.08331500000007 4.671 73.8014252000008 12.088 83.8585351000001 4.39 106.53455160000034 9.097 89.73927939999894 11.357 69.45553929999974 9.053 113.19595619999984 3.709 73.05950150000011 9.784 141.499012 4.368 66.60499930000086 9.834 118.04000610000156 12.085)
Error minima by case: (19.2898 2 5.5468 2 9.6267 2 0.0786 2 3.2956 8 6.482 1 6.1264 1 2.8742 9 4.4438 2 2.6114 2 55.8742 9 27.7937 3 16.1443 2 13.0519 2 31.9893 2 2.1258 9 13.9888 2 0.0 0 18.7759 2 1.0858 2 7.0972 2 2.0 1 13.6361 2 0.1795 1 42.8742 10)
Average genome size in population (length): 78.409
Average program size in population (points): 79.409
Average percent parens in population: 0.013
Minimum age in population: 75.31846381576885
Maximum age in population: 79.05953380953316
Average age in population: 77.22666783119577
Median age in population: 77.27643438439713
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.18
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 95073065
--- Timings ---
Current time: 1529615164170 milliseconds
Total Time:         190.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 37.9%
Fitness Testing:     93.5 seconds, 49.1%
Report:              24.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 46282.93289999997
Test mean error for best: 23.14147
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 129.4204408411
Correct output: 17.2828270025  | Program output: 0.7360591327  
Correct output: 23.1304489589  | Program output: 0.029908979   
Correct output: 137.0785591646 | Program output: 136.1571183291
Correct output: -36.0917810332 | Program output: -1.0          
Correct output: -62.1419485102 | Program output: 0.0249557197  
Correct output: 17.1520909798  | Program output: 0.0256911204  
Correct output: -9.6087899132  | Program output: -1.0          
Correct output: 75.493217436   | Program output: 80.9864348719 
Correct output: 52.2037920383  | Program output: 0.0840470046  
Correct output: -79.8347132576 | Program output: -1.0          
Correct output: 154.815449196  | Program output: 183.6308983919
Correct output: -19.1443327626 | Program output: 0.0311796836  
Correct output: 180.0725301747 | Program output: 194.1450603494
Correct output: -128.3399358578 | Program output: -95.3399358578
Correct output: -20.7768369154 | Program output: -1.0          
Correct output: -106.4972590774 | Program output: -91.4972590774
Correct output: 61.4129516245  | Program output: 118.825903249 
Correct output: 38.5197606199  | Program output: 0.8063737783  
Correct output: -4.0857969085  | Program output: 0.0302636889  
Correct output: -93.8538349059 | Program output: -42.8538349059
Correct output: 27.7882694945  | Program output: 47.576538989  
Correct output: -145.332361916 | Program output: -65.332361916 
Correct output: 77.1794883917  | Program output: 74.3589767834 
Correct output: -67.6536129502 | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop float_yankdup integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add float_yankdup float_yankdup float_add integer_dup float_sin integer_dec float_dup tagged_67 float_flush 61 integer_pop float_cos float_dup_items integer_dup_items float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div print_float float_min float_dec integer_shove float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times integer_mod float_inc float_min float_inc float_inc print_float float_inc)
Errors: [22.2898 10 16.5468 11 23.1005 9 0.9214 10 35.0918 11 62.1669 11 17.1264 11 8.6088 10 5.4932 11 52.1197 11 78.8347 12 28.8154 10 19.1755 11 14.0725 11 33.0 3 19.7768 12 15.0 3 57.413 9 37.7134 12 4.1161 10 51.0 2 19.7883 9 80.0 2 2.8205 10 66.6536 11]
Total: 1003.6451000000001
Mean: 20.072903
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2179.7236244000014
Median total errors in population: 1011.8023000000001
Error averages by case: (81.41195559999926 9.752 57.541185399999016 10.395 72.3430230000002 9.482 62.7641724000005 9.048 76.71759679999965 11.998 102.27018689999872 10.596 67.8553459 10.35 50.75167380000101 11.043 57.39720929999931 10.357 94.26665049999998 10.838 116.23411720000209 12.89 88.13445200000129 9.006 66.65641319999934 10.406 79.94580869999952 10.505 80.92352610000007 4.211 59.63900599999971 12.065 64.14767120000006 3.559 96.27931020000034 8.885 77.84838659999929 11.675 54.95905989999954 9.481 93.64900849999994 3.293 62.43169200000014 9.574 122.32749529999997 3.495 54.247966700000774 9.617 104.4367112000012 12.023)
Error minima by case: (13.0 2 4.4655 8 10.8043 8 0.0786 2 11.1836 9 15.975 1 6.1264 7 8.6088 7 0.1562 2 2.6114 8 59.8347 10 11.2696 2 1.2556 2 7.9572 2 32.0 2 0.7768 8 14.0 2 0.5 1 5.9528 7 0.0858 2 7.1462 1 2.5 1 13.6676 2 0.1795 1 47.6536 9)
Average genome size in population (length): 74.188
Average program size in population (points): 75.188
Average percent parens in population: 0.014
Minimum age in population: 76.55529676812233
Maximum age in population: 80.32313945947224
Average age in population: 78.6835419844674
Median age in population: 78.69950794221046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.146
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 96927765
--- Timings ---
Current time: 1529615167642 milliseconds
Total Time:         193.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.5 seconds, 37.9%
Fitness Testing:     95.1 seconds, 49.1%
Report:              25.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 46282.93289999997
Test mean error for best: 23.14147
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 129.4204408411
Correct output: 17.2828270025  | Program output: 0.7360591327  
Correct output: 23.1304489589  | Program output: 0.029908979   
Correct output: 137.0785591646 | Program output: 136.1571183291
Correct output: -36.0917810332 | Program output: -1.0          
Correct output: -62.1419485102 | Program output: 0.0249557197  
Correct output: 17.1520909798  | Program output: 0.0256911204  
Correct output: -9.6087899132  | Program output: -1.0          
Correct output: 75.493217436   | Program output: 80.9864348719 
Correct output: 52.2037920383  | Program output: 0.0840470046  
Correct output: -79.8347132576 | Program output: -1.0          
Correct output: 154.815449196  | Program output: 183.6308983919
Correct output: -19.1443327626 | Program output: 0.0311796836  
Correct output: 180.0725301747 | Program output: 194.1450603494
Correct output: -128.3399358578 | Program output: -95.3399358578
Correct output: -20.7768369154 | Program output: -1.0          
Correct output: -106.4972590774 | Program output: -91.4972590774
Correct output: 61.4129516245  | Program output: 118.825903249 
Correct output: 38.5197606199  | Program output: 0.8063737783  
Correct output: -4.0857969085  | Program output: 0.0302636889  
Correct output: -93.8538349059 | Program output: -42.8538349059
Correct output: 27.7882694945  | Program output: 47.576538989  
Correct output: -145.332361916 | Program output: -65.332361916 
Correct output: 77.1794883917  | Program output: 74.3589767834 
Correct output: -67.6536129502 | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction -36} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_pop float_yankdup integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add float_yankdup float_yankdup float_add integer_dup float_sin integer_dec float_dup tagged_67 float_flush 61 integer_pop float_cos float_dup_items integer_dup_items float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div print_float float_min float_dec -36 float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times integer_mod float_inc float_min float_inc float_inc print_float float_inc)
Errors: [22.2898 10 16.5468 11 23.1005 9 0.9214 10 35.0918 11 62.1669 11 17.1264 11 8.6088 10 5.4932 11 52.1197 11 78.8347 12 28.8154 10 19.1755 11 14.0725 11 33.0 3 19.7768 12 15.0 3 57.413 9 37.7134 12 4.1161 10 51.0 2 19.7883 9 80.0 2 2.8205 10 66.6536 11]
Total: 1003.6451000000001
Mean: 20.072903
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2230.4995219999905
Median total errors in population: 1011.8023000000001
Error averages by case: (85.10597019999926 9.953 58.682283699998784 10.455 73.15829630000023 9.716 66.19515010000039 9.262 77.94462379999972 11.951 102.02397299999849 10.63 68.87664660000026 10.428 52.40131620000101 10.996 60.57517669999915 10.513 95.15741499999957 11.013 117.70320550000231 12.83 93.32221790000143 9.219 66.96386029999917 10.08 84.04036429999948 10.672 83.48610160000004 4.419 61.13779739999972 12.048 66.63598940000007 3.597 99.19904530000032 9.082 78.61555939999936 11.828 55.70994549999958 9.691 94.90362089999992 3.495 64.60151780000014 9.767 123.79170069999996 3.514 57.453069100000775 9.817 105.83667530000125 12.002)
Error minima by case: (19.2898 2 5.5468 2 12.1005 8 0.0786 2 15.7247 8 16.975 1 5.3766 7 7.6088 7 3.4438 2 1.6114 8 21.9892 9 11.2696 3 16.1443 2 11.9283 2 32.0 2 4.3305 8 14.0 2 1.0 1 10.9193 2 1.0858 2 9.1462 1 0.8092 1 15.6676 2 0.1795 1 8.1703 8)
Average genome size in population (length): 72.363
Average program size in population (points): 73.363
Average percent parens in population: 0.014
Minimum age in population: 78.02037663519559
Maximum age in population: 81.77262545553253
Average age in population: 80.10923102920567
Median age in population: 80.13640575326792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 98736840
--- Timings ---
Current time: 1529615171230 milliseconds
Total Time:         197.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 38.0%
Fitness Testing:     96.8 seconds, 49.0%
Report:              25.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 45919.00900000001
Test mean error for best: 22.95950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.4204408411
Correct output: 17.2828270025  | Program output: -2.6319704336 
Correct output: 23.1304489589  | Program output: -2.9850455105 
Correct output: 137.0785591646 | Program output: 133.1571183291
Correct output: -36.0917810332 | Program output: -4.0          
Correct output: -62.1419485102 | Program output: -2.9875221402 
Correct output: 17.1520909798  | Program output: -2.9871544398 
Correct output: -9.6087899132  | Program output: -4.0          
Correct output: 75.493217436   | Program output: 77.9864348719 
Correct output: 52.2037920383  | Program output: -2.9579764977 
Correct output: -79.8347132576 | Program output: -4.0          
Correct output: 154.815449196  | Program output: 180.6308983919
Correct output: -19.1443327626 | Program output: -2.9844101582 
Correct output: 180.0725301747 | Program output: 191.1450603494
Correct output: -128.3399358578 | Program output: -97.3399358578
Correct output: -20.7768369154 | Program output: -4.0          
Correct output: -106.4972590774 | Program output: -93.4972590774
Correct output: 61.4129516245  | Program output: 115.825903249 
Correct output: 38.5197606199  | Program output: -2.5968131109 
Correct output: -4.0857969085  | Program output: -2.9848681555 
Correct output: -93.8538349059 | Program output: -44.8538349059
Correct output: 27.7882694945  | Program output: 44.576538989  
Correct output: -145.332361916 | Program output: -67.332361916 
Correct output: 77.1794883917  | Program output: 71.3589767834 
Correct output: -67.6536129502 | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_inc})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec integer_rot tagged_67 float_flush 61 integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_div float_inc float_inc float_inc float_dup_times integer_shove float_inc float_mod float_swap integer_stackdepth integer_inc)
Errors: [25.2898 10 19.9148 11 26.1155 11 3.9214 10 32.0918 11 59.1544 9 20.1392 10 5.6088 10 2.4932 10 55.1618 10 75.8347 12 25.8154 10 16.1599 10 11.0725 11 31.0 3 16.7768 12 13.0 3 54.413 9 41.1166 9 1.1009 9 49.0 2 16.7883 10 78.0 3 5.8205 10 63.6536 11]
Total: 975.4429
Mean: 19.508858
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2219.510358199991
Median total errors in population: 1011.8023000000001
Error averages by case: (82.9360106999992 9.727 56.918699399998836 10.516 73.97150830000028 9.631 63.74360240000027 9.134 79.42799309999943 11.83 103.16049029999846 10.632 68.92416920000015 10.498 53.88018140000104 10.88 60.90593749999915 10.262 95.35508489999977 10.921 118.86468990000225 12.707 88.5471038000014 9.106 67.6834716999992 10.327 82.77259429999928 10.431 83.56496990000007 4.522 62.52348869999972 12.045 66.9428204000001 3.772 97.22845330000025 8.818 77.13338189999938 11.736 55.349017099999514 9.654 94.63203029999993 3.596 63.01338770000014 9.359 123.36431299999995 3.605 56.43404160000088 9.553 107.09691740000115 11.874)
Error minima by case: (19.2898 2 2.7336 2 13.1001 8 0.0786 2 15.7247 8 17.9621 1 7.1261 7 2.5091 7 2.4932 2 1.6114 8 65.5041 8 9.4077 3 9.3902 2 11.0725 2 31.0 2 4.3305 8 13.0 2 0.5 1 16.889 2 0.6241 2 8.1462 1 0.6234 1 14.6676 2 0.1795 1 54.9608 8)
Average genome size in population (length): 71.303
Average program size in population (points): 72.303
Average percent parens in population: 0.014
Minimum age in population: 79.42950610202399
Maximum age in population: 83.35114189668445
Average age in population: 81.56684362791704
Median age in population: 81.59032751933638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.137
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 100519440
--- Timings ---
Current time: 1529615174707 milliseconds
Total Time:         200.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.3 seconds, 38.0%
Fitness Testing:     98.4 seconds, 49.0%
Report:              26.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 45919.00900000001
Test mean error for best: 22.95950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.4204408411
Correct output: 17.2828270025  | Program output: -2.6319704336 
Correct output: 23.1304489589  | Program output: -2.9850455105 
Correct output: 137.0785591646 | Program output: 133.1571183291
Correct output: -36.0917810332 | Program output: -4.0          
Correct output: -62.1419485102 | Program output: -2.9875221402 
Correct output: 17.1520909798  | Program output: -2.9871544398 
Correct output: -9.6087899132  | Program output: -4.0          
Correct output: 75.493217436   | Program output: 77.9864348719 
Correct output: 52.2037920383  | Program output: -2.9579764977 
Correct output: -79.8347132576 | Program output: -4.0          
Correct output: 154.815449196  | Program output: 180.6308983919
Correct output: -19.1443327626 | Program output: -2.9844101582 
Correct output: 180.0725301747 | Program output: 191.1450603494
Correct output: -128.3399358578 | Program output: -97.3399358578
Correct output: -20.7768369154 | Program output: -4.0          
Correct output: -106.4972590774 | Program output: -93.4972590774
Correct output: 61.4129516245  | Program output: 115.825903249 
Correct output: 38.5197606199  | Program output: -2.5968131109 
Correct output: -4.0857969085  | Program output: -2.9848681555 
Correct output: -93.8538349059 | Program output: -44.8538349059
Correct output: 27.7882694945  | Program output: 44.576538989  
Correct output: -145.332361916 | Program output: -67.332361916 
Correct output: 77.1794883917  | Program output: 71.3589767834 
Correct output: -67.6536129502 | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_inc})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec integer_rot tagged_67 float_flush 61 integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_div float_inc float_inc float_inc float_dup_times integer_shove float_inc float_mod float_swap integer_stackdepth integer_inc)
Errors: [25.2898 10 19.9148 11 26.1155 11 3.9214 10 32.0918 11 59.1544 9 20.1392 10 5.6088 10 2.4932 10 55.1618 10 75.8347 12 25.8154 10 16.1599 10 11.0725 11 31.0 3 16.7768 12 13.0 3 54.413 9 41.1166 9 1.1009 9 49.0 2 16.7883 10 78.0 3 5.8205 10 63.6536 11]
Total: 975.4429
Mean: 19.508858
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2076.2290181999974
Median total errors in population: 1011.8023000000001
Error averages by case: (79.4960847999993 9.94 53.47708999999923 10.793 68.42945630000017 9.6 61.90876579999984 9.646 70.93534980000004 11.467 98.2112991999988 10.688 63.88101790000023 10.799 45.1952731000009 10.534 54.27584479999958 10.49 91.07432200000012 10.893 111.30489560000191 12.387 85.7740549000009 9.635 61.79993789999943 10.784 77.66177239999972 10.66 74.5389682 4.203 54.348864399999734 12.014 57.50729850000003 3.715 92.07144440000035 9.028 73.6859867999997 11.611 50.11388969999961 9.587 86.87477059999996 3.257 59.94737080000012 9.319 116.25599249999998 3.336 52.30176360000063 9.842 99.41350420000099 11.516)
Error minima by case: (16.2898 2 4.0179 2 9.8043 8 0.0786 2 32.0918 9 16.9621 1 11.1264 7 5.6088 8 2.4932 2 27.4076 8 75.8347 9 16.0923 3 9.3902 2 11.0725 2 20.9353 2 16.7768 9 12.2943 2 1.0 1 10.8929 2 0.0858 1 8.1462 1 3.0 1 14.6676 2 0.8205 1 57.8528 9)
Average genome size in population (length): 72.345
Average program size in population (points): 73.345
Average percent parens in population: 0.014
Minimum age in population: 80.8432122294395
Maximum age in population: 84.98992973977735
Average age in population: 82.97074791055469
Median age in population: 83.00596518492245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.164
Error (vector) diversity:			 0.166
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 102328065
--- Timings ---
Current time: 1529615178223 milliseconds
Total Time:         204.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.6 seconds, 38.0%
Fitness Testing:    100.1 seconds, 49.0%
Report:              26.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 45919.00900000001
Test mean error for best: 22.95950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.4204408411
Correct output: 17.2828270025  | Program output: -2.6319704336 
Correct output: 23.1304489589  | Program output: -2.9850455105 
Correct output: 137.0785591646 | Program output: 133.1571183291
Correct output: -36.0917810332 | Program output: -4.0          
Correct output: -62.1419485102 | Program output: -2.9875221402 
Correct output: 17.1520909798  | Program output: -2.9871544398 
Correct output: -9.6087899132  | Program output: -4.0          
Correct output: 75.493217436   | Program output: 77.9864348719 
Correct output: 52.2037920383  | Program output: -2.9579764977 
Correct output: -79.8347132576 | Program output: -4.0          
Correct output: 154.815449196  | Program output: 180.6308983919
Correct output: -19.1443327626 | Program output: -2.9844101582 
Correct output: 180.0725301747 | Program output: 191.1450603494
Correct output: -128.3399358578 | Program output: -97.3399358578
Correct output: -20.7768369154 | Program output: -4.0          
Correct output: -106.4972590774 | Program output: -93.4972590774
Correct output: 61.4129516245  | Program output: 115.825903249 
Correct output: 38.5197606199  | Program output: -2.5968131109 
Correct output: -4.0857969085  | Program output: -2.9848681555 
Correct output: -93.8538349059 | Program output: -44.8538349059
Correct output: 27.7882694945  | Program output: 44.576538989  
Correct output: -145.332361916 | Program output: -67.332361916 
Correct output: 77.1794883917  | Program output: 71.3589767834 
Correct output: -67.6536129502 | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_inc})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec integer_rot tagged_67 float_flush 61 integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_div float_inc float_inc float_inc float_dup_times integer_shove float_inc float_mod float_swap integer_stackdepth integer_inc)
Errors: [25.2898 10 19.9148 11 26.1155 11 3.9214 10 32.0918 11 59.1544 9 20.1392 10 5.6088 10 2.4932 10 55.1618 10 75.8347 12 25.8154 10 16.1599 10 11.0725 11 31.0 3 16.7768 12 13.0 3 54.413 9 41.1166 9 1.1009 9 49.0 2 16.7883 10 78.0 3 5.8205 10 63.6536 11]
Total: 975.4429
Mean: 19.508858
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2318.428671299999
Median total errors in population: 1003.6451000000001
Error averages by case: (87.69195569999926 9.927 62.653087099998984 11.168 79.0120854000002 9.978 69.08616419999986 9.873 83.47145229999957 11.264 107.94629509999855 10.561 75.24700359999997 11.035 58.02456660000108 10.335 61.55159199999936 10.395 100.54671129999987 11.052 122.09341500000214 12.155 91.91239300000136 9.873 72.1189179999994 10.75 84.49571989999941 10.688 86.85061130000004 4.418 65.89810719999986 11.999 69.8051235000001 4.257 100.1065396000003 9.043 82.76566569999926 11.58 60.29104899999958 9.656 97.28512899999997 3.407 65.61478600000014 9.118 126.07954879999996 3.564 60.09902990000081 9.824 110.5467221000011 11.315)
Error minima by case: (17.2898 2 3.6348 8 0.9233 8 0.0786 2 32.0918 10 17.975 1 8.7545 7 5.6088 8 2.4932 2 2.6114 8 75.8347 8 17.0923 3 13.1443 1 11.0725 3 30.0 2 16.7768 9 12.0 2 1.5 1 16.889 8 0.0858 2 5.6222 1 3.5 1 13.6676 2 0.166 1 63.6536 9)
Average genome size in population (length): 74.737
Average program size in population (points): 75.737
Average percent parens in population: 0.013
Minimum age in population: 82.37804575517869
Maximum age in population: 86.75991680202523
Average age in population: 84.41558421660429
Median age in population: 84.48833941535122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.161
Error (vector) diversity:			 0.164
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 104196490
--- Timings ---
Current time: 1529615181848 milliseconds
Total Time:         208.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.1 seconds, 38.0%
Fitness Testing:    101.9 seconds, 49.0%
Report:              27.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 45416.267799999994
Test mean error for best: 22.70813
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.4204408411
Correct output: 17.2828270025  | Program output: -6.6319704336 
Correct output: 23.1304489589  | Program output: -6.9850455105 
Correct output: 137.0785591646 | Program output: 129.1571183291
Correct output: -36.0917810332 | Program output: -8.0          
Correct output: -62.1419485102 | Program output: -6.9875221402 
Correct output: 17.1520909798  | Program output: -6.9871544398 
Correct output: -9.6087899132  | Program output: -8.0          
Correct output: 75.493217436   | Program output: 73.9864348719 
Correct output: 52.2037920383  | Program output: -6.9579764977 
Correct output: -79.8347132576 | Program output: -8.0          
Correct output: 154.815449196  | Program output: 176.6308983919
Correct output: -19.1443327626 | Program output: -6.9844101582 
Correct output: 180.0725301747 | Program output: 187.1450603494
Correct output: -128.3399358578 | Program output: -101.3399358578
Correct output: -20.7768369154 | Program output: -8.0          
Correct output: -106.4972590774 | Program output: -97.4972590774
Correct output: 61.4129516245  | Program output: 111.825903249 
Correct output: 38.5197606199  | Program output: -6.5968131109 
Correct output: -4.0857969085  | Program output: -6.9848681555 
Correct output: -93.8538349059 | Program output: -48.8538349059
Correct output: 27.7882694945  | Program output: 40.576538989  
Correct output: -145.332361916 | Program output: -71.332361916 
Correct output: 77.1794883917  | Program output: 67.3589767834 
Correct output: -67.6536129502 | Program output: -8.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec integer_rot tagged_67 float_flush 61 integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_div float_inc float_inc float_inc float_dec integer_shove float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [29.2898 10 23.9148 11 30.1155 11 7.9214 11 28.0918 11 55.1544 9 24.1392 10 1.6088 10 1.5068 10 59.1618 11 71.8347 12 21.8154 10 12.1599 10 7.0725 10 27.0 2 12.7768 12 9.0 3 50.413 9 45.1166 9 2.8991 9 45.0 2 12.7883 10 74.0 3 9.8205 10 59.6536 11]
Total: 948.2547000000001
Mean: 18.965094
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2053.274065499998
Median total errors in population: 1003.6451000000001
Error averages by case: (79.64264619999928 10.028 54.58848219999917 11.084 71.44411550000015 10.437 61.52479159999953 9.98 67.18958590000044 11.145 98.05130909999883 10.195 67.52768910000009 10.776 41.45455830000086 10.253 53.343292099999495 10.201 91.63843849999994 10.945 107.53815390000184 12.088 84.52289330000106 9.963 62.52682409999937 10.452 78.06754699999969 10.759 72.78829260000002 4.504 50.4959542999997 11.783 55.60701420000005 4.375 91.92534750000034 9.144 74.94376139999972 10.838 51.072804199999624 9.389 82.67623799999996 3.354 56.95222620000012 9.505 112.74082649999994 3.868 53.12962430000074 9.928 95.6636495000009 11.224)
Error minima by case: (0.2044 2 9.5358 2 10.3043 7 0.0786 2 10.1836 9 17.975 1 11.1131 8 1.6088 7 1.4191 2 3.6114 8 23.9006 8 17.0923 3 7.9341 1 7.0725 3 27.0 2 12.5537 8 9.0 2 1.5 2 30.1906 2 0.0858 2 6.1462 1 1.5 1 12.6676 2 0.1795 1 11.7195 8)
Average genome size in population (length): 76.73
Average program size in population (points): 77.73
Average percent parens in population: 0.013
Minimum age in population: 83.57544809173059
Maximum age in population: 87.59843809616928
Average age in population: 85.99097814474437
Median age in population: 86.03161248556079
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.205
Error (vector) diversity:			 0.211
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 106114765
--- Timings ---
Current time: 1529615185456 milliseconds
Total Time:         211.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.4 seconds, 38.0%
Fitness Testing:    103.7 seconds, 49.0%
Report:              27.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 45416.267799999994
Test mean error for best: 22.70813
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.4204408411
Correct output: 17.2828270025  | Program output: -6.6319704336 
Correct output: 23.1304489589  | Program output: -6.9850455105 
Correct output: 137.0785591646 | Program output: 129.1571183291
Correct output: -36.0917810332 | Program output: -8.0          
Correct output: -62.1419485102 | Program output: -6.9875221402 
Correct output: 17.1520909798  | Program output: -6.9871544398 
Correct output: -9.6087899132  | Program output: -8.0          
Correct output: 75.493217436   | Program output: 73.9864348719 
Correct output: 52.2037920383  | Program output: -6.9579764977 
Correct output: -79.8347132576 | Program output: -8.0          
Correct output: 154.815449196  | Program output: 176.6308983919
Correct output: -19.1443327626 | Program output: -6.9844101582 
Correct output: 180.0725301747 | Program output: 187.1450603494
Correct output: -128.3399358578 | Program output: -101.3399358578
Correct output: -20.7768369154 | Program output: -8.0          
Correct output: -106.4972590774 | Program output: -97.4972590774
Correct output: 61.4129516245  | Program output: 111.825903249 
Correct output: 38.5197606199  | Program output: -6.5968131109 
Correct output: -4.0857969085  | Program output: -6.9848681555 
Correct output: -93.8538349059 | Program output: -48.8538349059
Correct output: 27.7882694945  | Program output: 40.576538989  
Correct output: -145.332361916 | Program output: -71.332361916 
Correct output: 77.1794883917  | Program output: 67.3589767834 
Correct output: -67.6536129502 | Program output: -8.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap} {:instruction integer_max} {:instruction integer_shove})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 float_yankdup float_add integer_add tagged_800 integer_dec integer_rot tagged_67 float_flush 61 integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin float_dec float_div float_inc float_inc float_inc float_dup_times integer_shove float_inc float_mod float_swap integer_max integer_shove)
Errors: [29.2898 10 23.9148 11 30.1155 11 7.9214 11 28.0918 11 55.1544 9 24.1392 10 1.6088 10 1.5068 10 59.1618 11 71.8347 12 21.8154 10 12.1599 10 7.0725 10 27.0 2 12.7768 12 9.0 3 50.413 9 45.1166 9 2.8991 9 45.0 2 12.7883 10 74.0 3 9.8205 10 59.6536 11]
Total: 948.2547000000001
Mean: 18.965094
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2460.5125520000006
Median total errors in population: 989.6451000000001
Error averages by case: (98.79710839999922 9.895 70.57311279999897 11.111 88.6040839000001 11.151 79.95712340000043 9.913 84.13211829999943 11.058 112.81266479999923 9.631 84.5245058 10.474 58.72395470000108 10.272 69.76022349999892 9.73 109.02802160000043 10.745 122.91235940000252 12.066 100.45749610000173 9.863 77.80024719999923 10.163 94.26405289999899 10.639 88.65771370000012 4.548 67.04690309999988 11.757 71.31658660000006 4.497 107.40212180000032 8.978 89.54572879999907 9.862 66.83202669999945 9.061 99.99770769999985 3.283 72.10792010000013 9.652 129.51111439999997 4.325 70.80171550000085 9.808 111.23394080000124 11.23)
Error minima by case: (20.2898 2 3.7984 2 7.7816 8 0.0786 2 22.2375 9 19.975 1 4.458 8 1.6088 9 0.4154 2 8.6511 7 28.4946 7 21.8154 2 12.1443 1 7.0725 2 27.0 2 12.7768 7 9.0 2 2.5 2 2.5423 2 0.0546 2 6.1462 1 4.0 1 12.6676 2 0.8205 1 14.6757 8)
Average genome size in population (length): 79.444
Average program size in population (points): 80.444
Average percent parens in population: 0.013
Minimum age in population: 85.2565053250386
Maximum age in population: 89.26821861567107
Average age in population: 87.52291014525105
Median age in population: 87.5495489128246
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.208
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 108100865
--- Timings ---
Current time: 1529615189156 milliseconds
Total Time:         215.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.7 seconds, 37.9%
Fitness Testing:    105.5 seconds, 49.0%
Report:              28.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 45376.33419999999
Test mean error for best: 22.68817
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 121.4204408411
Correct output: 17.2828270025  | Program output: -7.6319704336 
Correct output: 23.1304489589  | Program output: -7.9850455105 
Correct output: 137.0785591646 | Program output: 128.1571183291
Correct output: -36.0917810332 | Program output: -9.0          
Correct output: -62.1419485102 | Program output: -7.9875221402 
Correct output: 17.1520909798  | Program output: -7.9871544398 
Correct output: -9.6087899132  | Program output: -9.0          
Correct output: 75.493217436   | Program output: 72.9864348719 
Correct output: 52.2037920383  | Program output: -7.9579764977 
Correct output: -79.8347132576 | Program output: -9.0          
Correct output: 154.815449196  | Program output: 175.6308983919
Correct output: -19.1443327626 | Program output: -7.9844101582 
Correct output: 180.0725301747 | Program output: 186.1450603494
Correct output: -128.3399358578 | Program output: -102.3399358578
Correct output: -20.7768369154 | Program output: -9.0          
Correct output: -106.4972590774 | Program output: -98.4972590774
Correct output: 61.4129516245  | Program output: 110.825903249 
Correct output: 38.5197606199  | Program output: -7.5968131109 
Correct output: -4.0857969085  | Program output: -7.9848681555 
Correct output: -93.8538349059 | Program output: -49.8538349059
Correct output: 27.7882694945  | Program output: 39.576538989  
Correct output: -145.332361916 | Program output: -72.332361916 
Correct output: 77.1794883917  | Program output: 66.3589767834 
Correct output: -67.6536129502 | Program output: -9.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec integer_rot tagged_67 float_flush tagged_67 float_flush 61 integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_div float_inc float_inc float_inc float_dec integer_shove)
Errors: [30.2898 9 24.9148 10 31.1155 11 8.9214 11 27.0918 11 54.1544 10 25.1392 9 0.6088 9 2.5068 10 60.1618 11 70.8347 11 20.8154 10 11.1599 10 6.0725 10 26.0 2 11.7768 12 8.0 3 49.413 9 46.1166 9 3.8991 9 44.0 2 11.7883 10 73.0 3 10.8205 11 58.6536 11]
Total: 940.2547000000001
Mean: 18.805094
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2594.686271000004
Median total errors in population: 975.4429
Error averages by case: (103.58300139999912 10.036 75.84862939999907 11.142 97.47024950000001 11.271 85.3019339000009 10.105 89.74426969999936 11.125 117.68252869999945 9.377 93.96846460000032 10.447 64.42958340000118 10.301 71.98618139999886 9.806 113.01956170000079 10.575 127.5487696000026 12.044 103.74119970000189 9.986 83.0343752999992 10.02 96.85537439999912 10.687 96.5651910000001 4.488 71.86256820000018 11.964 78.2146560000001 4.568 112.07235250000025 9.145 95.5600860999991 9.763 72.66941849999964 8.991 107.00688329999987 3.558 74.85760430000012 9.877 136.44543249999992 4.5 74.18627950000096 9.991 116.11267640000136 11.152)
Error minima by case: (18.3784 2 3.3392 2 21.1155 7 0.9214 2 27.0918 9 20.0 1 8.2189 8 0.6088 8 0.4932 1 12.98 8 70.8347 2 20.0264 2 2.1443 1 5.2724 3 26.0 2 10.4134 1 8.0 2 2.0 1 17.6968 2 0.0078 1 5.1462 1 1.9294 1 11.6676 2 0.8205 1 58.6536 2)
Average genome size in population (length): 81.312
Average program size in population (points): 82.312
Average percent parens in population: 0.012
Minimum age in population: 86.96445641312333
Maximum age in population: 90.77303204990805
Average age in population: 88.97200928698103
Median age in population: 88.99057487216533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.195
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 110133790
--- Timings ---
Current time: 1529615192868 milliseconds
Total Time:         219.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 37.9%
Fitness Testing:    107.3 seconds, 49.0%
Report:              28.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 45276.36280000001
Test mean error for best: 22.63818
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.4204408411
Correct output: 17.2828270025  | Program output: -9.6319704336 
Correct output: 23.1304489589  | Program output: -9.9850455105 
Correct output: 137.0785591646 | Program output: 126.1571183291
Correct output: -36.0917810332 | Program output: -11.0         
Correct output: -62.1419485102 | Program output: -9.9875221402 
Correct output: 17.1520909798  | Program output: -9.9871544398 
Correct output: -9.6087899132  | Program output: -11.0         
Correct output: 75.493217436   | Program output: 70.9864348719 
Correct output: 52.2037920383  | Program output: -9.9579764977 
Correct output: -79.8347132576 | Program output: -11.0         
Correct output: 154.815449196  | Program output: 173.6308983919
Correct output: -19.1443327626 | Program output: -9.9844101582 
Correct output: 180.0725301747 | Program output: 184.1450603494
Correct output: -128.3399358578 | Program output: -104.3399358578
Correct output: -20.7768369154 | Program output: -11.0         
Correct output: -106.4972590774 | Program output: -100.4972590774
Correct output: 61.4129516245  | Program output: 108.825903249 
Correct output: 38.5197606199  | Program output: -9.5968131109 
Correct output: -4.0857969085  | Program output: -9.9848681555 
Correct output: -93.8538349059 | Program output: -51.8538349059
Correct output: 27.7882694945  | Program output: 37.576538989  
Correct output: -145.332361916 | Program output: -74.332361916 
Correct output: 77.1794883917  | Program output: 64.3589767834 
Correct output: -67.6536129502 | Program output: -11.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction float_mult} {:instruction integer_dec} {:instruction 61} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction in1} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec integer_rot float_mult integer_dec 61 integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod in1 in1 float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_dec print_float float_min float_dec float_div float_inc float_inc float_inc float_dec integer_shove integer_yank float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times)
Errors: [32.2898 10 26.9148 11 33.1155 11 10.9214 11 25.0918 11 52.1544 10 27.1392 10 1.3912 11 4.5068 10 62.1618 11 68.8347 12 18.8154 10 9.1599 9 4.0725 10 24.0 2 9.7768 12 6.0 1 47.413 10 48.1166 9 5.8991 9 42.0 2 9.7883 9 71.0 2 12.8205 11 56.6536 11]
Total: 935.0371000000001
Mean: 18.700743
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2361.9994024000066
Median total errors in population: 975.4429
Error averages by case: (94.54747089999917 9.917 67.7308869999992 11.019 87.88971739999994 11.083 76.28163130000044 10.107 79.97363589999951 11.023 107.95233459999952 9.529 83.5309525000004 10.357 54.76008290000099 10.189 65.22172779999956 9.649 104.93774600000086 10.772 118.92907820000227 11.814 93.80526600000157 9.898 72.50640429999933 10.043 86.24495249999929 10.296 85.40507590000003 4.003 62.78588639999974 11.908 68.04046930000008 4.304 100.62620300000029 9.075 87.94409949999921 9.618 62.6279682999998 8.866 97.11739469999988 3.393 68.44397420000014 9.821 126.74393959999996 4.321 68.79770680000087 10.047 107.2337974000013 10.869)
Error minima by case: (20.2898 2 2.4141 1 20.5542 7 0.9214 2 7.0526 7 14.482 2 14.6047 9 0.3912 7 0.4691 1 5.6114 8 58.5041 2 15.2538 2 9.1443 1 0.4881 2 24.0 2 2.6695 1 6.0 1 1.0 1 24.5988 1 0.0541 1 1.1462 1 3.0 1 7.6676 2 0.8205 2 47.9608 2)
Average genome size in population (length): 84.861
Average program size in population (points): 85.861
Average percent parens in population: 0.012
Minimum age in population: 87.96445641312333
Maximum age in population: 92.37220969335625
Average age in population: 90.33718630026189
Median age in population: 90.38630781012884
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.217
Error (vector) diversity:			 0.219
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 112255440
--- Timings ---
Current time: 1529615196646 milliseconds
Total Time:         222.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.4 seconds, 37.9%
Fitness Testing:    109.2 seconds, 49.0%
Report:              29.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 45117.77949999994
Test mean error for best: 22.55889
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.4204408411
Correct output: 17.2828270025  | Program output: -8.2639408673 
Correct output: 23.1304489589  | Program output: -8.970091021  
Correct output: 137.0785591646 | Program output: 127.1571183291
Correct output: -36.0917810332 | Program output: -10.0         
Correct output: -62.1419485102 | Program output: -8.9750442803 
Correct output: 17.1520909798  | Program output: -8.9743088796 
Correct output: -9.6087899132  | Program output: -10.0         
Correct output: 75.493217436   | Program output: 71.9864348719 
Correct output: 52.2037920383  | Program output: -8.9159529954 
Correct output: -79.8347132576 | Program output: -10.0         
Correct output: 154.815449196  | Program output: 174.6308983919
Correct output: -19.1443327626 | Program output: -8.9688203164 
Correct output: 180.0725301747 | Program output: 185.1450603494
Correct output: -128.3399358578 | Program output: -104.3399358578
Correct output: -20.7768369154 | Program output: -10.0         
Correct output: -106.4972590774 | Program output: -100.4972590774
Correct output: 61.4129516245  | Program output: 109.825903249 
Correct output: 38.5197606199  | Program output: -8.1936262217 
Correct output: -4.0857969085  | Program output: -8.9697363111 
Correct output: -93.8538349059 | Program output: -51.8538349059
Correct output: 27.7882694945  | Program output: 38.576538989  
Correct output: -145.332361916 | Program output: -74.332361916 
Correct output: 77.1794883917  | Program output: 65.3589767834 
Correct output: -67.6536129502 | Program output: -10.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_max} {:instruction -76} {:instruction float_sin} {:instruction float_tan} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_cos} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_swap})
Best program: (tag_float_237 integer_mod float_sub float_pop integer_stackdepth integer_stackdepth integer_mod float_sub integer_max -76 float_sin float_tan float_min integer_fromfloat float_add integer_add float_sin integer_dec float_dup tagged_67 float_cos float_dup_items float_cos float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_dec integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_dup_times float_dec float_div print_float float_min float_dec float_div float_inc float_inc float_inc float_dup_times integer_shove float_inc float_mod float_swap)
Errors: [31.2898 10 25.5468 11 32.1005 11 9.9214 10 26.0918 11 53.1669 10 26.1264 10 0.3912 11 3.5068 10 61.1197 11 69.8347 12 19.8154 9 10.1755 11 5.0725 10 24.0 2 10.7768 11 6.0 1 48.413 10 46.7134 8 4.8839 9 42.0 2 10.7883 10 71.0 2 11.8205 11 57.6536 11]
Total: 932.2089000000001
Mean: 18.644178
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2771.7859638999953
Median total errors in population: 951.4129
Error averages by case: (114.78937659999912 9.853 82.28286899999914 10.945 105.17376649999993 11.223 96.85679030000122 10.397 96.70204409999893 11.122 121.31707159999958 9.496 101.35525980000058 10.319 71.94149510000105 10.245 80.28681930000059 9.632 120.82620460000086 11.093 133.93922080000252 11.52 110.50466000000179 9.873 87.34900869999925 9.883 104.236401699999 10.022 102.9857598000001 4.015 78.89569170000088 11.805 85.75613790000007 4.459 116.47281070000028 9.102 102.1620689999988 9.724 80.27870989999985 8.783 113.8840586999999 3.674 80.02567450000015 9.822 143.67406689999996 4.56 85.2504426000009 10.221 122.41855410000147 10.633)
Error minima by case: (22.2898 2 3.0311 2 4.5525 8 0.9214 2 6.1836 8 20.0 1 16.0203 8 0.3912 7 0.4809 1 30.3235 6 67.8347 2 7.8758 2 7.1602 1 0.368 2 16.9379 2 8.5537 1 2.2455 1 1.5 1 19.967 1 0.0711 1 3.1462 1 3.5 1 9.6676 2 2.8205 1 53.3346 2)
Average genome size in population (length): 91.2
Average program size in population (points): 92.2
Average percent parens in population: 0.011
Minimum age in population: 89.63568245251481
Maximum age in population: 93.45791821912282
Average age in population: 91.6669373623371
Median age in population: 91.6625825047691
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.242
Error (vector) diversity:			 0.248
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 114535715
--- Timings ---
Current time: 1529615200584 milliseconds
Total Time:         226.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.8 seconds, 37.8%
Fitness Testing:    111.2 seconds, 49.1%
Report:              29.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 45193.62089999998
Test mean error for best: 22.59681
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.4204408411
Correct output: 17.2828270025  | Program output: -13.2639408673
Correct output: 23.1304489589  | Program output: -13.970091021 
Correct output: 137.0785591646 | Program output: 122.1571183291
Correct output: -36.0917810332 | Program output: -15.0         
Correct output: -62.1419485102 | Program output: -13.9750442803
Correct output: 17.1520909798  | Program output: -13.9743088796
Correct output: -9.6087899132  | Program output: -15.0         
Correct output: 75.493217436   | Program output: 66.9864348719 
Correct output: 52.2037920383  | Program output: -13.9159529954
Correct output: -79.8347132576 | Program output: -15.0         
Correct output: 154.815449196  | Program output: 169.6308983919
Correct output: -19.1443327626 | Program output: -13.9688203164
Correct output: 180.0725301747 | Program output: 180.1450603494
Correct output: -128.3399358578 | Program output: -109.3399358578
Correct output: -20.7768369154 | Program output: -15.0         
Correct output: -106.4972590774 | Program output: -105.4972590774
Correct output: 61.4129516245  | Program output: 104.825903249 
Correct output: 38.5197606199  | Program output: -13.1936262217
Correct output: -4.0857969085  | Program output: -13.9697363111
Correct output: -93.8538349059 | Program output: -56.8538349059
Correct output: 27.7882694945  | Program output: 33.576538989  
Correct output: -145.332361916 | Program output: -79.332361916 
Correct output: 77.1794883917  | Program output: 60.3589767834 
Correct output: -67.6536129502 | Program output: -15.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_pop float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_max float_sub float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin float_dec float_div float_inc float_inc float_inc float_dup_times)
Errors: [36.2898 10 30.5468 11 37.1005 11 14.9214 11 21.0918 11 48.1669 10 31.1264 10 5.3912 11 8.5068 11 66.1197 12 64.8347 11 14.8154 10 5.1755 10 0.0725 9 19.0 2 5.7768 12 1.0 1 43.413 9 51.7134 10 9.8839 10 37.0 2 5.7883 10 66.0 3 16.8205 11 52.6536 11]
Total: 922.2089000000001
Mean: 18.444178
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2364.642349700001
Median total errors in population: 948.2547000000001
Error averages by case: (98.84907869999915 9.668 72.96524119999917 10.741 92.16882069999988 11.271 79.6267258000003 10.595 77.86588809999994 11.15 107.07558909999956 9.643 87.69834690000036 10.099 53.2332138000005 10.186 62.96259520000069 9.766 109.58333080000082 11.156 116.54462770000212 11.268 91.670118500001 9.803 71.95852889999937 9.888 82.89845189999981 9.935 85.44251480000004 3.681 60.602272199999746 11.597 67.01047110000005 4.159 97.49009210000028 9.229 92.15321569999927 9.554 66.36700900000052 9.02 96.1443147999999 3.46 63.022188500000134 9.741 125.85928699999997 4.289 69.46772290000082 10.341 105.06670430000116 10.676)
Error minima by case: (20.2898 2 6.4141 1 21.1155 7 0.9214 2 0.1836 7 19.0719 1 15.1392 7 0.3485 8 0.4932 1 18.98 8 0.1413 2 13.8154 2 2.1443 2 0.0725 2 19.0 2 2.5537 1 1.0 1 2.0 1 28.1355 1 0.0998 1 3.1462 1 4.0 1 0.6676 2 0.8205 1 12.3224 2)
Average genome size in population (length): 95.015
Average program size in population (points): 96.015
Average percent parens in population: 0.011
Minimum age in population: 90.63568245251481
Maximum age in population: 95.11331385148247
Average age in population: 93.00889760371481
Median age in population: 93.04396237212715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.225
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 116911590
--- Timings ---
Current time: 1529615204764 milliseconds
Total Time:         230.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.2 seconds, 37.8%
Fitness Testing:    113.3 seconds, 49.1%
Report:              30.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 45193.62089999998
Test mean error for best: 22.59681
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.4204408411
Correct output: 17.2828270025  | Program output: -13.2639408673
Correct output: 23.1304489589  | Program output: -13.970091021 
Correct output: 137.0785591646 | Program output: 122.1571183291
Correct output: -36.0917810332 | Program output: -15.0         
Correct output: -62.1419485102 | Program output: -13.9750442803
Correct output: 17.1520909798  | Program output: -13.9743088796
Correct output: -9.6087899132  | Program output: -15.0         
Correct output: 75.493217436   | Program output: 66.9864348719 
Correct output: 52.2037920383  | Program output: -13.9159529954
Correct output: -79.8347132576 | Program output: -15.0         
Correct output: 154.815449196  | Program output: 169.6308983919
Correct output: -19.1443327626 | Program output: -13.9688203164
Correct output: 180.0725301747 | Program output: 180.1450603494
Correct output: -128.3399358578 | Program output: -109.3399358578
Correct output: -20.7768369154 | Program output: -15.0         
Correct output: -106.4972590774 | Program output: -105.4972590774
Correct output: 61.4129516245  | Program output: 104.825903249 
Correct output: 38.5197606199  | Program output: -13.1936262217
Correct output: -4.0857969085  | Program output: -13.9697363111
Correct output: -93.8538349059 | Program output: -56.8538349059
Correct output: 27.7882694945  | Program output: 33.576538989  
Correct output: -145.332361916 | Program output: -79.332361916 
Correct output: 77.1794883917  | Program output: 60.3589767834 
Correct output: -67.6536129502 | Program output: -15.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_mod float_yankdup float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_max float_sub float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin float_dec float_div float_inc float_inc float_inc float_dup_times)
Errors: [36.2898 10 30.5468 11 37.1005 11 14.9214 11 21.0918 11 48.1669 10 31.1264 10 5.3912 11 8.5068 11 66.1197 12 64.8347 11 14.8154 10 5.1755 10 0.0725 9 19.0 2 5.7768 12 1.0 1 43.413 9 51.7134 10 9.8839 10 37.0 2 5.7883 10 66.0 3 16.8205 11 52.6536 11]
Total: 922.2089000000001
Mean: 18.444178
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2389.5893185
Median total errors in population: 940.2547000000001
Error averages by case: (104.93296209999922 9.816 72.12527319999924 10.791 92.36031869999994 11.337 86.27207030000046 10.61 76.5675898000002 11.12 104.31935309999936 9.823 87.9100632000002 10.151 52.588257399999826 10.465 68.0410924000008 9.923 109.9557425000005 11.206 114.8271670000019 11.133 96.99858870000125 9.843 70.62264109999941 9.779 89.94538479999956 10.029 84.4723607 3.89 58.71328209999977 11.311 67.26690610000006 3.92 100.86929390000029 9.594 92.27444769999933 9.693 67.66960320000052 9.097 94.28044669999991 3.659 61.440632700000165 9.799 125.37309349999991 4.317 74.15763140000078 10.639 103.07111620000101 10.589)
Error minima by case: (23.2898 2 2.6861 1 0.5525 8 1.9214 2 7.1836 8 10.0082 1 3.235 8 0.1821 7 0.4932 1 18.1721 6 61.8347 1 11.8154 2 1.1755 2 0.0725 2 17.0 1 2.7768 1 0.0 0 0.4411 1 20.967 2 0.0072 1 0.8538 1 0.907 1 2.6676 2 3.8205 1 49.6536 1)
Average genome size in population (length): 95.396
Average program size in population (points): 96.396
Average percent parens in population: 0.011
Minimum age in population: 91.98172351134396
Maximum age in population: 96.50255620531823
Average age in population: 94.4072740029277
Median age in population: 94.44519236417176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.868
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.277
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 119296915
--- Timings ---
Current time: 1529615208874 milliseconds
Total Time:         234.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.6 seconds, 37.7%
Fitness Testing:    115.4 seconds, 49.1%
Report:              30.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 45248.52989999998
Test mean error for best: 22.62426
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.4204408411
Correct output: 17.2828270025  | Program output: -14.2639408673
Correct output: 23.1304489589  | Program output: -14.970091021 
Correct output: 137.0785591646 | Program output: 121.1571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -14.9750442803
Correct output: 17.1520909798  | Program output: -14.9743088796
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 65.9864348719 
Correct output: 52.2037920383  | Program output: -14.9159529954
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 168.6308983919
Correct output: -19.1443327626 | Program output: -14.9688203164
Correct output: 180.0725301747 | Program output: 179.1450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 103.825903249 
Correct output: 38.5197606199  | Program output: -14.1936262217
Correct output: -4.0857969085  | Program output: -14.9697363111
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 32.576538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 59.3589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sin} {:instruction float_tan} {:instruction float_min} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_add} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times})
Best program: (tag_float_237 float_sin float_tan float_min float_dup_times float_add integer_add float_sin integer_dec float_dup tagged_67 float_cos float_dup_items integer_dup_items float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_div float_dec float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec in2 float_dec float_dec print_float float_min float_dec float_div float_inc float_inc float_inc float_dec integer_shove integer_yank float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times)
Errors: [37.2898 10 31.5468 11 38.1005 12 15.9214 11 20.0918 10 47.1669 10 32.1264 10 6.3912 11 9.5068 10 67.1197 12 63.8347 12 13.8154 10 4.1755 10 0.9275 11 18.0 2 4.7768 12 0.0 0 42.413 10 52.7134 10 10.8839 9 36.0 2 4.7883 10 65.0 3 17.8205 11 51.6536 11]
Total: 922.0639000000001
Mean: 18.441278
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2674.0280089000007
Median total errors in population: 936.0371000000001
Error averages by case: (121.58257409999918 9.928 85.02553349999893 10.975 100.55237990000005 11.509 103.11425710000131 10.646 87.86649159999926 11.175 110.50224549999918 9.86 96.60776590000005 10.336 66.13753409999909 10.92 83.27276490000102 10.039 120.51234630000046 11.369 125.54125470000221 11.273 110.04756260000201 9.879 75.72107429999923 9.738 105.05194769999898 10.02 93.73199640000016 3.973 70.18139010000034 11.384 75.71683090000008 3.415 112.42195050000028 9.744 104.85194809999865 9.939 75.14470920000001 9.334 103.36793619999987 3.767 76.4617899000001 9.713 132.57435880000006 4.283 89.48539510000089 10.598 114.14797150000128 10.589)
Error minima by case: (24.2898 1 5.9564 1 0.3043 7 2.8574 2 2.1836 8 12.6824 1 0.8695 8 0.1088 7 0.4932 1 12.6114 7 58.8347 1 8.8154 2 0.1599 1 0.0725 1 14.0 1 0.2232 1 0.0 0 7.0 1 5.0917 2 0.0546 2 0.1462 1 0.2117 2 0.3324 2 4.8205 1 46.6536 1)
Average genome size in population (length): 98.121
Average program size in population (points): 99.121
Average percent parens in population: 0.010
Minimum age in population: 93.66067489647178
Maximum age in population: 97.8533673024177
Average age in population: 95.87209456053806
Median age in population: 95.91043356738705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.273
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 121749965
--- Timings ---
Current time: 1529615212990 milliseconds
Total Time:         239.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.0 seconds, 37.6%
Fitness Testing:    117.5 seconds, 49.2%
Report:              31.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 45248.52989999998
Test mean error for best: 22.62426
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.4204408411
Correct output: 17.2828270025  | Program output: -14.2639408673
Correct output: 23.1304489589  | Program output: -14.970091021 
Correct output: 137.0785591646 | Program output: 121.1571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -14.9750442803
Correct output: 17.1520909798  | Program output: -14.9743088796
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 65.9864348719 
Correct output: 52.2037920383  | Program output: -14.9159529954
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 168.6308983919
Correct output: -19.1443327626 | Program output: -14.9688203164
Correct output: 180.0725301747 | Program output: 179.1450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 103.825903249 
Correct output: 38.5197606199  | Program output: -14.1936262217
Correct output: -4.0857969085  | Program output: -14.9697363111
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 32.576538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 59.3589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction tagged_800} {:instruction integer_dec} {:instruction integer_rot} {:instruction tagged_67} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc})
Best program: (tag_float_237 integer_max integer_fromfloat float_yankdup integer_pop integer_pop integer_add float_dup_items integer_dup_items integer_dup_items float_mod tagged_800 integer_dec integer_rot tagged_67 float_flush float_dup_items integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div integer_yank float_dec float_div float_dec float_sub float_sub float_dup_items integer_yank float_dec integer_yank float_mod float_div float_dec float_div float_dec float_div float_sub float_dup_times float_dec integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_dec float_div float_dup_items integer_mult integer_yank float_dec float_div float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_stackdepth float_inc float_inc float_inc float_dec integer_yankdup float_inc float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times float_inc float_inc float_min float_inc float_inc print_float float_inc)
Errors: [37.2898 10 31.5468 11 38.1005 12 15.9214 11 20.0918 10 47.1669 10 32.1264 10 6.3912 11 9.5068 10 67.1197 12 63.8347 12 13.8154 10 4.1755 10 0.9275 11 18.0 2 4.7768 12 0.0 0 42.413 10 52.7134 10 10.8839 9 36.0 2 4.7883 10 65.0 3 17.8205 11 51.6536 11]
Total: 922.0639000000001
Mean: 18.441278
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3198.6478108000033
Median total errors in population: 932.2089000000001
Error averages by case: (139.90143109999914 10.072 109.14381109999877 11.177 130.46104340000005 11.744 120.67679920000145 10.797 104.96380989999903 11.102 135.65247129999915 9.935 125.84921379999967 10.469 86.76414849999891 11.05 101.95203560000118 10.338 144.9040373000002 11.569 143.97191300000264 11.428 125.77589960000208 10.017 102.51443229999911 9.877 120.81958749999909 10.155 112.81351900000006 4.162 89.92191600000102 11.618 96.81793540000007 3.467 130.8898626000003 9.758 127.58856629999838 10.362 104.64129829999996 9.665 121.59627669999982 4.073 91.89638640000014 9.892 149.75252030000001 4.66 107.77104730000103 10.67 132.75084890000153 10.8)
Error minima by case: (21.2898 1 11.7483 2 2.1957 8 0.0786 2 6.8164 9 1.3115 1 4.8175 8 0.2062 8 0.5068 1 10.6114 8 23.9426 1 4.8154 2 0.1443 1 0.0725 1 10.0 1 0.7768 1 0.0 0 6.8043 1 26.6968 2 0.0199 1 0.1462 1 0.7883 1 0.3324 2 1.7258 1 42.6536 1)
Average genome size in population (length): 100.755
Average program size in population (points): 101.755
Average percent parens in population: 0.010
Minimum age in population: 95.37958659343019
Maximum age in population: 99.11671792010382
Average age in population: 97.35015491100835
Median age in population: 97.3848046458866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.271
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 124268840
--- Timings ---
Current time: 1529615217020 milliseconds
Total Time:         243.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.3 seconds, 37.6%
Fitness Testing:    119.7 seconds, 49.2%
Report:              32.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 45248.52989999998
Test mean error for best: 22.62426
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.4204408411
Correct output: 17.2828270025  | Program output: -14.2639408673
Correct output: 23.1304489589  | Program output: -14.970091021 
Correct output: 137.0785591646 | Program output: 121.1571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -14.9750442803
Correct output: 17.1520909798  | Program output: -14.9743088796
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 65.9864348719 
Correct output: 52.2037920383  | Program output: -14.9159529954
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 168.6308983919
Correct output: -19.1443327626 | Program output: -14.9688203164
Correct output: 180.0725301747 | Program output: 179.1450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 103.825903249 
Correct output: 38.5197606199  | Program output: -14.1936262217
Correct output: -4.0857969085  | Program output: -14.9697363111
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 32.576538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 59.3589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sin} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction integer_dup_times})
Best program: (tag_float_237 float_sin integer_dec float_dup tagged_67 float_cos float_dup_items integer_dup_items float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_div float_dec float_mod float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec in2 float_dec float_dec print_float float_min float_dec float_div float_inc float_inc float_inc float_dec integer_shove integer_yank float_inc float_inc integer_shove float_flush float_mod float_div print_float float_min integer_dup_times)
Errors: [37.2898 10 31.5468 11 38.1005 12 15.9214 11 20.0918 10 47.1669 10 32.1264 10 6.3912 11 9.5068 10 67.1197 12 63.8347 12 13.8154 10 4.1755 10 0.9275 11 18.0 2 4.7768 12 0.0 0 42.413 10 52.7134 10 10.8839 9 36.0 2 4.7883 10 65.0 3 17.8205 11 51.6536 11]
Total: 922.0639000000001
Mean: 18.441278
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3253.363704000001
Median total errors in population: 926.8921
Error averages by case: (146.1279104999992 9.977 110.97731069999864 11.071 131.61798320000014 11.772 126.41154510000166 10.751 106.61652899999882 11.068 135.908208299999 9.863 127.83177739999942 10.43 91.1926149999989 11.105 108.16392240000116 10.354 147.08797100000027 11.78 143.75008950000247 11.185 128.7265543000022 9.956 102.31289099999913 9.748 124.36198729999944 10.013 113.5365814000002 4.224 89.84424730000079 11.479 97.6958800000001 3.463 131.14630320000026 9.511 130.02643949999802 10.498 107.50993959999995 9.697 122.02792599999988 4.191 95.04944240000009 9.864 150.78661169999998 4.897 114.10225790000086 10.591 132.4227803000016 10.64)
Error minima by case: (20.2898 1 9.3652 2 2.6957 7 1.0786 2 1.2739 9 11.4396 1 8.2719 8 0.0482 7 0.4932 1 15.6114 8 45.0168 1 3.7131 2 0.1417 1 0.0521 1 11.0 1 0.2232 1 0.0 0 6.0 1 33.7759 2 0.1009 1 0.8538 1 0.2117 1 0.3324 2 0.8205 1 32.8357 1)
Average genome size in population (length): 106.011
Average program size in population (points): 107.011
Average percent parens in population: 0.009
Minimum age in population: 96.37958659343019
Maximum age in population: 100.8886289348559
Average age in population: 98.80171309131717
Median age in population: 98.8327732696007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.281
Error (vector) diversity:			 0.286
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 126919165
--- Timings ---
Current time: 1529615221172 milliseconds
Total Time:         247.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.7 seconds, 37.5%
Fitness Testing:    121.9 seconds, 49.3%
Report:              32.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 45248.52989999998
Test mean error for best: 22.62426
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.4204408411
Correct output: 17.2828270025  | Program output: -14.2639408673
Correct output: 23.1304489589  | Program output: -14.970091021 
Correct output: 137.0785591646 | Program output: 121.1571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -14.9750442803
Correct output: 17.1520909798  | Program output: -14.9743088796
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 65.9864348719 
Correct output: 52.2037920383  | Program output: -14.9159529954
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 168.6308983919
Correct output: -19.1443327626 | Program output: -14.9688203164
Correct output: 180.0725301747 | Program output: 179.1450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 103.825903249 
Correct output: 38.5197606199  | Program output: -14.1936262217
Correct output: -4.0857969085  | Program output: -14.9697363111
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 32.576538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 59.3589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_div} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times})
Best program: (tag_float_237 float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_fromfloat float_yankdup integer_stackdepth float_max float_tan float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_div float_inc float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_div float_dec float_div float_sub float_dup_items float_dec float_dec integer_max float_sub float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin float_dec float_div float_inc float_inc float_inc float_dup_times)
Errors: [37.2898 10 31.5468 11 38.1005 12 15.9214 11 20.0918 10 47.1669 10 32.1264 10 6.3912 11 9.5068 10 67.1197 12 63.8347 12 13.8154 10 4.1755 10 0.9275 11 18.0 2 4.7768 12 0.0 0 42.413 10 52.7134 10 10.8839 9 36.0 2 4.7883 10 65.0 3 17.8205 11 51.6536 11]
Total: 922.0639000000001
Mean: 18.441278
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2723.1899986000026
Median total errors in population: 925.0639000000001
Error averages by case: (122.50773129999916 9.987 93.0219636999986 11.105 110.45034960000032 11.709 103.8874444000012 10.757 84.3995623999993 10.972 115.4828092999985 10.108 106.27002939999906 10.378 69.37903539999891 11.016 87.389243400001 10.368 129.4080106999991 11.819 123.47902050000224 11.216 105.59972090000163 9.974 79.89395609999927 10.035 101.1241509999999 9.996 91.62328330000005 4.121 68.22063769999995 11.611 76.13677800000009 3.196 109.59773580000025 9.464 112.27959689999841 10.514 85.49759230000039 9.842 100.28502459999986 4.029 74.7256986000001 9.854 128.8882550999999 4.742 93.50023420000093 10.635 111.96513400000138 10.729)
Error minima by case: (2.0 1 15.6059 1 21.7079 8 1.0786 2 0.2929 8 27.0 2 13.8998 8 0.0786 7 0.5068 1 15.6114 8 55.7216 1 3.4337 2 0.1443 1 0.0725 1 11.0 1 0.2232 1 0.0 0 0.0053 1 23.8099 1 0.0145 1 1.8538 1 0.2117 1 0.3324 2 0.8205 1 44.0287 1)
Average genome size in population (length): 108.628
Average program size in population (points): 109.628
Average percent parens in population: 0.009
Minimum age in population: 97.37958659343019
Maximum age in population: 102.24571427514
Average age in population: 100.2158440907203
Median age in population: 100.2386487978108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.253
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 129634915
--- Timings ---
Current time: 1529615225457 milliseconds
Total Time:         251.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.1 seconds, 37.4%
Fitness Testing:    124.2 seconds, 49.4%
Report:              33.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 45097.015299999985
Test mean error for best: 22.54851
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.4204408411
Correct output: 17.2828270025  | Program output: -12.2639408673
Correct output: 23.1304489589  | Program output: -12.970091021 
Correct output: 137.0785591646 | Program output: 123.1571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -12.9750442803
Correct output: 17.1520909798  | Program output: -12.9743088796
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 67.9864348719 
Correct output: 52.2037920383  | Program output: -12.9159529954
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 170.6308983919
Correct output: -19.1443327626 | Program output: -12.9688203164
Correct output: 180.0725301747 | Program output: 181.1450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 105.825903249 
Correct output: 38.5197606199  | Program output: -12.1936262217
Correct output: -4.0857969085  | Program output: -12.9697363111
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 34.576538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 61.3589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_dec float_div float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank integer_yank float_dec float_shove float_dec float_dec float_mod float_div float_sub float_dup_items integer_yank float_dec integer_stackdepth float_dec float_div integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [35.2898 10 29.5468 11 36.1005 12 13.9214 11 20.0918 10 49.1669 9 30.1264 10 6.3912 11 7.5068 11 65.1197 11 63.8347 12 15.8154 10 6.1755 10 1.0725 10 18.0 2 4.7768 12 0.0 0 44.413 10 50.7134 10 8.8839 10 36.0 2 6.7883 10 65.0 3 15.8205 11 51.6536 11]
Total: 911.2089000000001
Mean: 18.224178
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2974.8926383000053
Median total errors in population: 924.9646
Error averages by case: (132.0370892999993 9.915 102.96033909999845 11.066 118.0377490000002 11.829 113.62152550000148 10.708 97.66172059999901 10.86 120.41453369999856 10.003 114.61432629999865 10.346 84.7458583999989 10.988 97.68021200000118 10.186 139.57440089999966 11.877 134.32198650000245 11.369 117.0059484000019 9.958 86.3116369999992 9.934 110.59249870000018 10.227 104.1368913000001 4.271 80.00838410000074 11.698 89.3770571000001 3.197 116.71621390000024 9.538 121.46937259999825 10.548 92.48776390000036 9.594 112.79555059999981 4.125 83.4781534000001 9.787 140.7150866000001 4.855 102.95040580000078 10.596 122.89493360000124 10.808)
Error minima by case: (26.4204 1 14.8895 1 6.1957 8 3.0276 2 1.9474 6 19.0 1 4.8595 7 0.2088 8 0.5068 1 17.6114 7 36.7649 1 1.8154 2 0.1116 2 0.0725 1 6.0 1 0.0207 1 0.0 0 1.0 1 35.5368 3 0.0858 1 3.8538 1 0.2117 1 0.3324 2 4.7258 1 24.5838 1)
Average genome size in population (length): 108.803
Average program size in population (points): 109.803
Average percent parens in population: 0.009
Minimum age in population: 98.37958659343019
Maximum age in population: 103.3243392230743
Average age in population: 101.5497985379193
Median age in population: 101.576020776894
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.237
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 132355040
--- Timings ---
Current time: 1529615229594 milliseconds
Total Time:         255.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.5 seconds, 37.3%
Fitness Testing:    126.4 seconds, 49.4%
Report:              33.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 45097.015299999985
Test mean error for best: 22.54851
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.4204408411
Correct output: 17.2828270025  | Program output: -12.2639408673
Correct output: 23.1304489589  | Program output: -12.970091021 
Correct output: 137.0785591646 | Program output: 123.1571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -12.9750442803
Correct output: 17.1520909798  | Program output: -12.9743088796
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 67.9864348719 
Correct output: 52.2037920383  | Program output: -12.9159529954
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 170.6308983919
Correct output: -19.1443327626 | Program output: -12.9688203164
Correct output: 180.0725301747 | Program output: 181.1450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 105.825903249 
Correct output: 38.5197606199  | Program output: -12.1936262217
Correct output: -4.0857969085  | Program output: -12.9697363111
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 34.576538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 61.3589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_dec float_div float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank integer_yank float_dec float_shove float_dec float_dec float_mod float_div float_sub float_dup_items integer_yank float_dec integer_stackdepth float_dec float_div integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin float_dup_times float_div float_inc)
Errors: [35.2898 10 29.5468 11 36.1005 12 13.9214 11 20.0918 10 49.1669 9 30.1264 10 6.3912 11 7.5068 11 65.1197 11 63.8347 12 15.8154 10 6.1755 10 1.0725 10 18.0 2 4.7768 12 0.0 0 44.413 10 50.7134 10 8.8839 10 36.0 2 6.7883 10 65.0 3 15.8205 11 51.6536 11]
Total: 911.2089000000001
Mean: 18.224178
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3005.1144952000004
Median total errors in population: 922.2089000000001
Error averages by case: (134.5009891999992 9.92 104.6959606999984 11.006 118.57558060000025 11.931 116.14137710000192 10.777 97.22000409999882 10.776 121.53531459999846 10.077 114.45474829999837 10.276 84.38269669999887 10.94 100.19589710000115 10.175 139.1808951999999 11.884 135.32617530000255 11.467 116.49333410000234 9.954 87.49305709999912 10.084 113.8870427000009 10.595 104.10762460000014 4.309 81.20537400000102 11.653 89.95338060000014 3.169 119.84012430000031 9.724 123.99948739999775 10.513 94.13447490000046 9.625 112.16174829999989 4.208 86.31265030000017 9.758 139.97670420000009 4.852 106.32933300000091 10.644 123.9885208000018 10.705)
Error minima by case: (16.7081 1 15.3082 2 5.6693 9 0.0786 2 3.8164 8 19.8148 2 16.1264 8 0.2755 8 0.4932 1 14.6114 8 3.0045 1 0.1846 2 0.1443 1 0.0725 1 4.0 1 0.2232 1 0.0 0 12.7065 1 10.4294 3 0.0053 1 0.8538 1 0.2117 1 0.3324 2 1.8205 1 4.1958 1)
Average genome size in population (length): 108.695
Average program size in population (points): 109.695
Average percent parens in population: 0.009
Minimum age in population: 100.6579659960089
Maximum age in population: 104.8136441171756
Average age in population: 102.9725256570481
Median age in population: 103.0319448388891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.23
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 135072490
--- Timings ---
Current time: 1529615233870 milliseconds
Total Time:         260.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.9 seconds, 37.3%
Fitness Testing:    128.7 seconds, 49.5%
Report:              34.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 45185.05689999999
Test mean error for best: 22.59253
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.4204408411
Correct output: 17.2828270025  | Program output: -13.2639408673
Correct output: 23.1304489589  | Program output: -13.970091021 
Correct output: 137.0785591646 | Program output: 122.1571183291
Correct output: -36.0917810332 | Program output: -17.0         
Correct output: -62.1419485102 | Program output: -13.9750442803
Correct output: 17.1520909798  | Program output: -13.9743088796
Correct output: -9.6087899132  | Program output: -17.0         
Correct output: 75.493217436   | Program output: 66.9864348719 
Correct output: 52.2037920383  | Program output: -13.9159529954
Correct output: -79.8347132576 | Program output: -17.0         
Correct output: 154.815449196  | Program output: 169.6308983919
Correct output: -19.1443327626 | Program output: -13.9688203164
Correct output: 180.0725301747 | Program output: 180.1450603494
Correct output: -128.3399358578 | Program output: -111.3399358578
Correct output: -20.7768369154 | Program output: -17.0         
Correct output: -106.4972590774 | Program output: -107.4972590774
Correct output: 61.4129516245  | Program output: 104.825903249 
Correct output: 38.5197606199  | Program output: -13.1936262217
Correct output: -4.0857969085  | Program output: -13.9697363111
Correct output: -93.8538349059 | Program output: -58.8538349059
Correct output: 27.7882694945  | Program output: 33.576538989  
Correct output: -145.332361916 | Program output: -81.332361916 
Correct output: 77.1794883917  | Program output: 60.3589767834 
Correct output: -67.6536129502 | Program output: -17.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_flush} {:instruction float_mod})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_sub float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_dec float_dup_items integer_yank float_dec float_div float_dec float_add float_sub integer_mult integer_yank float_dec integer_rot float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_min float_dec float_stackdepth float_inc float_inc float_inc float_dec integer_yankdup float_inc float_inc float_inc integer_shove float_flush float_mod)
Errors: [36.2898 10 30.5468 11 37.1005 11 14.9214 11 19.0918 10 48.1669 10 31.1264 10 7.3912 11 8.5068 11 66.1197 12 62.8347 12 14.8154 10 5.1755 10 0.0725 9 17.0 2 3.7768 12 1.0 1 43.413 9 51.7134 10 9.8839 10 35.0 2 5.7883 10 64.0 3 16.8205 11 50.6536 10]
Total: 909.2089000000001
Mean: 18.184177
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2570.8828034000026
Median total errors in population: 922.2089000000001
Error averages by case: (116.43953369999925 9.902 88.40490949999881 10.996 101.44496620000024 11.901 97.82979430000093 10.765 79.50631809999955 10.731 106.17413169999877 10.009 97.16887729999924 10.311 66.02761509999911 10.959 82.52768840000081 10.184 122.73602859999933 11.808 118.8228064000018 11.473 98.8105674000013 9.957 70.2815886999995 10.046 95.92910900000045 10.521 86.64557100000005 4.043 63.431160299999775 11.647 71.80522250000006 2.89 100.81525410000027 9.716 107.43335999999873 10.554 76.53896710000038 9.527 95.59319229999987 3.909 68.40779830000011 9.733 124.83058649999995 4.62 88.4851310000008 10.621 107.29062590000102 10.679)
Error minima by case: (10.1924 1 5.0033 2 2.6957 8 0.0786 2 3.8164 8 22.0 1 6.99 8 0.3912 8 0.5068 1 7.1848 8 53.8347 1 3.8154 2 0.1145 1 0.0205 1 8.0 1 0.2232 1 0.0 0 1.0 1 5.2312 2 0.1161 1 2.8538 1 0.2117 1 0.3324 2 0.8205 1 35.658 1)
Average genome size in population (length): 108.415
Average program size in population (points): 109.415
Average percent parens in population: 0.009
Minimum age in population: 101.8833999231405
Maximum age in population: 106.3507646774763
Average age in population: 104.2800394087428
Median age in population: 104.2712343308167
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.264
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 137782865
--- Timings ---
Current time: 1529615238162 milliseconds
Total Time:         264.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.3 seconds, 37.2%
Fitness Testing:    131.0 seconds, 49.6%
Report:              34.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 45185.05689999999
Test mean error for best: 22.59253
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.4204408411
Correct output: 17.2828270025  | Program output: -13.2639408673
Correct output: 23.1304489589  | Program output: -13.970091021 
Correct output: 137.0785591646 | Program output: 122.1571183291
Correct output: -36.0917810332 | Program output: -17.0         
Correct output: -62.1419485102 | Program output: -13.9750442803
Correct output: 17.1520909798  | Program output: -13.9743088796
Correct output: -9.6087899132  | Program output: -17.0         
Correct output: 75.493217436   | Program output: 66.9864348719 
Correct output: 52.2037920383  | Program output: -13.9159529954
Correct output: -79.8347132576 | Program output: -17.0         
Correct output: 154.815449196  | Program output: 169.6308983919
Correct output: -19.1443327626 | Program output: -13.9688203164
Correct output: 180.0725301747 | Program output: 180.1450603494
Correct output: -128.3399358578 | Program output: -111.3399358578
Correct output: -20.7768369154 | Program output: -17.0         
Correct output: -106.4972590774 | Program output: -107.4972590774
Correct output: 61.4129516245  | Program output: 104.825903249 
Correct output: 38.5197606199  | Program output: -13.1936262217
Correct output: -4.0857969085  | Program output: -13.9697363111
Correct output: -93.8538349059 | Program output: -58.8538349059
Correct output: 27.7882694945  | Program output: 33.576538989  
Correct output: -145.332361916 | Program output: -81.332361916 
Correct output: 77.1794883917  | Program output: 60.3589767834 
Correct output: -67.6536129502 | Program output: -17.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction tagged_800} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_add} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_mod} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_min} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction print_float})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_add integer_add tagged_800 integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_dec float_div float_sub float_dup_items float_dec float_div float_dec float_div integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_div float_div float_mod float_div float_sub float_dup_items integer_yank float_add float_dec float_dup_items integer_yank float_mod float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub integer_yank integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_times float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank integer_min float_mod float_div print_float float_min print_float)
Errors: [36.2898 10 30.5468 11 37.1005 11 14.9214 11 19.0918 10 48.1669 10 31.1264 10 7.3912 11 8.5068 11 66.1197 12 62.8347 12 14.8154 10 5.1755 10 0.0725 9 17.0 2 3.7768 12 1.0 1 43.413 9 51.7134 10 9.8839 10 35.0 2 5.7883 10 64.0 3 16.8205 11 50.6536 10]
Total: 909.2089000000001
Mean: 18.184177
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3001.871095800002
Median total errors in population: 922.2089000000001
Error averages by case: (136.25664509999922 9.946 104.76159059999877 11.081 118.20611039999983 11.832 119.67856140000184 10.747 94.2679213999991 10.819 123.352144599999 10.113 114.03725839999917 10.478 80.75418879999884 11.017 99.920003400001 10.239 139.1484182999996 11.761 133.17457440000274 11.457 121.84231760000227 9.972 87.88736939999923 10.189 118.53267860000017 10.371 101.84039210000019 4.278 78.48155250000043 11.598 87.06519990000012 3.166 121.17219980000021 9.707 123.79605679999788 10.719 93.81381980000027 9.745 110.64347579999989 4.156 87.29644240000009 9.805 139.10321159999992 4.833 105.66531090000086 10.635 121.78065180000168 10.729)
Error minima by case: (19.2898 1 10.5639 2 3.6957 7 0.9214 2 7.8164 8 8.4396 1 4.309 8 0.2088 6 0.4932 1 5.6114 8 53.6694 1 2.6699 2 0.1443 1 0.0725 1 8.0728 1 0.2232 1 0.0 0 1.0 1 8.4681 3 0.0145 1 0.1462 1 0.2117 1 0.3324 2 0.1795 1 42.2935 1)
Average genome size in population (length): 108.627
Average program size in population (points): 109.627
Average percent parens in population: 0.009
Minimum age in population: 102.9433604848568
Maximum age in population: 107.6259361287374
Average age in population: 105.683086539727
Median age in population: 105.7532129868392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.298
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 140498540
--- Timings ---
Current time: 1529615242406 milliseconds
Total Time:         268.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.6 seconds, 37.1%
Fitness Testing:    133.3 seconds, 49.7%
Report:              35.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 45145.288700000005
Test mean error for best: 22.57264
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 113.9204408411
Correct output: 17.2828270025  | Program output: -9.9235324513 
Correct output: 23.1304489589  | Program output: -13.8937293501
Correct output: 137.0785591646 | Program output: 120.6571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -13.9115513311
Correct output: 17.1520909798  | Program output: -13.9089109894
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 65.4864348719 
Correct output: 52.2037920383  | Program output: -13.6929313853
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 168.1308983919
Correct output: -19.1443327626 | Program output: -13.8891428622
Correct output: 180.0725301747 | Program output: 178.6450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 103.325903249 
Correct output: 38.5197606199  | Program output: -9.2710351486 
Correct output: -4.0857969085  | Program output: -13.8924496536
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 32.076538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 58.8589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_sub float_yankdup integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [37.7898 10 27.2064 11 37.0242 11 16.4214 11 20.0918 10 48.2304 11 31.061 9 6.3912 11 10.0068 9 65.8967 10 63.8347 12 13.3154 10 5.2552 8 1.4275 11 18.0 2 4.7768 12 0.0 0 41.913 10 47.7908 11 9.8067 11 36.0 2 4.2883 10 65.0 3 18.3205 11 51.6536 11]
Total: 908.5022000000001
Mean: 18.170044
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3097.301133500001
Median total errors in population: 922.0639000000001
Error averages by case: (141.28222299999925 9.944 105.29487299999917 11.05 120.67791329999966 11.785 124.55399470000165 10.692 96.92486329999922 10.768 128.94413989999933 10.099 117.94361139999977 10.545 83.40351769999894 11.049 104.90844750000095 10.156 139.9785418999998 11.685 136.3037233000024 11.586 129.67934550000214 9.87 93.21641969999948 10.293 125.41253069999962 10.124 104.93963730000016 4.267 81.08005530000072 11.694 90.61385620000011 3.217 127.83053760000014 9.627 123.40356249999837 10.678 98.23385450000016 9.915 113.53905389999989 4.133 92.74512630000008 9.772 142.618331 4.839 109.74486620000076 10.515 124.94110780000155 10.784)
Error minima by case: (22.2898 1 11.8744 2 2.1957 8 0.9214 2 4.0 2 18.2744 1 5.1901 7 0.2885 2 0.5068 1 3.6197 8 2.8347 1 8.8154 2 0.1315 1 0.0674 1 10.0 1 0.2232 1 0.0 0 5.9643 1 8.4639 1 0.096 1 2.8538 1 0.2117 1 0.3324 1 2.8205 1 2.6536 1)
Average genome size in population (length): 106.36
Average program size in population (points): 107.36
Average percent parens in population: 0.009
Minimum age in population: 104.4836646565839
Maximum age in population: 109.0399157437505
Average age in population: 107.1575234229642
Median age in population: 107.1818883208066
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.308
Error (vector) diversity:			 0.318
Behavioral diversity:				 0.318
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 143157590
--- Timings ---
Current time: 1529615246651 milliseconds
Total Time:         272.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.0 seconds, 37.0%
Fitness Testing:    135.6 seconds, 49.7%
Report:              36.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 45480.5518
Test mean error for best: 22.74028
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.9204408411
Correct output: 17.2828270025  | Program output: -7.9235324513 
Correct output: 23.1304489589  | Program output: -11.8937293501
Correct output: 137.0785591646 | Program output: 122.6571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -11.9115513311
Correct output: 17.1520909798  | Program output: -11.9089109894
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 67.4864348719 
Correct output: 52.2037920383  | Program output: -11.6929313853
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 170.1308983919
Correct output: -19.1443327626 | Program output: -11.8891428622
Correct output: 180.0725301747 | Program output: 180.6450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 105.325903249 
Correct output: 38.5197606199  | Program output: -7.2710351486 
Correct output: -4.0857969085  | Program output: -11.8924496536
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 34.076538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 60.8589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_add} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank integer_add float_div float_dec float_dec float_div float_dec float_div integer_flush float_dup_items integer_yank float_dec float_div float_dec float_div integer_pop float_dup_items float_div integer_flush float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [35.7898 10 25.2064 10 35.0242 12 14.4214 11 20.0918 10 50.2304 11 29.061 9 6.3912 11 8.0068 10 63.8967 10 63.8347 12 15.3154 10 7.2552 8 0.5725 9 18.0 2 4.7768 12 0.0 0 43.913 10 45.7908 11 7.8067 11 36.0 2 6.2883 10 65.0 3 16.3205 11 51.6536 11]
Total: 896.6472000000001
Mean: 17.932943
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2676.2120969000052
Median total errors in population: 917.2089000000001
Error averages by case: (124.45059539999922 10.075 88.35863299999879 11.032 106.26085400000012 11.824 107.6570215000012 10.762 79.25332099999967 10.635 115.78659189999881 9.987 102.45527939999921 10.393 65.32067679999894 10.995 87.36587050000085 10.364 126.8883172999992 11.5 118.22906310000201 11.606 111.97038190000157 9.982 78.55201359999937 10.157 108.76845069999939 10.095 88.4455658000001 4.034 62.0763323999998 11.676 72.59042200000005 2.948 112.05488040000027 9.702 107.79127819999869 10.485 82.35784820000036 10.013 95.7927379999999 3.905 71.47744900000016 9.92 125.40040499999998 4.679 92.2349823000008 10.65 106.50412550000107 10.75)
Error minima by case: (24.2898 1 1.5435 2 1.4547 8 2.9214 2 0.8354 2 23.975 1 7.7719 8 0.1075 2 0.4932 1 2.9976 8 11.0 1 4.8154 2 0.1132 1 0.0725 1 9.0 1 0.2232 2 0.0 0 10.5 1 1.3833 2 0.0858 1 2.1462 1 0.2117 1 0.3324 1 4.8205 2 2.0 1)
Average genome size in population (length): 103.509
Average program size in population (points): 104.509
Average percent parens in population: 0.010
Minimum age in population: 106.196500015154
Maximum age in population: 110.6279196783457
Average age in population: 108.6831047632328
Median age in population: 108.7366150355365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.306
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 145745340
--- Timings ---
Current time: 1529615251004 milliseconds
Total Time:         276.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.4 seconds, 37.0%
Fitness Testing:    137.9 seconds, 49.8%
Report:              36.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 45480.5518
Test mean error for best: 22.74028
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.9204408411
Correct output: 17.2828270025  | Program output: -7.9235324513 
Correct output: 23.1304489589  | Program output: -11.8937293501
Correct output: 137.0785591646 | Program output: 122.6571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -11.9115513311
Correct output: 17.1520909798  | Program output: -11.9089109894
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 67.4864348719 
Correct output: 52.2037920383  | Program output: -11.6929313853
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 170.1308983919
Correct output: -19.1443327626 | Program output: -11.8891428622
Correct output: 180.0725301747 | Program output: 180.6450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 105.325903249 
Correct output: 38.5197606199  | Program output: -7.2710351486 
Correct output: -4.0857969085  | Program output: -11.8924496536
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 34.076538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 60.8589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_add} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_add} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_add integer_add float_stackdepth integer_dec float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_mod float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank integer_add float_div float_dec float_dec float_div float_dec float_div integer_flush float_dup_items integer_yank float_dec float_div float_dec float_div integer_pop float_dup_items float_div integer_flush float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [35.7898 10 25.2064 10 35.0242 12 14.4214 11 20.0918 10 50.2304 11 29.061 9 6.3912 11 8.0068 10 63.8967 10 63.8347 12 15.3154 10 7.2552 8 0.5725 9 18.0 2 4.7768 12 0.0 0 43.913 10 45.7908 11 7.8067 11 36.0 2 6.2883 10 65.0 3 16.3205 11 51.6536 11]
Total: 896.6472000000001
Mean: 17.932943
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2961.2467807000053
Median total errors in population: 913.0639000000001
Error averages by case: (132.6759480999992 10.069 99.40633889999837 11.074 116.88851520000023 11.705 115.80494890000186 10.766 94.99274849999931 10.602 124.45176749999838 10.078 113.25582699999862 10.417 81.31626609999878 11.069 96.30010490000129 10.294 135.0751598999989 11.573 133.23739640000252 11.586 119.91094540000239 9.973 89.00345879999891 10.062 117.59798979999904 10.005 100.16851150000011 4.051 78.86112080000056 11.656 84.83706690000007 2.902 121.7683698000003 9.598 118.20041249999838 10.543 92.78295560000059 10.047 109.53180249999988 3.952 85.56899180000018 9.944 137.41747779999994 4.675 102.43117580000089 10.645 121.88148030000153 10.594)
Error minima by case: (19.2898 1 6.5197 2 0.795 7 0.042 2 4.715 8 4.3194 2 4.7719 8 0.1491 8 0.5068 1 5.1908 8 5.7193 1 5.8154 2 0.0943 1 0.0725 1 6.8067 1 0.2232 1 0.0 0 5.0 1 19.5972 2 0.0858 1 3.8538 1 0.2117 1 0.3324 2 0.1795 1 17.9004 1)
Average genome size in population (length): 103.103
Average program size in population (points): 104.103
Average percent parens in population: 0.010
Minimum age in population: 107.4904849423771
Maximum age in population: 112.1418779882206
Average age in population: 110.0541978420518
Median age in population: 110.0889356696734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.276
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 148323015
--- Timings ---
Current time: 1529615255282 milliseconds
Total Time:         281.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.8 seconds, 36.9%
Fitness Testing:    140.1 seconds, 49.8%
Report:              37.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 45480.5518
Test mean error for best: 22.74028
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.9204408411
Correct output: 17.2828270025  | Program output: -7.9235324513 
Correct output: 23.1304489589  | Program output: -11.8937293501
Correct output: 137.0785591646 | Program output: 122.6571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -11.9115513311
Correct output: 17.1520909798  | Program output: -11.9089109894
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 67.4864348719 
Correct output: 52.2037920383  | Program output: -11.6929313853
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 170.1308983919
Correct output: -19.1443327626 | Program output: -11.8891428622
Correct output: 180.0725301747 | Program output: 180.6450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 105.325903249 
Correct output: 38.5197606199  | Program output: -7.2710351486 
Correct output: -4.0857969085  | Program output: -11.8924496536
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 34.076538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 60.8589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction tagged_448} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_add} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_items} {:instruction tagged_368} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank tagged_448 float_div float_sub float_dup_items integer_yank float_dec float_dup_items integer_yank integer_add float_div float_dec float_dec float_div float_dec float_div integer_flush float_dup_items tagged_368 float_dec float_div float_dec float_div integer_pop float_dup_items float_div integer_flush float_dup_items integer_yank float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [35.7898 10 25.2064 10 35.0242 12 14.4214 11 20.0918 10 50.2304 11 29.061 9 6.3912 11 8.0068 10 63.8967 10 63.8347 12 15.3154 10 7.2552 8 0.5725 9 18.0 2 4.7768 12 0.0 0 43.913 10 45.7908 11 7.8067 11 36.0 2 6.2883 10 65.0 3 16.3205 11 51.6536 11]
Total: 896.6472000000001
Mean: 17.932943
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2629.662094700005
Median total errors in population: 913.0639000000001
Error averages by case: (125.51314399999923 10.039 83.58062809999888 11.027 102.14861910000027 11.589 108.47919590000132 10.755 78.25024109999974 10.568 112.30413669999898 10.21 97.8171031999993 10.274 63.83141829999908 11.034 87.49906820000079 10.105 121.68221799999907 11.423 116.5316874000021 11.538 113.5369064000018 9.949 75.48864099999942 9.839 111.79796099999945 9.97 84.05967900000005 4.022 60.37734379999979 11.597 69.04835790000004 2.964 111.38680630000023 9.484 103.75816849999904 10.61 77.79477980000044 10.123 93.16639439999989 3.901 74.93649450000011 9.861 121.98818079999994 4.683 93.31055670000069 10.547 104.76136460000124 10.501)
Error minima by case: (20.2898 1 3.2389 2 1.985 7 0.0495 2 10.0918 7 10.4396 2 0.2258 8 0.0579 7 0.5068 1 17.6114 8 1.8347 1 4.8577 2 0.1443 2 0.0725 1 8.0 1 0.2232 1 0.0 0 1.471 1 22.7088 3 0.0858 1 3.8538 1 0.2117 1 0.3324 2 0.8205 1 10.3464 1)
Average genome size in population (length): 105.274
Average program size in population (points): 106.274
Average percent parens in population: 0.009
Minimum age in population: 109.4275332678711
Maximum age in population: 113.5058203290741
Average age in population: 111.4753076613658
Median age in population: 111.5260389599984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.315
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 150954940
--- Timings ---
Current time: 1529615259580 milliseconds
Total Time:         285.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.1 seconds, 36.8%
Fitness Testing:    142.4 seconds, 49.9%
Report:              37.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 45480.5518
Test mean error for best: 22.74028
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.9204408411
Correct output: 17.2828270025  | Program output: -7.9235324513 
Correct output: 23.1304489589  | Program output: -11.8937293501
Correct output: 137.0785591646 | Program output: 122.6571183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -11.9115513311
Correct output: 17.1520909798  | Program output: -11.9089109894
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 67.4864348719 
Correct output: 52.2037920383  | Program output: -11.6929313853
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 170.1308983919
Correct output: -19.1443327626 | Program output: -11.8891428622
Correct output: 180.0725301747 | Program output: 180.6450603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 105.325903249 
Correct output: 38.5197606199  | Program output: -7.2710351486 
Correct output: -4.0857969085  | Program output: -11.8924496536
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 34.076538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 60.8589767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_sub float_yankdup integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items integer_yank float_dec float_div float_dup_items float_sub float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_mod float_dec float_dec float_div float_dec float_div float_dec float_div float_dec float_div float_sub integer_yank float_dec float_div float_dec float_div float_dec float_div float_sub float_dup_times float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_mod float_div print_float float_min float_mult)
Errors: [35.7898 10 25.2064 10 35.0242 12 14.4214 11 20.0918 10 50.2304 11 29.061 9 6.3912 11 8.0068 10 63.8967 10 63.8347 12 15.3154 10 7.2552 8 0.5725 9 18.0 2 4.7768 12 0.0 0 43.913 10 45.7908 11 7.8067 11 36.0 2 6.2883 10 65.0 3 16.3205 11 51.6536 11]
Total: 896.6472000000001
Mean: 17.932943
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2583.9734150000027
Median total errors in population: 911.2089000000001
Error averages by case: (121.32121129999923 10.111 80.7685870999992 11.051 102.85294590000004 11.594 104.2177793000014 10.794 77.31237109999968 10.65 110.45058599999953 10.455 99.56902309999968 10.125 63.061072599999065 11.052 83.09576680000087 9.884 119.83866749999892 11.054 116.6273425000021 11.578 109.82974780000167 9.987 73.62615119999951 9.461 106.49995720000003 10.24 84.58201720000012 3.996 61.029138399999766 11.698 69.50020770000005 2.954 106.02387740000023 9.585 99.05858909999986 10.801 77.5849421000004 10.353 93.5340597999999 3.886 69.41692280000017 9.946 122.57296319999992 4.636 89.38922850000078 10.596 105.0442594000012 10.679)
Error minima by case: (19.7898 1 0.2387 2 2.985 7 0.4214 2 0.8164 7 25.9514 1 1.7811 7 0.2848 6 0.0068 1 2.679 8 5.1653 1 6.8154 2 0.0863 1 0.0725 1 9.0 1 0.2232 1 0.0 0 1.471 1 18.5624 3 0.1161 1 3.8538 1 0.2117 1 0.3324 2 0.3205 1 8.6536 1)
Average genome size in population (length): 105.849
Average program size in population (points): 106.849
Average percent parens in population: 0.009
Minimum age in population: 110.6308560237946
Maximum age in population: 114.8940393875156
Average age in population: 112.8087764788398
Median age in population: 112.8695302263381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.306
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 153601165
--- Timings ---
Current time: 1529615263844 milliseconds
Total Time:         289.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.6 seconds, 36.8%
Fitness Testing:    144.7 seconds, 49.9%
Report:              38.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 45552.036400000005
Test mean error for best: 22.77602
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.9204408411
Correct output: 17.2828270025  | Program output: -8.9235324513 
Correct output: 23.1304489589  | Program output: -12.8937293501
Correct output: 137.0785591646 | Program output: 121.6571183291
Correct output: -36.0917810332 | Program output: -17.0         
Correct output: -62.1419485102 | Program output: -12.9115513311
Correct output: 17.1520909798  | Program output: -12.9089109894
Correct output: -9.6087899132  | Program output: -17.0         
Correct output: 75.493217436   | Program output: 66.4864348719 
Correct output: 52.2037920383  | Program output: -12.6929313853
Correct output: -79.8347132576 | Program output: -17.0         
Correct output: 154.815449196  | Program output: 169.1308983919
Correct output: -19.1443327626 | Program output: -12.8891428622
Correct output: 180.0725301747 | Program output: 179.6450603494
Correct output: -128.3399358578 | Program output: -111.3399358578
Correct output: -20.7768369154 | Program output: -17.0         
Correct output: -106.4972590774 | Program output: -107.4972590774
Correct output: 61.4129516245  | Program output: 104.325903249 
Correct output: 38.5197606199  | Program output: -8.2710351486 
Correct output: -4.0857969085  | Program output: -12.8924496536
Correct output: -93.8538349059 | Program output: -58.8538349059
Correct output: 27.7882694945  | Program output: 33.076538989  
Correct output: -145.332361916 | Program output: -81.332361916 
Correct output: 77.1794883917  | Program output: 59.8589767834 
Correct output: -67.6536129502 | Program output: -17.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_sub float_yankdup float_sub float_pop integer_stackdepth integer_stackdepth float_max float_tan integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup float_sub float_dup_items float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_div float_dec float_div float_dec print_integer integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_div float_div float_sub float_dup_items integer_yank float_dec float_div float_dec float_div integer_yank float_dec integer_yank float_dec float_div float_dec float_div float_mod float_div float_sub float_dup_times integer_yank float_dec integer_yank float_dec float_div integer_yank float_dec float_div print_float float_sin integer_swap float_inc)
Errors: [36.7898 10 26.2064 11 36.0242 12 15.4214 11 19.0918 10 49.2304 10 30.061 9 7.3912 11 9.0068 10 64.8967 9 62.8347 12 14.3154 10 6.2552 8 0.4275 11 17.0 2 3.7768 12 1.0 1 42.913 9 46.7908 10 8.8067 11 35.0 2 5.2883 10 64.0 3 17.3205 11 50.6536 10]
Total: 895.5022000000001
Mean: 17.910044
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2750.3540679999987
Median total errors in population: 910.0062500000001
Error averages by case: (127.57130149999931 10.187 87.42378959999944 11.134 115.54952849999997 11.71 113.1418907000018 10.876 77.59942459999935 10.755 123.75642889999986 10.568 113.04505990000027 10.076 62.95807969999897 11.008 91.38997740000111 9.703 128.85167899999877 10.704 117.09076640000204 11.499 123.16690570000196 10.009 87.56258499999966 9.297 119.40738370000027 10.428 85.0166440000001 4.051 61.485187199999785 11.664 69.88302000000006 3.078 115.39790990000019 9.701 106.5368231000005 11.01 91.32495380000059 10.436 93.30971529999995 3.982 77.68410270000017 9.989 121.64468449999997 4.71 96.0795608000007 10.643 105.43866610000106 10.82)
Error minima by case: (10.1307 1 9.7057 3 8.9247 3 1.4214 2 1.3984 7 10.0719 1 0.3871 3 0.3912 6 0.0068 1 9.0 2 19.1653 1 4.8577 1 0.1443 1 0.0725 1 2.3399 1 0.2232 1 0.0 0 1.8043 1 26.6968 4 0.0584 1 1.8538 1 0.2117 1 0.3324 2 3.3205 1 5.3464 1)
Average genome size in population (length): 106.496
Average program size in population (points): 107.496
Average percent parens in population: 0.009
Minimum age in population: 111.8901758238654
Maximum age in population: 115.8064062727596
Average age in population: 114.1580087766952
Median age in population: 114.187497896752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.343
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 156263590
--- Timings ---
Current time: 1529615268064 milliseconds
Total Time:         294.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.9 seconds, 36.7%
Fitness Testing:    146.9 seconds, 50.0%
Report:              39.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 45581.58819999995
Test mean error for best: 22.79079
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.2954408411
Correct output: 17.2828270025  | Program output: -0.349372768  
Correct output: 23.1304489589  | Program output: 1.0210607545  
Correct output: 137.0785591646 | Program output: 122.0321183291
Correct output: -36.0917810332 | Program output: -13.0         
Correct output: -62.1419485102 | Program output: 0.6543174261  
Correct output: 17.1520909798  | Program output: 0.7078838553  
Correct output: -9.6087899132  | Program output: -13.0         
Correct output: 75.493217436   | Program output: 66.8614348719 
Correct output: 52.2037920383  | Program output: 6.2040070161  
Correct output: -79.8347132576 | Program output: -13.0         
Correct output: 154.815449196  | Program output: 169.5058983919
Correct output: -19.1443327626 | Program output: 1.1174453205  
Correct output: 180.0725301747 | Program output: 180.0200603494
Correct output: -128.3399358578 | Program output: -107.3399358578
Correct output: -20.7768369154 | Program output: -13.0         
Correct output: -106.4972590774 | Program output: -103.4972590774
Correct output: 61.4129516245  | Program output: 104.700903249 
Correct output: 38.5197606199  | Program output: 2.9465187228  
Correct output: -4.0857969085  | Program output: 1.0478694768  
Correct output: -93.8538349059 | Program output: -54.8538349059
Correct output: 27.7882694945  | Program output: 33.451538989  
Correct output: -145.332361916 | Program output: -77.332361916 
Correct output: 77.1794883917  | Program output: 60.2339767834 
Correct output: -67.6536129502 | Program output: -13.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [36.4148 11 17.6322 11 22.1094 11 15.0464 11 23.0918 11 62.7963 11 16.4442 12 3.3912 11 8.6318 11 45.9998 9 66.8347 11 14.6904 9 20.2618 9 0.0525 8 21.0 2 7.7768 12 3.0 1 43.288 10 35.5732 12 5.1337 9 39.0 2 5.6633 11 68.0 3 16.9455 11 54.6536 11]
Total: 883.4314000000002
Mean: 17.668629
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2776.4356231000015
Median total errors in population: 908.5022000000001
Error averages by case: (128.2224713999992 10.151 85.7915347999995 10.963 112.16353190000017 11.615 113.29047630000142 10.82 83.52669309999946 10.834 122.60075069999988 10.609 108.30732720000034 10.063 68.11023839999893 11.005 95.1635095000009 9.772 125.84096469999886 10.638 122.57994430000211 11.473 121.1681814000017 10.031 85.31899199999964 9.332 123.23508729999966 10.255 87.7211405000001 3.879 66.59257589999993 11.615 72.89883740000008 3.022 118.39145570000017 9.79 104.43408290000046 10.985 86.67849560000055 10.268 97.36545249999989 3.859 75.76918970000011 9.976 125.57026779999997 4.638 97.84851290000064 10.611 110.87490920000106 10.767)
Error minima by case: (9.4343 1 4.95 2 0.3854 8 1.5786 2 5.0 2 13.9962 2 0.035 8 0.0172 1 0.0068 1 9.7962 8 22.1653 1 7.8154 2 0.0767 2 0.0525 1 8.0 1 0.0373 1 0.0 0 0.471 1 11.5198 3 0.0593 1 1.1462 1 0.2117 1 0.3324 2 0.3205 1 21.3464 1)
Average genome size in population (length): 107.686
Average program size in population (points): 108.686
Average percent parens in population: 0.009
Minimum age in population: 113.1061437866825
Maximum age in population: 117.4066922002064
Average age in population: 115.5333753594446
Median age in population: 115.5591976693115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.357
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 158955790
--- Timings ---
Current time: 1529615272379 milliseconds
Total Time:         298.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.4 seconds, 36.6%
Fitness Testing:    149.2 seconds, 50.0%
Report:              39.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 45331.64139999995
Test mean error for best: 22.66582
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 112.2954408411
Correct output: 17.2828270025  | Program output: -3.349372768  
Correct output: 23.1304489589  | Program output: -1.9789392455 
Correct output: 137.0785591646 | Program output: 119.0321183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -2.3456825739 
Correct output: 17.1520909798  | Program output: -2.2921161447 
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 63.8614348719 
Correct output: 52.2037920383  | Program output: 3.2040070161  
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 166.5058983919
Correct output: -19.1443327626 | Program output: -1.8825546795 
Correct output: 180.0725301747 | Program output: 177.0200603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 101.700903249 
Correct output: 38.5197606199  | Program output: -0.0534812772 
Correct output: -4.0857969085  | Program output: -1.9521305232 
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 30.451538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 57.2339767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [39.4148 11 20.6322 11 25.1094 12 18.0464 11 20.0918 10 59.7963 9 19.4442 11 6.3912 11 11.6318 11 48.9998 9 63.8347 12 11.6904 9 17.2618 11 3.0525 10 18.0 2 4.7768 12 0.0 0 40.288 9 38.5732 12 2.1337 11 36.0 2 2.6633 11 65.0 3 19.9455 10 51.6536 11]
Total: 875.4314000000002
Mean: 17.508629
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2871.8919320000036
Median total errors in population: 905.2089000000001
Error averages by case: (136.0927232999993 10.236 89.39235039999942 10.948 117.25122010000007 11.704 120.15126610000137 10.903 82.81681309999959 10.804 127.81506859999975 10.604 113.79494330000016 10.155 68.5444642999991 11.016 97.73989670000081 9.97 133.19815769999917 10.849 122.22361340000185 11.529 126.1142488000017 10.059 92.07729939999963 9.537 126.29793769999937 10.186 89.07683440000004 3.974 66.76386479999985 11.594 74.18437390000007 3.109 125.40124680000021 9.915 108.7834126000003 10.969 92.17487180000053 10.303 98.48434299999992 3.937 84.13634230000014 10.081 127.38198199999998 4.744 102.81514640000067 10.702 110.596511100001 10.755)
Error minima by case: (8.1837 2 0.997 1 0.389 6 2.0786 2 0.0918 2 6.8168 1 0.035 8 0.0107 2 0.4932 1 7.6917 7 4.8347 1 2.7541 2 0.1216 1 0.0525 1 3.0 1 0.1075 1 0.0 0 0.8369 1 1.551 2 0.0711 1 2.8538 1 0.2117 1 0.3324 1 0.1795 1 2.0 1)
Average genome size in population (length): 108.555
Average program size in population (points): 109.555
Average percent parens in population: 0.009
Minimum age in population: 114.1061437866825
Maximum age in population: 118.6717061723781
Average age in population: 116.906859367038
Median age in population: 116.9673876132412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.373
Error (vector) diversity:			 0.382
Behavioral diversity:				 0.382
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 161669665
--- Timings ---
Current time: 1529615276683 milliseconds
Total Time:         302.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.7 seconds, 36.6%
Fitness Testing:    151.5 seconds, 50.1%
Report:              40.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 45331.64139999995
Test mean error for best: 22.66582
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 112.2954408411
Correct output: 17.2828270025  | Program output: -3.349372768  
Correct output: 23.1304489589  | Program output: -1.9789392455 
Correct output: 137.0785591646 | Program output: 119.0321183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -2.3456825739 
Correct output: 17.1520909798  | Program output: -2.2921161447 
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 63.8614348719 
Correct output: 52.2037920383  | Program output: 3.2040070161  
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 166.5058983919
Correct output: -19.1443327626 | Program output: -1.8825546795 
Correct output: 180.0725301747 | Program output: 177.0200603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 101.700903249 
Correct output: 38.5197606199  | Program output: -0.0534812772 
Correct output: -4.0857969085  | Program output: -1.9521305232 
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 30.451538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 57.2339767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [39.4148 11 20.6322 11 25.1094 12 18.0464 11 20.0918 10 59.7963 9 19.4442 11 6.3912 11 11.6318 11 48.9998 9 63.8347 12 11.6904 9 17.2618 11 3.0525 10 18.0 2 4.7768 12 0.0 0 40.288 9 38.5732 12 2.1337 11 36.0 2 2.6633 11 65.0 3 19.9455 10 51.6536 11]
Total: 875.4314000000002
Mean: 17.508629
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2866.166879000005
Median total errors in population: 902.6472000000001
Error averages by case: (136.44643699999926 10.335 86.70508419999969 10.877 121.19846609999986 11.743 122.01183010000139 10.971 80.95817729999982 10.67 132.3227395 10.666 117.4834128000003 10.105 66.89249849999908 11.025 99.58649630000089 10.026 130.04679139999908 10.636 120.31426610000175 11.631 132.12256530000175 10.203 94.9387425999996 9.414 129.54327739999965 10.287 85.70279380000004 3.95 64.22696989999977 11.656 71.05258840000003 2.887 122.8822792000003 9.926 106.31717630000036 11.006 95.72936620000056 10.478 95.30558969999991 3.811 80.93347060000016 10.171 123.50307479999998 4.636 102.73764650000071 10.807 108.55013900000087 10.738)
Error minima by case: (4.1837 2 1.3932 2 2.3259 8 0.5786 3 1.8395 7 17.8922 2 10.0786 8 0.3912 8 0.016 2 11.5388 7 3.1138 1 4.8154 2 0.0335 2 0.0525 1 5.0 1 0.2232 1 0.0 0 0.471 1 4.7093 3 0.0941 1 1.8538 1 0.2117 1 0.3324 1 1.3205 2 8.3464 1)
Average genome size in population (length): 109.758
Average program size in population (points): 110.758
Average percent parens in population: 0.009
Minimum age in population: 115.9657331399335
Maximum age in population: 120.2618172322351
Average age in population: 118.380655765075
Median age in population: 118.4066226800866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.366
Error (vector) diversity:			 0.376
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 164413615
--- Timings ---
Current time: 1529615281130 milliseconds
Total Time:         307.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.1 seconds, 36.5%
Fitness Testing:    154.0 seconds, 50.1%
Report:              41.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 45331.64139999995
Test mean error for best: 22.66582
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 112.2954408411
Correct output: 17.2828270025  | Program output: -3.349372768  
Correct output: 23.1304489589  | Program output: -1.9789392455 
Correct output: 137.0785591646 | Program output: 119.0321183291
Correct output: -36.0917810332 | Program output: -16.0         
Correct output: -62.1419485102 | Program output: -2.3456825739 
Correct output: 17.1520909798  | Program output: -2.2921161447 
Correct output: -9.6087899132  | Program output: -16.0         
Correct output: 75.493217436   | Program output: 63.8614348719 
Correct output: 52.2037920383  | Program output: 3.2040070161  
Correct output: -79.8347132576 | Program output: -16.0         
Correct output: 154.815449196  | Program output: 166.5058983919
Correct output: -19.1443327626 | Program output: -1.8825546795 
Correct output: 180.0725301747 | Program output: 177.0200603494
Correct output: -128.3399358578 | Program output: -110.3399358578
Correct output: -20.7768369154 | Program output: -16.0         
Correct output: -106.4972590774 | Program output: -106.4972590774
Correct output: 61.4129516245  | Program output: 101.700903249 
Correct output: 38.5197606199  | Program output: -0.0534812772 
Correct output: -4.0857969085  | Program output: -1.9521305232 
Correct output: -93.8538349059 | Program output: -57.8538349059
Correct output: 27.7882694945  | Program output: 30.451538989  
Correct output: -145.332361916 | Program output: -80.332361916 
Correct output: 77.1794883917  | Program output: 57.2339767834 
Correct output: -67.6536129502 | Program output: -16.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_mult integer_pop integer_add integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [39.4148 11 20.6322 11 25.1094 12 18.0464 11 20.0918 10 59.7963 9 19.4442 11 6.3912 11 11.6318 11 48.9998 9 63.8347 12 11.6904 9 17.2618 11 3.0525 10 18.0 2 4.7768 12 0.0 0 40.288 9 38.5732 12 2.1337 11 36.0 2 2.6633 11 65.0 3 19.9455 10 51.6536 11]
Total: 875.4314000000002
Mean: 17.508629
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2942.8221890000004
Median total errors in population: 902.6472000000001
Error averages by case: (135.01106339999916 10.249 88.90093059999951 10.856 124.29022019999988 11.67 121.56459780000164 10.859 87.21282519999924 10.601 137.51747280000035 10.723 122.17242860000059 10.04 73.0446907999989 10.997 97.39869390000102 9.798 133.37754209999915 10.415 127.21360710000266 11.608 130.41675790000218 10.056 100.01970469999974 9.31 127.08158299999972 10.279 90.91998850000006 3.843 71.78793240000014 11.666 76.31842670000007 2.792 123.7826368000002 9.791 107.88814340000071 11.019 99.99786840000064 10.504 101.61287689999993 3.761 82.04338670000011 10.072 128.96385049999998 4.52 102.00633150000063 10.627 115.6236291000015 10.599)
Error minima by case: (2.1007 1 1.9988 3 1.3351 7 0.4214 2 7.0 2 21.5 2 3.965 8 0.3642 1 0.0068 1 0.0474 8 54.8347 1 8.8154 2 0.1441 2 0.0525 1 9.0 1 0.2232 1 0.0 0 2.471 1 3.7093 3 0.1933 1 0.1462 1 0.2117 1 0.3324 2 0.6795 1 42.6536 2)
Average genome size in population (length): 109.84
Average program size in population (points): 110.84
Average percent parens in population: 0.009
Minimum age in population: 116.9657331399335
Maximum age in population: 121.7715873847694
Average age in population: 119.7330010821794
Median age in population: 119.7733133019569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.368
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.378
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 167159615
--- Timings ---
Current time: 1529615285482 milliseconds
Total Time:         311.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.5 seconds, 36.4%
Fitness Testing:    156.3 seconds, 50.2%
Report:              41.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 44189.17969999996
Test mean error for best: 22.09459
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 121.4204408411
Correct output: 17.2828270025  | Program output: -7.2639408673 
Correct output: 23.1304489589  | Program output: -7.970091021  
Correct output: 137.0785591646 | Program output: 128.1571183291
Correct output: -36.0917810332 | Program output: -19.0         
Correct output: -62.1419485102 | Program output: -7.9750442803 
Correct output: 17.1520909798  | Program output: -7.9743088796 
Correct output: -9.6087899132  | Program output: -19.0         
Correct output: 75.493217436   | Program output: 72.9864348719 
Correct output: 52.2037920383  | Program output: -7.9159529954 
Correct output: -79.8347132576 | Program output: -19.0         
Correct output: 154.815449196  | Program output: 175.6308983919
Correct output: -19.1443327626 | Program output: -7.9688203164 
Correct output: 180.0725301747 | Program output: 186.1450603494
Correct output: -128.3399358578 | Program output: -113.3399358578
Correct output: -20.7768369154 | Program output: -19.0         
Correct output: -106.4972590774 | Program output: -109.4972590774
Correct output: 61.4129516245  | Program output: 110.825903249 
Correct output: 38.5197606199  | Program output: -7.1936262217 
Correct output: -4.0857969085  | Program output: -7.9697363111 
Correct output: -93.8538349059 | Program output: -60.8538349059
Correct output: 27.7882694945  | Program output: 39.576538989  
Correct output: -145.332361916 | Program output: -83.332361916 
Correct output: 77.1794883917  | Program output: 66.3589767834 
Correct output: -67.6536129502 | Program output: -19.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_sub float_yankdup integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup integer_yank float_dec float_frominteger integer_yank float_dec integer_dup integer_shove float_dup_items float_dec integer_dup float_dec integer_dup float_sub float_dup_items float_dec float_div float_dec float_div integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_mod float_dec float_dec float_div float_dec float_div float_dec float_div float_dec float_div float_sub integer_yank float_dec float_div float_dec float_div integer_dup float_div float_sub float_dup_times float_dec float_div integer_inc float_dup_items integer_yank float_dec integer_yank float_dec float_mod float_div print_float float_min float_mult)
Errors: [30.2898 9 24.5468 10 31.1005 11 8.9214 11 17.0918 11 54.1669 10 25.1264 9 9.3912 10 2.5068 10 60.1197 11 60.8347 11 20.8154 10 11.1755 11 6.0725 10 15.0 2 1.7768 12 3.0 1 49.413 9 45.7134 9 3.8839 9 33.0 2 11.7883 10 62.0 3 10.8205 11 48.6536 10]
Total: 869.2089000000001
Mean: 17.384178
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2976.2515850000027
Median total errors in population: 900.6472000000001
Error averages by case: (138.3654672999993 10.316 91.03217799999972 10.937 122.48555939999997 11.625 122.68371590000139 10.866 88.8400578999993 10.709 136.24341140000033 10.812 120.02105700000062 10.163 74.94692149999896 11.068 98.8485406000009 9.874 134.55488509999938 10.368 128.21230480000216 11.59 132.01351370000174 10.066 98.45311709999967 9.436 130.22305949999966 10.305 93.02856990000005 3.938 72.96748800000036 11.721 78.44172030000003 2.948 128.5786534000002 9.804 110.17426460000078 11.144 99.06999470000065 10.466 104.06107129999994 3.817 82.55465280000011 10.107 132.37406919999998 4.622 103.35209850000066 10.68 116.67421310000138 10.669)
Error minima by case: (7.2119 1 0.0476 7 0.9326 7 0.9152 2 1.9502 8 8.0085 2 0.5558 8 0.2572 7 0.0068 1 1.9098 8 0.622 1 6.3154 2 0.1213 1 0.0525 1 4.042 1 0.2232 1 0.0 0 0.1957 1 1.7504 7 0.0822 1 1.8538 1 0.2883 1 0.3324 1 0.0545 2 11.5591 1)
Average genome size in population (length): 110.32
Average program size in population (points): 111.32
Average percent parens in population: 0.009
Minimum age in population: 118.5007334073109
Maximum age in population: 123.3983057346286
Average age in population: 121.0644600287779
Median age in population: 121.0926400970286
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.399
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.413
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 169917615
--- Timings ---
Current time: 1529615289891 milliseconds
Total Time:         316.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.9 seconds, 36.4%
Fitness Testing:    158.7 seconds, 50.2%
Report:              42.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 44189.17969999996
Test mean error for best: 22.09459
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 121.4204408411
Correct output: 17.2828270025  | Program output: -7.2639408673 
Correct output: 23.1304489589  | Program output: -7.970091021  
Correct output: 137.0785591646 | Program output: 128.1571183291
Correct output: -36.0917810332 | Program output: -19.0         
Correct output: -62.1419485102 | Program output: -7.9750442803 
Correct output: 17.1520909798  | Program output: -7.9743088796 
Correct output: -9.6087899132  | Program output: -19.0         
Correct output: 75.493217436   | Program output: 72.9864348719 
Correct output: 52.2037920383  | Program output: -7.9159529954 
Correct output: -79.8347132576 | Program output: -19.0         
Correct output: 154.815449196  | Program output: 175.6308983919
Correct output: -19.1443327626 | Program output: -7.9688203164 
Correct output: 180.0725301747 | Program output: 186.1450603494
Correct output: -128.3399358578 | Program output: -113.3399358578
Correct output: -20.7768369154 | Program output: -19.0         
Correct output: -106.4972590774 | Program output: -109.4972590774
Correct output: 61.4129516245  | Program output: 110.825903249 
Correct output: 38.5197606199  | Program output: -7.1936262217 
Correct output: -4.0857969085  | Program output: -7.9697363111 
Correct output: -93.8538349059 | Program output: -60.8538349059
Correct output: 27.7882694945  | Program output: 39.576538989  
Correct output: -145.332361916 | Program output: -83.332361916 
Correct output: 77.1794883917  | Program output: 66.3589767834 
Correct output: -67.6536129502 | Program output: -19.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_sub float_yankdup integer_max integer_dup_items integer_dup_items float_mod in1 float_rot integer_shove float_inc float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup integer_yank float_dec float_frominteger integer_yank float_dec integer_dup integer_shove float_dup_items float_dec integer_dup float_dec integer_dup float_sub float_dup_items float_dec float_div float_dec float_div integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_mod float_dec float_dec float_div float_dec float_div float_dec float_div float_dec float_div float_sub integer_yank float_dec float_div float_dec float_div integer_dup float_div float_sub float_dup_times float_dec float_div integer_inc float_dup_items integer_yank float_dec integer_yank float_dec float_mod float_div print_float float_min float_mult)
Errors: [30.2898 9 24.5468 10 31.1005 11 8.9214 11 17.0918 11 54.1669 10 25.1264 9 9.3912 10 2.5068 10 60.1197 11 60.8347 11 20.8154 10 11.1755 11 6.0725 10 15.0 2 1.7768 12 3.0 1 49.413 9 45.7134 9 3.8839 9 33.0 2 11.7883 10 62.0 3 10.8205 11 48.6536 10]
Total: 869.2089000000001
Mean: 17.384178
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3379.5466552000007
Median total errors in population: 898.9486
Error averages by case: (163.9451880999994 10.391 97.98771389999932 10.909 144.63349500000024 11.59 149.96842240000075 10.863 94.90840569999901 10.826 159.90547379999984 10.8 142.91709149999988 10.398 80.47995969999906 10.986 124.25888200000085 9.866 148.20876950000016 10.34 132.58153840000227 11.437 162.8941803000002 10.035 123.4152676999994 9.6 160.04817110000022 10.26 99.76551490000007 4.242 77.63586610000064 11.567 85.63868660000011 3.31 153.72784760000025 9.873 115.90895740000056 11.254 122.77989200000079 10.39 109.07277399999997 4.07 104.7334109 10.194 137.2892586 4.873 126.47919910000061 10.606 121.04868890000138 10.634)
Error minima by case: (5.1837 1 0.3868 8 1.2764 7 0.9438 2 7.0918 1 4.7161 1 0.1274 8 0.3912 1 0.0068 2 7.7962 8 6.8347 1 4.3154 2 0.0354 1 0.0525 1 5.0 1 0.0 0 0.0 0 0.029 1 2.1641 7 0.1043 1 0.8538 1 0.1687 1 0.3324 2 0.6795 1 7.6536 1)
Average genome size in population (length): 112.283
Average program size in population (points): 113.283
Average percent parens in population: 0.009
Minimum age in population: 119.8387067397485
Maximum age in population: 124.2082154276609
Average age in population: 122.5077905445766
Median age in population: 122.5267569387607
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.409
Error (vector) diversity:			 0.416
Behavioral diversity:				 0.416
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 172724690
--- Timings ---
Current time: 1529615294298 milliseconds
Total Time:         320.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.2 seconds, 36.3%
Fitness Testing:    161.2 seconds, 50.3%
Report:              42.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 44189.17969999996
Test mean error for best: 22.09459
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 121.4204408411
Correct output: 17.2828270025  | Program output: -7.2639408673 
Correct output: 23.1304489589  | Program output: -7.970091021  
Correct output: 137.0785591646 | Program output: 128.1571183291
Correct output: -36.0917810332 | Program output: -19.0         
Correct output: -62.1419485102 | Program output: -7.9750442803 
Correct output: 17.1520909798  | Program output: -7.9743088796 
Correct output: -9.6087899132  | Program output: -19.0         
Correct output: 75.493217436   | Program output: 72.9864348719 
Correct output: 52.2037920383  | Program output: -7.9159529954 
Correct output: -79.8347132576 | Program output: -19.0         
Correct output: 154.815449196  | Program output: 175.6308983919
Correct output: -19.1443327626 | Program output: -7.9688203164 
Correct output: 180.0725301747 | Program output: 186.1450603494
Correct output: -128.3399358578 | Program output: -113.3399358578
Correct output: -20.7768369154 | Program output: -19.0         
Correct output: -106.4972590774 | Program output: -109.4972590774
Correct output: 61.4129516245  | Program output: 110.825903249 
Correct output: 38.5197606199  | Program output: -7.1936262217 
Correct output: -4.0857969085  | Program output: -7.9697363111 
Correct output: -93.8538349059 | Program output: -60.8538349059
Correct output: 27.7882694945  | Program output: 39.576538989  
Correct output: -145.332361916 | Program output: -83.332361916 
Correct output: 77.1794883917  | Program output: 66.3589767834 
Correct output: -67.6536129502 | Program output: -19.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction float_flush} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_tan} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup} {:instruction tagged_67} {:instruction float_flush} {:instruction 61} {:instruction float_mod} {:instruction in1} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_yank} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_dup} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 tag_float_237 float_mod float_pop float_flush float_sub float_yankdup float_sub integer_add integer_stackdepth float_max float_tan integer_max float_inc float_dup tagged_67 float_flush 61 float_mod in1 integer_inc integer_shove float_inc integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_rot in2 float_dup_items float_inc in1 float_inc float_mod float_div float_sub float_frominteger integer_yank float_dec integer_dup integer_yank float_dec float_frominteger integer_yank float_dec integer_dup integer_shove float_dup_items float_dec integer_dup float_dec integer_dup float_sub float_dup_items float_dec float_div float_dec float_div integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_mod float_dec float_dec float_div float_dec float_div float_dec float_div float_dec float_div float_sub integer_yank float_dec float_div float_dec float_div integer_dup float_div float_sub float_dup_times float_dec float_div integer_inc float_dup_items integer_yank float_dec integer_yank float_dec float_mod float_div print_float float_min float_mult)
Errors: [30.2898 9 24.5468 10 31.1005 11 8.9214 11 17.0918 11 54.1669 10 25.1264 9 9.3912 10 2.5068 10 60.1197 11 60.8347 11 20.8154 10 11.1755 11 6.0725 10 15.0 2 1.7768 12 3.0 1 49.413 9 45.7134 9 3.8839 9 33.0 2 11.7883 10 62.0 3 10.8205 11 48.6536 10]
Total: 869.2089000000001
Mean: 17.384178
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3343.6642527
Median total errors in population: 902.5440000000001
Error averages by case: (166.73165259999942 10.619 97.2482453999992 10.856 143.28472170000023 11.492 151.64019780000106 10.989 91.75917409999916 10.881 164.25083060000017 10.692 142.46261259999974 10.599 77.413586999999 10.918 121.49895480000092 10.135 139.72777329999994 10.372 130.07385910000215 11.317 162.496482100001 9.977 124.3700203999992 10.0 159.5863029000001 10.342 99.00687710000008 4.338 75.37151340000047 11.463 85.23712840000007 3.472 150.42318610000027 9.994 112.43490190000017 11.314 122.15434430000082 10.326 106.69802909999991 4.149 100.31211169999995 10.382 135.07290969999997 4.853 125.10314720000062 10.675 118.54668940000114 10.604)
Error minima by case: (4.3504 2 0.696 7 0.4542 3 1.6724 2 2.0918 2 1.7161 2 1.5559 3 0.1002 1 0.2056 1 0.0881 1 2.0 1 0.6846 2 0.0 0 0.0525 1 0.0 0 0.02 1 0.0 0 0.0543 1 0.8359 7 0.1161 1 0.8538 1 0.1059 1 0.3324 2 1.9835 1 15.0 2)
Average genome size in population (length): 115.504
Average program size in population (points): 116.504
Average percent parens in population: 0.009
Minimum age in population: 121.259529053344
Maximum age in population: 125.7075203313748
Average age in population: 123.839264244207
Median age in population: 123.8537592721472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.44
Error (vector) diversity:			 0.452
Behavioral diversity:				 0.452
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 175612340
--- Timings ---
Current time: 1529615298738 milliseconds
Total Time:         324.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.6 seconds, 36.2%
Fitness Testing:    163.7 seconds, 50.4%
Report:              43.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 57318.95179999995
Test mean error for best: 28.65948
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 112.3579408411
Correct output: 17.2828270025  | Program output: 20.1991350733 
Correct output: 23.1304489589  | Program output: 21.5817293581 
Correct output: 137.0785591646 | Program output: 119.0946183291
Correct output: -36.0917810332 | Program output: -13.0         
Correct output: -62.1419485102 | Program output: 19.6294923834 
Correct output: 17.1520909798  | Program output: 19.9079798795 
Correct output: -9.6087899132  | Program output: -13.0         
Correct output: 75.493217436   | Program output: 63.9239348719 
Correct output: 52.2037920383  | Program output: 68.5016200346 
Correct output: -79.8347132576 | Program output: -13.0         
Correct output: 154.815449196  | Program output: 166.5683983919
Correct output: -19.1443327626 | Program output: 22.1130684264 
Correct output: 180.0725301747 | Program output: 177.0825603494
Correct output: -128.3399358578 | Program output: -107.3399358578
Correct output: -20.7768369154 | Program output: -13.0         
Correct output: -106.4972590774 | Program output: -103.4972590774
Correct output: 61.4129516245  | Program output: 101.763403249 
Correct output: 38.5197606199  | Program output: 48.7752450322 
Correct output: -4.0857969085  | Program output: 21.728731469  
Correct output: -93.8538349059 | Program output: -54.8538349059
Correct output: 27.7882694945  | Program output: 30.514038989  
Correct output: -145.332361916 | Program output: -77.332361916 
Correct output: 77.1794883917  | Program output: 57.2964767834 
Correct output: -67.6536129502 | Program output: -19.3463870498
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [39.3523 11 2.9163 11 1.5487 9 17.9839 11 23.0918 11 81.7714 12 2.7559 8 3.3912 11 11.5693 10 16.2978 9 66.8347 11 11.7529 9 41.2574 10 2.99 8 21.0 2 7.7768 12 3.0 1 40.3505 10 10.2555 11 25.8145 11 39.0 2 2.7258 11 68.0 3 19.883 10 48.3072 12]
Total: 835.6269
Mean: 16.712538
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3466.653948599999
Median total errors in population: 910.8432000000001
Error averages by case: (175.19886039999915 10.68 100.9406916999986 10.826 147.15623939999978 11.478 161.01705130000062 10.91 93.75874369999933 10.914 166.5207426999995 10.552 145.2053076999996 10.825 79.11968069999892 11.011 132.60046920000102 10.252 144.9281669000001 10.363 131.90683810000232 11.259 170.51172350000056 9.935 130.92878029999875 10.275 168.43402829999982 10.29 101.68546730000017 4.416 77.41654980000023 11.464 87.52020040000006 3.55 157.60489150000024 9.904 116.51664419999972 11.42 126.62331590000124 10.226 108.5678225999999 4.213 109.13742180000004 10.463 136.87816020000002 4.884 134.71210910000053 10.589 120.47604190000148 10.589)
Error minima by case: (4.3504 1 0.0476 3 1.5487 7 1.6724 2 1.8164 8 3.5957 1 0.6124 2 0.1399 1 0.0068 1 1.0881 7 32.7851 1 3.3154 3 0.1287 1 0.0525 2 0.0 0 0.2092 1 0.0 0 0.029 1 0.1641 4 0.1081 1 0.1462 1 0.2883 1 0.3324 2 0.9451 1 33.6536 1)
Average genome size in population (length): 118.289
Average program size in population (points): 119.289
Average percent parens in population: 0.008
Minimum age in population: 122.259529053344
Maximum age in population: 126.9910666176606
Average age in population: 125.2080006730568
Median age in population: 125.2358274988073
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.446
Error (vector) diversity:			 0.456
Behavioral diversity:				 0.456
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 178569590
--- Timings ---
Current time: 1529615303170 milliseconds
Total Time:         329.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       118.9 seconds, 36.1%
Fitness Testing:    166.1 seconds, 50.5%
Report:              44.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 57318.95179999995
Test mean error for best: 28.65948
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 112.3579408411
Correct output: 17.2828270025  | Program output: 20.1991350733 
Correct output: 23.1304489589  | Program output: 21.5817293581 
Correct output: 137.0785591646 | Program output: 119.0946183291
Correct output: -36.0917810332 | Program output: -13.0         
Correct output: -62.1419485102 | Program output: 19.6294923834 
Correct output: 17.1520909798  | Program output: 19.9079798795 
Correct output: -9.6087899132  | Program output: -13.0         
Correct output: 75.493217436   | Program output: 63.9239348719 
Correct output: 52.2037920383  | Program output: 68.5016200346 
Correct output: -79.8347132576 | Program output: -13.0         
Correct output: 154.815449196  | Program output: 166.5683983919
Correct output: -19.1443327626 | Program output: 22.1130684264 
Correct output: 180.0725301747 | Program output: 177.0825603494
Correct output: -128.3399358578 | Program output: -107.3399358578
Correct output: -20.7768369154 | Program output: -13.0         
Correct output: -106.4972590774 | Program output: -103.4972590774
Correct output: 61.4129516245  | Program output: 101.763403249 
Correct output: 38.5197606199  | Program output: 48.7752450322 
Correct output: -4.0857969085  | Program output: 21.728731469  
Correct output: -93.8538349059 | Program output: -54.8538349059
Correct output: 27.7882694945  | Program output: 30.514038989  
Correct output: -145.332361916 | Program output: -77.332361916 
Correct output: 77.1794883917  | Program output: 57.2964767834 
Correct output: -67.6536129502 | Program output: -19.3463870498
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [39.3523 11 2.9163 11 1.5487 9 17.9839 11 23.0918 11 81.7714 12 2.7559 8 3.3912 11 11.5693 10 16.2978 9 66.8347 11 11.7529 9 41.2574 10 2.99 8 21.0 2 7.7768 12 3.0 1 40.3505 10 10.2555 11 25.8145 11 39.0 2 2.7258 11 68.0 3 19.883 10 48.3072 12]
Total: 835.6269
Mean: 16.712538
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3575.2028668000016
Median total errors in population: 909.4227000000001
Error averages by case: (178.11855319999944 10.781 103.30148379999908 10.883 150.48846610000004 11.534 164.37890430000093 11.001 99.65425079999923 10.934 171.7663123999999 10.51 147.84440509999942 10.785 86.401119999999 10.989 131.98312270000082 10.373 150.52637860000004 10.397 136.98482010000217 11.409 173.27590600000073 10.061 135.08283879999897 10.503 173.02568329999966 10.427 108.7764624 4.551 82.82321300000032 11.489 95.09801870000003 3.712 160.55866410000021 9.952 120.16220959999974 11.377 131.9585912000009 10.328 115.42866389999995 4.377 109.8523893999999 10.525 144.69783929999997 5.061 134.2000670000006 10.666 125.54450300000119 10.645)
Error minima by case: (1.9653 1 0.2401 7 0.3291 7 0.1847 2 3.8164 5 0.071 1 0.4277 3 0.1002 5 0.2056 1 0.8885 8 11.8347 1 1.1628 2 0.1424 1 0.0525 1 5.0 1 0.02 2 0.0 0 0.029 1 0.271 7 0.0505 1 1.8538 1 0.2883 1 0.3324 2 0.78 1 0.3464 1)
Average genome size in population (length): 119.474
Average program size in population (points): 120.474
Average percent parens in population: 0.008
Minimum age in population: 124.290817720349
Maximum age in population: 128.4392297878277
Average age in population: 126.5459184108808
Median age in population: 126.5675338291527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.471
Error (vector) diversity:			 0.484
Behavioral diversity:				 0.485
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 181556540
--- Timings ---
Current time: 1529615307674 milliseconds
Total Time:         333.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.3 seconds, 36.0%
Fitness Testing:    168.6 seconds, 50.5%
Report:              44.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 56706.32379999998
Test mean error for best: 28.35316
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 110.3579408411
Correct output: 17.2828270025  | Program output: 18.1991350733 
Correct output: 23.1304489589  | Program output: 19.5817293581 
Correct output: 137.0785591646 | Program output: 117.0946183291
Correct output: -36.0917810332 | Program output: -17.0         
Correct output: -62.1419485102 | Program output: 17.6294923834 
Correct output: 17.1520909798  | Program output: 17.9079798795 
Correct output: -9.6087899132  | Program output: -17.0         
Correct output: 75.493217436   | Program output: 61.9239348719 
Correct output: 52.2037920383  | Program output: 66.5016200346 
Correct output: -79.8347132576 | Program output: -17.0         
Correct output: 154.815449196  | Program output: 164.5683983919
Correct output: -19.1443327626 | Program output: 20.1130684264 
Correct output: 180.0725301747 | Program output: 175.0825603494
Correct output: -128.3399358578 | Program output: -111.3399358578
Correct output: -20.7768369154 | Program output: -17.0         
Correct output: -106.4972590774 | Program output: -107.4972590774
Correct output: 61.4129516245  | Program output: 99.763403249  
Correct output: 38.5197606199  | Program output: 46.7752450322 
Correct output: -4.0857969085  | Program output: 19.728731469  
Correct output: -93.8538349059 | Program output: -58.8538349059
Correct output: 27.7882694945  | Program output: 28.514038989  
Correct output: -145.332361916 | Program output: -81.332361916 
Correct output: 77.1794883917  | Program output: 55.2964767834 
Correct output: -67.6536129502 | Program output: -17.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items float_add float_yank float_inc float_yankdup float_min in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_mult integer_pop integer_add integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_mult print_float float_sin integer_swap float_div float_dec float_mod float_div print_float float_min float_mult)
Errors: [41.3523 11 0.9163 10 3.5487 10 19.9839 10 19.0918 10 79.7714 12 0.7559 7 7.3912 11 13.5693 10 14.2978 9 62.8347 12 9.7529 8 39.2574 10 4.99 8 17.0 2 3.7768 12 1.0 1 38.3505 10 8.2555 12 23.8145 11 35.0 2 0.7258 10 64.0 3 21.883 11 50.6536 10]
Total: 803.9733
Mean: 16.079466
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3410.9437801999998
Median total errors in population: 895.45455
Error averages by case: (167.92860459999935 10.532 96.82092239999874 10.865 140.2667054000003 11.491 153.299786700001 10.908 98.97690979999874 10.885 160.5635430999996 10.421 137.10231069999912 10.627 86.87958019999898 10.863 125.23070700000108 10.241 141.34764480000004 10.615 134.81647960000222 11.406 161.69843610000078 10.042 123.3970848999989 10.784 162.34215519999984 10.392 106.59186120000015 4.49 81.22985780000039 11.481 94.15314400000014 3.708 152.92772780000024 9.85 113.29933609999922 11.032 118.0746076000007 10.185 113.67444679999983 4.36 104.2680955000001 10.363 141.9568719 5.036 129.04030330000072 10.544 123.31865770000145 10.617)
Error minima by case: (1.1837 1 0.696 1 0.4513 7 0.1847 2 0.9082 2 8.321 1 0.7559 7 0.1118 1 0.2056 2 4.0881 7 1.1653 1 3.9213 3 0.1292 1 0.0525 2 1.0 1 0.0337 1 0.0 0 0.029 1 0.1641 2 0.0505 1 0.1462 1 0.1059 1 0.0 0 0.7686 1 0.6536 1)
Average genome size in population (length): 117.656
Average program size in population (points): 118.656
Average percent parens in population: 0.009
Minimum age in population: 125.6196786778689
Maximum age in population: 129.7808271477534
Average age in population: 127.891641084201
Median age in population: 127.9155832398878
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.465
Error (vector) diversity:			 0.475
Behavioral diversity:				 0.476
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 184498315
--- Timings ---
Current time: 1529615312240 milliseconds
Total Time:         338.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.7 seconds, 36.0%
Fitness Testing:    171.0 seconds, 50.6%
Report:              45.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 56523.17759999996
Test mean error for best: 28.26159
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 109.3579408411
Correct output: 17.2828270025  | Program output: 17.1991350733 
Correct output: 23.1304489589  | Program output: 18.5817293581 
Correct output: 137.0785591646 | Program output: 116.0946183291
Correct output: -36.0917810332 | Program output: -18.0         
Correct output: -62.1419485102 | Program output: 16.6294923834 
Correct output: 17.1520909798  | Program output: 16.9079798795 
Correct output: -9.6087899132  | Program output: -18.0         
Correct output: 75.493217436   | Program output: 60.9239348719 
Correct output: 52.2037920383  | Program output: 65.5016200346 
Correct output: -79.8347132576 | Program output: -18.0         
Correct output: 154.815449196  | Program output: 163.5683983919
Correct output: -19.1443327626 | Program output: 19.1130684264 
Correct output: 180.0725301747 | Program output: 174.0825603494
Correct output: -128.3399358578 | Program output: -112.3399358578
Correct output: -20.7768369154 | Program output: -18.0         
Correct output: -106.4972590774 | Program output: -108.4972590774
Correct output: 61.4129516245  | Program output: 98.763403249  
Correct output: 38.5197606199  | Program output: 45.7752450322 
Correct output: -4.0857969085  | Program output: 18.728731469  
Correct output: -93.8538349059 | Program output: -59.8538349059
Correct output: 27.7882694945  | Program output: 27.514038989  
Correct output: -145.332361916 | Program output: -82.332361916 
Correct output: 77.1794883917  | Program output: 54.2964767834 
Correct output: -67.6536129502 | Program output: -18.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction tagged_12} {:instruction float_max} {:instruction float_sub} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_mult} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (in1 float_rot float_frominteger float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc tagged_12 float_max float_sub integer_swap float_max integer_dec integer_dup_times in2 float_dup_items float_dup_items float_add float_mult float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec integer_dup float_div float_sub float_dup_times float_dec float_div float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [42.3523 11 0.0837 9 4.5487 10 20.9839 11 18.0918 10 78.7714 11 0.2441 8 8.3912 11 14.5693 10 13.2978 9 61.8347 12 8.7529 9 38.2574 8 5.99 8 16.0 2 2.7768 12 2.0 1 37.3505 10 7.2555 12 22.8145 11 34.0 2 0.2742 9 63.0 3 22.883 11 49.6536 11]
Total: 795.1773
Mean: 15.903546
Genome size: 139
Size: 140
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3787.6324757000016
Median total errors in population: 887.4689000000001
Error averages by case: (176.74736699999917 10.471 115.74709069999876 10.777 153.83956839999996 11.282 161.3607437000003 10.827 116.26186679999846 10.98 172.1800693999996 10.447 151.76223689999935 10.385 104.89232979999896 10.895 135.5827767000008 10.132 158.65918720000025 10.893 151.79357930000248 11.383 172.03071670000023 10.135 137.8620673999995 10.675 172.3736575 10.32 128.86419700000016 4.673 99.05312820000088 11.461 116.33591380000016 4.021 167.0125209000001 9.939 130.87802689999904 10.626 132.72373280000022 9.97 132.54243869999988 4.587 117.27753150000004 10.302 160.5160501000001 5.231 139.02592970000072 10.551 140.6877486000011 10.659)
Error minima by case: (2.6496 2 0.0837 2 0.4059 8 1.9214 2 1.8164 1 0.321 1 0.1308 7 0.3912 1 0.4932 1 5.2636 8 1.8347 1 5.8154 2 0.1336 1 0.0725 1 5.0 1 0.0625 1 0.0 0 0.029 1 0.507 2 0.1161 1 0.1462 1 0.1059 1 0.3324 1 1.5342 1 0.3464 1)
Average genome size in population (length): 114.76
Average program size in population (points): 115.76
Average percent parens in population: 0.009
Minimum age in population: 127.065695413552
Maximum age in population: 131.2625804777609
Average age in population: 129.2046079910318
Median age in population: 129.2315111512292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.453
Error (vector) diversity:			 0.463
Behavioral diversity:				 0.464
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 187367840
--- Timings ---
Current time: 1529615316672 milliseconds
Total Time:         342.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.1 seconds, 35.9%
Fitness Testing:    173.4 seconds, 50.6%
Report:              46.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 57384.36419999994
Test mean error for best: 28.69218
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.1818035639
Correct output: 17.2828270025  | Program output: 1.9886920668  
Correct output: 23.1304489589  | Program output: 13.7952326215 
Correct output: 137.0785591646 | Program output: 121.3675928844
Correct output: -36.0917810332 | Program output: -21.0         
Correct output: -62.1419485102 | Program output: 12.0303341597 
Correct output: 17.1520909798  | Program output: 12.2829323174 
Correct output: -9.6087899132  | Program output: -21.0         
Correct output: 75.493217436   | Program output: 62.5188638634 
Correct output: 52.2037920383  | Program output: 52.4673467341 
Correct output: -79.8347132576 | Program output: -21.0         
Correct output: 154.815449196  | Program output: 172.0062916181
Correct output: -19.1443327626 | Program output: 14.2732313779 
Correct output: 180.0725301747 | Program output: 183.221397706 
Correct output: -128.3399358578 | Program output: -115.3399358578
Correct output: -20.7768369154 | Program output: -21.0         
Correct output: -106.4972590774 | Program output: -111.4972590774
Correct output: 61.4129516245  | Program output: 102.8809634656
Correct output: 38.5197606199  | Program output: 13.1331769781 
Correct output: -4.0857969085  | Program output: 13.9275777198 
Correct output: -93.8538349059 | Program output: -62.8538349059
Correct output: 27.7882694945  | Program output: 26.8816415883 
Correct output: -145.332361916 | Program output: -85.332361916 
Correct output: 77.1794883917  | Program output: 55.4495752356 
Correct output: -67.6536129502 | Program output: -27.3463870498
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [37.5284 11 15.2941 9 9.3352 11 15.711 10 15.0918 11 74.1723 11 4.8692 10 11.3912 11 12.9744 11 0.2636 9 58.8347 12 17.1908 11 33.4176 11 3.1489 8 13.0 2 0.2232 11 5.0 2 41.468 11 25.3866 11 18.0134 10 31.0 2 0.9066 9 60.0 2 21.7299 11 40.3072 11]
Total: 794.2581000000002
Mean: 15.885162
Genome size: 138
Size: 139
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3946.457332700001
Median total errors in population: 922.5639000000001
Error averages by case: (182.16584599999916 10.799 119.26554219999882 10.773 158.1832415000001 11.078 168.56710789999963 10.912 123.30721639999838 11.057 176.95208829999953 10.588 158.36841659999948 10.33 110.96927209999886 10.998 142.00455290000045 10.281 161.53155090000052 10.972 158.63903970000263 11.405 180.22202469999976 10.494 143.1815926999998 10.668 180.2966177999997 10.449 136.4335889000002 4.809 106.28094390000095 11.487 124.27993470000018 4.139 173.79597790000005 10.365 132.95719469999943 10.872 141.09561829999987 10.238 138.19699129999998 4.683 123.93534009999995 10.532 167.01396060000002 5.358 145.72927770000086 10.563 148.47839490000072 10.756)
Error minima by case: (2.7567 2 0.0837 8 0.4513 2 0.1847 3 2.1834 2 4.679 1 0.1308 3 0.3912 1 0.3127 2 0.0418 8 2.6874 1 2.6488 2 0.0931 1 0.01 2 3.0 1 0.2232 1 0.0 0 0.029 1 0.1641 6 0.0566 1 0.1331 1 0.1059 1 0.3324 2 0.1442 2 0.0 0)
Average genome size in population (length): 116.315
Average program size in population (points): 117.315
Average percent parens in population: 0.009
Minimum age in population: 128.065695413552
Maximum age in population: 132.4165709604073
Average age in population: 130.5249165271229
Median age in population: 130.5487109746205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.508
Error (vector) diversity:			 0.512
Behavioral diversity:				 0.513
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 190276240
--- Timings ---
Current time: 1529615321367 milliseconds
Total Time:         347.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.6 seconds, 35.9%
Fitness Testing:    175.9 seconds, 50.6%
Report:              46.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 55939.14359999997
Test mean error for best: 27.96957
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 104.3579408411
Correct output: 17.2828270025  | Program output: 12.1991350733 
Correct output: 23.1304489589  | Program output: 13.5817293581 
Correct output: 137.0785591646 | Program output: 111.0946183291
Correct output: -36.0917810332 | Program output: -21.0         
Correct output: -62.1419485102 | Program output: 11.6294923834 
Correct output: 17.1520909798  | Program output: 11.9079798795 
Correct output: -9.6087899132  | Program output: -21.0         
Correct output: 75.493217436   | Program output: 55.9239348719 
Correct output: 52.2037920383  | Program output: 60.5016200346 
Correct output: -79.8347132576 | Program output: -21.0         
Correct output: 154.815449196  | Program output: 158.5683983919
Correct output: -19.1443327626 | Program output: 14.1130684264 
Correct output: 180.0725301747 | Program output: 169.0825603494
Correct output: -128.3399358578 | Program output: -115.3399358578
Correct output: -20.7768369154 | Program output: -21.0         
Correct output: -106.4972590774 | Program output: -111.4972590774
Correct output: 61.4129516245  | Program output: 93.763403249  
Correct output: 38.5197606199  | Program output: 40.7752450322 
Correct output: -4.0857969085  | Program output: 13.728731469  
Correct output: -93.8538349059 | Program output: -62.8538349059
Correct output: 27.7882694945  | Program output: 22.514038989  
Correct output: -145.332361916 | Program output: -85.332361916 
Correct output: 77.1794883917  | Program output: 49.2964767834 
Correct output: -67.6536129502 | Program output: -27.3463870498
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction -3} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_stackdepth float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_yankdup float_max -3 float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [47.3523 11 5.0837 10 9.5487 9 25.9839 11 15.0918 11 73.7714 12 5.2441 8 11.3912 11 19.5693 9 8.2978 9 58.8347 12 3.7529 8 33.2574 9 10.99 8 13.0 2 0.2232 11 5.0 2 32.3505 10 2.2555 12 17.8145 11 31.0 2 5.2742 10 60.0 2 27.883 11 40.3072 11]
Total: 785.2773
Mean: 15.705546
Genome size: 141
Size: 142
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3532.9511543000012
Median total errors in population: 887.5103000000001
Error averages by case: (178.4316143999991 11.11 100.66350159999915 10.644 133.90163589999995 10.822 163.09805329999963 10.866 101.2744259999988 10.971 161.58578449999922 10.809 134.49811739999936 10.233 87.81768099999897 10.988 135.47097760000048 10.328 145.82059210000043 10.78 137.94050510000227 11.497 169.8316208999998 10.564 126.14052279999949 10.722 172.48206619999965 10.328 114.86032190000002 4.468 83.9069987000005 11.616 101.12634730000008 3.763 161.74809419999994 10.598 113.80418179999984 11.023 121.36619089999975 10.509 117.97839599999992 4.372 112.27379089999985 10.664 147.12999199999993 5.082 140.7341808000009 10.429 124.95556100000104 10.924)
Error minima by case: (2.4337 2 0.0837 4 0.2687 7 0.7439 2 3.3164 2 2.6295 2 0.1308 7 0.003 1 0.0068 2 0.2098 7 2.1653 1 0.3096 2 0.0918 1 0.01 2 4.0 1 0.1232 1 0.0 0 0.029 1 0.1641 2 0.0025 1 0.1462 1 0.0934 1 1.3324 2 1.1795 2 9.0392 2)
Average genome size in population (length): 121.353
Average program size in population (points): 122.353
Average percent parens in population: 0.008
Minimum age in population: 129.579286497226
Maximum age in population: 133.7890443747103
Average age in population: 131.781251193659
Median age in population: 131.8047444782204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.514
Error (vector) diversity:			 0.524
Behavioral diversity:				 0.525
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 193310265
--- Timings ---
Current time: 1529615325960 milliseconds
Total Time:         351.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.9 seconds, 35.8%
Fitness Testing:    178.4 seconds, 50.7%
Report:              47.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 55706.50019999997
Test mean error for best: 27.85325
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 100.3579408411
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 107.0946183291
Correct output: -36.0917810332 | Program output: -27.0         
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -27.0         
Correct output: 75.493217436   | Program output: 51.9239348719 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -27.0         
Correct output: 154.815449196  | Program output: 154.5683983919
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 165.0825603494
Correct output: -128.3399358578 | Program output: -121.3399358578
Correct output: -20.7768369154 | Program output: -27.0         
Correct output: -106.4972590774 | Program output: -117.4972590774
Correct output: 61.4129516245  | Program output: 89.763403249  
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -68.8538349059
Correct output: 27.7882694945  | Program output: 18.514038989  
Correct output: -145.332361916 | Program output: -91.332361916 
Correct output: 77.1794883917  | Program output: 45.2964767834 
Correct output: -67.6536129502 | Program output: -27.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction tag_integer_981} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod tag_integer_981 in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items float_add float_yank float_inc float_yankdup float_min in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_mult integer_pop integer_add integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_dec float_div float_dec float_div integer_dup float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [51.3523 11 9.0837 11 13.5487 10 29.9839 10 9.0918 11 69.7714 11 9.2441 8 17.3912 11 23.5693 10 4.2978 8 52.8347 12 0.2471 7 29.2574 9 14.99 8 7.0 1 6.2232 11 11.0 2 28.3505 10 1.7445 11 13.8145 11 25.0 2 9.2742 11 54.0 3 31.883 11 40.6536 10]
Total: 783.6069
Mean: 15.672138
Genome size: 155
Size: 156
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3726.4789071999994
Median total errors in population: 961.4516
Error averages by case: (188.83851569999936 11.164 102.0316160999995 10.745 147.37612780000006 10.861 174.88902699999986 10.943 104.05071419999858 10.97 180.638561599999 11.103 147.1219322999997 10.238 90.90860539999889 11.028 148.24468920000058 10.31 149.38419590000052 10.626 139.83732770000262 11.597 181.00221339999948 10.396 148.27322470000004 10.62 184.35516929999952 10.128 113.9599973 4.35 86.56111450000063 11.649 100.13532090000005 3.646 170.7625506999999 10.609 112.76860249999991 11.405 141.21996999999922 10.583 120.07962819999992 4.277 121.9794831999998 10.658 148.73442039999998 4.986 151.3513018000006 10.659 127.34259740000086 11.081)
Error minima by case: (1.3504 2 0.0837 7 0.0788 3 0.2561 3 6.0918 2 4.6295 2 0.1308 7 0.2487 1 0.0068 2 0.0881 6 25.1736 1 0.1628 2 0.0589 1 0.01 2 3.0 1 0.2232 1 0.0 0 0.029 2 0.3854 7 0.0302 1 1.1462 1 0.1868 1 0.3324 2 1.7933 2 16.2681 1)
Average genome size in population (length): 127.385
Average program size in population (points): 128.385
Average percent parens in population: 0.008
Minimum age in population: 130.7045066028491
Maximum age in population: 134.9740734130783
Average age in population: 133.0773112026119
Median age in population: 133.094509165241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.95
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.95
Total error diversity:				 0.548
Error (vector) diversity:			 0.555
Behavioral diversity:				 0.556
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 196494940
--- Timings ---
Current time: 1529615330834 milliseconds
Total Time:         356.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.4 seconds, 35.7%
Fitness Testing:    181.1 seconds, 50.8%
Report:              48.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 55758.73079999997
Test mean error for best: 27.87937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 102.3579408411
Correct output: 17.2828270025  | Program output: 10.1991350733 
Correct output: 23.1304489589  | Program output: 11.5817293581 
Correct output: 137.0785591646 | Program output: 109.0946183291
Correct output: -36.0917810332 | Program output: -25.0         
Correct output: -62.1419485102 | Program output: 9.6294923834  
Correct output: 17.1520909798  | Program output: 9.9079798795  
Correct output: -9.6087899132  | Program output: -25.0         
Correct output: 75.493217436   | Program output: 53.9239348719 
Correct output: 52.2037920383  | Program output: 58.5016200346 
Correct output: -79.8347132576 | Program output: -25.0         
Correct output: 154.815449196  | Program output: 156.5683983919
Correct output: -19.1443327626 | Program output: 12.1130684264 
Correct output: 180.0725301747 | Program output: 167.0825603494
Correct output: -128.3399358578 | Program output: -119.3399358578
Correct output: -20.7768369154 | Program output: -25.0         
Correct output: -106.4972590774 | Program output: -115.4972590774
Correct output: 61.4129516245  | Program output: 91.763403249  
Correct output: 38.5197606199  | Program output: 38.7752450322 
Correct output: -4.0857969085  | Program output: 11.728731469  
Correct output: -93.8538349059 | Program output: -66.8538349059
Correct output: 27.7882694945  | Program output: 20.514038989  
Correct output: -145.332361916 | Program output: -89.332361916 
Correct output: 77.1794883917  | Program output: 47.2964767834 
Correct output: -67.6536129502 | Program output: -25.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_rot} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_mult} {:instruction integer_pop} {:instruction integer_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max float_rot float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_yankdup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_shove float_inc integer_swap float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_mult integer_pop integer_add integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_mult print_float float_sin integer_swap float_div float_dec float_mod float_div)
Errors: [49.3523 11 7.0837 10 11.5487 10 27.9839 11 11.0918 11 71.7714 11 7.2441 9 15.3912 11 21.5693 10 6.2978 8 54.8347 11 1.7529 8 31.2574 9 12.99 8 9.0 2 4.2232 11 9.0 2 30.3505 9 0.2555 10 15.8145 11 27.0 2 7.2742 10 56.0 3 29.883 10 42.6536 11]
Total: 780.6237
Mean: 15.612474
Genome size: 153
Size: 154
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3983.4928555999986
Median total errors in population: 882.5178500000001
Error averages by case: (205.0877241999996 11.134 108.0708723999997 10.712 158.66673540000036 10.845 190.74219549999975 10.992 106.4875307999986 10.971 201.4780173999994 11.295 157.57431759999983 9.953 94.86275509999894 11.07 166.90517840000084 10.207 158.6816755000001 10.309 144.01381570000248 11.749 192.45813599999977 10.132 167.30319990000038 10.482 196.1965748999993 9.841 116.80591120000005 4.141 91.35412630000073 11.713 103.75591580000003 3.489 183.68936669999988 10.545 117.62325029999971 11.586 158.77653479999935 10.614 123.84697429999984 4.099 141.4167655999998 10.496 152.78930560000006 4.811 170.53106500000078 10.883 131.0439112000004 11.262)
Error minima by case: (0.3504 2 0.027 2 0.0554 3 0.0161 2 0.0918 2 10.0 1 0.0319 7 0.0478 1 0.0068 1 0.2377 2 18.1736 2 0.1628 3 0.0829 1 0.01 2 1.3758 1 0.1104 1 0.0 0 0.029 2 0.2555 3 0.0283 1 0.5628 1 0.0934 1 0.6676 2 0.0962 2 9.2681 1)
Average genome size in population (length): 132.645
Average program size in population (points): 133.645
Average percent parens in population: 0.008
Minimum age in population: 131.7050398910345
Maximum age in population: 136.3763875520099
Average age in population: 134.4222576099726
Median age in population: 134.4253198396648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.509
Error (vector) diversity:			 0.514
Behavioral diversity:				 0.516
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 199811090
--- Timings ---
Current time: 1529615335711 milliseconds
Total Time:         361.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.8 seconds, 35.6%
Fitness Testing:    183.8 seconds, 50.8%
Report:              48.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 55758.73079999997
Test mean error for best: 27.87937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 102.3579408411
Correct output: 17.2828270025  | Program output: 10.1991350733 
Correct output: 23.1304489589  | Program output: 11.5817293581 
Correct output: 137.0785591646 | Program output: 109.0946183291
Correct output: -36.0917810332 | Program output: -25.0         
Correct output: -62.1419485102 | Program output: 9.6294923834  
Correct output: 17.1520909798  | Program output: 9.9079798795  
Correct output: -9.6087899132  | Program output: -25.0         
Correct output: 75.493217436   | Program output: 53.9239348719 
Correct output: 52.2037920383  | Program output: 58.5016200346 
Correct output: -79.8347132576 | Program output: -25.0         
Correct output: 154.815449196  | Program output: 156.5683983919
Correct output: -19.1443327626 | Program output: 12.1130684264 
Correct output: 180.0725301747 | Program output: 167.0825603494
Correct output: -128.3399358578 | Program output: -119.3399358578
Correct output: -20.7768369154 | Program output: -25.0         
Correct output: -106.4972590774 | Program output: -115.4972590774
Correct output: 61.4129516245  | Program output: 91.763403249  
Correct output: 38.5197606199  | Program output: 38.7752450322 
Correct output: -4.0857969085  | Program output: 11.728731469  
Correct output: -93.8538349059 | Program output: -66.8538349059
Correct output: 27.7882694945  | Program output: 20.514038989  
Correct output: -145.332361916 | Program output: -89.332361916 
Correct output: 77.1794883917  | Program output: 47.2964767834 
Correct output: -67.6536129502 | Program output: -25.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_min} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_inc})
Best program: (tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_dup_items float_dup_items float_add float_yank float_inc float_yankdup float_min in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_swap float_add integer_shove float_inc float_yankdup float_max integer_dup float_rot in2 float_dup_items integer_inc integer_yankdup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_mult float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_inc)
Errors: [49.3523 11 7.0837 10 11.5487 10 27.9839 11 11.0918 11 71.7714 11 7.2441 9 15.3912 11 21.5693 10 6.2978 8 54.8347 11 1.7529 8 31.2574 9 12.99 8 9.0 2 4.2232 11 9.0 2 30.3505 9 0.2555 10 15.8145 11 27.0 2 7.2742 10 56.0 3 29.883 10 42.6536 11]
Total: 780.6237
Mean: 15.612474
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3854.4006124999987
Median total errors in population: 919.71075
Error averages by case: (198.0928655999995 11.166 108.4572952000002 10.656 146.43897370000033 10.85 182.60771289999974 11.054 105.32837469999875 10.999 187.60970249999954 11.27 145.7338388999997 9.886 96.15836739999887 11.018 159.57676130000084 10.186 145.2819406000004 10.163 140.19450930000224 11.787 182.17925079999983 10.02 155.60735300000064 10.321 190.43631509999958 9.727 119.45094560000004 4.534 88.21585970000045 11.484 108.30515070000004 4.035 178.97481809999985 10.465 120.02403609999968 11.623 147.2790195999988 10.526 123.40372909999995 4.425 136.7919911 10.46 152.9361087 5.064 164.21958830000082 10.961 127.05410450000035 11.362)
Error minima by case: (1.4754 2 0.0837 2 0.1577 2 0.5819 2 5.0918 2 1.6996 1 0.0347 6 0.0 0 0.0075 1 0.2636 6 5.9938 1 0.2471 2 0.1033 1 0.01 2 0.0 0 0.1102 1 0.0 0 0.0543 1 0.2555 3 0.1219 1 5.8538 1 0.0934 1 0.5773 2 0.4509 1 9.2681 1)
Average genome size in population (length): 136.973
Average program size in population (points): 137.973
Average percent parens in population: 0.007
Minimum age in population: 133.0970535500718
Maximum age in population: 137.8031899240305
Average age in population: 135.7350168002098
Median age in population: 135.7740410187437
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.521
Error (vector) diversity:			 0.525
Behavioral diversity:				 0.526
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 203235465
--- Timings ---
Current time: 1529615340525 milliseconds
Total Time:         366.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.2 seconds, 35.5%
Fitness Testing:    186.6 seconds, 50.9%
Report:              49.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 52409.10900000001
Test mean error for best: 26.20455
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 104.3579408411
Correct output: 17.2828270025  | Program output: 12.1991350733 
Correct output: 23.1304489589  | Program output: 13.5817293581 
Correct output: 137.0785591646 | Program output: 111.0946183291
Correct output: -36.0917810332 | Program output: -2.0917810332 
Correct output: -62.1419485102 | Program output: 11.6294923834 
Correct output: 17.1520909798  | Program output: 11.9079798795 
Correct output: -9.6087899132  | Program output: -3.6087899132 
Correct output: 75.493217436   | Program output: 55.9239348719 
Correct output: 52.2037920383  | Program output: 60.5016200346 
Correct output: -79.8347132576 | Program output: -20.8347132576
Correct output: 154.815449196  | Program output: 158.5683983919
Correct output: -19.1443327626 | Program output: 14.1130684264 
Correct output: 180.0725301747 | Program output: 169.0825603494
Correct output: -128.3399358578 | Program output: -122.3399358578
Correct output: -20.7768369154 | Program output: -19.7768369154
Correct output: -106.4972590774 | Program output: -118.4972590774
Correct output: 61.4129516245  | Program output: 93.763403249  
Correct output: 38.5197606199  | Program output: 40.7752450322 
Correct output: -4.0857969085  | Program output: 13.728731469  
Correct output: -93.8538349059 | Program output: -69.8538349059
Correct output: 27.7882694945  | Program output: 22.514038989  
Correct output: -145.332361916 | Program output: -92.332361916 
Correct output: 77.1794883917  | Program output: 49.2964767834 
Correct output: -67.6536129502 | Program output: -21.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [47.3523 11 5.0837 10 9.5487 9 25.9839 11 34.0 2 73.7714 12 5.2441 8 6.0 1 19.5693 9 8.2978 9 59.0 2 3.7529 8 33.2574 9 10.99 8 6.0 1 1.0 2 12.0 2 32.3505 10 2.2555 12 17.8145 11 24.0 2 5.2742 10 53.0 3 27.883 11 46.0 2]
Total: 744.4291999999999
Mean: 14.888584
Genome size: 149
Size: 150
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3986.246886099998
Median total errors in population: 917.3906000000002
Error averages by case: (211.01418419999968 11.129 117.10878670000041 10.774 157.22919120000037 10.94 197.61052089999944 11.106 102.44142609999882 10.999 192.9898023999993 11.229 154.26863369999998 9.925 96.395575799999 10.942 174.36816480000064 10.187 156.0895030000002 10.122 139.93906640000202 11.637 191.5892257999998 9.888 161.6648398000005 10.192 202.83469059999922 9.76 111.06998270000005 4.256 88.77522369999996 11.148 102.58416330000007 4.059 187.87397540000006 10.362 122.81439469999975 11.635 154.7932067999992 10.579 119.03580749999993 4.212 149.58221600000033 10.581 147.78821020000004 4.814 176.9529054000006 10.961 126.77718900000036 11.219)
Error minima by case: (0.0896 2 0.0837 7 0.4513 4 0.1847 2 3.0918 1 4.3705 1 0.0347 6 0.2463 1 0.4307 1 0.2636 7 18.1736 1 0.2158 2 0.0863 1 0.0822 2 2.0 1 0.0 0 0.0 0 0.1752 1 0.2555 7 0.1279 1 7.8538 1 0.0934 1 1.3324 2 0.4509 1 9.2681 1)
Average genome size in population (length): 141.374
Average program size in population (points): 142.374
Average percent parens in population: 0.007
Minimum age in population: 134.0970535500718
Maximum age in population: 139.092870286415
Average age in population: 137.0305255022023
Median age in population: 137.0729191204219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.515
Error (vector) diversity:			 0.518
Behavioral diversity:				 0.519
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 206769865
--- Timings ---
Current time: 1529615345582 milliseconds
Total Time:         371.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.6 seconds, 35.4%
Fitness Testing:    189.5 seconds, 51.0%
Report:              50.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 52113.138000000006
Test mean error for best: 26.05657
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 103.3579408411
Correct output: 17.2828270025  | Program output: 11.1991350733 
Correct output: 23.1304489589  | Program output: 12.5817293581 
Correct output: 137.0785591646 | Program output: 110.0946183291
Correct output: -36.0917810332 | Program output: -3.0917810332 
Correct output: -62.1419485102 | Program output: 10.6294923834 
Correct output: 17.1520909798  | Program output: 10.9079798795 
Correct output: -9.6087899132  | Program output: -4.6087899132 
Correct output: 75.493217436   | Program output: 54.9239348719 
Correct output: 52.2037920383  | Program output: 59.5016200346 
Correct output: -79.8347132576 | Program output: -21.8347132576
Correct output: 154.815449196  | Program output: 157.5683983919
Correct output: -19.1443327626 | Program output: 13.1130684264 
Correct output: 180.0725301747 | Program output: 168.0825603494
Correct output: -128.3399358578 | Program output: -123.3399358578
Correct output: -20.7768369154 | Program output: -20.7768369154
Correct output: -106.4972590774 | Program output: -119.4972590774
Correct output: 61.4129516245  | Program output: 92.763403249  
Correct output: 38.5197606199  | Program output: 39.7752450322 
Correct output: -4.0857969085  | Program output: 12.728731469  
Correct output: -93.8538349059 | Program output: -70.8538349059
Correct output: 27.7882694945  | Program output: 21.514038989  
Correct output: -145.332361916 | Program output: -93.332361916 
Correct output: 77.1794883917  | Program output: 48.2964767834 
Correct output: -67.6536129502 | Program output: -22.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [48.3523 11 6.0837 10 10.5487 10 26.9839 11 33.0 1 72.7714 12 6.2441 8 5.0 1 20.5693 10 7.2978 8 58.0 2 2.7529 8 32.2574 9 11.99 8 5.0 1 0.0 0 13.0 2 31.3505 10 1.2555 11 16.8145 11 23.0 2 6.2742 10 52.0 3 28.883 11 45.0 2]
Total: 736.4291999999999
Mean: 14.728584
Genome size: 153
Size: 154
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3598.509445799997
Median total errors in population: 904.7838000000002
Error averages by case: (186.6632955999996 11.108 107.0793540000007 10.771 141.09459260000054 10.842 168.80256850000015 11.105 95.93377019999893 10.944 176.65624709999895 11.181 139.76733369999974 9.833 92.06423389999878 10.935 148.366940900001 10.129 143.2804334000003 9.885 133.12856900000273 11.617 161.8848184000007 9.699 144.8060012000006 10.152 172.37538649999965 9.616 105.5992141 4.14 82.93577339999958 11.035 98.09924260000005 4.101 157.30914220000017 10.337 111.93586809999982 11.515 138.13584419999856 10.609 112.97649659999993 4.104 125.44801389999999 10.578 141.58295980000005 4.852 150.41652660000068 10.907 120.95281930000041 11.219)
Error minima by case: (1.5246 2 0.0837 7 0.1483 4 0.0161 2 1.2015 1 0.0 0 0.1465 7 0.2303 1 0.4307 2 0.2636 7 6.1653 1 0.1628 2 0.1418 1 0.0822 2 0.8563 1 0.0 0 0.0 0 0.904 1 0.2555 7 0.0191 1 6.8538 1 0.0267 1 0.3324 2 0.4092 1 1.9882 1)
Average genome size in population (length): 144.448
Average program size in population (points): 145.448
Average percent parens in population: 0.007
Minimum age in population: 136.1865012025238
Maximum age in population: 140.2836085595568
Average age in population: 138.3934617458057
Median age in population: 138.4504716804416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.48
Error (vector) diversity:			 0.485
Behavioral diversity:				 0.486
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 210381065
--- Timings ---
Current time: 1529615350818 milliseconds
Total Time:         376.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.0 seconds, 35.3%
Fitness Testing:    192.5 seconds, 51.1%
Report:              51.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 51108.53020000001
Test mean error for best: 25.55427
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 99.3579408411 
Correct output: 17.2828270025  | Program output: 7.1991350733  
Correct output: 23.1304489589  | Program output: 8.5817293581  
Correct output: 137.0785591646 | Program output: 106.0946183291
Correct output: -36.0917810332 | Program output: -7.0917810332 
Correct output: -62.1419485102 | Program output: 6.6294923834  
Correct output: 17.1520909798  | Program output: 6.9079798795  
Correct output: -9.6087899132  | Program output: -8.6087899132 
Correct output: 75.493217436   | Program output: 50.9239348719 
Correct output: 52.2037920383  | Program output: 55.5016200346 
Correct output: -79.8347132576 | Program output: -25.8347132576
Correct output: 154.815449196  | Program output: 153.5683983919
Correct output: -19.1443327626 | Program output: 9.1130684264  
Correct output: 180.0725301747 | Program output: 164.0825603494
Correct output: -128.3399358578 | Program output: -127.3399358578
Correct output: -20.7768369154 | Program output: -24.7768369154
Correct output: -106.4972590774 | Program output: -123.4972590774
Correct output: 61.4129516245  | Program output: 88.763403249  
Correct output: 38.5197606199  | Program output: 35.7752450322 
Correct output: -4.0857969085  | Program output: 8.728731469   
Correct output: -93.8538349059 | Program output: -74.8538349059
Correct output: 27.7882694945  | Program output: 17.514038989  
Correct output: -145.332361916 | Program output: -97.332361916 
Correct output: 77.1794883917  | Program output: 44.2964767834 
Correct output: -67.6536129502 | Program output: -26.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_min} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup integer_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_min integer_mult integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_dec integer_yank float_dec float_div print_float float_sin float_div print_float float_sin integer_swap float_div float_pop)
Errors: [52.3523 12 10.0837 10 14.5487 10 30.9839 11 29.0 2 68.7714 11 10.2441 9 1.0 1 24.5693 10 3.2978 8 54.0 2 1.2471 8 28.2574 9 15.99 8 1.0 1 4.0 1 17.0 2 27.3505 10 2.7445 11 12.8145 11 19.0 2 10.2742 10 48.0 3 32.883 11 41.0 2]
Total: 735.4124
Mean: 14.708248
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3731.500707299995
Median total errors in population: 886.2079000000001
Error averages by case: (196.8459872999996 11.183 104.00155550000078 10.733 140.3482525000001 10.755 181.76994339999996 11.094 102.37231799999888 10.84 178.24028499999906 11.223 138.46559939999977 9.816 99.50825299999885 10.762 158.45117720000098 10.105 142.6874307000001 9.783 137.7027883000022 11.47 172.47233170000007 9.524 144.78262670000058 10.137 184.9523200999995 9.594 110.65900640000011 4.117 89.15356599999915 10.804 105.88214140000007 4.17 170.8787432000001 10.181 110.58064009999977 11.358 137.02314809999828 10.697 117.55955519999998 4.158 134.07982500000008 10.626 145.40174159999998 4.892 162.8204879000006 10.892 124.92998360000034 11.017)
Error minima by case: (1.0896 2 0.0837 8 0.1577 4 0.9839 2 1.0918 1 6.3705 1 0.2441 7 0.1075 1 0.5693 1 0.2636 7 17.1736 1 0.2158 2 0.1245 1 0.01 2 0.0 0 0.0 0 0.0 0 0.1752 1 0.2555 8 0.051 1 6.6312 1 0.0934 2 0.3324 2 0.029 2 8.2681 1)
Average genome size in population (length): 146.898
Average program size in population (points): 147.898
Average percent parens in population: 0.007
Minimum age in population: 137.1865012025238
Maximum age in population: 141.5740502771612
Average age in population: 139.7438609699063
Median age in population: 139.7854194361839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.463
Error (vector) diversity:			 0.473
Behavioral diversity:				 0.474
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 214053515
--- Timings ---
Current time: 1529615355857 milliseconds
Total Time:         381.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.3 seconds, 35.2%
Fitness Testing:    195.4 seconds, 51.2%
Report:              51.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 51575.42120000001
Test mean error for best: 25.78771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 101.3579408411
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 108.0946183291
Correct output: -36.0917810332 | Program output: -5.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -6.6087899132 
Correct output: 75.493217436   | Program output: 52.9239348719 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -23.8347132576
Correct output: 154.815449196  | Program output: 155.5683983919
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 166.0825603494
Correct output: -128.3399358578 | Program output: -125.3399358578
Correct output: -20.7768369154 | Program output: -22.7768369154
Correct output: -106.4972590774 | Program output: -121.4972590774
Correct output: 61.4129516245  | Program output: 90.763403249  
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -72.8538349059
Correct output: 27.7882694945  | Program output: 19.514038989  
Correct output: -145.332361916 | Program output: -95.332361916 
Correct output: 77.1794883917  | Program output: 46.2964767834 
Correct output: -67.6536129502 | Program output: -24.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup integer_mult integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_div integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec integer_swap float_div float_dec float_mod float_div print_float float_min float_mult)
Errors: [50.3523 10 8.0837 11 12.5487 10 28.9839 11 31.0 2 70.7714 11 8.2441 9 3.0 1 22.5693 10 5.2978 8 56.0 2 0.7529 8 30.2574 9 13.99 8 3.0 1 2.0 1 15.0 2 29.3505 10 0.7445 11 14.8145 11 21.0 2 8.2742 11 50.0 2 30.883 11 43.0 2]
Total: 733.9182
Mean: 14.678364
Genome size: 160
Size: 161
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4146.309559499996
Median total errors in population: 905.9702000000002
Error averages by case: (215.3094482999995 11.187 122.00877120000067 10.84 162.63020900000146 10.913 199.8033897999994 11.088 115.21957719999862 10.407 198.5139355999989 11.263 160.80759840000087 9.985 112.21226929999891 10.273 178.41429900000097 10.121 155.3781495000001 9.837 150.80369130000233 10.888 189.8027310999997 9.547 166.8635202000007 10.252 203.94377489999877 9.625 123.2676066 4.175 103.4310489999988 10.348 120.51436360000008 4.353 180.62954930000032 10.119 127.21270659999972 11.312 158.8545726999996 10.764 130.9294602 4.298 150.78526770000124 10.747 159.65373889999998 5.055 182.37968050000063 10.779 138.25619960000049 10.508)
Error minima by case: (3.0896 2 0.0837 7 0.971 7 0.9839 2 0.9082 1 3.0 1 0.0347 7 0.0107 1 3.1137 1 0.2978 7 17.1736 1 0.2158 2 0.1418 1 0.01 2 1.0 1 0.0 0 0.0 0 0.8248 1 0.1014 8 0.3528 1 9.8538 1 0.2008 2 3.3324 2 1.971 1 8.2681 1)
Average genome size in population (length): 148.921
Average program size in population (points): 149.921
Average percent parens in population: 0.007
Minimum age in population: 138.1865012025238
Maximum age in population: 143.2515485962716
Average age in population: 141.1257908314068
Median age in population: 141.1805652174293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.457
Error (vector) diversity:			 0.46
Behavioral diversity:				 0.461
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 217776565
--- Timings ---
Current time: 1529615361002 milliseconds
Total Time:         386.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.8 seconds, 35.1%
Fitness Testing:    198.3 seconds, 51.3%
Report:              52.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 51338.74720000001
Test mean error for best: 25.66937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 100.3579408411
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 107.0946183291
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 51.9239348719 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 154.5683983919
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 165.0825603494
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 89.763403249  
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 18.514038989  
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 45.2964767834 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_min} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_frominteger} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_min in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div in2 integer_pop float_dup_items integer_yank float_dec float_frominteger float_dec integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec integer_max float_dec float_div float_dec float_dec float_sub integer_mult float_dec float_dec integer_max float_dec float_div float_dec float_dec float_div float_frominteger float_div float_dec integer_yank float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [51.3523 11 9.0837 11 13.5487 10 29.9839 10 30.0 1 69.7714 11 9.2441 8 2.0 1 23.5693 10 4.2978 8 55.0 2 0.2471 7 29.2574 9 14.99 8 2.0 1 3.0 1 16.0 2 28.3505 10 1.7445 11 13.8145 11 20.0 1 9.2742 11 49.0 3 31.883 11 42.0 2]
Total: 730.4124
Mean: 14.608248
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4091.810651399995
Median total errors in population: 964.8639000000002
Error averages by case: (211.6753228999995 11.17 115.62745180000073 10.951 150.62564310000067 10.966 196.73252159999967 11.048 125.4671332999987 9.599 182.73869239999914 11.166 147.93221360000035 10.047 119.23700249999906 9.26 172.45109700000086 10.17 150.60934070000008 9.957 158.57952760000182 9.712 189.61114250000003 9.632 151.2179978000006 10.156 201.9354268999991 9.728 131.08131250000005 4.234 110.59501619999884 9.269 128.57825570000006 4.509 176.37691080000016 10.209 121.65157579999979 11.425 145.17737359999893 10.643 137.49646119999997 4.45 143.85762000000062 10.739 165.7524196999999 5.187 176.2624048000006 10.841 146.02578740000018 9.447)
Error minima by case: (1.0896 2 0.0837 7 0.4513 6 1.0786 1 0.0918 1 0.0377 1 0.0091 7 0.2057 1 1.4307 1 0.2978 7 23.2 1 0.2471 2 0.0859 1 0.0822 2 1.0 1 0.0 0 0.0 0 0.8022 1 0.1014 8 0.0561 1 7.8538 1 0.2008 2 1.3324 2 0.029 1 17.9608 1)
Average genome size in population (length): 150.355
Average program size in population (points): 151.355
Average percent parens in population: 0.007
Minimum age in population: 139.1865012025238
Maximum age in population: 144.6035946658185
Average age in population: 142.5672670682719
Median age in population: 142.6431005503926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.495
Error (vector) diversity:			 0.503
Behavioral diversity:				 0.504
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 221535440
--- Timings ---
Current time: 1529615366325 milliseconds
Total Time:         392.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.2 seconds, 35.0%
Fitness Testing:    201.4 seconds, 51.4%
Report:              53.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 51338.74720000001
Test mean error for best: 25.66937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 100.3579408411
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 107.0946183291
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 51.9239348719 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 154.5683983919
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 165.0825603494
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 89.763403249  
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 18.514038989  
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 45.2964767834 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_mult} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction float_mod} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup_items float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec integer_pop float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec integer_swap integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec float_mult print_float float_sin integer_swap float_div float_dec float_mod float_div print_float float_min float_mult)
Errors: [51.3523 11 9.0837 11 13.5487 10 29.9839 10 30.0 1 69.7714 11 9.2441 8 2.0 1 23.5693 10 4.2978 8 55.0 2 0.2471 7 29.2574 9 14.99 8 2.0 1 3.0 1 16.0 2 28.3505 10 1.7445 11 13.8145 11 20.0 1 9.2742 11 49.0 3 31.883 11 42.0 2]
Total: 730.4124
Mean: 14.608248
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3661.0877747999975
Median total errors in population: 959.06165
Error averages by case: (197.51507959999955 11.07 96.52883550000068 10.818 140.7581615000003 10.871 181.3143038000001 10.967 107.47276689999924 7.664 174.75145779999923 11.028 139.59631659999994 9.911 95.40324899999942 7.035 156.28175630000084 10.032 136.64736410000023 9.898 138.43978480000118 7.391 172.87507670000045 9.57 143.48520550000035 10.005 187.2737486999997 9.594 103.9545638 3.611 88.70985779999953 6.965 103.46563870000006 4.026 163.5189837000002 10.17 103.22437299999976 11.417 137.0037666999989 10.54 114.01713829999989 3.939 128.00003070000005 10.741 143.63952570000004 4.736 160.79784120000062 10.811 126.3889484000005 7.214)
Error minima by case: (0.4754 2 0.0837 3 0.1483 7 1.9536 2 0.1928 1 2.7464 1 0.2441 7 0.0 0 0.4307 1 0.2636 7 43.0283 1 0.2471 2 0.0995 1 0.0822 2 0.0 0 0.0 0 0.0 0 0.1978 1 0.1014 2 0.0606 1 13.0 1 0.0267 2 11.3324 2 0.0545 1 27.3072 1)
Average genome size in population (length): 152.272
Average program size in population (points): 153.272
Average percent parens in population: 0.007
Minimum age in population: 140.1865012025238
Maximum age in population: 146.0908022829677
Average age in population: 144.0785485119558
Median age in population: 144.1694296802468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.505
Error (vector) diversity:			 0.511
Behavioral diversity:				 0.513
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 225342315
--- Timings ---
Current time: 1529615371565 milliseconds
Total Time:         397.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.6 seconds, 34.9%
Fitness Testing:    204.4 seconds, 51.4%
Report:              54.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 51338.74720000001
Test mean error for best: 25.66937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 100.3579408411
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 107.0946183291
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 51.9239348719 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 154.5683983919
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 165.0825603494
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 89.763403249  
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 18.514038989  
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 45.2964767834 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_stackdepth integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_div float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_swap float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [51.3523 11 9.0837 11 13.5487 10 29.9839 10 30.0 1 69.7714 11 9.2441 8 2.0 1 23.5693 10 4.2978 8 55.0 2 0.2471 7 29.2574 9 14.99 8 2.0 1 3.0 1 16.0 2 28.3505 10 1.7445 11 13.8145 11 20.0 1 9.2742 11 49.0 3 31.883 11 42.0 2]
Total: 730.4124
Mean: 14.608248
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3941.259790100001
Median total errors in population: 922.7862000000001
Error averages by case: (207.10385329999968 10.986 103.96167020000063 10.843 153.6854901000007 10.953 191.90890069999935 10.91 127.23282689999968 5.491 186.8786863999993 10.988 152.2165638000004 9.952 106.91980049999978 4.552 168.66232270000086 9.974 148.48437950000013 9.928 152.67931370000036 5.002 186.70947599999985 9.524 156.65844950000047 9.988 197.30339619999899 9.467 113.49810830000003 3.324 103.05034589999978 4.542 117.25770400000002 3.959 171.63324070000007 10.041 108.37363989999979 11.482 150.5314035999989 10.452 124.85132339999997 3.84 139.50068800000045 10.695 152.31786940000006 4.571 171.84924090000075 10.739 140.8090965 4.979)
Error minima by case: (0.0896 2 0.0837 3 0.5487 7 1.2561 1 0.335 1 2.7357 1 0.0619 7 0.0 0 0.4307 1 0.2341 2 8.9426 1 0.2471 1 0.125 1 0.0822 2 0.0 0 0.0 0 1.0 1 2.1673 1 0.2555 3 0.1823 1 10.0 1 0.0934 2 5.3324 2 0.029 1 23.9608 1)
Average genome size in population (length): 155.126
Average program size in population (points): 156.126
Average percent parens in population: 0.006
Minimum age in population: 142.7374522014847
Maximum age in population: 147.5109852012714
Average age in population: 145.5114104644825
Median age in population: 145.5586942152328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.968
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.968
Total error diversity:				 0.477
Error (vector) diversity:			 0.483
Behavioral diversity:				 0.484
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 229220490
--- Timings ---
Current time: 1529615376877 milliseconds
Total Time:         402.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.0 seconds, 34.8%
Fitness Testing:    207.5 seconds, 51.5%
Report:              55.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 51338.74720000001
Test mean error for best: 25.66937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 100.3579408411
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 107.0946183291
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 51.9239348719 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 154.5683983919
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 165.0825603494
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 89.763403249  
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 18.514038989  
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 45.2964767834 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction tag_float_237} {:instruction float_mod} {:instruction float_pop} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_rot} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction print_float} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 tag_float_237 float_mod float_pop integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max float_rot float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max integer_dup in2 float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div float_div print_float float_min float_mult)
Errors: [51.3523 11 9.0837 11 13.5487 10 29.9839 10 30.0 1 69.7714 11 9.2441 8 2.0 1 23.5693 10 4.2978 8 55.0 2 0.2471 7 29.2574 9 14.99 8 2.0 1 3.0 1 16.0 2 28.3505 10 1.7445 11 13.8145 11 20.0 1 9.2742 11 49.0 3 31.883 11 42.0 2]
Total: 730.4124
Mean: 14.608248
Genome size: 159
Size: 160
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3743.3320252999997
Median total errors in population: 910.40185
Error averages by case: (193.79626839999938 11.016 109.4259857000007 10.952 134.76486819999988 10.926 178.2532693999997 10.823 127.48241109999981 4.69 167.3577445999994 11.016 133.12683529999967 10.03 105.67672959999987 3.901 154.27906650000065 9.976 140.2048828000003 9.905 151.89756620000034 4.52 170.8416515000002 9.424 135.6491192000006 10.091 184.6584650999992 9.572 115.83443640000006 3.471 103.05817619999992 3.867 121.29156650000007 4.152 160.4263470000003 10.088 114.78839169999988 11.409 129.09480399999853 10.553 125.87785889999996 3.906 129.1660044999999 10.853 153.91938960000002 4.619 157.2997389000007 10.714 140.19044800000015 4.496)
Error minima by case: (0.233 2 0.0837 3 1.1483 4 0.6122 1 1.1412 1 3.3705 1 0.2441 7 0.0 0 1.928 1 0.2978 2 12.4876 1 0.2158 2 0.1286 1 0.0822 2 0.0 0 0.0 0 1.0 1 0.8248 1 0.1014 3 0.0303 1 12.0 1 0.2742 1 6.3324 2 0.8825 1 4.2681 1)
Average genome size in population (length): 157.699
Average program size in population (points): 158.699
Average percent parens in population: 0.006
Minimum age in population: 144.6730410726671
Maximum age in population: 148.874003265352
Average age in population: 146.8112235367114
Median age in population: 146.8257531761984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.458
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 233162990
--- Timings ---
Current time: 1529615382298 milliseconds
Total Time:         408.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.5 seconds, 34.7%
Fitness Testing:    210.6 seconds, 51.6%
Report:              55.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 51338.74720000001
Test mean error for best: 25.66937
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 100.3579408411
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 107.0946183291
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 51.9239348719 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 154.5683983919
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 165.0825603494
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 89.763403249  
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 18.514038989  
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 45.2964767834 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_flush} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_sub} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_min} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_pop} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_frominteger} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_flush float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_sub float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_min in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items integer_yankdup integer_dup float_rot float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_pop float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_max float_dec float_dec float_div float_dec float_rot float_dec float_dec float_dec float_dup_items float_div in2 integer_pop float_dup_items integer_yank float_dec float_frominteger float_dec integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_div float_dup_items integer_yank float_dec integer_max float_dec float_div float_dec float_dec float_sub integer_mult float_dec float_dec integer_max float_dec float_div float_dec float_dec float_div float_frominteger float_div float_dec integer_yank float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [51.3523 11 9.0837 11 13.5487 10 29.9839 10 30.0 1 69.7714 11 9.2441 8 2.0 1 23.5693 10 4.2978 8 55.0 2 0.2471 7 29.2574 9 14.99 8 2.0 1 3.0 1 16.0 2 28.3505 10 1.7445 11 13.8145 11 20.0 1 9.2742 11 49.0 3 31.883 11 42.0 2]
Total: 730.4124
Mean: 14.608248
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3755.470964499998
Median total errors in population: 861.0893000000001
Error averages by case: (193.5460970999994 10.993 102.32293490000075 11.013 145.96327580000047 10.914 178.5916787999996 10.778 126.18584319999981 4.229 176.98295209999904 10.957 142.28462740000026 10.034 103.7327386999999 3.454 156.02760360000076 10.061 141.76822120000034 9.807 149.7537761000002 4.233 167.81620289999998 9.326 146.96806120000056 9.982 181.3106127999991 9.523 111.60948750000009 3.33 101.52260039999996 3.482 118.37015090000004 4.071 158.05762980000026 10.07 107.56912009999989 11.35 140.99270399999892 10.589 123.3235889 3.781 129.23911689999997 10.923 150.88265750000002 4.488 160.34211860000062 10.752 137.96416409999998 4.203)
Error minima by case: (2.2977 2 0.0837 7 1.1483 5 1.0161 1 3.0918 1 10.3705 2 0.2441 6 0.0 0 0.5693 1 0.2636 7 28.5041 1 0.1297 1 0.1443 1 0.0822 2 0.0 0 0.0 0 0.0 0 0.7753 1 0.1014 8 0.2063 1 11.0 1 0.0267 2 40.0 1 0.883 1 17.9608 1)
Average genome size in population (length): 159.49
Average program size in population (points): 160.49
Average percent parens in population: 0.006
Minimum age in population: 146.2246933374564
Maximum age in population: 150.4182685575504
Average age in population: 148.0851345113857
Median age in population: 148.0897174812896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.427
Error (vector) diversity:			 0.431
Behavioral diversity:				 0.432
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 237150290
--- Timings ---
Current time: 1529615387806 milliseconds
Total Time:         413.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.9 seconds, 34.6%
Fitness Testing:    213.8 seconds, 51.7%
Report:              56.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 54228.40039999999
Test mean error for best: 27.11420
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.961503865 
Correct output: 17.2828270025  | Program output: 7.1991350733  
Correct output: 23.1304489589  | Program output: 8.5817293581  
Correct output: 137.0785591646 | Program output: 127.6604957183
Correct output: -36.0917810332 | Program output: -7.0917810332 
Correct output: -62.1419485102 | Program output: 6.6294923834  
Correct output: 17.1520909798  | Program output: 6.9079798795  
Correct output: -9.6087899132  | Program output: -8.6087899132 
Correct output: 75.493217436   | Program output: 64.6091655079 
Correct output: 52.2037920383  | Program output: 55.5016200346 
Correct output: -79.8347132576 | Program output: -25.8347132576
Correct output: 154.815449196  | Program output: 181.9159036295
Correct output: -19.1443327626 | Program output: 9.1130684264  
Correct output: 180.0725301747 | Program output: 193.9320354483
Correct output: -128.3399358578 | Program output: -127.3399358578
Correct output: -20.7768369154 | Program output: -24.7768369154
Correct output: -106.4972590774 | Program output: -123.4972590774
Correct output: 61.4129516245  | Program output: 107.8535832862
Correct output: 38.5197606199  | Program output: 35.7752450322 
Correct output: -4.0857969085  | Program output: 8.728731469   
Correct output: -93.8538349059 | Program output: -74.8538349059
Correct output: 27.7882694945  | Program output: 26.4278912106 
Correct output: -145.332361916 | Program output: -97.332361916 
Correct output: 77.1794883917  | Program output: 57.0351176457 
Correct output: -67.6536129502 | Program output: -26.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_sin})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dec float_rot integer_dup float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec integer_yank float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_div integer_dup_items float_dec float_dec float_div float_dec float_div float_dup_items integer_yank float_dec float_div float_dec float_dec integer_yank float_dec float_div print_float float_sin float_div print_float float_sin integer_swap float_div float_sin)
Errors: [31.7487 11 10.0837 10 14.5487 10 9.4181 10 29.0 2 68.7714 11 10.2441 9 1.0 1 10.8841 11 3.2978 8 54.0 2 27.1005 9 28.2574 9 13.8595 10 1.0 1 4.0 1 17.0 2 46.4406 12 2.7445 11 12.8145 11 19.0 2 1.3604 11 48.0 3 20.1444 10 41.0 2]
Total: 704.7184000000001
Mean: 14.094368
Genome size: 164
Size: 165
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3699.977546499999
Median total errors in population: 929.6694
Error averages by case: (194.00133869999954 11.059 100.84232640000083 11.085 140.98298100000028 10.915 178.4711671999999 10.757 123.61875099999988 4.086 171.18597719999917 10.872 140.3436201999999 10.011 101.49552169999993 3.474 154.89874090000092 10.086 134.4360935000002 9.781 147.85381810000013 4.203 170.58266530000014 9.404 140.21774800000043 10.046 184.9578234999993 9.568 108.83959910000002 3.237 100.38386939999992 3.417 116.66341570000007 4.01 153.88036950000014 10.098 107.71695869999995 11.29 134.19460379999833 10.55 120.41584559999993 3.632 126.74564219999999 10.866 148.19394159999996 4.456 161.12433760000056 10.804 136.13939060000004 4.084)
Error minima by case: (0.5246 2 0.3665 8 0.5532 7 4.9839 1 0.0918 1 1.5296 2 0.0347 6 0.0 0 0.5693 1 0.2978 7 0.0496 1 0.1334 1 0.089 1 0.0822 2 0.0 0 0.0 0 4.0 1 0.8248 1 0.1014 8 0.0364 1 9.0 1 0.2511 2 14.3324 1 0.5908 1 1.4431 1)
Average genome size in population (length): 160.118
Average program size in population (points): 161.118
Average percent parens in population: 0.006
Minimum age in population: 147.293061377637
Maximum age in population: 151.5977197759852
Average age in population: 149.3762621529711
Median age in population: 149.4148689695509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.439
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 241153315
--- Timings ---
Current time: 1529615393237 milliseconds
Total Time:         419.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.4 seconds, 34.5%
Fitness Testing:    217.0 seconds, 51.8%
Report:              57.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 55193.973799999985
Test mean error for best: 27.59699
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.961503865 
Correct output: 17.2828270025  | Program output: 10.1991350733 
Correct output: 23.1304489589  | Program output: 11.5817293581 
Correct output: 137.0785591646 | Program output: 130.6604957183
Correct output: -36.0917810332 | Program output: -4.0917810332 
Correct output: -62.1419485102 | Program output: 9.6294923834  
Correct output: 17.1520909798  | Program output: 9.9079798795  
Correct output: -9.6087899132  | Program output: -5.6087899132 
Correct output: 75.493217436   | Program output: 67.6091655079 
Correct output: 52.2037920383  | Program output: 58.5016200346 
Correct output: -79.8347132576 | Program output: -22.8347132576
Correct output: 154.815449196  | Program output: 184.9159036295
Correct output: -19.1443327626 | Program output: 12.1130684264 
Correct output: 180.0725301747 | Program output: 196.9320354483
Correct output: -128.3399358578 | Program output: -124.3399358578
Correct output: -20.7768369154 | Program output: -21.7768369154
Correct output: -106.4972590774 | Program output: -120.4972590774
Correct output: 61.4129516245  | Program output: 110.8535832862
Correct output: 38.5197606199  | Program output: 38.7752450322 
Correct output: -4.0857969085  | Program output: 11.728731469  
Correct output: -93.8538349059 | Program output: -71.8538349059
Correct output: 27.7882694945  | Program output: 29.4278912106 
Correct output: -145.332361916 | Program output: -94.332361916 
Correct output: 77.1794883917  | Program output: 60.0351176457 
Correct output: -67.6536129502 | Program output: -23.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub float_sub integer_mult integer_yank float_dec integer_mult float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [28.7487 11 7.0837 10 11.5487 10 6.4181 10 32.0 2 71.7714 11 7.2441 9 4.0 1 7.8841 11 6.2978 8 57.0 2 30.1005 8 31.2574 9 16.8595 10 4.0 1 1.0 1 14.0 2 49.4406 11 0.2555 10 15.8145 11 22.0 2 1.6396 11 51.0 2 17.1444 11 44.0 2]
Total: 714.5086
Mean: 14.290172
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3794.3108225999977
Median total errors in population: 1042.2832500000002
Error averages by case: (202.56892869999965 10.969 105.16363060000062 11.096 142.9171620000002 11.046 188.16499839999997 10.656 123.60419129999988 4.228 170.69994239999946 10.892 143.13018990000026 10.136 101.45553589999987 3.637 161.30099560000048 9.956 140.09831860000023 10.006 148.20843330000017 4.393 180.8576922 9.409 140.37657700000048 10.082 195.46572979999976 9.69 111.66671310000008 3.496 100.62180259999997 3.644 118.92201490000008 4.217 159.9228726000001 10.073 113.55749199999994 11.311 135.71445619999858 10.484 122.13104869999997 3.778 131.64882229999995 11.015 150.1194083 4.672 165.6193005000004 10.663 136.48556569999997 4.34)
Error minima by case: (3.2563 2 0.4496 8 0.3345 6 1.9536 1 2.0918 1 4.4308 2 0.5558 6 0.0 0 3.9887 1 0.2978 7 8.5804 1 0.2158 2 0.0326 1 0.1489 2 0.0 0 0.0 0 2.0 1 1.1478 2 0.1014 8 0.1314 1 5.4387 1 0.1294 2 4.3324 2 0.0545 1 20.7615 1)
Average genome size in population (length): 160.063
Average program size in population (points): 161.063
Average percent parens in population: 0.006
Minimum age in population: 148.443963469863
Maximum age in population: 152.5548808897099
Average age in population: 150.5636897312614
Median age in population: 150.596978271063
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.47
Error (vector) diversity:			 0.475
Behavioral diversity:				 0.476
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 245154965
--- Timings ---
Current time: 1529615398557 milliseconds
Total Time:         424.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.8 seconds, 34.3%
Fitness Testing:    220.2 seconds, 51.9%
Report:              58.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 55193.973799999985
Test mean error for best: 27.59699
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.961503865 
Correct output: 17.2828270025  | Program output: 10.1991350733 
Correct output: 23.1304489589  | Program output: 11.5817293581 
Correct output: 137.0785591646 | Program output: 130.6604957183
Correct output: -36.0917810332 | Program output: -4.0917810332 
Correct output: -62.1419485102 | Program output: 9.6294923834  
Correct output: 17.1520909798  | Program output: 9.9079798795  
Correct output: -9.6087899132  | Program output: -5.6087899132 
Correct output: 75.493217436   | Program output: 67.6091655079 
Correct output: 52.2037920383  | Program output: 58.5016200346 
Correct output: -79.8347132576 | Program output: -22.8347132576
Correct output: 154.815449196  | Program output: 184.9159036295
Correct output: -19.1443327626 | Program output: 12.1130684264 
Correct output: 180.0725301747 | Program output: 196.9320354483
Correct output: -128.3399358578 | Program output: -124.3399358578
Correct output: -20.7768369154 | Program output: -21.7768369154
Correct output: -106.4972590774 | Program output: -120.4972590774
Correct output: 61.4129516245  | Program output: 110.8535832862
Correct output: 38.5197606199  | Program output: 38.7752450322 
Correct output: -4.0857969085  | Program output: 11.728731469  
Correct output: -93.8538349059 | Program output: -71.8538349059
Correct output: 27.7882694945  | Program output: 29.4278912106 
Correct output: -145.332361916 | Program output: -94.332361916 
Correct output: 77.1794883917  | Program output: 60.0351176457 
Correct output: -67.6536129502 | Program output: -23.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub float_sub integer_mult integer_yank float_dec integer_mult float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [28.7487 11 7.0837 10 11.5487 10 6.4181 10 32.0 2 71.7714 11 7.2441 9 4.0 1 7.8841 11 6.2978 8 57.0 2 30.1005 8 31.2574 9 16.8595 10 4.0 1 1.0 1 14.0 2 49.4406 11 0.2555 10 15.8145 11 22.0 2 1.6396 11 51.0 2 17.1444 11 44.0 2]
Total: 714.5086
Mean: 14.290172
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4040.4144070999987
Median total errors in population: 976.4475
Error averages by case: (215.32401509999966 10.967 109.42720190000047 11.117 160.83292450000087 10.933 201.1045952999994 10.649 126.46090749999988 4.251 187.37119959999927 10.919 158.1681940000004 10.121 104.89098519999985 3.694 174.64401480000055 10.047 151.9845713000003 9.911 150.99854840000017 4.437 193.44116160000016 9.377 157.8360621000005 10.164 208.83008139999882 9.674 115.46432010000007 3.453 104.00238859999992 3.729 122.85744470000007 4.165 179.12414960000018 10.19 119.95563119999993 11.231 152.84630189999885 10.512 126.09465299999994 3.744 143.72467710000035 10.954 154.1288763 4.623 177.39136690000043 10.72 139.55813500000002 4.37)
Error minima by case: (2.5663 2 0.7148 7 0.5487 6 1.0161 1 0.0918 1 3.5326 1 0.615 7 0.0 0 1.5513 1 0.2978 7 6.7032 1 0.2158 2 0.0899 1 0.0822 2 0.0 0 0.0 0 1.0 1 0.0478 1 0.1014 8 0.0253 1 7.0 1 0.0267 1 9.3324 1 0.117 1 9.0442 1)
Average genome size in population (length): 160.491
Average program size in population (points): 161.491
Average percent parens in population: 0.006
Minimum age in population: 149.6176654940515
Maximum age in population: 153.7351175040583
Average age in population: 151.8181948766333
Median age in population: 151.86625564292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.473
Error (vector) diversity:			 0.477
Behavioral diversity:				 0.478
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 249167290
--- Timings ---
Current time: 1529615404006 milliseconds
Total Time:         429.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.2 seconds, 34.3%
Fitness Testing:    223.3 seconds, 52.0%
Report:              59.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 54535.406599999995
Test mean error for best: 27.26770
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.961503865 
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 128.6604957183
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 65.6091655079 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 182.9159036295
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 194.9320354483
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 108.8535832862
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 27.4278912106 
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 58.0351176457 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_rot} {:instruction float_dec} {:instruction float_add} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank integer_yank integer_rot float_dec float_add float_div float_dec float_add float_sub float_dec float_dec float_dup_items integer_yank float_dec in2 float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_yank float_dec integer_max integer_dup float_dec float_div float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [30.7487 11 9.0837 11 13.5487 10 8.4181 11 30.0 1 69.7714 11 9.2441 8 2.0 1 9.8841 10 4.2978 8 55.0 2 28.1005 9 29.2574 9 14.8595 10 2.0 1 3.0 1 16.0 2 47.4406 12 1.7445 11 13.8145 11 20.0 1 0.3604 10 49.0 3 19.1444 11 42.0 2]
Total: 705.7184000000001
Mean: 14.114368
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4040.7985971999988
Median total errors in population: 919.33745
Error averages by case: (213.06109359999965 11.051 114.25514230000076 11.184 156.62034270000038 10.989 198.86600909999987 10.754 129.61891469999983 4.035 185.0573315999993 11.006 153.0155325000003 10.102 107.13043729999993 3.53 173.83569440000076 10.097 151.42018710000025 9.87 154.27573070000014 4.263 188.2751957999997 9.338 156.51610680000056 10.136 204.2872839999993 9.678 117.17007470000009 3.343 107.09593369999989 3.517 125.0394011000001 4.085 181.34058000000022 10.174 119.09140569999992 11.398 151.551249499999 10.629 128.07921799999997 3.625 146.2233467000004 11.027 156.09988050000007 4.574 176.8219522000005 10.78 142.65655250000012 4.209)
Error minima by case: (2.5663 2 0.2828 8 0.8334 6 1.2561 1 0.8279 1 5.3705 1 0.1521 7 0.0 0 0.928 1 0.2978 7 43.0 1 0.2158 2 0.0483 1 0.0822 2 0.0 0 0.0 0 2.0 1 1.1478 1 0.1014 7 0.5077 2 8.0 1 0.0934 1 37.0 2 1.4509 1 29.3072 1)
Average genome size in population (length): 161.752
Average program size in population (points): 162.752
Average percent parens in population: 0.006
Minimum age in population: 150.6857871770078
Maximum age in population: 155.3141224642646
Average age in population: 153.1039663438246
Median age in population: 153.1160680345341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.968
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.968
Total error diversity:				 0.455
Error (vector) diversity:			 0.457
Behavioral diversity:				 0.459
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 253211206
--- Timings ---
Current time: 1529615409488 milliseconds
Total Time:         435.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.7 seconds, 34.2%
Fitness Testing:    226.5 seconds, 52.0%
Report:              60.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 54535.406599999995
Test mean error for best: 27.26770
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.961503865 
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 128.6604957183
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 65.6091655079 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 182.9159036295
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 194.9320354483
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 108.8535832862
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 27.4278912106 
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 58.0351176457 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub float_sub integer_mult integer_yank float_dec integer_mult float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [30.7487 11 9.0837 11 13.5487 10 8.4181 11 30.0 1 69.7714 11 9.2441 8 2.0 1 9.8841 10 4.2978 8 55.0 2 28.1005 9 29.2574 9 14.8595 10 2.0 1 3.0 1 16.0 2 47.4406 12 1.7445 11 13.8145 11 20.0 1 0.3604 10 49.0 3 19.1444 11 42.0 2]
Total: 705.7184000000001
Mean: 14.114368
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3875.951480799998
Median total errors in population: 966.732
Error averages by case: (213.86889269999955 11.007 105.04647810000075 11.103 159.86030600000038 10.954 200.7044512999997 10.718 113.00681059999997 3.958 187.24053629999935 10.928 156.0423036000005 9.965 90.17149289999993 3.477 171.63801710000052 10.092 150.29523570000018 9.819 137.98058920000017 4.177 193.82410080000028 9.357 159.67419750000056 10.089 206.38496019999923 9.688 99.75782660000004 3.294 89.91971400000001 3.404 107.6588120000001 3.997 176.93845690000015 10.193 111.4419188999999 11.298 151.26518689999895 10.604 110.35543439999992 3.572 140.0952975000003 11.047 139.0577643 4.487 175.62881000000047 10.798 125.93788730000007 4.13)
Error minima by case: (1.301 2 0.0837 7 0.8334 6 0.2705 1 1.0918 1 9.3705 1 0.2441 7 0.0 0 0.2871 2 0.2978 7 3.2657 1 0.2054 1 0.1443 1 0.8511 2 0.0 0 0.0 0 0.0 0 0.1478 2 0.2555 8 0.0536 1 10.0 1 0.0579 1 18.6676 1 0.117 1 8.9154 1)
Average genome size in population (length): 162.626
Average program size in population (points): 163.626
Average percent parens in population: 0.006
Minimum age in population: 151.7037428565437
Maximum age in population: 156.820312607676
Average age in population: 154.3175223051817
Median age in population: 154.3394619736335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.459
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 257276931
--- Timings ---
Current time: 1529615414992 milliseconds
Total Time:         440.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.1 seconds, 34.1%
Fitness Testing:    229.8 seconds, 52.1%
Report:              60.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 54652.37970000004
Test mean error for best: 27.32619
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 121.2662181042
Correct output: 17.2828270025  | Program output: 8.1991350733  
Correct output: 23.1304489589  | Program output: 9.5817293581  
Correct output: 137.0785591646 | Program output: 128.9652780904
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: 7.6294923834  
Correct output: 17.1520909798  | Program output: 7.9079798795  
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 65.9130684251 
Correct output: 52.2037920383  | Program output: 56.5016200346 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 183.2210267336
Correct output: -19.1443327626 | Program output: 10.1130684264 
Correct output: 180.0725301747 | Program output: 195.2372118279
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 109.1581751417
Correct output: 38.5197606199  | Program output: 36.7752450322 
Correct output: -4.0857969085  | Program output: 9.728731469   
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 27.7303302732 
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 58.3388306096 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction integer_max} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_dup_items float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_dec integer_yank float_dec integer_max integer_max float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [30.444 9 9.0837 11 13.5487 10 8.1133 11 30.0 1 69.7714 11 9.2441 8 2.0 1 9.5801 9 4.2978 8 55.0 2 28.4056 10 29.2574 9 15.1647 10 2.0 1 3.0 1 16.0 2 47.7452 12 1.7445 11 13.8145 11 20.0 1 0.0579 9 49.0 3 18.8407 11 42.0 2]
Total: 702.1135999999999
Mean: 14.042272
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3753.5631870999987
Median total errors in population: 954.0783500000001
Error averages by case: (199.65879509999942 10.974 100.72268270000083 11.154 147.8785664000001 10.942 184.48282010000017 10.614 120.20017489999991 4.012 173.51836349999925 10.87 144.84519870000005 10.049 98.12173529999991 3.564 159.21285580000065 10.056 138.21869130000022 9.84 144.8315184000001 4.329 178.35705810000013 9.307 144.39311760000066 10.056 191.58360839999966 9.688 108.91273220000005 3.46 98.01901899999996 3.56 116.72589660000007 4.14 163.4177991000002 10.227 107.22861020000009 11.318 138.92951209999862 10.561 119.02899159999996 3.69 128.99798930000003 11.029 147.22399800000005 4.643 162.87181210000054 10.761 133.0316406000001 4.306)
Error minima by case: (2.0896 2 1.0837 7 0.5532 6 0.4181 1 2.0918 1 4.5423 1 0.0442 6 0.0 0 0.3918 2 0.2978 7 9.0988 1 0.1846 1 0.1681 1 0.0822 2 0.0 0 0.0 0 1.0 1 1.1478 1 0.2555 8 0.0219 2 2.905 1 0.0579 1 10.141 1 0.117 1 3.141 1)
Average genome size in population (length): 163.249
Average program size in population (points): 164.249
Average percent parens in population: 0.006
Minimum age in population: 153.3784818332524
Maximum age in population: 157.493380165016
Average age in population: 155.5644915177111
Median age in population: 155.5952913018734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.966
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.966
Total error diversity:				 0.469
Error (vector) diversity:			 0.472
Behavioral diversity:				 0.473
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 261358206
--- Timings ---
Current time: 1529615420618 milliseconds
Total Time:         446.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.6 seconds, 34.0%
Fitness Testing:    233.1 seconds, 52.2%
Report:              61.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 54068.381100000035
Test mean error for best: 27.03419
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2662181042
Correct output: 17.2828270025  | Program output: 6.1991350733  
Correct output: 23.1304489589  | Program output: 7.5817293581  
Correct output: 137.0785591646 | Program output: 126.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6294923834  
Correct output: 17.1520909798  | Program output: 5.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.9130684251 
Correct output: 52.2037920383  | Program output: 54.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.2210267336
Correct output: -19.1443327626 | Program output: 8.1130684264  
Correct output: 180.0725301747 | Program output: 193.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.1581751417
Correct output: 38.5197606199  | Program output: 34.7752450322 
Correct output: -4.0857969085  | Program output: 7.728731469   
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_dup} {:instruction in2} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 float_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_yankdup float_rot in2 float_dup_items float_dup_items float_add integer_shove float_inc float_yankdup float_max float_max integer_dup in2 float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_dup_items float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [32.444 10 11.0837 11 15.5487 10 10.1133 11 28.0 2 67.7714 11 11.2441 9 0.0 0 11.5801 10 2.2978 8 53.0 2 26.4056 10 27.2574 10 13.1647 10 0.0 0 5.0 1 18.0 2 45.7452 12 3.7445 11 11.8145 11 18.0 2 2.0579 10 47.0 3 20.8407 11 40.0 1]
Total: 700.1135999999999
Mean: 14.002272
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3522.309117199998
Median total errors in population: 950.6381
Error averages by case: (190.32963369999936 11.064 94.59034320000085 11.088 129.9448759999996 10.878 175.05281910000025 10.754 113.72065399999984 3.954 157.56652289999934 10.856 127.51901499999951 9.914 91.49002749999991 3.482 148.40950140000058 10.123 131.2320987000004 9.82 138.55616760000012 4.195 173.18162630000006 9.419 127.14135650000053 9.97 183.8664820999997 9.827 100.28436130000009 3.259 90.50823829999993 3.398 107.79044490000003 4.008 156.20512660000026 10.332 103.10642800000008 11.315 122.21597489999819 10.499 110.61903539999999 3.577 128.86694110000005 11.015 139.23324680000002 4.49 151.9458165000004 10.85 126.70637940000012 4.139)
Error minima by case: (0.0896 2 0.212 8 1.5487 3 1.4181 1 0.7918 1 6.8644 1 0.4309 3 0.0 0 0.4487 1 0.2978 7 12.1653 1 0.2002 2 0.0525 1 0.0115 2 0.0 0 0.0 0 1.0 1 0.3171 1 0.1014 8 0.0535 2 9.0 1 0.0579 1 13.3324 2 0.1795 1 11.3464 1)
Average genome size in population (length): 164.14
Average program size in population (points): 165.14
Average percent parens in population: 0.006
Minimum age in population: 154.3784818332524
Maximum age in population: 158.6562762688915
Average age in population: 156.8180589377177
Median age in population: 156.8436363461281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.495
Error (vector) diversity:			 0.498
Behavioral diversity:				 0.499
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 265461781
--- Timings ---
Current time: 1529615426117 milliseconds
Total Time:         451.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.0 seconds, 33.9%
Fitness Testing:    236.3 seconds, 52.3%
Report:              62.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 54068.381100000035
Test mean error for best: 27.03419
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2662181042
Correct output: 17.2828270025  | Program output: 6.1991350733  
Correct output: 23.1304489589  | Program output: 7.5817293581  
Correct output: 137.0785591646 | Program output: 126.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6294923834  
Correct output: 17.1520909798  | Program output: 5.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.9130684251 
Correct output: 52.2037920383  | Program output: 54.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.2210267336
Correct output: -19.1443327626 | Program output: 8.1130684264  
Correct output: 180.0725301747 | Program output: 193.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.1581751417
Correct output: 38.5197606199  | Program output: 34.7752450322 
Correct output: -4.0857969085  | Program output: 7.728731469   
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_yank float_dec integer_dup_items float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [32.444 10 11.0837 11 15.5487 10 10.1133 11 28.0 2 67.7714 11 11.2441 9 0.0 0 11.5801 10 2.2978 8 53.0 2 26.4056 10 27.2574 10 13.1647 10 0.0 0 5.0 1 18.0 2 45.7452 12 3.7445 11 11.8145 11 18.0 2 2.0579 10 47.0 3 20.8407 11 40.0 1]
Total: 700.1135999999999
Mean: 14.002272
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3985.625436899997
Median total errors in population: 1086.16725
Error averages by case: (214.10754949999932 11.238 112.14249780000064 11.086 151.7337110000002 10.97 200.30199810000028 11.002 121.42084849999979 4.426 178.49605939999924 11.027 147.90325979999997 10.144 100.12674739999987 3.875 174.2846653000001 10.402 150.03278680000022 9.947 146.3689280000002 4.576 201.46695339999997 9.919 150.4073308000006 10.248 210.10651699999926 10.24 113.47399870000012 3.604 98.97455499999988 3.836 119.99353730000009 4.292 185.8403234000004 10.72 119.26691600000001 11.331 144.87661879999902 10.689 123.00914489999994 3.935 148.1098741000002 11.056 151.52499370000004 4.709 178.05721150000008 11.07 134.73741070000014 4.519)
Error minima by case: (2.7487 2 0.788 8 0.4513 6 1.0161 1 1.0918 1 3.1022 1 0.0411 7 0.0 0 1.5513 1 0.2978 7 10.9426 1 0.2002 1 0.0093 2 0.0115 2 0.0 0 0.0 0 1.0 1 0.3171 1 0.2555 8 0.0113 1 6.0 1 0.0429 1 12.3324 1 0.883 1 26.2314 1)
Average genome size in population (length): 166.07
Average program size in population (points): 167.07
Average percent parens in population: 0.006
Minimum age in population: 156.2333349122454
Maximum age in population: 160.1317809778878
Average age in population: 158.1923485659298
Median age in population: 158.2367641754954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.541
Error (vector) diversity:			 0.548
Behavioral diversity:				 0.548
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 269613606
--- Timings ---
Current time: 1529615431753 milliseconds
Total Time:         457.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.4 seconds, 33.7%
Fitness Testing:    239.7 seconds, 52.4%
Report:              63.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 54068.381100000035
Test mean error for best: 27.03419
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2662181042
Correct output: 17.2828270025  | Program output: 6.1991350733  
Correct output: 23.1304489589  | Program output: 7.5817293581  
Correct output: 137.0785591646 | Program output: 126.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6294923834  
Correct output: 17.1520909798  | Program output: 5.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.9130684251 
Correct output: 52.2037920383  | Program output: 54.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.2210267336
Correct output: -19.1443327626 | Program output: 8.1130684264  
Correct output: 180.0725301747 | Program output: 193.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.1581751417
Correct output: 38.5197606199  | Program output: 34.7752450322 
Correct output: -4.0857969085  | Program output: 7.728731469   
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_div} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_stackdepth float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_div in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_div float_dec float_rot float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_max float_dec float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [32.444 10 11.0837 11 15.5487 10 10.1133 11 28.0 2 67.7714 11 11.2441 9 0.0 0 11.5801 10 2.2978 8 53.0 2 26.4056 10 27.2574 10 13.1647 10 0.0 0 5.0 1 18.0 2 45.7452 12 3.7445 11 11.8145 11 18.0 2 2.0579 10 47.0 3 20.8407 11 40.0 1]
Total: 700.1135999999999
Mean: 14.002272
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4458.299653999998
Median total errors in population: 1161.989
Error averages by case: (230.99523069999907 11.165 124.74499070000077 11.109 161.54569670000072 10.992 217.58471090000046 10.97 147.56353559999974 4.838 188.0525487999992 10.96 158.19939270000063 10.157 127.16086549999989 4.193 193.15352509999985 10.426 160.76626280000005 9.918 171.91055880000025 4.876 225.65077199999996 10.043 158.14972350000056 10.115 232.37921559999882 10.41 138.97113300000012 3.861 126.92864519999979 4.156 145.9217605 4.54 205.5520004000005 10.87 132.28206450000002 11.383 153.04744939999878 10.601 148.0117494 4.249 165.29797680000055 11.054 175.4446380000001 4.938 196.60492459999955 11.039 160.69228279999987 4.825)
Error minima by case: (0.9937 2 0.0837 7 1.4513 6 0.1133 1 0.0918 1 1.0 1 0.0012 6 0.0 0 0.2871 1 0.2978 7 6.1653 1 0.2471 2 0.0148 1 0.01 2 0.0 0 0.0 0 1.0 1 0.3171 1 0.2555 8 0.0634 1 8.0 1 0.0429 1 7.3324 1 0.8205 1 5.3464 1)
Average genome size in population (length): 167.393
Average program size in population (points): 168.393
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 161.4698629493405
Average age in population: 159.2320250740643
Median age in population: 159.5837657686847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.536
Error (vector) diversity:			 0.539
Behavioral diversity:				 0.539
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 273798506
--- Timings ---
Current time: 1529615437310 milliseconds
Total Time:         463.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.9 seconds, 33.7%
Fitness Testing:    243.0 seconds, 52.5%
Report:              64.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 54068.381100000035
Test mean error for best: 27.03419
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2662181042
Correct output: 17.2828270025  | Program output: 6.1991350733  
Correct output: 23.1304489589  | Program output: 7.5817293581  
Correct output: 137.0785591646 | Program output: 126.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6294923834  
Correct output: 17.1520909798  | Program output: 5.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.9130684251 
Correct output: 52.2037920383  | Program output: 54.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.2210267336
Correct output: -19.1443327626 | Program output: 8.1130684264  
Correct output: 180.0725301747 | Program output: 193.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.1581751417
Correct output: 38.5197606199  | Program output: 34.7752450322 
Correct output: -4.0857969085  | Program output: 7.728731469   
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_div} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_stackdepth float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_div in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_div float_dec float_rot float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_max float_dec float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin integer_swap float_mod float_div -69 float_min float_mult)
Errors: [32.444 10 11.0837 11 15.5487 10 10.1133 11 28.0 2 67.7714 11 11.2441 9 0.0 0 11.5801 10 2.2978 8 53.0 2 26.4056 10 27.2574 10 13.1647 10 0.0 0 5.0 1 18.0 2 45.7452 12 3.7445 11 11.8145 11 18.0 2 2.0579 10 47.0 3 20.8407 11 40.0 1]
Total: 700.1135999999999
Mean: 14.002272
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4588.290731499999
Median total errors in population: 1189.0784500000002
Error averages by case: (234.79316929999916 11.232 132.99097620000074 11.031 169.86127860000096 10.993 221.96362480000084 11.071 148.00732999999974 4.941 196.22464949999915 10.959 167.35210940000084 10.202 126.99860539999989 4.343 194.25577429999956 10.456 174.6387776 9.999 173.7429745000003 4.969 231.98772179999992 10.277 167.02239920000048 10.239 236.57509209999895 10.646 141.71798050000012 4.09 128.34144039999993 4.257 148.39283989999993 4.719 212.02701090000068 11.081 144.30887890000005 11.373 162.1914194999993 10.546 149.74063070000003 4.474 170.6540833000002 11.083 177.95525830000017 5.098 200.06299969999935 11.047 162.49470670000005 4.863)
Error minima by case: (0.9937 2 0.0837 8 0.9824 4 0.2921 1 0.9082 1 1.5296 2 0.2441 7 0.0 0 0.6082 1 0.241 7 12.1736 1 0.2158 2 0.1443 1 0.0115 2 0.0 0 0.0 0 0.4973 1 0.0887 1 0.2555 7 0.011 1 8.0 1 0.0216 2 6.3324 1 0.029 1 3.2681 1)
Average genome size in population (length): 170.577
Average program size in population (points): 171.577
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 162.769232660029
Average age in population: 160.6974999867512
Median age in population: 160.9104235969094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.546
Error (vector) diversity:			 0.552
Behavioral diversity:				 0.554
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 278063056
--- Timings ---
Current time: 1529615442797 milliseconds
Total Time:         468.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.3 seconds, 33.6%
Fitness Testing:    246.2 seconds, 52.5%
Report:              65.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 54068.381100000035
Test mean error for best: 27.03419
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2662181042
Correct output: 17.2828270025  | Program output: 6.1991350733  
Correct output: 23.1304489589  | Program output: 7.5817293581  
Correct output: 137.0785591646 | Program output: 126.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6294923834  
Correct output: 17.1520909798  | Program output: 5.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.9130684251 
Correct output: 52.2037920383  | Program output: 54.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.2210267336
Correct output: -19.1443327626 | Program output: 8.1130684264  
Correct output: 180.0725301747 | Program output: 193.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.1581751417
Correct output: 38.5197606199  | Program output: 34.7752450322 
Correct output: -4.0857969085  | Program output: 7.728731469   
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction float_max} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction tagged_831} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_div} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_sin} {:instruction tag_float_922} {:instruction float_mod} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 float_max float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max tagged_831 float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_div in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_dup_items integer_yank float_dec float_div float_dec float_dec float_div float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_div float_dec float_rot float_dec float_dec float_dup_items float_div float_dec float_add integer_pop float_dup_items integer_yank float_dec integer_yank float_dec float_dec float_dup_items float_max float_dec float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub float_dec integer_max float_stackdepth float_div float_dec float_div float_rot integer_yank float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_div float_div float_div float_dec float_shove float_rot integer_yank float_dec float_div float_dec float_div integer_dup_items integer_yank float_dec float_div float_dec float_div float_sub float_dup_items integer_yank float_dec float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_sin tag_float_922 float_mod float_div -69 float_min float_mult)
Errors: [32.444 10 11.0837 11 15.5487 10 10.1133 11 28.0 2 67.7714 11 11.2441 9 0.0 0 11.5801 10 2.2978 8 53.0 2 26.4056 10 27.2574 10 13.1647 10 0.0 0 5.0 1 18.0 2 45.7452 12 3.7445 11 11.8145 11 18.0 2 2.0579 10 47.0 3 20.8407 11 40.0 1]
Total: 700.1135999999999
Mean: 14.002272
Genome size: 183
Size: 184
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4286.9221426999975
Median total errors in population: 1258.82065
Error averages by case: (224.4311338999989 11.111 121.86160800000094 11.157 167.36289010000132 11.037 211.63315320000046 11.036 130.77507919999977 4.726 191.5163832999991 10.787 165.84701410000093 10.273 111.79112939999986 4.105 183.56706059999925 10.449 161.06930450000024 9.989 156.52830220000027 4.731 223.8500005 10.446 162.1049746000005 10.125 229.6946611999989 10.77 123.13286130000013 3.724 111.96257389999977 4.068 130.8372442000001 4.393 200.37952930000097 11.194 126.4118932 11.368 158.06820709999917 10.489 132.34310999999988 4.129 157.94829980000023 11.095 160.61510240000013 4.846 186.42509099999958 11.092 145.02753570000007 4.598)
Error minima by case: (1.1553 1 0.0837 8 0.1304 7 0.8867 1 0.0918 1 10.3705 1 0.2441 7 0.0 0 0.2871 1 0.241 7 5.1653 1 0.0654 1 0.0183 1 0.0115 2 0.0 0 0.0 0 1.0 1 1.0 1 0.2555 7 0.0858 1 7.0 1 0.0135 1 36.0 1 0.8407 1 4.3464 1)
Average genome size in population (length): 171.216
Average program size in population (points): 172.216
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 164.1765149761439
Average age in population: 161.0266558331986
Median age in population: 162.172438821207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.572
Error (vector) diversity:			 0.578
Behavioral diversity:				 0.58
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 282343581
--- Timings ---
Current time: 1529615448441 milliseconds
Total Time:         474.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.8 seconds, 33.5%
Fitness Testing:    249.5 seconds, 52.6%
Report:              65.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 54053.51099999997
Test mean error for best: 27.02676
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.1845909575
Correct output: 17.2828270025  | Program output: 6.5858528659  
Correct output: 23.1304489589  | Program output: 7.6010084916  
Correct output: 137.0785591646 | Program output: 126.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6448434747  
Correct output: 17.1520909798  | Program output: 5.9238913078  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.8314444559 
Correct output: 52.2037920383  | Program output: 54.6153053868 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.1393979871
Correct output: -19.1443327626 | Program output: 8.1334166526  
Correct output: 180.0725301747 | Program output: 193.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.0765484741
Correct output: 38.5197606199  | Program output: 35.4889206046 
Correct output: -4.0857969085  | Program output: 7.7483063814  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_mod float_dec integer_dup_items float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_dec float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [32.5256 11 10.697 10 15.5294 10 10.1949 11 28.0 2 67.7868 11 11.2282 10 0.0 0 11.6618 11 2.4115 10 53.0 2 26.3239 10 27.2777 9 13.0831 10 0.0 0 5.0 1 18.0 2 45.6636 12 3.0308 9 11.8341 11 18.0 2 2.1396 9 47.0 3 20.9223 11 40.0 1]
Total: 699.3102999999999
Mean: 13.986206
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3905.0357894999997
Median total errors in population: 1183.43775
Error averages by case: (210.00316099999898 10.855 111.36700900000055 11.108 144.35084390000026 10.95 195.1929242999999 10.827 119.58941649999987 4.426 165.38021799999922 10.67 141.93628810000038 10.176 99.57531079999991 3.776 172.0630237999997 10.14 138.13883490000018 9.892 144.62140190000014 4.44 207.69658429999978 10.343 137.99278540000043 10.027 211.492153799999 10.534 112.86966520000004 3.533 99.60824589999997 3.75 122.32285270000008 4.192 185.76227620000088 11.011 117.8471859 11.278 133.95201539999863 10.326 122.12518279999996 3.968 146.13560200000055 10.845 150.27754779999998 4.672 174.81852169999996 10.845 132.98973820000003 4.343)
Error minima by case: (0.0063 2 0.0837 7 1.5532 4 0.6911 1 0.9082 1 5.0 1 0.2441 3 0.0 0 0.115 1 0.241 7 24.0694 1 0.0654 2 0.2155 1 0.0115 2 0.0 0 0.0 0 1.0 1 0.0887 1 0.2555 7 0.0868 1 8.0 1 0.0482 1 8.8338 1 0.8205 1 11.8883 1)
Average genome size in population (length): 172.885
Average program size in population (points): 173.885
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 165.4262342051874
Average age in population: 162.8128360416213
Median age in population: 163.546827281875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.536
Error (vector) diversity:			 0.548
Behavioral diversity:				 0.551
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 286665931
--- Timings ---
Current time: 1529615453939 milliseconds
Total Time:         479.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.3 seconds, 33.4%
Fitness Testing:    252.8 seconds, 52.7%
Report:              66.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 54053.51099999997
Test mean error for best: 27.02676
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.1845909575
Correct output: 17.2828270025  | Program output: 6.5858528659  
Correct output: 23.1304489589  | Program output: 7.6010084916  
Correct output: 137.0785591646 | Program output: 126.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 5.6448434747  
Correct output: 17.1520909798  | Program output: 5.9238913078  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 63.8314444559 
Correct output: 52.2037920383  | Program output: 54.6153053868 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 181.1393979871
Correct output: -19.1443327626 | Program output: 8.1334166526  
Correct output: 180.0725301747 | Program output: 193.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 107.0765484741
Correct output: 38.5197606199  | Program output: 35.4889206046 
Correct output: -4.0857969085  | Program output: 7.7483063814  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 25.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 56.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max float_yankdup float_max integer_dup float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub integer_yank float_dec float_div float_dec float_dec float_sub integer_mult integer_mod float_dec integer_dup_items float_dec float_div float_dec float_div float_dup_items float_dec float_dec integer_yank float_dec integer_max float_stackdepth float_div float_dec float_dec float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [32.5256 11 10.697 10 15.5294 10 10.1949 11 28.0 2 67.7868 11 11.2282 10 0.0 0 11.6618 11 2.4115 10 53.0 2 26.3239 10 27.2777 9 13.0831 10 0.0 0 5.0 1 18.0 2 45.6636 12 3.0308 9 11.8341 11 18.0 2 2.1396 9 47.0 3 20.9223 11 40.0 1]
Total: 699.3102999999999
Mean: 13.986206
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4554.3398013000005
Median total errors in population: 1168.2788500000001
Error averages by case: (228.08231289999853 11.029 137.46047690000088 11.146 174.2284097000012 10.958 215.43573780000014 11.078 149.42598949999982 4.729 197.52968529999913 10.879 172.81233850000103 10.276 129.4012748999999 4.028 190.3328965999993 10.334 165.76860949999997 9.92 174.63212710000025 4.775 228.39619639999958 10.655 168.9237183000005 10.222 229.22817279999873 10.764 139.6700716000001 3.737 131.22475499999993 4.08 148.95626030000003 4.464 207.65582310000138 11.331 143.47503129999998 11.325 164.6273744999993 10.579 149.03137880000003 4.195 162.48924010000042 10.928 176.00192760000016 4.945 193.96912289999992 11.141 163.44986989999992 4.613)
Error minima by case: (1.3996 2 0.0837 3 0.3867 7 0.8867 1 0.0918 1 8.0 2 0.0442 6 0.0 0 0.2791 1 0.2978 2 6.1653 1 0.0596 1 0.4943 1 0.1489 2 0.0 0 0.0 0 1.0 1 1.3478 2 0.0308 3 0.0858 1 8.0 1 0.0579 1 9.3754 1 0.2842 1 5.3464 1)
Average genome size in population (length): 173.646
Average program size in population (points): 174.646
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 166.7787258690978
Average age in population: 164.3067156367995
Median age in population: 164.843412106379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.512
Error (vector) diversity:			 0.52
Behavioral diversity:				 0.521
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 291007131
--- Timings ---
Current time: 1529615459440 milliseconds
Total Time:         485.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.7 seconds, 33.3%
Fitness Testing:    256.2 seconds, 52.8%
Report:              67.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 53861.94470000003
Test mean error for best: 26.93097
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.2662181042
Correct output: 17.2828270025  | Program output: 7.1991350733  
Correct output: 23.1304489589  | Program output: 8.5817293581  
Correct output: 137.0785591646 | Program output: 127.9652780904
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: 6.6294923834  
Correct output: 17.1520909798  | Program output: 6.9079798795  
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.9130684251 
Correct output: 52.2037920383  | Program output: 55.5016200346 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 182.2210267336
Correct output: -19.1443327626 | Program output: 9.1130684264  
Correct output: 180.0725301747 | Program output: 194.2372118279
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 108.1581751417
Correct output: 38.5197606199  | Program output: 35.7752450322 
Correct output: -4.0857969085  | Program output: 8.728731469   
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 26.7303302732 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.3388306096 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 74 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [31.444 10 10.0837 10 14.5487 10 9.1133 10 26.0 2 68.7714 11 10.2441 9 2.0 2 10.5801 10 3.2978 8 51.0 2 27.4056 10 28.2574 9 14.1647 10 2.0 2 7.0 1 20.0 1 46.7452 12 2.7445 11 12.8145 11 16.0 2 1.0579 10 45.0 2 19.8407 10 38.0 2]
Total: 695.1135999999999
Mean: 13.902272
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4626.943562999998
Median total errors in population: 1184.3220499999998
Error averages by case: (231.77989639999848 10.998 139.34257120000024 11.159 177.43195740000147 10.966 218.76957559999988 11.008 151.08720649999978 4.675 199.8867261999993 10.905 174.63004000000137 10.339 131.2603588999999 3.998 195.42678789999914 10.283 171.0293421999998 10.069 177.0161885000004 4.73 230.09930909999935 10.692 171.87903440000065 10.231 233.3791944999984 10.75 142.00977780000005 3.669 133.92561109999988 4.038 151.33000080000002 4.402 208.28233300000116 11.263 148.58479460000012 11.239 167.64041749999978 10.518 151.8513239 4.136 166.7952911000005 10.865 178.81856220000006 4.873 197.3241908000005 11.077 165.8950714 4.585)
Error minima by case: (1.1573 2 0.212 8 1.4513 3 0.1133 1 0.0918 1 1.4704 2 0.7559 7 0.0 0 0.4199 1 0.2978 6 9.1774 1 0.0596 1 0.0483 1 0.0115 2 0.0 0 0.0 0 1.0 1 1.3478 2 0.0308 7 0.0403 2 10.0 1 0.0223 2 3.1774 1 0.2009 1 3.8226 1)
Average genome size in population (length): 173.128
Average program size in population (points): 174.128
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 168.1192296915835
Average age in population: 165.5974588275336
Median age in population: 166.1285857984002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.519
Error (vector) diversity:			 0.527
Behavioral diversity:				 0.529
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 295335556
--- Timings ---
Current time: 1529615465077 milliseconds
Total Time:         490.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.1 seconds, 33.2%
Fitness Testing:    259.5 seconds, 52.9%
Report:              68.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 53861.94470000003
Test mean error for best: 26.93097
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.2662181042
Correct output: 17.2828270025  | Program output: 7.1991350733  
Correct output: 23.1304489589  | Program output: 8.5817293581  
Correct output: 137.0785591646 | Program output: 127.9652780904
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: 6.6294923834  
Correct output: 17.1520909798  | Program output: 6.9079798795  
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.9130684251 
Correct output: 52.2037920383  | Program output: 55.5016200346 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 182.2210267336
Correct output: -19.1443327626 | Program output: 9.1130684264  
Correct output: 180.0725301747 | Program output: 194.2372118279
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 108.1581751417
Correct output: 38.5197606199  | Program output: 35.7752450322 
Correct output: -4.0857969085  | Program output: 8.728731469   
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 26.7303302732 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.3388306096 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 74 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [31.444 10 10.0837 10 14.5487 10 9.1133 10 26.0 2 68.7714 11 10.2441 9 2.0 2 10.5801 10 3.2978 8 51.0 2 27.4056 10 28.2574 9 14.1647 10 2.0 2 7.0 1 20.0 1 46.7452 12 2.7445 11 12.8145 11 16.0 2 1.0579 10 45.0 2 19.8407 10 38.0 2]
Total: 695.1135999999999
Mean: 13.902272
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4745.842417099999
Median total errors in population: 1190.4067499999996
Error averages by case: (239.77372019999848 11.014 135.69311310000037 11.111 177.057224000001 10.994 226.16421939999992 11.049 156.68862089999982 4.873 198.32747249999935 10.905 174.45555630000095 10.368 137.33429189999993 4.117 201.2540875999994 10.259 166.63733199999984 10.069 182.8574393000003 4.966 241.45781099999954 10.675 172.45698720000036 10.203 241.9437931999987 10.827 150.32125690000004 3.993 140.43817949999993 4.282 159.2444439 4.751 219.4674819000011 11.348 143.87629970000023 11.282 167.83583439999967 10.61 159.40822699999995 4.471 175.16788640000078 10.897 186.7119745000001 5.206 205.33986270000025 11.069 171.8633016 4.727)
Error minima by case: (1.7069 2 0.0638 7 1.4055 7 0.1949 1 0.0918 1 5.0 1 0.2441 3 0.0 0 0.4199 1 0.2978 7 1.6673 1 0.0596 1 0.2086 1 0.1489 2 0.0 0 0.0 0 1.0 1 0.4941 1 0.0308 8 0.0858 1 5.0 1 0.0135 2 34.0 1 1.4962 1 5.2702 1)
Average genome size in population (length): 170.211
Average program size in population (points): 171.211
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 169.3319057311717
Average age in population: 166.1989618608576
Median age in population: 167.3862120368689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.528
Error (vector) diversity:			 0.534
Behavioral diversity:				 0.536
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 299590931
--- Timings ---
Current time: 1529615470530 milliseconds
Total Time:         496.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.5 seconds, 33.1%
Fitness Testing:    262.8 seconds, 52.9%
Report:              68.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 53861.94470000003
Test mean error for best: 26.93097
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.2662181042
Correct output: 17.2828270025  | Program output: 7.1991350733  
Correct output: 23.1304489589  | Program output: 8.5817293581  
Correct output: 137.0785591646 | Program output: 127.9652780904
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: 6.6294923834  
Correct output: 17.1520909798  | Program output: 6.9079798795  
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.9130684251 
Correct output: 52.2037920383  | Program output: 55.5016200346 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 182.2210267336
Correct output: -19.1443327626 | Program output: 9.1130684264  
Correct output: 180.0725301747 | Program output: 194.2372118279
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 108.1581751417
Correct output: 38.5197606199  | Program output: 35.7752450322 
Correct output: -4.0857969085  | Program output: 8.728731469   
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 26.7303302732 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.3388306096 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_234} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_div} {:instruction float_add} {:instruction integer_dup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_234 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc float_yankdup float_max integer_dec float_rot in2 float_dup_items integer_div float_add integer_dup float_inc float_yankdup float_max float_yankdup float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [31.444 10 10.0837 10 14.5487 10 9.1133 10 26.0 2 68.7714 11 10.2441 9 2.0 2 10.5801 10 3.2978 8 51.0 2 27.4056 10 28.2574 9 14.1647 10 2.0 2 7.0 1 20.0 1 46.7452 12 2.7445 11 12.8145 11 16.0 2 1.0579 10 45.0 2 19.8407 10 38.0 2]
Total: 695.1135999999999
Mean: 13.902272
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4166.048365300001
Median total errors in population: 1181.6118999999999
Error averages by case: (221.1395766999985 10.831 114.20802420000055 11.04 145.88343909999986 10.892 206.85407319999982 10.89 137.23250329999982 4.665 172.20671449999952 10.794 145.1315793000002 10.318 117.09445139999991 3.88 180.20049689999956 10.173 141.91870030000032 9.988 161.65015300000033 4.68 219.40981859999906 10.58 142.64292400000065 10.06 221.74559979999893 10.672 127.4233305000001 3.492 117.90226889999992 3.984 136.64712090000015 4.298 198.66134860000116 11.23 121.77870429999965 11.17 137.33205479999847 10.5 136.6154860999999 4.049 153.9858085 10.812 164.84307309999997 4.833 183.70791940000026 10.963 150.60519590000007 4.434)
Error minima by case: (0.444 2 0.0837 2 0.4513 6 0.1261 1 0.0918 1 20.0 1 0.0422 6 0.0 0 0.7613 1 0.2636 2 13.9426 1 0.0596 2 0.0483 1 0.0093 2 0.0 0 0.0 0 1.0 1 0.4941 1 0.0308 3 0.0858 1 8.0 1 0.0135 2 37.0 1 0.9223 1 25.6536 1)
Average genome size in population (length): 169.527
Average program size in population (points): 170.527
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 170.8159056770558
Average age in population: 167.9828558922273
Median age in population: 168.6903619000344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.532
Error (vector) diversity:			 0.538
Behavioral diversity:				 0.539
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 303829081
--- Timings ---
Current time: 1529615476042 milliseconds
Total Time:         501.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.9 seconds, 33.1%
Fitness Testing:    266.1 seconds, 53.0%
Report:              69.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 53861.94470000003
Test mean error for best: 26.93097
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.2662181042
Correct output: 17.2828270025  | Program output: 7.1991350733  
Correct output: 23.1304489589  | Program output: 8.5817293581  
Correct output: 137.0785591646 | Program output: 127.9652780904
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: 6.6294923834  
Correct output: 17.1520909798  | Program output: 6.9079798795  
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.9130684251 
Correct output: 52.2037920383  | Program output: 55.5016200346 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 182.2210267336
Correct output: -19.1443327626 | Program output: 9.1130684264  
Correct output: 180.0725301747 | Program output: 194.2372118279
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 108.1581751417
Correct output: 38.5197606199  | Program output: 35.7752450322 
Correct output: -4.0857969085  | Program output: 8.728731469   
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 26.7303302732 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.3388306096 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_min} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction integer_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup float_max float_yankdup float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_min integer_dup float_rot in2 float_dup_items float_dup_items integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div integer_shove float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [31.444 10 10.0837 10 14.5487 10 9.1133 10 26.0 2 68.7714 11 10.2441 9 2.0 2 10.5801 10 3.2978 8 51.0 2 27.4056 10 28.2574 9 14.1647 10 2.0 2 7.0 1 20.0 1 46.7452 12 2.7445 11 12.8145 11 16.0 2 1.0579 10 45.0 2 19.8407 10 38.0 2]
Total: 695.1135999999999
Mean: 13.902272
Genome size: 166
Size: 167
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4174.2001236000015
Median total errors in population: 1204.1237
Error averages by case: (222.23928919999886 10.926 116.55143980000052 11.074 150.78786230000017 10.921 208.63228439999975 11.014 132.8857689999998 4.58 175.00850569999938 10.846 149.81562270000038 10.375 113.23062309999983 3.759 178.83972430000009 10.264 144.59138540000026 10.063 159.86320350000022 4.573 223.59724759999926 10.652 146.9959379000004 10.143 225.2127706999986 10.723 123.88777660000008 3.358 116.35619479999984 3.89 133.74665270000006 4.239 199.72981120000105 11.304 121.37420179999991 11.156 142.05173309999884 10.558 133.99475219999988 4.006 152.79115740000026 10.824 161.75535920000004 4.741 182.41657290000038 11.045 148.53524610000008 4.275)
Error minima by case: (0.2343 2 0.046 3 2.1437 6 0.1133 1 0.0918 1 8.3705 1 0.1521 7 0.0 0 0.4199 1 0.241 2 9.9426 1 0.1846 1 0.0085 1 0.0093 2 0.0 0 0.0 0 0.0 1 0.4563 1 0.0308 3 0.0896 1 7.0 1 0.0579 2 18.3324 1 0.029 1 28.6536 1)
Average genome size in population (length): 169.143
Average program size in population (points): 170.143
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 172.3197754154138
Average age in population: 169.7783482781882
Median age in population: 169.9829950232279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.545
Error (vector) diversity:			 0.55
Behavioral diversity:				 0.551
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 308057731
--- Timings ---
Current time: 1529615481465 milliseconds
Total Time:         507.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.3 seconds, 33.0%
Fitness Testing:    269.4 seconds, 53.1%
Report:              70.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 54407.11270000002
Test mean error for best: 27.20356
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.1581751417
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 74 float_inc float_shove float_max integer_dup float_rot in2 float_mod float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 48.7452 11 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 692.9977999999999
Mean: 13.859956
Genome size: 164
Size: 165
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3838.7687994999997
Median total errors in population: 1190.6118999999999
Error averages by case: (205.6659122999989 10.926 103.05904100000066 10.981 137.4085241999998 10.873 191.47234569999986 10.981 116.3284869999998 4.713 162.37758819999954 10.669 135.06079879999996 10.352 97.12917019999988 3.886 165.7689286999998 10.26 138.21952380000027 10.119 145.92700520000037 4.767 206.05115729999935 10.677 133.59119030000056 10.015 210.30609389999861 10.743 114.59049900000014 3.395 101.55572549999975 4.119 123.92933240000005 4.309 181.480283900001 11.229 116.93913449999977 11.054 128.24087999999867 10.386 123.04303809999986 4.062 136.3543420000001 10.771 151.7022118000001 4.795 168.43280560000042 11.035 134.54878010000016 4.469)
Error minima by case: (1.3163 2 0.0837 3 0.4468 6 0.8867 1 0.0918 1 8.5125 1 0.0442 6 0.0 0 0.2791 1 0.2978 1 17.5515 1 0.0596 1 0.1286 1 0.0093 2 0.0 0 0.0 0 1.4973 1 0.4941 1 0.0308 3 0.0669 1 8.0 1 0.0135 1 11.5515 1 0.2009 1 4.5515 1)
Average genome size in population (length): 168.237
Average program size in population (points): 169.237
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 173.3411519018683
Average age in population: 171.097539987321
Median age in population: 171.3205427553668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.568
Error (vector) diversity:			 0.572
Behavioral diversity:				 0.574
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 312263806
--- Timings ---
Current time: 1529615486965 milliseconds
Total Time:         512.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.8 seconds, 32.9%
Fitness Testing:    272.7 seconds, 53.2%
Report:              71.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 54407.11270000002
Test mean error for best: 27.20356
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.1581751417
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_pop})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 74 float_inc float_shove float_max integer_dup float_rot in2 float_mod float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_pop)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 48.7452 11 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 692.9977999999999
Mean: 13.859956
Genome size: 164
Size: 165
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3430.1628176999993
Median total errors in population: 1002.5290500000001
Error averages by case: (188.80963559999873 10.911 91.35711210000049 10.93 120.82646799999964 10.828 175.3760929999997 10.93 103.7199853999998 4.379 146.1882017999998 10.702 119.6044152999997 10.359 84.34888929999987 3.54 148.75038330000027 10.301 115.63078540000038 10.133 129.75419670000025 4.456 190.04601749999944 10.609 116.18729660000062 9.998 192.90671339999872 10.726 94.71813600000002 3.149 85.04911379999989 3.688 105.47861200000008 4.075 171.813023700001 11.283 97.99731719999984 10.951 110.9217247999987 10.473 103.76734089999992 3.886 126.1043263999998 10.785 133.6424227 4.615 152.2227026000003 11.066 118.06490420000013 4.104)
Error minima by case: (2.3163 2 0.601 2 0.5811 6 0.0379 1 0.0918 1 5.4681 1 0.0655 6 0.0 0 0.4199 1 0.2978 7 2.2042 1 0.0596 1 0.1443 1 0.1466 2 0.0 0 0.0 0 1.4973 1 0.6925 1 0.0308 3 0.0044 1 7.0 1 0.0579 7 3.7958 1 1.2009 1 0.7319 1)
Average genome size in population (length): 167.706
Average program size in population (points): 168.706
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 174.7084014305733
Average age in population: 172.1644070971638
Median age in population: 172.5442684106462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.545
Error (vector) diversity:			 0.552
Behavioral diversity:				 0.553
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 316456472
--- Timings ---
Current time: 1529615492387 milliseconds
Total Time:         518.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.2 seconds, 32.8%
Fitness Testing:    275.9 seconds, 53.2%
Report:              72.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 54407.11270000002
Test mean error for best: 27.20356
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.1581751417
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_mod} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_inc} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_237 integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 float_dup_items float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 74 float_inc float_shove float_max integer_dup float_rot in2 float_mod float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_sub float_dec float_dec tagged_14 float_dec float_dec integer_dup_times integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_inc float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 48.7452 11 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 692.9977999999999
Mean: 13.859956
Genome size: 168
Size: 169
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3925.046315200001
Median total errors in population: 1094.5931999999998
Error averages by case: (211.35147449999917 11.009 107.70319470000031 11.005 152.1379711999999 11.03 197.57926430000003 10.932 114.14652079999982 4.48 174.45828179999987 10.765 149.52912800000018 10.604 94.2575098999999 3.616 176.30568070000015 10.36 146.4002345000001 10.326 140.65519120000025 4.56 210.85241599999927 10.616 146.3419679000007 9.977 213.99728679999885 10.726 105.11502290000006 3.206 96.8337800999999 3.839 115.45658700000007 4.09 194.79237790000062 11.21 114.9222855999997 10.904 142.13294179999886 10.533 114.65184999999988 3.897 144.92874119999976 10.76 143.25416000000004 4.617 179.8423827000004 11.057 129.05406370000009 4.227)
Error minima by case: (1.444 2 0.1305 3 0.5487 4 0.5005 1 0.1715 1 0.3272 1 0.2282 7 0.0 0 0.0346 1 0.2978 4 37.6694 1 0.1221 2 0.1174 1 0.14 2 0.0 0 0.0 0 0.0 0 0.4941 1 0.0308 3 6.0E-4 1 7.0 1 0.0135 3 17.6676 1 1.423 2 11.1757 1)
Average genome size in population (length): 166.971
Average program size in population (points): 167.971
Average percent parens in population: 0.006
Minimum age in population: 171.5164840747706
Maximum age in population: 176.0074333285448
Average age in population: 173.8415231282566
Median age in population: 173.8787791809682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.573
Error (vector) diversity:			 0.581
Behavioral diversity:				 0.582
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 320630879
--- Timings ---
Current time: 1529615497756 milliseconds
Total Time:         523.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.6 seconds, 32.8%
Fitness Testing:    279.1 seconds, 53.3%
Report:              72.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 60573.04599999997
Test mean error for best: 30.28652
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.1845909575
Correct output: 17.2828270025  | Program output: 7.5858528659  
Correct output: 23.1304489589  | Program output: -4.1077417885 
Correct output: 137.0785591646 | Program output: 127.8836506771
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: -19.9339750517
Correct output: 17.1520909798  | Program output: -23.2498318623
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.8314444559 
Correct output: 52.2037920383  | Program output: 47.0690587857 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 182.1393979871
Correct output: -19.1443327626 | Program output: -19.350255696 
Correct output: 180.0725301747 | Program output: 194.1555828729
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 108.0765484741
Correct output: 38.5197606199  | Program output: 36.4889206046 
Correct output: -4.0857969085  | Program output: -11.1310113054
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 26.6487120465 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.2572073849 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [31.5256 11 9.697 9 27.2382 9 9.1949 10 26.0 2 42.208 10 40.4019 13 2.0 2 10.6618 11 5.1347 11 51.0 2 27.3239 10 0.2059 8 14.0831 10 2.0 2 7.0 1 20.0 1 46.6636 12 2.0308 9 7.0452 11 16.0 2 1.1396 9 45.0 2 19.9223 10 38.0 2]
Total: 680.4765
Mean: 13.60953
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3823.582489999999
Median total errors in population: 1183.6118999999999
Error averages by case: (208.45036569999866 11.059 104.03312170000036 10.963 134.3401487999998 10.934 192.80040140000025 10.987 118.71441869999983 4.53 158.80569659999986 10.698 133.4387380999998 10.587 99.14452659999986 3.695 167.63582579999985 10.405 135.3101139000005 10.372 144.68842310000028 4.529 208.9487918999992 10.693 129.2704415000007 9.93 209.08038769999882 10.702 110.00453680000011 3.31 101.25310869999984 3.839 119.99746940000007 4.152 189.87188930000076 11.295 113.98084739999949 10.868 124.4313691999986 10.519 118.96680169999996 4.006 140.4346616999995 10.726 147.6256803 4.695 170.39467360000074 11.108 133.13705040000016 4.221)
Error minima by case: (2.3441 2 0.0837 3 0.5294 6 0.1949 1 0.0918 1 4.0 1 0.2441 8 0.0 0 0.0999 1 0.241 7 40.8347 1 0.0596 2 0.0109 1 0.7845 2 0.0 0 0.0 0 0.5027 1 2.2179 2 0.0308 2 0.0858 1 8.0 1 0.0135 1 22.3344 1 0.1795 1 28.6536 1)
Average genome size in population (length): 166.806
Average program size in population (points): 167.806
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 177.481781692934
Average age in population: 174.9070017563438
Median age in population: 175.1211137343311
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.595
Error (vector) diversity:			 0.605
Behavioral diversity:				 0.606
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 324801104
--- Timings ---
Current time: 1529615503355 milliseconds
Total Time:         529.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.0 seconds, 32.7%
Fitness Testing:    282.5 seconds, 53.4%
Report:              73.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 60966.64319999996
Test mean error for best: 30.48332
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.1845909575
Correct output: 17.2828270025  | Program output: 9.5858528659  
Correct output: 23.1304489589  | Program output: -2.1077417885 
Correct output: 137.0785591646 | Program output: 129.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -17.9339750517
Correct output: 17.1520909798  | Program output: -21.2498318623
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.8314444559 
Correct output: 52.2037920383  | Program output: 49.0690587857 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.1393979871
Correct output: -19.1443327626 | Program output: -17.350255696 
Correct output: 180.0725301747 | Program output: 196.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.0765484741
Correct output: 38.5197606199  | Program output: 38.4889206046 
Correct output: -4.0857969085  | Program output: -9.1310113054 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_div float_dec float_dec float_div float_dup_times float_div float_dec integer_yank float_dec float_div float_dec float_div float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [29.5256 11 7.697 10 25.2382 9 7.1949 11 28.0 2 44.208 10 38.4019 12 0.0 0 8.6618 11 3.1347 11 53.0 2 29.3239 9 1.7941 9 16.0831 10 0.0 0 5.0 1 18.0 2 48.6636 11 0.0308 8 5.0452 10 18.0 2 0.8604 9 47.0 3 17.9223 11 40.0 1]
Total: 667.7855000000001
Mean: 13.35571
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4261.2505923
Median total errors in population: 1215.9655999999998
Error averages by case: (230.00408649999827 11.058 107.23810910000032 10.857 162.59467670000024 10.874 216.1423540000004 11.002 129.97077239999976 4.614 188.0717309999997 10.817 160.88448890000063 10.591 110.38944439999992 3.812 185.41366119999986 10.457 143.14550660000037 10.41 156.53155290000032 4.676 231.1168316999995 10.667 158.25266860000087 9.959 234.03516829999873 10.743 124.47564990000012 3.512 113.60604549999978 3.939 134.27285270000007 4.324 214.6860481000006 11.296 114.11190549999947 10.765 153.5440220999988 10.619 132.56951629999983 4.161 155.49533419999975 10.634 160.88575979999996 4.841 188.39478960000108 11.077 145.34061630000016 4.372)
Error minima by case: (1.4522 2 0.0837 3 0.4804 4 0.8867 1 0.0918 1 0.6153 1 0.0655 7 0.0 0 0.0999 1 0.2978 2 14.8347 1 0.0596 2 0.08 1 0.0097 3 0.0 0 0.0 0 1.0 1 0.9814 1 0.0308 3 0.0858 1 5.0 1 0.0135 6 29.3324 1 2.353 1 5.6536 1)
Average genome size in population (length): 167.909
Average program size in population (points): 168.909
Average percent parens in population: 0.006
Minimum age in population: 174.1312201173069
Maximum age in population: 178.4544570515574
Average age in population: 176.365285565511
Median age in population: 176.4182610747938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.586
Error (vector) diversity:			 0.598
Behavioral diversity:				 0.599
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 328999029
--- Timings ---
Current time: 1529615508840 milliseconds
Total Time:         534.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.4 seconds, 32.6%
Fitness Testing:    285.8 seconds, 53.4%
Report:              74.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 60966.64319999996
Test mean error for best: 30.48332
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.1845909575
Correct output: 17.2828270025  | Program output: 9.5858528659  
Correct output: 23.1304489589  | Program output: -2.1077417885 
Correct output: 137.0785591646 | Program output: 129.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -17.9339750517
Correct output: 17.1520909798  | Program output: -21.2498318623
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.8314444559 
Correct output: 52.2037920383  | Program output: 49.0690587857 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.1393979871
Correct output: -19.1443327626 | Program output: -17.350255696 
Correct output: 180.0725301747 | Program output: 196.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.0765484741
Correct output: 38.5197606199  | Program output: 38.4889206046 
Correct output: -4.0857969085  | Program output: -9.1310113054 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_div float_dec float_dec float_div float_dup_times float_div float_dec integer_yank float_dec float_div float_dec float_div float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [29.5256 11 7.697 10 25.2382 9 7.1949 11 28.0 2 44.208 10 38.4019 12 0.0 0 8.6618 11 3.1347 11 53.0 2 29.3239 9 1.7941 9 16.0831 10 0.0 0 5.0 1 18.0 2 48.6636 11 0.0308 8 5.0452 10 18.0 2 0.8604 9 47.0 3 17.9223 11 40.0 1]
Total: 667.7855000000001
Mean: 13.35571
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4146.693337700001
Median total errors in population: 1195.0316
Error averages by case: (220.88938599999884 11.048 111.9618841000003 10.856 149.79165290000003 10.88 207.94206229999998 11.05 129.08221549999988 4.646 176.2476886999996 10.758 147.88562960000047 10.543 109.69901319999997 3.954 181.4398883999998 10.392 148.04442850000035 10.386 154.6852692000003 4.666 219.40476449999923 10.719 146.65303990000052 9.947 225.0108240999992 10.805 122.9835178000001 3.569 112.45899019999987 3.96 133.12878290000006 4.205 204.43399350000075 11.238 119.57128729999963 10.858 142.7893420999992 10.572 131.4083389999999 4.094 154.0081251999996 10.732 159.39754579999996 4.722 184.3662168000006 11.018 143.35945020000008 4.432)
Error minima by case: (0.5032 2 0.2852 7 0.2605 6 0.6817 1 0.0918 1 7.0 1 0.2282 7 0.0 0 0.2022 1 0.2978 7 22.3389 1 0.2158 1 0.0483 1 0.1251 2 0.0 0 0.0 0 1.0 1 0.6522 1 0.0308 7 0.0452 1 5.0 1 0.0135 6 26.3324 1 0.8946 1 12.6145 1)
Average genome size in population (length): 168.664
Average program size in population (points): 169.664
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 179.8842601330346
Average age in population: 177.3740473054638
Median age in population: 177.7673844191608
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.603
Error (vector) diversity:			 0.617
Behavioral diversity:				 0.618
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 333215920
--- Timings ---
Current time: 1529615514270 milliseconds
Total Time:         540.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.7 seconds, 32.5%
Fitness Testing:    289.0 seconds, 53.5%
Report:              75.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 60966.64319999996
Test mean error for best: 30.48332
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.1845909575
Correct output: 17.2828270025  | Program output: 9.5858528659  
Correct output: 23.1304489589  | Program output: -2.1077417885 
Correct output: 137.0785591646 | Program output: 129.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -17.9339750517
Correct output: 17.1520909798  | Program output: -21.2498318623
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.8314444559 
Correct output: 52.2037920383  | Program output: 49.0690587857 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.1393979871
Correct output: -19.1443327626 | Program output: -17.350255696 
Correct output: 180.0725301747 | Program output: 196.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.0765484741
Correct output: 38.5197606199  | Program output: 38.4889206046 
Correct output: -4.0857969085  | Program output: -9.1310113054 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_times} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_div float_dec float_dec float_div float_dup_times float_div float_dec integer_yank float_dec float_div float_dec float_div float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [29.5256 11 7.697 10 25.2382 9 7.1949 11 28.0 2 44.208 10 38.4019 12 0.0 0 8.6618 11 3.1347 11 53.0 2 29.3239 9 1.7941 9 16.0831 10 0.0 0 5.0 1 18.0 2 48.6636 11 0.0308 8 5.0452 10 18.0 2 0.8604 9 47.0 3 17.9223 11 40.0 1]
Total: 667.7855000000001
Mean: 13.35571
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3913.8847076000006
Median total errors in population: 1173.6118999999999
Error averages by case: (216.07865589999864 10.878 102.22662380000048 10.901 139.35382800000014 10.903 201.63964110000003 10.929 119.96277139999982 4.503 164.82721079999953 10.787 137.50963200000004 10.409 100.30541009999989 3.83 174.4583853999999 10.245 133.28859050000045 10.22 145.05708000000027 4.524 217.00313459999953 10.584 134.79733710000062 9.961 219.5308545999988 10.67 110.72078870000013 3.483 102.01677039999986 3.811 120.82226670000013 4.119 201.59462560000097 11.103 108.79971289999972 10.934 130.04000149999862 10.45 118.98688029999995 4.01 149.1276773999997 10.623 147.6229504000001 4.643 177.01078890000065 10.954 133.3070895000002 4.322)
Error minima by case: (1.2297 2 0.0837 7 0.594 7 0.1133 1 0.0918 1 1.5805 2 0.2441 7 0.0 0 0.2022 1 0.0224 7 38.8347 1 0.0596 1 0.1443 1 0.1251 2 0.0 0 0.0 0 1.0 1 0.4941 1 0.0308 7 0.0621 1 6.0 1 0.0135 2 14.3324 1 1.8407 1 26.6536 1)
Average genome size in population (length): 169.355
Average program size in population (points): 170.355
Average percent parens in population: 0.006
Minimum age in population: 176.1312201173069
Maximum age in population: 181.0325763070393
Average age in population: 178.9638826227425
Median age in population: 179.0004812963351
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.619
Error (vector) diversity:			 0.632
Behavioral diversity:				 0.633
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 337450186
--- Timings ---
Current time: 1529615519819 milliseconds
Total Time:         545.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.2 seconds, 32.5%
Fitness Testing:    292.4 seconds, 53.6%
Report:              76.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 60966.64319999996
Test mean error for best: 30.48332
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.1845909575
Correct output: 17.2828270025  | Program output: 9.5858528659  
Correct output: 23.1304489589  | Program output: -2.1077417885 
Correct output: 137.0785591646 | Program output: 129.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -17.9339750517
Correct output: 17.1520909798  | Program output: -21.2498318623
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.8314444559 
Correct output: 52.2037920383  | Program output: 49.0690587857 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.1393979871
Correct output: -19.1443327626 | Program output: -17.350255696 
Correct output: 180.0725301747 | Program output: 196.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.0765484741
Correct output: 38.5197606199  | Program output: 38.4889206046 
Correct output: -4.0857969085  | Program output: -9.1310113054 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec integer_yank float_div integer_dup_items float_dup_items integer_yank float_dec integer_mod float_sub float_div print_float float_sin integer_swap float_div float_rot)
Errors: [29.5256 11 7.697 10 25.2382 9 7.1949 11 28.0 2 44.208 10 38.4019 12 0.0 0 8.6618 11 3.1347 11 53.0 2 29.3239 9 1.7941 9 16.0831 10 0.0 0 5.0 1 18.0 2 48.6636 11 0.0308 8 5.0452 10 18.0 2 0.8604 9 47.0 3 17.9223 11 40.0 1]
Total: 667.7855000000001
Mean: 13.35571
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3646.546201599999
Median total errors in population: 1155.6118999999999
Error averages by case: (200.32448289999925 11.043 98.5536752000006 10.923 128.14129439999982 10.901 186.15124699999984 11.047 110.71693619999976 4.525 153.35365589999984 10.738 127.30979299999964 10.48 91.48605299999987 3.825 162.78465420000035 10.354 134.11499460000041 10.249 135.65211040000028 4.513 199.42332739999947 10.722 123.16977490000068 10.011 202.2346035999988 10.741 100.24378320000005 3.364 92.81197719999984 3.836 110.81119380000004 4.05 176.6483387000006 11.144 108.27960789999985 11.014 119.12695649999856 10.435 109.39608169999991 3.916 138.01669000000012 10.707 137.7333182 4.582 167.57278550000046 11.024 124.03886620000009 4.306)
Error minima by case: (0.6004 2 0.0837 3 2.1255 6 0.1949 1 0.0918 1 2.6992 2 0.2441 7 0.0 0 0.2022 1 0.2978 1 6.1653 1 0.0596 2 0.0438 1 0.1251 2 0.0 0 0.0 0 0.0 0 0.4941 1 0.0308 3 0.0452 1 5.0 1 0.0135 2 9.3324 1 0.2009 2 4.0278 1)
Average genome size in population (length): 169.683
Average program size in population (points): 170.683
Average percent parens in population: 0.006
Minimum age in population: 178.2094072672999
Maximum age in population: 182.3472280032143
Average age in population: 180.2778850835299
Median age in population: 180.3137374832059
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.621
Error (vector) diversity:			 0.639
Behavioral diversity:				 0.64
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 341692702
--- Timings ---
Current time: 1529615525320 milliseconds
Total Time:         551.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.6 seconds, 32.4%
Fitness Testing:    295.6 seconds, 53.6%
Report:              76.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 60966.64319999996
Test mean error for best: 30.48332
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.1845909575
Correct output: 17.2828270025  | Program output: 9.5858528659  
Correct output: 23.1304489589  | Program output: -2.1077417885 
Correct output: 137.0785591646 | Program output: 129.8836506771
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -17.9339750517
Correct output: 17.1520909798  | Program output: -21.2498318623
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.8314444559 
Correct output: 52.2037920383  | Program output: 49.0690587857 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.1393979871
Correct output: -19.1443327626 | Program output: -17.350255696 
Correct output: 180.0725301747 | Program output: 196.1555828729
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 110.0765484741
Correct output: 38.5197606199  | Program output: 38.4889206046 
Correct output: -4.0857969085  | Program output: -9.1310113054 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.6487120465 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.2572073849 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_14} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction print_integer} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec float_dec tagged_14 float_dec float_dec float_sub integer_div integer_mult integer_yank float_dec integer_max float_dec float_div float_dec float_shove float_rot integer_yank float_dec print_integer float_dec integer_max float_dec float_dec float_div float_dec integer_yank float_div integer_dup_items float_dup_items integer_yank float_dec integer_mod float_sub float_div print_float float_sin integer_swap float_div float_rot)
Errors: [29.5256 11 7.697 10 25.2382 9 7.1949 11 28.0 2 44.208 10 38.4019 12 0.0 0 8.6618 11 3.1347 11 53.0 2 29.3239 9 1.7941 9 16.0831 10 0.0 0 5.0 1 18.0 2 48.6636 11 0.0308 8 5.0452 10 18.0 2 0.8604 9 47.0 3 17.9223 11 40.0 1]
Total: 667.7855000000001
Mean: 13.35571
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3746.0308883000007
Median total errors in population: 1146.1759500000003
Error averages by case: (202.2129132999991 10.839 103.92509070000047 10.925 133.5884023999999 10.86 188.24978929999997 11.01 118.71364089999989 4.521 154.5553617999997 10.716 130.7770028999996 10.541 99.3889034999999 3.83 162.91274380000007 10.223 129.6918120000004 10.231 143.21001030000016 4.543 202.5925917999994 10.58 125.83815930000044 9.925 204.39210089999915 10.682 107.58482290000006 3.371 100.08655929999989 3.862 118.00681900000004 4.149 182.25955070000072 10.975 111.47261019999979 11.015 122.59228329999863 10.417 116.57550379999995 3.971 135.18618229999996 10.684 144.93059740000004 4.611 168.05693010000044 10.933 131.53950640000008 4.277)
Error minima by case: (0.3163 2 0.0836 7 1.6907 6 0.1847 1 0.0918 1 1.0873 2 0.2441 7 0.0 0 0.2022 1 0.1347 7 6.1653 1 0.1221 1 0.0246 1 0.1251 2 0.0 0 0.0 0 0.0 0 1.2278 1 0.0308 7 0.0452 1 4.4305 1 0.0135 3 18.3324 1 0.0777 1 5.3464 1)
Average genome size in population (length): 169.3
Average program size in population (points): 170.3
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 183.4064182314042
Average age in population: 181.2049003403217
Median age in population: 181.5873302799343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.626
Error (vector) diversity:			 0.642
Behavioral diversity:				 0.643
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 345925602
--- Timings ---
Current time: 1529615530842 milliseconds
Total Time:         556.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.0 seconds, 32.3%
Fitness Testing:    298.9 seconds, 53.7%
Report:              77.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 53908.85800000004
Test mean error for best: 26.95443
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.1148018566 
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dup})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_mod in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_div float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_stackdepth float_div float_dec float_dec float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_dup)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 20.2981 9 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 662.5507
Mean: 13.251014
Genome size: 167
Size: 168
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4467.934714099999
Median total errors in population: 1197.69235
Error averages by case: (232.24066049999894 11.044 126.78841380000048 11.029 157.7745582000003 10.815 220.07230430000004 11.054 148.07991359999986 4.756 180.8382927999996 10.849 161.45839760000038 10.937 129.19454799999988 3.929 194.66173189999986 10.444 160.2726488999999 10.525 171.3068663000003 4.69 234.05729349999916 10.712 150.93316390000035 10.212 236.74354959999886 10.805 136.73029930000007 3.684 129.17136209999987 3.977 146.57678440000007 4.521 209.97382450000063 11.113 133.80670809999992 11.02 148.99831329999938 10.574 146.03124749999998 4.263 169.0549704999996 10.754 173.02673070000017 4.999 197.90706630000062 11.01 160.07906450000002 4.44)
Error minima by case: (2.233 2 0.303 7 0.9058 4 0.0157 1 0.3203 1 2.041 2 0.0971 7 0.0 0 0.291 1 0.1347 7 2.8347 1 0.3096 2 0.1047 1 0.0115 2 0.0 0 0.0 0 0.0 0 0.3478 1 0.0308 7 0.0187 1 7.0 1 0.0579 1 9.6351 1 0.0777 1 4.5294 1)
Average genome size in population (length): 169.424
Average program size in population (points): 170.424
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 184.9846549365467
Average age in population: 182.7606625518246
Median age in population: 182.9767905929935
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.649
Error (vector) diversity:			 0.667
Behavioral diversity:				 0.668
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 350161402
--- Timings ---
Current time: 1529615536323 milliseconds
Total Time:         562.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.4 seconds, 32.3%
Fitness Testing:    302.2 seconds, 53.8%
Report:              78.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 53908.85800000004
Test mean error for best: 26.95443
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.1148018566 
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dup})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_mod in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_div float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_stackdepth float_div float_dec float_dec float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_dup)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 20.2981 9 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 662.5507
Mean: 13.251014
Genome size: 167
Size: 168
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4246.472983000001
Median total errors in population: 1204.74855
Error averages by case: (223.90823319999896 11.034 123.02587390000033 10.928 150.3284879000002 10.823 211.09673400000042 11.028 138.89569069999976 4.581 164.7940288000002 10.574 151.93791279999996 11.319 119.18931749999992 3.86 188.53785710000014 10.465 151.0200104000001 10.769 162.9280764000003 4.612 223.76640939999936 10.702 135.9853690000002 10.064 228.26090969999908 10.702 128.57832000000008 3.683 120.33204449999978 3.866 138.0695566 4.453 201.43139640000047 11.077 131.00121159999978 10.945 137.7796709999989 10.338 137.59879399999994 4.144 159.7981081999998 10.711 165.44609659999992 4.945 190.08801700000052 10.973 151.69685630000018 4.382)
Error minima by case: (0.5256 2 0.0202 3 2.3366 6 0.1949 1 0.0918 1 3.3946 1 2.119 8 0.0 0 0.2791 1 0.0212 1 1.8809 1 0.2158 1 0.0753 1 0.0778 2 0.0 0 0.0 0 2.0 1 0.0856 1 0.0308 3 0.0452 1 8.0 1 0.0135 2 4.1191 1 0.2842 1 3.1833 1)
Average genome size in population (length): 170.296
Average program size in population (points): 171.296
Average percent parens in population: 0.006
Minimum age in population: 182.2593087176102
Maximum age in population: 186.2859302251821
Average age in population: 184.2598342986239
Median age in population: 184.2672368085011
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.667
Error (vector) diversity:			 0.682
Behavioral diversity:				 0.683
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 354419102
--- Timings ---
Current time: 1529615542031 milliseconds
Total Time:         567.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.8 seconds, 32.2%
Fitness Testing:    305.6 seconds, 53.8%
Report:              79.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 53908.85800000004
Test mean error for best: 26.95443
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.1148018566 
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dup})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_mod in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_div float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_stackdepth float_div float_dec float_dec float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec integer_stackdepth float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_dup)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 20.2981 9 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 662.5507
Mean: 13.251014
Genome size: 167
Size: 168
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3767.5174516999987
Median total errors in population: 1146.1598
Error averages by case: (210.73606389999915 10.89 106.1116989000002 10.719 130.28457190000066 10.685 196.11161210000043 10.876 115.56843379999977 4.303 142.63224720000025 10.316 136.5879182999996 11.449 95.1926150999999 3.588 171.22929560000028 10.341 139.48438419999994 10.809 139.88038070000022 4.327 206.06395929999906 10.577 113.29739849999994 9.969 211.57324309999927 10.586 105.67612220000002 3.377 95.52024569999986 3.595 115.30188560000002 4.144 190.44666950000007 10.894 113.13854359999984 10.752 115.20176709999903 10.064 115.6885626999999 3.791 148.44535399999995 10.593 144.1364909 4.649 174.82300130000084 10.786 128.17998650000015 4.125)
Error minima by case: (0.2485 2 0.0202 2 0.6765 4 0.1949 1 0.0918 1 3.8286 2 0.2441 8 0.0 0 0.0256 1 0.0212 7 6.1653 1 0.2158 2 0.0438 1 0.0778 2 0.0 0 0.0 0 1.0 1 0.5561 1 0.0308 3 0.0142 1 4.3383 1 0.0579 2 24.3208 1 0.1795 1 5.3464 1)
Average genome size in population (length): 169.841
Average program size in population (points): 170.841
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 187.432106802226
Average age in population: 185.2052295487508
Median age in population: 185.6148663942399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.665
Error (vector) diversity:			 0.675
Behavioral diversity:				 0.676
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 358665268
--- Timings ---
Current time: 1529615547541 milliseconds
Total Time:         573.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.3 seconds, 32.1%
Fitness Testing:    308.8 seconds, 53.9%
Report:              80.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 53908.85800000004
Test mean error for best: 26.95443
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2662181042
Correct output: 17.2828270025  | Program output: 9.1991350733  
Correct output: 23.1304489589  | Program output: 10.5817293581 
Correct output: 137.0785591646 | Program output: 129.9652780904
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: 8.6294923834  
Correct output: 17.1520909798  | Program output: 8.9079798795  
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 66.9130684251 
Correct output: 52.2037920383  | Program output: 57.5016200346 
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 184.2210267336
Correct output: -19.1443327626 | Program output: 11.1130684264 
Correct output: 180.0725301747 | Program output: 196.2372118279
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.1148018566 
Correct output: 38.5197606199  | Program output: 37.7752450322 
Correct output: -4.0857969085  | Program output: 10.728731469  
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 28.7303302732 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 59.3388306096 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dup})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_mod in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_div float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_stackdepth float_div float_dec float_dec float_dec float_dec float_div float_dec float_div float_dec integer_yank float_dec float_div float_dec float_rot integer_yank float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_dup)
Errors: [29.444 10 8.0837 11 12.5487 10 7.1133 11 28.0 2 70.7714 11 8.2441 9 0.0 0 8.5801 10 5.2978 8 53.0 2 29.4056 9 30.2574 9 16.1647 10 0.0 0 5.0 1 18.0 2 20.2981 9 0.7445 11 14.8145 11 18.0 2 0.9421 10 47.0 3 17.8407 11 40.0 1]
Total: 662.5507
Mean: 13.251014
Genome size: 167
Size: 168
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3810.457142199998
Median total errors in population: 1139.5415500000004
Error averages by case: (205.75326329999885 10.874 110.09016210000013 10.713 125.62929760000091 10.749 191.83493610000056 10.903 126.82456239999986 4.469 135.2382317000002 10.353 133.76024979999974 11.617 107.04602499999983 3.849 167.3206559000003 10.369 134.8683260000003 11.008 152.70690850000022 4.614 207.7179099999993 10.607 105.07503929999973 10.178 210.29785669999907 10.557 114.68672070000004 3.617 107.71853409999987 3.853 124.11863430000004 4.417 190.0948034000002 10.901 116.58673879999988 10.838 107.10633239999922 10.111 124.88673149999993 3.928 139.01848660000022 10.624 153.19680820000005 4.906 169.43400240000094 10.768 140.20092540000005 4.422)
Error minima by case: (2.233 2 0.212 2 0.2382 7 0.1949 1 0.0918 1 5.3551 2 2.2123 8 0.0 0 0.2022 1 0.0212 7 6.8102 1 0.1924 2 0.0241 2 0.0067 2 0.0 0 0.0 0 0.7805 1 0.4067 1 0.0308 2 0.0142 1 8.0 1 0.0223 2 0.8102 1 0.8205 1 6.1898 1)
Average genome size in population (length): 170.236
Average program size in population (points): 171.236
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 189.013915683658
Average age in population: 186.7000863109096
Median age in population: 186.9124994561561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.659
Error (vector) diversity:			 0.669
Behavioral diversity:				 0.67
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 362921434
--- Timings ---
Current time: 1529615553057 milliseconds
Total Time:         578.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       185.7 seconds, 32.1%
Fitness Testing:    312.1 seconds, 53.9%
Report:              80.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 53734.85800000005
Test mean error for best: 26.86743
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 123.2662181042
Correct output: 17.2828270025  | Program output: 10.1991350733 
Correct output: 23.1304489589  | Program output: 11.5817293581 
Correct output: 137.0785591646 | Program output: 130.9652780904
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: 9.6294923834  
Correct output: 17.1520909798  | Program output: 9.9079798795  
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 67.9130684251 
Correct output: 52.2037920383  | Program output: 58.5016200346 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 185.2210267336
Correct output: -19.1443327626 | Program output: 12.1130684264 
Correct output: 180.0725301747 | Program output: 197.2372118279
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 42.1148018566 
Correct output: 38.5197606199  | Program output: 38.7752450322 
Correct output: -4.0857969085  | Program output: 11.728731469  
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 29.7303302732 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 60.3388306096 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_max} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_min} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_frominteger} {:instruction print_float} {:instruction float_sin} {:instruction float_tan} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_mod in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_dup integer_fromfloat float_max float_sub float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec integer_mod float_sub float_dec float_dec float_sub float_div float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub integer_min float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec integer_max float_dec integer_max float_dec float_dec float_div float_dec float_div float_dec float_sub integer_mult integer_mult integer_yank float_dec integer_max float_dec float_dec float_dec integer_dec float_dup_items integer_yank float_dec integer_yank float_dec float_frominteger print_float float_sin float_tan float_div float_rot)
Errors: [28.444 10 7.0837 10 11.5487 10 6.1133 10 26.0 2 71.7714 11 7.2441 9 2.0 2 7.5801 10 6.2978 8 51.0 2 30.4056 10 31.2574 9 17.1647 10 2.0 2 7.0 1 20.0 1 19.2981 10 0.2555 10 15.8145 11 16.0 2 1.9421 10 45.0 2 16.8407 11 38.0 2]
Total: 661.0616999999999
Mean: 13.221234
Genome size: 171
Size: 172
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3951.8475360999983
Median total errors in population: 1176.0412499999998
Error averages by case: (228.886491199999 11.065 111.15738620000013 10.611 127.31074900000068 10.751 213.07693480000083 11.095 120.40596889999982 4.363 139.68127750000036 10.406 135.89411429999961 11.459 100.22987799999993 3.669 189.35022780000014 10.615 139.43264080000014 10.919 145.67108160000032 4.457 228.03232199999923 10.816 109.60018009999968 10.235 232.63132759999928 10.814 110.25227270000008 3.592 101.52259319999982 3.74 119.68604600000002 4.382 205.01252920000022 11.062 122.00920309999994 10.734 113.24571159999927 10.142 119.79445079999994 4.009 156.0599898000001 10.665 148.18394450000008 4.866 190.706396900001 11.004 134.24381850000017 4.299)
Error minima by case: (0.3163 2 0.303 1 3.1803 7 0.1133 1 0.0918 1 1.1022 2 1.2441 7 0.0 0 0.5434 1 0.0212 2 19.4711 1 0.3096 2 0.0438 1 0.0067 2 0.0 0 0.0 0 1.0 1 0.4067 1 0.0308 2 0.0142 1 5.4519 1 0.0223 1 16.3324 1 0.7991 1 11.0669 1)
Average genome size in population (length): 170.136
Average program size in population (points): 171.136
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 190.475210202742
Average age in population: 188.0586697337843
Median age in population: 188.2633021332172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.657
Error (vector) diversity:			 0.667
Behavioral diversity:				 0.668
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 367174859
--- Timings ---
Current time: 1529615558597 milliseconds
Total Time:         584.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.2 seconds, 32.0%
Fitness Testing:    315.4 seconds, 54.0%
Report:              81.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 61982.94430000007
Test mean error for best: 30.99147
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.0395902955
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 121.2253791824
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 62.3766557619 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 171.8640757481
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 183.0791814972
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 102.7387509762
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 26.7394428247 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 55.3073683447 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction integer_mod} {:instruction float_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin})
Best program: (float_swap integer_mod float_swap integer_mod float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_yankdup float_rot integer_yankdup float_rot in2 float_dup_items float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div float_dec float_div float_dec float_rot integer_sub float_div float_div float_dec float_rot float_dup_items float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec integer_min integer_max float_dec float_div float_dec float_shove float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin)
Errors: [37.6706 11 4.3103 8 22.1972 11 15.8532 10 28.0 2 47.2265 9 35.3881 9 0.0 0 13.1166 11 0.0212 10 53.0 2 17.0486 10 4.8134 11 3.0067 8 0.0 0 5.0 1 18.0 2 41.3258 12 3.6828 11 2.0142 9 18.0 2 1.0488 9 47.0 3 21.8721 9 40.0 1]
Total: 650.5961000000002
Mean: 13.011922
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3712.7447101999996
Median total errors in population: 1187.2585
Error averages by case: (212.63066909999932 10.916 102.82464390000023 10.599 124.27893820000038 10.795 198.56078050000073 10.875 112.7202277999998 4.212 132.7344780000001 10.254 131.17296029999974 11.409 92.38871279999991 3.539 176.0935102000002 10.414 132.21894190000015 10.882 138.49848920000034 4.345 211.4245853999996 10.598 103.81730759999971 10.073 216.10941459999935 10.612 102.89480010000001 3.362 94.36351089999981 3.607 113.14294179999999 4.155 189.80938330000023 10.841 111.32825669999981 10.744 107.72919439999951 10.021 113.13418809999996 3.819 142.80494720000047 10.649 141.58003330000008 4.656 177.41045890000078 10.784 126.76133600000009 4.151)
Error minima by case: (0.2395 2 0.0409 3 0.5532 8 0.1942 1 0.0918 1 2.3551 2 0.0442 6 0.0 0 0.2022 1 0.0212 2 29.0747 1 0.2158 2 0.0346 1 0.0067 2 0.0 0 0.0 0 0.5027 1 0.4563 1 0.0308 2 0.0142 1 7.0 1 0.0223 2 31.3324 1 0.0137 1 16.8936 1)
Average genome size in population (length): 170.722
Average program size in population (points): 171.722
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 191.6276331997842
Average age in population: 188.9865609562675
Median age in population: 189.5961505619039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.671
Error (vector) diversity:			 0.682
Behavioral diversity:				 0.683
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 371442984
--- Timings ---
Current time: 1529615564280 milliseconds
Total Time:         590.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.6 seconds, 32.0%
Fitness Testing:    318.8 seconds, 54.0%
Report:              82.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 61771.24180000007
Test mean error for best: 30.88562
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.0395902955
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 121.2253791824
Correct output: -36.0917810332 | Program output: -5.0917810332 
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -6.6087899132 
Correct output: 75.493217436   | Program output: 62.3766557619 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -23.8347132576
Correct output: 154.815449196  | Program output: 171.8640757481
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 183.0791814972
Correct output: -128.3399358578 | Program output: -125.3399358578
Correct output: -20.7768369154 | Program output: -22.7768369154
Correct output: -106.4972590774 | Program output: -121.4972590774
Correct output: 61.4129516245  | Program output: 38.2982788262 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -72.8538349059
Correct output: 27.7882694945  | Program output: 26.7394428247 
Correct output: -145.332361916 | Program output: -95.332361916 
Correct output: 77.1794883917  | Program output: 55.3073683447 
Correct output: -67.6536129502 | Program output: -24.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction tagged_637} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec tagged_637 float_max float_dec float_add float_sub float_dec float_dec float_sub float_dup_items integer_yank float_dec integer_max float_div float_dec float_dec float_div float_dec float_dec float_div integer_dup_items integer_yank float_dec float_div float_div integer_yank float_dec integer_max float_dec float_dec float_div integer_yank float_dec float_div float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_dup_items integer_swap integer_sub float_div -69 float_min float_mult)
Errors: [37.6706 11 4.3103 8 22.1972 11 15.8532 10 31.0 2 47.2265 9 35.3881 9 3.0 1 13.1166 11 0.0212 10 56.0 2 17.0486 10 4.8134 11 3.0067 8 3.0 1 2.0 1 15.0 2 23.1147 11 3.6828 11 2.0142 9 21.0 2 1.0488 9 50.0 2 21.8721 9 43.0 2]
Total: 648.3850000000001
Mean: 12.9677
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4030.866677599999
Median total errors in population: 1143.8500000000004
Error averages by case: (220.78441919999935 11.075 126.98170430000008 10.659 149.77924989999994 10.919 208.58060940000064 11.056 116.45860859999975 4.281 163.74717130000047 10.461 157.04186649999957 11.287 96.45927479999982 3.593 186.56424900000022 10.485 159.88124339999973 10.916 141.18257680000028 4.312 221.02825059999935 10.753 134.56679579999982 10.284 222.7636897999992 10.642 106.10606060000006 3.471 97.35752479999982 3.592 115.37908870000001 4.207 190.87930350000033 10.886 134.02076539999987 10.928 134.21425969999902 10.219 115.86912039999991 3.853 158.26179490000035 10.688 143.6176093 4.713 191.4087221000007 10.89 129.6607188000002 4.102)
Error minima by case: (0.4615 2 0.0837 6 2.1522 8 0.1942 2 0.0918 1 3.8402 1 0.2123 7 0.0 0 0.2566 1 0.0212 7 15.1736 1 0.6279 2 0.0395 1 0.0067 2 0.0 0 0.0 0 0.5027 1 0.4563 1 0.0308 7 0.0142 1 8.0 1 0.0223 1 32.3324 1 0.2009 1 6.2681 1)
Average genome size in population (length): 171.017
Average program size in population (points): 172.017
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 192.944283323528
Average age in population: 190.692241089419
Median age in population: 190.9056492587036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.696
Error (vector) diversity:			 0.708
Behavioral diversity:				 0.709
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 375718584
--- Timings ---
Current time: 1529615569718 milliseconds
Total Time:         595.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.0 seconds, 31.9%
Fitness Testing:    322.1 seconds, 54.1%
Report:              83.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 61771.24180000007
Test mean error for best: 30.88562
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 114.0395902955
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 121.2253791824
Correct output: -36.0917810332 | Program output: -5.0917810332 
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -6.6087899132 
Correct output: 75.493217436   | Program output: 62.3766557619 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -23.8347132576
Correct output: 154.815449196  | Program output: 171.8640757481
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 183.0791814972
Correct output: -128.3399358578 | Program output: -125.3399358578
Correct output: -20.7768369154 | Program output: -22.7768369154
Correct output: -106.4972590774 | Program output: -121.4972590774
Correct output: 61.4129516245  | Program output: 38.2982788262 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -72.8538349059
Correct output: 27.7882694945  | Program output: 26.7394428247 
Correct output: -145.332361916 | Program output: -95.332361916 
Correct output: 77.1794883917  | Program output: 55.3073683447 
Correct output: -67.6536129502 | Program output: -24.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction tagged_637} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec tagged_637 float_max float_dec float_add float_sub float_dec float_dec float_sub float_dup_items integer_yank float_dec integer_max float_div float_dec float_dec float_div float_dec float_dec float_div integer_dup_items integer_yank float_dec float_div float_div integer_yank float_dec integer_max float_dec float_dec float_div integer_yank float_dec float_div float_dec float_dup_items integer_yank float_dec float_dec integer_pop print_float float_dup_items integer_swap integer_sub float_div -69 float_min float_mult)
Errors: [37.6706 11 4.3103 8 22.1972 11 15.8532 10 31.0 2 47.2265 9 35.3881 9 3.0 1 13.1166 11 0.0212 10 56.0 2 17.0486 10 4.8134 11 3.0067 8 3.0 1 2.0 1 15.0 2 23.1147 11 3.6828 11 2.0142 9 21.0 2 1.0488 9 50.0 2 21.8721 9 43.0 2]
Total: 648.3850000000001
Mean: 12.9677
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4494.8307505
Median total errors in population: 1463.2833500000002
Error averages by case: (247.7947104000001 11.13 132.84087269999995 10.679 153.51116759999977 11.022 237.71756020000123 11.075 140.5189309999999 4.712 168.86894049999978 10.495 160.26014079999985 11.174 121.1731569999999 4.069 209.00380150000015 10.582 160.3824694999998 10.844 165.45589410000025 4.679 245.78359099999975 10.813 139.03525149999993 10.454 250.8121409999992 10.746 133.10589190000005 3.811 121.8372449999998 4.015 141.84939640000005 4.559 214.86351720000002 10.903 139.33018370000002 10.998 139.25925859999955 10.258 141.28402569999994 4.205 179.91879289999997 10.689 169.38213350000012 4.994 214.97586200000057 10.889 153.55881479999996 4.512)
Error minima by case: (0.3163 2 0.0202 5 0.264 8 0.106 2 0.0918 1 6.3552 1 1.156 6 0.0 0 0.2022 1 0.0212 7 25.1653 1 0.6904 2 0.0112 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.4563 1 0.0308 7 0.0142 1 4.628 1 0.0223 1 18.3324 1 0.2009 1 15.6145 1)
Average genome size in population (length): 170.752
Average program size in population (points): 171.752
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 194.6029491350886
Average age in population: 192.0312907584076
Median age in population: 192.273091068785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.73
Error (vector) diversity:			 0.746
Behavioral diversity:				 0.747
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 379987525
--- Timings ---
Current time: 1529615575398 milliseconds
Total Time:         601.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.4 seconds, 31.8%
Fitness Testing:    325.5 seconds, 54.1%
Report:              84.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 61073.999499999954
Test mean error for best: 30.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 124.1845909575
Correct output: 17.2828270025  | Program output: 11.5858528659 
Correct output: 23.1304489589  | Program output: -0.1077417885 
Correct output: 137.0785591646 | Program output: 131.8836506771
Correct output: -36.0917810332 | Program output: -6.0917810332 
Correct output: -62.1419485102 | Program output: -15.9339750517
Correct output: 17.1520909798  | Program output: -19.2498318623
Correct output: -9.6087899132  | Program output: -7.6087899132 
Correct output: 75.493217436   | Program output: 68.8314444559 
Correct output: 52.2037920383  | Program output: 51.0690587857 
Correct output: -79.8347132576 | Program output: -24.8347132576
Correct output: 154.815449196  | Program output: 186.1393979871
Correct output: -19.1443327626 | Program output: -15.350255696 
Correct output: 180.0725301747 | Program output: 198.1555828729
Correct output: -128.3399358578 | Program output: -126.3399358578
Correct output: -20.7768369154 | Program output: -23.7768369154
Correct output: -106.4972590774 | Program output: -122.4972590774
Correct output: 61.4129516245  | Program output: 43.0331810821 
Correct output: 38.5197606199  | Program output: 40.4889206046 
Correct output: -4.0857969085  | Program output: -7.1310113054 
Correct output: -93.8538349059 | Program output: -73.8538349059
Correct output: 27.7882694945  | Program output: 30.6487120465 
Correct output: -145.332361916 | Program output: -96.332361916 
Correct output: 77.1794883917  | Program output: 61.2572073849 
Correct output: -67.6536129502 | Program output: -25.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_div} {:instruction -69} {:instruction float_min} {:instruction float_mult})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_mult integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub float_div float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec integer_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_inc float_dec integer_max float_rot integer_stackdepth float_dec integer_max float_dec integer_max integer_dup float_dec float_div float_dec float_dec float_div float_dec float_div float_dec integer_swap integer_min float_dec integer_yank float_dec integer_min float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_dec integer_yank float_sin integer_swap integer_sub float_div -69 float_min float_mult)
Errors: [27.5256 11 5.697 9 23.2382 9 5.1949 10 30.0 1 46.208 10 36.4019 12 2.0 1 6.6618 11 1.1347 10 55.0 2 31.3239 10 3.7941 9 18.0831 10 2.0 1 3.0 1 16.0 2 18.3798 11 1.9692 10 3.0452 10 20.0 1 2.8604 10 49.0 3 15.9223 11 42.0 2]
Total: 643.4401
Mean: 12.868802
Genome size: 170
Size: 171
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4022.3637677
Median total errors in population: 1159.33
Error averages by case: (217.5067529000001 10.955 114.93227890000007 10.607 132.0952598000001 11.018 203.87549110000066 10.901 135.05892689999985 4.399 149.78108570000012 10.328 138.7340163999995 11.018 114.64815809999995 3.742 180.93600249999997 10.396 140.25379510000027 10.721 159.21140720000028 4.451 215.69821059999973 10.636 118.1899310999999 10.31 217.74182969999927 10.509 123.31083610000007 3.688 115.87527109999984 3.719 132.70575510000003 4.406 188.34532530000035 10.727 123.20378279999993 11.031 117.22329729999969 10.049 132.8160108999999 4.042 149.51955870000023 10.666 160.75654800000012 4.866 183.7992165000006 10.682 148.00901990000003 4.269)
Error minima by case: (0.138 2 0.0837 3 0.3459 8 0.1133 1 0.0918 1 2.051 2 0.5825 7 0.0 0 0.2022 1 0.0212 2 6.1653 1 0.2471 2 0.0241 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.2621 1 0.0308 2 5.0E-4 2 0.2763 1 0.0223 1 13.9971 1 0.2009 1 5.3464 1)
Average genome size in population (length): 171.222
Average program size in population (points): 172.222
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 195.5895595112325
Average age in population: 193.3309278896123
Median age in population: 193.5826788421874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.746
Error (vector) diversity:			 0.759
Behavioral diversity:				 0.76
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 384268200
--- Timings ---
Current time: 1529615580897 milliseconds
Total Time:         606.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.8 seconds, 31.8%
Fitness Testing:    328.7 seconds, 54.2%
Report:              85.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 61032.69080000005
Test mean error for best: 30.51635
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 113.9025284591
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 121.0882826901
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 62.240006735  
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 171.7268059679
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 182.9418846262
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 38.1620446029 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 26.6035392326 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 55.1708160029 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_frominteger} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_min} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod integer_dec float_dup_items float_div integer_add float_dec float_div float_dec float_rot integer_sub float_div float_frominteger float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_add float_dec float_dup_items float_max float_dec float_add float_sub integer_min float_dec float_sub integer_mult integer_yank float_dec integer_mult integer_yank float_dec integer_max float_dec integer_max float_dec integer_max float_dec float_dec float_div float_dec float_div float_dec float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_dec integer_yank integer_yank float_dec)
Errors: [37.8077 9 4.3103 8 22.1972 11 15.9903 10 28.0 2 47.2265 9 35.3881 9 0.0 0 13.2532 9 0.0212 10 53.0 2 16.9114 11 4.8134 11 2.8694 11 0.0 0 5.0 1 18.0 2 23.2509 10 3.6828 11 2.0142 9 18.0 2 1.1847 10 47.0 3 22.0087 10 40.0 1]
Total: 632.93
Mean: 12.6586
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4103.101380700001
Median total errors in population: 1349.0693
Error averages by case: (227.71095250000002 11.062 117.15766249999984 10.558 137.7204438999999 11.056 214.12040540000092 11.068 128.8964851999998 4.597 154.97609329999995 10.357 143.8854508999996 10.935 108.65657819999987 3.997 190.36809780000016 10.607 151.45598410000025 10.786 153.62932210000025 4.661 226.88618509999938 10.794 124.07578729999982 10.434 228.52310289999926 10.653 121.0810944 3.778 109.39382879999987 3.953 130.26084649999996 4.532 188.87461050000041 10.77 128.64366049999995 11.097 124.76090059999966 10.073 130.0429087999999 4.122 157.56351250000003 10.725 158.40455490000005 4.99 193.1256026000007 10.857 141.92930940000016 4.496)
Error minima by case: (0.3024 2 0.0503 7 0.8696 6 0.0343 1 0.0918 1 0.1776 2 1.2123 5 0.0 0 0.2022 1 0.0212 7 18.7357 1 0.2471 2 0.0913 2 0.0067 2 0.0 0 0.0 0 0.0 0 0.4055 1 0.0308 7 0.0056 1 3.4408 1 0.0223 1 17.3195 1 0.2926 1 10.3195 1)
Average genome size in population (length): 170.878
Average program size in population (points): 171.878
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 196.6287637257121
Average age in population: 194.1055432865204
Median age in population: 194.9293247462201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.777
Error (vector) diversity:			 0.787
Behavioral diversity:				 0.787
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 388540175
--- Timings ---
Current time: 1529615586530 milliseconds
Total Time:         612.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.2 seconds, 31.7%
Fitness Testing:    332.1 seconds, 54.2%
Report:              85.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 61032.69080000005
Test mean error for best: 30.51635
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 113.9025284591
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 121.0882826901
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 62.240006735  
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 171.7268059679
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 182.9418846262
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 38.1620446029 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 26.6035392326 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 55.1708160029 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_frominteger} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_min} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod integer_dec float_dup_items float_div integer_add float_dec float_div float_dec float_rot integer_sub float_div float_frominteger float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_add float_dec float_dup_items float_max float_dec float_add float_sub integer_min float_dec float_sub integer_mult integer_yank float_dec integer_mult integer_yank float_dec integer_max float_dec integer_max float_dec integer_max float_dec float_dec float_div float_dec float_div float_dec float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_dec integer_yank integer_yank float_dec)
Errors: [37.8077 9 4.3103 8 22.1972 11 15.9903 10 28.0 2 47.2265 9 35.3881 9 0.0 0 13.2532 9 0.0212 10 53.0 2 16.9114 11 4.8134 11 2.8694 11 0.0 0 5.0 1 18.0 2 23.2509 10 3.6828 11 2.0142 9 18.0 2 1.1847 10 47.0 3 22.0087 10 40.0 1]
Total: 632.93
Mean: 12.6586
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4319.772668999998
Median total errors in population: 1402.9642
Error averages by case: (230.81660560000017 10.973 118.74355709999995 10.61 148.92999559999944 11.143 217.74408710000097 10.981 143.15269819999986 4.803 163.42469639999996 10.329 156.5144008000002 10.957 124.18272029999991 4.227 190.1819599000001 10.532 158.69222579999968 10.872 166.99814940000024 4.875 229.45361339999943 10.712 133.70564149999996 10.429 232.7720150999994 10.584 135.61462940000007 4.034 124.41048069999984 4.205 144.34690739999994 4.728 196.86523260000058 10.864 131.01912589999984 11.028 134.51883059999983 10.007 143.85009039999994 4.301 160.3189599999999 10.714 171.51814190000013 5.158 193.77792530000028 10.674 155.75397859999998 4.726)
Error minima by case: (0.4615 2 0.293 2 0.1109 8 0.1133 1 0.0918 1 5.3705 1 0.5827 6 0.0 0 0.2791 1 0.0212 2 11.1736 1 0.3872 2 0.1405 1 0.0067 2 0.0 0 0.0 0 2.0 1 0.0738 1 0.0308 1 0.0142 1 7.0 1 0.0223 1 16.3324 1 0.1593 1 2.2681 1)
Average genome size in population (length): 171.827
Average program size in population (points): 172.827
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 198.1500800533468
Average age in population: 196.0040572011337
Median age in population: 196.231533960941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.775
Error (vector) diversity:			 0.785
Behavioral diversity:				 0.786
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 392835891
--- Timings ---
Current time: 1529615592071 milliseconds
Total Time:         617.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.7 seconds, 31.7%
Fitness Testing:    335.4 seconds, 54.3%
Report:              86.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 60528.53909999996
Test mean error for best: 30.26427
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.1845909575
Correct output: 17.2828270025  | Program output: 13.5858528659 
Correct output: 23.1304489589  | Program output: 1.8922582115  
Correct output: 137.0785591646 | Program output: 133.8836506771
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: -13.9339750517
Correct output: 17.1520909798  | Program output: -17.2498318623
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 70.8314444559 
Correct output: 52.2037920383  | Program output: 53.0690587857 
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 188.1393979871
Correct output: -19.1443327626 | Program output: -13.350255696 
Correct output: 180.0725301747 | Program output: 200.1555828729
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 45.0331810821 
Correct output: 38.5197606199  | Program output: 42.4889206046 
Correct output: -4.0857969085  | Program output: -5.1310113054 
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 32.6487120465 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 63.2572073849 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_237} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_dec} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_add} {:instruction float_mult} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_237 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_rot integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot float_sub float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 integer_shove float_inc float_mod float_div float_dup_items float_div float_dec float_dec float_div float_dec float_rot integer_sub integer_dec float_dec float_add float_sub float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_sub integer_dup_items integer_yank float_dec float_add float_mult float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_sub float_dec float_dec float_sub integer_mult integer_yank float_dec integer_max float_dec integer_max float_dec integer_max float_dec float_dec float_div float_dec float_yankdup float_dec float_sub integer_mult integer_mult integer_yank float_dec integer_yank float_dec float_div print_float float_sin integer_swap float_div float_rot)
Errors: [25.5256 11 3.697 9 21.2382 11 3.1949 10 26.0 2 48.208 10 34.4019 11 2.0 2 4.6618 10 0.8653 10 51.0 2 33.3239 10 5.7941 9 20.0831 10 2.0 2 7.0 1 20.0 1 16.3798 11 3.9692 10 1.0452 10 16.0 2 4.8604 10 45.0 2 13.9223 11 38.0 2]
Total: 627.1706999999999
Mean: 12.543414
Genome size: 173
Size: 174
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4159.714910699999
Median total errors in population: 1333.28065
Error averages by case: (234.33501550000062 11.013 115.86486399999981 10.523 138.6837646000001 11.133 220.66128210000113 11.096 132.11944249999982 4.599 150.67306010000001 10.2 147.41785819999967 11.009 112.68194689999987 3.953 195.6545453000002 10.597 147.36609500000014 11.017 156.2802363000002 4.599 232.35549099999957 10.77 121.4422668999998 10.528 234.27171139999942 10.633 121.48331820000006 3.746 112.84628639999991 3.898 130.2950135000001 4.49 194.63093200000057 10.812 127.57950019999987 11.078 123.23196839999973 9.939 130.84944739999995 4.024 165.2314740999999 10.752 159.06124490000005 4.939 199.4159583000008 10.657 144.85218750000016 4.425)
Error minima by case: (0.6837 2 0.0765 2 0.8028 6 0.1133 1 0.0918 1 3.6909 2 0.2123 7 0.0 0 0.163 1 0.0212 7 11.9426 1 0.2471 2 0.0735 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.4941 1 0.0308 2 0.0142 1 7.0 1 0.0223 2 14.3324 1 0.1175 1 6.4479 1)
Average genome size in population (length): 172.113
Average program size in population (points): 173.113
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 199.8774368571137
Average age in population: 196.9239085573863
Median age in population: 197.57170356285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.778
Error (vector) diversity:			 0.785
Behavioral diversity:				 0.787
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 397138757
--- Timings ---
Current time: 1529615597661 milliseconds
Total Time:         623.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.0 seconds, 31.6%
Fitness Testing:    338.7 seconds, 54.3%
Report:              87.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 60980.778200000066
Test mean error for best: 30.49039
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 26.0 2 49.2265 8 33.3881 9 2.0 2 11.1166 11 1.9788 11 51.0 2 19.0486 10 6.8134 11 5.0067 8 2.0 2 7.0 1 20.0 1 21.1147 11 5.6828 11 0.0142 8 16.0 2 0.9512 9 45.0 2 19.8721 8 38.0 2]
Total: 623.245
Mean: 12.4649
Genome size: 165
Size: 166
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4312.165518599999
Median total errors in population: 1464.86035
Error averages by case: (249.75291540000057 11.005 128.95898559999975 10.499 143.40703129999977 11.093 237.03197090000128 11.008 130.5260010999998 4.529 157.1535951 10.201 151.59203189999994 10.889 111.03393399999986 3.88 209.28698290000025 10.516 162.1218194000001 10.968 154.75692180000024 4.597 245.3351606000002 10.787 126.27241899999976 10.596 251.22578559999954 10.629 118.4546721 3.72 111.1619647999999 3.877 127.71173170000002 4.456 211.66532090000052 10.745 134.2661381999998 11.09 126.46582289999978 9.9 128.18533259999995 3.972 173.80934269999983 10.778 156.38128899999998 4.883 212.48999610000052 10.633 143.4323530000001 4.435)
Error minima by case: (0.6293 2 0.0765 7 0.6079 7 0.69 1 0.0918 1 2.1598 2 1.2719 8 0.0 0 0.2719 1 8.0E-4 7 6.1653 1 0.1908 2 0.0442 1 0.0067 2 0.0 0 0.0 0 3.7805 1 0.3613 1 0.0308 7 3.0E-4 1 5.0 1 0.0223 2 11.7772 1 0.1795 1 5.3464 1)
Average genome size in population (length): 171.823
Average program size in population (points): 172.823
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 200.9737179055629
Average age in population: 198.641313150004
Median age in population: 198.8725733323682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.771
Error (vector) diversity:			 0.784
Behavioral diversity:				 0.785
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 401434407
--- Timings ---
Current time: 1529615603268 milliseconds
Total Time:         629.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.5 seconds, 31.6%
Fitness Testing:    342.0 seconds, 54.4%
Report:              88.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 60980.778200000066
Test mean error for best: 30.49039
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -10.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -11.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -28.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -130.3399358578
Correct output: -20.7768369154 | Program output: -27.7768369154
Correct output: -106.4972590774 | Program output: -126.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -77.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -100.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -29.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction integer_flush} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup integer_flush in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 26.0 2 49.2265 8 33.3881 9 2.0 2 11.1166 11 1.9788 11 51.0 2 19.0486 10 6.8134 11 5.0067 8 2.0 2 7.0 1 20.0 1 21.1147 11 5.6828 11 0.0142 8 16.0 2 0.9512 9 45.0 2 19.8721 8 38.0 2]
Total: 623.245
Mean: 12.4649
Genome size: 169
Size: 170
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4251.436939900001
Median total errors in population: 1153.4767
Error averages by case: (230.81386140000066 10.957 128.40020969999966 10.341 143.60447219999958 11.062 218.82741660000102 10.984 138.6601214999998 4.633 158.07467239999997 10.129 150.66864439999944 10.836 119.1059245999999 3.986 194.0712810999999 10.466 156.78071799999995 11.006 162.5890620000003 4.62 225.23324059999976 10.794 126.77183149999964 10.682 227.97188349999954 10.569 127.13146410000002 3.848 118.97771179999982 3.944 136.29948090000002 4.606 194.49883900000106 10.763 135.5526143 11.109 129.22253729999994 9.833 136.87915739999994 4.108 166.80696939999984 10.698 165.36348960000018 5.01 198.79074110000047 10.565 150.33459550000018 4.457)
Error minima by case: (0.6293 2 0.0765 7 1.1972 7 0.1133 2 0.0918 1 3.8224 2 2.2123 8 0.0 0 0.2969 1 0.0212 8 40.0 1 2.1663 2 0.1199 1 0.0067 2 0.0 0 0.0 0 1.1704 1 0.0738 1 0.0308 7 0.0142 1 5.0 1 0.0223 2 11.0 1 0.423 2 26.0103 1)
Average genome size in population (length): 171.102
Average program size in population (points): 172.102
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 202.3454643989353
Average age in population: 200.0138215058997
Median age in population: 200.2917846326309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.756
Error (vector) diversity:			 0.767
Behavioral diversity:				 0.767
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 405711957
--- Timings ---
Current time: 1529615608871 milliseconds
Total Time:         634.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.0 seconds, 31.5%
Fitness Testing:    345.3 seconds, 54.4%
Report:              89.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 61358.09760000009
Test mean error for best: 30.67905
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.0395902955
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 124.2253791824
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 65.3766557619 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 174.8640757481
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 186.0791814972
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.2982788262 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 29.7394428247 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 58.3073683447 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction integer_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_dec} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div integer_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_dec float_tan float_rot)
Errors: [34.6706 11 1.3103 8 19.1972 10 12.8532 10 28.0 2 50.2265 9 32.3881 9 0.0 0 10.1166 10 2.9788 11 53.0 2 20.0486 9 7.8134 11 6.0067 8 0.0 0 5.0 1 18.0 2 20.1147 10 6.6828 11 0.9858 9 18.0 2 1.9512 9 47.0 3 18.8721 9 40.0 1]
Total: 622.2166
Mean: 12.444332
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4038.5895925
Median total errors in population: 1228.0667000000003
Error averages by case: (228.4236529000008 11.001 113.8174430999998 10.286 131.16857229999974 11.051 215.6205985000011 10.954 129.3598248999998 4.651 146.65055519999996 10.017 139.94966869999945 10.714 109.81470799999995 4.022 190.92194910000038 10.449 142.73934920000002 10.961 153.6631586000003 4.74 224.4554404 10.761 115.72449819999963 10.677 227.89122519999938 10.59 119.83497349999996 3.786 109.40053259999989 4.041 128.3398286 4.58 181.7669146000006 10.669 125.90643069999972 11.081 116.37479279999992 9.768 128.85130959999992 3.99 155.75531089999993 10.674 157.38511709999997 5.012 192.92341820000067 10.556 142.25731960000005 4.562)
Error minima by case: (0.5385 2 0.2872 7 0.1027 7 0.9903 2 0.0918 1 2.3551 2 0.3442 8 0.0 0 0.4389 1 0.0212 5 23.0 1 0.6329 2 0.0976 1 0.0067 2 0.0 0 0.0 0 3.5609 1 0.2621 1 0.0308 6 0.0142 1 6.0 1 0.0223 1 16.3324 1 0.577 1 20.8508 1)
Average genome size in population (length): 170.154
Average program size in population (points): 171.154
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 203.6920699028079
Average age in population: 201.0776628894854
Median age in population: 201.5457027125013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.741
Error (vector) diversity:			 0.755
Behavioral diversity:				 0.757
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 409965932
--- Timings ---
Current time: 1529615614382 milliseconds
Total Time:         640.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.4 seconds, 31.5%
Fitness Testing:    348.6 seconds, 54.5%
Report:              90.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 61358.09760000009
Test mean error for best: 30.67905
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.0395902955
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 124.2253791824
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 65.3766557619 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 174.8640757481
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 186.0791814972
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.2982788262 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 29.7394428247 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 58.3073683447 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div integer_shove in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [34.6706 11 1.3103 8 19.1972 10 12.8532 10 28.0 2 50.2265 9 32.3881 9 0.0 0 10.1166 10 2.9788 11 53.0 2 20.0486 9 7.8134 11 6.0067 8 0.0 0 5.0 1 18.0 2 20.1147 10 6.6828 11 0.9858 9 18.0 2 1.9512 9 47.0 3 18.8721 9 40.0 1]
Total: 622.2166
Mean: 12.444332
Genome size: 161
Size: 162
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4066.284423500001
Median total errors in population: 1164.0981000000002
Error averages by case: (224.6051486000006 11.12 120.30676159999967 10.284 135.34879799999928 11.088 210.54303450000077 11.036 132.7424768999998 4.575 150.25158390000004 10.162 143.59212009999948 10.749 112.95381089999991 3.967 186.81889659999996 10.544 154.71191120000003 11.098 156.91689040000026 4.586 218.81390079999989 10.795 118.68533889999952 10.786 221.77067369999966 10.559 119.7347054 3.654 113.63094709999986 3.885 129.10703529999998 4.4 175.5511297000007 10.725 128.85566429999952 11.165 118.58966509999989 9.88 130.01074619999997 3.906 159.35177930000003 10.673 157.5228712000001 4.881 190.6993905000003 10.589 145.6211433000001 4.441)
Error minima by case: (0.3163 1 0.0154 7 0.1972 8 0.0553 2 0.0918 1 3.6534 2 3.6093 7 0.0 0 0.2808 1 0.0212 6 22.1653 1 0.0805 2 0.028 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.2621 1 0.0308 7 0.0067 1 8.0 1 0.0223 2 15.6676 1 0.017 1 13.276 1)
Average genome size in population (length): 169.448
Average program size in population (points): 170.448
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 205.0498602733928
Average age in population: 202.1678094990083
Median age in population: 202.7827281097272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.737
Error (vector) diversity:			 0.748
Behavioral diversity:				 0.749
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 414202182
--- Timings ---
Current time: 1529615619915 milliseconds
Total Time:         645.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.8 seconds, 31.4%
Fitness Testing:    352.0 seconds, 54.5%
Report:              90.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 61358.09760000009
Test mean error for best: 30.67905
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.0395902955
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 124.2253791824
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 65.3766557619 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 174.8640757481
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 186.0791814972
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.2982788262 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 29.7394428247 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 58.3073683447 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_sub} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_div} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_add integer_shove float_inc float_yankdup integer_swap integer_dup float_yankdup integer_shove integer_dup float_sub in2 float_dup_items float_dup_items integer_yankdup integer_div integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult integer_mult integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [34.6706 11 1.3103 8 19.1972 10 12.8532 10 28.0 2 50.2265 9 32.3881 9 0.0 0 10.1166 10 2.9788 11 53.0 2 20.0486 9 7.8134 11 6.0067 8 0.0 0 5.0 1 18.0 2 20.1147 10 6.6828 11 0.9858 9 18.0 2 1.9512 9 47.0 3 18.8721 9 40.0 1]
Total: 622.2166
Mean: 12.444332
Genome size: 159
Size: 160
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3732.0147124000005
Median total errors in population: 1173.4065500000002
Error averages by case: (216.29748840000104 11.013 104.30512529999977 10.098 129.90670439999917 11.016 203.00842460000126 10.913 109.93835399999983 4.33 148.75678610000014 9.981 138.8317343999993 10.522 89.09743489999988 3.699 175.10824640000007 10.384 144.38303049999993 11.06 135.27125020000025 4.318 215.31061190000028 10.803 115.26630829999958 10.806 218.1366233999996 10.547 98.83690920000002 3.476 89.58607359999995 3.581 107.19232339999996 4.229 170.06720770000075 10.65 111.97999249999943 11.149 115.62447380000008 9.788 108.41380189999998 3.691 142.13302480000002 10.491 137.30983369999998 4.77 178.06875550000026 10.491 123.21619350000017 4.162)
Error minima by case: (0.3163 2 0.0837 2 0.1109 8 0.1133 2 0.0918 1 11.0648 1 0.6558 7 0.0 0 0.3382 1 0.0212 3 1.0 1 0.6826 2 0.1222 1 0.0067 2 0.0 0 0.0 0 0.4391 1 0.0822 1 0.0308 2 0.0142 1 8.0 1 0.0223 1 12.0 1 0.0316 1 2.0 1)
Average genome size in population (length): 168.924
Average program size in population (points): 169.924
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 206.6507148120023
Average age in population: 203.7908423132692
Median age in population: 204.0118061876737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.761
Error (vector) diversity:			 0.77
Behavioral diversity:				 0.771
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 418425407
--- Timings ---
Current time: 1529615625407 milliseconds
Total Time:         651.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.2 seconds, 31.4%
Fitness Testing:    355.4 seconds, 54.6%
Report:              91.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 61358.09760000009
Test mean error for best: 30.67905
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.0395902955
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 124.2253791824
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 65.3766557619 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 174.8640757481
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 186.0791814972
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 41.2982788262 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 29.7394428247 
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 58.3073683447 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_stackdepth float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add float_sub float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yankdup float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [34.6706 11 1.3103 8 19.1972 10 12.8532 10 28.0 2 50.2265 9 32.3881 9 0.0 0 10.1166 10 2.9788 11 53.0 2 20.0486 9 7.8134 11 6.0067 8 0.0 0 5.0 1 18.0 2 20.1147 10 6.6828 11 0.9858 9 18.0 2 1.9512 9 47.0 3 18.8721 9 40.0 1]
Total: 622.2166
Mean: 12.444332
Genome size: 164
Size: 165
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4146.2901938
Median total errors in population: 1241.42855
Error averages by case: (226.74338870000085 11.083 120.64218419999965 10.263 142.8987907999995 11.137 209.9951490000012 10.951 136.5558028999999 4.68 156.88420069999987 10.024 150.23733559999985 10.614 116.55676009999992 3.976 186.09703060000047 10.417 149.1502800000001 11.067 160.96704560000026 4.661 223.28222180000006 10.766 126.67302569999957 10.707 225.6707684999995 10.581 126.60113470000006 3.835 117.50520149999988 3.967 135.51930879999995 4.575 173.85411650000057 10.615 130.9507915999996 11.174 126.05329390000017 9.667 135.4553201 4.117 159.4854859999998 10.617 163.4618776000001 5.016 185.97995710000043 10.453 149.61472180000007 4.492)
Error minima by case: (0.3163 2 0.0328 3 0.8891 8 0.1133 2 0.0918 1 10.1598 2 2.502 6 0.0 0 0.9744 1 0.0212 2 4.0977 1 0.9034 2 0.1443 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.2717 1 0.0308 2 0.0142 1 4.3077 1 0.0223 1 17.3324 1 0.7991 1 0.633 1)
Average genome size in population (length): 169.391
Average program size in population (points): 170.391
Average percent parens in population: 0.006
Minimum age in population: 202.8890815943717
Maximum age in population: 207.3011125721103
Average age in population: 205.3225662033638
Median age in population: 205.359793548502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.731
Error (vector) diversity:			 0.744
Behavioral diversity:				 0.745
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 422660332
--- Timings ---
Current time: 1529615630933 milliseconds
Total Time:         656.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.6 seconds, 31.3%
Fitness Testing:    358.6 seconds, 54.6%
Report:              92.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 60227.097600000074
Test mean error for best: 30.11355
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.0395902955
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 124.2253791824
Correct output: -36.0917810332 | Program output: -17.0917810332
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -18.6087899132
Correct output: 75.493217436   | Program output: 65.3766557619 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -35.8347132576
Correct output: 154.815449196  | Program output: 174.8640757481
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 186.0791814972
Correct output: -128.3399358578 | Program output: -137.3399358578
Correct output: -20.7768369154 | Program output: -34.7768369154
Correct output: -106.4972590774 | Program output: -133.4972590774
Correct output: 61.4129516245  | Program output: 41.2982788262 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -84.8538349059
Correct output: 27.7882694945  | Program output: 29.7394428247 
Correct output: -145.332361916 | Program output: -107.332361916
Correct output: 77.1794883917  | Program output: 58.3073683447 
Correct output: -67.6536129502 | Program output: -36.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_dup float_rot in2 float_dup_items integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_rot integer_sub float_div float_dec float_rot float_add integer_sub float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec integer_sub float_dec float_dec float_dec float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_stackdepth float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_mult integer_yank float_dec integer_max float_dec integer_shove float_dec float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [34.6706 11 1.3103 8 19.1972 10 12.8532 10 19.0 2 50.2265 9 32.3881 9 9.0 2 10.1166 10 2.9788 11 44.0 2 20.0486 9 7.8134 11 6.0067 8 9.0 2 14.0 2 27.0 2 20.1147 10 6.6828 11 0.9858 9 9.0 2 1.9512 9 38.0 2 18.8721 9 31.0 2]
Total: 618.2166
Mean: 12.364332
Genome size: 179
Size: 180
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4181.7852010999995
Median total errors in population: 1523.57315
Error averages by case: (237.03207830000133 11.174 125.98894869999984 10.266 142.68481029999916 11.155 223.11064390000143 10.908 128.33521919999987 4.535 156.90171530000023 9.971 151.20482739999971 10.58 108.6243428999999 3.792 200.66277980000038 10.419 162.19398030000008 11.125 152.28897470000018 4.449 233.7928319000005 10.709 127.75069539999959 10.715 237.69901849999977 10.55 114.31403340000001 3.595 109.58515479999993 3.77 124.29960829999997 4.391 181.96428830000104 10.634 139.06654529999966 11.229 126.41548259999998 9.631 124.29215379999994 3.895 172.1690910000001 10.689 151.97265830000006 4.881 200.72043190000042 10.483 140.94888679999997 4.22)
Error minima by case: (0.6072 2 0.0837 3 0.1697 6 0.1133 1 0.0918 1 7.3836 2 1.2282 8 0.0 0 0.1166 1 0.0212 6 15.0449 1 0.2286 2 0.0692 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.4509 1 0.0308 3 0.0067 1 3.1462 1 0.0223 1 17.3324 1 1.2545 1 18.3464 1)
Average genome size in population (length): 168.876
Average program size in population (points): 169.876
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 208.4532876073622
Average age in population: 206.4509444585891
Median age in population: 206.696267748479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.739
Error (vector) diversity:			 0.753
Behavioral diversity:				 0.753
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 426882382
--- Timings ---
Current time: 1529615636558 milliseconds
Total Time:         662.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.1 seconds, 31.3%
Fitness Testing:    361.9 seconds, 54.6%
Report:              93.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 60297.778200000066
Test mean error for best: 30.14889
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -15.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -16.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -33.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -135.3399358578
Correct output: -20.7768369154 | Program output: -32.7768369154
Correct output: -106.4972590774 | Program output: -131.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -82.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -105.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -34.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction integer_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_mult} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 74 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup integer_mod in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot float_dec float_sub float_sub float_dec integer_max float_dec float_mult float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 21.0 2 49.2265 8 33.3881 9 7.0 2 11.1166 11 1.9788 11 46.0 2 19.0486 10 6.8134 11 5.0067 8 7.0 2 12.0 2 25.0 2 21.1147 11 5.6828 11 0.0142 8 11.0 2 0.9512 9 40.0 1 19.8721 8 33.0 2]
Total: 619.245
Mean: 12.3849
Genome size: 174
Size: 175
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3866.4647017
Median total errors in population: 1206.18455
Error averages by case: (225.92724340000103 11.279 104.84478149999967 10.148 121.9851007999992 11.067 212.8073833000013 11.015 120.9220829999998 4.667 140.63201180000036 9.962 132.11898019999919 10.465 101.99291209999983 3.994 185.46172510000042 10.562 137.0029500999995 11.177 146.5980779000003 4.641 223.15556860000032 10.889 108.82006579999941 10.802 228.81343779999975 10.51 109.97227019999995 3.748 103.01485159999977 4.0 119.46228009999996 4.532 168.1757639000009 10.629 113.24564449999949 11.251 106.04342299999993 9.627 119.35012659999995 3.981 154.77172810000013 10.62 147.94751160000013 5.036 189.36835370000048 10.569 134.44942700000013 4.41)
Error minima by case: (0.4615 2 0.202 7 0.4031 7 0.1949 2 0.5244 1 4.6411 1 0.2282 8 0.0 0 0.0467 1 0.0212 7 6.4146 1 0.6279 2 0.0746 1 0.0067 2 0.0 0 0.0 0 1.0 1 0.002 1 0.0308 6 0.0133 1 1.0 1 0.0223 1 0.4146 1 1.1106 1 4.9289 1)
Average genome size in population (length): 168.993
Average program size in population (points): 169.993
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 209.8268149378043
Average age in population: 207.7030522959085
Median age in population: 207.9095161453468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.732
Error (vector) diversity:			 0.744
Behavioral diversity:				 0.745
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 431107257
--- Timings ---
Current time: 1529615642022 milliseconds
Total Time:         667.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.5 seconds, 31.2%
Fitness Testing:    365.2 seconds, 54.7%
Report:              94.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 60286.097600000074
Test mean error for best: 30.14305
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.0395902955
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 124.2253791824
Correct output: -36.0917810332 | Program output: -16.0917810332
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -17.6087899132
Correct output: 75.493217436   | Program output: 65.3766557619 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -34.8347132576
Correct output: 154.815449196  | Program output: 174.8640757481
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 186.0791814972
Correct output: -128.3399358578 | Program output: -136.3399358578
Correct output: -20.7768369154 | Program output: -33.7768369154
Correct output: -106.4972590774 | Program output: -132.4972590774
Correct output: 61.4129516245  | Program output: 41.2982788262 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -83.8538349059
Correct output: 27.7882694945  | Program output: 29.7394428247 
Correct output: -145.332361916 | Program output: -106.332361916
Correct output: 77.1794883917  | Program output: 58.3073683447 
Correct output: -67.6536129502 | Program output: -35.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_yankdup float_dec float_dec float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [34.6706 11 1.3103 8 19.1972 10 12.8532 10 20.0 1 50.2265 9 32.3881 9 8.0 2 10.1166 10 2.9788 11 45.0 2 20.0486 9 7.8134 11 6.0067 8 8.0 2 13.0 2 26.0 2 20.1147 10 6.6828 11 0.9858 9 10.0 1 1.9512 9 39.0 2 18.8721 9 32.0 2]
Total: 617.2166
Mean: 12.344332
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4099.989397000001
Median total errors in population: 1175.47215
Error averages by case: (230.70501040000096 11.269 116.12094229999968 10.1 134.4444394999991 11.055 217.59881410000122 10.907 130.0704679999999 4.619 154.9378699999998 9.88 144.2908370999997 10.379 111.16658819999984 3.973 190.25253170000005 10.524 151.21889760000002 11.136 155.05927080000026 4.577 228.5841555000003 10.74 123.05855899999952 10.854 231.53333259999954 10.32 119.16871470000005 3.804 112.84016859999991 3.91 129.05755069999995 4.495 185.06651780000084 10.634 125.84089599999935 11.266 121.82242260000012 9.618 128.62481649999998 3.979 157.84883030000026 10.55 156.6910889000002 4.962 192.16758710000025 10.412 143.4750870000001 4.381)
Error minima by case: (0.1396 2 0.0837 7 0.8891 8 0.1949 1 0.0918 1 6.9417 1 0.7877 8 0.0 0 0.1166 1 0.0212 7 1.1715 1 0.5342 2 0.0432 1 0.0067 2 0.0 0 0.0 0 2.0 1 0.4509 1 0.2889 6 0.0142 1 3.0533 1 0.0223 1 18.3324 1 0.4112 1 11.0096 1)
Average genome size in population (length): 168.45
Average program size in population (points): 169.45
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 211.3589592374958
Average age in population: 208.8420954509262
Median age in population: 209.3073917661778
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.686
Error (vector) diversity:			 0.709
Behavioral diversity:				 0.71
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 435318632
--- Timings ---
Current time: 1529615647628 milliseconds
Total Time:         673.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.0 seconds, 31.2%
Fitness Testing:    368.5 seconds, 54.7%
Report:              94.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 60158.778200000066
Test mean error for best: 30.07939
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -17.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -18.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -35.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -137.3399358578
Correct output: -20.7768369154 | Program output: -34.7768369154
Correct output: -106.4972590774 | Program output: -133.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -84.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -107.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -36.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_flush} {:instruction integer_mult} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_swap} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_yank})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items float_frominteger integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_yankdup float_rot in2 float_dup_items float_dup_items float_rot integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_flush integer_mult integer_sub float_dec float_dec integer_dup_items float_dup_items float_div float_dec float_add float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_max float_dec float_add in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dup_items float_max float_swap float_add float_sub float_dec float_dec integer_mult integer_yank float_dec integer_max float_dec integer_shove float_dec float_frominteger integer_mult integer_max float_dec float_dec integer_swap integer_min float_dec integer_add float_dec float_div print_float float_sin float_dec integer_yank integer_fromfloat float_div print_float float_sin print_float float_sin integer_swap float_div float_dec integer_yank integer_yank)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 19.0 2 49.2265 8 33.3881 9 9.0 2 11.1166 11 1.9788 11 44.0 2 19.0486 10 6.8134 11 5.0067 8 9.0 2 14.0 2 27.0 2 21.1147 11 5.6828 11 0.0142 8 9.0 2 0.9512 9 38.0 2 19.8721 8 31.0 2]
Total: 618.245
Mean: 12.3649
Genome size: 196
Size: 197
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4003.0642013999977
Median total errors in population: 1464.6096
Error averages by case: (227.44674450000105 11.284 110.6175385999996 10.142 125.04987309999902 11.024 216.4369109000016 10.877 127.37328709999979 4.612 145.03199300000028 9.979 132.43028779999915 10.384 108.68018799999982 3.949 186.21574840000042 10.495 147.9256240999999 11.185 154.62404400000025 4.566 226.67497900000018 10.688 110.39052189999947 10.934 232.11651679999972 10.375 118.06541119999999 3.832 111.36433639999983 3.902 128.2196764999999 4.528 179.60085970000088 10.657 120.88533949999953 11.232 109.72849249999986 9.745 127.29672399999994 4.018 159.72228820000035 10.589 155.41379330000007 4.956 189.61793220000033 10.467 143.35409070000003 4.361)
Error minima by case: (0.7051 2 0.0837 7 0.1101 8 0.3378 2 0.0918 1 12.1598 2 1.5904 7 0.0 0 0.1166 1 0.0212 8 4.002 1 0.3721 2 0.0834 1 0.0067 1 0.0 0 0.0 0 0.6322 1 1.4509 1 0.0515 7 0.0067 1 0.7658 1 0.0223 2 17.3324 1 0.2545 1 19.2365 1)
Average genome size in population (length): 168.22
Average program size in population (points): 169.22
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 212.4791424427442
Average age in population: 210.1275839324799
Median age in population: 210.5922549680345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.694
Error (vector) diversity:			 0.72
Behavioral diversity:				 0.722
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 439524207
--- Timings ---
Current time: 1529615653090 milliseconds
Total Time:         678.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.4 seconds, 31.1%
Fitness Testing:    371.7 seconds, 54.8%
Report:              95.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 60158.778200000066
Test mean error for best: 30.07939
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -17.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -18.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -35.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -137.3399358578
Correct output: -20.7768369154 | Program output: -34.7768369154
Correct output: -106.4972590774 | Program output: -133.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -84.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -107.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -36.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction print_integer} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_flush} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction -63} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_swap} {:instruction float_add} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_div} {:instruction print_float} {:instruction float_sin} {:instruction integer_swap} {:instruction float_div} {:instruction float_rot})
Best program: (tag_float_302 -73 tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_dup float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_mult float_dec integer_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_sub float_dec float_div print_integer in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_flush float_dec integer_pop float_dec integer_dup_items float_dec -63 float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_stackdepth float_dec float_dup_items float_max float_swap float_add float_sub float_dec float_dec integer_mult integer_yank float_dec integer_max float_dec integer_shove float_dec float_frominteger integer_dup_items integer_max float_dec float_dec integer_swap integer_min float_dec integer_yank float_dec float_div print_float float_sin float_dec integer_yank integer_fromfloat float_div print_float float_sin integer_swap float_div float_rot)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 19.0 2 49.2265 8 33.3881 9 9.0 2 11.1166 11 1.9788 11 44.0 2 19.0486 10 6.8134 11 5.0067 8 9.0 2 14.0 2 27.0 2 21.1147 11 5.6828 11 0.0142 8 9.0 2 0.9512 9 38.0 2 19.8721 8 31.0 2]
Total: 618.245
Mean: 12.3649
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4276.959753999999
Median total errors in population: 1447.9450000000002
Error averages by case: (239.474593800001 11.361 123.01419379999973 10.137 140.97724039999875 11.095 227.00135300000153 10.916 135.50126359999985 4.717 158.6015856999999 9.915 148.89103639999956 10.377 116.65915909999987 4.008 200.82199180000015 10.528 162.26629589999968 11.232 160.71198790000022 4.705 237.79890330000018 10.782 128.34158629999956 10.893 242.12920019999945 10.456 127.62151560000005 4.026 120.54414069999987 4.059 137.52633949999995 4.679 177.82538440000056 10.557 133.53124239999946 11.276 127.48439209999992 9.652 136.00204730000002 4.243 168.94184570000013 10.623 164.30722420000012 5.109 201.8891875000001 10.455 148.8210434000001 4.474)
Error minima by case: (0.0449 1 0.202 2 0.0037 7 0.1133 1 0.0918 1 4.8224 2 1.9744 8 0.0 0 0.1166 1 0.0212 7 6.1653 1 0.6826 2 0.1443 1 0.0067 1 0.0 0 0.0 0 1.0 1 0.4509 1 0.3172 2 0.0142 1 6.0 1 0.0488 1 1.3063 1 0.5478 1 1.7615 1)
Average genome size in population (length): 169.505
Average program size in population (points): 170.505
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 213.6829702753826
Average age in population: 211.3770574788368
Median age in population: 211.8420533686915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.685
Error (vector) diversity:			 0.707
Behavioral diversity:				 0.708
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 443762057
--- Timings ---
Current time: 1529615658810 milliseconds
Total Time:         684.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.7 seconds, 31.1%
Fitness Testing:    375.1 seconds, 54.8%
Report:              96.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 60082.778200000066
Test mean error for best: 30.04139
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_min float_rot in2 float_add float_dup_items float_add 73 float_inc integer_shove float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_mod integer_stackdepth in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec float_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec integer_inc integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 18.0 2 49.2265 8 33.3881 9 10.0 1 11.1166 11 1.9788 11 43.0 2 19.0486 10 6.8134 11 5.0067 8 10.0 1 15.0 2 28.0 2 21.1147 11 5.6828 11 0.0142 8 8.0 2 0.9512 9 37.0 2 19.8721 8 30.0 1]
Total: 614.245
Mean: 12.2849
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 3960.0972590000015
Median total errors in population: 1384.0101
Error averages by case: (222.6104207000011 11.414 113.33308829999983 10.119 129.01704859999893 11.058 209.34971200000143 10.945 128.14508539999977 4.614 143.8946669000005 9.917 135.73243809999914 10.368 109.73647879999986 3.934 183.95953740000002 10.624 141.40632729999962 11.208 153.11780600000023 4.606 221.93220140000022 10.712 113.33036629999943 10.896 226.13232129999983 10.341 116.8391404 3.816 110.65688699999987 3.998 126.38886749999993 4.515 168.30605330000083 10.648 124.96116429999944 11.226 113.24521039999982 9.668 125.44248669999999 4.006 151.9497927999998 10.569 154.13511720000002 4.926 185.32985279999988 10.48 142.14118810000005 4.396)
Error minima by case: (1.233 2 0.0837 7 0.8973 7 0.0786 2 0.0721 1 7.091 1 2.8896 8 0.0 0 0.0067 1 0.0212 8 6.5441 1 1.2286 2 0.0602 1 0.0067 2 0.0 0 0.0 0 2.5609 1 0.8948 1 0.1506 6 0.0142 1 5.0 1 0.0488 1 0.5441 1 0.1175 2 6.4559 1)
Average genome size in population (length): 169.061
Average program size in population (points): 170.061
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 215.0111373871535
Average age in population: 212.8934817949873
Median age in population: 213.1303673011228
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.682
Error (vector) diversity:			 0.705
Behavioral diversity:				 0.706
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 447988632
--- Timings ---
Current time: 1529615664416 milliseconds
Total Time:         690.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.2 seconds, 31.0%
Fitness Testing:    378.4 seconds, 54.8%
Report:              97.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 60082.778200000066
Test mean error for best: 30.04139
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.0395902955
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 123.2253791824
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 64.3766557619 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 173.8640757481
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 185.0791814972
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 40.2982788262 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 28.7394428247 
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 57.3073683447 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_add} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_min float_rot in2 float_add float_dup_items float_add 73 float_inc integer_shove float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_mod integer_stackdepth in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dup_items float_div integer_add float_dec float_div float_dec float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec float_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec integer_inc integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.6706 11 2.3103 8 20.1972 10 13.8532 10 18.0 2 49.2265 8 33.3881 9 10.0 1 11.1166 11 1.9788 11 43.0 2 19.0486 10 6.8134 11 5.0067 8 10.0 1 15.0 2 28.0 2 21.1147 11 5.6828 11 0.0142 8 8.0 2 0.9512 9 37.0 2 19.8721 8 30.0 1]
Total: 614.245
Mean: 12.2849
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4021.7406493999997
Median total errors in population: 1141.5207500000001
Error averages by case: (230.3649511000016 11.37 111.75637989999969 9.991 126.27248559999872 10.993 216.51317450000184 10.914 130.00286149999988 4.564 146.25944020000003 9.894 135.90930659999933 10.328 111.32722209999987 3.985 193.6539580000004 10.589 137.86777479999964 11.147 154.00255340000018 4.546 227.11867890000073 10.62 113.94149309999949 10.897 228.14037439999967 10.162 119.59482220000002 3.737 112.70175039999985 3.912 130.5180654 4.348 172.72581720000133 10.64 121.81551949999914 11.203 110.50008949999985 9.639 128.87424929999997 3.92 160.40552280000037 10.536 155.91159110000007 4.727 195.5349206000003 10.425 142.5736473 4.367)
Error minima by case: (1.233 2 0.0837 2 0.1972 8 0.1133 1 0.0918 1 0.5242 2 2.2123 7 0.0 0 0.5217 1 0.0212 1 11.155 1 0.2286 2 0.0635 1 0.0067 2 0.0 0 0.0 0 0.4391 1 0.5491 1 0.0515 2 0.0142 1 1.0 1 0.0488 2 9.9061 1 0.1175 2 1.9588 1)
Average genome size in population (length): 169.098
Average program size in population (points): 170.098
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 216.5118786901308
Average age in population: 213.7183718505204
Median age in population: 214.3913148316919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.971
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.971
Total error diversity:				 0.666
Error (vector) diversity:			 0.685
Behavioral diversity:				 0.686
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 452216257
--- Timings ---
Current time: 1529615669976 milliseconds
Total Time:         695.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.7 seconds, 31.0%
Fitness Testing:    381.7 seconds, 54.9%
Report:              98.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 56666.88470000007
Test mean error for best: 28.33344
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 118.2329408411
Correct output: 17.2828270025  | Program output: 16.9725706585 
Correct output: 23.1304489589  | Program output: 4.9332343275  
Correct output: 137.0785591646 | Program output: 124.9696183291
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -10.9154443106
Correct output: 17.1520909798  | Program output: -14.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 69.7989348719 
Correct output: 52.2037920383  | Program output: 56.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 172.4433983919
Correct output: -19.1443327626 | Program output: -10.3308971017
Correct output: 180.0725301747 | Program output: 182.9575603494
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 47.2254516245 
Correct output: 38.5197606199  | Program output: 46.2025961771 
Correct output: -4.0857969085  | Program output: -2.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 36.389038989  
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 63.1714767834 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_mult} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max float_mult integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec integer_max float_dec float_div float_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [33.4773 11 0.3103 8 18.1972 11 12.1089 12 28.0 2 51.2265 9 31.3881 9 0.0 0 5.6943 10 3.9788 11 53.0 2 17.6279 10 8.8134 11 2.885 9 0.0 0 5.0 1 18.0 2 14.1875 6 7.6828 11 1.9858 9 18.0 2 8.6008 10 47.0 3 14.008 9 40.0 1]
Total: 610.1726
Mean: 12.203452
Genome size: 163
Size: 164
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4081.9218299999975
Median total errors in population: 1507.8582000000001
Error averages by case: (226.6091698000016 11.356 125.00530079999967 10.151 134.89819319999884 11.015 214.09982380000176 10.942 127.35226179999988 4.695 152.4751789 9.967 142.8868147999994 10.387 109.97995759999988 4.149 189.68577490000035 10.6 154.60224330000014 11.2 152.32946360000025 4.651 224.03349540000067 10.682 121.06821669999967 10.938 227.3949725999998 10.318 119.4802401999999 4.192 112.30499149999984 4.078 129.27621719999993 4.661 174.35760550000097 10.703 138.09316359999914 11.24 126.04632069999974 9.659 125.70203939999992 4.213 159.41463840000034 10.512 154.56043640000016 4.945 189.08708480000027 10.402 141.0092251 4.513)
Error minima by case: (0.733 2 0.3103 6 0.1109 8 0.3509 1 0.0918 1 0.0927 2 0.7877 6 0.0 0 0.2157 1 0.0212 6 25.8115 1 0.6279 2 0.0635 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.4509 2 0.2555 7 0.0095 1 3.0 1 0.0223 2 32.0 1 0.1279 1 13.0845 1)
Average genome size in population (length): 169.847
Average program size in population (points): 170.847
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 217.5386474631316
Average age in population: 214.7915212130827
Median age in population: 215.6807303428611
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.973
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.973
Total error diversity:				 0.666
Error (vector) diversity:			 0.694
Behavioral diversity:				 0.697
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 456462557
--- Timings ---
Current time: 1529615675584 milliseconds
Total Time:         701.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.1 seconds, 30.9%
Fitness Testing:    385.1 seconds, 54.9%
Report:              99.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 55751.40870000004
Test mean error for best: 27.87570
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2329408411
Correct output: 17.2828270025  | Program output: 17.9725706585 
Correct output: 23.1304489589  | Program output: 5.9332343275  
Correct output: 137.0785591646 | Program output: 125.9696183291
Correct output: -36.0917810332 | Program output: -15.0917810332
Correct output: -62.1419485102 | Program output: -9.9154443106 
Correct output: 17.1520909798  | Program output: -13.2360037974
Correct output: -9.6087899132  | Program output: -16.6087899132
Correct output: 75.493217436   | Program output: 70.7989348719 
Correct output: 52.2037920383  | Program output: 57.182615816  
Correct output: -79.8347132576 | Program output: -33.8347132576
Correct output: 154.815449196  | Program output: 173.4433983919
Correct output: -19.1443327626 | Program output: -9.3308971017 
Correct output: 180.0725301747 | Program output: 183.9575603494
Correct output: -128.3399358578 | Program output: -135.3399358578
Correct output: -20.7768369154 | Program output: -32.7768369154
Correct output: -106.4972590774 | Program output: -131.4972590774
Correct output: 61.4129516245  | Program output: 48.2254516245 
Correct output: 38.5197606199  | Program output: 47.2025961771 
Correct output: -4.0857969085  | Program output: -1.0999958613 
Correct output: -93.8538349059 | Program output: -82.8538349059
Correct output: 27.7882694945  | Program output: 37.389038989  
Correct output: -145.332361916 | Program output: -105.332361916
Correct output: 77.1794883917  | Program output: 64.1714767834 
Correct output: -67.6536129502 | Program output: -34.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec integer_inc integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [32.4773 11 0.6897 7 17.1972 11 11.1089 12 21.0 2 52.2265 9 30.3881 9 7.0 2 4.6943 9 4.9788 11 46.0 2 18.6279 10 9.8134 11 3.885 9 7.0 2 12.0 2 25.0 2 13.1875 6 8.6828 11 2.9858 9 11.0 2 9.6008 9 40.0 1 13.008 9 33.0 2]
Total: 605.552
Mean: 12.11104
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4140.1586959999995
Median total errors in population: 1434.4609500000001
Error averages by case: (234.35487250000122 11.287 123.44881079999986 10.086 135.95006769999912 11.087 222.83564190000143 10.915 130.95440280000005 4.332 153.34394699999976 9.845 141.68006249999934 10.338 114.39432069999991 3.89 193.66788970000013 10.492 151.95757259999988 11.179 153.34598150000016 4.267 231.14519550000043 10.605 120.52938289999963 10.801 236.33719929999972 10.235 120.90769780000008 3.761 116.36658399999992 3.762 132.85053849999997 4.185 178.96585960000093 10.585 135.05596389999948 11.275 120.87121279999987 9.552 128.16664509999995 3.835 162.77407700000023 10.458 156.04406230000006 4.378 196.2935052000004 10.332 142.25720239999995 4.178)
Error minima by case: (0.3163 2 0.3103 3 0.264 7 0.7235 2 0.0087 1 5.1598 1 0.2123 7 0.0 0 0.1166 1 0.0212 1 6.8347 1 2.6826 2 0.1866 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.906 1 0.3172 3 0.0142 1 5.0 1 0.0488 1 0.6889 1 0.7991 1 2.4495 1)
Average genome size in population (length): 170.663
Average program size in population (points): 171.663
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 218.9109169857046
Average age in population: 216.5082835186501
Median age in population: 216.964048514118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.966
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.966
Total error diversity:				 0.681
Error (vector) diversity:			 0.714
Behavioral diversity:				 0.715
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 460729282
--- Timings ---
Current time: 1529615681224 milliseconds
Total Time:         707.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.5 seconds, 30.9%
Fitness Testing:    388.4 seconds, 54.9%
Report:             100.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 56743.40870000004
Test mean error for best: 28.37170
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 119.2329408411
Correct output: 17.2828270025  | Program output: 17.9725706585 
Correct output: 23.1304489589  | Program output: 5.9332343275  
Correct output: 137.0785591646 | Program output: 125.9696183291
Correct output: -36.0917810332 | Program output: -8.0917810332 
Correct output: -62.1419485102 | Program output: -9.9154443106 
Correct output: 17.1520909798  | Program output: -13.2360037974
Correct output: -9.6087899132  | Program output: -9.6087899132 
Correct output: 75.493217436   | Program output: 70.7989348719 
Correct output: 52.2037920383  | Program output: 57.182615816  
Correct output: -79.8347132576 | Program output: -26.8347132576
Correct output: 154.815449196  | Program output: 173.4433983919
Correct output: -19.1443327626 | Program output: -9.3308971017 
Correct output: 180.0725301747 | Program output: 183.9575603494
Correct output: -128.3399358578 | Program output: -128.3399358578
Correct output: -20.7768369154 | Program output: -25.7768369154
Correct output: -106.4972590774 | Program output: -124.4972590774
Correct output: 61.4129516245  | Program output: 48.2254516245 
Correct output: 38.5197606199  | Program output: 47.2025961771 
Correct output: -4.0857969085  | Program output: -1.0999958613 
Correct output: -93.8538349059 | Program output: -75.8538349059
Correct output: 27.7882694945  | Program output: 37.389038989  
Correct output: -145.332361916 | Program output: -98.332361916 
Correct output: 77.1794883917  | Program output: 64.1714767834 
Correct output: -67.6536129502 | Program output: -27.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div integer_dup_items in2 integer_yankdup float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [32.4773 11 0.6897 7 17.1972 11 11.1089 12 28.0 2 52.2265 9 30.3881 9 0.0 0 4.6943 9 4.9788 11 53.0 2 18.6279 10 9.8134 11 3.885 9 0.0 0 5.0 1 18.0 2 13.1875 6 8.6828 11 2.9858 9 18.0 2 9.6008 9 47.0 3 13.008 9 40.0 1]
Total: 608.552
Mean: 12.17104
Genome size: 160
Size: 161
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4224.091196999998
Median total errors in population: 1227.0647000000001
Error averages by case: (229.93426470000128 11.227 124.52063099999958 10.147 139.5046892999988 11.108 216.63184160000154 10.853 142.02571919999988 4.496 155.46605379999983 9.914 146.53880119999954 10.448 126.95950749999993 4.124 188.66507060000026 10.477 156.7306007000001 11.251 164.53688810000023 4.491 224.75635400000053 10.612 124.4156848999996 10.95 229.5412555999996 10.17 133.2445068 4.138 128.1821751999998 4.011 144.83737959999993 4.521 173.8490635000008 10.428 135.8966679999991 11.268 123.22342050000005 9.67 138.5977646999999 4.104 156.37944299999998 10.491 165.58154170000012 4.64 192.64746570000025 10.216 153.31540610000002 4.354)
Error minima by case: (0.5246 2 0.3103 3 0.1576 7 0.3378 1 0.0918 1 0.3026 1 0.2123 7 0.0 0 0.2022 1 0.0212 6 1.6952 1 0.3721 2 0.0173 1 0.0067 2 0.0 0 0.0 0 0.311 1 0.1147 1 0.3172 3 0.0067 2 2.0 1 0.0488 1 7.6952 1 0.4519 1 5.3464 1)
Average genome size in population (length): 170.799
Average program size in population (points): 171.799
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 220.3166402188782
Average age in population: 217.0737649947066
Median age in population: 218.1919914725458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.687
Error (vector) diversity:			 0.721
Behavioral diversity:				 0.722
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 464999357
--- Timings ---
Current time: 1529615686840 milliseconds
Total Time:         712.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.9 seconds, 30.9%
Fitness Testing:    391.7 seconds, 55.0%
Report:             100.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 55278.108500000075
Test mean error for best: 27.63905
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 115.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 121.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 66.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 169.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 179.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 44.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 33.389038989  
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 60.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [36.4773 11 3.3103 8 21.1972 11 15.1089 12 18.0 2 48.2265 9 34.3881 8 10.0 1 8.6943 10 0.9788 11 43.0 2 14.6279 10 5.8134 11 0.115 10 10.0 1 15.0 2 28.0 2 17.1875 6 4.6828 11 1.0142 9 8.0 2 5.6008 10 37.0 2 17.008 9 30.0 1]
Total: 604.431
Mean: 12.08862
Genome size: 180
Size: 181
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4538.8785099
Median total errors in population: 1474.5864000000001
Error averages by case: (241.24255890000137 11.308 133.85256759999973 10.119 153.1607521999987 11.13 228.1983810000012 11.017 150.39553489999997 4.809 172.3470695999991 9.943 161.81054630000017 10.414 136.99951430000002 4.499 203.67301270000044 10.49 163.95568899999984 11.257 173.8213077000002 4.833 238.31950570000046 10.699 141.51336450000048 11.012 241.67904429999993 10.26 145.4841288999999 4.716 138.81629289999987 4.43 155.7244400999999 5.03 193.73746310000112 10.47 143.04401889999988 11.24 143.95883879999988 9.732 149.0650894999999 4.499 172.85758960000007 10.539 176.60433730000025 4.998 203.28353110000035 10.336 162.81593100000003 4.738)
Error minima by case: (1.1283 2 0.0154 6 0.1982 7 0.1468 1 0.0918 1 8.3172 2 1.2123 8 0.0 0 0.6943 1 0.0212 7 6.8347 1 0.6279 2 0.1443 1 0.0067 2 0.0 0 0.0 0 1.7468 1 1.8853 2 0.3172 8 0.0142 1 1.0 1 0.0488 2 25.8343 1 2.2438 2 5.3464 1)
Average genome size in population (length): 172.141
Average program size in population (points): 173.141
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 221.2431991584957
Average age in population: 219.2977122636083
Median age in population: 219.5775416386353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.69
Error (vector) diversity:			 0.723
Behavioral diversity:				 0.724
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 469303132
--- Timings ---
Current time: 1529615692508 milliseconds
Total Time:         718.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       221.4 seconds, 30.8%
Fitness Testing:    395.0 seconds, 55.0%
Report:             101.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 55511.68910000006
Test mean error for best: 27.75584
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 117.2329408411
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 123.9696183291
Correct output: -36.0917810332 | Program output: -16.0917810332
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -17.6087899132
Correct output: 75.493217436   | Program output: 68.7989348719 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -34.8347132576
Correct output: 154.815449196  | Program output: 171.4433983919
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 181.9575603494
Correct output: -128.3399358578 | Program output: -136.3399358578
Correct output: -20.7768369154 | Program output: -33.7768369154
Correct output: -106.4972590774 | Program output: -132.4972590774
Correct output: 61.4129516245  | Program output: 46.2254516245 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -83.8538349059
Correct output: 27.7882694945  | Program output: 35.389038989  
Correct output: -145.332361916 | Program output: -106.332361916
Correct output: 77.1794883917  | Program output: 62.1714767834 
Correct output: -67.6536129502 | Program output: -35.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_sub} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_min float_rot in2 float_add float_dup_items float_add 73 float_inc integer_shove float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_rot float_yankdup float_yankdup integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_yank float_dec integer_dup_items float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_stackdepth float_dec float_dup_items float_max float_dec integer_max float_sub float_dec integer_stackdepth float_dec float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank float_dec)
Errors: [34.4773 11 1.3103 8 19.1972 10 13.1089 12 20.0 1 50.2265 9 32.3881 9 8.0 2 6.6943 10 2.9788 11 45.0 2 16.6279 10 7.8134 11 1.885 9 8.0 2 13.0 2 26.0 2 15.1875 6 6.6828 11 0.9858 9 10.0 1 7.6008 10 39.0 2 15.008 9 32.0 2]
Total: 604.1726
Mean: 12.083452
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4119.180776899999
Median total errors in population: 1371.0689
Error averages by case: (219.30667420000083 11.218 121.91489279999956 10.059 137.80675819999877 11.104 204.54202490000094 11.026 137.41379109999997 4.418 154.9662163000001 9.838 144.6265972999996 10.348 123.46342609999991 4.133 181.01263950000003 10.352 150.83919539999988 11.183 161.04249430000016 4.483 216.42556020000006 10.617 123.40442629999951 10.865 217.43763379999976 10.17 130.96890300000013 4.292 126.05596079999987 4.075 142.14400089999992 4.61 175.59395800000084 10.174 131.0886291999993 11.221 121.16282070000001 9.529 134.7085605999999 4.15 160.5937105999998 10.517 162.46429410000022 4.66 182.74155079999994 10.182 149.81805780000002 4.414)
Error minima by case: (0.3163 2 0.2872 3 0.0631 8 0.089 2 0.0918 1 3.0224 2 0.2123 5 0.0 0 0.3944 1 0.0212 1 5.8347 1 1.2286 2 0.0108 1 0.0067 1 0.0 0 0.0 0 0.0 0 1.8853 2 0.0528 3 0.0142 1 0.0 0 0.0488 1 29.0 1 0.2545 1 5.3464 1)
Average genome size in population (length): 172.774
Average program size in population (points): 173.774
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 222.7199290296899
Average age in population: 219.9349640750624
Median age in population: 220.8677895467846
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.727
Error (vector) diversity:			 0.753
Behavioral diversity:				 0.755
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 473622573
--- Timings ---
Current time: 1529615698196 milliseconds
Total Time:         724.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.8 seconds, 30.8%
Fitness Testing:    398.5 seconds, 55.0%
Report:             102.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 55321.873100000055
Test mean error for best: 27.66094
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 122.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 67.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 170.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 180.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 45.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 34.389038989  
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 61.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_sub} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction integer_yank} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max float_max integer_shove float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_mod integer_stackdepth in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec float_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_sub float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div integer_yank in2 float_dup_items float_dec integer_inc integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.4773 11 2.3103 8 20.1972 10 14.1089 12 18.0 2 49.2265 8 33.3881 9 10.0 1 7.6943 10 1.9788 11 43.0 2 15.6279 10 6.8134 11 0.885 8 10.0 1 15.0 2 28.0 2 16.1875 6 5.6828 11 0.0142 8 8.0 2 6.6008 10 37.0 2 16.008 9 30.0 1]
Total: 598.201
Mean: 11.96402
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4317.092491099999
Median total errors in population: 1482.1831499999998
Error averages by case: (245.09464200000087 11.29 124.96990239999974 10.166 141.44641499999904 11.175 232.68964550000067 11.149 134.82221269999994 4.456 160.06846279999954 9.951 150.22450519999995 10.397 120.93439749999986 4.212 201.75356710000054 10.461 161.8712953000002 11.224 158.01798280000025 4.438 241.3768511000004 10.639 128.82031829999966 10.967 246.91430260000013 10.327 126.6098654000001 4.152 123.03784689999986 4.062 138.37468469999996 4.433 193.52560010000053 10.044 138.7398890999997 11.304 126.56382550000002 9.689 131.09486149999995 3.974 173.19455809999963 10.562 158.2660109000001 4.53 203.5824262000004 10.307 146.84642240000008 4.343)
Error minima by case: (0.3707 2 0.1284 2 0.1109 8 0.2765 1 0.0918 1 8.8562 2 0.2123 6 0.0 0 0.4913 1 0.0212 7 0.9376 1 0.1435 2 0.1443 1 0.0067 1 0.0 0 0.0 0 0.0 0 0.1147 1 0.3172 3 0.0142 1 0.0 0 0.0488 1 6.9376 1 0.3205 2 5.3464 1)
Average genome size in population (length): 173.02
Average program size in population (points): 174.02
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 224.2979218741196
Average age in population: 221.4447121096183
Median age in population: 222.1724901703398
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.751
Error (vector) diversity:			 0.777
Behavioral diversity:				 0.778
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 477948098
--- Timings ---
Current time: 1529615703915 milliseconds
Total Time:         729.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.2 seconds, 30.7%
Fitness Testing:    401.9 seconds, 55.1%
Report:             103.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 55321.873100000055
Test mean error for best: 27.66094
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 122.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 67.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 170.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 180.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 45.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 34.389038989  
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 61.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction tagged_426} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction tag_integer_845} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup integer_pop in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup tagged_426 integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec tag_integer_845 float_dec in2 float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.4773 11 2.3103 8 20.1972 10 14.1089 12 18.0 2 49.2265 8 33.3881 9 10.0 1 7.6943 10 1.9788 11 43.0 2 15.6279 10 6.8134 11 0.885 8 10.0 1 15.0 2 28.0 2 16.1875 6 5.6828 11 0.0142 8 8.0 2 6.6008 10 37.0 2 16.008 9 30.0 1]
Total: 598.201
Mean: 11.96402
Genome size: 182
Size: 183
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4479.372031899999
Median total errors in population: 1488.6120500000002
Error averages by case: (248.0612918000004 11.133 135.7676921999999 10.084 158.18604919999885 11.156 234.69607220000063 11.129 136.93316919999992 4.532 175.64235299999885 9.989 166.83521320000065 10.388 123.16597449999986 4.255 205.93461310000032 10.282 170.20253130000006 11.242 161.53529460000033 4.485 245.80858849999973 10.576 145.03731300000032 10.967 249.84845340000047 10.291 130.65450330000004 4.35 125.79477629999975 4.112 141.22332969999988 4.623 196.7331116000002 9.648 145.22710309999985 11.232 144.65676559999991 9.72 134.93716769999995 4.052 172.90142839999905 10.515 163.10211990000025 4.717 207.98139990000044 10.254 150.32371720000006 4.45)
Error minima by case: (9.267 2 0.0837 2 0.5102 8 0.7235 2 0.0918 1 5.729 2 0.2123 8 0.0 0 0.0744 1 0.0212 2 1.0574 1 0.7814 2 0.1285 1 0.0067 2 0.0 0 0.0 0 0.0 0 0.4328 1 0.3172 2 0.0142 1 0.0 0 0.0128 1 0.8022 1 0.6934 1 5.955 1)
Average genome size in population (length): 171.832
Average program size in population (points): 172.832
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 225.469756401836
Average age in population: 220.8157503021548
Median age in population: 223.5246193053261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.759
Error (vector) diversity:			 0.784
Behavioral diversity:				 0.786
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 482243973
--- Timings ---
Current time: 1529615709557 milliseconds
Total Time:         735.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.7 seconds, 30.7%
Fitness Testing:    405.2 seconds, 55.1%
Report:             104.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 55321.873100000055
Test mean error for best: 27.66094
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 122.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 67.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 170.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 180.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 45.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 34.389038989  
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 61.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items})
Best program: (tag_float_295 -73 in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_dup float_yankdup float_mod integer_mod integer_stackdepth in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items integer_stackdepth integer_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec integer_stackdepth float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot float_dec float_sub float_sub float_dec integer_max float_dec integer_inc float_sub integer_dup_items float_dec integer_yank float_dec float_div print_float float_dup_items integer_inc float_sub float_dec float_dec float_div integer_dup_items)
Errors: [35.4773 11 2.3103 8 20.1972 10 14.1089 12 18.0 2 49.2265 8 33.3881 9 10.0 1 7.6943 10 1.9788 11 43.0 2 15.6279 10 6.8134 11 0.885 8 10.0 1 15.0 2 28.0 2 16.1875 6 5.6828 11 0.0142 8 8.0 2 6.6008 10 37.0 2 16.008 9 30.0 1]
Total: 598.201
Mean: 11.96402
Genome size: 189
Size: 190
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4565.783854600001
Median total errors in population: 1495.9317499999997
Error averages by case: (246.43627220000002 11.153 145.59223760000017 10.233 164.86694059999894 11.226 233.8835085000001 11.326 140.65084499999992 4.778 182.37478509999926 10.04 171.91931689999987 10.457 126.68245319999984 4.508 202.82413850000054 10.222 182.79590870000007 11.266 164.4148577000002 4.697 244.02936639999956 10.643 153.68318190000014 10.943 249.36395430000022 10.349 134.2245024 4.509 128.67539339999985 4.306 144.74720589999993 4.833 195.02869790000003 9.463 153.72921089999986 11.264 152.89491359999997 9.739 138.57291279999995 4.211 175.08727289999922 10.652 166.3739441 4.922 202.67128310000038 10.335 153.52675100000002 4.659)
Error minima by case: (0.3707 2 0.0837 3 0.1304 8 1.1089 1 0.0918 1 1.1776 1 0.0839 7 0.0 0 0.2022 1 0.0212 1 5.9902 1 0.3721 2 0.0746 1 0.0067 2 0.0 0 0.0 0 1.0 1 0.413 1 0.1839 3 0.0067 1 0.0 0 0.009 1 0.0098 1 0.7455 1 5.3464 1)
Average genome size in population (length): 172.756
Average program size in population (points): 173.756
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 226.9072651672865
Average age in population: 223.2731370177216
Median age in population: 224.84532298187
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.746
Error (vector) diversity:			 0.78
Behavioral diversity:				 0.781
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 486562948
--- Timings ---
Current time: 1529615715336 milliseconds
Total Time:         741.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.1 seconds, 30.6%
Fitness Testing:    408.6 seconds, 55.1%
Report:             105.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 55840.604300000035
Test mean error for best: 27.92030
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 121.2329408411
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 127.9696183291
Correct output: -36.0917810332 | Program output: -13.0917810332
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -14.6087899132
Correct output: 75.493217436   | Program output: 72.7989348719 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -31.8347132576
Correct output: 154.815449196  | Program output: 175.4433983919
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 185.9575603494
Correct output: -128.3399358578 | Program output: -133.3399358578
Correct output: -20.7768369154 | Program output: -30.7768369154
Correct output: -106.4972590774 | Program output: -129.4972590774
Correct output: 61.4129516245  | Program output: 50.2254516245 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -80.8538349059
Correct output: 27.7882694945  | Program output: 39.389038989  
Correct output: -145.332361916 | Program output: -103.332361916
Correct output: 77.1794883917  | Program output: 66.1714767834 
Correct output: -67.6536129502 | Program output: -32.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction float_inc} {:instruction float_dec} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup float_yankdup float_mod integer_rot float_yankdup float_yankdup integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_yank float_dec float_dup_items float_max float_div in2 in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec float_inc float_dec integer_inc float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank float_dec)
Errors: [30.4773 10 1.3103 8 19.1972 10 9.1089 11 23.0 2 50.2265 9 32.3881 9 5.0 2 2.6943 9 2.9788 11 48.0 2 20.6279 9 7.8134 11 5.885 9 5.0 2 10.0 1 23.0 2 11.1875 6 6.6828 11 0.9858 9 13.0 2 11.6008 10 42.0 2 11.008 9 35.0 2]
Total: 596.1726
Mean: 11.923452
Genome size: 181
Size: 182
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4420.193610300001
Median total errors in population: 1396.30955
Error averages by case: (234.47470409999983 11.265 138.2823809999998 10.143 158.71949959999907 11.135 220.37105550000004 11.454 142.90268779999997 4.474 175.78590339999968 10.049 167.20324610000003 10.45 128.60611759999992 4.2 191.57491800000054 10.267 172.74083699999994 11.219 166.11272880000007 4.443 231.37344109999992 10.64 146.17494010000024 11.084 233.99715330000026 10.451 134.87354380000005 4.368 130.82269529999994 4.02 146.19858069999992 4.623 185.6221812000003 9.222 144.53523659999988 11.245 143.9841995999999 9.833 139.64899609999992 4.23 164.44580999999943 10.644 166.6129335000002 4.692 191.15432130000056 10.362 155.07449880000007 4.388)
Error minima by case: (1.3707 2 0.0797 2 0.1109 7 0.7235 2 0.0918 1 8.608 2 0.1622 6 0.0 0 0.1341 1 0.0212 8 3.9426 1 0.0231 2 0.1694 1 0.0067 2 0.0 0 0.0 0 2.0 1 0.4161 2 0.2264 3 0.0142 1 0.0 0 0.0488 1 16.5484 1 0.1264 2 9.5484 1)
Average genome size in population (length): 173.739
Average program size in population (points): 174.739
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 227.9738987638397
Average age in population: 225.2439596192053
Median age in population: 226.1735589662448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.749
Error (vector) diversity:			 0.791
Behavioral diversity:				 0.792
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 490906473
--- Timings ---
Current time: 1529615720954 milliseconds
Total Time:         746.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.5 seconds, 30.6%
Fitness Testing:    411.9 seconds, 55.2%
Report:             106.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 55321.873100000055
Test mean error for best: 27.66094
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 116.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 122.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 67.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 170.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 180.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 45.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 34.389038989  
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 61.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_rot} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_mult} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_min float_rot in2 float_add float_dup_items float_add 73 float_inc integer_shove float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_rot integer_min float_yankdup integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_mult float_dec float_sub float_dec float_dec float_dec float_dup_items float_div float_dec float_add float_dec float_sub float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec integer_inc integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [35.4773 11 2.3103 8 20.1972 10 14.1089 12 18.0 2 49.2265 8 33.3881 9 10.0 1 7.6943 10 1.9788 11 43.0 2 15.6279 10 6.8134 11 0.885 8 10.0 1 15.0 2 28.0 2 16.1875 6 5.6828 11 0.0142 8 8.0 2 6.6008 10 37.0 2 16.008 9 30.0 1]
Total: 598.201
Mean: 11.96402
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4112.962229899998
Median total errors in population: 1497.6149
Error averages by case: (224.26256769999972 11.108 119.09063219999977 10.192 146.07455459999906 11.178 212.60055110000008 11.403 129.80059960000006 4.398 160.63985119999978 9.98 152.0500998999998 10.495 115.30851949999992 4.128 177.42624480000055 10.09 164.0086767000003 11.246 153.26561620000012 4.281 222.20273439999974 10.481 132.7018013999998 10.878 228.0181023000009 10.284 123.58107960000014 4.275 117.7120586999999 3.912 134.99337509999998 4.463 173.94155500000014 8.931 129.8432506999994 11.255 132.4289556999998 9.715 127.67656329999993 4.054 152.26622819999955 10.654 155.39776280000007 4.519 179.28959820000037 10.298 141.89425100000003 4.269)
Error minima by case: (5.392 2 0.303 7 0.2048 8 0.089 2 0.0918 1 6.0412 1 0.1537 8 0.0 0 0.5801 1 0.0212 7 6.1653 1 0.6279 2 0.0781 1 0.0067 2 0.0 0 0.0 0 2.0 1 0.8125 1 0.3121 6 0.0142 1 1.0 1 0.0488 1 9.955 1 0.992 1 2.955 1)
Average genome size in population (length): 174.459
Average program size in population (points): 175.459
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 229.3381191400725
Average age in population: 225.1507938669455
Median age in population: 227.4463626185613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.764
Error (vector) diversity:			 0.801
Behavioral diversity:				 0.802
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 495267948
--- Timings ---
Current time: 1529615726632 milliseconds
Total Time:         752.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.0 seconds, 30.6%
Fitness Testing:    415.3 seconds, 55.2%
Report:             107.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 55310.54530000003
Test mean error for best: 27.65527
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 126.9696183291
Correct output: -36.0917810332 | Program output: -17.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -18.6087899132
Correct output: 75.493217436   | Program output: 71.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -35.8347132576
Correct output: 154.815449196  | Program output: 174.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 184.9575603494
Correct output: -128.3399358578 | Program output: -137.3399358578
Correct output: -20.7768369154 | Program output: -34.7768369154
Correct output: -106.4972590774 | Program output: -133.4972590774
Correct output: 61.4129516245  | Program output: 49.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -84.8538349059
Correct output: 27.7882694945  | Program output: 38.389038989  
Correct output: -145.332361916 | Program output: -107.332361916
Correct output: 77.1794883917  | Program output: 65.1714767834 
Correct output: -67.6536129502 | Program output: -36.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_sub} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_frominteger} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction tag_float_329} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_yankdup float_max integer_min float_rot in2 float_add float_dup_items float_add 73 float_inc integer_shove float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup float_mod integer_rot float_yankdup float_yankdup integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec integer_max integer_inc float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add integer_dup_items float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_stackdepth float_dec float_dup_items float_max float_dec integer_max float_sub float_dec integer_stackdepth float_dec float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_frominteger in2 in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add tag_float_329 float_tan float_rot)
Errors: [31.4773 11 2.3103 8 20.1972 10 10.1089 12 19.0 2 49.2265 8 33.3881 9 9.0 2 3.6943 9 1.9788 11 44.0 2 19.6279 9 6.8134 11 4.885 9 9.0 2 14.0 2 27.0 2 12.1875 6 5.6828 11 0.0142 8 9.0 2 10.6008 10 38.0 2 12.008 9 31.0 2]
Total: 593.201
Mean: 11.86402
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4748.179184799999
Median total errors in population: 1489.3831500000001
Error averages by case: (251.60198019999973 11.019 144.8215225 10.382 165.64002939999884 11.209 239.75438039999935 11.343 157.03500909999994 4.782 180.03372139999948 10.006 175.9433211000001 10.575 143.09419389999996 4.555 209.49276130000047 10.118 182.72134910000025 11.263 180.14827060000022 4.704 251.51549629999914 10.476 153.65270280000027 10.888 254.15259510000038 10.287 152.4153133 4.698 145.50550179999996 4.365 162.4473215999998 4.878 191.3002195999999 8.872 155.96168269999998 11.318 149.89739329999986 9.741 155.44823049999994 4.422 172.4082515999991 10.59 181.54804760000027 4.878 212.05064880000054 10.325 169.2052407999999 4.69)
Error minima by case: (3.1928 2 0.303 3 0.4279 6 0.601 2 0.0087 1 3.6696 1 0.2123 8 0.0 0 0.0744 1 0.0212 2 22.1592 1 0.1342 2 0.0567 1 0.0525 2 0.0 0 0.0 0 0.0 0 0.2893 1 0.3172 3 0.0142 1 2.0 1 0.2066 1 20.0272 1 0.1264 1 13.0272 1)
Average genome size in population (length): 175.626
Average program size in population (points): 176.626
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 230.6856181682216
Average age in population: 224.8773985460048
Median age in population: 228.7604353987671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.765
Error (vector) diversity:			 0.803
Behavioral diversity:				 0.805
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 499658623
--- Timings ---
Current time: 1529615732562 milliseconds
Total Time:         758.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.4 seconds, 30.5%
Fitness Testing:    418.9 seconds, 55.2%
Report:             107.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 55310.54530000003
Test mean error for best: 27.65527
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 120.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 126.9696183291
Correct output: -36.0917810332 | Program output: -17.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -18.6087899132
Correct output: 75.493217436   | Program output: 71.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -35.8347132576
Correct output: 154.815449196  | Program output: 174.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 184.9575603494
Correct output: -128.3399358578 | Program output: -137.3399358578
Correct output: -20.7768369154 | Program output: -34.7768369154
Correct output: -106.4972590774 | Program output: -133.4972590774
Correct output: 61.4129516245  | Program output: 49.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -84.8538349059
Correct output: 27.7882694945  | Program output: 38.389038989  
Correct output: -145.332361916 | Program output: -107.332361916
Correct output: 77.1794883917  | Program output: 65.1714767834 
Correct output: -67.6536129502 | Program output: -36.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction -28} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_min} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction tag_integer_693} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_max} {:instruction float_sub} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_frominteger} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction tag_float_329} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc -28 -88.88749634878776 float_max integer_shove float_yankdup float_max integer_min float_rot in2 float_add float_dup_items float_add 73 float_inc integer_shove float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup float_add integer_shove float_inc float_yankdup tag_integer_693 integer_rot float_yankdup float_yankdup integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec integer_max integer_inc float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add integer_dup_items float_dec float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_stackdepth float_dec float_dup_items float_max float_dec integer_max float_sub float_dec integer_stackdepth float_dec float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_frominteger in2 in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add tag_float_329 float_tan float_rot)
Errors: [31.4773 11 2.3103 8 20.1972 10 10.1089 12 19.0 2 49.2265 8 33.3881 9 9.0 2 3.6943 9 1.9788 11 44.0 2 19.6279 9 6.8134 11 4.885 9 9.0 2 14.0 2 27.0 2 12.1875 6 5.6828 11 0.0142 8 9.0 2 10.6008 10 38.0 2 12.008 9 31.0 2]
Total: 593.201
Mean: 11.86402
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4488.488753700001
Median total errors in population: 1473.11585
Error averages by case: (247.69170229999952 11.063 132.99100259999975 10.323 161.29524639999875 11.263 235.85874289999953 11.374 137.4554657 4.509 176.4551683999992 9.973 168.25532830000017 10.555 124.16203239999987 4.301 203.4754919000006 10.061 179.3223481999999 11.263 160.7132991000001 4.381 246.14773219999947 10.431 148.72234780000022 10.896 250.7340107000005 10.34 130.81629260000008 4.391 126.7731835999999 4.089 142.26120549999993 4.585 197.52197399999994 8.877 144.99886189999975 11.363 146.758168 9.73 134.08727809999993 4.118 169.33206139999928 10.612 161.5971046000002 4.63 203.8925210000003 10.237 149.4281841 4.377)
Error minima by case: (3.392 1 0.202 7 1.264 7 0.601 1 0.0918 1 5.3551 2 0.2123 6 0.0 0 0.1077 1 0.0212 8 6.1653 1 0.2805 2 0.0827 1 0.0212 2 0.0 0 0.0 0 0.0 0 0.3303 1 0.291 6 0.0038 1 1.0 1 0.0488 1 11.1048 1 0.1508 1 3.2751 1)
Average genome size in population (length): 176.477
Average program size in population (points): 177.477
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 232.1121228852984
Average age in population: 224.1096193632297
Median age in population: 230.1069487670673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.762
Error (vector) diversity:			 0.796
Behavioral diversity:				 0.799
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 504070214
--- Timings ---
Current time: 1529615738545 milliseconds
Total Time:         764.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.9 seconds, 30.5%
Fitness Testing:    422.4 seconds, 55.3%
Report:             108.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 55731.95370000001
Test mean error for best: 27.86598
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 128.9696183291
Correct output: -36.0917810332 | Program output: -13.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -14.6087899132
Correct output: 75.493217436   | Program output: 73.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -31.8347132576
Correct output: 154.815449196  | Program output: 176.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 186.9575603494
Correct output: -128.3399358578 | Program output: -133.3399358578
Correct output: -20.7768369154 | Program output: -30.7768369154
Correct output: -106.4972590774 | Program output: -129.4972590774
Correct output: 61.4129516245  | Program output: 51.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -80.8538349059
Correct output: 27.7882694945  | Program output: 40.389038989  
Correct output: -145.332361916 | Program output: -103.332361916
Correct output: 77.1794883917  | Program output: 67.1714767834 
Correct output: -67.6536129502 | Program output: -32.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction integer_add} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction integer_swap} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_add} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float})
Best program: (tag_float_302 -73 tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max float_yankdup float_max integer_dec integer_add in2 float_add float_dup_items float_add 73 float_inc integer_swap float_dup_items float_add 73 float_inc float_shove float_add float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_sub integer_dup_times integer_shove float_dup_items float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec integer_inc integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float)
Errors: [29.4773 11 2.3103 8 20.1972 10 8.1089 12 23.0 2 49.2265 8 33.3881 9 5.0 2 1.6943 9 1.9788 11 48.0 2 21.6279 10 6.8134 11 6.885 9 5.0 2 10.0 1 23.0 2 10.1875 5 5.6828 11 0.0142 8 13.0 2 12.6008 10 42.0 2 10.008 8 35.0 2]
Total: 591.201
Mean: 11.82402
Genome size: 177
Size: 178
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4729.688103699999
Median total errors in population: 1485.7195500000003
Error averages by case: (252.34253219999948 11.215 144.6535442000001 10.29 169.46022589999868 11.286 239.31873099999925 11.526 149.75892519999996 4.851 185.52764679999942 10.14 180.67768960000046 10.558 137.13779829999996 4.678 210.86553500000073 10.19 182.56737320000025 11.331 173.2392177000002 4.81 246.45468209999888 10.533 156.7584491000005 11.06 251.2062877000008 10.423 146.07815039999986 4.843 139.80312679999994 4.486 156.21249079999976 4.984 202.03654409999993 8.875 158.98424549999996 11.379 155.4922581000002 9.831 148.3018367000001 4.485 180.0581969999988 10.755 175.76433020000016 5.002 212.07879660000063 10.351 162.25348949999997 4.774)
Error minima by case: (1.392 2 0.3103 7 1.264 7 0.089 1 0.0918 1 2.3551 1 0.0682 7 0.0 0 0.1744 1 0.0212 8 6.1653 1 0.0231 2 0.0172 1 0.0212 2 0.0 0 0.0 0 0.0 0 1.1875 1 0.0308 7 0.0142 1 0.517 1 0.2501 1 10.6125 1 1.008 1 0.3464 1)
Average genome size in population (length): 176.7
Average program size in population (points): 177.7
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 233.2562063595478
Average age in population: 222.8515500710327
Median age in population: 231.417715259928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.978
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.978
Total error diversity:				 0.747
Error (vector) diversity:			 0.781
Behavioral diversity:				 0.784
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 508487655
--- Timings ---
Current time: 1529615744347 milliseconds
Total Time:         770.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.4 seconds, 30.4%
Fitness Testing:    425.9 seconds, 55.3%
Report:             109.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 55330.755100000024
Test mean error for best: 27.66538
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 122.2329408411
Correct output: 17.2828270025  | Program output: 16.9725706585 
Correct output: 23.1304489589  | Program output: 4.9332343275  
Correct output: 137.0785591646 | Program output: 128.9696183291
Correct output: -36.0917810332 | Program output: -20.0917810332
Correct output: -62.1419485102 | Program output: -10.9154443106
Correct output: 17.1520909798  | Program output: -14.2360037974
Correct output: -9.6087899132  | Program output: -21.6087899132
Correct output: 75.493217436   | Program output: 73.7989348719 
Correct output: 52.2037920383  | Program output: 56.182615816  
Correct output: -79.8347132576 | Program output: -38.8347132576
Correct output: 154.815449196  | Program output: 176.4433983919
Correct output: -19.1443327626 | Program output: -10.3308971017
Correct output: 180.0725301747 | Program output: 186.9575603494
Correct output: -128.3399358578 | Program output: -140.3399358578
Correct output: -20.7768369154 | Program output: -37.7768369154
Correct output: -106.4972590774 | Program output: -136.4972590774
Correct output: 61.4129516245  | Program output: 51.2254516245 
Correct output: 38.5197606199  | Program output: 46.2025961771 
Correct output: -4.0857969085  | Program output: -2.0999958613 
Correct output: -93.8538349059 | Program output: -87.8538349059
Correct output: 27.7882694945  | Program output: 40.389038989  
Correct output: -145.332361916 | Program output: -110.332361916
Correct output: 77.1794883917  | Program output: 67.1714767834 
Correct output: -67.6536129502 | Program output: -39.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup_items} {:instruction float_rot} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction 43} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup_items float_rot integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_fromfloat float_rot integer_div in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec 43 integer_dup_items float_dec float_dec float_dec float_dec integer_stackdepth integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [29.4773 11 0.3103 8 18.1972 11 8.1089 12 16.0 2 51.2265 9 31.3881 9 12.0 2 1.6943 9 3.9788 11 41.0 2 21.6279 10 8.8134 11 6.885 9 12.0 2 17.0 2 30.0 1 10.1875 5 7.6828 11 1.9858 9 6.0 2 12.6008 10 35.0 2 10.008 8 28.0 2]
Total: 591.1726
Mean: 11.823452
Genome size: 184
Size: 185
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4904.789034699999
Median total errors in population: 1493.0609
Error averages by case: (248.62760869999966 11.165 156.18071190000018 10.299 182.4257982999985 11.369 237.1743373999994 11.503 157.60483399999995 4.73 197.06976879999905 10.124 190.7724541000006 10.595 144.7723498000001 4.516 211.72419810000048 10.179 213.53887750000044 11.386 179.7934100000002 4.629 245.63357189999945 10.581 168.27036430000075 11.029 248.6055040000011 10.424 151.78076319999997 4.647 146.88239959999999 4.317 162.64958169999989 4.798 203.65691399999977 8.981 172.498095 11.449 169.27241280000013 9.863 154.61116430000004 4.328 186.3949487999991 10.745 181.5107159000002 4.814 212.12501410000056 10.356 169.77623649999992 4.61)
Error minima by case: (2.5663 1 0.0837 7 0.1109 8 0.089 2 0.0918 1 9.7582 1 0.9318 8 0.0 0 0.0744 1 0.0212 7 6.8347 1 0.2805 2 0.0948 1 0.0525 2 0.0 0 0.0 0 0.0 0 0.8877 1 0.0308 6 0.0142 1 0.0 0 0.0536 1 12.0046 1 0.0879 1 4.5353 1)
Average genome size in population (length): 176.733
Average program size in population (points): 177.733
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 234.446204067328
Average age in population: 224.6819889955663
Median age in population: 232.7103557733241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.753
Error (vector) diversity:			 0.805
Behavioral diversity:				 0.809
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 512906080
--- Timings ---
Current time: 1529615750090 milliseconds
Total Time:         775.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.9 seconds, 30.4%
Fitness Testing:    429.3 seconds, 55.3%
Report:             110.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 55201.97330000004
Test mean error for best: 27.60099
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.2329408411
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 132.9696183291
Correct output: -36.0917810332 | Program output: -17.0917810332
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -18.6087899132
Correct output: 75.493217436   | Program output: 77.7989348719 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -35.8347132576
Correct output: 154.815449196  | Program output: 180.4433983919
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 190.9575603494
Correct output: -128.3399358578 | Program output: -137.3399358578
Correct output: -20.7768369154 | Program output: -34.7768369154
Correct output: -106.4972590774 | Program output: -133.4972590774
Correct output: 61.4129516245  | Program output: 55.2254516245 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -84.8538349059
Correct output: 27.7882694945  | Program output: 44.389038989  
Correct output: -145.332361916 | Program output: -107.332361916
Correct output: 77.1794883917  | Program output: 71.1714767834 
Correct output: -67.6536129502 | Program output: -36.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_max} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction integer_yankdup})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_dec float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items integer_yankdup float_add float_max float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_frominteger integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_sub integer_sub float_dec float_dec integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec float_frominteger float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec integer_max float_dec float_dec float_div float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan integer_yankdup)
Errors: [25.4773 11 4.3103 8 22.1972 11 4.1089 11 19.0 2 47.2265 9 35.3881 9 9.0 2 2.3057 9 0.0212 10 44.0 2 25.6279 10 4.8134 11 10.885 9 9.0 2 14.0 2 27.0 2 6.1875 6 3.6828 11 2.0142 9 9.0 2 16.6008 10 38.0 2 6.008 8 31.0 2]
Total: 586.8548000000001
Mean: 11.737096
Genome size: 176
Size: 177
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 4557.516257700002
Median total errors in population: 1478.7954
Error averages by case: (240.10886669999962 11.317 137.5656647999999 10.332 162.69739809999854 11.351 226.99956059999934 11.623 144.26424149999983 4.71 181.02969589999887 10.157 171.71130180000046 10.556 131.61886149999987 4.518 197.47270770000048 10.186 182.5288685 11.368 167.3658497000003 4.655 237.96817299999896 10.61 150.4294606000006 11.159 242.36224230000082 10.555 139.61619220000003 4.611 133.87969149999978 4.321 150.75694609999985 4.781 200.6890827999999 8.916 148.9687252 11.444 149.53518660000012 9.914 142.43620929999992 4.289 178.0611026999984 10.86 169.82808500000024 4.859 200.83202310000044 10.382 156.68112049999993 4.635)
Error minima by case: (1.8081 2 0.0765 7 0.3921 8 0.0443 2 0.0918 1 0.4621 1 0.2123 7 0.0 0 0.3057 1 0.0212 7 5.0052 1 0.1065 2 0.1866 1 0.0525 2 0.0 0 0.0 0 0.0 0 0.1123 1 0.3172 7 0.0142 1 0.0 0 0.1647 1 12.4449 1 0.6593 1 7.1759 1)
Average genome size in population (length): 177.6
Average program size in population (points): 178.6
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 236.0347175635424
Average age in population: 227.231106174031
Median age in population: 234.0128909798313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.757
Error (vector) diversity:			 0.811
Behavioral diversity:				 0.815
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 517345955
--- Timings ---
Current time: 1529615755773 milliseconds
Total Time:         781.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.3 seconds, 30.4%
Fitness Testing:    432.7 seconds, 55.4%
Report:             111.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 55033.00090000004
Test mean error for best: 27.51650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -21.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -22.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -39.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -141.3399358578
Correct output: -20.7768369154 | Program output: -38.7768369154
Correct output: -106.4972590774 | Program output: -137.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -88.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -111.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -40.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_mod} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_mod float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max float_max integer_dec float_yankdup -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 15.0 2 48.2265 9 34.3881 8 13.0 2 1.3057 9 0.9788 11 40.0 1 24.6279 10 5.8134 11 9.885 9 13.0 2 18.0 2 31.0 2 7.1875 6 4.6828 11 1.0142 9 5.0 2 15.6008 10 34.0 2 7.008 8 27.0 2]
Total: 581.8124
Mean: 11.636248
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4466.133516899999
Median total errors in population: 1414.7920499999998
Error averages by case: (238.65180929999966 11.072 136.4212429999998 10.145 158.6708493999987 11.215 227.57116489999947 11.429 142.47104009999995 4.523 175.6123674999991 9.916 165.50093070000045 10.42 130.4178811999999 4.345 198.99390480000054 9.959 168.65378770000027 11.251 165.79173960000008 4.54 236.42740039999924 10.377 144.87942630000023 10.932 242.18336780000095 10.316 136.95998100000003 4.403 133.12354629999984 4.24 148.57120459999993 4.629 185.94328820000004 8.743 142.73691789999964 11.284 143.81749439999996 9.703 139.45815309999995 4.128 173.39843729999845 10.659 166.69211940000005 4.679 200.87141820000036 10.17 154.76604380000003 4.47)
Error minima by case: (0.8072 2 0.0765 3 0.1109 7 0.0464 2 0.003 1 6.2569 1 0.2123 7 0.0 0 0.3057 1 0.0045 6 6.1653 1 0.1435 2 0.0399 1 0.0511 2 0.0 0 0.0 0 3.0 1 0.1307 2 0.3172 7 0.0142 1 1.0 1 0.3992 1 25.1254 1 0.7692 1 4.0392 1)
Average genome size in population (length): 177.821
Average program size in population (points): 178.821
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 237.4220345186471
Average age in population: 229.6959558540214
Median age in population: 235.360932208487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.747
Error (vector) diversity:			 0.807
Behavioral diversity:				 0.808
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 521791505
--- Timings ---
Current time: 1529615761624 milliseconds
Total Time:         787.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.8 seconds, 30.3%
Fitness Testing:    436.2 seconds, 55.4%
Report:             112.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 55033.00090000004
Test mean error for best: 27.51650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -21.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -22.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -39.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -141.3399358578
Correct output: -20.7768369154 | Program output: -38.7768369154
Correct output: -106.4972590774 | Program output: -137.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -88.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -111.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -40.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_mod} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_mod float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max float_max integer_dec float_yankdup -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 15.0 2 48.2265 9 34.3881 8 13.0 2 1.3057 9 0.9788 11 40.0 1 24.6279 10 5.8134 11 9.885 9 13.0 2 18.0 2 31.0 2 7.1875 6 4.6828 11 1.0142 9 5.0 2 15.6008 10 34.0 2 7.008 8 27.0 2]
Total: 581.8124
Mean: 11.636248
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4836.774932600001
Median total errors in population: 1489.1057999999998
Error averages by case: (242.7207212999994 11.126 148.27850679999983 10.299 171.26972789999868 11.315 229.91986129999964 11.458 163.81362069999983 5.023 188.5393875999991 10.069 180.40719450000074 10.534 153.0879879 4.798 203.66430940000035 9.993 189.5211405000005 11.367 186.63037150000028 5.034 242.99648029999918 10.524 159.1701288000005 11.055 246.68312420000112 10.399 160.57739869999997 4.91 155.18985669999995 4.766 171.4107640999998 5.13 198.60386740000004 8.902 157.29848540000006 11.393 161.18761260000016 9.815 161.64551430000003 4.512 180.77469259999873 10.643 188.71315000000027 5.085 205.50668170000048 10.214 175.83534639999993 4.965)
Error minima by case: (0.392 1 0.0765 7 0.2382 8 0.089 1 0.0918 1 0.1598 2 1.1521 7 0.0 0 0.1744 1 0.0212 7 1.8347 1 0.1435 2 0.1443 1 0.115 2 0.0 0 0.0 0 0.218 1 0.0127 2 0.3172 3 0.0135 1 0.0 0 0.1131 1 1.8897 1 0.1593 2 5.3464 1)
Average genome size in population (length): 177.533
Average program size in population (points): 178.533
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 238.8861161323021
Average age in population: 229.8677976995397
Median age in population: 236.7162036943162
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.761
Error (vector) diversity:			 0.821
Behavioral diversity:				 0.824
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 526229905
--- Timings ---
Current time: 1529615767529 milliseconds
Total Time:         793.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.2 seconds, 30.3%
Fitness Testing:    439.6 seconds, 55.4%
Report:             113.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 55033.00090000004
Test mean error for best: 27.51650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -21.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -22.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -39.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -141.3399358578
Correct output: -20.7768369154 | Program output: -38.7768369154
Correct output: -106.4972590774 | Program output: -137.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -88.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -111.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -40.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div integer_yankdup integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 15.0 2 48.2265 9 34.3881 8 13.0 2 1.3057 9 0.9788 11 40.0 1 24.6279 10 5.8134 11 9.885 9 13.0 2 18.0 2 31.0 2 7.1875 6 4.6828 11 1.0142 9 5.0 2 15.6008 10 34.0 2 7.008 8 27.0 2]
Total: 581.8124
Mean: 11.636248
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4604.0996454
Median total errors in population: 1485.1311
Error averages by case: (241.96560349999953 11.184 141.67644769999987 10.313 173.14148759999853 11.313 230.41194099999976 11.418 141.36089900000005 4.574 188.61766239999932 10.112 179.6770852000006 10.482 129.3668322999999 4.346 198.7086447000002 9.981 194.31042730000019 11.297 164.06734730000014 4.515 240.38364379999942 10.527 160.19441090000032 10.997 246.60049890000096 10.474 137.31972800000003 4.445 131.48781469999992 4.258 149.01194699999985 4.626 201.22302989999991 9.0 152.67445959999972 11.35 160.89657969999996 9.835 138.96204179999998 4.168 174.05472239999915 10.748 166.31100590000017 4.693 199.29226660000052 10.242 153.03111819999995 4.454)
Error minima by case: (1.8851 2 0.0765 2 0.0148 7 0.1089 1 0.0918 1 6.3551 2 0.0839 7 0.0 0 0.1182 1 0.0212 2 2.9426 1 0.1435 2 0.1285 1 0.115 1 0.0 0 0.0 0 1.0 1 0.5233 1 0.3172 3 0.0142 1 0.0 0 0.2742 1 0.0305 1 0.0544 1 18.0 1)
Average genome size in population (length): 177.534
Average program size in population (points): 178.534
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 240.1911584683137
Average age in population: 230.8801401197085
Median age in population: 237.9681998366845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.976
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.976
Total error diversity:				 0.766
Error (vector) diversity:			 0.822
Behavioral diversity:				 0.824
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 530668255
--- Timings ---
Current time: 1529615773238 milliseconds
Total Time:         799.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       241.6 seconds, 30.2%
Fitness Testing:    443.1 seconds, 55.5%
Report:             114.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 55033.00090000004
Test mean error for best: 27.51650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -21.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -22.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -39.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -141.3399358578
Correct output: -20.7768369154 | Program output: -38.7768369154
Correct output: -106.4972590774 | Program output: -137.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -88.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -111.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -40.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_shove} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_shove float_max float_max float_max integer_dec float_yankdup -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 15.0 2 48.2265 9 34.3881 8 13.0 2 1.3057 9 0.9788 11 40.0 1 24.6279 10 5.8134 11 9.885 9 13.0 2 18.0 2 31.0 2 7.1875 6 4.6828 11 1.0142 9 5.0 2 15.6008 10 34.0 2 7.008 8 27.0 2]
Total: 581.8124
Mean: 11.636248
Genome size: 197
Size: 198
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4593.0632011
Median total errors in population: 1513.0
Error averages by case: (251.9393513999999 11.177 133.9795591999999 10.385 161.7365148999988 11.328 240.08643549999945 11.456 141.5415582999999 4.853 175.29215709999932 10.119 168.8026667000003 10.489 131.54872789999988 4.663 208.31773730000035 10.052 177.72037869999983 11.304 165.2571461000002 4.842 252.2463416999992 10.637 147.04959700000026 11.037 258.35126490000107 10.53 139.0151232 4.818 133.98317489999982 4.574 149.95131289999983 4.986 197.55697890000002 9.034 145.51489339999975 11.4 146.29306070000027 9.839 139.00584039999995 4.455 184.87619059999867 10.767 166.9207578000002 5.026 209.1176404000006 10.296 154.10979120000002 4.782)
Error minima by case: (0.733 2 0.0837 7 0.425 7 0.8443 2 0.0365 1 0.0972 2 2.1521 7 0.0 0 0.1077 1 0.0212 7 3.992 1 0.0231 2 0.1443 1 0.115 2 0.0 0 0.0 0 0.8563 1 1.2981 1 0.3172 8 0.0142 1 1.0 1 0.2742 1 2.008 1 0.0165 1 4.7025 1)
Average genome size in population (length): 179.732
Average program size in population (points): 180.732
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 241.354605880702
Average age in population: 234.5121878541632
Median age in population: 239.3064624233996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.773
Error (vector) diversity:			 0.821
Behavioral diversity:				 0.823
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 535161655
--- Timings ---
Current time: 1529615779252 milliseconds
Total Time:         804.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.1 seconds, 30.2%
Fitness Testing:    446.6 seconds, 55.5%
Report:             115.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 55017.893900000025
Test mean error for best: 27.50895
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 124.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 130.9696183291
Correct output: -36.0917810332 | Program output: -24.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -25.6087899132
Correct output: 75.493217436   | Program output: 75.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -42.8347132576
Correct output: 154.815449196  | Program output: 178.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 188.9575603494
Correct output: -128.3399358578 | Program output: -144.3399358578
Correct output: -20.7768369154 | Program output: -41.7768369154
Correct output: -106.4972590774 | Program output: -140.4972590774
Correct output: 61.4129516245  | Program output: 53.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -91.8538349059
Correct output: 27.7882694945  | Program output: 42.389038989  
Correct output: -145.332361916 | Program output: -114.332361916
Correct output: 77.1794883917  | Program output: 69.1714767834 
Correct output: -67.6536129502 | Program output: -43.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction tag_float_241} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction integer_add} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_dup} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_swap} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_mod in1 tag_float_241 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_mod float_inc integer_div integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 integer_add integer_shove float_yankdup float_max float_max integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add integer_dup float_inc float_shove integer_mult integer_dup integer_swap in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup integer_dup_times integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_frominteger float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [27.4773 11 2.3103 8 20.1972 10 6.1089 11 12.0 2 49.2265 8 33.3881 9 16.0 2 0.3057 8 1.9788 11 37.0 2 23.6279 10 6.8134 11 8.885 9 16.0 2 21.0 2 34.0 2 8.1875 6 5.6828 11 0.0142 8 2.0 1 14.6008 10 31.0 2 8.008 9 24.0 2]
Total: 576.8124
Mean: 11.536248
Genome size: 194
Size: 195
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4974.8408652
Median total errors in population: 1496.97315
Error averages by case: (259.33401019999974 11.433 156.02223680000017 10.399 177.46195149999858 11.342 246.4818027999995 11.662 157.77667849999997 5.096 194.13957429999869 10.34 185.36902830000105 10.55 149.16097010000001 4.878 217.3684907000001 10.203 199.9917524999999 11.365 180.9730716000004 5.093 261.9293870999988 10.826 164.3798211000009 11.215 263.4687416000012 10.729 158.18872230000002 5.117 151.42388239999994 4.884 168.2153957999997 5.263 211.32804089999988 9.238 167.5062659000002 11.386 163.02427170000024 10.005 157.03718480000006 4.66 192.74448299999838 10.856 184.47690110000036 5.21 219.5431240000003 10.486 170.23607619999984 5.023)
Error minima by case: (1.1919 2 0.202 2 0.264 7 0.089 2 0.0918 1 7.6622 2 0.0839 7 0.0 0 0.1182 1 0.0212 7 5.1653 1 0.0231 2 0.0384 1 0.115 2 0.0 0 0.0 0 0.0 0 0.1875 1 0.3172 2 0.0142 1 1.0 1 0.3367 2 20.0153 1 0.008 1 4.3464 1)
Average genome size in population (length): 179.835
Average program size in population (points): 180.835
Average percent parens in population: 0.006
Minimum age in population: 0.0
Maximum age in population: 243.039276246328
Average age in population: 233.8169798210444
Median age in population: 240.5433393001489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.775
Error (vector) diversity:			 0.819
Behavioral diversity:				 0.822
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 539657380
--- Timings ---
Current time: 1529615785032 milliseconds
Total Time:         810.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.5 seconds, 30.2%
Fitness Testing:    450.1 seconds, 55.5%
Report:             116.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 54953.00090000004
Test mean error for best: 27.47650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec})
Best program: (tag_float_295 -73 tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max integer_dec integer_yankdup integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dup_items float_dec in2 float_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_dup_items integer_rot float_add float_dec float_sub integer_inc float_dec integer_max float_dec float_frominteger float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec float_dec integer_yank float_dec float_div print_float integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 8.0 2 48.2265 9 34.3881 8 20.0 1 1.3057 9 0.9788 11 33.0 2 24.6279 10 5.8134 11 9.885 9 20.0 1 25.0 2 38.0 2 7.1875 6 4.6828 11 1.0142 9 2.0 1 15.6008 10 27.0 2 7.008 8 20.0 1]
Total: 575.8124
Mean: 11.516248
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4766.370656899998
Median total errors in population: 1502.0
Error averages by case: (254.63824259999973 11.236 145.9024497000001 10.334 173.0062814999988 11.277 242.42269349999953 11.477 142.3834658999999 4.842 190.984355599999 10.243 181.76882560000064 10.481 133.4624157 4.646 213.54904370000034 10.111 191.7023613000001 11.281 165.83943180000017 4.849 256.548423299999 10.656 161.29821080000067 11.074 259.0682499000011 10.561 141.92614700000001 4.887 136.3515832 4.692 152.75646329999987 4.989 215.64026849999993 9.134 156.60848169999997 11.346 163.17658710000023 9.899 140.34395520000004 4.402 195.32268289999845 10.743 168.0777080000001 4.944 215.4043697000004 10.408 154.93095939999995 4.745)
Error minima by case: (9.444 2 0.0154 2 0.1949 7 0.7617 2 0.0918 1 9.1598 1 0.1521 6 0.0 0 0.1744 1 0.0212 8 6.1653 1 0.0231 2 0.1145 1 0.115 2 0.0 0 0.0 0 2.0 1 0.1875 1 0.3172 2 0.0121 1 1.0 1 0.277 1 0.8897 1 0.008 1 4.4958 1)
Average genome size in population (length): 177.987
Average program size in population (points): 178.987
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 244.1206241215603
Average age in population: 230.4831739746647
Median age in population: 241.8164474824232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.984
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.984
Total error diversity:				 0.782
Error (vector) diversity:			 0.837
Behavioral diversity:				 0.841
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 544107180
--- Timings ---
Current time: 1529615790876 milliseconds
Total Time:         816.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.1 seconds, 30.1%
Fitness Testing:    453.5 seconds, 55.5%
Report:             116.9 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 54953.00090000004
Test mean error for best: 27.47650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_add} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec})
Best program: (tag_float_295 -73 tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_max integer_dec integer_yankdup integer_dec float_rot in2 float_add float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add float_add 73 float_inc float_shove integer_mult integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dup_items float_dec in2 float_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_dup_items integer_rot float_add float_dec float_sub integer_inc float_dec integer_max float_dec float_frominteger float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec float_dec integer_yank float_dec float_div print_float integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 8.0 2 48.2265 9 34.3881 8 20.0 1 1.3057 9 0.9788 11 33.0 2 24.6279 10 5.8134 11 9.885 9 20.0 1 25.0 2 38.0 2 7.1875 6 4.6828 11 1.0142 9 2.0 1 15.6008 10 27.0 2 7.008 8 20.0 1]
Total: 575.8124
Mean: 11.516248
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4715.897752700001
Median total errors in population: 1489.5320000000002
Error averages by case: (244.39710929999956 11.123 145.4852172 10.352 168.89772369999875 11.206 232.27689349999912 11.356 152.82500059999998 4.747 183.59164989999914 10.097 175.3485496000007 10.468 145.25870849999998 4.545 204.89576979999998 9.92 187.4724780999998 11.232 175.84378500000028 4.715 246.947073299999 10.549 154.86513300000047 10.965 249.9859104000015 10.399 152.5452852000001 4.739 147.97123639999987 4.591 163.82445179999988 4.858 186.0516122 8.92 153.89948549999997 11.306 154.50394680000042 9.77 150.24168369999992 4.327 182.1510652999982 10.657 177.90728970000035 4.791 203.2984801000004 10.176 164.94921409999998 4.654)
Error minima by case: (1.608 2 0.3103 7 0.0844 7 0.089 1 0.0918 1 4.1598 1 0.3442 8 0.0 0 0.1182 1 0.0212 8 5.0574 1 0.0231 1 0.0013 1 0.01 2 0.0 0 0.0 0 0.0 0 0.1875 1 0.3172 6 0.0104 1 0.0 0 0.304 1 25.0 1 0.008 1 5.3464 1)
Average genome size in population (length): 179.908
Average program size in population (points): 180.908
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 245.1760681530985
Average age in population: 233.6589607550392
Median age in population: 243.1197256596824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.975
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.975
Total error diversity:				 0.779
Error (vector) diversity:			 0.83
Behavioral diversity:				 0.832
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 548604880
--- Timings ---
Current time: 1529615796833 milliseconds
Total Time:         822.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.5 seconds, 30.1%
Fitness Testing:    457.1 seconds, 55.6%
Report:             117.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 54953.00090000004
Test mean error for best: 27.47650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec})
Best program: (tag_float_295 -73 tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max integer_mod float_dup_items float_inc float_yankdup -88.88749634878776 integer_shove float_yankdup float_max float_max float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 integer_dup_times float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_rot in2 float_dup_items float_dup_items integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dup_items float_dec in2 float_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_dup_items integer_rot float_add float_dec float_sub integer_inc float_dec integer_max float_dec float_frominteger float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec float_dec integer_yank float_dec float_div print_float integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 8.0 2 48.2265 9 34.3881 8 20.0 1 1.3057 9 0.9788 11 33.0 2 24.6279 10 5.8134 11 9.885 9 20.0 1 25.0 2 38.0 2 7.1875 6 4.6828 11 1.0142 9 2.0 1 15.6008 10 27.0 2 7.008 8 20.0 1]
Total: 575.8124
Mean: 11.516248
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5085.534766000001
Median total errors in population: 1515.4994000000002
Error averages by case: (256.0814306999996 11.323 164.09458990000027 10.396 181.61726059999884 11.391 243.18723589999928 11.471 166.7150891999999 5.283 195.9434697999991 10.289 187.38965380000056 10.62 160.46191250000004 5.091 217.84333229999973 10.058 200.85102540000017 11.352 189.5373625000002 5.269 258.4364913999992 10.733 169.17100180000068 11.168 261.45958980000097 10.599 169.50723249999996 5.311 163.12572719999994 5.142 180.02722309999967 5.398 206.14010300000007 8.989 176.0456017000002 11.508 169.3535448000001 9.933 165.77399479999997 4.812 196.6033773999989 10.869 193.08515050000034 5.285 216.07453410000028 10.307 179.2158313 5.196)
Error minima by case: (3.017 2 0.2302 7 0.1109 7 0.0998 1 0.0918 1 9.178 1 0.3442 7 0.0 0 0.2413 1 8.0E-4 7 0.0574 1 0.1435 2 0.1587 1 0.0525 2 0.0 0 0.1799 1 1.9652 1 0.1875 1 0.3172 6 0.0142 1 0.0 0 0.0961 1 3.1103 1 0.008 1 5.3464 1)
Average genome size in population (length): 178.408
Average program size in population (points): 179.408
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 246.2471471456459
Average age in population: 231.5149850277797
Median age in population: 244.4677140808764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.747
Error (vector) diversity:			 0.808
Behavioral diversity:				 0.813
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 553065312
--- Timings ---
Current time: 1529615802569 milliseconds
Total Time:         828.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.9 seconds, 30.0%
Fitness Testing:    460.5 seconds, 55.6%
Report:             118.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 54953.00090000004
Test mean error for best: 27.47650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 125.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 131.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 76.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 179.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 189.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 54.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 43.389038989  
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 70.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_304} {:instruction -73} {:instruction tag_float_302} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_max} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec})
Best program: (tag_float_304 -73 tag_float_302 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec float_rot in2 integer_mod float_dup_items float_add float_max integer_mod float_dup_items float_inc float_yankdup -88.88749634878776 integer_shove float_yankdup float_max float_max float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 integer_dup_times float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_rot in2 float_dup_items float_dup_items integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_sub float_dec float_dup_items float_dec in2 float_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_rot float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_dup_items integer_rot float_add float_dec float_sub integer_inc float_dec integer_max float_dec float_frominteger float_div float_dec float_dec float_div float_dup_items float_dup_items integer_yank float_dec float_dec integer_yank float_dec float_div print_float integer_dup_items float_dec float_dup_items float_max float_dec float_add float_dec)
Errors: [26.4773 11 3.3103 8 21.1972 11 5.1089 11 8.0 2 48.2265 9 34.3881 8 20.0 1 1.3057 9 0.9788 11 33.0 2 24.6279 10 5.8134 11 9.885 9 20.0 1 25.0 2 38.0 2 7.1875 6 4.6828 11 1.0142 9 2.0 1 15.6008 10 27.0 2 7.008 8 20.0 1]
Total: 575.8124
Mean: 11.516248
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5586.491152499999
Median total errors in population: 1537.1289
Error averages by case: (288.3163629000005 11.342 178.8453498000004 10.5 196.9829738999987 11.357 276.7338932999992 11.464 181.46543149999994 5.267 212.72392939999838 10.369 203.32780760000125 10.732 175.3654229 5.05 247.45453289999958 10.135 222.02156020000018 11.358 203.51537400000026 5.238 290.07561740000057 10.768 184.3292643000014 11.198 293.7492716000011 10.706 184.01732579999972 5.464 176.7067911999999 5.14 194.18915599999954 5.54 233.9344892 9.189 191.37270110000074 11.429 182.47286200000036 9.994 179.28983400000018 4.9 220.5754509999979 10.855 207.03735950000046 5.417 250.34525820000047 10.358 192.64213279999984 5.231)
Error minima by case: (5.1919 2 0.303 3 0.0061 7 0.0998 1 0.0918 1 3.5503 1 0.9161 6 0.0 0 0.2568 2 8.0E-4 6 3.1653 1 0.1435 2 0.1866 1 0.115 1 0.0 0 0.7768 1 0.8868 1 0.0127 1 0.3172 3 0.0097 1 0.0 0 0.0128 1 8.8897 1 0.008 1 2.5865 1)
Average genome size in population (length): 177.416
Average program size in population (points): 178.416
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 247.7362971607465
Average age in population: 228.9406582346195
Median age in population: 245.6352271069924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.751
Error (vector) diversity:			 0.805
Behavioral diversity:				 0.812
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 557500812
--- Timings ---
Current time: 1529615808517 milliseconds
Total Time:         834.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.3 seconds, 30.0%
Fitness Testing:    464.0 seconds, 55.6%
Report:             119.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 54909.97330000004
Test mean error for best: 27.45499
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.2329408411
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 132.9696183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 77.7989348719 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 180.4433983919
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 190.9575603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 55.2254516245 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 44.389038989  
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 71.1714767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction -73} {:instruction float_dec} {:instruction in1} {:instruction float_rot} {:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_min} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction integer_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 -73 float_dec in1 float_rot tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup integer_pop in2 float_dup_items float_add integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec float_dec integer_max integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec integer_sub float_dec float_dup_items float_dup_items float_dec float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_stackdepth float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_min float_max float_dec float_add float_dec integer_sub float_sub float_dec integer_max float_dec float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [25.4773 11 4.3103 8 22.1972 11 4.1089 11 10.0 1 47.2265 9 35.3881 9 18.0 2 2.3057 9 0.0212 10 35.0 2 25.6279 10 4.8134 11 10.885 9 18.0 2 23.0 2 36.0 2 6.1875 6 3.6828 11 2.0142 9 0.0 0 16.6008 10 29.0 2 6.008 8 22.0 2]
Total: 574.8548000000001
Mean: 11.497096
Genome size: 185
Size: 186
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5188.288913599999
Median total errors in population: 1496.78895
Error averages by case: (265.35107789999944 11.292 167.65800660000016 10.48 191.9239309999988 11.387 252.03707199999948 11.379 162.9303457999999 4.863 206.32978789999856 10.199 198.5279879000008 10.72 157.1751516 4.692 227.74472759999955 10.085 211.7522871 11.385 185.35369580000014 4.82 264.5684049999994 10.683 178.9328074000008 11.023 270.80410400000125 10.651 164.01254989999993 5.027 160.00408679999995 4.737 175.1984698999998 5.105 221.96366269999984 9.133 183.07744330000034 11.469 177.89487860000042 9.896 159.08254270000012 4.468 202.66743999999875 10.807 186.2093651000003 5.04 227.36585660000037 10.299 175.27623039999975 4.807)
Error minima by case: (0.6057 2 0.0154 7 0.1972 7 0.089 1 0.0918 1 0.5685 1 0.1682 7 0.0 0 0.0256 1 0.0212 7 4.9573 1 0.1435 2 0.0746 1 0.115 2 0.0 0 0.0 0 2.7805 1 0.0937 1 0.3172 7 0.0142 1 0.0 0 0.0128 1 0.3324 1 0.0857 1 0.6536 1)
Average genome size in population (length): 178.718
Average program size in population (points): 179.718
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 249.1421879031849
Average age in population: 231.1260551056403
Median age in population: 246.8916224448984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.752
Error (vector) diversity:			 0.802
Behavioral diversity:				 0.807
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 561968728
--- Timings ---
Current time: 1529615814266 milliseconds
Total Time:         840.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.8 seconds, 30.0%
Fitness Testing:    467.4 seconds, 55.6%
Report:             120.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 54389.263900000034
Test mean error for best: 27.19463
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 132.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 77.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 180.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 190.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 55.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 19.6007694945 
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 71.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_mult float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_swap float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items integer_rot float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [25.4773 11 2.3103 8 20.1972 10 4.1089 11 18.0 2 49.2265 8 33.3881 9 10.0 1 2.3057 9 1.9788 11 43.0 2 25.6279 10 6.8134 11 10.885 9 10.0 1 15.0 2 28.0 2 6.1875 6 5.6828 11 0.0142 8 8.0 2 8.1875 6 37.0 2 6.008 8 30.0 1]
Total: 568.3991000000001
Mean: 11.367982
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5895.066273800001
Median total errors in population: 1544.06975
Error averages by case: (304.0367042000011 11.49 187.88450930000042 10.544 215.32244459999856 11.436 291.97439429999946 11.545 188.68226339999998 5.216 229.21392389999824 10.313 222.2320307000013 10.789 184.2006587000001 5.064 266.5030993999997 10.185 225.8608139999998 11.407 210.0692889000003 5.176 305.33913960000086 10.907 202.27609120000164 11.099 308.66543240000135 10.786 191.63030329999998 5.402 185.8832408 5.141 202.00618249999965 5.399 250.06435360000006 9.339 197.93104980000047 11.495 200.69022140000024 9.952 187.32540600000007 4.778 236.47552729999785 10.99 213.48529130000043 5.308 267.5821439 10.473 200.33175929999982 5.166)
Error minima by case: (1.3996 2 0.0605 5 0.1804 7 0.0161 1 0.0918 1 3.1419 1 0.1912 8 0.0 0 0.0256 1 0.0212 7 6.1653 1 0.1846 1 0.0976 1 0.115 1 0.0 0 0.2232 1 1.0 1 0.1875 1 0.0308 4 0.0059 1 0.0 0 0.0128 1 11.4449 1 0.008 1 2.3464 1)
Average genome size in population (length): 178.551
Average program size in population (points): 179.551
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 250.4494808617051
Average age in population: 228.4221347058507
Median age in population: 248.0036349482051
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.748
Error (vector) diversity:			 0.813
Behavioral diversity:				 0.819
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 566432278
--- Timings ---
Current time: 1529615820007 milliseconds
Total Time:         845.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.2 seconds, 29.9%
Fitness Testing:    470.9 seconds, 55.7%
Report:             121.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 54389.263900000034
Test mean error for best: 27.19463
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 126.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 132.9696183291
Correct output: -36.0917810332 | Program output: -18.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -19.6087899132
Correct output: 75.493217436   | Program output: 77.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -36.8347132576
Correct output: 154.815449196  | Program output: 180.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 190.9575603494
Correct output: -128.3399358578 | Program output: -138.3399358578
Correct output: -20.7768369154 | Program output: -35.7768369154
Correct output: -106.4972590774 | Program output: -134.4972590774
Correct output: 61.4129516245  | Program output: 55.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -85.8538349059
Correct output: 27.7882694945  | Program output: 19.6007694945 
Correct output: -145.332361916 | Program output: -108.332361916
Correct output: 77.1794883917  | Program output: 71.1714767834 
Correct output: -67.6536129502 | Program output: -37.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 72} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction float_yankdup} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot integer_dec float_yankdup float_max integer_dec float_rot in2 float_div float_dup_items float_add 72 float_inc float_yankdup float_dup_items float_add integer_mult float_inc float_shove float_max integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_rot float_yankdup integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_mult float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_swap float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items integer_rot float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [25.4773 11 2.3103 8 20.1972 10 4.1089 11 18.0 2 49.2265 8 33.3881 9 10.0 1 2.3057 9 1.9788 11 43.0 2 25.6279 10 6.8134 11 10.885 9 10.0 1 15.0 2 28.0 2 6.1875 6 5.6828 11 0.0142 8 8.0 2 8.1875 6 37.0 2 6.008 8 30.0 1]
Total: 568.3991000000001
Mean: 11.367982
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5421.2326275
Median total errors in population: 1520.2942000000003
Error averages by case: (267.94412689999996 11.391 178.80997360000057 10.514 202.02208209999858 11.41 255.68677259999933 11.579 174.70362190000006 5.322 216.4026407999984 10.386 210.17577680000142 10.727 169.8541847000002 5.148 231.11929779999946 10.154 218.9687656 11.417 196.8849400000001 5.288 269.74443279999923 10.818 188.50834110000162 11.261 273.71313430000095 10.716 179.55487599999998 5.402 172.52598930000008 5.19 189.93303739999985 5.433 232.33665690000004 9.202 186.65586750000054 11.478 188.98617220000045 10.051 174.7821757 4.863 204.49458409999812 10.921 201.00511610000032 5.317 229.99891610000057 10.406 186.7991451999999 5.228)
Error minima by case: (1.3996 2 0.2872 7 0.1109 7 0.0464 1 0.8639 1 7.8224 2 0.731 7 0.0 0 0.1182 1 0.0212 8 6.1653 1 0.1065 2 0.0602 2 0.115 2 0.0 0 0.1228 1 0.0 0 0.3623 1 0.0308 7 0.0123 1 0.0 0 0.0128 2 12.1103 1 0.0701 1 5.3464 1)
Average genome size in population (length): 177.301
Average program size in population (points): 178.301
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 251.7879166454561
Average age in population: 229.4514524945353
Median age in population: 249.1871002295046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.983
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.983
Total error diversity:				 0.76
Error (vector) diversity:			 0.813
Behavioral diversity:				 0.821
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 570864728
--- Timings ---
Current time: 1529615825815 milliseconds
Total Time:         851.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.6 seconds, 29.9%
Fitness Testing:    474.4 seconds, 55.7%
Report:             122.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 53949.95630000005
Test mean error for best: 26.97498
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.2329408411
Correct output: 17.2828270025  | Program output: 11.9725706585 
Correct output: 23.1304489589  | Program output: -0.0667656725 
Correct output: 137.0785591646 | Program output: 137.9696183291
Correct output: -36.0917810332 | Program output: -23.0917810332
Correct output: -62.1419485102 | Program output: -15.9154443106
Correct output: 17.1520909798  | Program output: -19.2360037974
Correct output: -9.6087899132  | Program output: -24.6087899132
Correct output: 75.493217436   | Program output: 82.7989348719 
Correct output: 52.2037920383  | Program output: 51.182615816  
Correct output: -79.8347132576 | Program output: -41.8347132576
Correct output: 154.815449196  | Program output: 185.4433983919
Correct output: -19.1443327626 | Program output: -15.3308971017
Correct output: 180.0725301747 | Program output: 195.9575603494
Correct output: -128.3399358578 | Program output: -143.3399358578
Correct output: -20.7768369154 | Program output: -40.7768369154
Correct output: -106.4972590774 | Program output: -139.4972590774
Correct output: 61.4129516245  | Program output: 60.2254516245 
Correct output: 38.5197606199  | Program output: 41.2025961771 
Correct output: -4.0857969085  | Program output: -7.0999958613 
Correct output: -93.8538349059 | Program output: -90.8538349059
Correct output: 27.7882694945  | Program output: 24.6007694945 
Correct output: -145.332361916 | Program output: -113.332361916
Correct output: 77.1794883917  | Program output: 76.1714767834 
Correct output: -67.6536129502 | Program output: -42.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction integer_add} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup float_dup_items integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div integer_add in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_shove float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float)
Errors: [20.4773 10 5.3103 8 23.1972 12 0.8911 10 13.0 2 46.2265 9 36.3881 9 15.0 2 7.3057 10 1.0212 11 38.0 2 30.6279 9 3.8134 11 15.885 10 15.0 2 20.0 1 33.0 2 1.1875 5 2.6828 11 3.0142 9 3.0 1 3.1875 5 32.0 2 1.008 8 25.0 2]
Total: 559.2237
Mean: 11.184474
Genome size: 196
Size: 197
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5528.577069200001
Median total errors in population: 1520.6518
Error averages by case: (288.25826820000003 11.413 173.07411220000037 10.585 197.0282050999988 11.549 276.12571179999935 11.588 176.20810560000007 5.332 210.76354429999876 10.362 204.08663220000096 10.75 172.43840480000006 5.162 249.67675769999948 10.236 211.59583610000024 11.471 198.5941973000002 5.346 291.3367685000001 10.861 183.18093100000144 11.257 292.1478697000012 10.759 179.92848489999992 5.373 174.49167459999995 5.266 190.95720329999978 5.389 235.40708130000004 9.163 185.7104705000006 11.51 181.38158690000031 10.03 174.43932779999994 4.77 222.2435899999982 10.79 200.72672450000022 5.252 250.73599830000046 10.391 188.14958259999995 5.285)
Error minima by case: (2.6057 2 0.0154 7 0.687 6 0.0464 1 0.0918 1 0.8581 1 3.2123 8 0.0 0 0.1807 1 0.0212 8 1.1456 1 0.6279 1 0.0409 1 0.115 2 0.0 0 0.7768 1 2.0 1 0.0725 1 0.0308 6 0.0067 1 0.0 0 0.3562 1 4.8544 1 0.008 1 1.2373 1)
Average genome size in population (length): 176.629
Average program size in population (points): 177.629
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 252.8490047045741
Average age in population: 229.4949701065949
Median age in population: 250.2361296096021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.765
Error (vector) diversity:			 0.813
Behavioral diversity:				 0.818
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 575280178
--- Timings ---
Current time: 1529615831523 milliseconds
Total Time:         857.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.0 seconds, 29.9%
Fitness Testing:    477.8 seconds, 55.7%
Report:             123.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 54094.892700000055
Test mean error for best: 27.04745
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.2329408411
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 138.9696183291
Correct output: -36.0917810332 | Program output: -22.0917810332
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -23.6087899132
Correct output: 75.493217436   | Program output: 83.7989348719 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -40.8347132576
Correct output: 154.815449196  | Program output: 186.4433983919
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 196.9575603494
Correct output: -128.3399358578 | Program output: -142.3399358578
Correct output: -20.7768369154 | Program output: -39.7768369154
Correct output: -106.4972590774 | Program output: -138.4972590774
Correct output: 61.4129516245  | Program output: 61.2254516245 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -89.8538349059
Correct output: 27.7882694945  | Program output: 25.6007694945 
Correct output: -145.332361916 | Program output: -112.332361916
Correct output: 77.1794883917  | Program output: 77.1714767834 
Correct output: -67.6536129502 | Program output: -41.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction integer_add} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup float_dup_items float_rot float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec integer_swap integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div integer_add in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_shove float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float)
Errors: [19.4773 11 4.3103 8 22.1972 11 1.8911 11 14.0 2 47.2265 9 35.3881 9 14.0 2 8.3057 10 0.0212 10 39.0 2 31.6279 10 4.8134 11 16.885 10 14.0 2 19.0 2 32.0 2 0.1875 4 3.6828 11 2.0142 9 4.0 2 2.1875 5 33.0 2 0.008 7 26.0 2]
Total: 559.2237
Mean: 11.184474
Genome size: 196
Size: 197
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5343.380556499999
Median total errors in population: 1487.48315
Error averages by case: (258.56604329999954 11.198 176.14924620000048 10.373 191.00194459999844 11.331 247.10349329999923 11.328 184.6206465999999 5.148 206.40154379999845 10.197 199.0780465000009 10.528 179.95756219999998 4.976 221.84202349999947 9.904 202.9633962000003 11.29 206.34836990000014 5.093 263.417831299999 10.605 178.18898980000125 11.088 266.11049960000116 10.527 188.1129546999999 5.153 182.27073410000003 5.016 199.00846029999985 5.114 210.5802814 8.97 186.46217750000065 11.36 176.95923370000037 9.865 181.75901400000006 4.599 199.06082859999827 10.535 208.11917730000013 5.002 219.90155880000043 10.111 195.0694992999999 5.016)
Error minima by case: (0.9611 1 0.0765 2 0.0295 7 0.0464 2 0.2223 1 1.5492 1 2.9318 7 0.1129 1 0.0734 1 0.0212 6 1.8357 1 0.3721 2 0.0635 1 0.115 2 0.0951 1 0.2232 1 2.0 1 0.1058 1 0.1722 2 0.0142 1 0.0 0 0.0931 1 1.7757 1 0.008 1 5.3464 1)
Average genome size in population (length): 176.651
Average program size in population (points): 177.651
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 253.6108687685481
Average age in population: 229.9131037989384
Median age in population: 251.1455430351609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.737
Error (vector) diversity:			 0.787
Behavioral diversity:				 0.79
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 579696728
--- Timings ---
Current time: 1529615837334 milliseconds
Total Time:         863.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.5 seconds, 29.8%
Fitness Testing:    481.3 seconds, 55.8%
Report:             124.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 54094.892700000055
Test mean error for best: 27.04745
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.2329408411
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 138.9696183291
Correct output: -36.0917810332 | Program output: -22.0917810332
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -23.6087899132
Correct output: 75.493217436   | Program output: 83.7989348719 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -40.8347132576
Correct output: 154.815449196  | Program output: 186.4433983919
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 196.9575603494
Correct output: -128.3399358578 | Program output: -142.3399358578
Correct output: -20.7768369154 | Program output: -39.7768369154
Correct output: -106.4972590774 | Program output: -138.4972590774
Correct output: 61.4129516245  | Program output: 61.2254516245 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -89.8538349059
Correct output: 27.7882694945  | Program output: 25.6007694945 
Correct output: -145.332361916 | Program output: -112.332361916
Correct output: 77.1794883917  | Program output: 77.1714767834 
Correct output: -67.6536129502 | Program output: -41.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction integer_swap} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction integer_add} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup float_dup_items float_rot float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec integer_swap integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec integer_stackdepth float_dec float_dup_items float_max integer_swap float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_dec integer_pop float_dec integer_yank float_dec float_dup_items float_max float_div integer_add in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_shove float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float)
Errors: [19.4773 11 4.3103 8 22.1972 11 1.8911 11 14.0 2 47.2265 9 35.3881 9 14.0 2 8.3057 10 0.0212 10 39.0 2 31.6279 10 4.8134 11 16.885 10 14.0 2 19.0 2 32.0 2 0.1875 4 3.6828 11 2.0142 9 4.0 2 2.1875 5 33.0 2 0.008 7 26.0 2]
Total: 559.2237
Mean: 11.184474
Genome size: 196
Size: 197
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5897.7476144
Median total errors in population: 1564.02
Error averages by case: (295.4650246000007 11.305 195.19778020000075 10.552 211.5042183999987 11.475 283.73070349999915 11.464 195.0620233 5.357 223.91830749999863 10.194 218.16024040000133 10.723 190.61025890000016 5.197 256.29953239999975 10.111 230.92713090000052 11.441 216.64068920000017 5.369 300.171803900001 10.755 198.2289067000011 11.063 303.2596154000015 10.676 200.9531854000001 5.443 192.04751140000008 5.291 210.91369209999982 5.43 250.27088779999983 9.194 207.0917607000004 11.518 197.86423130000014 9.875 194.278943 4.89 225.42873209999877 10.637 220.98200360000027 5.345 255.00435360000048 10.266 204.87407809999996 5.291)
Error minima by case: (0.7297 2 0.2872 7 0.1972 7 0.1089 1 0.0956 1 0.8769 1 3.1521 7 0.0 0 0.1047 1 0.0212 8 6.1653 1 0.0231 1 0.0635 1 0.0212 1 0.0 0 0.0 0 1.0 1 0.0127 1 0.0308 8 0.0142 1 0.0 0 0.1378 2 17.6676 1 0.008 1 4.3959 1)
Average genome size in population (length): 175.772
Average program size in population (points): 176.772
Average percent parens in population: 0.009
Minimum age in population: 0.0
Maximum age in population: 255.0078770793901
Average age in population: 229.0401812044519
Median age in population: 252.093329984844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.766
Error (vector) diversity:			 0.818
Behavioral diversity:				 0.824
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 584091133
--- Timings ---
Current time: 1529615843028 milliseconds
Total Time:         868.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.9 seconds, 29.8%
Fitness Testing:    484.6 seconds, 55.8%
Report:             125.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 54020.39950000006
Test mean error for best: 27.01020
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 128.2329408411
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 134.9696183291
Correct output: -36.0917810332 | Program output: -23.0917810332
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -24.6087899132
Correct output: 75.493217436   | Program output: 79.7989348719 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -41.8347132576
Correct output: 154.815449196  | Program output: 182.4433983919
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 192.9575603494
Correct output: -128.3399358578 | Program output: -143.3399358578
Correct output: -20.7768369154 | Program output: -40.7768369154
Correct output: -106.4972590774 | Program output: -139.4972590774
Correct output: 61.4129516245  | Program output: 57.2254516245 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -90.8538349059
Correct output: 27.7882694945  | Program output: 21.6007694945 
Correct output: -145.332361916 | Program output: -113.332361916
Correct output: 77.1794883917  | Program output: 73.1714767834 
Correct output: -67.6536129502 | Program output: -42.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_yank float_max float_div float_mod in2 float_dup_items float_dup_items float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec integer_inc integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec float_div print_float integer_yank integer_yank integer_max float_dec float_dec float_sub float_dec float_dec integer_yank float_dec float_div print_float)
Errors: [23.4773 11 4.3103 8 22.1972 11 2.1089 11 13.0 2 47.2265 9 35.3881 9 15.0 2 4.3057 9 0.0212 10 38.0 2 27.6279 10 4.8134 11 12.885 10 15.0 2 20.0 1 33.0 2 4.1875 6 3.6828 11 2.0142 9 3.0 1 6.1875 5 32.0 2 4.008 8 25.0 2]
Total: 562.4415000000001
Mean: 11.24883
Genome size: 199
Size: 200
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5739.229636600003
Median total errors in population: 1523.9677500000003
Error averages by case: (289.4703430000003 11.185 180.26040540000082 10.529 206.86100629999868 11.412 276.98122879999954 11.383 191.92919470000004 5.436 219.38157399999844 10.311 213.55425240000108 10.705 188.0420052000001 5.228 252.85975939999952 10.047 228.02732669999992 11.393 213.5191769000003 5.399 291.0906935999999 10.663 193.4015852000013 11.187 293.71249600000124 10.605 196.05319229999998 5.548 190.54373250000003 5.36 206.8041397999996 5.585 236.33516519999986 9.095 189.0078216000006 11.446 195.5102395000005 9.979 188.91128950000007 4.904 209.26261319999858 10.352 214.54453130000047 5.466 251.1424417000005 10.241 203.18542239999996 5.379)
Error minima by case: (2.1457 2 0.303 7 0.1972 7 0.1089 2 0.0918 1 1.217 2 0.3442 7 0.0 0 0.1047 1 0.0212 5 4.9715 1 0.8565 1 0.0436 1 0.115 2 0.0 0 0.0 0 1.0 1 0.0937 1 0.3172 7 0.005 1 0.0 0 0.0128 1 11.2948 1 0.008 1 4.2948 1)
Average genome size in population (length): 175.84
Average program size in population (points): 176.84
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 256.165969346774
Average age in population: 229.3372955905686
Median age in population: 252.8827675743786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.779
Error (vector) diversity:			 0.831
Behavioral diversity:				 0.837
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 588487083
--- Timings ---
Current time: 1529615848798 milliseconds
Total Time:         874.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.3 seconds, 29.8%
Fitness Testing:    488.1 seconds, 55.8%
Report:             126.0 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 54054.01050000005
Test mean error for best: 27.02701
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 127.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 133.9696183291
Correct output: -36.0917810332 | Program output: -25.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -26.6087899132
Correct output: 75.493217436   | Program output: 78.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -43.8347132576
Correct output: 154.815449196  | Program output: 181.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 191.9575603494
Correct output: -128.3399358578 | Program output: -145.3399358578
Correct output: -20.7768369154 | Program output: -42.7768369154
Correct output: -106.4972590774 | Program output: -141.4972590774
Correct output: 61.4129516245  | Program output: 56.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -92.8538349059
Correct output: 27.7882694945  | Program output: 20.6007694945 
Correct output: -145.332361916 | Program output: -115.332361916
Correct output: 77.1794883917  | Program output: 72.1714767834 
Correct output: -67.6536129502 | Program output: -44.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction in2} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_add} {:instruction integer_shove} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_min} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_rot} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add in2 float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add float_div float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup integer_pop in2 float_dup_items float_add integer_shove float_inc integer_pop integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec float_dec integer_max integer_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_add integer_shove float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_yank float_dec integer_dup_items float_dec float_dup_items float_dec float_dec float_dec float_rot float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup_items integer_add float_dec integer_stackdepth float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_min float_max float_dec float_add float_dec float_dec integer_max float_dec integer_inc integer_yank float_shove float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_dec integer_rot print_float integer_yank integer_yank float_stackdepth)
Errors: [24.4773 11 3.3103 8 21.1972 11 3.1089 11 11.0 2 48.2265 9 34.3881 8 17.0 2 3.3057 9 0.9788 11 36.0 2 26.6279 10 5.8134 11 11.885 10 17.0 2 22.0 2 35.0 2 5.1875 6 4.6828 11 1.0142 9 1.0 1 7.1875 5 30.0 1 5.008 8 23.0 2]
Total: 562.3991000000001
Mean: 11.247982
Genome size: 186
Size: 187
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5284.655681499999
Median total errors in population: 1473.0052999999998
Error averages by case: (273.69543569999985 11.304 163.99726110000054 10.298 183.05338269999845 11.332 262.786832899999 11.474 171.33618800000013 4.995 201.10194859999837 10.23 192.2722635000012 10.506 169.21403560000007 4.88 240.31675369999968 10.001 199.2164154000005 11.269 192.48762570000005 4.956 276.2192219999999 10.638 171.7299181000012 11.188 280.9030427000014 10.585 175.4486056 5.087 170.12537969999994 4.898 186.41074579999986 5.072 232.73099709999997 8.961 171.17688600000048 11.375 169.8102351000004 9.972 167.2108941000001 4.443 204.85894629999888 10.123 193.62755360000028 4.985 239.08916120000038 10.211 182.1229512999999 4.93)
Error minima by case: (1.6837 2 0.2555 7 0.1972 7 0.089 1 0.0257 1 1.2518 1 2.2123 7 0.0 0 0.1047 1 0.0212 6 6.1653 1 0.1435 2 0.0107 2 0.115 2 0.0 0 0.1294 1 0.0 0 0.1875 1 0.0107 7 0.0142 1 0.0 0 0.0191 1 0.6676 1 0.008 1 0.3464 1)
Average genome size in population (length): 177.569
Average program size in population (points): 178.569
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 257.5817322485607
Average age in population: 232.5081986043479
Median age in population: 254.1070518940211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.764
Error (vector) diversity:			 0.815
Behavioral diversity:				 0.821
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 592926873
--- Timings ---
Current time: 1529615854589 milliseconds
Total Time:         880.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.8 seconds, 29.7%
Fitness Testing:    491.5 seconds, 55.8%
Report:             126.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 53938.65819999999
Test mean error for best: 26.96933
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 127.2954408411
Correct output: 17.2828270025  | Program output: 11.5858528659 
Correct output: 23.1304489589  | Program output: -0.1077417885 
Correct output: 137.0785591646 | Program output: 134.0321183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -15.9339750517
Correct output: 17.1520909798  | Program output: -19.2498318623
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 78.8614348719 
Correct output: 52.2037920383  | Program output: 51.0690587857 
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 181.5058983919
Correct output: -19.1443327626 | Program output: -15.350255696 
Correct output: 180.0725301747 | Program output: 192.0200603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 56.2879516245 
Correct output: 38.5197606199  | Program output: 40.4889206046 
Correct output: -4.0857969085  | Program output: -7.1310113054 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 20.6632694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 72.2339767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_sub} {:instruction tagged_773} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_inc} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec integer_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec integer_max float_dec integer_sub tagged_773 float_dec float_dec float_dec float_dec float_div integer_dup_items integer_yank float_dec integer_yank float_sub integer_inc print_float integer_add integer_swap float_tan float_rot)
Errors: [24.4148 11 5.697 9 23.2382 9 3.0464 10 10.0 1 46.208 10 36.4019 12 18.0 2 3.3682 10 1.1347 10 35.0 2 26.6904 9 3.7941 9 11.9475 10 18.0 2 23.0 2 36.0 2 5.125 5 1.9692 10 3.0452 10 0.0 0 7.125 4 29.0 2 4.9455 10 22.0 2]
Total: 562.1511
Mean: 11.243022
Genome size: 195
Size: 196
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5626.465860299999
Median total errors in population: 1537.7642
Error averages by case: (285.3569752000004 11.372 183.9431021000005 10.525 197.85147969999866 11.441 273.7228934999991 11.479 183.0576288 5.407 214.47058619999865 10.314 203.22087280000105 10.676 180.55690010000012 5.25 248.12610369999965 10.125 220.77625370000038 11.39 204.6534509000003 5.423 291.1992867999999 10.745 184.79005540000122 11.187 293.2444637000013 10.718 192.73979680000014 5.562 183.16715699999997 5.371 202.63892609999982 5.536 239.1497861999998 9.177 192.75396420000078 11.443 184.7394611000005 10.045 184.76618530000005 4.83 211.05813739999903 10.118 211.14313830000026 5.363 245.8785287000002 10.359 194.2347266 5.37)
Error minima by case: (0.6837 2 0.2828 7 0.1972 7 0.0224 2 0.0918 1 4.5875 2 0.0839 7 0.0 0 0.1182 1 0.0212 7 6.1653 1 0.3721 2 0.0971 1 0.115 2 0.0 0 0.0 0 0.0 0 0.1725 1 0.1014 5 0.0063 1 0.0 0 0.0128 1 22.0 1 0.008 2 5.3464 1)
Average genome size in population (length): 173.429
Average program size in population (points): 174.429
Average percent parens in population: 0.010
Minimum age in population: 0.0
Maximum age in population: 258.3076831136609
Average age in population: 227.3256124997194
Median age in population: 255.1070518940211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.778
Error (vector) diversity:			 0.827
Behavioral diversity:				 0.831
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 597262548
--- Timings ---
Current time: 1529615860184 milliseconds
Total Time:         886.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.2 seconds, 29.7%
Fitness Testing:    494.8 seconds, 55.9%
Report:             127.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 54137.95020000005
Test mean error for best: 27.06898
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 128.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 134.9696183291
Correct output: -36.0917810332 | Program output: -27.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -28.6087899132
Correct output: 75.493217436   | Program output: 79.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -45.8347132576
Correct output: 154.815449196  | Program output: 182.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 192.9575603494
Correct output: -128.3399358578 | Program output: -147.3399358578
Correct output: -20.7768369154 | Program output: -44.7768369154
Correct output: -106.4972590774 | Program output: -143.4972590774
Correct output: 61.4129516245  | Program output: 57.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -94.8538349059
Correct output: 27.7882694945  | Program output: 21.6007694945 
Correct output: -145.332361916 | Program output: -117.332361916
Correct output: 77.1794883917  | Program output: 73.1714767834 
Correct output: -67.6536129502 | Program output: -46.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dup_items} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction -89} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction 50} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction integer_sub} {:instruction tagged_773} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup float_add integer_dup float_add integer_shove float_inc float_yankdup integer_inc integer_shove integer_sub integer_dup_times integer_shove float_dup_items float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec integer_sub float_dec integer_sub float_dec float_dec integer_max integer_yank -89 integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub 50 float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add float_dec in2 float_dup_items integer_dup_items in2 float_dup_items float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_yank integer_dup_items float_dec float_dec float_dec float_dec float_dup_items float_max float_div float_dec in2 integer_inc float_dec float_dec integer_dup_items integer_swap float_dec integer_stackdepth float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_dec float_sub integer_inc float_dec integer_max float_dec integer_sub tagged_773 float_dec float_dec float_dec float_dec float_div integer_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [23.4773 11 2.3103 8 20.1972 10 2.1089 11 9.0 2 49.2265 8 33.3881 9 19.0 2 4.3057 9 1.9788 11 34.0 2 27.6279 10 6.8134 11 12.885 10 19.0 2 24.0 2 37.0 2 4.1875 6 5.6828 11 0.0142 8 1.0 1 6.1875 5 28.0 2 4.008 8 21.0 2]
Total: 559.3991000000001
Mean: 11.187982
Genome size: 197
Size: 198
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5180.7328642
Median total errors in population: 1515.59535
Error averages by case: (273.4669361999999 11.208 154.22591390000014 10.431 179.0455845999987 11.276 260.5568658999995 11.267 168.12761179999987 5.193 193.70657219999924 10.16 187.19726150000037 10.612 166.84389659999994 5.051 232.1833631999996 10.013 191.97056720000006 11.23 190.00632080000025 5.169 277.16425959999964 10.64 166.64422560000054 11.026 282.296832000001 10.617 174.28589310000004 5.342 168.62189489999994 5.109 185.47984209999998 5.383 222.4202961 9.018 169.08224670000013 11.344 165.40809640000006 9.843 166.73320160000006 4.651 186.43564499999948 9.774 194.1503575000002 5.193 230.2817993000006 10.144 179.58538040000002 5.118)
Error minima by case: (2.4698 2 0.0765 3 0.0037 7 0.0161 1 0.0918 1 5.6449 1 0.6842 7 0.0 0 0.1182 1 0.0212 7 0.9715 1 0.6279 2 0.1443 1 0.115 2 0.0 0 0.5799 1 0.0 0 0.1875 1 0.3172 2 0.0135 1 0.0 0 0.0305 1 18.406 1 0.008 1 4.3464 1)
Average genome size in population (length): 177.217
Average program size in population (points): 178.217
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 259.4947014689286
Average age in population: 236.022965692201
Median age in population: 256.434805298766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.79
Error (vector) diversity:			 0.832
Behavioral diversity:				 0.836
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 601692898
--- Timings ---
Current time: 1529615865984 milliseconds
Total Time:         891.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       264.6 seconds, 29.7%
Fitness Testing:    498.3 seconds, 55.9%
Report:             128.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 53990.39950000006
Test mean error for best: 26.99520
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 128.2329408411
Correct output: 17.2828270025  | Program output: 12.9725706585 
Correct output: 23.1304489589  | Program output: 0.9332343275  
Correct output: 137.0785591646 | Program output: 134.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -14.9154443106
Correct output: 17.1520909798  | Program output: -18.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 79.7989348719 
Correct output: 52.2037920383  | Program output: 52.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 182.4433983919
Correct output: -19.1443327626 | Program output: -14.3308971017
Correct output: 180.0725301747 | Program output: 192.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 57.2254516245 
Correct output: 38.5197606199  | Program output: 42.2025961771 
Correct output: -4.0857969085  | Program output: -6.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 21.6007694945 
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 73.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_max} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_max} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_div} {:instruction print_float})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup integer_swap integer_yankdup float_add integer_dup integer_add integer_shove float_inc float_dup_items integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add integer_max in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub integer_dup_items float_dec integer_max float_shove float_dec float_sub float_dec float_dec integer_yank float_dec float_div print_float)
Errors: [23.4773 11 4.3103 8 22.1972 11 2.1089 11 8.0 2 47.2265 9 35.3881 9 20.0 1 4.3057 9 0.0212 10 33.0 2 27.6279 10 4.8134 11 12.885 10 20.0 1 25.0 2 38.0 2 4.1875 6 3.6828 11 2.0142 9 2.0 1 6.1875 5 27.0 2 4.008 8 20.0 1]
Total: 559.4415000000001
Mean: 11.18883
Genome size: 194
Size: 195
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5511.847246200001
Median total errors in population: 1534.68315
Error averages by case: (284.98091130000034 11.374 169.4200749000001 10.445 196.32182699999885 11.409 274.8476410999996 11.463 178.89265769999997 5.386 210.38699729999905 10.349 203.25955950000085 10.738 175.89899890000012 5.199 246.7235018999995 10.167 211.39785400000008 11.355 200.72759500000026 5.256 287.0579691000005 10.823 182.30511510000065 11.181 292.006445500001 10.755 184.46256290000002 5.468 179.02043070000008 5.225 194.50649319999988 5.488 238.67393280000005 9.133 178.71951550000023 11.451 182.88810390000023 10.003 177.28664870000011 4.731 201.5202812999993 9.727 203.56106450000027 5.344 248.44542000000027 10.325 190.52064439999984 5.22)
Error minima by case: (0.1496 2 0.0765 2 0.1972 8 0.089 2 0.0339 1 5.5461 1 1.6119 7 0.0 0 0.1182 1 8.0E-4 7 5.7808 1 0.1318 2 0.0438 1 0.115 2 0.0 0 0.2232 1 0.0 0 0.1725 1 0.2555 3 0.0142 1 0.0 0 0.0305 1 0.2192 1 0.008 1 3.3032 1)
Average genome size in population (length): 177.69
Average program size in population (points): 178.69
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 260.4745574914009
Average age in population: 238.4999017100052
Median age in population: 257.5861585462834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.785
Error (vector) diversity:			 0.834
Behavioral diversity:				 0.839
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 606135248
--- Timings ---
Current time: 1529615871598 milliseconds
Total Time:         897.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.0 seconds, 29.6%
Fitness Testing:    501.7 seconds, 55.9%
Report:             129.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 54610.41680000007
Test mean error for best: 27.30521
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 128.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 134.9696183291
Correct output: -36.0917810332 | Program output: -27.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -28.6087899132
Correct output: 75.493217436   | Program output: 79.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -45.8347132576
Correct output: 154.815449196  | Program output: 182.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 192.9575603494
Correct output: -128.3399358578 | Program output: -147.3399358578
Correct output: -20.7768369154 | Program output: -44.7768369154
Correct output: -106.4972590774 | Program output: -143.4972590774
Correct output: 61.4129516245  | Program output: 57.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -94.8538349059
Correct output: 27.7882694945  | Program output: 21.6007694945 
Correct output: -145.332361916 | Program output: -117.332361916
Correct output: 77.1794883917  | Program output: 73.1714767834 
Correct output: -67.6536129502 | Program output: -46.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_302} {:instruction 21} {:instruction float_dec} {:instruction in1} {:instruction integer_sub} {:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_max} {:instruction float_inc} {:instruction float_yankdup} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_rot} {:instruction in2} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_pop} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_302 21 float_dec in1 integer_sub tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_inc integer_div float_max integer_dec integer_div in2 integer_mod float_dup_items float_add float_max float_inc float_yankdup -88.88749634878776 float_max integer_dec float_yankdup float_yankdup integer_dec float_rot in2 float_div float_dup_items float_add 73 float_inc float_dup_items float_dup_items float_add 73 float_inc float_shove integer_mult integer_dup integer_pop in2 float_dup_items float_add integer_shove float_inc integer_pop integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec float_dec integer_dup_items integer_sub float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items integer_shove float_dec float_add integer_add float_frominteger integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec float_dec integer_dec float_dup_items float_max float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_max float_dec float_sub float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [23.4773 11 2.3103 8 20.1972 10 2.1089 11 9.0 2 49.2265 8 33.3881 9 19.0 2 4.3057 9 1.9788 11 34.0 2 27.6279 10 6.8134 11 12.885 10 19.0 2 24.0 2 37.0 2 4.1875 6 5.6828 11 0.0142 8 1.0 1 6.1875 5 28.0 2 4.008 8 21.0 2]
Total: 559.3991000000001
Mean: 11.187982
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5607.961739
Median total errors in population: 1548.7045
Error averages by case: (284.9608023000004 11.242 178.40159500000064 10.482 202.8919961999987 11.442 273.82526859999905 11.317 182.4770488 5.32 217.8980200999985 10.319 209.55671910000112 10.705 179.20121670000017 5.182 243.77644489999955 10.061 216.58663179999968 11.379 204.86315060000024 5.295 287.8197016000004 10.658 188.8833713000012 11.147 293.00126630000125 10.634 188.40693989999997 5.41 182.2329842000001 5.265 198.85105179999988 5.405 244.22917229999982 9.094 193.09791920000046 11.477 188.47545150000036 9.975 181.80850519999998 4.761 202.65312299999997 9.552 208.10415760000026 5.294 244.84495630000032 10.192 194.23724469999982 5.269)
Error minima by case: (2.444 2 0.0765 7 0.1109 7 0.1089 1 0.0918 1 2.7153 1 0.0501 7 1.0 1 0.3057 1 8.0E-4 7 14.9774 1 0.2805 2 0.1298 1 0.0511 2 0.0951 1 0.0 0 0.0 0 0.1725 1 0.3172 8 0.0142 1 0.0 0 0.1875 1 16.6676 1 0.008 1 2.7963 1)
Average genome size in population (length): 176.714
Average program size in population (points): 177.714
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 261.5986765754278
Average age in population: 236.8703412512032
Median age in population: 258.9126790495036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.992
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.992
Total error diversity:				 0.777
Error (vector) diversity:			 0.832
Behavioral diversity:				 0.837
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 610553405
--- Timings ---
Current time: 1529615877418 milliseconds
Total Time:         903.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       267.4 seconds, 29.6%
Fitness Testing:    505.2 seconds, 55.9%
Report:             130.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 54264.52590000005
Test mean error for best: 27.13226
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.2329408411
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 137.9696183291
Correct output: -36.0917810332 | Program output: -25.0917810332
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -26.6087899132
Correct output: 75.493217436   | Program output: 82.7989348719 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -43.8347132576
Correct output: 154.815449196  | Program output: 185.4433983919
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 195.9575603494
Correct output: -128.3399358578 | Program output: -145.3399358578
Correct output: -20.7768369154 | Program output: -42.7768369154
Correct output: -106.4972590774 | Program output: -141.4972590774
Correct output: 61.4129516245  | Program output: 60.2254516245 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -92.8538349059
Correct output: 27.7882694945  | Program output: 24.6007694945 
Correct output: -145.332361916 | Program output: -115.332361916
Correct output: 77.1794883917  | Program output: 76.1714767834 
Correct output: -67.6536129502 | Program output: -44.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction integer_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_max} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 integer_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_shove integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add integer_max in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [20.4773 10 1.3103 8 19.1972 10 0.8911 10 11.0 2 50.2265 9 32.3881 9 17.0 2 7.3057 10 2.9788 11 36.0 2 30.6279 9 7.8134 11 15.885 10 17.0 2 22.0 2 35.0 2 1.1875 5 6.6828 11 0.9858 9 1.0 1 3.1875 5 30.0 1 1.008 8 23.0 2]
Total: 555.1529
Mean: 11.103058
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5292.765861500001
Median total errors in population: 1540.9515500000002
Error averages by case: (279.5640627 11.273 166.93067100000022 10.559 191.27471009999883 11.424 268.7739346999994 11.345 163.9045958 5.226 205.65380619999894 10.346 196.73371830000067 10.689 160.34054420000015 5.063 240.72242669999955 10.111 211.69610420000004 11.389 186.0023757000002 5.22 280.7548749999997 10.684 177.87461290000078 11.204 286.7012390000013 10.686 172.50645030000004 5.383 162.80818589999996 5.209 182.7488480999999 5.427 233.00599390000005 9.105 182.2454908000003 11.414 175.5370096000004 10.026 164.74177740000002 4.76 179.8997714999995 9.507 191.45006750000033 5.321 238.78892510000037 10.255 175.29266489999986 5.187)
Error minima by case: (2.7297 1 0.0446 3 0.9393 7 0.089 2 0.1596 1 0.5133 1 0.0839 7 0.0 0 0.1182 1 0.0212 8 3.9715 1 1.6279 2 0.0266 1 0.0511 2 0.0 0 0.0 0 1.0 1 0.1875 1 0.3172 3 0.0142 1 0.0 0 0.5867 1 2.9147 1 0.008 1 4.0853 1)
Average genome size in population (length): 178.382
Average program size in population (points): 179.382
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 262.3713130246192
Average age in population: 242.8179594340355
Median age in population: 260.2670949285378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.772
Error (vector) diversity:			 0.83
Behavioral diversity:				 0.835
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 615013155
--- Timings ---
Current time: 1529615883138 milliseconds
Total Time:         908.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.9 seconds, 29.6%
Fitness Testing:    508.6 seconds, 56.0%
Report:             131.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 54264.52590000005
Test mean error for best: 27.13226
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.2329408411
Correct output: 17.2828270025  | Program output: 15.9725706585 
Correct output: 23.1304489589  | Program output: 3.9332343275  
Correct output: 137.0785591646 | Program output: 137.9696183291
Correct output: -36.0917810332 | Program output: -25.0917810332
Correct output: -62.1419485102 | Program output: -11.9154443106
Correct output: 17.1520909798  | Program output: -15.2360037974
Correct output: -9.6087899132  | Program output: -26.6087899132
Correct output: 75.493217436   | Program output: 82.7989348719 
Correct output: 52.2037920383  | Program output: 55.182615816  
Correct output: -79.8347132576 | Program output: -43.8347132576
Correct output: 154.815449196  | Program output: 185.4433983919
Correct output: -19.1443327626 | Program output: -11.3308971017
Correct output: 180.0725301747 | Program output: 195.9575603494
Correct output: -128.3399358578 | Program output: -145.3399358578
Correct output: -20.7768369154 | Program output: -42.7768369154
Correct output: -106.4972590774 | Program output: -141.4972590774
Correct output: 61.4129516245  | Program output: 60.2254516245 
Correct output: 38.5197606199  | Program output: 45.2025961771 
Correct output: -4.0857969085  | Program output: -3.0999958613 
Correct output: -93.8538349059 | Program output: -92.8538349059
Correct output: 27.7882694945  | Program output: 24.6007694945 
Correct output: -145.332361916 | Program output: -115.332361916
Correct output: 77.1794883917  | Program output: 76.1714767834 
Correct output: -67.6536129502 | Program output: -44.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction integer_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction integer_max} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 integer_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_shove integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_add float_dec integer_add integer_max in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [20.4773 10 1.3103 8 19.1972 10 0.8911 10 11.0 2 50.2265 9 32.3881 9 17.0 2 7.3057 10 2.9788 11 36.0 2 30.6279 9 7.8134 11 15.885 10 17.0 2 22.0 2 35.0 2 1.1875 5 6.6828 11 0.9858 9 1.0 1 3.1875 5 30.0 1 1.008 8 23.0 2]
Total: 555.1529
Mean: 11.103058
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5390.3530013
Median total errors in population: 1511.7523999999999
Error averages by case: (284.77664660000016 11.211 164.5568877000003 10.524 188.28543149999874 11.422 270.6114047999994 11.267 174.5355929000001 5.093 203.90854929999887 10.262 196.58786890000079 10.8 171.7429329000001 4.96 243.16681699999953 10.139 205.33157450000013 11.345 195.36798380000022 5.058 284.21801030000046 10.656 176.49866390000102 11.091 289.4325140000012 10.712 179.22416790000003 5.263 173.80151070000002 5.028 189.76818839999987 5.284 234.40169219999999 9.064 178.78831060000036 11.43 174.68182330000025 9.933 172.24713000000008 4.598 196.8622502999994 9.457 198.3356229000004 5.106 243.29753640000047 10.18 184.98889049999994 5.052)
Error minima by case: (0.7297 2 0.1972 7 0.1109 7 0.1089 2 0.0918 1 3.9517 1 0.0665 8 1.0 1 0.2432 1 0.0212 6 6.1653 1 0.6279 2 0.0602 1 0.0525 2 0.0951 1 0.0 0 1.0 1 0.1058 1 0.3172 8 0.0142 1 0.0 0 0.3269 1 14.6676 1 0.008 1 5.3464 1)
Average genome size in population (length): 178.642
Average program size in population (points): 179.642
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 263.7697623103211
Average age in population: 241.8718232481541
Median age in population: 261.4155388690496
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.771
Error (vector) diversity:			 0.827
Behavioral diversity:				 0.831
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 619478905
--- Timings ---
Current time: 1529615889123 milliseconds
Total Time:         914.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.3 seconds, 29.6%
Fitness Testing:    512.1 seconds, 56.0%
Report:             132.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 54191.455900000044
Test mean error for best: 27.09573
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 138.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 83.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 186.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 196.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 61.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 25.6007694945 
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 77.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_max} {:instruction float_dec} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dec})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_sub float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_add float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_shove integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_dec integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec integer_sub float_div float_dec float_add float_yank integer_add float_dec integer_add float_dec in2 float_dup_items integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_shove float_max float_div float_dec in2 float_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub float_dec integer_max float_dec print_float integer_yank integer_yank float_dec)
Errors: [19.4773 11 2.3103 8 20.1972 10 1.8911 11 8.0 2 49.2265 8 33.3881 9 20.0 1 8.3057 10 1.9788 11 33.0 2 31.6279 10 6.8134 11 16.885 10 20.0 1 25.0 2 38.0 2 0.1875 4 5.6828 11 0.0142 8 2.0 1 2.1875 5 27.0 2 0.008 7 20.0 1]
Total: 551.1813
Mean: 11.023626
Genome size: 187
Size: 188
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5105.345362300001
Median total errors in population: 1495.6232
Error averages by case: (270.0347357999996 11.079 154.94239950000014 10.444 183.58883799999884 11.362 258.8741224999996 11.124 161.52568310000004 5.053 196.91381699999926 10.138 192.08388610000063 10.731 158.16443619999995 4.94 228.76664419999918 10.038 198.9457462000002 11.234 183.93800220000028 5.053 271.40449559999945 10.513 170.583486600001 10.917 275.99658230000136 10.601 168.42150979999994 5.118 160.93592199999995 5.013 179.2799039999998 5.119 220.51898660000012 8.889 164.8514808000002 11.373 169.87631270000017 9.843 161.33520570000002 4.436 173.19282809999964 9.2 188.06970570000013 4.983 227.6814472000006 10.084 173.12518439999994 5.009)
Error minima by case: (1.444 2 0.0765 7 0.1972 7 0.0161 1 0.0918 1 6.7832 1 0.7877 7 0.0 1 0.1182 1 0.0212 7 2.9715 1 0.1846 2 0.1866 1 0.115 2 0.0 1 0.0 0 0.0 0 0.0127 1 0.0778 6 0.0142 1 0.0 0 0.1875 1 16.6676 1 0.008 1 5.3464 1)
Average genome size in population (length): 179.088
Average program size in population (points): 180.088
Average percent parens in population: 0.007
Minimum age in population: 0.0
Maximum age in population: 264.9017279679573
Average age in population: 243.9989736210962
Median age in population: 262.6557033996186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.776
Error (vector) diversity:			 0.84
Behavioral diversity:				 0.847
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 623955655
--- Timings ---
Current time: 1529615894859 milliseconds
Total Time:         920.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       271.7 seconds, 29.5%
Fitness Testing:    515.5 seconds, 56.0%
Report:             133.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 54100.78970000005
Test mean error for best: 27.05039
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 137.9696183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 82.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 185.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 195.9575603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 60.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 24.6007694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 76.1714767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_sub float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_add float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_shove integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_dec integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec integer_sub float_div float_dec float_add float_yank integer_add float_dec integer_add float_dec in2 float_dup_items integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_shove float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [20.4773 10 3.3103 8 21.1972 11 0.8911 10 10.0 1 48.2265 9 34.3881 8 18.0 2 7.3057 10 0.9788 11 35.0 2 30.6279 9 5.8134 11 15.885 10 18.0 2 23.0 2 36.0 2 1.1875 5 4.6828 11 1.0142 9 0.0 0 3.1875 5 29.0 2 1.008 8 22.0 2]
Total: 551.1813
Mean: 11.023626
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 4846.987505100003
Median total errors in population: 1469.9759
Error averages by case: (258.03928019999967 11.204 143.1745326000001 10.378 168.40633279999898 11.302 245.72052849999992 11.206 152.4863926 5.295 186.72372709999925 10.218 177.4603285000004 10.698 148.47295940000006 5.115 218.92498239999915 10.179 181.67660680000017 11.266 175.1797947000003 5.257 261.362132899999 10.535 158.75839830000066 11.047 266.23496320000146 10.711 162.0535911000001 5.318 151.10022859999998 5.2 171.58877439999992 5.303 206.24566440000004 8.743 157.70276910000035 11.33 155.91801640000006 9.889 152.5208497000001 4.633 170.36758469999967 9.14 180.28394480000017 5.202 217.77531640000046 10.159 164.28880549999997 5.193)
Error minima by case: (2.3726 1 0.0613 3 0.1972 7 0.0464 1 0.0918 1 2.6433 1 0.1476 7 0.0 0 0.1182 1 0.0212 8 3.921 1 0.3721 2 0.1285 1 0.8225 2 0.0 0 0.0 0 3.0 1 0.1875 1 0.2075 3 0.0012 1 0.0 0 0.125 1 9.921 1 0.008 1 2.3032 1)
Average genome size in population (length): 178.164
Average program size in population (points): 179.164
Average percent parens in population: 0.008
Minimum age in population: 0.0
Maximum age in population: 266.0692856045221
Average age in population: 242.9632532880788
Median age in population: 264.0343416718465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.982
Total error diversity:				 0.769
Error (vector) diversity:			 0.822
Behavioral diversity:				 0.826
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 628409205
--- Timings ---
Current time: 1529615900671 milliseconds
Total Time:         926.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.2 seconds, 29.5%
Fitness Testing:    519.0 seconds, 56.0%
Report:             134.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 54100.78970000005
Test mean error for best: 27.05039
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.2329408411
Correct output: 17.2828270025  | Program output: 13.9725706585 
Correct output: 23.1304489589  | Program output: 1.9332343275  
Correct output: 137.0785591646 | Program output: 137.9696183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -13.9154443106
Correct output: 17.1520909798  | Program output: -17.2360037974
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 82.7989348719 
Correct output: 52.2037920383  | Program output: 53.182615816  
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 185.4433983919
Correct output: -19.1443327626 | Program output: -13.3308971017
Correct output: 180.0725301747 | Program output: 195.9575603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 60.2254516245 
Correct output: 38.5197606199  | Program output: 43.2025961771 
Correct output: -4.0857969085  | Program output: -5.0999958613 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 24.6007694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 76.1714767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction float_yank} {:instruction integer_add} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_div} {:instruction print_float} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_stackdepth})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_sub float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_add float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_shove integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_dec integer_max integer_yank float_dec float_dec float_dec integer_sub float_dec float_dec integer_dec integer_yank float_dec float_sub float_dec float_dec integer_sub float_dec integer_sub float_div float_dec float_add float_yank integer_add float_dec integer_add float_dec in2 float_dup_items integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult integer_shove float_max float_div float_dec in2 float_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_dup_items float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec integer_yank float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_div print_float integer_yank integer_yank float_stackdepth)
Errors: [20.4773 10 3.3103 8 21.1972 11 0.8911 10 10.0 1 48.2265 9 34.3881 8 18.0 2 7.3057 10 0.9788 11 35.0 2 30.6279 9 5.8134 11 15.885 10 18.0 2 23.0 2 36.0 2 1.1875 5 4.6828 11 1.0142 9 0.0 0 3.1875 5 29.0 2 1.008 8 22.0 2]
Total: 551.1813
Mean: 11.023626
Genome size: 198
Size: 199
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5576.3532991
Median total errors in population: 1521.5329000000002
Error averages by case: (292.19485010000045 11.302 180.28951670000052 10.528 205.33874919999852 11.386 280.5137255999997 11.323 172.1672163 5.274 217.22996059999872 10.314 211.48395720000107 10.829 170.58977420000008 5.141 254.91133239999925 10.346 220.18965570000023 11.351 194.19457050000017 5.296 297.9439920999998 10.703 192.31299480000106 10.995 299.27945590000166 10.883 180.35362720000006 5.423 173.29827859999995 5.25 190.60831789999978 5.415 236.6401894000001 8.987 191.5627537000004 11.418 191.22903580000036 9.955 171.6468365 4.677 199.4034664999996 9.357 198.44225690000016 5.243 254.02885740000045 10.327 183.5179279 5.259)
Error minima by case: (1.0473 2 0.0154 7 0.1562 7 0.0152 1 0.0918 1 0.8581 1 0.1543 7 0.1043 1 0.3057 1 0.0212 8 1.8447 1 0.3096 2 0.0078 1 0.115 2 0.0951 1 0.0232 1 0.0 0 0.125 1 0.0528 6 0.0031 1 0.0 0 0.1875 1 12.0011 1 0.008 1 3.6536 1)
Average genome size in population (length): 174.629
Average program size in population (points): 175.629
Average percent parens in population: 0.009
Minimum age in population: 0.0
Maximum age in population: 267.526904205195
Average age in population: 237.9377263835487
Median age in population: 265.2003102801292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.741
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.793
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 632774530
--- Timings ---
Current time: 1529615906316 milliseconds
Total Time:         932.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       274.6 seconds, 29.5%
Fitness Testing:    522.3 seconds, 56.0%
Report:             135.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 54147.37070000004
Test mean error for best: 27.07369
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 130.2329408411
Correct output: 17.2828270025  | Program output: 14.9725706585 
Correct output: 23.1304489589  | Program output: 2.9332343275  
Correct output: 137.0785591646 | Program output: 136.9696183291
Correct output: -36.0917810332 | Program output: -28.0917810332
Correct output: -62.1419485102 | Program output: -12.9154443106
Correct output: 17.1520909798  | Program output: -16.2360037974
Correct output: -9.6087899132  | Program output: -29.6087899132
Correct output: 75.493217436   | Program output: 81.7989348719 
Correct output: 52.2037920383  | Program output: 54.182615816  
Correct output: -79.8347132576 | Program output: -46.8347132576
Correct output: 154.815449196  | Program output: 184.4433983919
Correct output: -19.1443327626 | Program output: -12.3308971017
Correct output: 180.0725301747 | Program output: 194.9575603494
Correct output: -128.3399358578 | Program output: -148.3399358578
Correct output: -20.7768369154 | Program output: -45.7768369154
Correct output: -106.4972590774 | Program output: -144.4972590774
Correct output: 61.4129516245  | Program output: 59.2254516245 
Correct output: 38.5197606199  | Program output: 44.2025961771 
Correct output: -4.0857969085  | Program output: -4.0999958613 
Correct output: -93.8538349059 | Program output: -95.8538349059
Correct output: 27.7882694945  | Program output: 23.6007694945 
Correct output: -145.332361916 | Program output: -118.332361916
Correct output: 77.1794883917  | Program output: 75.1714767834 
Correct output: -67.6536129502 | Program output: -47.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_rot} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_div} {:instruction float_dup_items} {:instruction float_add} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction integer_rot} {:instruction 100} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction float_sub} {:instruction integer_dup_items} {:instruction print_float})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup integer_rot float_max float_shove float_rot in2 integer_div float_dup_items float_add 73 float_inc float_div float_dup_items float_add float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup float_rot integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove integer_max integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_shove float_dec integer_add float_dec in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec float_dup_items float_dec float_dec float_dec integer_dup float_dec float_dec float_dec float_dec integer_mod integer_div float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_dec float_dup_items float_max float_dec float_dup_items float_max float_dec integer_rot 100 float_sub float_sub float_dec integer_pop float_dec integer_inc integer_yank float_shove float_dec float_div float_sub integer_dup_items print_float)
Errors: [21.4773 11 2.3103 8 20.1972 10 0.1089 11 8.0 2 49.2265 8 33.3881 9 20.0 1 6.3057 10 1.9788 11 33.0 2 29.6279 9 6.8134 11 14.885 10 20.0 1 25.0 2 38.0 2 2.1875 6 5.6828 11 0.0142 8 2.0 1 4.1875 5 27.0 2 2.008 8 20.0 1]
Total: 553.3991000000001
Mean: 11.067982
Genome size: 192
Size: 193
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 5909.6274782
Median total errors in population: 1515.0
Error averages by case: (304.8128848000007 11.339 190.2559421000004 10.679 212.91720359999871 11.501 292.0245053999996 11.392 191.70944160000005 5.549 230.98806319999855 10.475 219.25374760000142 10.894 190.6102280000001 5.411 269.4327412999994 10.328 220.8016343000003 11.442 213.0940824000002 5.506 304.99156520000054 10.759 201.49407110000183 11.199 311.6245627000016 10.914 197.63659799999994 5.607 192.0359909999999 5.506 207.63198629999974 5.655 252.92151050000024 9.166 200.7951024000009 11.53 198.87278020000014 10.12 189.3476796000002 4.799 208.1589160999993 9.468 216.59584180000027 5.49 268.4210991000003 10.367 202.6202998999997 5.483)
Error minima by case: (0.944 2 0.0765 7 0.2702 6 0.0464 2 0.8639 1 3.8581 1 0.2123 7 0.6468 1 0.0608 1 0.0212 8 5.0255 1 0.1627 2 0.0934 1 0.115 2 0.0951 1 0.0232 1 2.89 1 0.1875 1 0.0308 8 0.0142 1 0.0 0 0.1658 1 7.1103 1 0.0034 1 1.6102 1)
Average genome size in population (length): 175.474
Average program size in population (points): 176.474
Average percent parens in population: 0.009
Minimum age in population: 0.0
Maximum age in population: 268.9938529620574
Average age in population: 240.2982121053485
Median age in population: 266.4407106924279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.977
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.977
Total error diversity:				 0.75
Error (vector) diversity:			 0.793
Behavioral diversity:				 0.798
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 637160555
--- Timings ---
Current time: 1529615912036 milliseconds
Total Time:         937.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.1 seconds, 29.4%
Fitness Testing:    525.7 seconds, 56.1%
Report:             135.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 53955.288300000015
Test mean error for best: 26.97764
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 131.1704408411
Correct output: 17.2828270025  | Program output: 12.3592884511 
Correct output: 23.1304489589  | Program output: -0.0257895565 
Correct output: 137.0785591646 | Program output: 137.9071183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -15.8969135696
Correct output: 17.1520909798  | Program output: -19.2221757326
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 82.7364348719 
Correct output: 52.2037920383  | Program output: 51.2961728464 
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 185.3808983919
Correct output: -19.1443327626 | Program output: -15.3115385073
Correct output: 180.0725301747 | Program output: 195.8950603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 60.1629516245 
Correct output: 38.5197606199  | Program output: 41.9162717495 
Correct output: -4.0857969085  | Program output: -7.0689804173 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 24.5382694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 76.1089767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_max} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 74} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction print_integer} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_div} {:instruction float_dec} {:instruction float_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction integer_max} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_div} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add integer_shove float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max float_sub float_yankdup float_max float_shove float_rot in2 integer_div float_dup_items float_add 74 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove float_max in2 float_dup_items float_dup_items integer_yankdup integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove integer_dup float_rot in2 float_dup_items float_dup_items integer_yankdup print_integer integer_dup integer_fromfloat float_rot integer_div float_rot in2 float_dup_items float_dup_items float_dec float_dec float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec integer_sub integer_sub float_dec float_dec float_dec integer_sub float_dec float_dec float_dec integer_sub float_dec float_shove float_frominteger integer_yank float_dec integer_sub float_dec float_dec integer_max integer_add float_dec float_dec integer_max integer_yank float_dec float_sub float_dec float_dec float_dec integer_sub float_dec float_dup_items float_div float_dec float_add integer_mod float_dec integer_add integer_max in2 float_dup_items float_dec float_dec float_dec integer_dup_items float_yank float_dec float_dec float_dec float_dec float_dec float_dec float_dup_items float_dec float_dec float_dec integer_min float_dec float_dec float_frominteger float_dec integer_mult float_dup_items float_max float_div float_dec in2 float_dup_items float_dup_items float_dec float_dec integer_pop float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_yankdup integer_mult float_dup_items float_max float_dup_items float_max float_dec float_add float_dec float_sub float_dec float_div float_dec float_dec float_div integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [20.5398 9 4.9235 10 23.1562 10 0.8286 8 10.0 1 46.245 10 36.3743 11 18.0 2 7.2432 11 0.9076 9 35.0 2 30.5654 9 3.8328 10 15.8225 11 18.0 2 23.0 2 36.0 2 1.25 3 3.3965 10 2.9832 10 0.0 0 3.25 3 29.0 2 1.0705 9 22.0 2]
Total: 551.3891000000001
Mean: 11.027782
Genome size: 199
Size: 200
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6249.313330999999
Median total errors in population: 1538.4175500000001
Error averages by case: (313.74042730000093 11.485 206.02438420000055 10.687 232.25232339999874 11.525 301.3169721 11.535 202.912693 5.911 246.07396929999837 10.539 239.4967116000015 10.908 202.07025970000026 5.801 277.1846948999996 10.457 243.17058170000027 11.529 224.09439150000037 5.921 315.70723970000097 10.859 219.4584652000019 11.363 320.63115040000133 11.138 211.5743603000001 6.017 203.55619920000007 5.878 220.48558809999963 6.06 262.92092819999976 9.35 216.1017297000009 11.532 220.06135310000047 10.219 202.4015673 5.184 227.24874229999918 9.536 228.48790570000057 5.873 273.4189834999996 10.426 213.32070959999982 5.868)
Error minima by case: (0.4846 2 0.303 7 0.3509 6 0.0464 2 0.0918 1 1.8581 1 0.5655 7 0.0 0 0.1182 1 0.0212 7 3.1653 1 0.6279 2 0.0181 1 0.115 2 0.0 0 0.0 0 2.0 1 0.125 1 0.3172 6 0.0142 1 0.0 0 0.1378 1 8.3453 1 0.008 1 1.3453 1)
Average genome size in population (length): 171.692
Average program size in population (points): 172.692
Average percent parens in population: 0.010
Minimum age in population: 0.0
Maximum age in population: 270.0941873458194
Average age in population: 232.6663121499619
Median age in population: 267.4903902405551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.73
Error (vector) diversity:			 0.772
Behavioral diversity:				 0.779
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 641452830
--- Timings ---
Current time: 1529615917749 milliseconds
Total Time:         943.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       277.5 seconds, 29.4%
Fitness Testing:    529.1 seconds, 56.1%
Report:             136.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 54234.2016
Test mean error for best: 27.11710
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.2954408411
Correct output: 17.2828270025  | Program output: 14.5858528659 
Correct output: 23.1304489589  | Program output: 2.8922582115  
Correct output: 137.0785591646 | Program output: 139.0321183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -12.9339750517
Correct output: 17.1520909798  | Program output: -16.2498318623
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 83.8614348719 
Correct output: 52.2037920383  | Program output: 54.0690587857 
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 186.5058983919
Correct output: -19.1443327626 | Program output: -12.350255696 
Correct output: 180.0725301747 | Program output: 197.0200603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 61.2879516245 
Correct output: 38.5197606199  | Program output: 43.4889206046 
Correct output: -4.0857969085  | Program output: -4.1310113054 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 25.6632694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 77.2339767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_sub float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_add float_shove float_rot in2 integer_div in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items float_shove integer_yankdup integer_swap integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec float_dec float_dec integer_sub float_dec float_shove float_dec integer_yank float_dec float_dec integer_max integer_inc float_dec float_dec float_dec integer_max integer_yank float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items integer_shove float_dec float_dup_items float_dup_items float_dec float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_mult float_dec float_dec integer_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_yank float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub integer_shove integer_max integer_mult float_dec float_dec integer_yank integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [19.4148 11 2.697 9 20.2382 10 1.9536 10 10.0 1 49.208 9 33.4019 12 18.0 2 8.3682 11 1.8653 10 35.0 2 31.6904 9 6.7941 9 16.9475 10 18.0 2 23.0 2 36.0 2 0.125 3 4.9692 10 0.0452 9 0.0 0 2.125 4 29.0 2 0.0545 9 22.0 2]
Total: 550.8978999999999
Mean: 11.017958
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6148.5171301
Median total errors in population: 1538.1777500000003
Error averages by case: (306.3047459000006 11.399 199.93899270000037 10.742 226.51431649999859 11.544 295.6702719000003 11.457 201.9712137000001 5.864 239.53280059999827 10.555 234.55870780000137 10.941 201.10657390000023 5.714 272.0503957999997 10.37 243.4153313000005 11.471 221.97964200000018 5.846 312.5573564000014 10.789 213.7851049000019 11.338 315.4409715000012 10.982 211.041269 5.918 202.66713250000004 5.784 219.71837989999977 5.933 252.97048840000005 9.178 211.58307020000055 11.542 212.92271130000023 10.2 201.27460070000015 5.161 218.64547519999942 9.56 227.06632750000045 5.752 269.71506859999994 10.349 211.91318189999993 5.784)
Error minima by case: (0.2703 1 0.0562 7 0.8028 7 0.0464 1 0.3291 1 5.8581 1 0.5655 7 0.0 0 0.3057 1 0.0212 6 1.8347 1 0.6279 2 0.1672 1 0.115 2 0.0 0 0.2232 1 1.0 1 0.125 1 0.0308 6 0.0135 1 0.0 0 0.1632 1 13.4449 1 0.008 1 0.3464 1)
Average genome size in population (length): 171.797
Average program size in population (points): 172.797
Average percent parens in population: 0.009
Minimum age in population: 0.0
Maximum age in population: 271.0861140753247
Average age in population: 232.852101032865
Median age in population: 268.7910251313984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.741
Error (vector) diversity:			 0.788
Behavioral diversity:				 0.796
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 645747405
--- Timings ---
Current time: 1529615923389 milliseconds
Total Time:         949.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       278.9 seconds, 29.4%
Fitness Testing:    532.4 seconds, 56.1%
Report:             137.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 54234.2016
Test mean error for best: 27.11710
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.2954408411
Correct output: 17.2828270025  | Program output: 14.5858528659 
Correct output: 23.1304489589  | Program output: 2.8922582115  
Correct output: 137.0785591646 | Program output: 139.0321183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -12.9339750517
Correct output: 17.1520909798  | Program output: -16.2498318623
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 83.8614348719 
Correct output: 52.2037920383  | Program output: 54.0690587857 
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 186.5058983919
Correct output: -19.1443327626 | Program output: -12.350255696 
Correct output: 180.0725301747 | Program output: 197.0200603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 61.2879516245 
Correct output: 38.5197606199  | Program output: 43.4889206046 
Correct output: -4.0857969085  | Program output: -4.1310113054 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 25.6632694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 77.2339767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_sub float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_add float_shove float_rot in2 integer_div in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items float_shove integer_yankdup integer_swap integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec float_dec float_dec integer_sub float_dec float_shove float_dec integer_yank float_dec float_dec integer_max integer_inc float_dec float_dec float_dec integer_max integer_yank float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items integer_shove float_dec float_dup_items float_dup_items float_dec float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_mult float_dec float_dec integer_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_yank float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub integer_shove integer_max integer_mult float_dec float_dec integer_yank integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [19.4148 11 2.697 9 20.2382 10 1.9536 10 10.0 1 49.208 9 33.4019 12 18.0 2 8.3682 11 1.8653 10 35.0 2 31.6904 9 6.7941 9 16.9475 10 18.0 2 23.0 2 36.0 2 0.125 3 4.9692 10 0.0452 9 0.0 0 2.125 4 29.0 2 0.0545 9 22.0 2]
Total: 550.8978999999999
Mean: 11.017958
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6416.3083594
Median total errors in population: 1562.0812999999998
Error averages by case: (319.4983766000009 11.427 217.55438480000058 10.728 243.25122549999867 11.624 308.35670029999983 11.456 207.10310209999994 5.923 254.21242329999868 10.544 247.86057320000094 10.933 206.54613070000002 5.745 283.15503229999985 10.416 252.53925270000053 11.469 228.24651250000028 5.92 323.23194500000136 10.773 228.65902050000142 11.304 327.87472090000136 11.07 218.65879249999992 6.124 208.8036804 5.845 227.13277209999973 6.128 253.85672749999992 9.128 224.87150970000062 11.597 230.23984700000034 10.171 208.37162610000001 5.295 234.79782769999946 9.482 234.4283910000003 5.902 283.8580399000001 10.351 217.94174509999996 5.903)
Error minima by case: (1.444 2 0.0837 6 0.7736 8 0.0152 2 0.0249 1 3.2482 2 0.2123 8 0.0 0 0.3057 1 0.0186 7 0.5246 1 0.3721 2 0.1443 1 0.115 2 0.9049 1 0.2232 1 2.0 1 0.125 1 0.0308 7 0.0142 1 0.0 0 0.1126 1 15.0 1 0.008 1 4.0 1)
Average genome size in population (length): 169.905
Average program size in population (points): 170.905
Average percent parens in population: 0.010
Minimum age in population: 0.0
Maximum age in population: 272.3935545281587
Average age in population: 230.587810028567
Median age in population: 269.9558976998253
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.731
Error (vector) diversity:			 0.777
Behavioral diversity:				 0.785
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 649994405
--- Timings ---
Current time: 1529615928988 milliseconds
Total Time:         954.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       280.4 seconds, 29.4%
Fitness Testing:    535.6 seconds, 56.1%
Report:             138.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 54234.2016
Test mean error for best: 27.11710
;;------------------------------
Outputs of best individual on training cases:
Correct output: 151.7102204206 | Program output: 132.2954408411
Correct output: 17.2828270025  | Program output: 14.5858528659 
Correct output: 23.1304489589  | Program output: 2.8922582115  
Correct output: 137.0785591646 | Program output: 139.0321183291
Correct output: -36.0917810332 | Program output: -26.0917810332
Correct output: -62.1419485102 | Program output: -12.9339750517
Correct output: 17.1520909798  | Program output: -16.2498318623
Correct output: -9.6087899132  | Program output: -27.6087899132
Correct output: 75.493217436   | Program output: 83.8614348719 
Correct output: 52.2037920383  | Program output: 54.0690587857 
Correct output: -79.8347132576 | Program output: -44.8347132576
Correct output: 154.815449196  | Program output: 186.5058983919
Correct output: -19.1443327626 | Program output: -12.350255696 
Correct output: 180.0725301747 | Program output: 197.0200603494
Correct output: -128.3399358578 | Program output: -146.3399358578
Correct output: -20.7768369154 | Program output: -43.7768369154
Correct output: -106.4972590774 | Program output: -142.4972590774
Correct output: 61.4129516245  | Program output: 61.2879516245 
Correct output: 38.5197606199  | Program output: 43.4889206046 
Correct output: -4.0857969085  | Program output: -4.1310113054 
Correct output: -93.8538349059 | Program output: -93.8538349059
Correct output: 27.7882694945  | Program output: 25.6632694945 
Correct output: -145.332361916 | Program output: -116.332361916
Correct output: 77.1794883917  | Program output: 77.2339767834 
Correct output: -67.6536129502 | Program output: -45.6536129502
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_295} {:instruction -73} {:instruction float_mod} {:instruction in1} {:instruction float_rot} {:instruction integer_shove} {:instruction float_inc} {:instruction float_mod} {:instruction integer_min} {:instruction in1} {:instruction float_add} {:instruction float_sub} {:instruction float_add} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_rot} {:instruction in2} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_add} {:instruction float_inc} {:instruction -88.88749634878776} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_add} {:instruction float_shove} {:instruction float_rot} {:instruction in2} {:instruction integer_div} {:instruction in2} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_add} {:instruction 73} {:instruction float_inc} {:instruction float_shove} {:instruction integer_pop} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction in2} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_shove} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_yank} {:instruction float_max} {:instruction float_div} {:instruction float_mod} {:instruction in2} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_sub} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_max} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_sub} {:instruction float_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction float_tan} {:instruction float_rot})
Best program: (tag_float_295 -73 float_mod in1 float_rot integer_shove float_inc float_mod integer_min in1 float_add float_sub float_add integer_shove float_inc integer_div integer_mult integer_inc float_rot in2 integer_mod float_dup_items float_add float_inc -88.88749634878776 float_max integer_dec float_yankdup float_add float_shove float_rot in2 integer_div in2 integer_div float_dup_items float_add 73 float_inc float_yankdup float_dup_items float_add 73 float_inc float_shove integer_pop in2 float_dup_items float_dup_items float_shove integer_yankdup integer_swap integer_swap integer_yankdup float_add integer_dup float_frominteger integer_shove float_inc float_yankdup integer_inc integer_rot integer_dup_times integer_shove in2 float_dup_items float_dup_items integer_yankdup integer_dup integer_dup integer_fromfloat float_rot in2 float_dup_items float_dup_items float_dec integer_dup float_swap float_inc in1 float_inc float_mod float_div float_dec float_dec float_sub float_dec float_dec float_dec float_dec integer_sub float_dec float_shove float_dec integer_yank float_dec float_dec integer_max integer_inc float_dec float_dec float_dec integer_max integer_yank float_dec float_dec float_sub float_dec float_dec integer_sub float_dec float_dup_items integer_shove float_dec float_dup_items float_dup_items float_dec float_dec in2 float_dup_items float_dec float_dec integer_dup_items integer_mult float_dec float_dec integer_dup_items float_dec float_dup_items float_dec float_dec float_dec float_dec integer_dup_items float_dec integer_dup_items float_dec integer_pop float_dec integer_dup_items float_dec float_dup_items float_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec integer_dup_items float_dec float_dec float_dec float_dec integer_mult float_yank float_max float_div float_mod in2 float_dup_items float_dec float_dec integer_dup_items float_rot float_dup_items float_dec float_dup_items float_max float_dec float_add float_dec float_sub float_sub integer_shove integer_max integer_mult float_dec float_dec integer_yank integer_dup_items float_dup_items integer_yank float_dec integer_yank float_sub float_div print_float integer_add integer_swap float_tan float_rot)
Errors: [19.4148 11 2.697 9 20.2382 10 1.9536 10 10.0 1 49.208 9 33.4019 12 18.0 2 8.3682 11 1.8653 10 35.0 2 31.6904 9 6.7941 9 16.9475 10 18.0 2 23.0 2 36.0 2 0.125 3 4.9692 10 0.0452 9 0.0 0 2.125 4 29.0 2 0.0545 9 22.0 2]
Total: 550.8978999999999
Mean: 11.017958
Genome size: 193
Size: 194
Percent parens: 0.005
--- Population Statistics ---
Average total errors in population: 6074.7956962
Median total errors in population: 1537.94395
Error averages by case: (303.29936740000056 11.281 198.54925640000033 10.62 221.74319389999857 11.528 292.15665110000015 11.295 203.6475149 5.482 234.77346369999867 10.414 228.94249350000104 10.885 203.74807520000002 5.338 267.7386743999994 10.364 230.6657056000004 11.374 223.80264840000012 5.456 307.91292670000075 10.679 207.16992510000125 11.179 311.1338539000014 10.911 209.14759680000006 5.58 205.84942909999992 5.385 219.67616849999985 5.6 253.00241999999992 8.974 206.25820770000084 11.516 208.6034889000001 10.055 199.79519110000007 4.74 212.7051921999993 9.399 224.88081270000023 5.361 267.0773522000004 10.263 213.40708679999983 5.43)
Error minima by case: (0.5154 2 0.0837 5 0.0578 8 0.0161 2 0.0918 1 2.2875 1 0.2123 7 0.0 0 0.3057 1 8.0E-4 7 1.1221 1 0.3721 2 0.1443 1 0.115 2 0.0 0 0.7768 1 0.0 0 0.0937 1 0.2555 5 0.0142 1 0.0 0 0.0625 1 22.0 1 0.008 1 5.3464 1)
Average genome size in population (length): 175.49
Average program size in population (points): 176.49
Average percent parens in population: 0.009
Minimum age in population: 0.0
Maximum age in population: 273.7300511965543
Average age in population: 243.4452013970621
Median age in population: 271.3455471112612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.753
Error (vector) diversity:			 0.793
Behavioral diversity:				 0.8
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 654380955
--- Timings ---
Current time: 1529615934761 milliseconds
Total Time:         960.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       281.8 seconds, 29.3%
Fitness Testing:    539.1 seconds, 56.1%
Report:             139.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
