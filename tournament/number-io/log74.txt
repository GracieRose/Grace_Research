Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-50.168006895992725 -37] -87.16800689599273]
Train Case:   1 | Input/Output: [[94.11030360045291 34] 128.1103036004529]
Train Case:   2 | Input/Output: [[-35.81291415909446 52] 16.18708584090554]
Train Case:   3 | Input/Output: [[-9.561651609843551 40] 30.43834839015645]
Train Case:   4 | Input/Output: [[-65.29242208608142 -87] -152.29242208608142]
Train Case:   5 | Input/Output: [[-53.9275419598158 -50] -103.9275419598158]
Train Case:   6 | Input/Output: [[16.42658499214849 68] 84.42658499214849]
Train Case:   7 | Input/Output: [[50.76512107305774 -97] -46.23487892694226]
Train Case:   8 | Input/Output: [[-95.05675017390776 98] 2.9432498260922415]
Train Case:   9 | Input/Output: [[-6.969635064865258 -79] -85.96963506486526]
Train Case:  10 | Input/Output: [[54.45647662101945 35] 89.45647662101945]
Train Case:  11 | Input/Output: [[46.45082141057111 35] 81.45082141057111]
Train Case:  12 | Input/Output: [[81.1473908151456 4] 85.1473908151456]
Train Case:  13 | Input/Output: [[28.543726037988392 -70] -41.45627396201161]
Train Case:  14 | Input/Output: [[-13.283655674403732 47] 33.71634432559627]
Train Case:  15 | Input/Output: [[-27.933535582589712 -54] -81.93353558258971]
Train Case:  16 | Input/Output: [[-24.802213657806476 31] 6.197786342193524]
Train Case:  17 | Input/Output: [[59.34084920011347 41] 100.34084920011347]
Train Case:  18 | Input/Output: [[-21.945588850695515 -100] -121.94558885069551]
Train Case:  19 | Input/Output: [[43.83204915904898 -30] 13.832049159048978]
Train Case:  20 | Input/Output: [[57.45714952969308 -50] 7.457149529693083]
Train Case:  21 | Input/Output: [[-79.61263871171438 -9] -88.61263871171438]
Train Case:  22 | Input/Output: [[-59.52511788657573 3] -56.52511788657573]
Train Case:  23 | Input/Output: [[8.306337055704006 26] 34.306337055704006]
Train Case:  24 | Input/Output: [[-42.46336107368642 9] -33.46336107368642]
Test Case:   0 | Input/Output: [[41.515120391588255 7] 48.515120391588255]
Test Case:   1 | Input/Output: [[39.36668333304564 -86] -46.63331666695436]
Test Case:   2 | Input/Output: [[98.44641274255878 -28] 70.44641274255878]
Test Case:   3 | Input/Output: [[53.93450047358348 -31] 22.934500473583483]
Test Case:   4 | Input/Output: [[5.663434190326285 93] 98.66343419032629]
Test Case:   5 | Input/Output: [[94.17121904989617 8] 102.17121904989617]
Test Case:   6 | Input/Output: [[15.558140034488588 25] 40.55814003448859]
Test Case:   7 | Input/Output: [[23.692657527808933 -28] -4.307342472191067]
Test Case:   8 | Input/Output: [[-20.670171120829266 12] -8.670171120829266]
Test Case:   9 | Input/Output: [[56.75719944347185 -11] 45.75719944347185]
Test Case:  10 | Input/Output: [[12.63878137103734 81] 93.63878137103734]
Test Case:  11 | Input/Output: [[-64.89646117939336 -9] -73.89646117939336]
Test Case:  12 | Input/Output: [[98.05002480856223 -2] 96.05002480856223]
Test Case:  13 | Input/Output: [[23.259637601633614 -27] -3.7403623983663863]
Test Case:  14 | Input/Output: [[28.034323164317215 -74] -45.965676835682785]
Test Case:  15 | Input/Output: [[-42.89130328744661 57] 14.108696712553389]
Test Case:  16 | Input/Output: [[-0.6853691287940933 81] 80.3146308712059]
Test Case:  17 | Input/Output: [[-20.667170736198088 -12] -32.66717073619809]
Test Case:  18 | Input/Output: [[20.675808473479634 -33] -12.324191526520366]
Test Case:  19 | Input/Output: [[66.14889977373483 26] 92.14889977373483]
Test Case:  20 | Input/Output: [[-46.97398742312542 -65] -111.97398742312542]
Test Case:  21 | Input/Output: [[73.29154249219786 -17] 56.29154249219786]
Test Case:  22 | Input/Output: [[-45.16912247775058 4] -41.16912247775058]
Test Case:  23 | Input/Output: [[-38.85496269091937 -74] -112.85496269091936]
Test Case:  24 | Input/Output: [[48.43286515433496 -97] -48.56713484566504]
Test Case:  25 | Input/Output: [[-15.800897090049432 85] 69.19910290995057]
Test Case:  26 | Input/Output: [[-2.6377410604120968 72] 69.3622589395879]
Test Case:  27 | Input/Output: [[62.77724756453267 -53] 9.777247564532672]
Test Case:  28 | Input/Output: [[-62.16697363011574 21] -41.16697363011574]
Test Case:  29 | Input/Output: [[-60.584110459278875 -6] -66.58411045927888]
Test Case:  30 | Input/Output: [[-71.24573872645972 -48] -119.24573872645972]
Test Case:  31 | Input/Output: [[46.6397300160159 -57] -10.360269983984097]
Test Case:  32 | Input/Output: [[-21.078381653211636 -57] -78.07838165321164]
Test Case:  33 | Input/Output: [[-82.55237822362677 -85] -167.55237822362676]
Test Case:  34 | Input/Output: [[62.22411690735271 97] 159.2241169073527]
Test Case:  35 | Input/Output: [[-47.55603949748015 40] -7.55603949748015]
Test Case:  36 | Input/Output: [[28.7898880949937 59] 87.7898880949937]
Test Case:  37 | Input/Output: [[-86.17531937648835 -84] -170.17531937648835]
Test Case:  38 | Input/Output: [[-21.701900487756816 -92] -113.70190048775682]
Test Case:  39 | Input/Output: [[-11.54028474846234 -33] -44.54028474846234]
Test Case:  40 | Input/Output: [[69.78403198124633 54] 123.78403198124633]
Test Case:  41 | Input/Output: [[-11.81201270570611 24] 12.18798729429389]
Test Case:  42 | Input/Output: [[-49.907632113804354 -62] -111.90763211380435]
Test Case:  43 | Input/Output: [[61.942278925128136 9] 70.94227892512814]
Test Case:  44 | Input/Output: [[-83.2694994164728 4] -79.2694994164728]
Test Case:  45 | Input/Output: [[-13.960466731183587 -27] -40.96046673118359]
Test Case:  46 | Input/Output: [[-14.331822004710105 -71] -85.3318220047101]
Test Case:  47 | Input/Output: [[96.81926652900958 -36] 60.81926652900958]
Test Case:  48 | Input/Output: [[-14.164337015936937 69] 54.83566298406306]
Test Case:  49 | Input/Output: [[-60.97220318595471 89] 28.02779681404529]
Test Case:  50 | Input/Output: [[23.034359258839388 93] 116.03435925883939]
Test Case:  51 | Input/Output: [[55.6770598119534 77] 132.6770598119534]
Test Case:  52 | Input/Output: [[-97.5482731739547 61] -36.5482731739547]
Test Case:  53 | Input/Output: [[-98.08134963684796 -96] -194.08134963684796]
Test Case:  54 | Input/Output: [[-73.36615686680344 -47] -120.36615686680344]
Test Case:  55 | Input/Output: [[18.336964322828806 80] 98.3369643228288]
Test Case:  56 | Input/Output: [[-96.58138836336153 41] -55.581388363361526]
Test Case:  57 | Input/Output: [[76.11620016705473 -32] 44.11620016705473]
Test Case:  58 | Input/Output: [[-73.8479479460348 -92] -165.8479479460348]
Test Case:  59 | Input/Output: [[31.050641776507945 -99] -67.94935822349206]
Test Case:  60 | Input/Output: [[81.7018438564065 57] 138.7018438564065]
Test Case:  61 | Input/Output: [[29.997180880643413 38] 67.99718088064341]
Test Case:  62 | Input/Output: [[-85.95503313835691 -15] -100.95503313835691]
Test Case:  63 | Input/Output: [[40.14424608348753 -56] -15.85575391651247]
Test Case:  64 | Input/Output: [[36.65269031686165 77] 113.65269031686165]
Test Case:  65 | Input/Output: [[14.235725573432973 -85] -70.76427442656703]
Test Case:  66 | Input/Output: [[-74.01800017294853 71] -3.0180001729485326]
Test Case:  67 | Input/Output: [[-56.11368372772119 -99] -155.1136837277212]
Test Case:  68 | Input/Output: [[-60.07645057210114 -44] -104.07645057210114]
Test Case:  69 | Input/Output: [[-23.051230780957184 80] 56.948769219042816]
Test Case:  70 | Input/Output: [[-82.40674653105259 -56] -138.4067465310526]
Test Case:  71 | Input/Output: [[16.97682098077655 59] 75.97682098077655]
Test Case:  72 | Input/Output: [[-66.86782800313607 10] -56.86782800313607]
Test Case:  73 | Input/Output: [[69.37697917248192 66] 135.37697917248192]
Test Case:  74 | Input/Output: [[-41.102412038857715 0] -41.102412038857715]
Test Case:  75 | Input/Output: [[42.80156138643346 -83] -40.19843861356654]
Test Case:  76 | Input/Output: [[-14.291329011468108 11] -3.2913290114681075]
Test Case:  77 | Input/Output: [[95.40987817277443 98] 193.40987817277443]
Test Case:  78 | Input/Output: [[-59.59161973974694 -58] -117.59161973974693]
Test Case:  79 | Input/Output: [[-88.52107127625052 83] -5.521071276250524]
Test Case:  80 | Input/Output: [[-53.28974795956165 -74] -127.28974795956165]
Test Case:  81 | Input/Output: [[-19.97254577739838 -73] -92.97254577739838]
Test Case:  82 | Input/Output: [[-69.42465751870031 42] -27.424657518700315]
Test Case:  83 | Input/Output: [[-21.21640333472459 -74] -95.21640333472459]
Test Case:  84 | Input/Output: [[-7.146099138558412 88] 80.85390086144159]
Test Case:  85 | Input/Output: [[-34.763006168067335 -17] -51.763006168067335]
Test Case:  86 | Input/Output: [[-83.83413022541276 -2] -85.83413022541276]
Test Case:  87 | Input/Output: [[-57.220597310143326 8] -49.220597310143326]
Test Case:  88 | Input/Output: [[27.307223191610632 43] 70.30722319161063]
Test Case:  89 | Input/Output: [[-71.22044740351589 -72] -143.2204474035159]
Test Case:  90 | Input/Output: [[48.43555250246584 14] 62.43555250246584]
Test Case:  91 | Input/Output: [[-94.59973508022857 -80] -174.59973508022858]
Test Case:  92 | Input/Output: [[-44.60205385171165 32] -12.602053851711652]
Test Case:  93 | Input/Output: [[-64.01909675482779 3] -61.019096754827785]
Test Case:  94 | Input/Output: [[72.4927962180634 53] 125.4927962180634]
Test Case:  95 | Input/Output: [[-37.203457986256616 22] -15.203457986256616]
Test Case:  96 | Input/Output: [[-12.952428129090563 -40] -52.95242812909056]
Test Case:  97 | Input/Output: [[-97.83816891267753 33] -64.83816891267753]
Test Case:  98 | Input/Output: [[-37.38553675885312 23] -14.38553675885312]
Test Case:  99 | Input/Output: [[-40.207406685145216 51] 10.792593314854784]
Test Case: 100 | Input/Output: [[-45.571658330565825 -49] -94.57165833056582]
Test Case: 101 | Input/Output: [[-3.2966895098464732 -8] -11.296689509846473]
Test Case: 102 | Input/Output: [[-67.50826106517553 41] -26.50826106517553]
Test Case: 103 | Input/Output: [[36.565819630680096 -94] -57.434180369319904]
Test Case: 104 | Input/Output: [[-16.716604360185954 89] 72.28339563981405]
Test Case: 105 | Input/Output: [[-4.05735927053199 76] 71.94264072946801]
Test Case: 106 | Input/Output: [[21.335127165423472 7] 28.335127165423472]
Test Case: 107 | Input/Output: [[-91.84190089353179 -5] -96.84190089353179]
Test Case: 108 | Input/Output: [[32.5139168512043 -48] -15.4860831487957]
Test Case: 109 | Input/Output: [[63.41163852953636 12] 75.41163852953636]
Test Case: 110 | Input/Output: [[-11.574995247376236 -68] -79.57499524737624]
Test Case: 111 | Input/Output: [[-36.665739795856766 -100] -136.66573979585678]
Test Case: 112 | Input/Output: [[-58.153523782483795 -31] -89.1535237824838]
Test Case: 113 | Input/Output: [[-10.41768441159465 47] 36.58231558840535]
Test Case: 114 | Input/Output: [[-66.97846225190321 -25] -91.97846225190321]
Test Case: 115 | Input/Output: [[32.255504248698514 -95] -62.744495751301486]
Test Case: 116 | Input/Output: [[68.61457055367669 -69] -0.38542944632331455]
Test Case: 117 | Input/Output: [[30.857634312811285 26] 56.857634312811285]
Test Case: 118 | Input/Output: [[32.880518724992555 59] 91.88051872499256]
Test Case: 119 | Input/Output: [[-39.03844677064286 -23] -62.03844677064286]
Test Case: 120 | Input/Output: [[47.30446265008254 -94] -46.69553734991746]
Test Case: 121 | Input/Output: [[-75.69349441537014 -37] -112.69349441537014]
Test Case: 122 | Input/Output: [[-96.40562123790039 56] -40.40562123790039]
Test Case: 123 | Input/Output: [[82.58293071631851 90] 172.58293071631851]
Test Case: 124 | Input/Output: [[-1.404159424763506 95] 93.5958405752365]
Test Case: 125 | Input/Output: [[-61.957140926651476 64] 2.0428590733485237]
Test Case: 126 | Input/Output: [[-73.14436585098964 -84] -157.14436585098963]
Test Case: 127 | Input/Output: [[-3.8119872670592514 -81] -84.81198726705925]
Test Case: 128 | Input/Output: [[-42.038775907856696 -54] -96.03877590785669]
Test Case: 129 | Input/Output: [[56.019487525353156 -30] 26.019487525353156]
Test Case: 130 | Input/Output: [[-45.73523391064318 -4] -49.73523391064318]
Test Case: 131 | Input/Output: [[-27.359765726644184 -76] -103.35976572664418]
Test Case: 132 | Input/Output: [[41.089539239716856 95] 136.08953923971686]
Test Case: 133 | Input/Output: [[-45.324953531068466 97] 51.675046468931534]
Test Case: 134 | Input/Output: [[-52.02703497700427 -91] -143.02703497700426]
Test Case: 135 | Input/Output: [[43.32069326761007 46] 89.32069326761007]
Test Case: 136 | Input/Output: [[-73.50885949578606 -37] -110.50885949578606]
Test Case: 137 | Input/Output: [[57.064370578508715 41] 98.06437057850871]
Test Case: 138 | Input/Output: [[0.5386842426337921 82] 82.53868424263379]
Test Case: 139 | Input/Output: [[-69.09906909443662 19] -50.099069094436615]
Test Case: 140 | Input/Output: [[-78.44973348475703 -35] -113.44973348475703]
Test Case: 141 | Input/Output: [[-69.53480816727784 68] -1.5348081672778449]
Test Case: 142 | Input/Output: [[94.37905993821391 31] 125.37905993821391]
Test Case: 143 | Input/Output: [[-83.09072022125932 33] -50.09072022125932]
Test Case: 144 | Input/Output: [[-65.21299114831285 -81] -146.21299114831285]
Test Case: 145 | Input/Output: [[34.79271976143559 66] 100.79271976143559]
Test Case: 146 | Input/Output: [[53.414214414767315 -14] 39.414214414767315]
Test Case: 147 | Input/Output: [[8.970775563654087 -70] -61.02922443634591]
Test Case: 148 | Input/Output: [[62.65153878171304 -41] 21.651538781713043]
Test Case: 149 | Input/Output: [[-58.873618110781266 -75] -133.87361811078125]
Test Case: 150 | Input/Output: [[-19.350644434966952 -38] -57.35064443496695]
Test Case: 151 | Input/Output: [[89.67398625833974 -80] 9.673986258339738]
Test Case: 152 | Input/Output: [[-27.850109049427687 -63] -90.85010904942769]
Test Case: 153 | Input/Output: [[57.9186686086112 65] 122.9186686086112]
Test Case: 154 | Input/Output: [[24.560946567200787 52] 76.56094656720079]
Test Case: 155 | Input/Output: [[77.68902242165177 89] 166.68902242165177]
Test Case: 156 | Input/Output: [[35.73664027342923 16] 51.73664027342923]
Test Case: 157 | Input/Output: [[-22.903961444384336 -2] -24.903961444384336]
Test Case: 158 | Input/Output: [[17.332668417442136 57] 74.33266841744214]
Test Case: 159 | Input/Output: [[72.59253602311006 -61] 11.592536023110057]
Test Case: 160 | Input/Output: [[48.07546961966736 -74] -25.92453038033264]
Test Case: 161 | Input/Output: [[20.515727986162787 -1] 19.515727986162787]
Test Case: 162 | Input/Output: [[-94.25940058288829 90] -4.25940058288829]
Test Case: 163 | Input/Output: [[-11.245091954559427 -60] -71.24509195455943]
Test Case: 164 | Input/Output: [[-53.688577472969826 -69] -122.68857747296983]
Test Case: 165 | Input/Output: [[44.58770870589473 67] 111.58770870589473]
Test Case: 166 | Input/Output: [[-30.953943535852787 14] -16.953943535852787]
Test Case: 167 | Input/Output: [[41.14734407692225 -29] 12.147344076922252]
Test Case: 168 | Input/Output: [[29.19602214595963 -37] -7.803977854040369]
Test Case: 169 | Input/Output: [[47.2835392763628 -97] -49.7164607236372]
Test Case: 170 | Input/Output: [[35.213718199756926 -20] 15.213718199756926]
Test Case: 171 | Input/Output: [[96.88123383447666 -8] 88.88123383447666]
Test Case: 172 | Input/Output: [[-33.35669982417113 81] 47.64330017582887]
Test Case: 173 | Input/Output: [[-90.47618266268844 96] 5.523817337311556]
Test Case: 174 | Input/Output: [[-79.74247114513626 -50] -129.74247114513628]
Test Case: 175 | Input/Output: [[-67.80931669722875 -27] -94.80931669722875]
Test Case: 176 | Input/Output: [[-92.91353510862797 -49] -141.91353510862797]
Test Case: 177 | Input/Output: [[75.91997229360513 21] 96.91997229360513]
Test Case: 178 | Input/Output: [[-21.305830823809487 -68] -89.30583082380949]
Test Case: 179 | Input/Output: [[-23.1190500297011 -100] -123.1190500297011]
Test Case: 180 | Input/Output: [[18.735740111665507 -17] 1.735740111665507]
Test Case: 181 | Input/Output: [[-35.3309452299025 59] 23.669054770097503]
Test Case: 182 | Input/Output: [[-22.087924489391625 2] -20.087924489391625]
Test Case: 183 | Input/Output: [[-20.769063310366292 -72] -92.76906331036629]
Test Case: 184 | Input/Output: [[-94.50085795156558 -23] -117.50085795156558]
Test Case: 185 | Input/Output: [[-77.54790006121402 77] -0.5479000612140226]
Test Case: 186 | Input/Output: [[-84.29726216184916 -90] -174.29726216184918]
Test Case: 187 | Input/Output: [[-85.73881235835785 -63] -148.73881235835785]
Test Case: 188 | Input/Output: [[-18.43520684782905 79] 60.56479315217095]
Test Case: 189 | Input/Output: [[-39.89525970333156 -12] -51.89525970333156]
Test Case: 190 | Input/Output: [[-4.594775217047527 94] 89.40522478295247]
Test Case: 191 | Input/Output: [[14.573718154038161 -77] -62.42628184596184]
Test Case: 192 | Input/Output: [[-96.79732337725872 20] -76.79732337725872]
Test Case: 193 | Input/Output: [[-67.07119792370857 -77] -144.07119792370855]
Test Case: 194 | Input/Output: [[81.66259204629159 54] 135.6625920462916]
Test Case: 195 | Input/Output: [[47.97713492754835 11] 58.97713492754835]
Test Case: 196 | Input/Output: [[-18.016775629202982 1] -17.016775629202982]
Test Case: 197 | Input/Output: [[-26.348203892551297 54] 27.651796107448703]
Test Case: 198 | Input/Output: [[-46.17206073231539 -68] -114.17206073231539]
Test Case: 199 | Input/Output: [[-14.590842297911706 17] 2.4091577020882937]
Test Case: 200 | Input/Output: [[-20.678278492840292 48] 27.321721507159708]
Test Case: 201 | Input/Output: [[93.40028379811227 -4] 89.40028379811227]
Test Case: 202 | Input/Output: [[-79.80834253883582 -42] -121.80834253883582]
Test Case: 203 | Input/Output: [[-89.56243103415488 -19] -108.56243103415488]
Test Case: 204 | Input/Output: [[-20.687763912195493 42] 21.312236087804507]
Test Case: 205 | Input/Output: [[-13.677601418936234 73] 59.322398581063766]
Test Case: 206 | Input/Output: [[-15.821221011293375 83] 67.17877898870663]
Test Case: 207 | Input/Output: [[97.44230807148773 72] 169.44230807148773]
Test Case: 208 | Input/Output: [[64.62328232477907 73] 137.62328232477907]
Test Case: 209 | Input/Output: [[57.63201158713903 12] 69.63201158713903]
Test Case: 210 | Input/Output: [[16.14862532403481 -100] -83.85137467596519]
Test Case: 211 | Input/Output: [[31.818489108477763 -34] -2.1815108915222368]
Test Case: 212 | Input/Output: [[-16.159028395173493 20] 3.840971604826507]
Test Case: 213 | Input/Output: [[71.77789800024206 14] 85.77789800024206]
Test Case: 214 | Input/Output: [[88.26574452893391 83] 171.2657445289339]
Test Case: 215 | Input/Output: [[4.06081479829561 70] 74.06081479829561]
Test Case: 216 | Input/Output: [[80.59824499366454 21] 101.59824499366454]
Test Case: 217 | Input/Output: [[5.34581319376575 -56] -50.65418680623425]
Test Case: 218 | Input/Output: [[-56.38029232282258 93] 36.61970767717742]
Test Case: 219 | Input/Output: [[2.9301526888668974 -46] -43.0698473111331]
Test Case: 220 | Input/Output: [[-88.25448688731221 -3] -91.25448688731221]
Test Case: 221 | Input/Output: [[5.574543556867212 19] 24.574543556867212]
Test Case: 222 | Input/Output: [[69.48873522384113 -23] 46.48873522384113]
Test Case: 223 | Input/Output: [[-25.042649060154588 -1] -26.042649060154588]
Test Case: 224 | Input/Output: [[-58.200806146209814 44] -14.200806146209814]
Test Case: 225 | Input/Output: [[-18.066460260275235 74] 55.933539739724765]
Test Case: 226 | Input/Output: [[-50.4032933792782 -54] -104.40329337927821]
Test Case: 227 | Input/Output: [[87.93013501559673 3] 90.93013501559673]
Test Case: 228 | Input/Output: [[87.24779502469991 -89] -1.7522049753000886]
Test Case: 229 | Input/Output: [[91.60756543201094 72] 163.60756543201094]
Test Case: 230 | Input/Output: [[-95.00604301756157 -71] -166.00604301756158]
Test Case: 231 | Input/Output: [[26.54603892340876 8] 34.54603892340876]
Test Case: 232 | Input/Output: [[-15.85787392198172 57] 41.14212607801828]
Test Case: 233 | Input/Output: [[-33.48335725001654 68] 34.51664274998346]
Test Case: 234 | Input/Output: [[3.0148007343721446 4] 7.014800734372145]
Test Case: 235 | Input/Output: [[20.15053559733711 66] 86.15053559733711]
Test Case: 236 | Input/Output: [[-71.08204664377604 88] 16.91795335622396]
Test Case: 237 | Input/Output: [[49.09176483943688 25] 74.09176483943688]
Test Case: 238 | Input/Output: [[-39.162209203232614 32] -7.162209203232614]
Test Case: 239 | Input/Output: [[-35.7980431067584 -48] -83.7980431067584]
Test Case: 240 | Input/Output: [[-20.936343047557088 -59] -79.93634304755709]
Test Case: 241 | Input/Output: [[72.31582368562096 -67] 5.3158236856209555]
Test Case: 242 | Input/Output: [[24.597582030732326 42] 66.59758203073233]
Test Case: 243 | Input/Output: [[-74.39247209587094 27] -47.39247209587094]
Test Case: 244 | Input/Output: [[-87.24826455079346 -80] -167.24826455079346]
Test Case: 245 | Input/Output: [[-75.16319830777573 59] -16.16319830777573]
Test Case: 246 | Input/Output: [[-80.93131641283466 -93] -173.93131641283466]
Test Case: 247 | Input/Output: [[20.197169534898933 72] 92.19716953489893]
Test Case: 248 | Input/Output: [[28.853468126934075 -1] 27.853468126934075]
Test Case: 249 | Input/Output: [[82.33779780251382 -54] 28.33779780251382]
Test Case: 250 | Input/Output: [[10.659650698275243 -73] -62.34034930172476]
Test Case: 251 | Input/Output: [[99.68046423901177 -12] 87.68046423901177]
Test Case: 252 | Input/Output: [[-75.21641400560569 -65] -140.21641400560569]
Test Case: 253 | Input/Output: [[29.102352580099847 -7] 22.102352580099847]
Test Case: 254 | Input/Output: [[51.50463633814579 26] 77.50463633814579]
Test Case: 255 | Input/Output: [[83.25032723334985 -21] 62.25032723334985]
Test Case: 256 | Input/Output: [[51.231070187081315 70] 121.23107018708131]
Test Case: 257 | Input/Output: [[-54.913934889740055 90] 35.086065110259945]
Test Case: 258 | Input/Output: [[-36.312818161887336 -100] -136.31281816188732]
Test Case: 259 | Input/Output: [[-67.26855974502826 -61] -128.26855974502826]
Test Case: 260 | Input/Output: [[73.29135844462002 -36] 37.291358444620016]
Test Case: 261 | Input/Output: [[43.54032008545323 -67] -23.45967991454677]
Test Case: 262 | Input/Output: [[78.55289723422837 -87] -8.447102765771632]
Test Case: 263 | Input/Output: [[-54.79630096348351 -35] -89.7963009634835]
Test Case: 264 | Input/Output: [[14.622451805305545 79] 93.62245180530554]
Test Case: 265 | Input/Output: [[-67.33306370590958 -44] -111.33306370590958]
Test Case: 266 | Input/Output: [[-17.85027377758206 66] 48.14972622241794]
Test Case: 267 | Input/Output: [[-71.65315528011442 21] -50.65315528011442]
Test Case: 268 | Input/Output: [[-38.44372408803869 81] 42.55627591196131]
Test Case: 269 | Input/Output: [[-76.38005573074464 5] -71.38005573074464]
Test Case: 270 | Input/Output: [[28.76127391279914 53] 81.76127391279914]
Test Case: 271 | Input/Output: [[72.8859077847089 97] 169.8859077847089]
Test Case: 272 | Input/Output: [[92.09548444135916 100] 192.09548444135916]
Test Case: 273 | Input/Output: [[-8.704924899303506 -97] -105.7049248993035]
Test Case: 274 | Input/Output: [[-47.51250016143334 -78] -125.51250016143334]
Test Case: 275 | Input/Output: [[-39.87821577830386 -14] -53.87821577830386]
Test Case: 276 | Input/Output: [[2.8172460071219803 8] 10.81724600712198]
Test Case: 277 | Input/Output: [[10.198301628865408 -21] -10.801698371134592]
Test Case: 278 | Input/Output: [[98.13586535882769 28] 126.13586535882769]
Test Case: 279 | Input/Output: [[-78.39975584235773 51] -27.399755842357735]
Test Case: 280 | Input/Output: [[-21.349761481136483 -60] -81.34976148113648]
Test Case: 281 | Input/Output: [[-46.36021263650787 43] -3.3602126365078675]
Test Case: 282 | Input/Output: [[-16.97922475774422 42] 25.02077524225578]
Test Case: 283 | Input/Output: [[83.06900560355749 90] 173.06900560355749]
Test Case: 284 | Input/Output: [[-25.50537941592495 97] 71.49462058407505]
Test Case: 285 | Input/Output: [[-69.88218234375378 1] -68.88218234375378]
Test Case: 286 | Input/Output: [[-84.16005674047604 46] -38.16005674047604]
Test Case: 287 | Input/Output: [[-1.909919928244392 90] 88.09008007175561]
Test Case: 288 | Input/Output: [[25.626431538878023 51] 76.62643153887802]
Test Case: 289 | Input/Output: [[-16.283723261688948 28] 11.716276738311052]
Test Case: 290 | Input/Output: [[16.47387622392324 -22] -5.5261237760767585]
Test Case: 291 | Input/Output: [[-27.204059874817105 -43] -70.2040598748171]
Test Case: 292 | Input/Output: [[5.697602340949118 55] 60.69760234094912]
Test Case: 293 | Input/Output: [[-38.85708584779957 83] 44.14291415220043]
Test Case: 294 | Input/Output: [[-75.34496036677743 -67] -142.34496036677743]
Test Case: 295 | Input/Output: [[-32.03935165724303 -15] -47.03935165724303]
Test Case: 296 | Input/Output: [[91.05789728395348 -21] 70.05789728395348]
Test Case: 297 | Input/Output: [[73.96257023684115 83] 156.96257023684115]
Test Case: 298 | Input/Output: [[-73.63063193661657 -73] -146.63063193661657]
Test Case: 299 | Input/Output: [[-50.81926242308206 -62] -112.81926242308205]
Test Case: 300 | Input/Output: [[-34.82761639242452 -7] -41.82761639242452]
Test Case: 301 | Input/Output: [[-70.48807592185344 92] 21.511924078146563]
Test Case: 302 | Input/Output: [[92.77696308779807 -18] 74.77696308779807]
Test Case: 303 | Input/Output: [[-84.34849412814151 19] -65.34849412814151]
Test Case: 304 | Input/Output: [[28.042691532779656 -89] -60.957308467220344]
Test Case: 305 | Input/Output: [[16.192551798341754 -53] -36.80744820165825]
Test Case: 306 | Input/Output: [[10.026172685299144 -80] -69.97382731470086]
Test Case: 307 | Input/Output: [[-48.88402012067306 58] 9.115979879326943]
Test Case: 308 | Input/Output: [[-57.97148864428423 48] -9.971488644284229]
Test Case: 309 | Input/Output: [[-54.28255349841389 -38] -92.28255349841389]
Test Case: 310 | Input/Output: [[83.25931203173926 -56] 27.259312031739256]
Test Case: 311 | Input/Output: [[59.97614774503924 30] 89.97614774503924]
Test Case: 312 | Input/Output: [[99.69706001135071 68] 167.69706001135071]
Test Case: 313 | Input/Output: [[-13.12041933100933 7] -6.12041933100933]
Test Case: 314 | Input/Output: [[81.03745345954187 -5] 76.03745345954187]
Test Case: 315 | Input/Output: [[96.07422050715027 25] 121.07422050715027]
Test Case: 316 | Input/Output: [[73.87012943893637 -77] -3.129870561063626]
Test Case: 317 | Input/Output: [[63.33629716487425 48] 111.33629716487425]
Test Case: 318 | Input/Output: [[73.47943911023333 36] 109.47943911023333]
Test Case: 319 | Input/Output: [[-67.44034147386196 -85] -152.44034147386196]
Test Case: 320 | Input/Output: [[69.93470992855956 -59] 10.934709928559556]
Test Case: 321 | Input/Output: [[28.94859587201205 72] 100.94859587201205]
Test Case: 322 | Input/Output: [[94.40762240894094 -69] 25.407622408940938]
Test Case: 323 | Input/Output: [[-60.04849167926298 -40] -100.04849167926298]
Test Case: 324 | Input/Output: [[19.16953626333668 -83] -63.83046373666332]
Test Case: 325 | Input/Output: [[-71.27401383062819 -96] -167.27401383062818]
Test Case: 326 | Input/Output: [[38.52766786210745 87] 125.52766786210745]
Test Case: 327 | Input/Output: [[-35.17786426653903 1] -34.17786426653903]
Test Case: 328 | Input/Output: [[-65.16327926020764 -76] -141.16327926020764]
Test Case: 329 | Input/Output: [[77.3565287086673 66] 143.3565287086673]
Test Case: 330 | Input/Output: [[-0.15957332326021856 18] 17.84042667673978]
Test Case: 331 | Input/Output: [[-29.117797144481017 -17] -46.11779714448102]
Test Case: 332 | Input/Output: [[-17.457117627978278 -77] -94.45711762797828]
Test Case: 333 | Input/Output: [[11.146326275874003 -91] -79.853673724126]
Test Case: 334 | Input/Output: [[-37.068688509835624 -85] -122.06868850983562]
Test Case: 335 | Input/Output: [[-83.73447902948874 -30] -113.73447902948874]
Test Case: 336 | Input/Output: [[6.995998571876655 -8] -1.0040014281233454]
Test Case: 337 | Input/Output: [[29.512510487475964 13] 42.512510487475964]
Test Case: 338 | Input/Output: [[77.83642458187325 26] 103.83642458187325]
Test Case: 339 | Input/Output: [[48.73032464826295 -32] 16.73032464826295]
Test Case: 340 | Input/Output: [[50.74644308173421 100] 150.7464430817342]
Test Case: 341 | Input/Output: [[50.74988658766745 88] 138.74988658766745]
Test Case: 342 | Input/Output: [[21.585068285239586 -30] -8.414931714760414]
Test Case: 343 | Input/Output: [[-78.9699536891913 -11] -89.9699536891913]
Test Case: 344 | Input/Output: [[14.438723173612743 5] 19.438723173612743]
Test Case: 345 | Input/Output: [[25.889058080930383 89] 114.88905808093038]
Test Case: 346 | Input/Output: [[4.099492527630673 -5] -0.9005074723693269]
Test Case: 347 | Input/Output: [[-91.78568962944257 -51] -142.78568962944257]
Test Case: 348 | Input/Output: [[21.940046527240597 -34] -12.059953472759403]
Test Case: 349 | Input/Output: [[45.05859365523074 75] 120.05859365523074]
Test Case: 350 | Input/Output: [[5.372788839981666 -30] -24.627211160018334]
Test Case: 351 | Input/Output: [[-71.18399055365873 -36] -107.18399055365873]
Test Case: 352 | Input/Output: [[-35.67033966798161 14] -21.670339667981608]
Test Case: 353 | Input/Output: [[-19.79237608898687 35] 15.20762391101313]
Test Case: 354 | Input/Output: [[-25.310212773176914 -32] -57.310212773176914]
Test Case: 355 | Input/Output: [[-72.51317102652712 6] -66.51317102652712]
Test Case: 356 | Input/Output: [[-10.997646662798985 -68] -78.99764666279899]
Test Case: 357 | Input/Output: [[-58.36432680002579 12] -46.36432680002579]
Test Case: 358 | Input/Output: [[68.42827926063245 46] 114.42827926063245]
Test Case: 359 | Input/Output: [[-90.1878118754019 -79] -169.1878118754019]
Test Case: 360 | Input/Output: [[53.36053403089568 47] 100.36053403089568]
Test Case: 361 | Input/Output: [[43.10755653255919 -35] 8.107556532559187]
Test Case: 362 | Input/Output: [[-83.1746558941905 83] -0.17465589419049365]
Test Case: 363 | Input/Output: [[-16.560561133667846 -29] -45.560561133667846]
Test Case: 364 | Input/Output: [[-46.284759201751214 -4] -50.284759201751214]
Test Case: 365 | Input/Output: [[-45.043305395606595 95] 49.956694604393405]
Test Case: 366 | Input/Output: [[-83.10237308309596 -85] -168.10237308309596]
Test Case: 367 | Input/Output: [[-30.998122230957065 71] 40.001877769042935]
Test Case: 368 | Input/Output: [[92.80508453846818 6] 98.80508453846818]
Test Case: 369 | Input/Output: [[12.993574875168463 -85] -72.00642512483154]
Test Case: 370 | Input/Output: [[-60.640623745323396 -48] -108.6406237453234]
Test Case: 371 | Input/Output: [[-74.53548749903933 -83] -157.53548749903933]
Test Case: 372 | Input/Output: [[13.231936014923647 -52] -38.76806398507635]
Test Case: 373 | Input/Output: [[65.77591696724619 -96] -30.22408303275381]
Test Case: 374 | Input/Output: [[80.75708049268164 -94] -13.242919507318362]
Test Case: 375 | Input/Output: [[-41.51626695244626 -10] -51.51626695244626]
Test Case: 376 | Input/Output: [[57.81830876552269 -63] -5.181691234477313]
Test Case: 377 | Input/Output: [[84.32292244900657 -96] -11.677077550993431]
Test Case: 378 | Input/Output: [[-51.231199728974545 91] 39.768800271025455]
Test Case: 379 | Input/Output: [[97.87766609919063 52] 149.87766609919063]
Test Case: 380 | Input/Output: [[34.69634919058524 -29] 5.696349190585238]
Test Case: 381 | Input/Output: [[65.21691396711171 -43] 22.216913967111708]
Test Case: 382 | Input/Output: [[74.79046316111612 92] 166.79046316111612]
Test Case: 383 | Input/Output: [[37.6860186861509 -31] 6.686018686150902]
Test Case: 384 | Input/Output: [[-26.88502526986754 70] 43.11497473013246]
Test Case: 385 | Input/Output: [[-25.700820332747014 -37] -62.700820332747014]
Test Case: 386 | Input/Output: [[-47.66240502108974 -85] -132.66240502108974]
Test Case: 387 | Input/Output: [[31.41644218328753 24] 55.41644218328753]
Test Case: 388 | Input/Output: [[30.40642713764518 -2] 28.40642713764518]
Test Case: 389 | Input/Output: [[12.781121007646163 -48] -35.21887899235384]
Test Case: 390 | Input/Output: [[-5.1927265404385 -75] -80.1927265404385]
Test Case: 391 | Input/Output: [[50.77353473932516 -58] -7.226465260674843]
Test Case: 392 | Input/Output: [[26.506002988007054 -68] -41.493997011992946]
Test Case: 393 | Input/Output: [[48.68828294491411 62] 110.6882829449141]
Test Case: 394 | Input/Output: [[-29.110596202276923 -65] -94.11059620227692]
Test Case: 395 | Input/Output: [[-48.27840416190414 60] 11.721595838095858]
Test Case: 396 | Input/Output: [[-34.199211346499595 83] 48.800788653500405]
Test Case: 397 | Input/Output: [[-71.99992546960954 18] -53.999925469609536]
Test Case: 398 | Input/Output: [[-14.557139279085618 -53] -67.55713927908562]
Test Case: 399 | Input/Output: [[-36.555078818755504 92] 55.444921181244496]
Test Case: 400 | Input/Output: [[6.935079346468271 -4] 2.935079346468271]
Test Case: 401 | Input/Output: [[21.173067930361483 45] 66.17306793036148]
Test Case: 402 | Input/Output: [[-41.613202007811736 56] 14.386797992188264]
Test Case: 403 | Input/Output: [[4.329364838440426 54] 58.329364838440426]
Test Case: 404 | Input/Output: [[72.54608488620272 -78] -5.4539151137972794]
Test Case: 405 | Input/Output: [[-25.9690005241593 -46] -71.9690005241593]
Test Case: 406 | Input/Output: [[71.44120196850696 93] 164.44120196850696]
Test Case: 407 | Input/Output: [[87.69741474368183 -90] -2.3025852563181672]
Test Case: 408 | Input/Output: [[-7.583480915925932 -37] -44.58348091592593]
Test Case: 409 | Input/Output: [[31.178985603878942 5] 36.17898560387894]
Test Case: 410 | Input/Output: [[-92.85186771721658 34] -58.85186771721658]
Test Case: 411 | Input/Output: [[50.60021315576017 -89] -38.39978684423983]
Test Case: 412 | Input/Output: [[17.974818302473494 48] 65.9748183024735]
Test Case: 413 | Input/Output: [[-95.93925189950141 -75] -170.93925189950141]
Test Case: 414 | Input/Output: [[-18.071947991320144 -8] -26.071947991320144]
Test Case: 415 | Input/Output: [[88.26179290757591 -84] 4.261792907575909]
Test Case: 416 | Input/Output: [[18.727529391452435 38] 56.727529391452435]
Test Case: 417 | Input/Output: [[-55.42606155825678 86] 30.573938441743223]
Test Case: 418 | Input/Output: [[-61.583290580835936 -90] -151.58329058083592]
Test Case: 419 | Input/Output: [[-60.426676829655875 -87] -147.4266768296559]
Test Case: 420 | Input/Output: [[-96.86700650573717 -38] -134.86700650573715]
Test Case: 421 | Input/Output: [[24.36053002233119 73] 97.36053002233119]
Test Case: 422 | Input/Output: [[93.35357401263124 88] 181.35357401263124]
Test Case: 423 | Input/Output: [[-80.83515457112667 -65] -145.83515457112668]
Test Case: 424 | Input/Output: [[1.4662147164705033 88] 89.4662147164705]
Test Case: 425 | Input/Output: [[81.08367398193829 23] 104.08367398193829]
Test Case: 426 | Input/Output: [[79.06114875348169 -81] -1.9388512465183112]
Test Case: 427 | Input/Output: [[62.00412518875416 -95] -32.99587481124584]
Test Case: 428 | Input/Output: [[-26.93747269882543 -5] -31.93747269882543]
Test Case: 429 | Input/Output: [[32.12386543570662 -75] -42.87613456429338]
Test Case: 430 | Input/Output: [[59.443002223021296 58] 117.4430022230213]
Test Case: 431 | Input/Output: [[-62.266193193002636 -42] -104.26619319300264]
Test Case: 432 | Input/Output: [[-87.92003446030053 -8] -95.92003446030053]
Test Case: 433 | Input/Output: [[-21.772979599407734 -49] -70.77297959940773]
Test Case: 434 | Input/Output: [[-80.28758624668254 -90] -170.28758624668254]
Test Case: 435 | Input/Output: [[94.84472327597331 -45] 49.84472327597331]
Test Case: 436 | Input/Output: [[16.865861413882214 -75] -58.134138586117786]
Test Case: 437 | Input/Output: [[-74.95921289048533 -34] -108.95921289048533]
Test Case: 438 | Input/Output: [[-8.994413040325043 -5] -13.994413040325043]
Test Case: 439 | Input/Output: [[78.97531588546445 42] 120.97531588546445]
Test Case: 440 | Input/Output: [[-1.2982943176741912 -53] -54.29829431767419]
Test Case: 441 | Input/Output: [[22.689089255103625 1] 23.689089255103625]
Test Case: 442 | Input/Output: [[-57.68139279567852 -33] -90.68139279567852]
Test Case: 443 | Input/Output: [[75.83890701856114 -31] 44.838907018561144]
Test Case: 444 | Input/Output: [[87.67084083162052 54] 141.67084083162052]
Test Case: 445 | Input/Output: [[-4.318998381449489 7] 2.6810016185505106]
Test Case: 446 | Input/Output: [[-24.0539777021377 73] 48.9460222978623]
Test Case: 447 | Input/Output: [[-39.09700200695683 -28] -67.09700200695683]
Test Case: 448 | Input/Output: [[65.2301494019137 -85] -19.769850598086293]
Test Case: 449 | Input/Output: [[-87.39228057673192 -96] -183.39228057673193]
Test Case: 450 | Input/Output: [[12.853971337753805 17] 29.853971337753805]
Test Case: 451 | Input/Output: [[49.830465974703145 -26] 23.830465974703145]
Test Case: 452 | Input/Output: [[17.441238346656718 -90] -72.55876165334328]
Test Case: 453 | Input/Output: [[60.92319855235647 48] 108.92319855235647]
Test Case: 454 | Input/Output: [[24.63582819935519 -88] -63.36417180064481]
Test Case: 455 | Input/Output: [[99.68363150684601 -10] 89.68363150684601]
Test Case: 456 | Input/Output: [[-27.74741529952614 31] 3.252584700473861]
Test Case: 457 | Input/Output: [[30.949087020326715 60] 90.94908702032671]
Test Case: 458 | Input/Output: [[21.304413471945068 -62] -40.69558652805493]
Test Case: 459 | Input/Output: [[-39.234202142284325 90] 50.765797857715675]
Test Case: 460 | Input/Output: [[28.860670842956125 -89] -60.139329157043875]
Test Case: 461 | Input/Output: [[43.816907051582376 -5] 38.816907051582376]
Test Case: 462 | Input/Output: [[88.85270984456778 38] 126.85270984456778]
Test Case: 463 | Input/Output: [[-60.092038785158586 87] 26.907961214841414]
Test Case: 464 | Input/Output: [[-76.69969426757397 -55] -131.699694267574]
Test Case: 465 | Input/Output: [[60.968237183009336 17] 77.96823718300934]
Test Case: 466 | Input/Output: [[-29.55195451773764 -45] -74.55195451773764]
Test Case: 467 | Input/Output: [[-50.99486870936332 87] 36.00513129063668]
Test Case: 468 | Input/Output: [[99.8291063259206 71] 170.8291063259206]
Test Case: 469 | Input/Output: [[86.47936309011118 11] 97.47936309011118]
Test Case: 470 | Input/Output: [[21.78264869202448 -44] -22.21735130797552]
Test Case: 471 | Input/Output: [[95.34849596578198 31] 126.34849596578198]
Test Case: 472 | Input/Output: [[-63.258783480284194 -70] -133.2587834802842]
Test Case: 473 | Input/Output: [[-18.135575252718866 72] 53.864424747281134]
Test Case: 474 | Input/Output: [[-70.85374470712038 -16] -86.85374470712038]
Test Case: 475 | Input/Output: [[22.577914154485114 33] 55.577914154485114]
Test Case: 476 | Input/Output: [[24.384595020736427 98] 122.38459502073643]
Test Case: 477 | Input/Output: [[-51.633161363104385 -85] -136.6331613631044]
Test Case: 478 | Input/Output: [[-40.84439786391223 74] 33.15560213608777]
Test Case: 479 | Input/Output: [[-66.3478662596451 -73] -139.34786625964512]
Test Case: 480 | Input/Output: [[-3.0582742515596237 -52] -55.058274251559624]
Test Case: 481 | Input/Output: [[65.93647355898901 73] 138.936473558989]
Test Case: 482 | Input/Output: [[-64.07886172467003 35] -29.078861724670034]
Test Case: 483 | Input/Output: [[-2.2427021095854798 -8] -10.24270210958548]
Test Case: 484 | Input/Output: [[24.315834694640003 -22] 2.315834694640003]
Test Case: 485 | Input/Output: [[28.640000867988277 -4] 24.640000867988277]
Test Case: 486 | Input/Output: [[-90.67624335453334 12] -78.67624335453334]
Test Case: 487 | Input/Output: [[-31.73831637023214 67] 35.26168362976786]
Test Case: 488 | Input/Output: [[31.25632482142518 -87] -55.74367517857482]
Test Case: 489 | Input/Output: [[41.39392193469476 50] 91.39392193469476]
Test Case: 490 | Input/Output: [[-81.93844734993962 68] -13.938447349939622]
Test Case: 491 | Input/Output: [[-93.84336983871655 25] -68.84336983871655]
Test Case: 492 | Input/Output: [[-92.65998654125131 20] -72.65998654125131]
Test Case: 493 | Input/Output: [[15.550457245169554 -17] -1.4495427548304463]
Test Case: 494 | Input/Output: [[-14.323204270966599 -45] -59.3232042709666]
Test Case: 495 | Input/Output: [[96.7253392337467 -3] 93.7253392337467]
Test Case: 496 | Input/Output: [[-30.681703310901057 -69] -99.68170331090106]
Test Case: 497 | Input/Output: [[-58.692391614327974 -27] -85.69239161432797]
Test Case: 498 | Input/Output: [[-22.774976401488644 -58] -80.77497640148864]
Test Case: 499 | Input/Output: [[-35.22589013658654 2] -33.22589013658654]
Test Case: 500 | Input/Output: [[90.78493446013735 -30] 60.78493446013735]
Test Case: 501 | Input/Output: [[16.347355937703156 -10] 6.347355937703156]
Test Case: 502 | Input/Output: [[21.329740479489473 -19] 2.329740479489473]
Test Case: 503 | Input/Output: [[-34.25300326189222 1] -33.25300326189222]
Test Case: 504 | Input/Output: [[-44.276017621527906 21] -23.276017621527906]
Test Case: 505 | Input/Output: [[-92.26674452544536 94] 1.733255474554639]
Test Case: 506 | Input/Output: [[20.8965755584734 0] 20.8965755584734]
Test Case: 507 | Input/Output: [[3.173343132205119 41] 44.17334313220512]
Test Case: 508 | Input/Output: [[-28.475359267697044 32] 3.524640732302956]
Test Case: 509 | Input/Output: [[-68.32036855079446 -87] -155.32036855079446]
Test Case: 510 | Input/Output: [[40.85762590856427 64] 104.85762590856427]
Test Case: 511 | Input/Output: [[-2.647715361843609 19] 16.35228463815639]
Test Case: 512 | Input/Output: [[-84.46605242347091 27] -57.46605242347091]
Test Case: 513 | Input/Output: [[-68.03595409147971 5] -63.03595409147971]
Test Case: 514 | Input/Output: [[-93.29404853616596 -40] -133.29404853616597]
Test Case: 515 | Input/Output: [[36.186171199765624 -78] -41.813828800234376]
Test Case: 516 | Input/Output: [[-51.140091619439396 35] -16.140091619439396]
Test Case: 517 | Input/Output: [[-17.00067761893493 12] -5.00067761893493]
Test Case: 518 | Input/Output: [[2.3925724305134253 4] 6.392572430513425]
Test Case: 519 | Input/Output: [[-35.477938744293496 13] -22.477938744293496]
Test Case: 520 | Input/Output: [[29.276929375239376 -34] -4.723070624760624]
Test Case: 521 | Input/Output: [[-84.43072420248939 -37] -121.43072420248939]
Test Case: 522 | Input/Output: [[-75.28087810998156 51] -24.280878109981558]
Test Case: 523 | Input/Output: [[-24.828882859401673 -39] -63.82888285940167]
Test Case: 524 | Input/Output: [[-39.48890352642016 16] -23.48890352642016]
Test Case: 525 | Input/Output: [[18.222922319901883 29] 47.22292231990188]
Test Case: 526 | Input/Output: [[-21.94669307957338 3] -18.94669307957338]
Test Case: 527 | Input/Output: [[-29.650023476379857 -96] -125.65002347637986]
Test Case: 528 | Input/Output: [[-17.892706018710598 47] 29.107293981289402]
Test Case: 529 | Input/Output: [[87.53578482153526 90] 177.53578482153526]
Test Case: 530 | Input/Output: [[-66.51463325890477 -1] -67.51463325890477]
Test Case: 531 | Input/Output: [[17.935841148263137 43] 60.93584114826314]
Test Case: 532 | Input/Output: [[-67.0093616650665 61] -6.009361665066507]
Test Case: 533 | Input/Output: [[-36.83338379533141 -83] -119.8333837953314]
Test Case: 534 | Input/Output: [[88.0029031587116 -10] 78.0029031587116]
Test Case: 535 | Input/Output: [[30.298674424136323 -74] -43.70132557586368]
Test Case: 536 | Input/Output: [[-64.1420616781363 -24] -88.1420616781363]
Test Case: 537 | Input/Output: [[36.15220840784008 60] 96.15220840784008]
Test Case: 538 | Input/Output: [[-43.48020012441045 -25] -68.48020012441046]
Test Case: 539 | Input/Output: [[-35.627775641941255 81] 45.372224358058745]
Test Case: 540 | Input/Output: [[-94.51710586922736 -45] -139.51710586922735]
Test Case: 541 | Input/Output: [[70.4299385552568 -74] -3.570061444743203]
Test Case: 542 | Input/Output: [[89.77448773853956 29] 118.77448773853956]
Test Case: 543 | Input/Output: [[51.03656335028356 -56] -4.963436649716442]
Test Case: 544 | Input/Output: [[52.28363560066444 -63] -10.71636439933556]
Test Case: 545 | Input/Output: [[-15.60931687698421 39] 23.39068312301579]
Test Case: 546 | Input/Output: [[-62.07292001551865 -79] -141.07292001551866]
Test Case: 547 | Input/Output: [[-5.649765189160533 46] 40.35023481083947]
Test Case: 548 | Input/Output: [[-78.10308333727478 -61] -139.10308333727477]
Test Case: 549 | Input/Output: [[87.36472859852796 -49] 38.36472859852796]
Test Case: 550 | Input/Output: [[-73.37044811856578 29] -44.370448118565776]
Test Case: 551 | Input/Output: [[49.18626452391055 -9] 40.18626452391055]
Test Case: 552 | Input/Output: [[13.813192115207642 13] 26.81319211520764]
Test Case: 553 | Input/Output: [[35.78170474338074 -50] -14.218295256619257]
Test Case: 554 | Input/Output: [[-26.676452753005677 41] 14.323547246994323]
Test Case: 555 | Input/Output: [[46.058358571486735 9] 55.058358571486735]
Test Case: 556 | Input/Output: [[91.16897387652025 14] 105.16897387652025]
Test Case: 557 | Input/Output: [[-16.08259687353201 -23] -39.08259687353201]
Test Case: 558 | Input/Output: [[15.679098902138591 -97] -81.32090109786141]
Test Case: 559 | Input/Output: [[96.226266828229 76] 172.226266828229]
Test Case: 560 | Input/Output: [[42.33231302597119 -10] 32.33231302597119]
Test Case: 561 | Input/Output: [[-18.03599562191576 -97] -115.03599562191576]
Test Case: 562 | Input/Output: [[-29.55554983173478 87] 57.44445016826522]
Test Case: 563 | Input/Output: [[71.8775296862772 70] 141.8775296862772]
Test Case: 564 | Input/Output: [[-90.96753112928558 -30] -120.96753112928558]
Test Case: 565 | Input/Output: [[92.91075562301259 -60] 32.91075562301259]
Test Case: 566 | Input/Output: [[-83.37398033259196 77] -6.373980332591955]
Test Case: 567 | Input/Output: [[-54.33873468550192 5] -49.33873468550192]
Test Case: 568 | Input/Output: [[-76.3802205216904 33] -43.380220521690404]
Test Case: 569 | Input/Output: [[18.73617126234879 -40] -21.26382873765121]
Test Case: 570 | Input/Output: [[-4.98032146563699 70] 65.01967853436301]
Test Case: 571 | Input/Output: [[28.534249648284003 -50] -21.465750351715997]
Test Case: 572 | Input/Output: [[-43.71380151858939 -46] -89.71380151858939]
Test Case: 573 | Input/Output: [[-72.94444898143362 -99] -171.94444898143362]
Test Case: 574 | Input/Output: [[-69.51685012277133 -91] -160.51685012277133]
Test Case: 575 | Input/Output: [[-77.5761892039857 -92] -169.5761892039857]
Test Case: 576 | Input/Output: [[76.01760859327035 43] 119.01760859327035]
Test Case: 577 | Input/Output: [[-15.307616175111534 -79] -94.30761617511153]
Test Case: 578 | Input/Output: [[-87.22186515585145 27] -60.22186515585145]
Test Case: 579 | Input/Output: [[67.22309568720016 -95] -27.776904312799843]
Test Case: 580 | Input/Output: [[-68.0611642005417 95] 26.938835799458303]
Test Case: 581 | Input/Output: [[-17.015147618116757 79] 61.98485238188324]
Test Case: 582 | Input/Output: [[-71.92181189110805 -3] -74.92181189110805]
Test Case: 583 | Input/Output: [[58.96479096829904 -12] 46.96479096829904]
Test Case: 584 | Input/Output: [[57.37299494496537 -37] 20.37299494496537]
Test Case: 585 | Input/Output: [[90.52272294343501 21] 111.52272294343501]
Test Case: 586 | Input/Output: [[45.04278936867877 -100] -54.95721063132123]
Test Case: 587 | Input/Output: [[-77.57947858908814 74] -3.57947858908814]
Test Case: 588 | Input/Output: [[66.99260146873772 -51] 15.992601468737718]
Test Case: 589 | Input/Output: [[43.58785241112474 -24] 19.587852411124743]
Test Case: 590 | Input/Output: [[61.463997665272274 -80] -18.536002334727726]
Test Case: 591 | Input/Output: [[-91.55947090251952 -50] -141.55947090251954]
Test Case: 592 | Input/Output: [[78.58385416179047 -15] 63.58385416179047]
Test Case: 593 | Input/Output: [[-34.45900391835892 49] 14.540996081641083]
Test Case: 594 | Input/Output: [[70.37694676815642 -4] 66.37694676815642]
Test Case: 595 | Input/Output: [[99.3700040600304 13] 112.3700040600304]
Test Case: 596 | Input/Output: [[-17.88172214565465 82] 64.11827785434535]
Test Case: 597 | Input/Output: [[-21.516335581258048 79] 57.48366441874195]
Test Case: 598 | Input/Output: [[-5.993254086965578 39] 33.00674591303442]
Test Case: 599 | Input/Output: [[-62.58502806319692 58] -4.585028063196923]
Test Case: 600 | Input/Output: [[-61.806202713472636 -58] -119.80620271347263]
Test Case: 601 | Input/Output: [[-62.83253484769189 -51] -113.83253484769189]
Test Case: 602 | Input/Output: [[-78.33602744275778 -25] -103.33602744275778]
Test Case: 603 | Input/Output: [[-2.65180867890453 41] 38.34819132109547]
Test Case: 604 | Input/Output: [[10.722718795881647 -40] -29.277281204118353]
Test Case: 605 | Input/Output: [[-56.85191133771874 -61] -117.85191133771875]
Test Case: 606 | Input/Output: [[83.52862457618045 14] 97.52862457618045]
Test Case: 607 | Input/Output: [[-3.3547712855455387 -41] -44.35477128554554]
Test Case: 608 | Input/Output: [[66.21429620255981 79] 145.2142962025598]
Test Case: 609 | Input/Output: [[-47.00822746668083 -11] -58.00822746668083]
Test Case: 610 | Input/Output: [[88.12842340280693 43] 131.12842340280693]
Test Case: 611 | Input/Output: [[-76.80604627146403 -88] -164.80604627146403]
Test Case: 612 | Input/Output: [[41.311864933842685 -49] -7.688135066157315]
Test Case: 613 | Input/Output: [[-96.0996560795725 10] -86.0996560795725]
Test Case: 614 | Input/Output: [[11.323630331485418 -49] -37.67636966851458]
Test Case: 615 | Input/Output: [[-83.71762255428294 64] -19.71762255428294]
Test Case: 616 | Input/Output: [[-83.65561922338907 8] -75.65561922338907]
Test Case: 617 | Input/Output: [[21.69136090458605 45] 66.69136090458605]
Test Case: 618 | Input/Output: [[-0.271409622093131 -4] -4.271409622093131]
Test Case: 619 | Input/Output: [[12.985416334845794 36] 48.985416334845794]
Test Case: 620 | Input/Output: [[-23.451567453908112 -46] -69.45156745390811]
Test Case: 621 | Input/Output: [[11.147834476963553 73] 84.14783447696355]
Test Case: 622 | Input/Output: [[-5.834257529750175 -86] -91.83425752975018]
Test Case: 623 | Input/Output: [[13.53941271399654 -39] -25.46058728600346]
Test Case: 624 | Input/Output: [[82.26421126404594 -34] 48.26421126404594]
Test Case: 625 | Input/Output: [[15.552236547359982 -26] -10.447763452640018]
Test Case: 626 | Input/Output: [[-84.5509265291609 -13] -97.5509265291609]
Test Case: 627 | Input/Output: [[51.2597002361947 -53] -1.7402997638052966]
Test Case: 628 | Input/Output: [[-51.83967354052093 -17] -68.83967354052092]
Test Case: 629 | Input/Output: [[-44.82951041646892 24] -20.82951041646892]
Test Case: 630 | Input/Output: [[95.14530573729823 -98] -2.85469426270177]
Test Case: 631 | Input/Output: [[-79.32768481304413 68] -11.32768481304413]
Test Case: 632 | Input/Output: [[31.914892933766737 22] 53.91489293376674]
Test Case: 633 | Input/Output: [[-13.709711937441327 -46] -59.70971193744133]
Test Case: 634 | Input/Output: [[-23.29105030624578 -82] -105.29105030624578]
Test Case: 635 | Input/Output: [[13.480579106067083 -25] -11.519420893932917]
Test Case: 636 | Input/Output: [[-68.56085913310599 96] 27.439140866894007]
Test Case: 637 | Input/Output: [[-17.776532862164146 -86] -103.77653286216415]
Test Case: 638 | Input/Output: [[56.56139208195265 40] 96.56139208195265]
Test Case: 639 | Input/Output: [[-95.5429982100006 -76] -171.5429982100006]
Test Case: 640 | Input/Output: [[-0.011613390964299697 5] 4.9883866090357]
Test Case: 641 | Input/Output: [[-53.76714007619632 -47] -100.76714007619631]
Test Case: 642 | Input/Output: [[-47.07672328874535 67] 19.92327671125465]
Test Case: 643 | Input/Output: [[84.3532766299441 74] 158.3532766299441]
Test Case: 644 | Input/Output: [[-7.47310525563411 22] 14.52689474436589]
Test Case: 645 | Input/Output: [[42.09500119389625 -63] -20.904998806103748]
Test Case: 646 | Input/Output: [[36.05189786567365 54] 90.05189786567365]
Test Case: 647 | Input/Output: [[53.168545370614595 -78] -24.831454629385405]
Test Case: 648 | Input/Output: [[-36.71897413872593 11] -25.718974138725933]
Test Case: 649 | Input/Output: [[-93.98036148694385 44] -49.98036148694385]
Test Case: 650 | Input/Output: [[18.93490538689005 -47] -28.06509461310995]
Test Case: 651 | Input/Output: [[-1.4720313736358577 -86] -87.47203137363586]
Test Case: 652 | Input/Output: [[12.64357863452355 -69] -56.35642136547645]
Test Case: 653 | Input/Output: [[-34.54589320084453 -22] -56.54589320084453]
Test Case: 654 | Input/Output: [[-89.60718839638635 18] -71.60718839638635]
Test Case: 655 | Input/Output: [[91.95326166109078 17] 108.95326166109078]
Test Case: 656 | Input/Output: [[-21.478009030737425 -4] -25.478009030737425]
Test Case: 657 | Input/Output: [[-13.839746303086244 -43] -56.839746303086244]
Test Case: 658 | Input/Output: [[-6.439371787932501 -98] -104.4393717879325]
Test Case: 659 | Input/Output: [[-60.20331313036926 -87] -147.20331313036925]
Test Case: 660 | Input/Output: [[-65.36721323560215 -89] -154.36721323560215]
Test Case: 661 | Input/Output: [[-19.858479675865823 -62] -81.85847967586582]
Test Case: 662 | Input/Output: [[19.46580092467427 74] 93.46580092467427]
Test Case: 663 | Input/Output: [[-51.79959767976623 -93] -144.79959767976624]
Test Case: 664 | Input/Output: [[-81.49250051350742 75] -6.492500513507423]
Test Case: 665 | Input/Output: [[-93.88260128562848 -59] -152.88260128562848]
Test Case: 666 | Input/Output: [[44.07451021412243 84] 128.07451021412243]
Test Case: 667 | Input/Output: [[92.46767145924812 -41] 51.46767145924812]
Test Case: 668 | Input/Output: [[99.31247489461595 -4] 95.31247489461595]
Test Case: 669 | Input/Output: [[60.7781766643086 -46] 14.778176664308603]
Test Case: 670 | Input/Output: [[-44.66769944459226 44] -0.6676994445922588]
Test Case: 671 | Input/Output: [[48.192138237825816 -25] 23.192138237825816]
Test Case: 672 | Input/Output: [[98.04539698536885 56] 154.04539698536885]
Test Case: 673 | Input/Output: [[27.27281787080831 -93] -65.72718212919169]
Test Case: 674 | Input/Output: [[-69.30649924437937 -81] -150.30649924437938]
Test Case: 675 | Input/Output: [[33.298775220518735 63] 96.29877522051873]
Test Case: 676 | Input/Output: [[44.49561394434366 49] 93.49561394434366]
Test Case: 677 | Input/Output: [[-19.75326254046692 -64] -83.75326254046692]
Test Case: 678 | Input/Output: [[1.0444015862636036 65] 66.0444015862636]
Test Case: 679 | Input/Output: [[71.44068153974283 14] 85.44068153974283]
Test Case: 680 | Input/Output: [[-95.60170861967079 -22] -117.60170861967079]
Test Case: 681 | Input/Output: [[8.189934752002912 94] 102.18993475200291]
Test Case: 682 | Input/Output: [[95.49138935810586 -39] 56.49138935810586]
Test Case: 683 | Input/Output: [[-59.585463945098496 -59] -118.5854639450985]
Test Case: 684 | Input/Output: [[-9.683204623002013 -6] -15.683204623002013]
Test Case: 685 | Input/Output: [[-54.85472002392295 59] 4.145279976077049]
Test Case: 686 | Input/Output: [[-98.44600939743383 -8] -106.44600939743383]
Test Case: 687 | Input/Output: [[-7.567286451534017 9] 1.4327135484659834]
Test Case: 688 | Input/Output: [[-24.371593259023868 -33] -57.37159325902387]
Test Case: 689 | Input/Output: [[93.9289729252404 -36] 57.9289729252404]
Test Case: 690 | Input/Output: [[0.47891113482288006 10] 10.47891113482288]
Test Case: 691 | Input/Output: [[47.94271631707045 -60] -12.057283682929551]
Test Case: 692 | Input/Output: [[44.146085582337605 78] 122.1460855823376]
Test Case: 693 | Input/Output: [[28.320376192704458 20] 48.32037619270446]
Test Case: 694 | Input/Output: [[-10.174922047221287 95] 84.82507795277871]
Test Case: 695 | Input/Output: [[-51.36334156540079 8] -43.36334156540079]
Test Case: 696 | Input/Output: [[83.80813628221256 -56] 27.80813628221256]
Test Case: 697 | Input/Output: [[79.75955382687158 56] 135.75955382687158]
Test Case: 698 | Input/Output: [[-97.6527610153292 -28] -125.6527610153292]
Test Case: 699 | Input/Output: [[-18.277995594430223 51] 32.72200440556978]
Test Case: 700 | Input/Output: [[-14.452949806402899 -98] -112.4529498064029]
Test Case: 701 | Input/Output: [[8.069695380263894 15] 23.069695380263894]
Test Case: 702 | Input/Output: [[92.4908400188302 89] 181.4908400188302]
Test Case: 703 | Input/Output: [[57.83686254511798 11] 68.83686254511798]
Test Case: 704 | Input/Output: [[57.52571298500084 51] 108.52571298500084]
Test Case: 705 | Input/Output: [[-44.50190746198939 82] 37.49809253801061]
Test Case: 706 | Input/Output: [[38.607764841185144 -21] 17.607764841185144]
Test Case: 707 | Input/Output: [[42.103848124508886 57] 99.10384812450889]
Test Case: 708 | Input/Output: [[58.6965318365385 -10] 48.6965318365385]
Test Case: 709 | Input/Output: [[-71.58782888295532 -3] -74.58782888295532]
Test Case: 710 | Input/Output: [[96.4784777647813 -66] 30.478477764781303]
Test Case: 711 | Input/Output: [[-43.860073370340615 -94] -137.86007337034061]
Test Case: 712 | Input/Output: [[73.42343915634578 79] 152.42343915634578]
Test Case: 713 | Input/Output: [[89.80843451180797 96] 185.80843451180797]
Test Case: 714 | Input/Output: [[38.975572014119535 83] 121.97557201411954]
Test Case: 715 | Input/Output: [[77.06530440247838 -36] 41.065304402478375]
Test Case: 716 | Input/Output: [[-74.54305608537231 -56] -130.5430560853723]
Test Case: 717 | Input/Output: [[-2.049137444048526 -1] -3.049137444048526]
Test Case: 718 | Input/Output: [[99.25911372033846 38] 137.25911372033846]
Test Case: 719 | Input/Output: [[72.1930978573713 46] 118.1930978573713]
Test Case: 720 | Input/Output: [[33.478999854409864 3] 36.478999854409864]
Test Case: 721 | Input/Output: [[-59.99538314813498 -81] -140.99538314813498]
Test Case: 722 | Input/Output: [[17.850467109834113 63] 80.85046710983411]
Test Case: 723 | Input/Output: [[35.10540863125681 69] 104.10540863125681]
Test Case: 724 | Input/Output: [[86.20900374991604 -8] 78.20900374991604]
Test Case: 725 | Input/Output: [[10.996264332913498 72] 82.9962643329135]
Test Case: 726 | Input/Output: [[-63.80760235120266 67] 3.192397648797339]
Test Case: 727 | Input/Output: [[-50.125938622079744 -93] -143.12593862207973]
Test Case: 728 | Input/Output: [[-92.80546132182457 -42] -134.80546132182457]
Test Case: 729 | Input/Output: [[8.979595487934674 -96] -87.02040451206533]
Test Case: 730 | Input/Output: [[-65.97824409427284 4] -61.97824409427284]
Test Case: 731 | Input/Output: [[91.86947265728654 -19] 72.86947265728654]
Test Case: 732 | Input/Output: [[-41.40032084267222 -88] -129.40032084267222]
Test Case: 733 | Input/Output: [[10.561116331177445 72] 82.56111633117744]
Test Case: 734 | Input/Output: [[-87.17826915014773 49] -38.17826915014773]
Test Case: 735 | Input/Output: [[9.218667540662366 51] 60.218667540662366]
Test Case: 736 | Input/Output: [[33.094241844424886 63] 96.09424184442489]
Test Case: 737 | Input/Output: [[-71.64880580299192 52] -19.648805802991916]
Test Case: 738 | Input/Output: [[45.26304703901306 -6] 39.26304703901306]
Test Case: 739 | Input/Output: [[87.98838757000533 -86] 1.9883875700053295]
Test Case: 740 | Input/Output: [[-16.414740768703908 89] 72.58525923129609]
Test Case: 741 | Input/Output: [[86.3933575380446 39] 125.3933575380446]
Test Case: 742 | Input/Output: [[36.838826353336856 29] 65.83882635333686]
Test Case: 743 | Input/Output: [[43.350317192499034 30] 73.35031719249903]
Test Case: 744 | Input/Output: [[2.047593527674721 62] 64.04759352767472]
Test Case: 745 | Input/Output: [[-80.5559596263709 -10] -90.5559596263709]
Test Case: 746 | Input/Output: [[-84.2266545471015 2] -82.2266545471015]
Test Case: 747 | Input/Output: [[81.17710203911312 -60] 21.177102039113123]
Test Case: 748 | Input/Output: [[-8.52679701845662 69] 60.47320298154338]
Test Case: 749 | Input/Output: [[-72.70288924555692 -12] -84.70288924555692]
Test Case: 750 | Input/Output: [[-31.421380836794327 85] 53.57861916320567]
Test Case: 751 | Input/Output: [[-27.572335286131036 51] 23.427664713868964]
Test Case: 752 | Input/Output: [[-87.37949702966009 -79] -166.3794970296601]
Test Case: 753 | Input/Output: [[93.41142113770135 -27] 66.41142113770135]
Test Case: 754 | Input/Output: [[23.756249020789085 -16] 7.756249020789085]
Test Case: 755 | Input/Output: [[-13.856008377737197 51] 37.1439916222628]
Test Case: 756 | Input/Output: [[74.32000751956551 77] 151.3200075195655]
Test Case: 757 | Input/Output: [[-18.643486282227357 -39] -57.64348628222736]
Test Case: 758 | Input/Output: [[-24.62958518094341 -25] -49.62958518094341]
Test Case: 759 | Input/Output: [[1.9523283677044532 -17] -15.047671632295547]
Test Case: 760 | Input/Output: [[-33.11118025168409 50] 16.88881974831591]
Test Case: 761 | Input/Output: [[-0.11425276553160302 96] 95.8857472344684]
Test Case: 762 | Input/Output: [[58.87370790579101 -64] -5.126292094208992]
Test Case: 763 | Input/Output: [[75.62419287389602 35] 110.62419287389602]
Test Case: 764 | Input/Output: [[10.046666413451732 -16] -5.953333586548268]
Test Case: 765 | Input/Output: [[62.842703606081415 51] 113.84270360608141]
Test Case: 766 | Input/Output: [[60.07952448924135 -32] 28.07952448924135]
Test Case: 767 | Input/Output: [[-89.60558503437255 -1] -90.60558503437255]
Test Case: 768 | Input/Output: [[-88.44788527564197 86] -2.4478852756419656]
Test Case: 769 | Input/Output: [[-26.499698046350503 56] 29.500301953649497]
Test Case: 770 | Input/Output: [[-94.97883244292322 -9] -103.97883244292322]
Test Case: 771 | Input/Output: [[-52.79655619658581 2] -50.79655619658581]
Test Case: 772 | Input/Output: [[-15.563578354025438 -67] -82.56357835402544]
Test Case: 773 | Input/Output: [[44.91572357566028 -30] 14.91572357566028]
Test Case: 774 | Input/Output: [[71.27721631193896 -29] 42.27721631193896]
Test Case: 775 | Input/Output: [[-51.01616196572625 -48] -99.01616196572624]
Test Case: 776 | Input/Output: [[72.20921403088136 14] 86.20921403088136]
Test Case: 777 | Input/Output: [[44.869246077278746 -52] -7.130753922721254]
Test Case: 778 | Input/Output: [[35.16965652607601 58] 93.16965652607601]
Test Case: 779 | Input/Output: [[24.82747500699807 9] 33.82747500699807]
Test Case: 780 | Input/Output: [[68.61175344809001 92] 160.61175344809]
Test Case: 781 | Input/Output: [[73.35736149998993 -3] 70.35736149998993]
Test Case: 782 | Input/Output: [[41.93180268878319 -16] 25.931802688783193]
Test Case: 783 | Input/Output: [[90.84236630151142 73] 163.84236630151142]
Test Case: 784 | Input/Output: [[-82.00549767665734 -9] -91.00549767665734]
Test Case: 785 | Input/Output: [[34.32320365860167 33] 67.32320365860167]
Test Case: 786 | Input/Output: [[19.615889543864824 -61] -41.384110456135176]
Test Case: 787 | Input/Output: [[71.27381849195075 -4] 67.27381849195075]
Test Case: 788 | Input/Output: [[59.09689580890935 68] 127.09689580890935]
Test Case: 789 | Input/Output: [[-89.03476323238027 -41] -130.03476323238027]
Test Case: 790 | Input/Output: [[93.34284439416288 -55] 38.34284439416288]
Test Case: 791 | Input/Output: [[73.58809330448719 97] 170.5880933044872]
Test Case: 792 | Input/Output: [[80.50639093905707 13] 93.50639093905707]
Test Case: 793 | Input/Output: [[-70.44287986885043 -36] -106.44287986885043]
Test Case: 794 | Input/Output: [[-81.83762759653823 98] 16.162372403461774]
Test Case: 795 | Input/Output: [[-42.90734552588249 85] 42.09265447411751]
Test Case: 796 | Input/Output: [[-67.89028804276433 -87] -154.89028804276433]
Test Case: 797 | Input/Output: [[95.18488167774467 -29] 66.18488167774467]
Test Case: 798 | Input/Output: [[-85.83630914559718 -58] -143.83630914559717]
Test Case: 799 | Input/Output: [[15.837144638172802 -83] -67.1628553618272]
Test Case: 800 | Input/Output: [[24.296554263850553 -18] 6.2965542638505525]
Test Case: 801 | Input/Output: [[-21.92444860147735 -67] -88.92444860147735]
Test Case: 802 | Input/Output: [[85.07927776481833 -63] 22.07927776481833]
Test Case: 803 | Input/Output: [[-11.316822261279384 -11] -22.316822261279384]
Test Case: 804 | Input/Output: [[-99.48059626188315 -33] -132.48059626188314]
Test Case: 805 | Input/Output: [[-75.55380525171907 -72] -147.55380525171907]
Test Case: 806 | Input/Output: [[82.93918021763545 28] 110.93918021763545]
Test Case: 807 | Input/Output: [[99.56887553970097 -6] 93.56887553970097]
Test Case: 808 | Input/Output: [[-91.85304186673369 33] -58.85304186673369]
Test Case: 809 | Input/Output: [[18.044170373572356 9] 27.044170373572356]
Test Case: 810 | Input/Output: [[84.11679702976815 -57] 27.11679702976815]
Test Case: 811 | Input/Output: [[85.84858773352624 71] 156.84858773352624]
Test Case: 812 | Input/Output: [[81.34832538844111 -97] -15.651674611558889]
Test Case: 813 | Input/Output: [[-92.19406212112654 63] -29.194062121126535]
Test Case: 814 | Input/Output: [[-90.20972851329263 -4] -94.20972851329263]
Test Case: 815 | Input/Output: [[-1.0876733171993465 -27] -28.087673317199346]
Test Case: 816 | Input/Output: [[-12.430074529711632 22] 9.569925470288368]
Test Case: 817 | Input/Output: [[93.83020187880905 -53] 40.83020187880905]
Test Case: 818 | Input/Output: [[84.68845609962122 -99] -14.31154390037878]
Test Case: 819 | Input/Output: [[35.61799787159177 83] 118.61799787159177]
Test Case: 820 | Input/Output: [[98.07780198533288 -21] 77.07780198533288]
Test Case: 821 | Input/Output: [[-65.58067205297476 45] -20.580672052974762]
Test Case: 822 | Input/Output: [[-73.49368548410375 32] -41.49368548410375]
Test Case: 823 | Input/Output: [[58.48696205542265 -34] 24.48696205542265]
Test Case: 824 | Input/Output: [[70.36986511153091 26] 96.36986511153091]
Test Case: 825 | Input/Output: [[-24.440748464913682 76] 51.55925153508632]
Test Case: 826 | Input/Output: [[-8.905699675062777 -38] -46.90569967506278]
Test Case: 827 | Input/Output: [[71.99213424393821 64] 135.9921342439382]
Test Case: 828 | Input/Output: [[97.84159548702766 -62] 35.84159548702766]
Test Case: 829 | Input/Output: [[23.37795253904919 8] 31.37795253904919]
Test Case: 830 | Input/Output: [[-59.41017772429416 80] 20.589822275705842]
Test Case: 831 | Input/Output: [[3.447709946866425 32] 35.447709946866425]
Test Case: 832 | Input/Output: [[4.128851819816973 48] 52.12885181981697]
Test Case: 833 | Input/Output: [[-79.31871305904785 -1] -80.31871305904785]
Test Case: 834 | Input/Output: [[54.76024468860285 58] 112.76024468860285]
Test Case: 835 | Input/Output: [[13.115061021106385 -5] 8.115061021106385]
Test Case: 836 | Input/Output: [[-32.453729362251124 -8] -40.453729362251124]
Test Case: 837 | Input/Output: [[96.05704025348768 44] 140.05704025348768]
Test Case: 838 | Input/Output: [[-45.68241063687779 -76] -121.68241063687779]
Test Case: 839 | Input/Output: [[9.682399254958682 -32] -22.317600745041318]
Test Case: 840 | Input/Output: [[16.426483869480307 95] 111.42648386948031]
Test Case: 841 | Input/Output: [[62.31999653667981 10] 72.31999653667981]
Test Case: 842 | Input/Output: [[23.58663015981992 -38] -14.413369840180081]
Test Case: 843 | Input/Output: [[-2.9842462882272685 -64] -66.98424628822727]
Test Case: 844 | Input/Output: [[80.59488308829918 -12] 68.59488308829918]
Test Case: 845 | Input/Output: [[58.618134116990234 81] 139.61813411699023]
Test Case: 846 | Input/Output: [[79.0569789178515 -37] 42.056978917851495]
Test Case: 847 | Input/Output: [[40.95230609363426 -38] 2.952306093634263]
Test Case: 848 | Input/Output: [[7.118144376522764 -47] -39.881855623477236]
Test Case: 849 | Input/Output: [[40.03623180846964 -82] -41.96376819153036]
Test Case: 850 | Input/Output: [[-26.636811152658638 -85] -111.63681115265864]
Test Case: 851 | Input/Output: [[-78.85725260205065 86] 7.14274739794935]
Test Case: 852 | Input/Output: [[43.49416410090578 -55] -11.505835899094222]
Test Case: 853 | Input/Output: [[-94.19692349259823 -34] -128.19692349259822]
Test Case: 854 | Input/Output: [[-14.62508872675447 -33] -47.62508872675447]
Test Case: 855 | Input/Output: [[79.706313520746 -68] 11.706313520745994]
Test Case: 856 | Input/Output: [[81.45069730694956 -43] 38.450697306949564]
Test Case: 857 | Input/Output: [[-50.50125618010348 -55] -105.50125618010348]
Test Case: 858 | Input/Output: [[53.68978967822807 -70] -16.310210321771933]
Test Case: 859 | Input/Output: [[-75.55177418887757 -5] -80.55177418887757]
Test Case: 860 | Input/Output: [[44.860060737782106 -74] -29.139939262217894]
Test Case: 861 | Input/Output: [[-71.34979646374228 51] -20.34979646374228]
Test Case: 862 | Input/Output: [[-23.658757016788016 -78] -101.65875701678802]
Test Case: 863 | Input/Output: [[-13.15852357361365 15] 1.8414764263863503]
Test Case: 864 | Input/Output: [[14.959534417978304 88] 102.9595344179783]
Test Case: 865 | Input/Output: [[10.256665182519484 37] 47.256665182519484]
Test Case: 866 | Input/Output: [[3.9739890779469533 -38] -34.02601092205305]
Test Case: 867 | Input/Output: [[-55.49534642769582 -2] -57.49534642769582]
Test Case: 868 | Input/Output: [[29.254109347155094 91] 120.2541093471551]
Test Case: 869 | Input/Output: [[2.5383239429167475 52] 54.53832394291675]
Test Case: 870 | Input/Output: [[-4.967463055917548 22] 17.03253694408245]
Test Case: 871 | Input/Output: [[52.3263892937311 94] 146.3263892937311]
Test Case: 872 | Input/Output: [[-47.93772080095637 -21] -68.93772080095637]
Test Case: 873 | Input/Output: [[-5.203690112783235 -77] -82.20369011278324]
Test Case: 874 | Input/Output: [[6.568824670352939 62] 68.56882467035294]
Test Case: 875 | Input/Output: [[24.998045777922172 -91] -66.00195422207783]
Test Case: 876 | Input/Output: [[2.4453200934571697 81] 83.44532009345717]
Test Case: 877 | Input/Output: [[73.30556694863469 20] 93.30556694863469]
Test Case: 878 | Input/Output: [[-41.111902601378894 60] 18.888097398621106]
Test Case: 879 | Input/Output: [[-72.44800427344036 47] -25.44800427344036]
Test Case: 880 | Input/Output: [[88.70458188141242 96] 184.70458188141242]
Test Case: 881 | Input/Output: [[4.341758911847336 -86] -81.65824108815266]
Test Case: 882 | Input/Output: [[-84.09972886066575 28] -56.09972886066575]
Test Case: 883 | Input/Output: [[-33.10023309904521 -27] -60.10023309904521]
Test Case: 884 | Input/Output: [[-48.490125705005724 -71] -119.49012570500572]
Test Case: 885 | Input/Output: [[-44.97648544189592 -8] -52.97648544189592]
Test Case: 886 | Input/Output: [[53.82674130797187 30] 83.82674130797187]
Test Case: 887 | Input/Output: [[43.90564541302419 -63] -19.09435458697581]
Test Case: 888 | Input/Output: [[16.16513578981089 45] 61.16513578981089]
Test Case: 889 | Input/Output: [[48.2743663463705 21] 69.2743663463705]
Test Case: 890 | Input/Output: [[-9.597254808417887 10] 0.4027451915821132]
Test Case: 891 | Input/Output: [[39.04765609951923 72] 111.04765609951923]
Test Case: 892 | Input/Output: [[-51.20264481922116 -17] -68.20264481922116]
Test Case: 893 | Input/Output: [[74.29476337148441 28] 102.29476337148441]
Test Case: 894 | Input/Output: [[84.203348815104 -60] 24.203348815103993]
Test Case: 895 | Input/Output: [[-83.53027638935416 42] -41.53027638935416]
Test Case: 896 | Input/Output: [[50.40312765459862 -100] -49.59687234540138]
Test Case: 897 | Input/Output: [[-80.25847393382506 47] -33.25847393382506]
Test Case: 898 | Input/Output: [[-78.45554022450347 -48] -126.45554022450347]
Test Case: 899 | Input/Output: [[-91.59694269483975 -18] -109.59694269483975]
Test Case: 900 | Input/Output: [[-2.4075011365115415 -71] -73.40750113651154]
Test Case: 901 | Input/Output: [[23.021059687648034 69] 92.02105968764803]
Test Case: 902 | Input/Output: [[28.06403493195893 80] 108.06403493195893]
Test Case: 903 | Input/Output: [[70.35613416640624 59] 129.35613416640624]
Test Case: 904 | Input/Output: [[21.154735689108122 -97] -75.84526431089188]
Test Case: 905 | Input/Output: [[91.70652021203506 -84] 7.706520212035059]
Test Case: 906 | Input/Output: [[-29.18434190846611 -51] -80.18434190846611]
Test Case: 907 | Input/Output: [[79.16763171514515 -30] 49.16763171514515]
Test Case: 908 | Input/Output: [[-83.18901101380575 -88] -171.18901101380575]
Test Case: 909 | Input/Output: [[-53.44444964493611 -93] -146.4444496449361]
Test Case: 910 | Input/Output: [[1.8327706119193579 -85] -83.16722938808064]
Test Case: 911 | Input/Output: [[88.22645937728782 -54] 34.226459377287824]
Test Case: 912 | Input/Output: [[-18.792692984726656 84] 65.20730701527334]
Test Case: 913 | Input/Output: [[84.65619858454355 47] 131.65619858454355]
Test Case: 914 | Input/Output: [[35.99561160998462 53] 88.99561160998462]
Test Case: 915 | Input/Output: [[46.64193276117038 17] 63.64193276117038]
Test Case: 916 | Input/Output: [[22.16328133725962 99] 121.16328133725962]
Test Case: 917 | Input/Output: [[60.54472489671909 71] 131.5447248967191]
Test Case: 918 | Input/Output: [[-74.46105703281862 -35] -109.46105703281862]
Test Case: 919 | Input/Output: [[-0.8175942777079115 -24] -24.81759427770791]
Test Case: 920 | Input/Output: [[-55.56844660967448 -54] -109.56844660967448]
Test Case: 921 | Input/Output: [[-89.25482601805103 -87] -176.25482601805103]
Test Case: 922 | Input/Output: [[-32.03695736153523 38] 5.963042638464771]
Test Case: 923 | Input/Output: [[65.16420876959987 34] 99.16420876959987]
Test Case: 924 | Input/Output: [[72.3072384953739 98] 170.3072384953739]
Test Case: 925 | Input/Output: [[-93.93083839280152 -7] -100.93083839280152]
Test Case: 926 | Input/Output: [[65.59115008041704 78] 143.59115008041704]
Test Case: 927 | Input/Output: [[-60.478035222292625 -55] -115.47803522229262]
Test Case: 928 | Input/Output: [[-6.217788635682368 -14] -20.217788635682368]
Test Case: 929 | Input/Output: [[-79.54338123633617 -7] -86.54338123633617]
Test Case: 930 | Input/Output: [[-55.182305263372335 -87] -142.18230526337234]
Test Case: 931 | Input/Output: [[-91.99681860487594 20] -71.99681860487594]
Test Case: 932 | Input/Output: [[-59.157086037862896 40] -19.157086037862896]
Test Case: 933 | Input/Output: [[-79.03158118666613 69] -10.03158118666613]
Test Case: 934 | Input/Output: [[94.22060131596882 -2] 92.22060131596882]
Test Case: 935 | Input/Output: [[-95.93472539964787 -40] -135.93472539964787]
Test Case: 936 | Input/Output: [[17.292062451863515 -17] 0.2920624518635151]
Test Case: 937 | Input/Output: [[-89.35068950312113 -92] -181.35068950312115]
Test Case: 938 | Input/Output: [[4.747840375286998 51] 55.747840375287]
Test Case: 939 | Input/Output: [[94.56228029632197 93] 187.56228029632197]
Test Case: 940 | Input/Output: [[53.45585310530768 25] 78.45585310530768]
Test Case: 941 | Input/Output: [[-34.18457498692035 55] 20.815425013079647]
Test Case: 942 | Input/Output: [[-95.4333636063286 -38] -133.4333636063286]
Test Case: 943 | Input/Output: [[-23.82210420023418 -100] -123.82210420023418]
Test Case: 944 | Input/Output: [[61.32920479457826 59] 120.32920479457826]
Test Case: 945 | Input/Output: [[87.27420852726942 -48] 39.27420852726942]
Test Case: 946 | Input/Output: [[-38.33786142836897 12] -26.337861428368967]
Test Case: 947 | Input/Output: [[-96.28459541468015 -94] -190.28459541468015]
Test Case: 948 | Input/Output: [[-69.95665530331519 66] -3.9566553033151877]
Test Case: 949 | Input/Output: [[-36.262393080454025 67] 30.737606919545975]
Test Case: 950 | Input/Output: [[68.20710808934888 36] 104.20710808934888]
Test Case: 951 | Input/Output: [[82.82165776314915 73] 155.82165776314915]
Test Case: 952 | Input/Output: [[65.86699544982636 80] 145.86699544982636]
Test Case: 953 | Input/Output: [[59.05268130487761 -16] 43.05268130487761]
Test Case: 954 | Input/Output: [[7.760484057912564 0] 7.760484057912564]
Test Case: 955 | Input/Output: [[-31.34770218285037 -31] -62.34770218285037]
Test Case: 956 | Input/Output: [[-26.009347122313088 50] 23.990652877686912]
Test Case: 957 | Input/Output: [[-18.159733652905956 -51] -69.15973365290596]
Test Case: 958 | Input/Output: [[-82.50659296621821 62] -20.506592966218207]
Test Case: 959 | Input/Output: [[95.17208703978548 -32] 63.17208703978548]
Test Case: 960 | Input/Output: [[-90.85442754272246 -37] -127.85442754272246]
Test Case: 961 | Input/Output: [[-47.133649590828284 41] -6.133649590828284]
Test Case: 962 | Input/Output: [[62.10969780256934 -58] 4.109697802569343]
Test Case: 963 | Input/Output: [[-61.57938327245793 -47] -108.57938327245793]
Test Case: 964 | Input/Output: [[-73.77547090395251 38] -35.77547090395251]
Test Case: 965 | Input/Output: [[-38.69982608023521 -6] -44.69982608023521]
Test Case: 966 | Input/Output: [[55.51323855550572 -53] 2.5132385555057226]
Test Case: 967 | Input/Output: [[81.62116807205678 31] 112.62116807205678]
Test Case: 968 | Input/Output: [[63.808652719910356 -14] 49.808652719910356]
Test Case: 969 | Input/Output: [[-70.95709607307698 2] -68.95709607307698]
Test Case: 970 | Input/Output: [[75.69827034561857 -68] 7.6982703456185675]
Test Case: 971 | Input/Output: [[70.02769523723248 -22] 48.02769523723248]
Test Case: 972 | Input/Output: [[-50.06251870166507 -99] -149.06251870166506]
Test Case: 973 | Input/Output: [[64.51705165231812 43] 107.51705165231812]
Test Case: 974 | Input/Output: [[41.25516827873136 14] 55.25516827873136]
Test Case: 975 | Input/Output: [[-94.4008772865341 -14] -108.4008772865341]
Test Case: 976 | Input/Output: [[-74.31406498527284 -16] -90.31406498527284]
Test Case: 977 | Input/Output: [[-95.71255187431966 -53] -148.71255187431967]
Test Case: 978 | Input/Output: [[-28.481133474033143 -22] -50.48113347403314]
Test Case: 979 | Input/Output: [[-9.949079039534567 -54] -63.94907903953457]
Test Case: 980 | Input/Output: [[-14.615350941032474 60] 45.384649058967526]
Test Case: 981 | Input/Output: [[-55.5564629156732 -51] -106.5564629156732]
Test Case: 982 | Input/Output: [[59.580797325526135 -77] -17.419202674473865]
Test Case: 983 | Input/Output: [[64.0282019870468 24] 88.0282019870468]
Test Case: 984 | Input/Output: [[-61.87467245237024 -43] -104.87467245237025]
Test Case: 985 | Input/Output: [[21.779702389182404 -83] -61.220297610817596]
Test Case: 986 | Input/Output: [[56.51485092832573 34] 90.51485092832573]
Test Case: 987 | Input/Output: [[-71.88873361798922 -77] -148.8887336179892]
Test Case: 988 | Input/Output: [[60.63859575612821 82] 142.6385957561282]
Test Case: 989 | Input/Output: [[53.218249145772035 14] 67.21824914577203]
Test Case: 990 | Input/Output: [[-17.573505334421895 84] 66.4264946655781]
Test Case: 991 | Input/Output: [[-4.76784204027301 28] 23.23215795972699]
Test Case: 992 | Input/Output: [[41.584640883761466 -98] -56.415359116238534]
Test Case: 993 | Input/Output: [[-3.4255438713352646 25] 21.574456128664735]
Test Case: 994 | Input/Output: [[12.360900353544196 -51] -38.639099646455804]
Test Case: 995 | Input/Output: [[52.30353691039028 -78] -25.696463089609722]
Test Case: 996 | Input/Output: [[27.427901982101943 95] 122.42790198210194]
Test Case: 997 | Input/Output: [[-78.81488420910327 81] 2.185115790896731]
Test Case: 998 | Input/Output: [[-90.38772283819901 51] -39.38772283819901]
Test Case: 999 | Input/Output: [[73.7018581486281 72] 145.7018581486281]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 42 105 -117 0 40 30 -20 -90 55 -45 123 98 -11 -16 121 119
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction integer_div} {:instruction tagged_913} {:instruction integer_swap})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank float_dup_items integer_max float_stackdepth float_mult float_sin in2 integer_add float_add float_min float_dec float_dec float_mod integer_div tagged_913 integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 17311.658787700002
Median total errors in population: 25334.0
Error averages by case: (683.842464999999 12.18 693.2648207999979 13.105 672.6342003999995 12.996 671.3219362999995 12.916 705.8930577999998 13.799 689.1684855999986 13.698 683.4927668000012 12.335 679.4028586000004 13.86 680.2924124999996 12.376 687.4830340999994 12.941 681.9333342999972 11.606 678.845421299999 12.223 674.2728231000012 12.165 675.5830244999999 12.812 673.7974570999992 13.063 684.661112100001 13.029 667.7376093000006 12.387 684.4352719000007 12.938 698.5561374999979 13.714 666.7082274000002 11.313 667.6298227999999 11.486 683.236932999999 13.06 674.0426882000014 13.177 665.5611629000006 12.285 669.3207244000008 13.077)
Error minima by case: (0.9314 2 5.8897 3 0.3183 8 0.3148 7 21.7076 2 1.9275 2 0.5734 2 0.2197 8 0.6707 8 0.2833 1 0.5435 2 0.5492 2 0.1474 1 0.5437 8 0.4388 8 0.0665 2 2.5839 8 1.3408 2 17.0544 1 0.4728 1 1.5429 1 0.5132 1 0.7222 1 1.0288 2 2.7082 2)
Average genome size in population (length): 50.562
Average program size in population (points): 51.562
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.318
Error (vector) diversity:			 0.351
Behavioral diversity:				 0.371
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1268225
--- Timings ---
Current time: 1529615774240 milliseconds
Total Time:           3.6 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.6 seconds, 16.0%
Fitness Testing:      2.9 seconds, 80.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction integer_div} {:instruction tagged_913} {:instruction integer_swap})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank float_dup_items integer_max float_stackdepth float_mult float_sin in2 integer_add float_add float_min float_dec float_dec float_mod integer_div tagged_913 integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6253.3319623
Median total errors in population: 1893.8308000000002
Error averages by case: (247.1272498000011 9.381 261.28796120000015 10.204 224.0679213000003 12.455 220.44311820000019 12.259 292.1019627 10.521 257.85014699999886 10.339 244.89223020000117 9.559 247.08074800000045 13.294 245.59714070000012 12.234 256.96343390000146 9.867 241.2933093000001 9.135 234.55162509999897 9.44 233.15431599999837 9.106 236.41581379999985 11.85 226.20529659999994 12.473 250.6385594000021 9.931 212.93928289999974 12.314 245.02832090000115 9.987 279.80052900000095 10.072 215.75567229999916 8.487 219.43199290000004 8.785 243.15862339999822 10.059 229.5379770999996 10.038 209.50431349999926 9.388 217.29141710000027 10.035)
Error minima by case: (1.4817 2 5.8897 3 0.3183 8 0.3148 7 21.7076 2 1.9275 2 0.5734 2 0.2197 8 0.6707 8 0.2833 1 0.5435 2 0.4871 2 0.1474 1 0.5437 9 0.4388 8 0.4311 2 2.5839 8 1.3408 2 17.0544 1 2.0368 1 1.5429 1 1.3874 1 0.7222 1 1.0288 2 3.3015 2)
Average genome size in population (length): 60.257
Average program size in population (points): 61.257
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.48
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.266
Error (vector) diversity:			 0.292
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2779725
--- Timings ---
Current time: 1529615779790 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.8 seconds, 40.4%
Fitness Testing:      4.7 seconds, 49.4%
Report:               0.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_sub} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction integer_div} {:instruction tagged_913} {:instruction integer_swap})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank float_sub integer_max float_stackdepth float_mult float_sin in2 integer_add float_add float_min float_dec float_dec float_mod integer_div tagged_913 integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3875.7027179000015
Median total errors in population: 1324.0
Error averages by case: (143.7383869000002 4.645 140.77736190000002 5.456 147.98531129999998 12.787 137.00332530000003 12.599 186.05424400000027 5.013 154.5410883 4.981 161.16856860000027 4.623 190.34283249999987 13.546 188.61621169999992 13.286 174.20800850000012 4.734 137.08827800000003 4.537 136.43062380000012 4.659 113.17194920000014 3.842 167.23837290000003 11.484 142.9322693 12.619 155.33701030000017 4.812 130.21942980000006 13.284 142.72841760000017 5.335 193.1925822000003 4.136 135.72852469999984 3.695 152.1928597 3.795 123.16130939999978 4.8 110.57174489999991 4.122 125.66883719999986 4.454 113.50016989999985 4.861)
Error minima by case: (7.9903 2 33.0 3 4.5016 9 8.5617 7 21.7076 2 1.9275 2 5.5734 2 9.7651 10 0.6707 9 5.9696 1 0.5435 2 5.4508 2 3.0 1 12.4563 9 12.2837 8 2.7558 2 2.5839 9 10.3408 2 20.9456 1 2.832 1 2.5429 1 8.0 1 2.0 1 6.3063 2 4.4634 2)
Average genome size in population (length): 50.717
Average program size in population (points): 51.717
Average percent parens in population: 0.025
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9505
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.093
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4050637
--- Timings ---
Current time: 1529615783598 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 40.2%
Fitness Testing:      6.3 seconds, 48.1%
Report:               1.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_add} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction float_stackdepth} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction 3.229429672081679} {:instruction integer_swap} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction integer_max} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_add integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 in2 69 float_stackdepth integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup 3.229429672081679 integer_swap float_div integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth integer_max float_sub float_tan integer_inc float_yank float_dup_items integer_max float_stackdepth float_mult float_sin in2 integer_add float_add float_min float_dec float_dec float_mod)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3703.3872834
Median total errors in population: 1305.0
Error averages by case: (134.7098695 3.215 130.7951754 4.173 146.5089438 12.331 135.9235753 12.333 178.96837139999997 3.429 145.93163510000002 3.42 159.2861941 3.187 186.25027039999998 13.27 187.5873934 13.113 171.3602027 3.197 129.8761155 3.132 130.0075193 3.184 101.9159003 2.29 162.1676018 11.361 142.12040070000003 12.319 148.91719140000004 3.307 127.9420764 13.127 135.7451395 4.087 190.87069429999997 2.51 126.60432200000002 2.257 143.8375802 2.291 109.26550080000001 3.239 103.91056209999999 2.392 120.7470071 3.147 108.5460409 3.281)
Error minima by case: (27.258 2 32.0 3 4.5016 10 27.2636 8 22.742 2 14.258 2 20.1685 2 32.742 10 1.9432 8 14.742 1 25.1984 2 17.1928 2 2.0 1 5.742 10 18.4876 9 3.1666 2 5.1978 6 36.0828 2 35.742 1 12.832 1 6.1748 1 8.0 1 1.0 1 16.0 2 7.0 1)
Average genome size in population (length): 42.323
Average program size in population (points): 43.323
Average percent parens in population: 0.030
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.393
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.031
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5112387
--- Timings ---
Current time: 1529615787462 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.9 seconds, 40.5%
Fitness Testing:      7.9 seconds, 46.4%
Report:               2.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_add} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction integer_div} {:instruction tagged_913} {:instruction integer_swap})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank float_dup_items integer_max float_stackdepth float_add float_sin in2 integer_add float_add float_min float_dec float_dec float_mod integer_div tagged_913 integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3140.8858214
Median total errors in population: 1305.0
Error averages by case: (111.5731834 2.961 108.78120449999997 3.942 123.37202890000002 12.245 111.496228 12.229 157.99864810000003 3.424 123.69131850000001 3.409 137.8711684 2.94 165.16061639999998 13.18 165.9668894 12.806 148.70216609999997 2.655 109.24929879999999 2.896 108.83836180000002 2.937 80.85902740000002 2.031 140.43793740000004 11.265 117.95793939999997 12.52 126.71441399999996 3.042 103.7959234 13.069 114.60068630000004 3.582 168.8541056 2.482 104.1644321 2.287 122.4877723 2.315 86.20684019999997 2.692 79.59564400000002 2.101 98.83354500000003 2.907 84.74044199999999 3.019)
Error minima by case: (37.0 2 32.0 3 16.1871 9 12.4441 9 87.0 2 50.0 2 20.1685 2 1.2761 7 2.253 9 79.0 1 25.1984 2 17.1928 2 2.0 1 14.1887 7 3.6143 8 54.0 2 5.2519 9 36.0828 2 100.0 1 12.8433 1 6.4985 1 9.0 1 1.0 1 9.2919 2 7.0 2)
Average genome size in population (length): 48.946
Average program size in population (points): 49.946
Average percent parens in population: 0.026
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.712375
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.025
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6342612
--- Timings ---
Current time: 1529615791440 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.4 seconds, 39.9%
Fitness Testing:      9.8 seconds, 46.3%
Report:               2.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2821.5675946999977
Median total errors in population: 1304.0
Error averages by case: (99.79384330000003 2.913 95.3812748 3.873 109.19615049999996 12.138 98.40641919999996 12.155 146.97254350000006 3.893 112.10077010000003 3.905 125.30502840000004 2.923 153.52904520000007 13.146 151.14196110000003 12.189 138.07785640000003 2.127 95.2199057 2.858 95.15582980000005 2.88 66.95250680000002 1.985 128.75730370000005 11.207 104.8664792 12.994 115.15961569999999 2.998 89.65201179999995 13.003 101.09024150000003 3.028 158.12018470000007 2.967 91.65293849999996 2.744 109.75271329999998 2.791 74.44043519999995 2.158 65.32999279999999 2.082 85.74123799999995 2.885 70.94930549999995 2.98)
Error minima by case: (37.0 2 32.0 3 14.1871 9 18.5597 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 7.8457 8 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 60.733
Average program size in population (points): 61.733
Average percent parens in population: 0.019
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.058625
Median age in population: 7.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7870912
--- Timings ---
Current time: 1529615795375 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 40.4%
Fitness Testing:     11.6 seconds, 45.8%
Report:               3.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_cos} {:instruction integer_inc} {:instruction float_yank} {:instruction float_sub} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction integer_div} {:instruction tagged_913} {:instruction integer_swap})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_cos integer_inc float_yank float_sub float_shove float_stackdepth float_mult float_sin in2 integer_add float_add float_min float_dec float_dec float_mod integer_div tagged_913 integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2485.6378714999996
Median total errors in population: 1304.0
Error averages by case: (86.2001515 2.662 81.25953940000001 3.646 96.28332749999998 12.081 84.96706199999998 12.075 134.65117180000001 3.7 98.73184840000002 3.706 112.09176530000002 2.665 141.9672231 13.061 139.8273927 12.056 125.24986929999997 1.773 81.44720500000001 2.618 81.28557250000001 2.644 52.55120110000001 1.72 116.0792447 11.121 91.5351384 12.996 101.8464435 2.728 76.4621379 12.968 87.22834110000002 2.719 145.4906468 2.751 78.4750545 2.598 97.35706929999999 2.614 60.49170110000001 1.789 51.15576819999999 1.778 71.9995659 2.643 57.17543050000001 2.716)
Error minima by case: (37.0 2 32.0 3 14.1871 10 9.5617 9 65.2924 2 50.0 2 2.7303 2 2.9844 7 0.9432 9 6.9696 1 33.0 2 29.7788 2 2.0 1 14.1887 9 7.8457 8 4.1641 2 4.1978 9 39.0 2 21.9456 1 5.6558 1 5.4571 1 9.0 1 1.0 1 8.3063 2 7.0 2)
Average genome size in population (length): 61.107
Average program size in population (points): 62.107
Average percent parens in population: 0.018
Minimum age in population: 6.25
Maximum age in population: 10.25
Average age in population: 8.5185
Median age in population: 8.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9408012
--- Timings ---
Current time: 1529615799534 milliseconds
Total Time:          29.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.9 seconds, 41.0%
Fitness Testing:     13.3 seconds, 45.8%
Report:               3.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction tag_float_386} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times})
Best program: (float_dup_times integer_yankdup float_yankdup float_tan integer_dup float_mult tag_float_386 integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2476.9972485999992
Median total errors in population: 1304.0
Error averages by case: (85.84040239999999 2.656 80.6414048 3.634 96.13179680000002 12.081 84.99510520000001 12.08 133.59186870000002 3.693 98.253932 3.703 112.0063865 2.654 141.55559780000002 13.08 139.38680409999995 12.058 125.17507939999997 1.772 81.07912089999999 2.603 80.9753186 2.635 51.91400460000001 1.701 116.15042470000002 11.132 91.6086102 13.016 101.69869469999999 2.722 76.29761150000002 12.973 86.85403389999999 2.7 145.3580095 2.75 78.35682979999999 2.581 97.11650809999999 2.597 59.62066420000001 1.784 50.70384659999999 1.777 71.91315879999998 2.633 56.04903480000001 2.708)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 10 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 9 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 59.153
Average program size in population (points): 60.153
Average percent parens in population: 0.019
Minimum age in population: 7.75
Maximum age in population: 11.71875
Average age in population: 10.006859375
Median age in population: 10.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 10895087
--- Timings ---
Current time: 1529615803208 milliseconds
Total Time:          33.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 40.6%
Fitness Testing:     15.1 seconds, 45.8%
Report:               4.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_dec} {:instruction float_add} {:instruction float_min} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_mod} {:instruction integer_div} {:instruction tagged_913} {:instruction integer_swap})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 float_swap float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank integer_inc integer_max float_stackdepth float_mult float_sin in2 integer_dec float_add float_min float_yankdup float_sub float_tan integer_inc float_yank float_dup_items integer_max float_stackdepth float_mult float_sin in2 integer_add float_add float_min float_dec float_dec float_mod integer_div tagged_913 integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2550.8423186999994
Median total errors in population: 1304.0
Error averages by case: (88.7512371 2.682 83.89970749999999 3.666 98.9849813 12.095 87.93467969999999 12.093 136.382938 3.724 101.13301490000002 3.727 114.9291463 2.683 144.1960842 13.087 142.0159931 12.068 127.87186919999999 1.795 84.2143129 2.634 84.08754130000003 2.668 55.224243500000014 1.733 118.90267470000002 11.139 94.52126899999999 13.027 104.51388589999998 2.744 79.23303569999999 12.983 89.98677490000001 2.729 148.02320429999997 2.779 81.3563234 2.615 100.0145051 2.629 62.67323240000001 1.806 53.7272028 1.8 74.93893249999999 2.662 59.028529000000006 2.729)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 8 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 17.2429 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 9 34.1707 2 4.1978 9 39.0 2 68.1948 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 0.2303 2)
Average genome size in population (length): 59.145
Average program size in population (points): 60.145
Average percent parens in population: 0.019
Minimum age in population: 9.0625
Maximum age in population: 13.390625
Average age in population: 11.48228125
Median age in population: 11.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.018
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12381001
--- Timings ---
Current time: 1529615807120 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.0 seconds, 40.8%
Fitness Testing:     16.9 seconds, 45.9%
Report:               4.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_swap} {:instruction in1} {:instruction float_frominteger} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction float_pop} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_swap in1 float_frominteger 69 in2 integer_flush integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin float_pop float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2473.9512847999995
Median total errors in population: 1304.0
Error averages by case: (85.58160980000001 2.621 80.2711311 3.608 96.2758708 12.081 85.0500825 12.075 133.26844200000002 3.651 97.97777440000003 3.658 111.93896470000001 2.623 141.7396287 13.078 139.6816676 12.063 125.1339071 1.735 80.8643676 2.575 80.7948545 2.607 51.594917900000006 1.67 116.25638280000001 11.121 91.6813191 13.007 101.54875619999999 2.671 76.3843321 12.974 86.62243170000002 2.672 145.240556 2.704 78.37163949999999 2.549 97.1928317 2.566 59.216674100000006 1.747 50.4158926 1.73 71.88481449999999 2.609 55.897435800000004 2.67)
Error minima by case: (37.0 2 32.0 3 15.1871 10 20.0144 9 87.0 2 50.0 2 66.0 2 2.9844 7 1.9432 10 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 20.305 9 54.0 2 5.1978 9 39.0 2 100.0 1 12.832 1 6.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 58.476
Average program size in population (points): 59.476
Average percent parens in population: 0.019
Minimum age in population: 10.4375
Maximum age in population: 14.92578125
Average age in population: 12.97834765625
Median age in population: 13.025390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.012
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13849615
--- Timings ---
Current time: 1529615810897 milliseconds
Total Time:          40.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.6 seconds, 40.8%
Fitness Testing:     18.6 seconds, 45.7%
Report:               5.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_flush})
Best program: (integer_rot integer_yankdup float_yankdup float_shove integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_frominteger integer_sub float_mult integer_mult float_dup_items float_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2210.408865599999
Median total errors in population: 1304.0
Error averages by case: (76.2510612 2.522 69.24560699999999 3.508 84.7699403 12.058 73.474524 12.061 124.51907709999999 3.543 88.7970085 3.547 100.86119520000001 2.525 132.42242309999997 13.054 128.66267929999998 12.057 115.96070559999998 1.618 69.6122569 2.487 69.4975197 2.503 40.13318680000001 1.561 106.78518460000002 11.095 80.16977609999999 13.0 92.2576328 2.569 64.69272290000002 12.975 75.4731493 2.571 136.37034150000005 2.588 68.71150159999999 2.46 87.65556269999999 2.478 49.7768934 1.629 38.7690003 1.612 60.25359189999999 2.503 44.207323800000005 2.555)
Error minima by case: (37.0 2 32.0 3 15.1871 10 18.7078 9 87.0 2 50.0 2 66.0 2 2.9844 7 1.9432 9 73.2648 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 9 54.0 2 4.8547 9 39.0 2 100.0 1 12.832 1 5.1748 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 56.587
Average program size in population (points): 57.587
Average percent parens in population: 0.020
Minimum age in population: 11.8203125
Maximum age in population: 16.296875
Average age in population: 14.448173828125
Median age in population: 14.48046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.013
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15269865
--- Timings ---
Current time: 1529615814354 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.0 seconds, 40.7%
Fitness Testing:     20.3 seconds, 45.8%
Report:               5.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction integer_add} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_div} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot})
Best program: (integer_rot integer_fromfloat float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 integer_add float_inc float_max print_float integer_dup integer_sub float_div integer_mult float_dup_items integer_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2398.3996428999994
Median total errors in population: 1304.0
Error averages by case: (82.8423499 2.615 77.65629249999999 3.602 93.3278944 12.116 81.21811579999999 12.117 130.72044140000003 3.64 95.2847471 3.644 108.36705490000001 2.612 138.87739929999998 13.106 136.6921358 12.104 121.5328993 1.72 78.13705170000001 2.577 78.0437964 2.601 48.8515681 1.653 113.2042018 11.137 87.94097269999999 13.038 98.6805311 2.665 73.03849910000001 13.009 83.92846130000002 2.656 142.227661 2.689 75.4079732 2.548 94.2106474 2.566 56.4786602 1.734 47.586235699999996 1.719 68.0188728 2.597 53.001180000000005 2.659)
Error minima by case: (37.0 2 32.0 3 14.1871 9 20.0144 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 20.305 9 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 54.773
Average program size in population (points): 55.773
Average percent parens in population: 0.021
Minimum age in population: 13.21875
Maximum age in population: 17.87109375
Average age in population: 15.943669921875
Median age in population: 16.0185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.018
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16643690
--- Timings ---
Current time: 1529615817911 milliseconds
Total Time:          47.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 41.1%
Fitness Testing:     21.9 seconds, 45.8%
Report:               6.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_sub} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2} {:instruction integer_add})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_dup_times integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank float_sub integer_pop float_stackdepth float_mult float_sin in2 integer_add)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2511.803344999999
Median total errors in population: 1304.0
Error averages by case: (87.30052090000001 2.742 82.61009639999999 3.722 97.90498509999999 12.112 86.86354109999999 12.115 135.09059970000004 3.78 99.7227892 3.783 113.09586620000002 2.753 141.0852454 13.103 140.78777069999995 12.106 126.11675289999997 1.865 82.6229247 2.708 82.420891 2.731 53.77115850000001 1.8 115.9039256 11.16 93.4203153 13.034 102.9029385 2.813 78.23061090000002 12.991 88.43504909999999 2.795 146.40792120000003 2.839 78.3765724 2.668 96.96058090000001 2.694 61.4338591 1.88 53.319496699999995 1.882 73.00811229999998 2.721 58.411821200000006 2.802)
Error minima by case: (21.4467 2 33.0 3 14.1871 8 0.5977 8 66.2924 2 38.2062 2 18.0578 2 2.9229 9 0.9432 9 7.9696 1 23.0877 2 15.0821 2 3.0 1 14.1959 9 0.9591 8 16.2122 2 2.1162 8 33.9721 2 22.9456 1 11.832 1 5.4571 1 9.0 1 2.0 1 21.1383 2 8.0 2)
Average genome size in population (length): 52.618
Average program size in population (points): 53.618
Average percent parens in population: 0.022
Minimum age in population: 14.234375
Maximum age in population: 19.498046875
Average age in population: 17.40386669921875
Median age in population: 17.470458984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 17962540
--- Timings ---
Current time: 1529615821483 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.1 seconds, 41.2%
Fitness Testing:     23.5 seconds, 45.9%
Report:               6.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove})
Best program: (integer_rot integer_yankdup float_yankdup integer_rot integer_yankdup float_yankdup float_shove integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add integer_shove integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2730.1599751999997
Median total errors in population: 1304.0
Error averages by case: (96.92024850000001 2.819 91.35257569999999 3.784 105.42875219999999 12.134 93.5754189 12.132 144.27676749999998 3.866 109.22494750000001 3.863 120.6875611 2.802 151.0069919 13.112 148.2950486 12.109 134.49862420000002 1.935 91.34226430000001 2.762 91.15575450000001 2.79 62.78489150000001 1.871 125.90771229999999 11.181 100.16743260000001 13.054 112.26164709999999 2.89 85.5505401 13.0 97.11387400000001 2.851 155.08887660000002 2.926 89.1571433 2.736 107.62390219999999 2.759 71.29881139999999 1.958 61.302220199999994 1.959 80.7935183 2.775 66.4044507 2.872)
Error minima by case: (37.0 2 32.0 3 14.1351 8 18.7078 8 87.0 2 50.0 2 66.0 2 2.9229 7 0.8452 8 79.0 1 33.0 2 33.0 2 2.0 1 9.3216 9 19.1422 9 54.0 2 4.1668 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 50.426
Average program size in population (points): 51.426
Average percent parens in population: 0.023
Minimum age in population: 15.234375
Maximum age in population: 20.831787109375
Average age in population: 18.84800512695312
Median age in population: 18.91015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19226190
--- Timings ---
Current time: 1529615825024 milliseconds
Total Time:          54.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.7 seconds, 41.3%
Fitness Testing:     25.1 seconds, 45.7%
Report:               7.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_yank} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_min})
Best program: (integer_rot integer_yankdup integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_yank float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_rot float_dec integer_min integer_swap integer_min)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2557.3172825999986
Median total errors in population: 1304.0
Error averages by case: (89.23097800000001 2.744 84.577464 3.722 98.82761339999999 12.15 87.78457429999997 12.144 136.93783840000003 3.766 101.63575030000001 3.775 115.01871340000001 2.741 143.76229080000002 13.131 142.0826307 12.148 127.99892799999999 1.846 84.5888654 2.704 84.38841610000001 2.715 55.80126540000001 1.794 118.63036580000004 11.184 94.34386249999999 13.062 104.8231606 2.807 79.1770071 13.04 90.38936660000003 2.794 148.2745023 2.831 81.37198109999997 2.674 99.994914 2.696 63.37961070000001 1.869 54.277495099999996 1.867 74.93604479999998 2.703 59.383643800000016 2.793)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 9 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 49.957
Average program size in population (points): 50.957
Average percent parens in population: 0.023
Minimum age in population: 17.3359375
Maximum age in population: 22.4095458984375
Average age in population: 20.32087890625
Median age in population: 20.394287109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 20477715
--- Timings ---
Current time: 1529615828541 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.2 seconds, 41.4%
Fitness Testing:     26.7 seconds, 45.7%
Report:               7.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_max} {:instruction float_tan})
Best program: (integer_rot integer_yankdup float_yankdup integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_max float_tan)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 2651.672277999999
Median total errors in population: 1304.0
Error averages by case: (93.08668829999999 2.789 88.28476900000001 3.764 102.5367171 12.138 91.65255370000001 12.15 140.63100880000002 3.82 105.44300349999999 3.834 118.63631910000002 2.794 147.4280406 13.126 145.10867179999997 12.125 131.7405846 1.919 88.32155540000001 2.745 88.13962539999999 2.774 59.64014810000001 1.847 122.42424800000002 11.182 98.1749545 13.053 108.62122039999998 2.861 82.96371400000001 13.011 94.10614600000001 2.839 151.8992991 2.889 85.0559368 2.703 103.4612884 2.729 67.3297243 1.947 58.25680719999999 1.93 78.82691069999998 2.764 63.31934320000001 2.85)
Error minima by case: (37.0 2 32.0 3 14.1871 9 17.5237 9 87.0 2 50.0 2 15.4266 2 1.9815 7 0.9432 9 79.0 1 20.4565 2 12.4508 2 2.0 1 12.4995 9 19.1337 8 54.0 2 4.1978 9 31.3408 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 48.007
Average program size in population (points): 49.007
Average percent parens in population: 0.024
Minimum age in population: 18.6007080078125
Maximum age in population: 23.83740234375
Average age in population: 21.80812634277344
Median age in population: 21.84378051757812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 21680003
--- Timings ---
Current time: 1529615831784 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 41.5%
Fitness Testing:     28.2 seconds, 45.7%
Report:               7.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_shove} {:instruction float_flush} {:instruction in1} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_tan} {:instruction integer_inc} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth})
Best program: (integer_rot integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot float_shove float_flush in1 in1 integer_dec 69 in2 float_shove float_sin integer_mod integer_swap integer_add integer_shove integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_sub float_mult float_shove float_stackdepth tag_float_923 integer_mult float_min integer_dup_items float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_tan integer_inc float_yank float_dup_items integer_max float_stackdepth)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2444.5704441999987
Median total errors in population: 1304.0
Error averages by case: (85.05347970000001 2.66 79.05809060000001 3.64 95.08643259999998 12.109 83.99018799999999 12.115 132.91084830000005 3.691 97.49002720000004 3.697 110.1721771 2.661 139.56900589999998 13.099 138.2358043 12.094 124.29977409999998 1.771 79.33398520000001 2.618 79.20493650000002 2.637 50.21939020000001 1.708 114.20107070000002 11.139 90.59252289999999 13.034 100.8584003 2.719 75.27919659999999 13.003 85.14705250000002 2.698 144.547787 2.745 76.3596235 2.582 95.05950649999998 2.61 58.891409400000015 1.791 49.8969482 1.777 69.97408999999998 2.631 55.203696900000004 2.706)
Error minima by case: (37.0 2 32.0 3 15.1871 10 4.0019 9 87.0 2 50.0 2 49.9864 2 2.9844 7 1.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 0.7239 9 54.0 2 4.8547 9 39.0 2 100.0 1 12.832 1 5.1748 1 9.0 1 1.0 1 0.1339 2 7.0 2)
Average genome size in population (length): 48.207
Average program size in population (points): 49.207
Average percent parens in population: 0.024
Minimum age in population: 21.0555419921875
Maximum age in population: 25.10992431640625
Average age in population: 23.26717428588867
Median age in population: 23.27033996582031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 22887178
--- Timings ---
Current time: 1529615835427 milliseconds
Total Time:          65.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.0 seconds, 41.5%
Fitness Testing:     29.9 seconds, 46.0%
Report:               8.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_cos} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction in1} {:instruction float_shove} {:instruction 64.25803746409744} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction float_mult} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction float_mult} {:instruction float_max} {:instruction float_stackdepth})
Best program: (integer_rot float_cos float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max integer_mod float_dup_times integer_swap integer_add in1 in1 float_shove 64.25803746409744 integer_fromfloat integer_mod integer_swap integer_add float_mult integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 float_mult float_max float_stackdepth)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2431.2459828999986
Median total errors in population: 1304.0
Error averages by case: (84.19288939999998 2.649 79.10082669999998 3.63 94.13598920000001 12.108 83.05672450000002 12.108 132.115827 3.672 96.64861869999999 3.682 110.1370152 2.65 139.569309 13.1 137.27574489999998 12.107 123.43875299999996 1.758 79.3380297 2.605 79.19751309999998 2.628 50.24877230000002 1.696 114.2250719 11.149 89.66343549999999 13.038 99.9937508 2.711 74.32351650000003 13.005 85.15294859999999 2.693 143.72363890000003 2.721 76.38033720000001 2.572 95.0545332 2.596 58.0357994 1.778 49.00719329999999 1.756 69.22030219999998 2.63 54.27144270000001 2.696)
Error minima by case: (37.0 2 32.0 3 14.1871 10 20.0144 9 87.0 2 50.0 2 4.8541 2 2.9844 7 0.9432 10 79.0 1 9.8839 2 1.8783 2 2.0 1 14.1887 9 20.305 9 54.0 2 4.1978 9 20.7683 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 46.751
Average program size in population (points): 47.751
Average percent parens in population: 0.024
Minimum age in population: 22.1416015625
Maximum age in population: 26.9569091796875
Average age in population: 24.75474635314941
Median age in population: 24.76766967773438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 24057792
--- Timings ---
Current time: 1529615838854 milliseconds
Total Time:          68.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.5 seconds, 41.4%
Fitness Testing:     31.5 seconds, 45.9%
Report:               8.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_shove} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction tagged_920} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction integer_div} {:instruction float_rot} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_yankdup})
Best program: (integer_rot integer_yankdup integer_rot integer_yankdup float_yankdup integer_inc integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_shove integer_sub float_mult integer_mult integer_mod float_flush in1 integer_dec 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup float_stackdepth float_mult float_shove float_stackdepth tag_float_923 tagged_920 float_min integer_dup_items float_yank float_div float_shove integer_div float_rot float_yank integer_fromfloat float_stackdepth float_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2358.9988637999995
Median total errors in population: 1304.0
Error averages by case: (80.9833994 2.568 75.8014594 3.555 92.3743034 12.076 81.1587042 12.075 128.97895710000003 3.596 93.4577393 3.599 107.33030140000004 2.573 136.13638409999996 13.067 135.87109959999995 12.063 120.57268139999998 1.669 76.24256929999999 2.528 76.1413173 2.557 46.92352440000001 1.616 110.57736630000002 11.114 87.8013086 13.013 96.9446701 2.62 72.4395086 12.981 82.05061230000001 2.615 140.84246170000003 2.645 72.5478566 2.503 91.423923 2.52 54.5947693 1.683 46.64712899999999 1.672 67.03335449999999 2.553 52.049463499999995 2.613)
Error minima by case: (37.0 2 32.0 3 14.1871 10 16.7544 9 87.0 2 50.0 2 66.0 2 0.4079 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 16.3104 8 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 45.651
Average program size in population (points): 46.651
Average percent parens in population: 0.025
Minimum age in population: 23.815673828125
Maximum age in population: 28.36090850830078
Average age in population: 26.24405491638184
Median age in population: 26.29845809936523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 25200556
--- Timings ---
Current time: 1529615842257 milliseconds
Total Time:          72.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 41.5%
Fitness Testing:     33.0 seconds, 45.8%
Report:               9.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_dec} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_dup_times})
Best program: (integer_sub integer_div float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_dec float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec 69 in2 integer_flush integer_inc integer_mod float_dup_times)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2467.4318573999994
Median total errors in population: 1304.0
Error averages by case: (84.9259288 2.635 80.6417155 3.602 96.1831179 12.104 84.9891287 12.104 132.7456103 3.67 97.3534618 3.669 112.00434830000002 2.615 140.6756591 13.085 139.6640936 12.095 124.25548779999998 1.748 81.08323510000001 2.575 80.97717320000002 2.604 51.91530050000001 1.666 115.22195090000001 11.136 91.60216749999998 13.029 100.78002970000001 2.692 76.3440448 12.994 86.85481300000002 2.675 144.47810440000003 2.712 77.5201672 2.549 96.37488909999999 2.566 58.705359900000005 1.761 50.75700689999999 1.746 71.91336119999998 2.597 56.15470220000001 2.682)
Error minima by case: (37.0 2 32.0 3 14.1871 8 20.0144 8 87.0 2 50.0 2 66.0 2 2.9229 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 12.8794 9 20.305 8 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 44.776
Average program size in population (points): 45.776
Average percent parens in population: 0.025
Minimum age in population: 24.815673828125
Maximum age in population: 29.66781997680664
Average age in population: 27.70080054092407
Median age in population: 27.75119209289551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 26321156
--- Timings ---
Current time: 1529615845475 milliseconds
Total Time:          75.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.3 seconds, 41.5%
Fitness Testing:     34.5 seconds, 45.7%
Report:               9.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_shove} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_rot} {:instruction float_inc} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction -60} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_add} {:instruction float_swap} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction -55} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_inc} {:instruction integer_inc} {:instruction float_yank} {:instruction float_sub})
Best program: (integer_rot integer_rot integer_yankdup integer_yankdup float_yankdup float_tan integer_dup float_mult integer_sub integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot float_shove float_max integer_dup_items float_rot float_inc float_sin integer_mod integer_swap integer_add -60 integer_dup float_yankdup integer_yankdup integer_swap float_sin integer_yankdup integer_swap integer_add float_swap integer_dup integer_yankdup float_div float_mult float_shove float_stackdepth tag_float_923 integer_mult -55 integer_dup_items float_yank float_div float_shove in2 float_rot float_max float_stackdepth float_yankdup float_sub float_inc integer_inc float_yank float_sub)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2925.228969199999
Median total errors in population: 1304.0
Error averages by case: (104.5705306 2.911 98.6260068 3.861 112.98453570000001 12.107 102.2088911 12.108 151.5077698 3.964 116.76769140000002 3.975 128.91361630000003 2.888 158.4273127 13.102 155.3348229 12.065 142.71636630000003 2.06 98.80740939999998 2.818 98.65839499999998 2.87 70.36141180000001 1.954 133.61468220000003 11.178 108.662623 13.018 119.9042887 2.997 93.63610199999998 12.956 104.50617530000002 2.949 162.63503740000004 3.044 96.80077720000001 2.793 115.10114619999999 2.811 79.14244699999999 2.078 69.17034499999998 2.069 89.52437249999998 2.872 74.22121289999998 2.977)
Error minima by case: (37.0 2 32.0 3 1.9694 9 16.2206 8 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 1.524 9 19.1422 8 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 20.0886 2 7.0 2)
Average genome size in population (length): 43.383
Average program size in population (points): 44.383
Average percent parens in population: 0.026
Minimum age in population: 26.48204040527344
Maximum age in population: 31.19684028625488
Average age in population: 29.20374550819397
Median age in population: 29.25185966491699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 27406631
--- Timings ---
Current time: 1529615848970 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 41.7%
Fitness Testing:     35.9 seconds, 45.7%
Report:               9.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction print_integer} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction integer_add} {:instruction integer_flush} {:instruction float_rot})
Best program: (integer_mod print_integer float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_mult float_inc float_max print_float integer_dup integer_inc float_shove integer_mult float_dup_items integer_mult integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_yank integer_add integer_flush float_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2791.490303299999
Median total errors in population: 1304.0
Error averages by case: (98.4443894 2.79 93.4011133 3.751 108.4796263 12.215 97.4726334 12.23 145.5757443 3.822 110.69482410000002 3.83 124.16821770000001 2.765 153.19271369999998 13.176 151.3098382 12.206 137.1455169 1.891 93.74483239999999 2.735 93.6289646 2.751 65.0379973 1.825 128.16931639999999 11.232 103.98761239999999 13.12 114.0363544 2.854 88.9392052 13.084 99.4548759 2.819 157.08539929999998 2.888 91.0439853 2.703 109.5704716 2.73 72.6449315 1.923 63.791504499999995 1.91 84.6088223 2.734 69.0444129 2.833)
Error minima by case: (36.0 2 32.0 3 14.1871 9 18.7078 9 86.0 2 49.0 2 66.0 2 2.9844 7 0.9432 8 78.0 1 33.0 2 33.0 2 2.0 1 13.9125 9 19.1422 9 53.0 2 4.1978 9 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 42.615
Average program size in population (points): 43.615
Average percent parens in population: 0.026
Minimum age in population: 27.97471618652344
Maximum age in population: 32.52523708343506
Average age in population: 30.72748744487762
Median age in population: 30.76470184326172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 28472781
--- Timings ---
Current time: 1529615852529 milliseconds
Total Time:          82.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 41.7%
Fitness Testing:     37.5 seconds, 45.5%
Report:              10.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction in1} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction 69} {:instruction float_rot} {:instruction integer_flush} {:instruction integer_max} {:instruction float_rot} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult float_stackdepth float_dup_items integer_rot integer_dup_times float_flush float_max print_float integer_dup integer_sub float_mult integer_mult in1 integer_rot integer_dup_times float_flush 69 float_rot integer_flush integer_max float_rot float_dup_times float_shove integer_dec integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap float_yank float_dup_items integer_max float_stackdepth float_mult)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2855.2807795999997
Median total errors in population: 1304.0
Error averages by case: (100.52215460000001 2.836 96.6760827 3.817 111.26840199999998 12.148 100.32429379999999 12.15 147.6105965 3.888 112.7570389 3.889 127.0217833 2.835 154.80278090000002 13.117 153.9266779 12.113 139.009495 1.973 96.8526318 2.783 96.71096039999999 2.821 68.3517289 1.908 129.913386 11.185 106.80676990000002 13.037 116.0107891 2.919 91.81695079999999 13.005 102.5702969 2.898 158.95172580000002 2.95 92.96284940000001 2.752 111.3763653 2.773 74.86438089999999 1.992 66.9642335 1.981 87.56691219999999 2.808 72.16549309999999 2.898)
Error minima by case: (37.0 2 32.0 3 14.1871 10 8.0274 8 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 8.0555 9 7.5834 8 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.1748 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 40.762
Average program size in population (points): 41.762
Average percent parens in population: 0.027
Minimum age in population: 29.7268590927124
Maximum age in population: 34.02446174621582
Average age in population: 32.25873470544815
Median age in population: 32.31065082550049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 29492456
--- Timings ---
Current time: 1529615855714 milliseconds
Total Time:          85.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.7 seconds, 41.7%
Fitness Testing:     38.9 seconds, 45.5%
Report:              10.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mod} {:instruction print_integer} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction in2} {:instruction in2} {:instruction 69} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_shove} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_shove} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction integer_add})
Best program: (integer_rot integer_yankdup float_yankdup integer_mod print_integer float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_rot integer_dup_times float_mult integer_mult float_dup_items integer_rot in2 in2 69 float_mult integer_mult float_dup_items integer_dup_items integer_dup_times float_flush float_shove float_sub integer_mod integer_swap integer_add integer_yankdup integer_swap float_shove float_sub float_stackdepth integer_swap integer_add)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2927.520158799999
Median total errors in population: 1304.0
Error averages by case: (103.35016769999999 2.851 99.35548519999999 3.826 114.34796440000001 12.162 103.2393961 12.177 150.18825549999997 3.895 115.57528690000001 3.898 129.743905 2.848 157.67742880000003 13.147 156.97268160000002 12.145 141.8079866 1.986 99.51841950000002 2.8 99.50482890000002 2.828 71.1819421 1.92 132.8165688 11.209 109.7005491 13.07 118.83309000000001 2.929 94.82263119999999 13.028 105.30506070000001 2.911 161.65278540000003 2.967 95.8684431 2.764 114.2237342 2.793 77.877551 2.004 69.8850457 2.001 90.45663819999999 2.821 75.71731309999998 2.917)
Error minima by case: (37.0 2 32.0 3 14.1871 8 18.5597 9 87.0 2 50.0 2 48.6391 2 2.9229 9 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1959 9 7.8457 9 54.0 2 4.1978 8 39.0 2 100.0 1 5.45 1 5.4571 1 9.0 1 1.0 1 9.6014 2 7.0 2)
Average genome size in population (length): 39.784
Average program size in population (points): 40.784
Average percent parens in population: 0.028
Minimum age in population: 30.85577964782715
Maximum age in population: 35.61942005157471
Average age in population: 33.72432357692719
Median age in population: 33.76956963539124
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.014
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 30487431
--- Timings ---
Current time: 1529615858978 milliseconds
Total Time:          88.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.1 seconds, 41.8%
Fitness Testing:     40.3 seconds, 45.4%
Report:              11.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction print_integer} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction float_sin} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction tag_float_301} {:instruction float_dup_items} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction in1} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction integer_add} {:instruction in1} {:instruction integer_dup})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush print_integer in2 69 in2 float_sin print_float integer_dup integer_sub float_mult tag_float_301 float_dup_items float_sub integer_dup_times integer_mod in1 in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod float_stackdepth integer_add in1 integer_dup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2595.2859591999995
Median total errors in population: 1304.0
Error averages by case: (90.07278219999999 2.73 86.49181660000002 3.707 100.88842310000001 12.122 89.776216 12.123 137.71259460000002 3.768 102.5022384 3.773 116.88171159999999 2.737 144.8721173 13.096 144.22420899999997 12.098 128.85968579999997 1.85 86.4194378 2.691 86.24547229999999 2.711 57.8372001 1.792 119.6524966 11.153 96.30798740000002 13.028 105.65645640000001 2.801 81.1182584 12.997 92.33285889999999 2.778 149.08748129999998 2.826 82.49344949999998 2.657 101.0809776 2.685 64.3774605 1.872 56.14437900000001 1.863 76.95351729999999 2.704 61.9477315 2.787)
Error minima by case: (37.0 2 32.0 3 6.2222 8 18.5597 7 87.0 2 50.0 2 66.0 2 2.8352 7 0.9432 9 50.6923 1 33.0 2 1.3951 2 2.0 1 5.4353 9 7.8457 8 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 39.072
Average program size in population (points): 40.072
Average percent parens in population: 0.029
Minimum age in population: 32.51716041564941
Maximum age in population: 37.2808324098587
Average age in population: 35.22950679767132
Median age in population: 35.24595725536346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 31464556
--- Timings ---
Current time: 1529615862423 milliseconds
Total Time:          92.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.6 seconds, 41.8%
Fitness Testing:     41.9 seconds, 45.4%
Report:              11.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction -40} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_min})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_dup integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_sub integer_dup_times -40 integer_max integer_mod float_dup_times float_shove float_sin integer_mod in2 integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_min)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2411.8471020999987
Median total errors in population: 1304.0
Error averages by case: (83.1430308 2.656 78.2158727 3.632 94.10545379999999 12.105 83.01736929999998 12.111 131.2833428 3.677 95.68452740000001 3.694 109.32921450000002 2.658 137.73123800000002 13.095 137.31313459999998 12.095 122.45731489999997 1.766 78.5727186 2.618 78.35973180000002 2.633 49.39593820000001 1.706 112.22393330000001 11.145 89.6302191 13.033 99.04467029999998 2.719 74.3073084 13.001 84.37361370000002 2.701 142.79608690000003 2.736 74.4513192 2.578 93.22168559999999 2.603 57.045746300000005 1.789 49.06535309999999 1.775 69.03337089999998 2.63 54.184907900000006 2.704)
Error minima by case: (26.2231 2 32.0 3 14.1871 10 18.7078 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 10 79.0 1 33.0 2 33.0 2 2.0 1 2.1232 8 12.6551 9 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 6.4484 2)
Average genome size in population (length): 38.817
Average program size in population (points): 39.817
Average percent parens in population: 0.029
Minimum age in population: 33.81774997711182
Maximum age in population: 38.73874282836914
Average age in population: 36.77289767682552
Median age in population: 36.84255474805832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 32435306
--- Timings ---
Current time: 1529615865450 milliseconds
Total Time:          95.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.9 seconds, 41.9%
Fitness Testing:     43.2 seconds, 45.3%
Report:              12.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tag_float_921} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction float_mult} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dec} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_max} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_sin})
Best program: (tag_float_921 integer_mod float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_dup_times float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_yankdup integer_yankdup integer_swap integer_flush integer_max integer_mod float_dup_times float_shove float_flush in1 integer_dec 69 in2 float_mult integer_max integer_mod float_dec float_shove in1 integer_mod float_dup_times float_shove float_sin float_mod integer_swap integer_add in1 integer_dup float_max integer_dup integer_swap float_sin)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2527.3475961999998
Median total errors in population: 1304.0
Error averages by case: (89.1037683 2.705 82.47932039999999 3.685 96.91020129999997 12.059 85.9045322 12.06 136.82908010000003 3.746 101.50569050000003 3.752 113.10709660000003 2.713 143.84232289999997 13.05 140.07927499999997 12.03 127.96318979999998 1.83 82.55163520000002 2.654 82.3859344 2.693 53.667065700000016 1.761 118.66117990000004 11.116 92.4841994 12.988 104.73421229999998 2.772 77.17028780000001 12.941 88.37292830000001 2.765 148.20638740000007 2.801 81.3002931 2.628 99.87686249999999 2.645 63.1958387 1.846 52.14434479999999 1.83 72.99451609999998 2.687 57.3634335 2.757)
Error minima by case: (37.0 2 33.0 3 5.2565 10 19.8767 8 87.0 2 50.0 2 67.0 2 2.9844 7 0.9432 9 78.5699 1 34.0 2 34.0 2 3.0 1 1.4568 9 19.4327 9 54.0 2 2.1162 8 40.0 2 100.0 1 11.832 1 5.1748 1 9.0 1 2.0 1 25.0 2 8.0 2)
Average genome size in population (length): 38.413
Average program size in population (points): 39.413
Average percent parens in population: 0.029
Minimum age in population: 35.11012363433838
Maximum age in population: 40.36593213677406
Average age in population: 38.28733154383302
Median age in population: 38.31773614883423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.019
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 33395806
--- Timings ---
Current time: 1529615868851 milliseconds
Total Time:          98.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.4 seconds, 42.0%
Fitness Testing:     44.6 seconds, 45.3%
Report:              12.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_max} {:instruction float_sub} {:instruction float_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction in1} {:instruction integer_add} {:instruction in1} {:instruction float_stackdepth} {:instruction tag_float_923} {:instruction integer_mult} {:instruction float_min} {:instruction integer_min} {:instruction float_yank} {:instruction float_div} {:instruction float_shove} {:instruction in2} {:instruction float_rot} {:instruction float_yank} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_sub} {:instruction integer_max} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_sin} {:instruction in2})
Best program: (integer_rot integer_rot integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_max float_sub float_dup integer_sub float_mult integer_mult float_dup_items integer_rot in1 integer_add in1 float_stackdepth tag_float_923 integer_mult float_min integer_min float_yank float_div float_shove in2 float_rot float_yank float_max float_stackdepth float_yankdup float_sub float_sub integer_max float_stackdepth float_mult float_sin in2)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2890.9930985999986
Median total errors in population: 1304.0
Error averages by case: (102.4922444 2.868 97.7841789 3.831 112.25521499999999 12.128 101.3061288 12.146 149.46749520000003 3.926 114.74925540000004 3.923 127.99398800000002 2.859 156.53040660000002 13.115 154.55761619999998 12.101 140.8303458 2.011 97.82016920000001 2.801 97.78953380000002 2.842 69.51041780000003 1.934 131.7168964 11.18 107.76756000000002 13.041 117.89783089999999 2.945 92.7275665 12.992 103.6419675 2.921 160.74534000000003 2.988 94.8572435 2.77 113.1087271 2.795 77.13043799999998 2.045 68.01254989999998 2.036 88.59259369999998 2.839 73.73638999999999 2.934)
Error minima by case: (36.0 2 32.0 3 14.1871 10 18.5597 9 86.0 2 49.0 2 66.0 2 2.6755 9 0.9432 10 64.1634 1 33.0 2 33.0 2 2.0 1 13.9125 9 7.8457 9 53.0 2 4.1978 11 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 37.648
Average program size in population (points): 38.648
Average percent parens in population: 0.029
Minimum age in population: 37.19260323047638
Maximum age in population: 41.51564559340477
Average age in population: 39.78709472617507
Median age in population: 39.837836176157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 34337056
--- Timings ---
Current time: 1529615871974 milliseconds
Total Time:         101.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.8 seconds, 42.0%
Fitness Testing:     46.0 seconds, 45.1%
Report:              12.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction float_min} {:instruction 69} {:instruction integer_pop} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (integer_rot integer_rot integer_yankdup float_yankdup float_tan integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_add integer_dup_times float_flush integer_dup_times float_flush in1 float_min 69 integer_pop integer_flush integer_max integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add integer_dup_items integer_dup integer_dec integer_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2657.5204389999985
Median total errors in population: 1304.0
Error averages by case: (92.72229300000001 2.763 88.6698674 3.724 103.53689399999999 12.095 91.9808373 12.104 140.11392600000005 3.804 105.09607310000001 3.816 119.19107240000004 2.76 147.7314898 13.099 146.11114539999997 12.064 130.99619699999997 1.896 89.2848261 2.711 88.88753940000001 2.738 60.183974100000015 1.818 122.57445940000002 11.158 98.64554559999999 13.024 108.38493079999998 2.837 83.8294972 12.979 94.73300770000002 2.806 151.66203220000003 2.873 84.9649874 2.668 103.5974047 2.698 66.90438700000001 1.917 58.83429319999999 1.914 79.06221649999998 2.735 63.99654230000001 2.824)
Error minima by case: (37.0 2 32.0 3 14.1871 9 28.113 9 84.6568 2 50.0 2 63.7717 2 47.2349 9 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 41.4923 10 16.898 8 54.0 2 4.1978 9 39.0 2 100.0 1 11.8092 1 5.4397 1 9.0 1 1.0 1 17.6193 2 7.0 2)
Average genome size in population (length): 36.776
Average program size in population (points): 37.776
Average percent parens in population: 0.030
Minimum age in population: 38.78454202413559
Maximum age in population: 43.11510957032442
Average age in population: 41.23781260821223
Median age in population: 41.26410375535488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 35256481
--- Timings ---
Current time: 1529615875111 milliseconds
Total Time:         105.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 42.1%
Fitness Testing:     47.3 seconds, 45.0%
Report:              13.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_rot} {:instruction in1} {:instruction float_flush})
Best program: (integer_rot integer_rot integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_dup_items integer_rot integer_dup_times float_flush in1 integer_dec integer_sub float_mult in1 in2 69 float_flush in1 integer_dec integer_sub float_mult integer_dec integer_sub integer_rot in1 float_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2531.750820499999
Median total errors in population: 1304.0
Error averages by case: (88.06454160000001 2.724 84.20267390000001 3.695 98.8137082 12.12 85.92044369999998 12.132 135.7930488 3.76 100.46896710000003 3.763 113.35182310000005 2.724 143.0286903 13.109 141.7156456 12.115 125.29932529999999 1.839 84.3705777 2.684 84.20443620000003 2.703 55.47699520000001 1.78 117.60441030000001 11.163 92.64304479999998 13.051 103.39525739999999 2.79 78.23442929999999 13.003 90.15460730000002 2.76 146.42414450000007 2.814 80.23923020000001 2.646 98.8125567 2.674 62.07553540000001 1.853 54.0225909 1.855 72.99469959999999 2.699 59.207437399999996 2.776)
Error minima by case: (37.0 2 32.0 3 14.2364 8 20.0144 8 87.0 2 50.0 2 66.0 2 2.5328 7 1.253 9 79.0 1 33.0 2 33.0 2 2.0 1 12.9576 9 19.1537 8 54.0 2 2.1162 8 39.0 2 100.0 1 11.8433 1 5.6686 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 36.885
Average program size in population (points): 37.885
Average percent parens in population: 0.029
Minimum age in population: 39.78454202413559
Maximum age in population: 44.60626897215843
Average age in population: 42.72740544283018
Median age in population: 42.75583131238818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.022
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 36178631
--- Timings ---
Current time: 1529615878225 milliseconds
Total Time:         108.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 42.3%
Fitness Testing:     48.6 seconds, 45.0%
Report:              13.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_pop} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction integer_rot} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction float_shove} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_add} {:instruction float_flush} {:instruction integer_dup})
Best program: (integer_rot integer_yankdup float_yankdup integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc integer_add print_float integer_dup integer_sub integer_pop integer_inc float_dup_items integer_rot integer_dup_times integer_mod integer_stackdepth print_float integer_dup integer_sub float_mult float_stackdepth float_dup_items integer_rot in1 float_flush in1 float_shove float_sin integer_yankdup integer_swap integer_add float_flush integer_dup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2746.189854099999
Median total errors in population: 1304.0
Error averages by case: (96.726535 2.779 91.7880305 3.762 106.60873610000002 12.137 95.5515172 12.153 144.02197370000002 3.83 109.01528080000003 3.825 122.30451720000003 2.771 151.3403346 13.117 149.41502279999997 12.117 135.3844266 1.901 91.9720396 2.73 91.82641570000001 2.76 63.312398300000005 1.836 126.33481060000003 11.179 102.06199 13.057 112.2839095 2.852 87.0743569 13.018 97.71630880000001 2.828 155.40924740000003 2.889 89.1297199 2.702 107.63947069999998 2.727 70.98197100000002 1.929 62.01237869999999 1.915 82.67624869999999 2.749 67.2052138 2.834)
Error minima by case: (37.0 2 32.0 3 14.1871 9 1.468 9 87.0 2 50.0 2 29.6145 2 2.9844 7 0.9432 8 37.9295 1 33.0 2 26.6387 2 2.0 1 14.1887 9 1.024 8 54.0 2 4.1978 9 39.0 2 88.8814 1 11.832 1 5.4571 1 9.0 1 1.0 1 3.1323 2 7.0 2)
Average genome size in population (length): 36.402
Average program size in population (points): 37.402
Average percent parens in population: 0.030
Minimum age in population: 40.78454202413559
Maximum age in population: 46.31434682384133
Average age in population: 44.19986814079806
Median age in population: 44.20054053235799
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 37088706
--- Timings ---
Current time: 1529615881318 milliseconds
Total Time:         111.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.1 seconds, 42.4%
Fitness Testing:     49.9 seconds, 44.9%
Report:              14.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_shove} {:instruction integer_sub} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_flush} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction in2})
Best program: (integer_rot float_max float_yankdup in1 float_sub float_inc float_max print_float float_shove integer_sub float_mult float_yankdup integer_mod float_flush in1 integer_dec 69 in2 integer_flush integer_max in2)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2296.368410699999
Median total errors in population: 1304.0
Error averages by case: (77.99182749999999 2.524 73.68423380000002 3.515 89.5995409 12.068 78.29784199999999 12.07 126.10819600000004 3.554 90.5001822 3.563 105.43571300000002 2.527 134.4357253 13.064 133.35180889999998 12.05 117.79464529999998 1.619 74.20704190000001 2.489 74.1189794 2.518 44.77164190000001 1.566 108.77299870000003 11.106 84.9699 13.015 94.05024819999998 2.573 69.5775729 12.984 80.0147695 2.568 138.09838110000007 2.596 70.64517269999999 2.465 89.61504879999998 2.482 51.463718300000004 1.629 43.544755699999996 1.621 65.06838999999998 2.516 49.00307670000001 2.565)
Error minima by case: (37.0 2 32.0 3 14.1871 9 19.6646 9 87.0 2 50.0 2 66.0 2 3.3181 8 0.9432 10 79.0 1 33.0 2 33.0 2 2.0 1 13.6799 10 19.2206 11 54.0 2 4.1978 11 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 36.187
Average program size in population (points): 37.187
Average percent parens in population: 0.030
Minimum age in population: 43.20587406307459
Maximum age in population: 48.01029258035123
Average age in population: 45.63962749223132
Median age in population: 45.63791593583301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.011
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 37993431
--- Timings ---
Current time: 1529615884542 milliseconds
Total Time:         114.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 42.4%
Fitness Testing:     51.4 seconds, 44.9%
Report:              14.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_div} {:instruction print_float} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_dec} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction 69})
Best program: (integer_sub integer_div print_float float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_dec float_mult integer_mult integer_dup_times float_flush in1 in2 69 in2 integer_dup_times float_flush in1 in2 69 in2 integer_flush integer_max 69)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2739.386699299999
Median total errors in population: 1304.0
Error averages by case: (96.03651900000001 2.807 92.5268988 3.78 106.34338009999999 12.107 95.47881379999998 12.116 143.46757920000002 3.84 108.36382280000002 3.86 122.50973650000002 2.81 149.99247849999998 13.101 149.0916189 12.09 134.432477 1.95 92.43973670000001 2.754 92.23134650000003 2.785 63.96129860000001 1.873 125.0707435 11.165 101.96959389999999 13.025 111.45613900000001 2.879 86.8649576 12.977 98.21190100000003 2.859 154.58372740000004 2.932 88.14572899999999 2.725 106.56230999999998 2.75 70.4493167 1.962 62.34043549999999 1.955 82.77219869999999 2.784 67.33194059999998 2.866)
Error minima by case: (36.0 2 32.0 2 7.3742 9 4.9845 3 86.0 2 49.0 2 66.0 2 2.5328 7 0.9432 9 65.9393 1 33.0 2 33.0 2 2.0 1 4.7846 9 4.5405 2 53.0 2 4.1978 2 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 35.738
Average program size in population (points): 36.738
Average percent parens in population: 0.030
Minimum age in population: 44.34515426680446
Maximum age in population: 48.92707852832973
Average age in population: 47.17056855063559
Median age in population: 47.21712617273442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 38886981
--- Timings ---
Current time: 1529615887618 milliseconds
Total Time:         117.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.0 seconds, 42.5%
Fitness Testing:     52.7 seconds, 44.8%
Report:              14.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_mult} {:instruction integer_add} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_sub} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_sin})
Best program: (integer_rot integer_yankdup float_yankdup float_tan float_mult integer_add integer_mod in1 float_sub float_inc float_max print_float integer_dup float_sub integer_sub float_mult integer_mult float_dup_items float_max print_float integer_dup integer_sub integer_dup integer_sub integer_swap integer_add integer_mod float_sin integer_mod float_sin integer_mod integer_swap integer_add integer_dup_items integer_dup float_sin)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2849.7970203999994
Median total errors in population: 1304.0
Error averages by case: (100.15619899999999 2.818 95.9367292 3.793 111.3632935 12.145 100.40515869999999 12.155 147.1365061 3.86 112.36701980000001 3.862 126.90746530000001 2.806 155.161575 13.133 153.85507929999997 12.121 138.9466713 1.958 96.4370353 2.75 96.34945390000001 2.792 67.71527240000002 1.869 130.1270743 11.194 106.9137188 13.057 115.7996036 2.892 91.8372865 13.01 102.10737670000002 2.867 158.78352760000004 2.926 92.85970209999999 2.717 111.3270139 2.737 74.29762400000001 1.976 66.5585514 1.962 87.5064096 2.785 71.87867310000001 2.878)
Error minima by case: (36.0 2 32.0 3 14.1871 10 19.0144 8 86.0 2 49.0 2 66.0 2 1.9844 7 0.9432 9 78.0 1 33.0 2 33.0 2 2.0 1 15.1887 9 19.305 10 53.0 2 4.1978 10 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 35.164
Average program size in population (points): 36.164
Average percent parens in population: 0.031
Minimum age in population: 45.34515426680446
Maximum age in population: 50.36489970190451
Average age in population: 48.71335900520603
Median age in population: 48.74644210271072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 39766181
--- Timings ---
Current time: 1529615890666 milliseconds
Total Time:         120.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 42.6%
Fitness Testing:     54.0 seconds, 44.8%
Report:              15.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction 3.3135815717660506} {:instruction float_dup_times})
Best program: (integer_rot integer_dup_items integer_mod integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_dup in1 float_sub float_inc print_float in2 69 in2 integer_flush integer_max 3.3135815717660506 float_dup_times)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2653.815223499999
Median total errors in population: 1304.0
Error averages by case: (93.06744900000001 2.81 88.504132 3.754 102.66552289999998 12.145 91.77405469999998 12.145 140.61264170000004 3.844 105.42669940000002 3.848 118.79373230000002 2.793 147.4621453 13.114 145.25271989999996 12.113 131.6282218 1.924 88.50692559999999 2.749 88.3095772 2.775 59.84575840000002 1.86 122.4370967 11.179 98.30052769999999 13.054 108.5658829 2.878 83.08463579999997 13.009 94.28713280000002 2.841 151.83200680000007 2.907 85.21643759999999 2.719 103.66022039999997 2.745 67.3596812 1.942 58.24352069999998 1.943 78.9446606 2.764 63.31984010000001 2.859)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 8 87.0 2 50.0 2 32.2505 2 1.4198 7 0.9432 8 9.6385 1 33.0 2 33.0 2 2.0 1 6.1984 9 18.7896 9 26.5663 2 2.1162 8 39.0 2 60.5905 1 10.9385 1 3.6883 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 34.765
Average program size in population (points): 35.765
Average percent parens in population: 0.031
Minimum age in population: 47.73784990981221
Maximum age in population: 52.22895751788747
Average age in population: 50.21825675982179
Median age in population: 50.23557066987269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 40635331
--- Timings ---
Current time: 1529615893816 milliseconds
Total Time:         123.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.9 seconds, 42.7%
Fitness Testing:     55.3 seconds, 44.7%
Report:              15.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction in1} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_pop} {:instruction float_flush} {:instruction float_sin} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_div} {:instruction float_mult} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin})
Best program: (integer_rot integer_yankdup float_cos float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub in1 integer_mult float_dup_items integer_rot float_pop float_flush float_sin in2 69 in2 integer_flush integer_max integer_mod float_div float_mult integer_max integer_mod float_dup_times float_shove float_sin)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 2682.0403656999997
Median total errors in population: 1304.0
Error averages by case: (93.429159 2.739 89.16232120000001 3.709 104.75178210000001 12.162 93.67208289999999 12.163 140.7478774 3.769 105.7297068 3.768 120.3771916 2.721 148.8676071 13.142 147.7119511 12.145 132.5132799 1.85 89.671075 2.681 89.5817936 2.708 60.73121880000001 1.781 123.6332459 11.196 100.2290815 13.07 109.19355099999997 2.803 85.0839454 13.037 95.38101 2.773 152.49707370000002 2.828 86.14131549999999 2.652 104.79280539999999 2.67 67.37384 1.869 59.57564559999999 1.862 80.67664679999999 2.7 64.92715840000001 2.79)
Error minima by case: (36.0 2 32.0 3 14.1871 10 18.7078 9 86.0 2 49.0 2 66.0 2 2.9844 7 0.9432 9 78.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 8 53.0 2 4.1978 9 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 33.856
Average program size in population (points): 34.856
Average percent parens in population: 0.032
Minimum age in population: 48.73784990981221
Maximum age in population: 53.52178745699348
Average age in population: 51.70867184697057
Median age in population: 51.75709710468072
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 41481731
--- Timings ---
Current time: 1529615896899 milliseconds
Total Time:         126.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 42.9%
Fitness Testing:     56.6 seconds, 44.7%
Report:              15.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_mult} {:instruction in1} {:instruction integer_dec} {:instruction integer_max} {:instruction float_cos} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_fromfloat})
Best program: (integer_fromfloat integer_yankdup float_yankdup integer_yankdup float_yankdup float_tan integer_dup in1 float_sub float_inc print_float integer_dup integer_sub integer_flush integer_dup float_dup_items integer_yankdup integer_mod float_mult in1 integer_dec integer_max float_cos float_mult integer_yank integer_fromfloat)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 2810.7502145999997
Median total errors in population: 1304.0
Error averages by case: (98.76483420000001 2.849 95.1511342 3.823 109.33796369999999 12.141 98.3764439 12.15 145.95687970000003 3.887 111.01896210000001 3.89 125.22693139999998 2.84 152.86362419999998 13.114 152.20262329999997 12.119 137.1852125 1.976 95.13676369999999 2.797 94.95136549999998 2.823 66.76439230000001 1.912 127.96860090000004 11.187 104.86414749999999 13.047 114.2075549 2.921 89.8866599 13.002 100.8739621 2.909 157.20901650000002 2.961 91.1287282 2.768 109.5823064 2.782 73.2539353 2.007 65.2478343 1.989 85.648271 2.813 70.32606689999999 2.909)
Error minima by case: (11.168 2 32.0 3 14.1871 9 17.5237 9 23.7076 2 1.9275 2 49.5734 2 2.9844 7 0.9432 8 74.0304 1 21.4565 2 13.4508 2 2.0 1 13.9878 9 19.1337 9 28.0665 2 4.1978 9 20.3408 2 80.0544 1 11.832 1 5.4571 1 9.0 1 1.0 1 15.6937 2 7.0 2)
Average genome size in population (length): 32.964
Average program size in population (points): 33.964
Average percent parens in population: 0.034
Minimum age in population: 49.78996040928178
Maximum age in population: 55.22386633741553
Average age in population: 53.2236566154754
Median age in population: 53.25786637798592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 42305831
--- Timings ---
Current time: 1529615900036 milliseconds
Total Time:         129.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 43.0%
Fitness Testing:     57.9 seconds, 44.5%
Report:              16.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction float_stackdepth} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction 69} {:instruction in2} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_max} {:instruction 64.25803746409744} {:instruction integer_fromfloat} {:instruction integer_mod} {:instruction 68} {:instruction in2} {:instruction in2} {:instruction integer_max} {:instruction integer_mod} {:instruction in1} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup})
Best program: (integer_rot integer_yankdup integer_rot float_tan integer_dup float_mult integer_dup_items in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult integer_mult float_yankdup integer_rot integer_rot integer_dup_times float_flush in1 in2 69 in2 float_stackdepth integer_dup_times float_flush in1 in2 69 in2 integer_flush float_shove integer_rot float_dec integer_fromfloat float_dec float_max 64.25803746409744 integer_fromfloat integer_mod 68 in2 in2 integer_max integer_mod in1 float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2529.776887099999
Median total errors in population: 1304.0
Error averages by case: (88.15972520000001 2.7 82.6713593 3.667 98.1834094 12.144 86.9979776 12.15 135.8677931 3.731 100.55989340000002 3.743 113.68328450000001 2.695 143.39021720000002 13.13 141.3358639 12.126 127.28218409999995 1.807 82.9868113 2.654 82.84591689999999 2.681 53.96448520000002 1.738 118.13881119999999 11.181 93.5809758 13.066 103.91501109999999 2.766 78.4347218 13.03 88.76440430000001 2.736 147.4668919 2.795 80.28274749999999 2.625 98.9146005 2.656 62.0918194 1.828 53.110866099999996 1.821 73.90502639999997 2.673 58.353089999999995 2.746)
Error minima by case: (37.0 2 32.0 3 14.1871 8 20.0153 9 87.0 2 50.0 2 5.2709 2 2.9229 10 0.9432 9 79.0 1 29.2301 2 21.2245 2 2.0 1 14.1959 10 20.6235 8 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 32.932
Average program size in population (points): 33.932
Average percent parens in population: 0.033
Minimum age in population: 51.82155987538863
Maximum age in population: 56.80269117234275
Average age in population: 54.6427652339898
Median age in population: 54.71042918025341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 43129156
--- Timings ---
Current time: 1529615903117 milliseconds
Total Time:         132.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 43.1%
Fitness Testing:     59.2 seconds, 44.5%
Report:              16.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction print_float} {:instruction float_max} {:instruction print_float} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_stackdepth} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup})
Best program: (float_max integer_yankdup float_yankdup float_yankdup float_tan integer_dup_times float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_mult print_float float_max print_float integer_fromfloat float_dec integer_mult integer_inc float_mult integer_mult integer_dec integer_sub float_mult integer_mult float_dup_items integer_sub float_stackdepth integer_add in1 integer_dup float_yankdup integer_yankdup integer_yankdup in1 integer_dup float_yankdup integer_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2738.0545976
Median total errors in population: 1304.0
Error averages by case: (95.89988029999999 2.809 91.85703059999999 3.781 106.60907120000002 12.144 95.53846629999998 12.142 143.2166533 3.853 108.2414097 3.851 122.2927897 2.79 150.34846379999996 13.109 149.39970540000004 12.112 134.52100540000004 1.927 91.90595039999998 2.739 91.9017749 2.777 63.42475840000001 1.857 125.3355309 11.181 102.0295321 13.049 111.4204404 2.877 86.98288769999999 13.003 97.76205550000002 2.842 154.5888759 2.913 88.19165389999999 2.725 106.630138 2.74 70.3118293 1.955 62.1503675 1.937 82.74799370000001 2.762 68.00133330000001 2.87)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.5597 9 87.0 2 50.0 2 10.6621 2 2.9844 7 0.9432 7 79.0 1 5.6322 2 13.6378 2 2.0 1 14.1887 9 7.8457 8 54.0 2 4.1978 9 5.2522 2 100.0 1 12.0809 1 5.5136 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 32.139
Average program size in population (points): 33.139
Average percent parens in population: 0.035
Minimum age in population: 53.68666581180878
Maximum age in population: 58.10027555453416
Average age in population: 56.1281937471788
Median age in population: 56.19371126062106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 43932631
--- Timings ---
Current time: 1529615906192 milliseconds
Total Time:         136.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.8 seconds, 43.2%
Fitness Testing:     60.4 seconds, 44.4%
Report:              16.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_swap} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_tan} {:instruction integer_sub} {:instruction float_mult} {:instruction in2} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_mult})
Best program: (integer_rot integer_yankdup float_yankdup float_tan float_swap float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_tan integer_sub float_mult in2 float_dup_times float_shove float_sin integer_mod integer_swap float_mult)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2696.4252154999995
Median total errors in population: 1304.0
Error averages by case: (94.5173447 2.762 89.758314 3.733 104.74433089999998 12.126 93.74998729999999 12.128 141.8521368 3.803 106.82118670000001 3.807 120.59111449999999 2.751 149.58307580000002 13.108 147.63768040000002 12.085 133.34165939999997 1.876 90.0692841 2.707 89.9417366 2.74 61.26314260000001 1.813 124.45115599999998 11.172 100.289195 13.038 110.1593525 2.831 85.1298137 13.001 95.8042672 2.804 153.381011 2.869 87.27894699999999 2.683 105.8620526 2.701 68.6325049 1.894 59.78092149999999 1.894 80.8478621 2.725 65.0721382 2.814)
Error minima by case: (3.8438 2 33.0 3 14.1871 9 18.7078 8 68.9682 2 20.6033 2 67.0 2 2.9844 7 0.9432 9 2.6454 1 34.0 2 34.0 2 3.0 1 14.1887 9 19.1422 8 1.3907 2 4.1978 9 40.0 2 38.6214 1 11.832 1 5.4571 1 5.2884 1 2.0 1 25.0 2 8.0 2)
Average genome size in population (length): 30.877
Average program size in population (points): 31.877
Average percent parens in population: 0.036
Minimum age in population: 54.80203645364963
Maximum age in population: 59.47029732365991
Average age in population: 57.5846756527776
Median age in population: 57.60906695909944
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.016
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 44704556
--- Timings ---
Current time: 1529615909186 milliseconds
Total Time:         139.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.2 seconds, 43.3%
Fitness Testing:     61.7 seconds, 44.3%
Report:              17.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction float_yank} {:instruction integer_mod} {:instruction in1} {:instruction integer_div} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup} {:instruction integer_swap})
Best program: (float_yankdup float_tan integer_dup float_mult float_yank integer_mod in1 integer_div float_inc float_max print_float integer_dup integer_sub integer_dup float_mult integer_dup integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 2527.714740899999
Median total errors in population: 1304.0
Error averages by case: (87.91824749999999 2.684 82.9474295 3.666 97.99406999999998 12.099 86.88500319999999 12.102 135.62845320000005 3.725 100.3164028 3.737 113.92243150000002 2.686 143.16799019999996 13.083 141.27106149999994 12.072 127.03795499999998 1.802 83.2233597 2.638 83.09007960000001 2.669 54.22895120000001 1.739 117.89786870000003 11.142 93.47498519999999 13.024 103.674304 2.755 78.23358440000001 12.983 89.0072686 2.737 147.22525760000002 2.78 80.3517512 2.613 99.03555409999998 2.636 61.8445303 1.822 52.86759509999999 1.805 73.89249199999999 2.661 58.1791148 2.739)
Error minima by case: (37.0 2 32.0 3 14.1871 8 20.0144 9 87.0 2 50.0 2 66.0 2 2.9229 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 20.305 9 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 30.222
Average program size in population (points): 31.222
Average percent parens in population: 0.037
Minimum age in population: 56.829416690789
Maximum age in population: 61.15447579006104
Average age in population: 59.06450687926
Median age in population: 59.09671045458435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.012
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 45460106
--- Timings ---
Current time: 1529615912222 milliseconds
Total Time:         142.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 43.4%
Fitness Testing:     62.9 seconds, 44.2%
Report:              17.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_inc} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_mult} {:instruction in2} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dup_times} {:instruction integer_swap} {:instruction 56} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_shove} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup})
Best program: (integer_add integer_yankdup float_frominteger float_tan integer_dup float_mult integer_flush integer_inc in1 float_sub float_inc integer_flush print_float float_dup_items integer_sub float_mult in2 integer_flush integer_add integer_mod float_dup_times integer_swap 56 integer_mod integer_mod integer_swap float_shove float_sin float_yankdup integer_yankdup integer_dup float_yankdup integer_yankdup integer_mod integer_swap integer_add in1 integer_dup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2824.284230499999
Median total errors in population: 1304.0
Error averages by case: (99.39759020000001 2.821 95.5840827 3.806 110.36556039999999 12.109 98.4995815 12.114 146.4797857 3.87 111.63575170000001 3.874 125.342537 2.821 154.0259271 13.103 152.99697659999998 12.078 137.1408162 1.949 95.854414 2.769 95.7160401 2.807 67.25593540000001 1.892 128.92389150000002 11.174 105.0730461 13.027 114.78497840000001 2.889 90.4648821 12.981 101.55633580000001 2.886 157.52716220000002 2.936 92.03143469999999 2.742 110.48978050000001 2.76 73.6538702 1.972 65.78769109999999 1.969 85.67997159999999 2.802 70.97918770000001 2.886)
Error minima by case: (37.0 2 33.0 3 14.1871 8 18.7078 9 87.0 2 50.0 2 67.0 2 2.9844 7 0.9432 9 50.6498 1 34.0 2 34.0 2 3.0 1 14.1887 9 19.1422 8 54.0 2 4.1978 9 40.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 2.0 1 25.0 2 8.0 2)
Average genome size in population (length): 29.372
Average program size in population (points): 30.372
Average percent parens in population: 0.037
Minimum age in population: 58.07873770175502
Maximum age in population: 62.6019744746327
Average age in population: 60.56185928031293
Median age in population: 60.58107379255944
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.018
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 46194406
--- Timings ---
Current time: 1529615915248 milliseconds
Total Time:         145.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 43.5%
Fitness Testing:     64.2 seconds, 44.2%
Report:              17.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_add})
Best program: (integer_rot integer_yankdup integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_rot integer_sub integer_add)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2443.662578499999
Median total errors in population: 1304.0
Error averages by case: (83.77161779999997 2.632 79.47134729999999 3.596 95.2753499 12.108 84.05790840000002 12.109 132.3116948 3.663 96.28038889999998 3.668 111.1681976 2.617 140.5205626 13.095 138.6997699 12.085 123.32210389999997 1.722 80.16454939999998 2.575 79.94804319999999 2.602 50.7959732 1.663 114.41185879999999 11.149 90.6755519 13.034 99.6672153 2.673 75.44821340000001 13.008 85.79045359999999 2.658 143.4973152 2.701 76.45005420000001 2.55 95.5296106 2.57 57.5977061 1.746 49.56092929999999 1.739 70.93176779999999 2.593 55.0933954 2.665)
Error minima by case: (37.0 2 32.0 3 14.1871 10 19.8035 8 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 13.9858 9 19.3595 8 4.1641 2 4.1978 9 39.0 2 100.0 1 5.6558 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 29.289
Average program size in population (points): 30.289
Average percent parens in population: 0.038
Minimum age in population: 59.07873770175502
Maximum age in population: 63.97299403215538
Average age in population: 62.04574246256039
Median age in population: 62.08769847415442
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 46926631
--- Timings ---
Current time: 1529615918386 milliseconds
Total Time:         148.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 43.5%
Fitness Testing:     65.6 seconds, 44.2%
Report:              18.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_mult} {:instruction tag_integer_753} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction in1} {:instruction integer_dec} {:instruction 69} {:instruction in2})
Best program: (integer_rot integer_yankdup float_yankdup float_tan integer_rot integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_frominteger float_mult integer_mult tag_integer_753 integer_dec integer_dup_times in1 integer_dec 69 in2)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2435.9734448
Median total errors in population: 1304.0
Error averages by case: (84.30405219999997 2.675 79.4131804 3.641 94.22941349999999 12.057 83.1053043 12.063 132.2691349 3.696 97.1600421 3.703 110.24152600000001 2.673 139.44934860000004 13.042 137.51913439999998 12.041 123.4925288 1.784 79.5457482 2.619 79.29976309999999 2.659 50.95093220000001 1.727 114.15555800000001 11.104 89.7031708 12.989 100.03553539999999 2.719 74.45709340000002 12.949 85.353246 2.723 143.7456954 2.756 76.555964 2.601 95.2509511 2.609 58.2308085 1.803 49.16199699999999 1.789 70.11461249999999 2.655 54.428704 2.723)
Error minima by case: (15.2492 2 32.0 3 14.1871 8 10.484 9 80.3737 2 32.0088 2 4.8112 2 2.9844 7 0.9432 8 14.0509 1 0.2186 2 7.787 2 2.0 1 10.8015 8 7.206 9 10.0148 2 4.1978 8 11.103 2 50.0268 1 11.832 1 5.1748 1 9.0 1 1.0 1 6.616 2 7.0 2)
Average genome size in population (length): 28.617
Average program size in population (points): 29.617
Average percent parens in population: 0.038
Minimum age in population: 60.56499069202255
Maximum age in population: 65.39962685158184
Average age in population: 63.53300168053057
Median age in population: 63.62774433303377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 47642056
--- Timings ---
Current time: 1529615921297 milliseconds
Total Time:         151.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 43.6%
Fitness Testing:     66.8 seconds, 44.2%
Report:              18.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_div} {:instruction integer_mod} {:instruction in1} {:instruction -14} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_swap})
Best program: (integer_rot integer_rot integer_dup float_tan integer_dup float_mult integer_div integer_mod in1 -14 float_inc float_max print_float integer_dup float_frominteger float_mult integer_mult integer_dup_times float_flush integer_flush integer_max integer_mod integer_sub integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2519.2909935999996
Median total errors in population: 1304.0
Error averages by case: (87.3053242 2.717 82.7130496 3.666 97.99457059999999 12.122 86.87934489999999 12.125 135.07165080000004 3.744 99.72287559999998 3.745 113.7077007 2.685 142.50084289999998 13.117 140.96227159999998 12.108 126.37848149999999 1.817 82.99397540000001 2.654 82.8543936 2.669 53.99483440000001 1.745 117.20596610000003 11.165 93.4441842 13.053 103.03760329999999 2.764 78.3225023 13.013 88.77252790000001 2.729 146.6183967 2.801 79.3096154 2.62 97.9705906 2.643 61.2631009 1.83 53.2197382 1.836 73.84644469999999 2.669 58.40600750000001 2.758)
Error minima by case: (37.0 2 32.0 3 2.0192 8 4.9989 8 87.0 2 50.0 2 0.1971 2 11.4993 10 0.9432 9 79.0 1 27.5142 2 19.5085 2 2.0 1 18.1293 10 1.7209 9 54.0 2 2.1162 8 38.3985 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 1.1309 2 7.0 2)
Average genome size in population (length): 28.622
Average program size in population (points): 29.622
Average percent parens in population: 0.039
Minimum age in population: 62.06128340935265
Maximum age in population: 66.97582427363193
Average age in population: 65.05975265884987
Median age in population: 65.11116961479786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 48357606
--- Timings ---
Current time: 1529615924182 milliseconds
Total Time:         154.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.3 seconds, 43.6%
Fitness Testing:     68.0 seconds, 44.1%
Report:              18.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_mult} {:instruction float_div} {:instruction -76} {:instruction integer_dup} {:instruction float_mult} {:instruction in1} {:instruction 16} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_dup_items} {:instruction integer_mult} {:instruction float_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_flush})
Best program: (integer_rot integer_yankdup integer_rot integer_rot integer_yankdup float_mult float_div -76 integer_dup float_mult in1 16 float_inc float_max print_float float_dup_items integer_mult float_shove float_dec integer_dup_times float_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2672.7526678999993
Median total errors in population: 1304.0
Error averages by case: (93.5344528 2.729 88.473486 3.709 104.71524479999998 12.106 93.64707409999998 12.114 140.87564370000004 3.77 105.84187900000002 3.779 119.49565380000004 2.731 147.8363768 13.09 147.7027896 12.072 132.53058439999998 1.85 88.8647639 2.68 88.75322760000003 2.713 59.97424040000001 1.79 122.62537380000002 11.152 100.19919209999999 13.027 109.2593204 2.799 85.0670818 12.984 94.59597810000002 2.782 152.54778060000007 2.831 85.18567559999998 2.653 103.821531 2.673 67.534752 1.866 59.68834169999999 1.858 79.72664189999999 2.703 65.007582 2.787)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 10 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 9 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 28.083
Average program size in population (points): 29.083
Average percent parens in population: 0.040
Minimum age in population: 63.06128340935265
Maximum age in population: 68.22562918536357
Average age in population: 66.54633559854955
Median age in population: 66.62584141988793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.013
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 49059681
--- Timings ---
Current time: 1529615927013 milliseconds
Total Time:         156.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 43.7%
Fitness Testing:     69.2 seconds, 44.1%
Report:              19.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_shove} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_swap} {:instruction float_mult} {:instruction print_float})
Best program: (integer_rot float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc integer_shove print_float integer_dup integer_sub float_mult integer_mult integer_dup integer_swap float_mult print_float)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2622.4540616999993
Median total errors in population: 1304.0
Error averages by case: (91.55397989999999 2.72 87.22450040000001 3.685 102.777225 12.12 89.84131260000002 12.128 139.0028951 3.759 103.88797979999997 3.758 116.9065191 2.698 147.0544045 13.118 145.6223154 12.095 128.93920909999997 1.836 87.7411766 2.66 87.6471586 2.687 58.732948400000005 1.759 121.54657060000001 11.169 96.5671442 13.046 107.00326769999998 2.779 82.24145380000002 13.0 93.4587338 2.746 149.8811435 2.823 84.1514692 2.63 102.79723240000001 2.653 65.4855828 1.857 57.61695209999999 1.852 76.8072568 2.689 62.9236303 2.775)
Error minima by case: (37.0 2 32.0 3 14.1871 8 20.0153 8 87.0 2 50.0 2 66.0 2 2.9229 10 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1959 10 20.6235 8 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 27.477
Average program size in population (points): 28.477
Average percent parens in population: 0.041
Minimum age in population: 65.09711810800621
Maximum age in population: 69.97586723804642
Average age in population: 68.02696399107862
Median age in population: 68.04298936467524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 49746606
--- Timings ---
Current time: 1529615929976 milliseconds
Total Time:         159.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 43.8%
Fitness Testing:     70.4 seconds, 44.0%
Report:              19.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction float_mult} {:instruction integer_swap} {:instruction float_min} {:instruction in1} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_mult} {:instruction print_float} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_yankdup} {:instruction integer_rot} {:instruction integer_rot} {:instruction in1} {:instruction float_tan} {:instruction float_flush} {:instruction integer_dec} {:instruction float_div} {:instruction integer_flush} {:instruction float_pop} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_div} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_yankdup})
Best program: (float_rot float_mult integer_swap float_min in1 integer_dup_times float_inc integer_mult print_float integer_flush integer_sub float_mult integer_mult integer_dec integer_swap integer_add integer_dup integer_sub float_mult integer_mult float_yankdup integer_rot integer_rot in1 float_tan float_flush integer_dec float_div integer_flush float_pop float_frominteger float_add integer_div float_sin integer_mod float_sin integer_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2666.9017603999996
Median total errors in population: 1304.0
Error averages by case: (92.84988500000004 2.744 89.5557432 3.712 104.7764704 12.122 91.79788279999998 12.13 140.39381120000002 3.782 105.18623790000004 3.786 118.71175260000003 2.714 148.02308040000003 13.104 147.81259730000002 12.099 130.8405928 1.851 89.86314610000001 2.684 89.73892670000002 2.716 61.060564500000005 1.787 122.56117030000003 11.166 98.4972188 13.045 108.35185270000001 2.804 84.41336279999997 13.007 95.60184790000002 2.78 151.39473310000002 2.833 85.26952539999998 2.655 103.8951374 2.674 66.9675375 1.874 59.9445745 1.875 78.79225759999999 2.697 65.17185150000002 2.789)
Error minima by case: (37.0 2 32.0 3 14.1871 6 13.4341 9 87.0 2 50.0 2 29.5839 2 2.9844 7 0.9432 9 52.427 1 33.0 2 33.0 2 2.0 1 14.1887 8 10.1561 9 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 9.5661 2 7.0 2)
Average genome size in population (length): 27.065
Average program size in population (points): 28.065
Average percent parens in population: 0.041
Minimum age in population: 66.58170604811073
Maximum age in population: 71.43980261190859
Average age in population: 69.53888870508285
Median age in population: 69.5445596822016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 50423256
--- Timings ---
Current time: 1529615933095 milliseconds
Total Time:         163.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 44.0%
Fitness Testing:     71.6 seconds, 43.9%
Report:              19.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_shove} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_flush} {:instruction in2} {:instruction print_float} {:instruction integer_mod} {:instruction integer_flush} {:instruction 69} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_mult})
Best program: (integer_rot float_max float_yankdup in1 float_sub float_inc float_max print_float float_shove integer_sub float_mult integer_mult integer_mod float_flush in2 print_float integer_mod integer_flush 69 float_mult integer_mult integer_mult)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2677.4514851
Median total errors in population: 1304.0
Error averages by case: (93.08410839999999 2.652 88.5925379 3.64 104.9592228 12.135 93.73347530000001 12.144 140.3872103 3.692 105.35702080000002 3.693 120.22288920000001 2.645 149.3520742 13.12 148.1839987 12.111 132.47090450000002 1.761 89.33510709999999 2.609 89.30008620000001 2.644 60.2385907 1.702 123.8153319 11.165 100.31553690000001 13.057 109.0176805 2.709 85.22461929999999 13.024 95.02192060000002 2.702 152.350204 2.747 86.19920549999999 2.59 104.9615064 2.603 66.8220711 1.771 59.1756525 1.762 80.6225104 2.634 64.6950199 2.701)
Error minima by case: (36.0 2 32.0 3 14.1871 8 19.5103 9 86.0 2 49.0 2 55.7567 2 46.306 10 0.9432 8 78.0 1 33.0 2 33.0 2 2.0 1 23.2599 10 20.3483 9 53.0 2 4.1978 9 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 26.255
Average program size in population (points): 27.255
Average percent parens in population: 0.042
Minimum age in population: 68.23953118219714
Maximum age in population: 73.0988848003985
Average age in population: 71.0107210251786
Median age in population: 71.04983252365842
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.017
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 51079631
--- Timings ---
Current time: 1529615936074 milliseconds
Total Time:         165.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 44.0%
Fitness Testing:     72.8 seconds, 43.9%
Report:              19.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction float_div} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_min} {:instruction float_max} {:instruction print_float} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_inc})
Best program: (integer_dup_items float_div in1 float_sub float_inc float_max print_float float_min float_max print_float integer_fromfloat float_dec integer_mult integer_inc)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2958.3826650999995
Median total errors in population: 1304.0
Error averages by case: (106.393179 2.899 99.2063998 3.832 114.13238190000001 12.132 103.1593377 12.136 153.10463940000005 3.947 118.58309999999999 3.955 129.64964550000002 2.88 160.5000489 13.119 156.3031859 12.09 144.6827262 2.043 99.4291371 2.801 99.4319478 2.848 71.05854030000002 1.921 135.70581820000004 11.19 109.5903443 13.034 121.79816369999999 2.979 94.6949921 12.979 105.22035990000002 2.928 164.4766643 3.024 98.7077578 2.779 116.95395719999999 2.797 81.0298678 2.059 70.07531849999998 2.045 90.42661619999998 2.856 75.83753560000001 2.958)
Error minima by case: (37.0 2 32.0 3 4.7951 9 9.0078 9 87.0 2 50.0 2 18.9034 2 2.9844 7 0.9432 9 79.0 1 23.9333 2 15.9276 2 2.0 1 14.1887 9 5.7298 8 54.0 2 2.1162 8 34.8176 2 100.0 1 2.44 1 3.9349 1 9.0 1 1.0 1 5.1398 2 7.0 2)
Average genome size in population (length): 25.646
Average program size in population (points): 26.646
Average percent parens in population: 0.043
Minimum age in population: 69.6444402484866
Maximum age in population: 74.46782711242909
Average age in population: 72.47045496018919
Median age in population: 72.50025033131926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.025
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 51720781
--- Timings ---
Current time: 1529615939041 milliseconds
Total Time:         169.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.5 seconds, 44.1%
Fitness Testing:     74.1 seconds, 43.9%
Report:              20.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_div} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_pop} {:instruction in1} {:instruction float_mult} {:instruction in1} {:instruction integer_dec})
Best program: (integer_rot float_tan integer_dup integer_dup_items integer_yankdup integer_sub integer_div float_yankdup float_tan integer_mod in1 float_sub float_inc float_max print_float float_dup_times integer_sub float_mult integer_mult float_dup_items integer_pop in1 float_mult in1 integer_dec)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2902.775097699999
Median total errors in population: 1304.0
Error averages by case: (102.46977760000003 2.836 98.317918 3.798 113.28236199999999 12.115 102.30697239999996 12.126 149.44309620000004 3.884 114.67676410000003 3.882 128.78225350000002 2.818 156.82709309999998 13.102 155.90734700000002 12.081 140.9188679 1.979 98.60471590000002 2.767 98.47510340000001 2.815 70.09117450000001 1.884 131.93758150000002 11.176 108.7721671 13.034 117.9473869 2.904 93.87715649999998 12.972 104.29721660000003 2.891 160.80271260000004 2.957 94.95927909999999 2.74 113.4017797 2.754 76.84245339999998 1.993 68.9814927 1.982 89.498265 2.806 74.16016099999999 2.898)
Error minima by case: (37.0 2 32.0 3 11.0204 9 17.5729 8 87.0 2 50.0 2 20.7976 2 1.2265 7 0.9432 8 62.293 1 25.8274 2 17.8218 2 2.0 1 14.1887 9 17.1289 9 54.0 2 4.1978 8 36.7118 2 100.0 1 6.8486 1 5.4571 1 9.0 1 1.0 1 8.2028 2 7.0 2)
Average genome size in population (length): 25.556
Average program size in population (points): 26.556
Average percent parens in population: 0.043
Minimum age in population: 71.02201815580175
Maximum age in population: 75.86711759255724
Average age in population: 73.98227696392117
Median age in population: 74.03284007532503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 52359681
--- Timings ---
Current time: 1529615941897 milliseconds
Total Time:         171.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.9 seconds, 44.2%
Fitness Testing:     75.3 seconds, 43.8%
Report:              20.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_dup_items} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_add} {:instruction integer_mod} {:instruction float_sin} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_add} {:instruction -60} {:instruction float_shove} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mult} {:instruction integer_swap} {:instruction float_shove} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_yankdup})
Best program: (print_float float_dup_items float_yankdup float_tan integer_dup integer_flush integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_dup_items integer_dup integer_sub integer_swap integer_add integer_mod float_sin float_pop integer_swap integer_add -60 float_shove float_shove float_sin integer_mult integer_swap float_shove float_sin float_yankdup integer_yankdup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2988.0307742
Median total errors in population: 1304.0
Error averages by case: (106.00513600000001 2.885 101.35191 3.823 117.0334542 12.194 105.18012599999999 12.206 152.69597580000004 3.935 118.15927120000002 3.931 131.64647820000002 2.833 160.7881856 13.176 159.3575084 12.168 143.62573229999998 2.021 102.0032099 2.793 101.94887110000002 2.826 73.3615892 1.906 135.74175470000006 11.24 111.71160449999999 13.092 121.33291469999999 2.966 97.22417720000001 13.041 107.61874210000002 2.892 163.78633190000002 3.007 98.7579749 2.759 117.2122411 2.785 80.3429426 2.038 72.60968999999999 2.038 92.35763579999998 2.818 77.8533168 2.951)
Error minima by case: (37.0 2 32.0 3 0.1871 9 14.4383 8 87.0 2 50.0 2 66.0 2 3.0111 10 0.4206 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1852 11 17.7163 8 54.0 2 2.1162 6 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 18.3063 2 7.0 2)
Average genome size in population (length): 25.623
Average program size in population (points): 26.623
Average percent parens in population: 0.043
Minimum age in population: 72.59132961175862
Maximum age in population: 77.37927748277436
Average age in population: 75.47773060719474
Median age in population: 75.54852803646126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 53000256
--- Timings ---
Current time: 1529615944851 milliseconds
Total Time:         174.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.2 seconds, 44.2%
Fitness Testing:     76.5 seconds, 43.8%
Report:              20.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_add} {:instruction integer_flush} {:instruction integer_max} {:instruction float_shove} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction float_div} {:instruction 0} {:instruction integer_dup_items} {:instruction integer_swap})
Best program: (in1 float_mult float_inc integer_flush print_float integer_dup integer_dec integer_flush float_yankdup integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_add integer_flush integer_max float_shove float_pop integer_max integer_mod float_div 0 integer_dup_items integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2750.9806478
Median total errors in population: 1304.0
Error averages by case: (96.16169180000001 2.731 91.4898296 3.685 107.70738989999998 12.159 96.56278309999999 12.168 143.27296920000003 3.776 108.40949640000002 3.775 123.0462651 2.703 151.88353639999997 13.136 150.64443179999995 12.131 135.2931791 1.845 92.24445440000001 2.658 92.19271560000003 2.689 63.2258571 1.754 126.61027390000001 11.195 103.1084915 13.08 111.9664385 2.791 88.0683112 13.034 97.89643560000002 2.746 155.15563230000004 2.835 89.10846889999999 2.633 107.8171215 2.65 70.0719654 1.853 62.368997500000006 1.852 83.5240223 2.689 67.8028897 2.779)
Error minima by case: (37.0 2 32.0 3 15.1871 10 9.3005 8 87.0 2 50.0 2 44.6877 2 1.8022 9 1.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 15.4932 11 6.0225 9 54.0 2 2.1162 8 39.0 2 100.0 1 12.6943 1 6.4571 1 9.0 1 1.0 1 5.4325 2 7.0 2)
Average genome size in population (length): 25.569
Average program size in population (points): 26.569
Average percent parens in population: 0.043
Minimum age in population: 73.90800551105103
Maximum age in population: 78.67389544903034
Average age in population: 76.95579815770476
Median age in population: 77.00626493208813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.016
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 53639481
--- Timings ---
Current time: 1529615947846 milliseconds
Total Time:         177.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 44.2%
Fitness Testing:     77.8 seconds, 43.8%
Report:              21.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_flush} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sin} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_add} {:instruction in1} {:instruction integer_dup} {:instruction float_add} {:instruction integer_flush} {:instruction integer_max} {:instruction float_shove} {:instruction float_pop} {:instruction integer_max} {:instruction integer_mod} {:instruction float_div} {:instruction 0} {:instruction integer_dup_items} {:instruction integer_swap})
Best program: (in1 float_mult float_inc integer_flush print_float integer_dup integer_dec integer_flush float_yankdup integer_mod float_dup_times float_shove float_sin integer_mod integer_swap integer_add in1 integer_dup float_add integer_flush integer_max float_shove float_pop integer_max integer_mod float_div 0 integer_dup_items integer_swap)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2824.6123406999995
Median total errors in population: 1304.0
Error averages by case: (99.1513002 2.793 94.77689219999999 3.763 110.4445285 12.122 99.44853750000001 12.127 146.15741139999997 3.841 111.36930570000001 3.842 125.9316662 2.771 154.36932249999998 13.111 153.03934470000002 12.081 138.02530869999998 1.927 95.35107339999999 2.718 95.28704889999999 2.761 66.55100050000001 1.838 129.2633799 11.172 105.96536969999998 13.033 114.83717390000001 2.862 90.8805099 12.979 101.02306880000002 2.835 157.86937920000003 2.905 91.9385006 2.693 110.4760064 2.709 73.23125599999999 1.94 65.49693439999999 1.933 86.51194129999999 2.756 70.8480802 2.856)
Error minima by case: (37.0 2 32.0 3 14.1871 10 20.0144 8 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 20.305 8 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.1748 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 24.433
Average program size in population (points): 25.433
Average percent parens in population: 0.045
Minimum age in population: 74.90800551105103
Maximum age in population: 80.38956437831246
Average age in population: 78.47559419030175
Median age in population: 78.52751431814734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.013
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 54250306
--- Timings ---
Current time: 1529615950836 milliseconds
Total Time:         180.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.2 seconds, 44.4%
Fitness Testing:     78.9 seconds, 43.7%
Report:              21.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction -4} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction in2} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sub} {:instruction print_float})
Best program: (float_max integer_yankdup float_yankdup float_tan -4 integer_dup integer_dup_items integer_mod in1 float_sub float_inc integer_inc print_float integer_dup_items integer_swap in2 integer_flush in2 integer_max integer_mod float_dup_times float_shove float_sub print_float)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2800.5422886999995
Median total errors in population: 1304.0
Error averages by case: (98.25321269999998 2.765 94.0718062 3.747 109.4894826 12.144 98.4570318 12.151 145.33939880000003 3.805 110.4920346 3.801 125.03187080000001 2.76 153.3466608 13.12 152.24259869999997 12.119 137.1314031 1.891 94.5281718 2.713 94.44345750000001 2.747 65.17616080000002 1.823 128.2650206 11.18 104.98101510000001 13.047 113.93709269999998 2.833 89.9400698 13.01 100.22408779999999 2.824 157.0035094 2.862 90.96288960000001 2.68 109.49769169999999 2.7 72.3377015 1.912 64.58228799999999 1.89 84.7830232 2.74 69.9426091 2.818)
Error minima by case: (37.0 2 32.0 3 4.7513 9 9.4999 8 87.0 2 50.0 2 63.4882 2 2.9844 7 0.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 12.7779 9 54.0 2 3.8547 9 39.0 2 100.0 1 7.1064 1 4.1748 1 9.0 1 1.0 1 13.3679 2 7.0 2)
Average genome size in population (length): 23.83
Average program size in population (points): 24.83
Average percent parens in population: 0.046
Minimum age in population: 77.09655934789298
Maximum age in population: 81.84400244556662
Average age in population: 79.96102925978066
Median age in population: 80.02121810879251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 54846056
--- Timings ---
Current time: 1529615953711 milliseconds
Total Time:         183.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.6 seconds, 44.4%
Fitness Testing:     80.0 seconds, 43.6%
Report:              21.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_mult} {:instruction float_min} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_pop})
Best program: (integer_rot integer_yankdup in2 float_tan integer_rot integer_rot integer_yankdup float_yankdup float_tan float_mult float_min integer_mod in1 float_sub float_inc float_max print_float integer_dup float_sub float_inc float_max print_float integer_dup integer_pop)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2742.8742297999997
Median total errors in population: 1304.0
Error averages by case: (95.002449 2.686 91.2464693 3.663 107.8407493 12.1 96.62110310000001 12.106 143.0407836 3.731 107.25357569999998 3.73 123.0015519 2.667 152.01798440000002 13.09 151.01725330000002 12.071 135.23640879999996 1.798 92.0636286 2.619 92.04214970000001 2.666 63.068033500000006 1.726 126.6761887 11.145 103.19067170000001 13.02 110.88853339999999 2.745 88.1661357 12.98 97.7083869 2.731 155.0432848 2.786 88.1898155 2.59 106.995632 2.596 68.799735 1.816 62.2258285 1.815 83.50832070000001 2.665 67.7345567 2.753)
Error minima by case: (37.0 2 32.0 3 0.1626 9 14.0887 9 87.0 2 50.0 2 48.5734 2 2.9844 7 1.9432 10 79.0 1 22.4565 2 14.4508 2 2.0 1 14.1887 9 17.3667 9 54.0 2 5.1978 9 21.3408 2 100.0 1 30.0 1 50.0 1 9.0 1 1.0 1 14.6937 2 7.0 2)
Average genome size in population (length): 23.763
Average program size in population (points): 24.763
Average percent parens in population: 0.046
Minimum age in population: 78.09655934789298
Maximum age in population: 83.3891513035508
Average age in population: 81.4674645159488
Median age in population: 81.50116410027422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 55440131
--- Timings ---
Current time: 1529615956631 milliseconds
Total Time:         186.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 44.5%
Fitness Testing:     81.2 seconds, 43.5%
Report:              22.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_div} {:instruction print_float} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_mult} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction -14} {:instruction in1})
Best program: (float_inc integer_yankdup integer_max float_yankdup float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc integer_div print_float integer_dup integer_rot float_mult float_dup_items float_dup_items integer_mod float_mult integer_mult float_dup_items integer_rot integer_dup_times -14 in1)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2669.345084299999
Median total errors in population: 1304.0
Error averages by case: (92.8115125 2.732 89.26985969999998 3.684 104.80589719999998 12.138 92.73905939999997 12.145 140.21913360000002 3.763 105.13549040000001 3.759 119.4792696 2.708 147.97346249999998 13.119 147.84299779999998 12.12 130.8983553 1.843 89.69558500000001 2.668 89.58179470000003 2.693 60.81325390000001 1.755 122.6187519 11.174 99.35660699999998 13.05 108.37156710000002 2.79 84.7999435 13.008 95.41913570000001 2.761 151.43282350000004 2.819 85.24896109999997 2.631 103.9248734 2.658 66.83968660000002 1.859 59.9435903 1.855 79.73129 2.683 65.1951826 2.782)
Error minima by case: (37.0 2 32.0 3 15.1871 9 18.7078 9 87.0 2 50.0 2 19.4662 2 2.6525 7 1.9432 8 79.0 1 27.4257 2 19.4201 2 2.0 1 12.9486 9 18.6791 7 54.0 2 2.1162 8 38.3101 2 100.0 1 12.6943 1 6.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 23.614
Average program size in population (points): 24.614
Average percent parens in population: 0.046
Minimum age in population: 80.50211486461077
Maximum age in population: 84.85429386455975
Average age in population: 82.932447177045
Median age in population: 83.0123920558489
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 56030481
--- Timings ---
Current time: 1529615959564 milliseconds
Total Time:         189.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.6 seconds, 44.6%
Fitness Testing:     82.3 seconds, 43.4%
Report:              22.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_div})
Best program: (integer_rot integer_yankdup float_yankdup float_tan float_dup_items float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max float_max print_float integer_dup integer_sub integer_dup integer_dup_items integer_sub integer_dup_times float_flush integer_fromfloat float_swap float_div)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2527.4148796999993
Median total errors in population: 1304.0
Error averages by case: (87.90975259999999 2.68 82.8355191 3.672 98.0802679 12.099 86.92600579999998 12.109 135.55388090000002 3.712 100.29189200000002 3.72 113.77785690000002 2.685 143.2896348 13.1 141.2825522 12.085 127.03182699999999 1.8 83.10476650000001 2.642 82.97628430000002 2.671 54.146508400000016 1.744 117.9919877 11.155 93.5162675 13.029 103.67077139999998 2.745 78.3137078 12.994 88.8881159 2.741 147.1820376 2.765 80.3092095 2.607 98.9884096 2.631 61.831055000000006 1.82 52.96019809999999 1.803 73.88692649999999 2.665 58.26544470000001 2.73)
Error minima by case: (37.0 2 32.0 3 14.1871 9 9.5617 9 65.2924 2 50.0 2 10.0819 2 2.9844 7 0.9432 9 6.9696 1 33.0 2 33.0 2 2.0 1 14.1887 9 13.2837 9 27.9335 2 4.1978 9 39.0 2 21.9456 1 11.832 1 5.1748 1 9.0 1 1.0 1 8.3063 2 7.0 2)
Average genome size in population (length): 23.189
Average program size in population (points): 24.189
Average percent parens in population: 0.047
Minimum age in population: 81.94887210447617
Maximum age in population: 86.33396440733263
Average age in population: 84.4207288449225
Median age in population: 84.44511343526052
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.014
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 56610231
--- Timings ---
Current time: 1529615962464 milliseconds
Total Time:         192.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.1 seconds, 44.7%
Fitness Testing:     83.5 seconds, 43.4%
Report:              22.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_rot} {:instruction print_float} {:instruction integer_dup})
Best program: (float_div integer_yankdup float_yankdup float_tan float_dup_items float_mult integer_dup_items integer_mod in1 float_sub float_inc float_rot print_float integer_dup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2547.5807485999994
Median total errors in population: 1304.0
Error averages by case: (87.7492901 2.651 84.25353460000001 3.629 100.07533160000001 12.093 88.0175739 12.103 135.37683289999998 3.686 100.1353623 3.689 115.0104214 2.642 143.5419003 13.083 143.37594739999997 12.066 127.06364899999998 1.751 84.7711915 2.603 84.68092789999999 2.635 55.674065500000005 1.696 118.1325279 11.137 94.6524742 13.019 103.6024856 2.711 80.09200210000002 12.985 90.50927429999999 2.696 147.1684156 2.738 80.43804960000001 2.571 99.2705076 2.581 61.55843690000001 1.773 54.677118099999994 1.78 74.08602189999999 2.622 60.0174064 2.71)
Error minima by case: (37.0 2 32.0 3 14.1871 9 18.5237 9 87.0 2 50.0 2 15.4266 2 4.7272 9 0.9432 10 79.0 1 20.4565 2 12.4508 2 2.0 1 12.9878 10 19.1422 9 54.0 2 4.1978 8 31.3408 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 22.848
Average program size in population (points): 23.848
Average percent parens in population: 0.048
Minimum age in population: 83.26573946264388
Maximum age in population: 88.02131106843076
Average age in population: 85.9247299133332
Median age in population: 85.98271618547135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 57181431
--- Timings ---
Current time: 1529615965276 milliseconds
Total Time:         195.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.5 seconds, 44.8%
Fitness Testing:     84.6 seconds, 43.3%
Report:              23.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_899} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction tagged_866} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_shove} {:instruction in1} {:instruction integer_div} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction in1})
Best program: (tagged_899 integer_yankdup float_yankdup float_tan integer_rot integer_yankdup tagged_866 integer_yankdup float_yankdup float_tan integer_dup float_mult integer_dup_items float_shove in1 integer_div float_inc float_max print_float in1)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2799.4984558999986
Median total errors in population: 1304.0
Error averages by case: (98.58352640000003 2.845 94.4249118 3.797 109.26222379999996 12.151 97.45573339999999 12.155 145.7433722 3.889 110.83988820000003 3.904 124.26110890000004 2.828 153.1471827 13.144 151.4833885 12.105 136.33522889999998 1.976 94.7280603 2.775 94.60279120000003 2.815 66.07808810000002 1.887 128.03181430000004 11.208 104.03563610000002 13.069 113.99247509999998 2.922 89.36011349999998 13.006 100.43675610000004 2.874 156.77084680000002 2.958 90.80847399999999 2.746 109.18541569999998 2.771 72.84264059999998 2.001 64.91956679999998 1.996 84.58708379999996 2.804 70.05312870000003 2.903)
Error minima by case: (37.0 2 32.0 3 14.1871 9 8.1241 8 87.0 2 50.0 2 66.0 2 24.4706 10 0.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 40.4923 9 8.5681 8 54.0 2 1.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 13.6118 2 7.0 2)
Average genome size in population (length): 22.352
Average program size in population (points): 23.352
Average percent parens in population: 0.048
Minimum age in population: 84.89855746067848
Maximum age in population: 89.42998047080276
Average age in population: 87.43113496920974
Median age in population: 87.51077467446045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.019
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 57740231
--- Timings ---
Current time: 1529615968155 milliseconds
Total Time:         198.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.9 seconds, 44.9%
Fitness Testing:     85.7 seconds, 43.3%
Report:              23.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_div} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_rot})
Best program: (integer_rot float_div float_yankdup integer_fromfloat integer_rot integer_yankdup float_yankdup float_tan integer_mod integer_max float_mult integer_dup_items integer_mod in1 float_mult float_inc print_float print_float float_min integer_sub integer_inc float_dup_items integer_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2524.3223152
Median total errors in population: 1304.0
Error averages by case: (87.61525479999999 2.622 82.3342527 3.596 98.2294048 12.093 86.98139169999999 12.1 135.2498021 3.661 99.9981339 3.658 113.85785759999999 2.6 143.57028279999997 13.077 141.9029139 12.076 126.9570446 1.736 82.90321110000001 2.562 82.80973660000001 2.604 53.7065718 1.658 118.1065561 11.132 93.5872255 13.018 103.484518 2.675 78.40848120000001 12.979 88.6380718 2.661 147.0576108 2.713 80.5846604 2.55 99.49495080000001 2.556 61.3934145 1.743 52.54308210000001 1.727 73.88055410000001 2.597 57.9623315 2.671)
Error minima by case: (37.0 2 32.0 3 12.0746 8 17.5237 9 87.0 2 50.0 2 66.0 2 2.9229 8 2.253 9 51.0617 1 33.0 2 33.0 2 2.0 1 13.9878 9 18.394 8 54.0 2 5.2519 8 39.0 2 100.0 1 30.0 1 50.0 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 21.916
Average program size in population (points): 22.916
Average percent parens in population: 0.049
Minimum age in population: 86.19106985754468
Maximum age in population: 90.84327773530819
Average age in population: 88.9205819942078
Median age in population: 88.98311789735591
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.014
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 58288156
--- Timings ---
Current time: 1529615970977 milliseconds
Total Time:         200.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.4 seconds, 45.0%
Fitness Testing:     86.9 seconds, 43.2%
Report:              23.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_div} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_shove} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_frominteger} {:instruction tag_integer_8} {:instruction integer_mult} {:instruction tag_integer_753} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction in1} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_swap} {:instruction 69} {:instruction float_dup} {:instruction 69} {:instruction integer_pop} {:instruction integer_flush} {:instruction tag_float_15} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_mult} {:instruction tag_integer_598} {:instruction float_yank} {:instruction in1})
Best program: (integer_sub integer_div integer_add integer_yankdup integer_stackdepth float_cos integer_dup_items integer_dup_items integer_mod in1 float_shove float_inc float_max print_float integer_dup float_frominteger tag_integer_8 integer_mult tag_integer_753 integer_dec integer_dup_times in1 integer_dec integer_swap integer_swap 69 float_dup 69 integer_pop integer_flush tag_float_15 integer_rot integer_dup_times integer_dup_items integer_dup_times integer_dup_times float_tan float_dup_items float_mult tag_integer_598 float_yank in1)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2554.6407593
Median total errors in population: 1304.0
Error averages by case: (88.39324879999998 2.646 84.13533740000001 3.618 100.15056890000001 12.102 88.0159462 12.106 135.9058622 3.68 100.73955989999999 3.691 114.88489709999999 2.639 144.6228168 13.091 143.38915720000003 12.076 126.94737119999999 1.753 84.7685646 2.59 84.7043925 2.625 55.592953099999995 1.683 119.01001589999998 11.148 94.70016530000001 13.037 104.16079450000001 2.699 79.95551710000001 12.99 90.4938488 2.681 147.4533537 2.734 81.45915450000001 2.565 100.29175469999998 2.583 62.170107300000005 1.771 54.36926709999999 1.769 74.88608729999999 2.626 59.837017200000005 2.7)
Error minima by case: (37.0 2 32.0 3 13.1871 8 10.5617 7 87.0 2 50.0 2 15.4266 2 2.8352 9 0.0568 10 4.543 1 33.0 2 33.0 2 2.0 1 14.2037 11 14.2837 11 12.3848 2 2.1162 8 39.0 2 46.4089 1 10.832 1 4.4571 1 9.0 1 1.0 1 7.3063 2 7.0 2)
Average genome size in population (length): 21.838
Average program size in population (points): 22.838
Average percent parens in population: 0.050
Minimum age in population: 88.09920126118197
Maximum age in population: 92.58290185419303
Average age in population: 90.4769408117547
Median age in population: 90.50678408151721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 58834131
--- Timings ---
Current time: 1529615974099 milliseconds
Total Time:         203.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.8 seconds, 45.1%
Fitness Testing:     88.0 seconds, 43.2%
Report:              23.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction tagged_899} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction print_float} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_add} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove})
Best program: (tagged_899 integer_yankdup integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub print_float float_inc float_max print_float float_add integer_sub integer_mod integer_swap integer_stackdepth in1 integer_dup float_yankdup integer_yankdup integer_swap integer_flush integer_max integer_mod float_dup_times float_shove)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2774.610873399999
Median total errors in population: 1304.0
Error averages by case: (97.5418118 2.809 93.1687403 3.76 108.4813095 12.134 96.53809600000001 12.139 144.74943670000002 3.848 109.81104619999999 3.857 123.27917070000001 2.772 152.42449440000001 13.118 151.07579379999999 12.095 135.4081973 1.925 93.5949167 2.724 93.4881334 2.762 64.83208410000002 1.84 127.1990313 11.18 103.1332417 13.053 112.99844140000002 2.868 88.5421479 12.992 99.2894108 2.831 155.8352274 2.905 89.9471908 2.7 108.4649927 2.719 71.7738852 1.956 63.8522325 1.947 83.582762 2.754 69.05007880000002 2.861)
Error minima by case: (37.0 2 32.0 3 14.1871 10 20.0144 9 87.0 2 50.0 2 55.9147 2 2.9844 7 0.9432 7 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 18.4427 9 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 2.3258 2 7.0 2)
Average genome size in population (length): 21.711
Average program size in population (points): 22.711
Average percent parens in population: 0.050
Minimum age in population: 89.60150561309094
Maximum age in population: 93.72840880099034
Average age in population: 91.96388416975019
Median age in population: 92.01502546952862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 59376931
--- Timings ---
Current time: 1529615977041 milliseconds
Total Time:         206.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.2 seconds, 45.1%
Fitness Testing:     89.3 seconds, 43.1%
Report:              24.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_mod} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_rot})
Best program: (float_dec integer_yankdup float_dec integer_yankdup integer_rot float_sub float_yankdup integer_mod in1 float_mult float_inc print_float print_float float_min integer_sub integer_inc float_dup_items integer_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 2900.839750699999
Median total errors in population: 1304.0
Error averages by case: (102.28877619999999 2.859 98.2417333 3.825 113.1884157 12.157 102.28257419999998 12.165 149.20760500000003 3.899 114.48577000000002 3.91 128.84673870000003 2.843 156.80209079999997 13.133 155.64520979999998 12.125 140.81919829999998 1.994 98.5840875 2.792 98.46305500000001 2.827 70.02989680000002 1.914 131.8825639 11.202 108.76400319999998 13.059 117.81387959999998 2.934 93.7511815 13.01 104.25897660000003 2.907 160.67676100000003 2.971 94.8536573 2.759 113.2621996 2.78 76.5999286 2.017 68.78330869999999 2.006 89.48804879999999 2.815 73.99309060000002 2.924)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 19.1422 9 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 21.5
Average program size in population (points): 22.5
Average percent parens in population: 0.050
Minimum age in population: 91.24069729118753
Maximum age in population: 95.34545599294677
Average age in population: 93.4943508361571
Median age in population: 93.5435426143193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.014
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 59914481
--- Timings ---
Current time: 1529615979900 milliseconds
Total Time:         209.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.7 seconds, 45.1%
Fitness Testing:     90.4 seconds, 43.1%
Report:              24.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_add})
Best program: (integer_rot integer_rot integer_yankdup integer_max float_mult integer_dup_items integer_mod in1 float_mult float_inc print_float print_float float_min integer_sub integer_inc integer_add)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 16
Size: 17
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 2657.5802497999994
Median total errors in population: 1304.0
Error averages by case: (92.426894 2.71 88.18519440000001 3.689 103.8326874 12.149 92.71078189999999 12.164 139.7814554 3.749 104.7362097 3.758 119.43496410000002 2.707 147.9749442 13.132 146.8925962 12.121 131.5966931 1.82 88.7032688 2.667 88.60842570000001 2.695 59.72392920000001 1.764 122.71255530000002 11.188 99.2780263 13.072 108.2309674 2.776 84.1290864 13.031 94.4133089 2.757 151.58617370000002 2.814 85.1821783 2.642 103.8528912 2.662 66.3188221 1.837 58.512286499999995 1.835 79.69003699999999 2.685 63.8788726 2.763)
Error minima by case: (37.0 2 32.0 3 14.1871 8 18.7078 9 87.0 2 50.0 2 66.0 2 2.9229 10 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1959 11 19.1422 8 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 21.611
Average program size in population (points): 22.611
Average percent parens in population: 0.050
Minimum age in population: 92.48996766624987
Maximum age in population: 96.73464968641616
Average age in population: 94.9557770058987
Median age in population: 94.97554589009832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.012
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 60454756
--- Timings ---
Current time: 1529615982656 milliseconds
Total Time:         212.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.1 seconds, 45.2%
Fitness Testing:     91.5 seconds, 43.0%
Report:              24.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction integer_rot} {:instruction float_rot} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_min} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction 69} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction in2} {:instruction float_dup_items} {:instruction integer_rot} {:instruction float_flush} {:instruction in1} {:instruction float_mult} {:instruction integer_rot} {:instruction in1} {:instruction float_flush})
Best program: (integer_yankdup integer_rot float_rot integer_dec float_tan integer_min float_mult integer_dup_items integer_mod 69 float_tan integer_dup float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult in2 float_dup_items integer_rot float_flush in1 float_mult integer_rot in1 float_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2668.1535107999994
Median total errors in population: 1304.0
Error averages by case: (92.4242898 2.723 88.96501149999999 3.683 104.70395619999998 12.118 93.4906324 12.13 139.78499570000002 3.762 104.7307128 3.761 120.33134480000001 2.703 148.05586949999997 13.112 147.42543639999997 12.088 130.7999476 1.843 89.5541047 2.661 89.482621 2.691 60.558605 1.765 122.76417870000002 11.159 100.23165850000001 13.031 108.2212131 2.784 85.01710010000001 12.998 95.25694640000002 2.754 151.57890320000004 2.827 85.0895106 2.624 103.73288409999999 2.646 66.3103085 1.863 59.5004223 1.855 80.2604175 2.685 64.84144040000001 2.775)
Error minima by case: (37.0 2 32.0 3 13.1871 9 27.4383 10 87.0 2 50.0 2 66.0 2 47.2349 12 0.0568 8 79.0 1 33.0 2 33.0 2 2.0 1 41.4923 10 30.7163 8 54.0 2 3.1978 9 39.0 2 100.0 1 10.832 1 4.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 21.543
Average program size in population (points): 22.543
Average percent parens in population: 0.050
Minimum age in population: 93.48996766624987
Maximum age in population: 98.35388222627721
Average age in population: 96.42023441463817
Median age in population: 96.4836885994804
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 60993331
--- Timings ---
Current time: 1529615985675 milliseconds
Total Time:         215.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.5 seconds, 45.2%
Fitness Testing:     92.7 seconds, 43.0%
Report:              25.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_mult} {:instruction integer_min} {:instruction float_min} {:instruction float_inc} {:instruction -78} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_max} {:instruction float_flush} {:instruction in2} {:instruction print_float} {:instruction integer_mod} {:instruction integer_mult})
Best program: (integer_yankdup float_yankdup integer_max float_mult integer_min float_min float_inc -78 integer_dec integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup float_max float_flush in2 print_float integer_mod integer_mult)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2572.4927968999996
Median total errors in population: 1304.0
Error averages by case: (89.4348052 2.672 84.91204889999999 3.635 101.01901229999999 12.162 87.97333119999999 12.166 136.922977 3.703 101.777659 3.705 114.9360491 2.646 145.4557047 13.135 144.1935825 12.142 127.0874479 1.773 85.57771369999999 2.616 85.5267502 2.64 56.4122144 1.699 119.7491475 11.183 94.73443560000001 13.082 105.05989 2.732 80.44755660000001 13.045 91.2981145 2.692 148.0497562 2.756 82.2841269 2.589 101.07663519999998 2.607 63.178870700000004 1.792 55.405225200000004 1.784 74.8096375 2.622 60.8761049 2.716)
Error minima by case: (37.0 2 32.0 3 14.1871 10 20.0144 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 20.305 9 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.1748 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 21.345
Average program size in population (points): 22.345
Average percent parens in population: 0.051
Minimum age in population: 95.55553477196628
Maximum age in population: 99.78196080124006
Average age in population: 97.8783529898972
Median age in population: 97.908502852106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 61526956
--- Timings ---
Current time: 1529615988637 milliseconds
Total Time:         218.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.9 seconds, 45.3%
Fitness Testing:     94.0 seconds, 43.0%
Report:              25.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_min} {:instruction integer_mod} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction float_max} {:instruction print_float} {:instruction float_dup} {:instruction in2} {:instruction integer_flush} {:instruction in2} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_pop} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction print_float} {:instruction integer_dup})
Best program: (integer_rot integer_yankdup integer_flush integer_dup float_min integer_mod in1 integer_min float_inc float_max print_float integer_dup float_max print_float float_dup in2 integer_flush in2 integer_shove integer_mod float_dup_times float_yankdup float_pop float_inc float_max float_add print_float integer_dup)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2648.2895282999993
Median total errors in population: 1304.0
Error averages by case: (92.6625215 2.747 88.36250260000001 3.704 103.6656441 12.119 90.78826299999999 12.128 140.10789250000002 3.793 104.99766120000001 3.794 117.83622710000002 2.716 147.8754512 13.111 146.4345417 12.09 129.89715659999996 1.87 88.7960755 2.678 88.6961723 2.708 59.87922960000001 1.775 122.36779810000002 11.171 97.50517419999998 13.058 108.0905426 2.814 83.22847949999999 12.996 94.52583229999999 2.763 150.88450550000002 2.858 85.13774329999998 2.652 103.7568118 2.669 66.69928029999998 1.886 58.7781631 1.887 77.77939609999999 2.702 64.04346260000001 2.804)
Error minima by case: (37.0 2 32.0 3 14.1871 9 17.5237 8 87.0 2 50.0 2 66.0 2 5.7272 9 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 13.9878 10 19.1337 8 54.0 2 4.1978 9 39.0 2 100.0 1 9.9243 1 2.3346 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 20.921
Average program size in population (points): 21.921
Average percent parens in population: 0.052
Minimum age in population: 96.65208231603025
Maximum age in population: 101.3421152127989
Average age in population: 99.36977527312366
Median age in population: 99.40196292957312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.014
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 62049981
--- Timings ---
Current time: 1529615991375 milliseconds
Total Time:         221.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.3 seconds, 45.3%
Fitness Testing:     95.1 seconds, 43.0%
Report:              25.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_inc} {:instruction -78} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_mult} {:instruction float_max} {:instruction integer_mod} {:instruction in1} {:instruction integer_div} {:instruction float_inc} {:instruction integer_swap} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_mult})
Best program: (integer_rot integer_dup float_yankdup float_inc -78 float_mult integer_dup_items integer_mod in1 float_sub float_inc float_max float_max integer_dec float_yankdup float_tan integer_dup float_mult float_max integer_mod in1 integer_div float_inc integer_swap print_float integer_dup integer_sub integer_dup float_mult)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2703.0017546999993
Median total errors in population: 1304.0
Error averages by case: (95.2199266 2.707 90.73071189999999 3.677 106.78698999999999 12.108 90.9432202 12.096 143.0792184 3.75 107.53875559999999 3.745 118.25459939999998 2.689 151.6047955 13.089 149.94342790000002 12.08 130.0393362 1.82 91.5534173 2.655 91.35838999999999 2.694 62.466736499999996 1.742 125.09548649999999 11.15 97.87833479999999 13.032 110.26025149999998 2.764 85.2378618 12.988 97.0905636 2.749 152.21687190000003 2.806 88.29221150000001 2.638 107.15099919999999 2.651 69.24659849999999 1.83 61.5178729 1.833 77.8439338 2.672 66.9322432 2.754)
Error minima by case: (9.7876 2 17.2363 3 5.8365 10 18.7078 8 87.0 2 50.0 2 10.979 2 3.421 9 0.9432 9 60.9591 1 16.0089 2 8.0032 2 2.0 1 14.0218 9 19.1422 10 36.3685 2 4.1978 8 26.8933 2 85.0781 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 20.583
Average program size in population (points): 21.583
Average percent parens in population: 0.052
Minimum age in population: 98.62678757779189
Maximum age in population: 102.7440249539586
Average age in population: 100.8642332858879
Median age in population: 100.8974444614348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 62564556
--- Timings ---
Current time: 1529615994268 milliseconds
Total Time:         224.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.6 seconds, 45.3%
Fitness Testing:     96.3 seconds, 43.0%
Report:              26.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_min} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction in2} {:instruction integer_yank} {:instruction float_flush})
Best program: (integer_rot float_min float_mult integer_dup_items integer_yankdup float_yankdup float_tan integer_dup float_sub integer_dup_items integer_mod in1 float_sub float_inc float_max print_float integer_dup in2 integer_yank float_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2369.8732831999987
Median total errors in population: 1304.0
Error averages by case: (81.386 2.594 77.23226189999998 3.58 92.41320989999998 12.105 80.2133372 12.111 129.4585745 3.619 93.87783950000001 3.632 107.45693860000003 2.591 136.86071909999998 13.091 136.13522809999998 12.093 119.8483284 1.689 77.44752340000001 2.564 77.2896416 2.58 48.3075931 1.638 111.29054800000002 11.142 86.91407690000001 13.046 97.07488620000001 2.648 72.149925 13.006 83.2699955 2.641 140.6752415 2.676 73.6354344 2.541 92.48188619999999 2.558 55.1746287 1.7 47.0885187 1.702 67.09672639999998 2.569 52.3442204 2.634)
Error minima by case: (37.0 2 32.0 3 14.1871 8 18.7078 9 87.0 2 50.0 2 5.9831 2 2.3261 8 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 12.4722 9 17.4724 10 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 20.454
Average program size in population (points): 21.454
Average percent parens in population: 0.052
Minimum age in population: 99.62678757779189
Maximum age in population: 104.1688644481319
Average age in population: 102.3670693171813
Median age in population: 102.4378227318426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 63075906
--- Timings ---
Current time: 1529615997299 milliseconds
Total Time:         227.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.0 seconds, 45.4%
Fitness Testing:     97.5 seconds, 42.9%
Report:              26.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_mod} {:instruction in1} {:instruction integer_dup_times} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_add})
Best program: (integer_rot integer_mod in1 integer_dup_times float_inc print_float print_float float_min integer_sub integer_inc integer_add)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 11
Size: 12
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 2728.6796983999993
Median total errors in population: 1304.0
Error averages by case: (95.29585619999999 2.751 91.10274109999999 3.72 106.61484150000001 12.191 95.6096022 12.206 142.51104850000004 3.778 107.568187 3.781 122.24198980000001 2.733 150.65262239999998 13.162 149.2472231 12.181 134.3413223 1.873 91.60544529999999 2.698 91.52189569999999 2.726 62.731366900000005 1.791 125.48158270000002 11.212 102.1553913 13.1 111.04668679999999 2.818 86.97081940000001 13.069 97.30909999999999 2.788 154.2666297 2.84 88.0157262 2.659 106.5825373 2.681 69.2689849 1.894 61.5070411 1.879 82.13908699999999 2.706 66.85397 2.801)
Error minima by case: (37.0 2 32.0 3 14.1871 10 28.4383 8 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 31.7163 10 54.0 2 4.1978 10 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 20.406
Average program size in population (points): 21.406
Average percent parens in population: 0.053
Minimum age in population: 100.6267875777919
Maximum age in population: 105.8456781474948
Average age in population: 103.8824427474956
Median age in population: 103.9426872154023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 63586056
--- Timings ---
Current time: 1529616000127 milliseconds
Total Time:         230.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.5 seconds, 45.4%
Fitness Testing:     98.6 seconds, 42.9%
Report:              26.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_tan} {:instruction -4} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_mult} {:instruction tag_float_448} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_mult} {:instruction float_yank} {:instruction float_yankdup} {:instruction -70} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction in2} {:instruction float_pop} {:instruction in2} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_sub} {:instruction print_float})
Best program: (float_max integer_yankdup float_inc float_tan -4 integer_dup integer_dup_items integer_rot integer_yankdup integer_max integer_inc integer_dup float_mult tag_float_448 in1 float_sub float_inc float_max print_float integer_dup integer_sub float_mult float_yank float_yankdup -70 integer_yankdup integer_swap in2 float_pop in2 integer_shove integer_mod float_dup_times float_shove float_sub print_float)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 2703.4395738999997
Median total errors in population: 1304.0
Error averages by case: (94.20466250000001 2.735 89.8448945 3.696 105.71799789999999 12.144 94.64996159999998 12.149 141.44015230000002 3.774 106.4662895 3.775 121.2407876 2.707 149.94916740000002 13.13 148.54217530000003 12.114 133.42272200000002 1.849 90.43864350000001 2.668 90.3411772 2.703 61.348475500000006 1.768 124.6800597 11.181 101.216042 13.062 110.10473589999998 2.789 86.1599881 13.02 96.0167626 2.761 153.3361558 2.831 87.13760259999998 2.649 105.7314727 2.659 68.1361328 1.865 60.4900641 1.854 81.6152934 2.693 65.8441574 2.788)
Error minima by case: (37.0 2 32.0 3 5.3836 9 19.8145 8 87.0 2 50.0 2 66.0 2 38.662 11 0.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 41.1594 10 26.9388 10 54.0 2 2.1162 8 15.8999 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 19.7
Average program size in population (points): 20.7
Average percent parens in population: 0.055
Minimum age in population: 102.6516179264405
Maximum age in population: 106.9851445882935
Average age in population: 105.3888300194223
Median age in population: 105.4754418926604
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 64078556
--- Timings ---
Current time: 1529616003110 milliseconds
Total Time:         232.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.0 seconds, 45.5%
Fitness Testing:     99.7 seconds, 42.8%
Report:              27.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_shove} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_flush})
Best program: (integer_rot float_max float_yankdup in1 float_sub float_inc float_max print_float float_shove integer_sub float_mult integer_mult integer_mod float_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2895.6914906
Median total errors in population: 1304.0
Error averages by case: (102.8477347 2.792 97.6037655 3.77 114.38298459999999 12.165 101.4331954 12.157 149.62014080000003 3.832 115.00519800000001 3.834 126.92596569999999 2.77 156.7947588 13.131 157.12067510000003 12.127 139.9487863 1.908 98.09766590000001 2.728 98.0157273 2.773 69.4129043 1.839 131.4538761 11.195 108.0971996 13.064 118.22969619999999 2.854 94.0731203 13.024 103.7665001 2.833 160.5878194 2.89 94.72875630000001 2.708 113.2933931 2.719 76.95426149999999 1.93 69.32853649999998 1.919 86.6343276 2.748 74.7765015 2.848)
Error minima by case: (37.0 2 33.0 3 14.1871 10 20.0144 9 87.0 2 50.0 2 67.0 2 2.9844 7 0.9432 9 79.0 1 34.0 2 34.0 2 3.0 1 14.1887 9 20.305 9 54.0 2 4.1978 9 40.0 2 100.0 1 11.832 1 5.1748 1 9.0 1 2.0 1 25.0 2 8.0 2)
Average genome size in population (length): 19.508
Average program size in population (points): 20.508
Average percent parens in population: 0.055
Minimum age in population: 104.6205191200868
Maximum age in population: 108.9146950141207
Average age in population: 106.872964992983
Median age in population: 106.8930385987592
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.019
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 64566256
--- Timings ---
Current time: 1529616006039 milliseconds
Total Time:         236.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.6 seconds, 45.6%
Fitness Testing:    100.8 seconds, 42.7%
Report:              27.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction tagged_826} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_rot})
Best program: (integer_rot integer_rot integer_yankdup tagged_826 integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 2737.8766523999993
Median total errors in population: 1304.0
Error averages by case: (96.1736496 2.727 90.70728519999999 3.702 107.705178 12.127 95.6386618 12.125 143.9946417 3.759 108.4802401 3.766 121.4925059 2.723 151.5201521 13.107 150.67042340000003 12.105 134.4245279 1.849 91.54212849999999 2.67 91.3624495 2.711 62.44355100000001 1.775 125.5497641 11.171 102.2545112 13.044 111.79891629999999 2.784 87.76693269999998 13.004 97.08128900000001 2.775 154.734443 2.822 88.10116539999999 2.642 106.88672509999998 2.656 70.2284098 1.864 62.517288699999995 1.849 81.627008 2.703 67.93580440000001 2.779)
Error minima by case: (9.7876 2 17.2363 3 5.8365 10 20.0144 8 87.0 2 50.0 2 59.6988 2 2.9844 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 20.305 9 36.3685 2 4.1978 9 39.0 2 85.0781 1 11.832 1 5.4571 1 9.0 1 1.0 1 1.4583 2 7.0 2)
Average genome size in population (length): 19.212
Average program size in population (points): 20.212
Average percent parens in population: 0.055
Minimum age in population: 105.6205191200868
Maximum age in population: 110.1560124828409
Average age in population: 108.394764253241
Median age in population: 108.4474168681694
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 65046556
--- Timings ---
Current time: 1529616008767 milliseconds
Total Time:         238.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.0 seconds, 45.6%
Fitness Testing:    101.9 seconds, 42.7%
Report:              27.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction integer_dup} {:instruction float_mult} {:instruction float_pop} {:instruction float_rot} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_swap} {:instruction integer_sub} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction 16} {:instruction integer_dup_times} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction in1})
Best program: (integer_rot integer_dup_items integer_mod in1 integer_dup float_mult float_pop float_rot in1 float_sub float_inc float_max print_float float_swap integer_sub float_mult in2 integer_dup 16 integer_dup_times float_max print_float integer_dup in1)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2867.280314599999
Median total errors in population: 1304.0
Error averages by case: (101.9984591 2.916 97.94031109999999 3.876 112.13031769999999 12.096 98.44832 12.089 149.15186780000005 3.962 114.2445431 3.963 125.45089850000001 2.891 155.5925048 13.085 154.3477069 12.063 137.5346933 2.046 97.92446710000002 2.839 97.74552170000001 2.881 69.58104650000001 1.969 130.49560730000005 11.169 105.1283879 13.002 116.84213359999998 2.978 91.5721435 12.94 103.65618490000004 2.969 158.9333257 3.035 93.8105226 2.807 112.07926619999999 2.824 76.57821419999999 2.088 68.50863809999998 2.085 85.65966429999999 2.866 73.50556869999998 2.981)
Error minima by case: (37.0 2 32.0 3 13.926 8 20.0144 8 87.0 2 50.0 2 0.8358 2 2.9229 7 0.9432 8 79.0 1 4.1941 2 3.8115 2 0.115 1 14.1887 9 20.305 8 54.0 2 4.1978 8 15.0785 2 100.0 1 4.3847 1 2.6092 1 9.0 1 1.0 1 3.4089 2 7.0 2)
Average genome size in population (length): 18.896
Average program size in population (points): 19.896
Average percent parens in population: 0.056
Minimum age in population: 107.408154209308
Maximum age in population: 111.7582217175631
Average age in population: 109.9261765891747
Median age in population: 109.969409776749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.022
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 65518956
--- Timings ---
Current time: 1529616011687 milliseconds
Total Time:         241.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.5 seconds, 45.7%
Fitness Testing:    103.0 seconds, 42.6%
Report:              27.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_inc} {:instruction integer_add})
Best program: (integer_rot integer_rot integer_yankdup integer_max float_mult integer_dup_items integer_mod in1 float_mult float_inc print_float print_float integer_dup integer_sub integer_inc integer_add)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 16
Size: 17
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 2990.566600299999
Median total errors in population: 1304.0
Error averages by case: (106.415706 2.913 102.8000719 3.888 116.9265052 12.142 104.17534919999999 12.147 153.2552308 3.961 118.56439630000003 3.969 131.03084990000002 2.904 160.195066 13.125 159.3354198 12.107 142.8155743 2.064 102.8005389 2.853 102.55044090000003 2.889 74.4013123 1.973 135.17415850000003 11.202 110.78915130000001 13.051 121.48426790000002 3.0 97.25696079999999 12.994 108.35879019999999 2.974 163.58546680000003 3.046 98.90037349999999 2.826 117.2193508 2.843 80.97084419999999 2.082 73.07970959999999 2.077 91.49069779999999 2.876 78.0993674 2.985)
Error minima by case: (37.0 2 32.0 3 14.1871 8 8.9408 9 87.0 2 50.0 2 66.0 2 2.9229 7 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 12.7219 9 16.058 9 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 18.472
Average program size in population (points): 19.472
Average percent parens in population: 0.057
Minimum age in population: 108.774117003276
Maximum age in population: 113.1116499936
Average age in population: 111.4033748800536
Median age in population: 111.4050939303951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 65980756
--- Timings ---
Current time: 1529616014517 milliseconds
Total Time:         244.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.0 seconds, 45.8%
Fitness Testing:    104.1 seconds, 42.6%
Report:              28.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_flush} {:instruction in1} {:instruction in2})
Best program: (integer_pop integer_shove integer_mod float_yankdup float_tan integer_yankdup float_tan integer_yankdup float_yankdup float_tan integer_rot integer_mod in1 float_sub float_inc integer_flush print_float integer_sub float_shove integer_rot integer_dup_times float_flush in1 in2)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2704.276861799999
Median total errors in population: 1304.0
Error averages by case: (94.29567519999999 2.711 89.84155679999999 3.679 105.84554439999998 12.11 94.64171889999999 12.118 141.4751668 3.756 106.6103584 3.757 121.2655963 2.691 149.93281589999998 13.104 148.89345749999998 12.075 133.4348293 1.828 90.4443515 2.656 90.40571010000001 2.681 61.4793126 1.751 124.65311980000001 11.161 101.1882414 13.035 110.0850287 2.779 86.1081225 12.99 96.160144 2.751 153.36090779999998 2.822 87.16739189999998 2.625 105.9009607 2.645 68.35993739999999 1.84 60.4510015 1.839 81.62312569999999 2.674 65.8167867 2.758)
Error minima by case: (37.0 2 32.0 3 12.1867 9 18.7078 9 87.0 2 50.0 2 66.0 2 10.4993 11 0.9432 8 79.0 1 5.3468 2 33.0 2 2.0 1 17.1293 11 19.1422 8 54.0 2 2.1974 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 18.437
Average program size in population (points): 19.437
Average percent parens in population: 0.057
Minimum age in population: 109.774117003276
Maximum age in population: 114.881313897978
Average age in population: 112.8906861861313
Median age in population: 112.9397595161804
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.013
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 66441681
--- Timings ---
Current time: 1529616017328 milliseconds
Total Time:         247.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.5 seconds, 45.9%
Fitness Testing:    105.2 seconds, 42.5%
Report:              28.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_dup_times})
Best program: (integer_rot integer_yankdup float_yankdup integer_mod in1 float_sub float_inc float_max print_float float_rot integer_sub integer_dup_times)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 2544.4344004999994
Median total errors in population: 1304.0
Error averages by case: (88.48797590000001 2.648 84.1771749 3.627 100.29773509999998 12.103 86.0917739 12.097 135.908098 3.685 100.8610394 3.685 112.99590779999998 2.635 143.9157353 13.089 143.76736499999998 12.076 125.45983829999997 1.761 84.62686500000002 2.599 84.67376690000002 2.637 55.70419480000001 1.69 118.93776269999998 11.142 92.9835116 13.037 103.04519839999999 2.699 79.56384370000002 12.991 90.4616329 2.685 146.15249730000002 2.74 81.45730939999999 2.582 100.36304719999998 2.595 62.468656 1.772 54.515860999999994 1.762 73.42502489999997 2.616 60.448585099999995 2.691)
Error minima by case: (37.0 2 32.0 3 14.1871 10 20.0144 8 87.0 2 50.0 2 18.1327 2 2.9844 7 0.9432 9 59.2661 1 6.3468 2 33.0 2 2.0 1 14.1887 9 20.305 9 24.9751 2 4.1978 9 39.0 2 35.7143 1 12.832 1 6.1748 1 9.0 1 1.0 1 0.2896 2 7.0 2)
Average genome size in population (length): 18.53
Average program size in population (points): 19.53
Average percent parens in population: 0.057
Minimum age in population: 111.5379887946231
Maximum age in population: 116.3253713703719
Average age in population: 114.3675701361072
Median age in population: 114.4160400287952
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 66904931
--- Timings ---
Current time: 1529616020135 milliseconds
Total Time:         250.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.0 seconds, 46.0%
Fitness Testing:    106.2 seconds, 42.5%
Report:              28.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_mod} {:instruction integer_dup} {:instruction float_mult} {:instruction float_sub} {:instruction integer_rot} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_dup_items} {:instruction integer_rot})
Best program: (integer_mod integer_mod integer_dup float_mult float_sub integer_rot float_flush in1 float_sub float_inc float_max print_float integer_dup print_float float_min integer_sub integer_inc float_dup_items integer_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2415.1986848999986
Median total errors in population: 1304.0
Error averages by case: (82.7970388 2.6 78.5244546 3.58 94.30943130000001 12.116 82.16981390000001 12.122 130.61625880000003 3.62 95.23267299999999 3.633 109.2735699 2.596 138.9390959 13.104 137.99955709999998 12.103 121.51814559999998 1.697 79.96025400000002 2.564 78.9233994 2.585 49.7500082 1.642 113.27041170000001 11.147 88.904799 13.049 98.6330389 2.652 74.00374190000001 13.013 84.81864209999999 2.638 142.192956 2.676 75.4234311 2.533 95.24241249999999 2.554 57.323638599999995 1.718 48.535733199999996 1.708 69.0401054 2.581 54.91907400000001 2.646)
Error minima by case: (37.0 2 32.0 3 14.1871 8 20.0153 9 87.0 2 50.0 2 65.4361 2 2.9229 10 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.1959 9 20.6235 10 54.0 2 4.1978 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 18.31
Average program size in population (points): 19.31
Average percent parens in population: 0.059
Minimum age in population: 112.5379887946231
Maximum age in population: 117.6255885810559
Average age in population: 115.8435150857238
Median age in population: 115.8530164596054
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.012
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 67362681
--- Timings ---
Current time: 1529616022951 milliseconds
Total Time:         252.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.4 seconds, 46.0%
Fitness Testing:    107.3 seconds, 42.4%
Report:              29.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_tan} {:instruction integer_dup} {:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction print_float} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_flush})
Best program: (float_yankdup float_tan integer_dup in1 in1 float_inc print_float integer_dup integer_sub integer_flush)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 2430.5410277999995
Median total errors in population: 1304.0
Error averages by case: (83.85227330000001 2.62 79.49801670000001 3.584 95.2395383 12.1 82.18234629999999 12.102 131.6769004 3.642 96.28701099999999 3.642 109.43306099999998 2.601 139.8481887 13.097 138.59788550000002 12.095 121.5828801 1.725 80.0191352 2.569 79.9290779 2.586 50.767206900000005 1.646 114.05412999999999 11.143 88.9717502 13.035 99.4951188 2.673 74.5913995 13.004 85.7875912 2.651 142.7328418 2.692 76.44902799999998 2.534 95.30544179999998 2.553 57.5458464 1.737 49.65247459999999 1.731 69.00604309999999 2.579 55.0308411 2.664)
Error minima by case: (36.0 2 32.0 3 14.1871 9 18.7078 8 86.0 2 49.0 2 66.0 2 10.4993 11 0.9432 9 78.0 1 33.0 2 33.0 2 2.0 1 17.1293 11 19.1422 10 53.0 2 4.1978 10 39.0 2 99.0 1 11.832 1 5.4571 1 8.0 1 1.0 1 24.0 2 7.0 1)
Average genome size in population (length): 18.387
Average program size in population (points): 19.387
Average percent parens in population: 0.057
Minimum age in population: 114.4456814387348
Maximum age in population: 119.3311231488153
Average age in population: 117.3677868932856
Median age in population: 117.4185648257934
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 67822356
--- Timings ---
Current time: 1529616025624 milliseconds
Total Time:         255.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.8 seconds, 46.1%
Fitness Testing:    108.4 seconds, 42.4%
Report:              29.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_tan} {:instruction integer_max} {:instruction float_max} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_div} {:instruction float_mult} {:instruction integer_sub} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_div} {:instruction print_float} {:instruction float_mult} {:instruction integer_mult} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_div})
Best program: (integer_rot float_tan integer_max float_max integer_dec float_yankdup float_div float_mult integer_sub in1 float_sub float_inc float_div print_float float_mult integer_mult float_inc float_max print_float integer_dup integer_dup_items integer_sub integer_dup_times float_flush integer_fromfloat float_swap float_div)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2724.5729277
Median total errors in population: 1304.0
Error averages by case: (94.95862460000001 2.689 90.4302737 3.673 106.8500095 12.125 95.6615843 12.135 142.0581342 3.732 107.2052301 3.735 122.12142180000001 2.685 151.02696910000003 13.113 149.8985795 12.094 134.30620269999997 1.806 91.2157534 2.637 91.1814641 2.679 62.1490867 1.742 125.69804189999999 11.167 102.2345747 13.055 110.86900499999999 2.75 87.12870960000001 13.001 96.87860210000001 2.741 154.1285079 2.79 88.09519029999998 2.618 106.81367639999999 2.631 68.7263775 1.814 61.10842879999999 1.806 82.56034419999999 2.672 66.63513560000001 2.743)
Error minima by case: (37.0 2 32.0 3 14.1871 10 28.4383 11 87.0 2 50.0 2 66.0 2 47.2349 10 0.9432 10 79.0 1 33.0 2 33.0 2 2.0 1 42.4563 11 31.7163 12 54.0 2 2.1162 8 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 17.712
Average program size in population (points): 18.712
Average percent parens in population: 0.059
Minimum age in population: 115.4456814387348
Maximum age in population: 120.8539585992345
Average age in population: 118.8545609502878
Median age in population: 118.8842213854705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.013
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 68265156
--- Timings ---
Current time: 1529616028398 milliseconds
Total Time:         258.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.2 seconds, 46.1%
Fitness Testing:    109.5 seconds, 42.4%
Report:              29.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_mult} {:instruction integer_yankdup} {:instruction float_min} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_pop} {:instruction float_dup_items} {:instruction integer_rot})
Best program: (integer_yankdup float_yankdup integer_max float_mult integer_yankdup float_min in1 float_mult float_inc print_float print_float float_min integer_sub integer_pop float_dup_items integer_rot)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 16
Size: 17
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 2428.5209626999995
Median total errors in population: 1304.0
Error averages by case: (83.58970819999999 2.577 79.2302713 3.565 95.43182540000001 12.092 82.22231909999999 12.092 131.3256054 3.613 95.98502140000001 3.613 109.33337770000001 2.579 140.0515243 13.08 139.15299009999998 12.081 121.55923 1.683 79.8218706 2.543 79.7544974 2.571 50.58471250000001 1.627 114.18016250000002 11.128 89.0338688 13.031 99.33970929999998 2.633 74.7154226 12.993 85.57483280000001 2.623 142.6178194 2.662 76.56379329999999 2.519 95.5045992 2.537 57.2252105 1.699 49.4200625 1.685 68.9576201 2.564 54.9319083 2.623)
Error minima by case: (11.168 2 32.0 3 14.1871 8 19.0144 7 23.7076 2 1.9275 2 49.5734 2 1.9844 7 0.9432 10 74.0304 1 21.4565 2 13.4508 2 2.0 1 14.2037 9 19.305 10 28.0665 2 4.1978 9 20.3408 2 80.0544 1 11.832 1 5.4571 1 9.0 1 1.0 1 15.6937 2 7.0 2)
Average genome size in population (length): 17.862
Average program size in population (points): 18.862
Average percent parens in population: 0.059
Minimum age in population: 117.8235094463333
Maximum age in population: 122.3384689256104
Average age in population: 120.3419722653337
Median age in population: 120.3955413527165
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.014
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 68711706
--- Timings ---
Current time: 1529616031250 milliseconds
Total Time:         261.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.7 seconds, 46.2%
Fitness Testing:    110.5 seconds, 42.3%
Report:              29.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_max})
Best program: (float_max float_yankdup in1 float_sub float_inc float_max print_float integer_dec integer_sub float_mult integer_mult integer_mod float_max)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 2634.5261763999993
Median total errors in population: 1304.0
Error averages by case: (92.31079679999998 2.711 86.9121715 3.675 103.7737548 12.144 90.82336110000001 12.148 140.2969303 3.742 104.6662898 3.747 116.97280660000001 2.693 147.90013390000001 13.119 146.65994899999998 12.115 129.8766107 1.824 87.7220471 2.655 87.52505149999999 2.683 57.91306060000001 1.744 121.68462480000001 11.176 97.55271349999998 13.066 107.8753682 2.769 83.37119380000001 13.019 93.28036110000001 2.74 150.73025669999998 2.799 84.14258749999999 2.622 102.9648507 2.647 66.2506072 1.836 58.499106499999996 1.829 76.0175669 2.673 63.870975800000004 2.757)
Error minima by case: (9.7876 2 17.2363 3 3.4567 10 10.7946 9 87.0 2 50.0 2 64.7828 2 44.3394 9 0.9432 7 79.0 1 33.0 2 33.0 2 2.0 1 38.1351 10 14.0725 10 36.3685 2 2.0755 8 39.0 2 85.0781 1 5.8117 1 5.4571 1 9.0 1 1.0 1 14.6625 2 7.0 2)
Average genome size in population (length): 17.689
Average program size in population (points): 18.689
Average percent parens in population: 0.059
Minimum age in population: 119.6052279451134
Maximum age in population: 123.5827535913507
Average age in population: 121.8993713175413
Median age in population: 121.9315953173048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 69153931
--- Timings ---
Current time: 1529616034092 milliseconds
Total Time:         264.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.1 seconds, 46.3%
Fitness Testing:    111.7 seconds, 42.3%
Report:              30.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_div} {:instruction print_float} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_div})
Best program: (float_max float_yankdup in1 float_sub float_inc float_div print_float float_dup_times integer_mult integer_mult float_rot integer_add integer_dup_times float_swap float_div)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 2209.3791427999995
Median total errors in population: 1304.0
Error averages by case: (75.1988934 2.502 70.3736921 3.483 86.81816369999999 12.081 73.5141797 12.08 123.4221065 3.519 87.78372000000002 3.528 100.4745254 2.493 131.2141002 13.071 130.6945247 12.076 113.35670490000001 1.59 70.72727850000001 2.469 70.7426193 2.487 41.351256600000006 1.535 105.17315819999999 11.112 80.34808530000001 13.023 90.9821525 2.547 65.8961648 12.998 76.671923 2.544 134.6570139 2.565 67.22353419999999 2.441 86.3300923 2.459 48.763606100000004 1.606 40.6526086 1.592 59.31605559999999 2.476 46.874983300000004 2.541)
Error minima by case: (37.0 2 32.0 3 14.1871 10 18.7078 9 87.0 2 50.0 2 32.6939 2 2.9844 7 0.9432 9 79.0 1 6.3468 2 29.7181 2 2.0 1 14.1887 9 18.0163 8 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 17.4263 2 7.0 2)
Average genome size in population (length): 17.452
Average program size in population (points): 18.452
Average percent parens in population: 0.059
Minimum age in population: 121.0235975540998
Maximum age in population: 125.1214103140743
Average age in population: 123.3751916309968
Median age in population: 123.401427511269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 69590231
--- Timings ---
Current time: 1529616037008 milliseconds
Total Time:         266.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.5 seconds, 46.3%
Fitness Testing:    112.8 seconds, 42.3%
Report:              30.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction tagged_826} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction print_integer} {:instruction float_inc} {:instruction print_float} {:instruction in2})
Best program: (integer_rot integer_yankdup tagged_826 integer_dup_items float_mult integer_shove float_yank in1 print_integer float_inc print_float in2)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 2018.4604238999998
Median total errors in population: 1304.0
Error averages by case: (67.58847449999999 2.436 62.5084551 3.425 79.0502667 12.034 66.78784979999999 12.034 116.3138285 3.463 80.24771299999999 3.455 93.55915690000002 2.441 123.35714139999999 13.028 123.06176299999998 12.015 106.78251319999998 1.524 62.88954940000001 2.414 62.7703103 2.432 33.18570909999999 1.481 97.34113050000002 11.063 73.59375050000001 12.982 83.57381969999999 2.476 58.4200161 12.958 68.7884675 2.474 127.8440101 2.503 59.00632410000001 2.395 78.1050581 2.397 40.86540619999999 1.522 32.7522251 1.518 52.5010569 2.43 38.200428200000005 2.466)
Error minima by case: (37.0 2 32.0 3 15.1871 8 19.6883 8 87.0 2 50.0 2 66.0 2 2.9229 9 1.9432 8 57.3897 1 33.0 2 33.0 2 2.0 1 12.8764 7 19.2443 8 53.3536 2 4.8547 8 39.0 2 93.3657 1 12.832 1 5.1748 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 17.439
Average program size in population (points): 18.439
Average percent parens in population: 0.060
Minimum age in population: 122.3683687426301
Maximum age in population: 126.9267151028895
Average age in population: 124.834976903096
Median age in population: 124.873586076667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 70026206
--- Timings ---
Current time: 1529616039819 milliseconds
Total Time:         269.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.0 seconds, 46.3%
Fitness Testing:    114.0 seconds, 42.2%
Report:              30.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction print_float} {:instruction print_float} {:instruction float_min} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_mult})
Best program: (in1 float_mult float_inc print_float print_float float_min integer_sub integer_inc float_mult)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 2460.7970594999997
Median total errors in population: 1304.0
Error averages by case: (84.27320769999999 2.644 80.86417999999999 3.625 95.71658639999998 12.096 84.4337862 12.106 131.95455680000003 3.68 96.75958729999998 3.68 112.01239239999998 2.648 140.593919 13.089 138.995161 12.079 123.30480289999997 1.76 81.0320432 2.607 81.15256629999999 2.642 52.17973330000002 1.697 115.16613770000001 11.142 91.02710730000001 13.032 100.09629509999999 2.698 75.7257534 12.991 87.02608169999999 2.696 143.7679162 2.737 77.3718908 2.582 96.203386 2.593 58.38505649999999 1.773 50.1329017 1.754 71.9759792 2.632 56.978031400000006 2.685)
Error minima by case: (37.0 2 32.0 3 14.1871 8 19.8767 7 87.0 2 50.0 2 66.0 2 2.8352 9 0.9432 8 38.8194 1 6.3468 2 33.0 2 2.0 1 13.9125 9 19.4327 9 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 17.28
Average program size in population (points): 18.28
Average percent parens in population: 0.061
Minimum age in population: 123.3772068734297
Maximum age in population: 128.2271441561168
Average age in population: 126.3452043639653
Median age in population: 126.3993975000481
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.018
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 70458206
--- Timings ---
Current time: 1529616042443 milliseconds
Total Time:         272.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.3 seconds, 46.4%
Fitness Testing:    115.1 seconds, 42.2%
Report:              31.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_items} {:instruction integer_rot} {:instruction float_max} {:instruction float_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_shove} {:instruction integer_yank})
Best program: (integer_dup_items integer_rot float_max float_yankdup in1 float_sub float_inc float_max print_float float_shove integer_yank)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 11
Size: 12
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 2643.6327327999993
Median total errors in population: 1304.0
Error averages by case: (92.4699946 2.711 88.2424347 3.694 103.8164298 12.094 89.87614729999999 12.087 140.52181440000004 3.746 104.836296 3.748 117.11758729999998 2.705 148.6068302 13.076 146.9341144 12.064 129.0361693 1.831 88.8893917 2.659 88.66508069999998 2.694 59.82435650000001 1.76 122.3389086 11.141 96.67364079999999 13.015 107.84993139999999 2.76 83.07579500000001 12.969 94.4666688 2.765 150.4259059 2.812 85.21294529999999 2.641 104.012477 2.655 66.4988553 1.846 58.668918099999985 1.835 76.79815269999999 2.687 64.015887 2.763)
Error minima by case: (9.7876 2 17.2363 3 5.8365 9 3.7153 9 87.0 2 50.0 2 66.0 2 2.9844 7 0.9432 8 79.0 1 33.0 2 33.0 2 2.0 1 14.1887 9 4.1594 8 36.3685 2 4.1978 9 39.0 2 85.0781 1 11.832 1 5.4571 1 9.0 1 1.0 1 18.0206 2 7.0 2)
Average genome size in population (length): 17.291
Average program size in population (points): 18.291
Average percent parens in population: 0.060
Minimum age in population: 124.3772068734297
Maximum age in population: 129.5564843135435
Average age in population: 127.7952607044425
Median age in population: 127.8835950204011
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.015
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 70890481
--- Timings ---
Current time: 1529616045244 milliseconds
Total Time:         275.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.7 seconds, 46.4%
Fitness Testing:    116.2 seconds, 42.2%
Report:              31.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 54319.0
Test mean error for best: 27.15950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -49.168006896 
Correct output: 128.1103036005 | Program output: 95.1103036005 
Correct output: 16.1870858409  | Program output: -34.8129141591
Correct output: 30.4383483902  | Program output: -8.5616516098 
Correct output: -152.2924220861 | Program output: -64.2924220861
Correct output: -103.9275419598 | Program output: -52.9275419598
Correct output: 84.4265849921  | Program output: 17.4265849921 
Correct output: -46.2348789269 | Program output: 51.7651210731 
Correct output: 2.9432498261   | Program output: -94.0567501739
Correct output: -85.9696350649 | Program output: -5.9696350649 
Correct output: 89.456476621   | Program output: 55.456476621  
Correct output: 81.4508214106  | Program output: 47.4508214106 
Correct output: 85.1473908151  | Program output: 82.1473908151 
Correct output: -41.456273962  | Program output: 29.543726038  
Correct output: 33.7163443256  | Program output: -12.2836556744
Correct output: -81.9335355826 | Program output: -26.9335355826
Correct output: 6.1977863422   | Program output: -23.8022136578
Correct output: 100.3408492001 | Program output: 60.3408492001 
Correct output: -121.9455888507 | Program output: -20.9455888507
Correct output: 13.832049159   | Program output: 44.832049159  
Correct output: 7.4571495297   | Program output: 58.4571495297 
Correct output: -88.6126387117 | Program output: -78.6126387117
Correct output: -56.5251178866 | Program output: -58.5251178866
Correct output: 34.3063370557  | Program output: 9.3063370557  
Correct output: -33.4633610737 | Program output: -41.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_sub} {:instruction tagged_826} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_max} {:instruction print_float} {:instruction float_sub} {:instruction float_inc} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_min} {:instruction float_max})
Best program: (integer_rot integer_sub tagged_826 integer_dup_items integer_mod in1 float_sub float_inc float_max print_float float_sub float_inc integer_inc print_float integer_dup integer_add integer_min float_max)
Errors: [38.0 2 33.0 3 51.0 12 39.0 12 88.0 3 51.0 3 67.0 2 98.0 13 97.0 12 80.0 1 34.0 2 34.0 2 3.0 1 71.0 11 46.0 13 55.0 2 30.0 13 40.0 2 101.0 2 31.0 2 51.0 2 10.0 1 2.0 1 25.0 2 8.0 2]
Total: 1304.0
Mean: 26.08
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 2572.112136499999
Median total errors in population: 1304.0
Error averages by case: (89.3864298 2.652 85.0054001 3.639 101.0526223 12.122 87.9832431 12.12 136.85646389999997 3.689 101.725703 3.693 114.95432639999997 2.648 145.40572110000002 13.111 144.29328830000003 12.099 127.0826936 1.761 85.6369097 2.609 85.57294710000001 2.643 56.493033499999996 1.698 119.7201216 11.158 94.74809119999998 13.053 105.0319803 2.705 80.47177260000001 13.009 91.3573909 2.692 148.0288086 2.745 82.2712084 2.588 101.0386923 2.605 63.106388599999995 1.775 55.343287499999995 1.77 74.8168511 2.634 60.8077615 2.703)
Error minima by case: (37.0 2 32.0 3 14.1871 8 20.0162 7 87.0 2 50.0 2 66.0 2 2.8352 11 0.9432 9 79.0 1 33.0 2 33.0 2 2.0 1 14.2037 9 21.9365 10 54.0 2 4.1978 9 39.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 1.0 1 24.0 2 7.0 2)
Average genome size in population (length): 17.137
Average program size in population (points): 18.137
Average percent parens in population: 0.060
Minimum age in population: 126.9207766649964
Maximum age in population: 131.1519892635636
Average age in population: 129.3371344313246
Median age in population: 129.4043745217682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.013
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 71318906
--- Timings ---
Current time: 1529616048090 milliseconds
Total Time:         278.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.1 seconds, 46.4%
Fitness Testing:    117.3 seconds, 42.2%
Report:              31.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2451.488533499999
Median total errors in population: 1304.0
Error averages by case: (84.71200989999998 2.628 79.5929671 3.604 95.23498320000002 12.108 84.0787655 12.127 132.4780325 3.661 97.1280214 3.67 111.06326580000001 2.625 140.71124430000003 13.108 138.5643265 12.094 124.22132299999998 1.731 80.07031130000001 2.586 79.9756507 2.607 50.847169400000006 1.672 115.23864749999998 11.149 90.70721309999999 13.054 100.65074669999998 2.682 75.33985260000001 13.011 85.84817949999999 2.664 144.3766062 2.721 77.37261800000002 2.569 96.1371107 2.592 58.3784474 1.75 49.50208759999999 1.726 70.94096269999999 2.607 54.91199090000001 2.66)
Error minima by case: (37.0 1 31.0 3 4.3318 9 29.4383 10 87.0 2 50.0 2 65.0 2 19.8242 11 1.9432 8 77.6453 1 32.0 2 32.0 2 1.0 1 2.3814 10 32.7163 10 54.0 2 3.3104 9 38.0 2 100.0 1 11.832 1 5.4571 1 9.0 1 0.0 0 23.0 2 6.0 1)
Average genome size in population (length): 16.889
Average program size in population (points): 17.889
Average percent parens in population: 0.061
Minimum age in population: 127.9597352217211
Maximum age in population: 132.7420151139348
Average age in population: 130.8126568743765
Median age in population: 130.8511891236068
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.012
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 71741131
--- Timings ---
Current time: 1529616050846 milliseconds
Total Time:         280.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.5 seconds, 46.5%
Fitness Testing:    118.4 seconds, 42.2%
Report:              31.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2525.9162061999996
Median total errors in population: 1304.0
Error averages by case: (87.6670932 2.644 83.05702390000002 3.618 99.14885049999998 12.11 86.06265570000001 12.123 135.2495239 3.678 100.0384573 3.679 113.06181160000001 2.632 143.68356179999998 13.099 142.37934389999998 12.089 125.35662330000001 1.76 83.67443360000001 2.601 83.61900800000001 2.626 54.5006782 1.686 117.9719555 11.149 92.8233046 13.049 103.2843952 2.698 78.5332549 12.993 89.392195 2.692 146.3526907 2.736 80.39105450000001 2.578 99.19824530000001 2.589 61.38853569999999 1.772 53.55121879999999 1.752 72.9101609 2.617 58.9601302 2.69)
Error minima by case: (36.0 1 29.1212 3 14.1871 9 17.5237 9 86.0 2 49.0 2 14.5625 2 5.7272 9 0.9432 8 78.0 1 9.5326 2 17.5383 2 1.0 1 13.9878 10 19.1337 10 53.0 2 2.1162 8 1.3517 2 99.0 1 11.832 1 5.4571 1 8.0 1 0.0 0 23.0 2 6.0 1)
Average genome size in population (length): 17.117
Average program size in population (points): 18.117
Average percent parens in population: 0.060
Minimum age in population: 129.6947056023432
Maximum age in population: 134.3449058524384
Average age in population: 132.2860993052149
Median age in population: 132.3465380445106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.016
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 72169056
--- Timings ---
Current time: 1529616053510 milliseconds
Total Time:         283.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.9 seconds, 46.5%
Fitness Testing:    119.5 seconds, 42.1%
Report:              32.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2780.5495271999994
Median total errors in population: 1304.0
Error averages by case: (97.449219 2.777 93.52871090000001 3.79 108.39421529999998 12.114 97.50593919999997 12.124 144.6408624 3.822 109.7131665 3.833 124.21148890000002 2.815 152.3650467 13.109 150.79367900000003 12.086 136.19398869999998 1.97 93.8309801 2.757 93.70824929999999 2.797 65.15234010000002 1.877 127.32435360000002 11.148 104.0191121 13.035 113.05504309999999 2.875 88.84808759999999 12.959 99.5477814 2.899 156.15256180000006 2.917 90.07628629999998 2.722 108.51179429999999 2.745 71.62298560000002 1.987 63.639088699999995 1.926 84.64911359999998 2.793 68.89443299999999 2.844)
Error minima by case: (37.0 1 31.0 3 13.1871 8 20.0144 9 87.0 2 50.0 2 65.0 2 2.9844 7 0.0568 9 5.4644 1 32.0 2 32.0 2 1.0 1 14.1887 9 20.305 8 22.3922 2 3.1978 9 38.0 2 56.4163 1 10.832 1 4.4571 1 9.0 1 0.0 0 23.0 2 6.0 1)
Average genome size in population (length): 17.481
Average program size in population (points): 18.481
Average percent parens in population: 0.059
Minimum age in population: 131.5244179656993
Maximum age in population: 135.6159771703072
Average age in population: 133.7766107791628
Median age in population: 133.8255405119597
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.021
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 72606081
--- Timings ---
Current time: 1529616056170 milliseconds
Total Time:         286.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.2 seconds, 46.5%
Fitness Testing:    120.5 seconds, 42.1%
Report:              32.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2739.7652794999995
Median total errors in population: 1304.0
Error averages by case: (96.86225750000001 2.63 92.2407347 3.752 107.2188009 12.154 93.36523619999998 12.158 144.05508570000003 3.674 109.11776340000002 3.676 120.496643 2.775 151.72665030000002 13.119 150.09145359999997 12.139 133.02477760000002 2.07 92.5070512 2.736 92.37149780000001 2.762 63.88260030000002 1.839 126.23605770000002 11.043 100.13205819999999 13.074 112.0376097 2.858 86.4422344 12.866 98.2169184 2.986 154.40324300000003 2.889 89.44808959999999 2.704 108.00482029999999 2.729 71.1163726 2.086 62.59401939999999 1.773 80.42723899999999 2.749 67.817065 2.688)
Error minima by case: (9.168 1 30.0 2 14.1871 10 17.8767 8 25.7076 2 0.0725 2 47.5734 2 1.5302 7 0.9432 9 76.0304 1 23.4565 2 15.4508 2 0.0 0 13.9948 9 17.4327 9 30.0665 2 2.1162 8 22.3408 2 82.0544 1 10.832 1 4.4571 1 9.0 1 0.0 0 13.6937 2 5.0 1)
Average genome size in population (length): 17.88
Average program size in population (points): 18.88
Average percent parens in population: 0.058
Minimum age in population: 132.5644436506786
Maximum age in population: 137.2856549341024
Average age in population: 135.2776881041372
Median age in population: 135.3211502113505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.022
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 73053081
--- Timings ---
Current time: 1529616058898 milliseconds
Total Time:         288.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.6 seconds, 46.6%
Fitness Testing:    121.6 seconds, 42.1%
Report:              32.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2818.681634299999
Median total errors in population: 1294.0
Error averages by case: (100.85338150000001 2.26 94.5598171 3.824 108.91899059999996 12.062 97.14939449999999 12.069 147.98957050000007 3.321 113.10172150000002 3.331 124.11407510000002 2.853 155.07505889999996 13.058 151.14112410000004 12.034 138.4572165 2.619 94.71121140000001 2.787 94.5508345 2.839 66.19738400000001 1.911 130.13905580000005 10.553 103.6991094 12.979 116.11435770000001 2.932 88.98854409999998 12.329 100.43053000000002 3.53 158.85296330000006 2.988 93.02027829999997 2.769 111.3186692 2.785 75.19884029999999 2.633 64.79656519999999 1.429 84.41607369999998 2.837 69.83286709999999 2.322)
Error minima by case: (37.0 1 29.0 2 10.1871 9 18.8343 8 87.0 2 50.0 2 63.0 2 0.9315 10 0.0568 8 65.8327 1 30.0 1 30.0 1 0.0 0 13.9125 9 16.4739 8 54.0 2 0.1162 7 36.0 2 100.0 1 7.832 1 1.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 19.214
Average program size in population (points): 20.214
Average percent parens in population: 0.052
Minimum age in population: 134.1579515527351
Maximum age in population: 138.7047381596977
Average age in population: 136.851296587864
Median age in population: 136.9116782860477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 300
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 300
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.025
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 73533431
--- Timings ---
Current time: 1529616061735 milliseconds
Total Time:         291.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.0 seconds, 46.6%
Fitness Testing:    122.7 seconds, 42.1%
Report:              32.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2289.2608857999994
Median total errors in population: 1294.0
Error averages by case: (81.0578337 1.683 73.22061180000001 3.56 88.47280889999999 12.025 73.14967019999999 12.019 129.1513898 2.719 93.56258570000001 2.72 101.4572166 2.585 137.0119784 13.017 131.8006858 12.024 116.27136889999997 2.612 73.5536256 2.542 73.42014259999999 2.576 44.290956300000005 1.627 111.20705760000001 10.191 80.32107330000001 12.968 96.16962629999998 2.631 66.9059447 12.024 79.37296540000001 3.563 139.03175730000004 2.665 73.3062389 2.527 92.0971891 2.55 54.667973100000005 2.626 42.960467099999995 0.8 60.03773419999998 2.569 48.22898450000001 1.71)
Error minima by case: (38.0 1 28.0 2 12.1871 9 17.8767 9 88.0 2 51.0 2 62.0 2 1.5302 10 0.0386 7 69.4278 1 29.0 1 29.0 1 0.0 0 15.9125 10 17.4327 10 55.0 1 0.1162 7 35.0 2 101.0 2 9.832 2 3.4571 2 10.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.45
Average program size in population (points): 21.45
Average percent parens in population: 0.047
Minimum age in population: 135.8602169665023
Maximum age in population: 140.1444077000131
Average age in population: 138.3588924360734
Median age in population: 138.425789258788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 392
Genome diversity (% unique Plush genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 392
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 74044681
--- Timings ---
Current time: 1529616064534 milliseconds
Total Time:         294.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.4 seconds, 46.7%
Fitness Testing:    123.8 seconds, 42.1%
Report:              33.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction float_sub} {:instruction integer_yankdup} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_mult integer_shove float_yank in1 float_sub integer_yankdup in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 2354.6949499999987
Median total errors in population: 1294.0
Error averages by case: (83.6675835 1.764 76.3215738 3.63 90.02381339999997 12.043 76.42299889999998 12.041 131.8740897 2.81 96.18960400000002 2.824 104.53905270000003 2.639 138.23194439999997 13.025 133.19198330000003 12.045 120.19302009999997 2.694 76.11998030000001 2.602 75.873694 2.634 47.31267940000002 1.707 112.49420130000004 10.214 83.2677219 12.976 98.878324 2.72 69.20009479999999 12.033 81.98493350000001 3.623 142.05119620000002 2.754 75.2278487 2.585 93.8152229 2.608 57.7542317 2.71 45.769539399999985 0.894 63.58069919999998 2.623 50.705918900000015 1.805)
Error minima by case: (38.0 1 28.0 2 5.4333 9 9.7834 9 88.0 2 51.0 2 62.0 2 0.4698 9 0.0386 7 80.0 1 29.0 1 29.0 1 0.0 0 14.9125 10 15.4327 10 55.0 1 0.1162 7 35.0 2 101.0 2 5.7834 2 1.4333 2 10.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.568
Average program size in population (points): 21.568
Average percent parens in population: 0.047
Minimum age in population: 137.5044916301697
Maximum age in population: 141.8140701928187
Average age in population: 139.8471285275837
Median age in population: 139.8957093658387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 350
Genome diversity (% unique Plush genomes):	 0.397
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 350
Syntactic diversity (% unique Push programs):	 0.397
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 74558881
--- Timings ---
Current time: 1529616067415 milliseconds
Total Time:         297.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.9 seconds, 46.7%
Fitness Testing:    125.0 seconds, 42.0%
Report:              33.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 2331.0867443999987
Median total errors in population: 1294.0
Error averages by case: (82.15199000000001 1.752 74.4217458 3.625 89.2598752 12.012 76.60501579999998 12.012 130.39459770000005 2.795 94.7405439 2.804 104.58023740000002 2.645 137.750065 13.015 132.17942580000002 12.007 120.00896269999997 2.686 74.7465176 2.597 74.55810150000003 2.632 45.50196870000001 1.686 112.1930195 10.194 83.44543499999999 12.946 97.8453677 2.701 68.8509609 12.022 80.58300580000001 3.621 141.44886000000005 2.743 74.14085949999998 2.581 92.81230219999999 2.59 55.9524639 2.702 44.251064199999995 0.881 63.66796639999997 2.629 49.3263922 1.792)
Error minima by case: (37.0 1 28.0 2 11.1871 8 21.9325 9 87.0 2 50.0 2 62.0 2 45.4873 11 0.0386 7 79.0 1 29.0 1 29.0 1 0.0 0 15.2444 9 28.7163 10 54.0 1 1.1978 9 35.0 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.387
Average program size in population (points): 21.387
Average percent parens in population: 0.048
Minimum age in population: 138.939359322203
Maximum age in population: 143.3554521651286
Average age in population: 141.314694895892
Median age in population: 141.3585856322652
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 302
Genome diversity (% unique Plush genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.018
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 75068556
--- Timings ---
Current time: 1529616070186 milliseconds
Total Time:         300.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.3 seconds, 46.7%
Fitness Testing:    126.1 seconds, 42.0%
Report:              33.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2477.9481175999995
Median total errors in population: 1294.0
Error averages by case: (87.94103310000001 1.748 80.1768214 3.604 95.1353585 12.03 83.06391709999998 12.03 135.76185360000002 2.792 100.3694183 2.79 110.3353018 2.631 143.20009109999998 13.02 138.40136840000002 12.023 126.22932819999997 2.68 80.4151629 2.572 80.2723852 2.621 51.43537540000002 1.677 117.82164100000003 10.203 89.72580249999999 12.958 103.5153623 2.694 74.91494259999997 12.025 86.21038410000001 3.615 146.90663570000004 2.739 80.25180590000001 2.571 98.95810249999998 2.58 61.840911199999994 2.687 50.13149819999999 0.87 70.08090199999997 2.621 55.296714600000016 1.775)
Error minima by case: (37.0 1 28.0 2 11.1871 9 17.8767 9 87.0 2 50.0 2 62.0 2 1.5302 11 0.0386 7 79.0 1 29.0 1 29.0 1 0.0 0 14.9125 10 17.4327 11 54.0 1 1.1978 9 35.0 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.484
Average program size in population (points): 21.484
Average percent parens in population: 0.048
Minimum age in population: 140.1669661684147
Maximum age in population: 144.5524372879349
Average age in population: 142.7358591687033
Median age in population: 142.7882634063248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 266
Genome diversity (% unique Plush genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.016
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 75580656
--- Timings ---
Current time: 1529616072934 milliseconds
Total Time:         302.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.7 seconds, 46.8%
Fitness Testing:    127.2 seconds, 42.0%
Report:              33.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 2397.9593670999984
Median total errors in population: 1294.0
Error averages by case: (85.44222370000001 1.792 77.7546187 3.651 92.11845449999998 12.018 77.9026115 12.007 133.50130170000003 2.839 97.93282180000004 2.85 106.0089037 2.679 140.26959399999998 13.009 135.0587006 12.018 121.17248869999997 2.729 77.78701670000001 2.631 77.6095971 2.675 48.86331370000002 1.726 114.75017650000004 10.201 84.9721928 12.945 100.57611619999999 2.752 71.0708537 12.019 83.60470650000002 3.661 143.5702201 2.787 77.2026959 2.614 95.7842381 2.633 59.4344292 2.751 47.58354199999999 0.939 64.96511619999998 2.655 52.61343350000001 1.829)
Error minima by case: (37.0 1 25.4618 2 11.1871 9 17.7403 8 87.0 2 50.0 2 18.2219 2 1.0511 9 0.0386 7 79.0 1 13.192 1 21.1977 1 0.0 0 14.9125 10 17.4327 8 54.0 2 1.1978 9 2.3076 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.469
Average program size in population (points): 21.469
Average percent parens in population: 0.048
Minimum age in population: 141.8892915855917
Maximum age in population: 146.0345119030062
Average age in population: 144.2693637190081
Median age in population: 144.3240852190531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 240
Genome diversity (% unique Plush genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.021
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 76092381
--- Timings ---
Current time: 1529616075892 milliseconds
Total Time:         305.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.2 seconds, 46.8%
Fitness Testing:    128.3 seconds, 42.0%
Report:              34.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction tagged_195} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 tagged_195 float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2350.2325928999994
Median total errors in population: 1294.0
Error averages by case: (83.0031891 1.693 75.08698290000001 3.56 90.40508489999999 12.021 77.3233906 12.021 131.0313465 2.733 95.48710290000001 2.735 104.92817640000003 2.583 138.81810169999997 13.023 133.7280489 12.006 120.6882325 2.631 75.45367949999999 2.537 75.3315285 2.578 46.215462900000006 1.628 113.23774110000001 10.183 84.0916068 12.963 98.43359969999999 2.654 69.54528090000001 12.017 81.26074420000002 3.565 141.83579890000004 2.683 75.30684340000002 2.525 94.1156327 2.531 56.702132600000006 2.643 45.00618459999998 0.809 64.28876649999998 2.573 50.28193420000001 1.731)
Error minima by case: (37.0 1 29.0 2 12.1871 9 17.8767 9 87.0 2 50.0 2 63.0 2 1.5302 10 0.0386 7 79.0 1 30.0 1 30.0 1 0.0 0 15.9125 10 17.4327 8 54.0 2 0.1162 7 36.0 2 100.0 1 9.832 1 3.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.632
Average program size in population (points): 21.632
Average percent parens in population: 0.048
Minimum age in population: 142.9834731531183
Maximum age in population: 147.6487793604632
Average age in population: 145.7183358472366
Median age in population: 145.7697786382796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 217
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 76608181
--- Timings ---
Current time: 1529616078753 milliseconds
Total Time:         308.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.6 seconds, 46.8%
Fitness Testing:    129.5 seconds, 41.9%
Report:              34.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_tan float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2242.112119599999
Median total errors in population: 1294.0
Error averages by case: (78.27299919999999 1.684 70.411288 3.571 85.51534399999998 12.019 74.4211835 12.014 126.57551350000003 2.734 90.82253140000002 2.734 101.76853400000003 2.589 134.21768529999997 13.02 128.72137660000004 12.011 117.89764679999999 2.629 70.70001200000002 2.537 70.5691556 2.572 41.37645580000001 1.628 108.64184340000003 10.182 81.08122350000001 12.958 94.2261557 2.645 65.5058537 12.014 76.55380979999998 3.566 138.32965180000005 2.69 70.32259400000001 2.524 89.09267299999998 2.537 51.85571270000001 2.636 40.05775529999999 0.804 61.27462839999997 2.576 45.30549260000001 1.721)
Error minima by case: (38.0 1 28.0 2 10.1871 9 24.4383 9 88.0 2 51.0 2 62.0 2 46.6091 11 0.0386 7 80.0 1 29.0 1 29.0 1 0.0 0 41.5014 10 27.7163 7 55.0 1 0.1978 9 35.0 2 101.0 2 7.832 2 1.4571 2 10.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.741
Average program size in population (points): 21.741
Average percent parens in population: 0.047
Minimum age in population: 144.6260678494491
Maximum age in population: 148.9545284028828
Average age in population: 147.2145686861675
Median age in population: 147.250792321346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 171
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.018
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 77126706
--- Timings ---
Current time: 1529616081465 milliseconds
Total Time:         311.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.0 seconds, 46.9%
Fitness Testing:    130.6 seconds, 41.9%
Report:              34.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2470.458786099999
Median total errors in population: 1294.0
Error averages by case: (87.6444019 1.778 80.03784460000001 3.672 95.19055559999998 12.042 82.2008046 12.031 135.34184380000002 2.831 100.03300240000002 2.832 109.49943810000003 2.695 143.3310321 13.028 138.24209830000004 12.034 125.30347729999997 2.71 80.31655500000001 2.639 80.1767011 2.688 51.356511900000015 1.744 117.75028360000002 10.223 88.9708736 12.971 103.1977036 2.735 74.521267 12.035 86.08969019999999 3.675 146.36424490000002 2.778 80.037156 2.616 98.65183019999999 2.643 61.48338210000001 2.727 49.90551539999999 0.91 69.10980459999998 2.673 55.17876820000001 1.814)
Error minima by case: (11.168 1 28.0 2 12.1871 10 26.4383 9 23.7076 2 1.9275 2 49.5734 2 49.2349 10 0.0568 9 74.0304 1 21.4565 1 13.4508 1 0.0 0 44.1901 10 29.7163 11 28.0665 1 0.1162 7 20.3408 2 80.0544 1 9.832 1 3.4571 1 9.0 1 0.0 0 15.6937 1 3.0 1)
Average genome size in population (length): 20.83
Average program size in population (points): 21.83
Average percent parens in population: 0.047
Minimum age in population: 145.9215018482121
Maximum age in population: 150.5600942499144
Average age in population: 148.7091479586278
Median age in population: 148.7051480637362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 143
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 77647456
--- Timings ---
Current time: 1529616084388 milliseconds
Total Time:         314.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.3 seconds, 46.9%
Fitness Testing:    131.8 seconds, 41.9%
Report:              35.0 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2415.5488813999996
Median total errors in population: 1294.0
Error averages by case: (85.77806650000001 1.715 77.746194 3.606 93.29158589999997 12.028 79.30356029999999 12.018 133.60887210000004 2.761 98.20949570000002 2.754 106.7837001 2.61 141.68399 13.026 136.5496824 12.007 122.67231079999999 2.666 78.15855010000001 2.561 78.06529400000002 2.608 49.010151700000016 1.664 115.90868170000003 10.182 86.1430154 12.966 101.19578279999999 2.682 72.18589529999998 12.01 83.9376761 3.602 144.20933850000003 2.732 78.23765279999999 2.556 97.0231424 2.565 59.50967289999999 2.674 47.8206538 0.834 66.17784509999997 2.601 53.157070999999995 1.753)
Error minima by case: (38.0 1 28.0 2 11.1871 10 17.9813 8 88.0 2 51.0 2 62.0 2 1.5105 11 0.0568 8 80.0 1 29.0 1 29.0 1 0.0 0 15.9476 9 17.508 9 55.0 1 1.1978 9 35.0 2 101.0 2 8.832 2 2.4571 2 10.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.899
Average program size in population (points): 21.899
Average percent parens in population: 0.047
Minimum age in population: 146.9215018482121
Maximum age in population: 151.8479197204961
Average age in population: 150.1898312429254
Median age in population: 150.2119150393734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 78169931
--- Timings ---
Current time: 1529616087403 milliseconds
Total Time:         317.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.8 seconds, 46.9%
Fitness Testing:    133.0 seconds, 41.9%
Report:              35.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction integer_yankdup} {:instruction tagged_826} {:instruction float_mult} {:instruction integer_inc} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (integer_rot integer_yankdup tagged_826 float_mult integer_inc in1 tagged_500 float_inc float_sub float_yankdup float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2760.4380322999996
Median total errors in population: 1294.0
Error averages by case: (98.919618 1.864 91.1771636 3.745 106.77335790000001 12.061 94.50872340000002 12.058 145.9678941 2.919 111.1355438 2.919 121.5026703 2.77 154.38263530000003 13.05 149.53183660000002 12.029 136.59505569999996 2.795 91.6464159 2.703 91.5645858 2.761 62.9603466 1.836 129.1223066 10.235 101.358856 12.976 114.51257770000001 2.813 86.69297569999999 12.037 97.31620910000001 3.744 157.41392530000002 2.881 91.84932800000001 2.697 110.36482219999999 2.708 73.05163079999998 2.824 61.6071367 1.001 81.43525340000001 2.761 66.94916380000001 1.911)
Error minima by case: (9.168 1 28.0 2 12.1284 9 26.4383 9 25.7076 2 0.0725 2 47.5734 2 24.9243 11 0.0568 8 76.0304 1 23.4565 1 15.4508 1 0.0 0 2.0757 9 29.7163 8 30.0665 1 2.1978 9 22.3408 2 82.0544 1 9.832 1 3.4571 1 9.0 1 0.0 0 13.6937 1 3.0 1)
Average genome size in population (length): 21.036
Average program size in population (points): 22.036
Average percent parens in population: 0.047
Minimum age in population: 148.6932383847428
Maximum age in population: 153.5084064158441
Average age in population: 151.6664166627316
Median age in population: 151.7076940254263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 78695831
--- Timings ---
Current time: 1529616090339 milliseconds
Total Time:         320.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.2 seconds, 46.9%
Fitness Testing:    134.2 seconds, 41.9%
Report:              35.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc integer_dup print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 16
Size: 17
Percent parens: 0.059
--- Population Statistics ---
Average total errors in population: 2482.598914399999
Median total errors in population: 1294.0
Error averages by case: (87.9998915 1.793 80.1184312 3.667 95.10377989999999 12.025 83.7158921 12.023 135.81857760000003 2.852 100.42573700000001 2.851 111.07588970000002 2.682 143.24644260000002 13.023 137.81142470000003 12.011 126.72277669999995 2.733 80.3659773 2.627 80.2406535 2.676 51.37914960000001 1.738 117.96166750000002 10.208 90.5320185 12.957 103.7623661 2.755 75.3427997 12.025 86.15409320000002 3.661 147.40022670000002 2.797 80.09126889999999 2.617 98.68842799999999 2.625 61.4939683 2.745 50.21177409999999 0.93 71.00021089999998 2.67 55.402469100000005 1.842)
Error minima by case: (37.0 1 28.0 2 12.1871 9 17.8767 8 87.0 2 50.0 2 9.3184 2 1.5302 11 0.0568 8 79.0 1 4.2885 1 12.2942 1 0.0 0 15.9125 10 17.4327 9 54.0 1 2.1978 9 6.5958 2 100.0 1 9.832 1 3.4571 1 9.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 21.144
Average program size in population (points): 22.144
Average percent parens in population: 0.047
Minimum age in population: 149.9879195117701
Maximum age in population: 155.077992002169
Average age in population: 153.176553001234
Median age in population: 153.2150276007635
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 79224456
--- Timings ---
Current time: 1529616093132 milliseconds
Total Time:         323.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.7 seconds, 46.9%
Fitness Testing:    135.3 seconds, 41.9%
Report:              36.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_div integer_mod integer_yankdup in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2332.239631099999
Median total errors in population: 1294.0
Error averages by case: (82.23285179999999 1.734 74.0207193 3.6 89.32679479999999 12.023 78.2509998 12.023 130.3381996 2.78 94.7226829 2.782 104.7663466 2.637 136.78998009999998 13.017 132.5260491 12.019 121.58510889999998 2.668 74.0285028 2.582 73.83691489999998 2.619 45.03778850000002 1.68 111.3582956 10.195 84.8769394 12.957 98.0600113 2.693 69.4281588 12.023 79.88155059999998 3.611 141.9651485 2.728 73.426051 2.566 92.1190221 2.581 56.1062567 2.688 44.30802569999999 0.862 64.34738449999998 2.624 49.43784780000001 1.77)
Error minima by case: (10.168 1 29.0 2 11.1871 9 17.8767 9 24.7076 2 0.9275 2 48.5734 2 1.5302 10 0.0386 7 75.0304 1 22.4565 1 14.4508 1 0.0 0 14.9125 9 17.4327 10 29.0665 2 0.1162 7 21.3408 2 81.0544 1 8.832 1 2.4571 1 9.0 1 0.0 0 14.6937 2 4.0 1)
Average genome size in population (length): 21.026
Average program size in population (points): 22.026
Average percent parens in population: 0.047
Minimum age in population: 151.7904692309369
Maximum age in population: 156.6867311967714
Average age in population: 154.6917902982911
Median age in population: 154.7609679411387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.02
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 79750131
--- Timings ---
Current time: 1529616095996 milliseconds
Total Time:         326.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.2 seconds, 47.0%
Fitness Testing:    136.4 seconds, 41.9%
Report:              36.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 2249.7021442999985
Median total errors in population: 1294.0
Error averages by case: (79.00139920000001 1.728 72.81632890000002 3.612 85.39646679999997 12.012 71.99658939999999 12.017 127.52119940000007 2.776 91.61005950000003 2.786 100.79165470000002 2.645 134.69937729999995 13.007 128.80225440000007 12.015 115.51813689999994 2.662 72.5131987 2.609 72.25506240000001 2.634 43.61045410000002 1.686 108.85763400000006 10.184 79.0403646 12.948 94.18859859999998 2.695 64.56015770000002 12.022 78.42743190000003 3.608 137.7189815000001 2.732 71.49145870000002 2.576 90.1719855 2.601 53.031119700000005 2.692 40.94170039999998 0.864 59.38988899999996 2.626 45.84064100000001 1.773)
Error minima by case: (38.0 1 28.0 2 10.1871 9 9.315 10 88.0 2 51.0 2 62.0 2 2.5302 10 0.0568 8 80.0 1 29.0 1 29.0 1 0.0 0 13.6312 8 5.149 7 55.0 1 0.1162 7 35.0 2 101.0 2 7.832 2 1.4571 2 10.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 21.152
Average program size in population (points): 22.152
Average percent parens in population: 0.047
Minimum age in population: 153.5016319264962
Maximum age in population: 158.079142477125
Average age in population: 156.1781477925067
Median age in population: 156.249736347417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.027
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 80278956
--- Timings ---
Current time: 1529616098859 milliseconds
Total Time:         328.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.6 seconds, 47.0%
Fitness Testing:    137.6 seconds, 41.8%
Report:              36.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction integer_shove} {:instruction float_yank} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 integer_shove float_yank in1 float_sub float_inc in1 tagged_500 float_inc integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2630.934747099999
Median total errors in population: 1294.0
Error averages by case: (95.16166240000001 1.905 88.0913725 3.755 101.98029519999999 12.028 85.10346150000001 12.025 142.72176700000003 2.964 107.51999580000002 2.96 113.12037830000001 2.781 149.8885445 13.033 144.91938830000004 12.024 129.06238989999994 2.834 87.8288977 2.733 87.59163100000002 2.78 59.44441920000003 1.841 124.22100080000001 10.238 92.11288189999999 12.949 109.51869949999995 2.863 79.5769048 12.021 93.63323080000002 3.762 151.44100160000005 2.907 87.20407269999997 2.707 105.73718639999998 2.728 69.67425550000002 2.86 57.85752279999999 1.067 72.29811519999998 2.753 62.761671799999995 1.946)
Error minima by case: (37.0 1 29.0 2 12.1871 9 17.8767 9 87.0 2 50.0 2 63.0 2 1.5302 10 0.0386 7 18.5296 1 30.0 1 30.0 1 0.0 0 15.9125 10 17.4327 10 54.0 2 2.1978 8 36.0 2 100.0 1 9.832 1 3.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.943
Average program size in population (points): 21.943
Average percent parens in population: 0.048
Minimum age in population: 154.8423537625555
Maximum age in population: 159.5207183431578
Average age in population: 157.6487172943101
Median age in population: 157.683940287195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 80802556
--- Timings ---
Current time: 1529616101957 milliseconds
Total Time:         331.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.1 seconds, 47.0%
Fitness Testing:    138.8 seconds, 41.8%
Report:              36.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2535.4953890999996
Median total errors in population: 1294.0
Error averages by case: (90.5852615 1.813 81.6835307 3.665 97.994131 12.042 85.25003849999999 12.037 138.18945310000004 2.866 102.95670250000003 2.871 112.93239700000002 2.684 145.22416099999998 13.025 140.77639210000004 12.025 127.33186079999997 2.741 82.10409270000001 2.631 82.0057578 2.677 53.044078100000014 1.732 119.87556740000002 10.213 92.6594104 12.967 106.20431779999998 2.771 77.78627499999999 12.027 87.8725782 3.668 149.48524400000002 2.821 81.99653359999999 2.613 100.6425829 2.631 64.45914060000001 2.768 52.89384199999999 0.948 72.63660929999998 2.667 58.14243110000001 1.86)
Error minima by case: (37.0 1 29.0 2 11.1871 10 25.4383 10 87.0 2 50.0 2 63.0 2 44.3127 10 0.0568 9 79.0 1 30.0 1 30.0 1 0.0 0 35.8751 10 28.7163 11 54.0 2 0.1162 7 36.0 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 21.07
Average program size in population (points): 22.07
Average percent parens in population: 0.048
Minimum age in population: 155.8423537625555
Maximum age in population: 161.0500095944659
Average age in population: 159.1336255409116
Median age in population: 159.2180731785676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.016
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 81329406
--- Timings ---
Current time: 1529616104802 milliseconds
Total Time:         334.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.5 seconds, 47.1%
Fitness Testing:    139.9 seconds, 41.8%
Report:              37.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (integer_min tagged_500 float_inc float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 2775.0196791999997
Median total errors in population: 1294.0
Error averages by case: (100.2843383 1.94 93.4946275 3.809 107.43265529999998 12.043 91.82438319999999 12.027 147.41616000000002 2.999 112.53481630000003 2.989 119.53594730000003 2.828 155.91369899999995 13.049 149.6364589 12.021 134.61134499999997 2.883 93.83890830000001 2.774 93.72070880000003 2.829 65.19793890000003 1.902 130.46130350000004 10.246 98.70375659999999 12.958 114.9485105 2.904 85.73756259999998 12.017 99.53498720000002 3.816 156.75793740000006 2.951 93.55510849999999 2.751 111.9062075 2.767 74.48641469999997 2.903 62.99987489999998 1.103 79.04763309999997 2.804 68.13339589999998 1.992)
Error minima by case: (37.0 1 29.0 2 12.1871 9 26.4383 8 87.0 2 50.0 2 63.0 2 45.2983 10 0.0386 7 79.0 1 30.0 1 30.0 1 0.0 0 42.4481 10 28.756 9 54.0 2 1.1162 8 36.0 2 100.0 1 9.1719 1 3.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.95
Average program size in population (points): 21.95
Average percent parens in population: 0.048
Minimum age in population: 158.0309857719829
Maximum age in population: 162.6241475857128
Average age in population: 160.642560200939
Median age in population: 160.6551586189741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 81853256
--- Timings ---
Current time: 1529616107756 milliseconds
Total Time:         337.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.1 seconds, 47.1%
Fitness Testing:    141.0 seconds, 41.8%
Report:              37.5 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction integer_shove} {:instruction in2} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_inc} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc integer_shove in2 float_inc float_sub integer_dup_items float_flush float_flush in1 float_sub float_inc integer_div integer_yank integer_inc float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2613.8965463999994
Median total errors in population: 1294.0
Error averages by case: (93.81647740000002 1.884 86.17809480000001 3.743 100.84154369999997 12.035 87.09153069999999 12.028 141.33117330000002 2.938 106.16735680000002 2.938 114.40704140000003 2.765 148.6974529 13.036 143.3631079 12.014 130.0661999 2.819 86.2976903 2.708 86.15760780000001 2.754 57.60299310000001 1.827 123.23718890000005 10.229 93.85160569999998 12.96 108.9442049 2.84 79.96925499999999 12.019 92.05762810000003 3.746 151.54276390000007 2.886 85.9452767 2.691 104.4068578 2.71 67.9875191 2.833 56.283312999999985 1.033 74.16745139999996 2.75 61.36621190000001 1.933)
Error minima by case: (37.0 1 28.0 2 12.1871 9 26.4383 9 87.0 2 50.0 2 3.8959 2 47.2349 10 0.0386 7 20.5335 1 1.134 1 6.8716 1 0.0 0 42.4563 9 29.7163 9 37.4613 1 0.1162 7 12.0184 2 71.4854 1 9.832 1 3.4571 1 9.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.696
Average program size in population (points): 21.696
Average percent parens in population: 0.049
Minimum age in population: 159.6678612960551
Maximum age in population: 164.1846064439356
Average age in population: 162.1037015061881
Median age in population: 162.1518092217037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 82370706
--- Timings ---
Current time: 1529616110598 milliseconds
Total Time:         340.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.5 seconds, 47.1%
Fitness Testing:    142.1 seconds, 41.7%
Report:              37.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_mod} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult float_mod in1 float_flush in1 float_sub integer_dup_items float_flush integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2824.8312446999994
Median total errors in population: 1294.0
Error averages by case: (102.90830389999999 1.916 95.2517834 3.804 110.4660256 12.052 92.873201 12.039 149.82432640000002 2.97 115.10331530000002 2.97 120.52793370000002 2.814 157.79612480000003 13.054 152.841493 12.035 135.58576899999997 2.855 95.67147390000001 2.764 95.5688075 2.82 67.03302280000003 1.886 132.16402000000002 10.25 99.906973 12.971 117.30328329999998 2.875 87.9577776 12.034 101.34622620000002 3.801 158.50238010000007 2.926 95.51415589999998 2.736 113.8722737 2.76 77.0507413 2.873 65.71838149999999 1.068 80.00916679999996 2.795 70.996285 1.97)
Error minima by case: (37.0 1 30.0 2 10.1871 9 24.4383 9 87.0 2 50.0 2 64.0 2 45.2349 12 0.0386 7 79.0 1 31.0 2 31.0 2 0.0 0 40.4563 10 27.7163 11 54.0 2 0.1978 9 37.0 2 100.0 1 7.832 1 1.4571 1 9.0 1 0.0 0 22.0 2 5.0 1)
Average genome size in population (length): 20.225
Average program size in population (points): 21.225
Average percent parens in population: 0.050
Minimum age in population: 161.028107466291
Maximum age in population: 165.5754638258805
Average age in population: 163.5823914488216
Median age in population: 163.620614654069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.02
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 82876381
--- Timings ---
Current time: 1529616113491 milliseconds
Total Time:         343.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.9 seconds, 47.2%
Fitness Testing:    143.2 seconds, 41.7%
Report:              38.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_max} {:instruction float_mult} {:instruction integer_dup_times} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_mult} {:instruction float_inc} {:instruction 24} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_max float_mult integer_dup_times in1 tagged_500 float_inc float_yank integer_dup_items float_flush in1 float_mult float_inc 24 float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2559.2736690999996
Median total errors in population: 1294.0
Error averages by case: (91.56038660000002 1.801 84.84579710000001 3.675 99.01454550000001 12.032 82.96384940000002 12.026 139.03014140000002 2.845 103.9185726 2.846 111.5416492 2.703 147.9066791 13.02 142.2346386 12.02 125.82458329999999 2.731 85.1276033 2.654 84.98578199999999 2.701 56.337496300000005 1.757 122.30117359999997 10.211 90.20897669999997 12.953 106.48636399999998 2.752 77.28499199999999 12.018 90.84506560000001 3.689 148.84228680000004 2.792 85.06713439999999 2.641 103.64457070000002 2.657 65.4566207 2.743 53.93089270000001 0.925 70.0417966 2.689 59.1600709 1.831)
Error minima by case: (34.0368 1 29.0 2 11.1871 9 17.8767 9 16.5251 2 45.9175 2 47.154 2 0.6525 10 0.0568 9 67.4005 1 30.0 1 30.0 1 0.0 0 14.9486 10 16.6791 10 34.4346 2 0.1162 7 26.8783 2 91.0583 1 8.832 1 2.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.257
Average program size in population (points): 21.257
Average percent parens in population: 0.050
Minimum age in population: 162.4041875475298
Maximum age in population: 167.1656791587659
Average age in population: 165.0958905937595
Median age in population: 165.1070144478583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.023
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 83382881
--- Timings ---
Current time: 1529616116390 milliseconds
Total Time:         346.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.3 seconds, 47.2%
Fitness Testing:    144.5 seconds, 41.7%
Report:              38.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_div} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction print_float})
Best program: (float_max float_mult float_inc float_sub integer_dup_items float_flush integer_dup_items float_div in1 float_sub float_inc float_mult integer_yank float_mod float_inc float_inc integer_rot print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 2814.8242722999994
Median total errors in population: 1294.0
Error averages by case: (102.10875120000001 1.918 94.62111600000001 3.8 109.49008749999997 12.053 93.8209451 12.038 149.1181788 2.973 114.3263545 2.982 121.18828250000001 2.813 156.73384730000006 13.044 151.930912 12.026 136.4759296 2.86 94.88358500000001 2.757 94.7651912 2.818 66.3496267 1.88 131.1738129000001 10.247 100.71745039999999 12.976 116.94401429999999 2.878 87.95875769999999 12.029 100.57443010000001 3.799 158.64066560000003 2.931 94.6752432 2.74 113.03821649999999 2.755 76.3088445 2.866 64.87689719999999 1.071 80.97877119999998 2.802 70.09736129999999 1.971)
Error minima by case: (37.0 1 29.0 2 11.1871 9 18.6366 9 87.0 2 50.0 2 63.0 2 0.5328 9 0.0386 7 79.0 1 30.0 1 30.0 1 0.0 0 6.724 9 17.1537 10 54.0 2 1.1978 9 36.0 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.174
Average program size in population (points): 21.174
Average percent parens in population: 0.051
Minimum age in population: 164.0875112062001
Maximum age in population: 168.6504962132039
Average age in population: 166.6103995056558
Median age in population: 166.651352098584
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.022
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 83887256
--- Timings ---
Current time: 1529616119238 milliseconds
Total Time:         349.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.8 seconds, 47.2%
Fitness Testing:    145.6 seconds, 41.7%
Report:              38.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_yank} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_inc} {:instruction in1} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_shove} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult float_yank in1 tagged_500 float_inc float_sub integer_dup_items float_cos float_inc in1 integer_dup_items float_flush in1 float_shove float_inc float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2908.774359799999
Median total errors in population: 1294.0
Error averages by case: (107.0156109 2.02 98.1397598 3.858 114.1445788 12.042 96.01923419999997 12.034 153.77961800000003 3.085 119.15622930000002 3.073 123.62475620000001 2.874 160.04076720000003 13.037 156.18693779999998 12.02 138.62400420000003 2.949 98.3599248 2.813 98.21412 2.87 70.05335649999999 1.944 134.66559180000002 10.262 103.1578608 12.95 121.09742469999998 2.959 91.67819449999999 12.023 104.02099830000002 3.843 162.10712240000004 3.035 98.10876349999998 2.796 116.37344350000001 2.822 81.53116939999998 2.967 70.11861519999998 1.195 82.97227439999998 2.859 75.17200359999998 2.082)
Error minima by case: (11.168 1 28.0 2 10.1871 10 16.8767 9 23.7076 2 1.9275 2 49.5734 2 0.5302 10 0.0462 8 63.9062 1 21.4565 1 13.4508 1 0.0 0 16.9125 10 16.4327 10 28.0665 1 0.1978 9 20.3408 2 80.0544 1 7.832 1 1.4571 1 9.0 1 0.0 0 15.6937 1 3.0 1)
Average genome size in population (length): 20.159
Average program size in population (points): 21.159
Average percent parens in population: 0.051
Minimum age in population: 165.3521934486545
Maximum age in population: 170.1694077029819
Average age in population: 168.0386269657422
Median age in population: 168.0711547205163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.024
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 84391231
--- Timings ---
Current time: 1529616122029 milliseconds
Total Time:         352.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.2 seconds, 47.2%
Fitness Testing:    146.7 seconds, 41.7%
Report:              38.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_sub} {:instruction float_div} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (float_mult integer_dup_items float_inc float_sub float_div tagged_500 float_inc float_sub float_flush in1 float_sub float_inc float_mult float_inc float_inc integer_flush print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 3135.5722486999994
Median total errors in population: 1294.0
Error averages by case: (115.32239469999999 2.047 107.53171449999999 3.922 122.86942920000001 12.059 105.34481520000001 12.044 161.5563803 3.118 127.3374257 3.115 132.66964449999998 2.94 169.6821438 13.057 164.75239100000002 12.012 147.51602430000003 3.007 108.0587061 2.873 107.98252719999998 2.945 79.74954050000001 2.014 144.4496776 10.26 112.27633209999998 12.958 129.42966009999998 3.014 100.5131325 12.007 113.643141 3.93 170.06620350000003 3.087 108.20490779999999 2.863 126.38401089999999 2.867 89.7665741 3.019 78.5610097 1.22 92.6903803 2.927 83.80108210000002 2.108)
Error minima by case: (37.0 1 28.0 2 11.1871 10 25.4383 8 87.0 2 50.0 2 62.0 2 45.434 11 0.0568 8 79.0 1 29.0 1 29.0 1 0.0 0 40.5014 9 28.7163 7 54.0 1 1.1978 9 35.0 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.404
Average program size in population (points): 21.404
Average percent parens in population: 0.050
Minimum age in population: 167.1267920522008
Maximum age in population: 171.525386185874
Average age in population: 169.5801333804091
Median age in population: 169.621733010082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 84901381
--- Timings ---
Current time: 1529616124857 milliseconds
Total Time:         354.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.7 seconds, 47.3%
Fitness Testing:    147.8 seconds, 41.7%
Report:              39.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_mult} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction tagged_237} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (in1 integer_mult float_flush in1 float_sub float_inc float_mult integer_yank integer_dup float_mod float_sub integer_dup_items float_flush in1 float_sub float_inc float_mult integer_yank tagged_237 float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 2766.988246799999
Median total errors in population: 1294.0
Error averages by case: (99.68972020000001 1.864 91.9505336 3.727 107.15980909999999 12.046 93.54367779999998 12.037 146.9690393 2.923 111.9773572 2.919 120.21497610000002 2.746 154.9936605 13.043 150.38426640000003 12.019 136.3419735 2.802 92.33417050000001 2.687 92.19700500000002 2.742 63.704176100000005 1.814 129.5204329 10.229 100.5101909 12.967 114.59555170000002 2.825 86.41398099999998 12.026 98.14031150000001 3.732 157.19099860000003 2.875 92.3532664 2.68 111.10800049999999 2.686 73.94096830000001 2.81 62.42799909999999 1.004 79.91166079999998 2.741 67.5565198 1.914)
Error minima by case: (37.0 1 29.0 2 12.1871 9 11.6169 8 87.0 2 50.0 2 63.0 2 47.306 10 0.0568 8 79.0 1 30.0 1 30.0 1 0.0 0 42.1594 10 29.7163 8 54.0 2 2.1978 9 36.0 2 100.0 1 9.832 1 3.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.505
Average program size in population (points): 21.505
Average percent parens in population: 0.050
Minimum age in population: 168.1267920522008
Maximum age in population: 172.9429319400127
Average age in population: 171.045421290213
Median age in population: 171.0833934841263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 85414006
--- Timings ---
Current time: 1529616127790 milliseconds
Total Time:         357.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.0 seconds, 47.3%
Fitness Testing:    149.0 seconds, 41.7%
Report:              39.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_rot} {:instruction float_yank} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction integer_inc} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max integer_rot float_yank in1 float_sub float_inc in1 tagged_500 float_inc float_sub integer_dup_items float_flush in1 integer_inc float_inc float_mult integer_yank integer_dup float_mod float_mult integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 2928.1945211999996
Median total errors in population: 1294.0
Error averages by case: (106.692169 1.981 98.76514850000001 3.807 114.334696 12.052 96.98492009999998 12.046 154.2464024 3.032 119.05710160000001 3.026 125.4172314 2.831 161.78998040000002 13.043 157.9979812 12.038 139.54607989999997 2.906 99.2763726 2.772 99.26734220000002 2.834 70.8517016 1.899 136.24777620000003 10.255 104.00399080000001 12.956 120.904122 2.923 92.0173291 12.029 104.97259500000001 3.809 162.1051361 2.985 99.70412079999998 2.765 118.13539370000001 2.767 82.06073389999999 2.925 70.4153095 1.135 84.5774909 2.824 75.1533963 2.03)
Error minima by case: (9.168 1 28.0 2 9.5286 9 8.315 9 25.7076 2 0.0725 2 47.5734 2 47.2349 10 0.0386 7 76.0304 1 6.9994 1 15.4508 1 0.0 0 12.6312 8 4.149 10 30.0665 1 0.1162 7 22.3408 2 68.408 1 7.1736 1 0.7987 1 9.0 1 0.0 0 13.6937 1 3.0 1)
Average genome size in population (length): 20.431
Average program size in population (points): 21.431
Average percent parens in population: 0.050
Minimum age in population: 169.7235119046449
Maximum age in population: 174.5327698460224
Average age in population: 172.5419773231637
Median age in population: 172.5643183369645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 85924831
--- Timings ---
Current time: 1529616130537 milliseconds
Total Time:         360.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.4 seconds, 47.3%
Fitness Testing:    150.1 seconds, 41.6%
Report:              39.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_inc integer_min integer_dup_items float_flush in1 float_flush in1 float_sub float_inc float_mult integer_yank integer_dup integer_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2767.5154980999996
Median total errors in population: 1294.0
Error averages by case: (100.2569112 1.884 92.4574344 3.765 107.76525899999999 12.05 91.92399309999998 12.043 147.3291465 2.939 112.47731940000003 2.925 119.19358530000001 2.782 155.1624196 13.041 150.572451 12.02 134.70639 2.832 92.7621536 2.727 92.63453200000001 2.781 64.17834640000001 1.844 129.6271509 10.237 98.821383 12.961 115.01667139999998 2.836 86.0756405 12.025 98.4572783 3.762 156.83536940000002 2.899 92.82169679999998 2.707 111.30563949999998 2.723 74.48816070000001 2.839 63.03680069999999 1.032 78.98042609999999 2.775 68.2653393 1.935)
Error minima by case: (10.168 1 28.0 2 12.1871 9 17.5964 9 24.7076 2 0.9275 2 3.8348 2 1.9104 8 0.0386 7 75.0304 1 22.4565 1 14.4508 1 0.0 0 14.9125 10 16.2859 10 29.0665 1 2.1978 9 21.3408 2 81.0544 1 9.832 1 3.1748 1 9.0 1 0.0 0 14.6937 1 3.0 1)
Average genome size in population (length): 20.544
Average program size in population (points): 21.544
Average percent parens in population: 0.050
Minimum age in population: 170.7569946000898
Maximum age in population: 176.340225958971
Average age in population: 173.9865935708301
Median age in population: 174.026567202255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 86438456
--- Timings ---
Current time: 1529616133363 milliseconds
Total Time:         363.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.8 seconds, 47.3%
Fitness Testing:    151.2 seconds, 41.6%
Report:              40.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction integer_min} {:instruction float_min} {:instruction float_pop} {:instruction in1} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_mod} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max float_mult float_max float_mult integer_dup_items in1 tagged_500 float_max float_mult integer_dup_items in1 float_yankdup float_mult integer_dup_items in1 tagged_500 float_inc integer_min float_min float_pop in1 integer_dup_times float_inc float_mult integer_yank integer_dup integer_dup float_mod float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2637.1179844999992
Median total errors in population: 1294.0
Error averages by case: (95.24127410000003 1.834 87.38307730000001 3.711 102.82766449999997 12.045 85.94878929999996 12.035 142.56084630000004 2.879 107.56649190000003 2.882 113.79414280000002 2.735 150.66194620000002 13.035 145.57247470000001 12.039 128.62772529999995 2.766 87.8528653 2.686 87.74557200000002 2.733 58.93066480000002 1.788 124.88578320000002 10.219 93.11691339999999 12.967 109.9690304 2.783 80.5960758 12.031 93.57826600000003 3.719 151.78786600000007 2.836 87.85026039999997 2.666 106.3944991 2.689 69.16706149999999 2.791 57.69369969999999 0.963 72.95567579999997 2.713 62.99531870000001 1.869)
Error minima by case: (38.0 1 28.0 2 10.1871 9 24.4383 9 88.0 2 51.0 2 62.0 2 33.4604 10 0.0568 9 80.0 1 29.0 1 29.0 1 0.0 0 39.7302 9 27.7163 10 55.0 1 0.1978 9 35.0 2 101.0 2 7.832 2 1.4571 2 10.0 1 0.0 0 20.0 1 3.0 1)
Average genome size in population (length): 20.331
Average program size in population (points): 21.331
Average percent parens in population: 0.050
Minimum age in population: 171.9385797267018
Maximum age in population: 177.5419157291158
Average age in population: 175.426144557172
Median age in population: 175.4879466631725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 86946781
--- Timings ---
Current time: 1529616136377 milliseconds
Total Time:         366.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.4 seconds, 47.3%
Fitness Testing:    152.3 seconds, 41.6%
Report:              40.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction integer_min} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_inc} {:instruction in1} {:instruction tagged_500} {:instruction float_inc} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction float_mult} {:instruction integer_min} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_max integer_min tagged_500 float_inc float_sub integer_dup_items float_sub float_inc in1 tagged_500 float_inc float_sub integer_stackdepth float_flush in1 float_sub float_inc float_mult float_inc float_flush in1 float_sub float_inc float_mult integer_min integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2698.9300051999994
Median total errors in population: 1294.0
Error averages by case: (97.50147420000002 1.903 89.6629665 3.757 104.61029079999999 12.035 89.55877389999998 12.027 144.80525990000004 2.957 109.7923123 2.962 117.248554 2.777 152.30535780000002 13.036 147.0711319 12.005 131.12243099999998 2.829 89.9683802 2.731 89.8502914 2.779 61.233489900000016 1.85 127.04728840000001 10.218 97.1232833 12.954 112.45807069999998 2.86 83.66618449999999 12.014 95.70344370000002 3.761 154.92597570000007 2.911 89.778804 2.715 108.22875520000001 2.721 71.64937489999998 2.861 60.095516899999986 1.054 75.83957659999997 2.761 65.25001750000001 1.955)
Error minima by case: (38.0 1 28.0 2 12.1871 9 18.8767 9 88.0 2 51.0 2 32.215 2 2.5302 11 0.0568 8 80.0 1 29.0 1 29.0 1 0.0 0 14.9125 10 18.4327 8 55.0 1 2.1978 9 35.0 2 101.0 2 9.832 2 3.4571 2 10.0 1 0.0 0 17.9053 1 3.0 1)
Average genome size in population (length): 20.226
Average program size in population (points): 21.226
Average percent parens in population: 0.051
Minimum age in population: 173.8870913645411
Maximum age in population: 179.1069305002363
Average age in population: 176.8913501742815
Median age in population: 176.93815185472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.028
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 87452431
--- Timings ---
Current time: 1529616139156 milliseconds
Total Time:         369.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.8 seconds, 47.4%
Fitness Testing:    153.4 seconds, 41.6%
Report:              40.7 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 54482.0
Test mean error for best: 27.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -47.168006896 
Correct output: 128.1103036005 | Program output: 97.1103036005 
Correct output: 16.1870858409  | Program output: -32.8129141591
Correct output: 30.4383483902  | Program output: -6.5616516098 
Correct output: -152.2924220861 | Program output: -62.2924220861
Correct output: -103.9275419598 | Program output: -50.9275419598
Correct output: 84.4265849921  | Program output: 19.4265849921 
Correct output: -46.2348789269 | Program output: 53.7651210731 
Correct output: 2.9432498261   | Program output: -92.0567501739
Correct output: -85.9696350649 | Program output: -3.9696350649 
Correct output: 89.456476621   | Program output: 57.456476621  
Correct output: 81.4508214106  | Program output: 49.4508214106 
Correct output: 85.1473908151  | Program output: 84.1473908151 
Correct output: -41.456273962  | Program output: 31.543726038  
Correct output: 33.7163443256  | Program output: -10.2836556744
Correct output: -81.9335355826 | Program output: -24.9335355826
Correct output: 6.1977863422   | Program output: -21.8022136578
Correct output: 100.3408492001 | Program output: 62.3408492001 
Correct output: -121.9455888507 | Program output: -18.9455888507
Correct output: 13.832049159   | Program output: 46.832049159  
Correct output: 7.4571495297   | Program output: 60.4571495297 
Correct output: -88.6126387117 | Program output: -76.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 11.3063370557 
Correct output: -33.4633610737 | Program output: -39.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_mult} {:instruction integer_dup_items} {:instruction in1} {:instruction tagged_500} {:instruction float_max} {:instruction float_mult} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction float_flush} {:instruction in1} {:instruction float_sub} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction print_float})
Best program: (float_max float_mult integer_dup_items in1 tagged_500 float_max float_mult integer_flush integer_dup_items float_flush in1 float_sub float_inc integer_dup_items integer_yank integer_dup float_mod float_inc float_inc integer_flush print_float)
Errors: [40.0 1 31.0 3 49.0 12 37.0 12 90.0 2 53.0 2 65.0 2 100.0 13 95.0 12 82.0 2 32.0 2 32.0 2 1.0 1 73.0 10 44.0 13 57.0 2 28.0 12 38.0 3 103.0 2 33.0 2 53.0 2 12.0 2 0.0 0 23.0 2 6.0 1]
Total: 1294.0
Mean: 25.88
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 2801.818693399999
Median total errors in population: 1294.0
Error averages by case: (101.2185699 1.884 93.47362400000002 3.74 108.58012329999998 12.063 94.69298339999999 12.06 148.283721 2.939 113.4549303 2.938 121.80469740000002 2.759 155.94315289999997 13.046 151.38504110000002 12.044 137.30599269999996 2.82 93.819642 2.69 93.69579949999999 2.752 65.1822171 1.824 130.65057120000003 10.247 101.42819480000001 12.98 116.29885340000001 2.833 87.79204319999998 12.04 99.511009 3.738 158.556745 2.891 93.8234924 2.687 112.3309164 2.702 75.4229951 2.824 63.96104049999999 1.026 81.8361066 2.75 69.1552312 1.934)
Error minima by case: (37.0 1 29.0 2 11.1871 11 15.8767 9 87.0 2 50.0 2 63.0 2 0.4698 11 0.6668 9 79.0 1 30.0 1 30.0 1 0.0 0 15.9125 10 15.4327 12 54.0 2 1.1162 8 36.0 2 100.0 1 8.832 1 2.4571 1 9.0 1 0.0 0 21.0 2 4.0 1)
Average genome size in population (length): 20.071
Average program size in population (points): 21.071
Average percent parens in population: 0.052
Minimum age in population: 174.8870913645411
Maximum age in population: 180.2613808214144
Average age in population: 178.3861924582363
Median age in population: 178.3932281291937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 87954206
--- Timings ---
Current time: 1529616141954 milliseconds
Total Time:         371.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.2 seconds, 47.4%
Fitness Testing:    154.5 seconds, 41.6%
Report:              41.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 3330.0
Test mean error for best: 1.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -85.168006896 
Correct output: 128.1103036005 | Program output: 130.1103036005
Correct output: 16.1870858409  | Program output: 18.1870858409 
Correct output: 30.4383483902  | Program output: 32.4383483902 
Correct output: -152.2924220861 | Program output: -150.2924220861
Correct output: -103.9275419598 | Program output: -101.9275419598
Correct output: 84.4265849921  | Program output: 86.4265849921 
Correct output: -46.2348789269 | Program output: -44.2348789269
Correct output: 2.9432498261   | Program output: 4.9432498261  
Correct output: -85.9696350649 | Program output: -83.9696350649
Correct output: 89.456476621   | Program output: 91.456476621  
Correct output: 81.4508214106  | Program output: 83.4508214106 
Correct output: 85.1473908151  | Program output: 87.1473908151 
Correct output: -41.456273962  | Program output: -39.456273962 
Correct output: 33.7163443256  | Program output: 35.7163443256 
Correct output: -81.9335355826 | Program output: -79.9335355826
Correct output: 6.1977863422   | Program output: 8.1977863422  
Correct output: 100.3408492001 | Program output: 102.3408492001
Correct output: -121.9455888507 | Program output: -119.9455888507
Correct output: 13.832049159   | Program output: 15.832049159  
Correct output: 7.4571495297   | Program output: 9.4571495297  
Correct output: -88.6126387117 | Program output: -86.6126387117
Correct output: -56.5251178866 | Program output: -54.5251178866
Correct output: 34.3063370557  | Program output: 36.3063370557 
Correct output: -33.4633610737 | Program output: -31.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_shove} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1]
Total: 80.0
Mean: 1.6
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2828.653804299999
Median total errors in population: 1294.0
Error averages by case: (102.97852530000002 1.947 95.11892300000001 3.799 110.34145739999998 12.032 93.3983593 12.028 149.87114040000003 3.001 115.16484150000001 2.995 121.2404163 2.816 157.75876499999995 13.041 152.54696779999998 12.015 135.9224917 2.887 95.5804031 2.756 95.4854598 2.811 66.94556530000001 1.878 132.2429004 10.249 100.66111730000002 12.956 117.47395179999998 2.897 88.29010620000001 12.014 101.2444307 3.792 158.8677982 2.96 95.52158410000001 2.737 113.8862582 2.76 77.2055617 2.901 65.8175265 1.108 80.87040649999999 2.805 71.0298468 2.004)
Error minima by case: (2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 0.0568 1 2.0 1 2.0 1 2.0 1 0.0 0 2.0 2 2.0 1 2.0 2 0.1978 1 2.0 1 2.0 1 2.0 1 1.4571 1 2.0 1 0.0 0 2.0 1 2.0 1)
Average genome size in population (length): 20.049
Average program size in population (points): 21.049
Average percent parens in population: 0.052
Minimum age in population: 177.3272308099965
Maximum age in population: 181.8651034226253
Average age in population: 179.8508493242396
Median age in population: 179.8849980523699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 88455431
--- Timings ---
Current time: 1529616144909 milliseconds
Total Time:         374.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.8 seconds, 47.4%
Fitness Testing:    155.6 seconds, 41.5%
Report:              41.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 3330.0
Test mean error for best: 1.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -85.168006896 
Correct output: 128.1103036005 | Program output: 130.1103036005
Correct output: 16.1870858409  | Program output: 18.1870858409 
Correct output: 30.4383483902  | Program output: 32.4383483902 
Correct output: -152.2924220861 | Program output: -150.2924220861
Correct output: -103.9275419598 | Program output: -101.9275419598
Correct output: 84.4265849921  | Program output: 86.4265849921 
Correct output: -46.2348789269 | Program output: -44.2348789269
Correct output: 2.9432498261   | Program output: 4.9432498261  
Correct output: -85.9696350649 | Program output: -83.9696350649
Correct output: 89.456476621   | Program output: 91.456476621  
Correct output: 81.4508214106  | Program output: 83.4508214106 
Correct output: 85.1473908151  | Program output: 87.1473908151 
Correct output: -41.456273962  | Program output: -39.456273962 
Correct output: 33.7163443256  | Program output: 35.7163443256 
Correct output: -81.9335355826 | Program output: -79.9335355826
Correct output: 6.1977863422   | Program output: 8.1977863422  
Correct output: 100.3408492001 | Program output: 102.3408492001
Correct output: -121.9455888507 | Program output: -119.9455888507
Correct output: 13.832049159   | Program output: 15.832049159  
Correct output: 7.4571495297   | Program output: 9.4571495297  
Correct output: -88.6126387117 | Program output: -86.6126387117
Correct output: -56.5251178866 | Program output: -54.5251178866
Correct output: 34.3063370557  | Program output: 36.3063370557 
Correct output: -33.4633610737 | Program output: -31.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_shove} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod float_inc float_inc float_mult print_float)
Errors: [2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1]
Total: 80.0
Mean: 1.6
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2496.993901099999
Median total errors in population: 1294.0
Error averages by case: (89.37045030000003 1.787 81.5615131 3.648 96.70435579999999 11.952 81.9444938 11.947 136.66668920000004 2.824 101.66091530000003 2.813 109.39800550000005 2.665 144.4875144 12.943 139.2142629 11.931 124.82041029999996 2.717 81.9537751 2.62 81.84050950000001 2.662 52.53189350000001 1.732 119.01371550000002 10.151 88.78062460000001 12.871 104.3075911 2.74 75.31495179999999 11.937 87.67270320000002 3.636 146.5642793 2.791 81.76857239999998 2.598 100.2449626 2.621 63.400348300000005 2.723 51.90131209999999 0.925 69.04644949999998 2.66 57.10760200000001 1.822)
Error minima by case: (2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 0.0386 1 2.0 1 2.0 1 2.0 1 0.0 0 2.0 2 2.0 1 2.0 1 0.1162 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 0.0 0 2.0 1 2.0 1)
Average genome size in population (length): 19.813
Average program size in population (points): 20.813
Average percent parens in population: 0.052
Minimum age in population: 178.4625630207826
Maximum age in population: 183.1266587341745
Average age in population: 181.2935429675443
Median age in population: 181.345416014273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 88950756
--- Timings ---
Current time: 1529616147658 milliseconds
Total Time:         377.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.2 seconds, 47.5%
Fitness Testing:    156.7 seconds, 41.5%
Report:              41.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 2153.0
Test mean error for best: 1.07650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -86.168006896 
Correct output: 128.1103036005 | Program output: 129.1103036005
Correct output: 16.1870858409  | Program output: 17.1870858409 
Correct output: 30.4383483902  | Program output: 31.4383483902 
Correct output: -152.2924220861 | Program output: -151.2924220861
Correct output: -103.9275419598 | Program output: -102.9275419598
Correct output: 84.4265849921  | Program output: 85.4265849921 
Correct output: -46.2348789269 | Program output: -45.2348789269
Correct output: 2.9432498261   | Program output: 3.9432498261  
Correct output: -85.9696350649 | Program output: -84.9696350649
Correct output: 89.456476621   | Program output: 90.456476621  
Correct output: 81.4508214106  | Program output: 82.4508214106 
Correct output: 85.1473908151  | Program output: 86.1473908151 
Correct output: -41.456273962  | Program output: -40.456273962 
Correct output: 33.7163443256  | Program output: 34.7163443256 
Correct output: -81.9335355826 | Program output: -80.9335355826
Correct output: 6.1977863422   | Program output: 7.1977863422  
Correct output: 100.3408492001 | Program output: 101.3408492001
Correct output: -121.9455888507 | Program output: -120.9455888507
Correct output: 13.832049159   | Program output: 14.832049159  
Correct output: 7.4571495297   | Program output: 8.4571495297  
Correct output: -88.6126387117 | Program output: -87.6126387117
Correct output: -56.5251178866 | Program output: -55.5251178866
Correct output: 34.3063370557  | Program output: 35.3063370557 
Correct output: -33.4633610737 | Program output: -32.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_shove} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_inc} {:instruction print_float})
Best program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod float_inc print_float)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 51.0
Mean: 1.02
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 2594.1382414999985
Median total errors in population: 1294.0
Error averages by case: (92.30154500000003 1.855 85.9748444 3.684 99.08672519999999 11.616 88.62964319999996 11.619 137.89185980000005 2.87 104.17422560000003 2.881 115.39756420000003 2.717 145.77706999999998 12.573 140.5978104 11.599 129.53902929999998 2.763 86.17579920000001 2.691 86.04046730000002 2.702 57.99043990000001 1.809 121.67509120000004 9.919 94.9006276 12.504 107.2637157 2.82 80.26194879999998 11.602 91.70066360000003 3.65 148.86881230000003 2.862 85.71811879999997 2.636 103.43569439999999 2.656 67.49600469999999 2.779 56.3286647 1.054 77.20391819999998 2.703 61.22395800000001 1.92)
Error minima by case: (1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0568 1 0.7485 1 1.0 1 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 0.1162 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0 0 1.0 1 1.0 1)
Average genome size in population (length): 19.219
Average program size in population (points): 20.219
Average percent parens in population: 0.053
Minimum age in population: 179.9422514149137
Maximum age in population: 184.7564608549847
Average age in population: 182.7676382864096
Median age in population: 182.7910443046532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.022
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 89431231
--- Timings ---
Current time: 1529616150447 milliseconds
Total Time:         380.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.6 seconds, 47.5%
Fitness Testing:    157.8 seconds, 41.5%
Report:              41.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 2153.0
Test mean error for best: 1.07650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -86.168006896 
Correct output: 128.1103036005 | Program output: 129.1103036005
Correct output: 16.1870858409  | Program output: 17.1870858409 
Correct output: 30.4383483902  | Program output: 31.4383483902 
Correct output: -152.2924220861 | Program output: -151.2924220861
Correct output: -103.9275419598 | Program output: -102.9275419598
Correct output: 84.4265849921  | Program output: 85.4265849921 
Correct output: -46.2348789269 | Program output: -45.2348789269
Correct output: 2.9432498261   | Program output: 3.9432498261  
Correct output: -85.9696350649 | Program output: -84.9696350649
Correct output: 89.456476621   | Program output: 90.456476621  
Correct output: 81.4508214106  | Program output: 82.4508214106 
Correct output: 85.1473908151  | Program output: 86.1473908151 
Correct output: -41.456273962  | Program output: -40.456273962 
Correct output: 33.7163443256  | Program output: 34.7163443256 
Correct output: -81.9335355826 | Program output: -80.9335355826
Correct output: 6.1977863422   | Program output: 7.1977863422  
Correct output: 100.3408492001 | Program output: 101.3408492001
Correct output: -121.9455888507 | Program output: -120.9455888507
Correct output: 13.832049159   | Program output: 14.832049159  
Correct output: 7.4571495297   | Program output: 8.4571495297  
Correct output: -88.6126387117 | Program output: -87.6126387117
Correct output: -56.5251178866 | Program output: -55.5251178866
Correct output: 34.3063370557  | Program output: 35.3063370557 
Correct output: -33.4633610737 | Program output: -32.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_shove} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_mult} {:instruction print_float})
Best program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod integer_max float_inc float_mult print_float)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 51.0
Mean: 1.02
Genome size: 14
Size: 15
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 2284.3922856
Median total errors in population: 1294.0
Error averages by case: (81.9476698 1.718 76.80973 3.389 88.61178749999999 9.637 77.8905252 9.633 118.49009790000002 2.555 91.5745064 2.545 99.8606751 2.424 125.01977889999998 10.402 121.63407670000002 9.616 110.249113 2.458 77.2324093 2.578 77.09628500000001 2.409 54.8434807 1.694 105.50038730000001 8.436 83.57320849999999 10.349 94.2708486 2.682 72.4616691 9.617 81.55330040000001 3.181 127.57220960000002 2.73 76.05309130000002 2.352 90.371463 2.368 61.8046444 2.46 53.971888699999994 1.071 67.38537039999999 2.419 58.108068800000005 1.783)
Error minima by case: (1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0568 1 1.0 1 1.0 1 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 0.1162 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0 0 1.0 1 1.0 1)
Average genome size in population (length): 18.126
Average program size in population (points): 19.126
Average percent parens in population: 0.056
Minimum age in population: 180.9422514149137
Maximum age in population: 186.2687887114929
Average age in population: 184.2036532890817
Median age in population: 184.236513963033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 174
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.024
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 89884381
--- Timings ---
Current time: 1529616153156 milliseconds
Total Time:         383.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.0 seconds, 47.5%
Fitness Testing:    158.9 seconds, 41.5%
Report:              42.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -87.168006896 
Correct output: 128.1103036005 | Program output: 128.1103036005
Correct output: 16.1870858409  | Program output: 16.1870858409 
Correct output: 30.4383483902  | Program output: 30.4383483902 
Correct output: -152.2924220861 | Program output: -152.2924220861
Correct output: -103.9275419598 | Program output: -103.9275419598
Correct output: 84.4265849921  | Program output: 84.4265849921 
Correct output: -46.2348789269 | Program output: -46.2348789269
Correct output: 2.9432498261   | Program output: 2.9432498261  
Correct output: -85.9696350649 | Program output: -85.9696350649
Correct output: 89.456476621   | Program output: 89.456476621  
Correct output: 81.4508214106  | Program output: 81.4508214106 
Correct output: 85.1473908151  | Program output: 85.1473908151 
Correct output: -41.456273962  | Program output: -41.456273962 
Correct output: 33.7163443256  | Program output: 33.7163443256 
Correct output: -81.9335355826 | Program output: -81.9335355826
Correct output: 6.1977863422   | Program output: 6.1977863422  
Correct output: 100.3408492001 | Program output: 100.3408492001
Correct output: -121.9455888507 | Program output: -121.9455888507
Correct output: 13.832049159   | Program output: 13.832049159  
Correct output: 7.4571495297   | Program output: 7.4571495297  
Correct output: -88.6126387117 | Program output: -88.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 34.3063370557 
Correct output: -33.4633610737 | Program output: -33.4633610737
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_cos} {:instruction integer_shove} {:instruction float_flush} {:instruction in1} {:instruction in2} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_mod} {:instruction float_mult} {:instruction print_float})
Best program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod float_mult print_float)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 12
Size: 13
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 1273.5624350000003
Median total errors in population: 80.0
Error averages by case: (47.794399599999984 1.66 47.4713033 2.735 47.852933599999986 3.458 45.390007799999985 3.456 56.81171459999999 1.945 50.343405499999996 1.941 51.734845199999995 1.849 57.11438599999998 3.662 55.92281299999999 3.433 54.11950249999999 1.864 46.695022800000004 2.56 46.378458999999985 1.816 41.840074100000024 1.668 52.38967960000001 3.856 46.8047172 3.621 50.2747118 2.575 43.72712829999999 3.434 47.81359040000001 2.039 58.5384701 2.608 45.383850900000006 1.813 48.799445399999996 1.839 43.5408073 1.848 41.13240349999999 1.647 43.11991429999998 1.824 41.6148492 1.803)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 15.02
Average program size in population (points): 16.02
Average percent parens in population: 0.064
Minimum age in population: 182.6642470150499
Maximum age in population: 187.8747573248409
Average age in population: 185.6582823051188
Median age in population: 185.7230967893458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 542
Genome diversity (% unique Plush genomes):	 0.281
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 542
Syntactic diversity (% unique Push programs):	 0.281
Total error diversity:				 0.03
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 90259881
--- Timings ---
Current time: 1529616155933 milliseconds
Total Time:         385.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.5 seconds, 47.5%
Fitness Testing:    160.0 seconds, 41.5%
Report:              42.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 125
Successful program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod float_mult print_float)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 13


Auto-simplifying with starting size: 13
step: 0
program: (float_cos integer_shove float_flush in1 in2 float_frominteger float_add integer_yank integer_dup float_mod float_mult print_float)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 13

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -87.168006896  | Program output: -87.168006896 
Correct output: 128.1103036005 | Program output: 128.1103036005
Correct output: 16.1870858409  | Program output: 16.1870858409 
Correct output: 30.4383483902  | Program output: 30.4383483902 
Correct output: -152.2924220861 | Program output: -152.2924220861
Correct output: -103.9275419598 | Program output: -103.9275419598
Correct output: 84.4265849921  | Program output: 84.4265849921 
Correct output: -46.2348789269 | Program output: -46.2348789269
Correct output: 2.9432498261   | Program output: 2.9432498261  
Correct output: -85.9696350649 | Program output: -85.9696350649
Correct output: 89.456476621   | Program output: 89.456476621  
Correct output: 81.4508214106  | Program output: 81.4508214106 
Correct output: 85.1473908151  | Program output: 85.1473908151 
Correct output: -41.456273962  | Program output: -41.456273962 
Correct output: 33.7163443256  | Program output: 33.7163443256 
Correct output: -81.9335355826 | Program output: -81.9335355826
Correct output: 6.1977863422   | Program output: 6.1977863422  
Correct output: 100.3408492001 | Program output: 100.3408492001
Correct output: -121.9455888507 | Program output: -121.9455888507
Correct output: 13.832049159   | Program output: 13.832049159  
Correct output: 7.4571495297   | Program output: 7.4571495297  
Correct output: -88.6126387117 | Program output: -88.6126387117
Correct output: -56.5251178866 | Program output: -56.5251178866
Correct output: 34.3063370557  | Program output: 34.3063370557 
Correct output: -33.4633610737 | Program output: -33.4633610737
;;******************************
