Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[20.242743324659557 -17] 3.242743324659557]
Train Case:   1 | Input/Output: [[-58.66726758726919 -51] -109.66726758726918]
Train Case:   2 | Input/Output: [[-0.3828405385542908 -97] -97.38284053855429]
Train Case:   3 | Input/Output: [[8.640119291222547 84] 92.64011929122255]
Train Case:   4 | Input/Output: [[-6.842465199605812 -44] -50.84246519960581]
Train Case:   5 | Input/Output: [[13.595310401532302 -34] -20.404689598467698]
Train Case:   6 | Input/Output: [[-62.371542466426554 -52] -114.37154246642655]
Train Case:   7 | Input/Output: [[-58.374392695766495 -86] -144.3743926957665]
Train Case:   8 | Input/Output: [[-9.72971871601871 60] 50.27028128398129]
Train Case:   9 | Input/Output: [[-32.53208600737831 9] -23.53208600737831]
Train Case:  10 | Input/Output: [[-48.294577662649594 45] -3.294577662649594]
Train Case:  11 | Input/Output: [[76.22711848489118 58] 134.22711848489118]
Train Case:  12 | Input/Output: [[-52.0202199253381 52] -0.0202199253380968]
Train Case:  13 | Input/Output: [[26.147714425996554 -4] 22.147714425996554]
Train Case:  14 | Input/Output: [[68.18213021715337 70] 138.18213021715337]
Train Case:  15 | Input/Output: [[71.13051748852158 33] 104.13051748852158]
Train Case:  16 | Input/Output: [[-81.42780732915524 -79] -160.42780732915526]
Train Case:  17 | Input/Output: [[75.21507168679008 63] 138.21507168679008]
Train Case:  18 | Input/Output: [[-63.335901513314965 -8] -71.33590151331497]
Train Case:  19 | Input/Output: [[-34.939689301807334 -87] -121.93968930180733]
Train Case:  20 | Input/Output: [[25.735858339265377 -11] 14.735858339265377]
Train Case:  21 | Input/Output: [[66.43505413197138 71] 137.43505413197138]
Train Case:  22 | Input/Output: [[75.28595328195598 30] 105.28595328195598]
Train Case:  23 | Input/Output: [[-76.26774044550947 -19] -95.26774044550947]
Train Case:  24 | Input/Output: [[5.328496178769157 51] 56.32849617876916]
Test Case:   0 | Input/Output: [[-79.36428940948039 -93] -172.3642894094804]
Test Case:   1 | Input/Output: [[-3.1242745083973347 55] 51.875725491602665]
Test Case:   2 | Input/Output: [[-43.46161021909798 -24] -67.46161021909798]
Test Case:   3 | Input/Output: [[4.59125702615961 33] 37.59125702615961]
Test Case:   4 | Input/Output: [[-21.69252709435763 -70] -91.69252709435763]
Test Case:   5 | Input/Output: [[-23.924697731911948 -84] -107.92469773191195]
Test Case:   6 | Input/Output: [[48.43920752351417 -21] 27.43920752351417]
Test Case:   7 | Input/Output: [[61.00902505839832 -29] 32.00902505839832]
Test Case:   8 | Input/Output: [[36.17382752729995 86] 122.17382752729995]
Test Case:   9 | Input/Output: [[-81.42204564988502 27] -54.42204564988502]
Test Case:  10 | Input/Output: [[7.700282336180649 67] 74.70028233618065]
Test Case:  11 | Input/Output: [[86.6281143810127 -22] 64.6281143810127]
Test Case:  12 | Input/Output: [[-14.312822672068975 32] 17.687177327931025]
Test Case:  13 | Input/Output: [[-36.37925232629953 26] -10.379252326299529]
Test Case:  14 | Input/Output: [[-70.91809462744072 -90] -160.91809462744072]
Test Case:  15 | Input/Output: [[70.73825068707859 -65] 5.73825068707859]
Test Case:  16 | Input/Output: [[-95.28515255370264 38] -57.285152553702645]
Test Case:  17 | Input/Output: [[90.83708547518643 99] 189.83708547518643]
Test Case:  18 | Input/Output: [[55.89644373016094 -15] 40.89644373016094]
Test Case:  19 | Input/Output: [[-55.95294405807885 0] -55.95294405807885]
Test Case:  20 | Input/Output: [[-78.3304953309303 -84] -162.33049533093032]
Test Case:  21 | Input/Output: [[21.129836317052693 42] 63.12983631705269]
Test Case:  22 | Input/Output: [[5.577251497188016 -6] -0.4227485028119844]
Test Case:  23 | Input/Output: [[-26.319721583017653 -5] -31.319721583017653]
Test Case:  24 | Input/Output: [[-28.028698486633743 19] -9.028698486633743]
Test Case:  25 | Input/Output: [[-16.309840318042816 -11] -27.309840318042816]
Test Case:  26 | Input/Output: [[9.792168788709631 39] 48.79216878870963]
Test Case:  27 | Input/Output: [[-54.170311368323794 -1] -55.170311368323794]
Test Case:  28 | Input/Output: [[-33.67314221641887 57] 23.326857783581133]
Test Case:  29 | Input/Output: [[-99.79236961533027 -25] -124.79236961533027]
Test Case:  30 | Input/Output: [[6.139444669849794 -63] -56.860555330150206]
Test Case:  31 | Input/Output: [[-15.097905432811089 97] 81.90209456718891]
Test Case:  32 | Input/Output: [[-23.837585674356234 -38] -61.837585674356234]
Test Case:  33 | Input/Output: [[-75.75690478643367 14] -61.756904786433665]
Test Case:  34 | Input/Output: [[43.56533203908543 79] 122.56533203908543]
Test Case:  35 | Input/Output: [[66.90510509430823 -19] 47.905105094308226]
Test Case:  36 | Input/Output: [[82.7511153126784 -5] 77.7511153126784]
Test Case:  37 | Input/Output: [[-49.582552454432324 1] -48.582552454432324]
Test Case:  38 | Input/Output: [[55.52525964957647 -20] 35.52525964957647]
Test Case:  39 | Input/Output: [[29.3701317025253 81] 110.3701317025253]
Test Case:  40 | Input/Output: [[-43.62533293853246 -85] -128.62533293853247]
Test Case:  41 | Input/Output: [[96.1289752320408 -28] 68.1289752320408]
Test Case:  42 | Input/Output: [[20.894948827864866 -100] -79.10505117213513]
Test Case:  43 | Input/Output: [[-97.3967834924149 3] -94.3967834924149]
Test Case:  44 | Input/Output: [[30.56291313082366 58] 88.56291313082366]
Test Case:  45 | Input/Output: [[62.3464144760801 -5] 57.3464144760801]
Test Case:  46 | Input/Output: [[-82.0627054509514 58] -24.0627054509514]
Test Case:  47 | Input/Output: [[-62.746849935276174 4] -58.746849935276174]
Test Case:  48 | Input/Output: [[-73.3136025353784 -10] -83.3136025353784]
Test Case:  49 | Input/Output: [[3.6466985873764344 -15] -11.353301412623566]
Test Case:  50 | Input/Output: [[58.59449222274728 -13] 45.59449222274728]
Test Case:  51 | Input/Output: [[78.79530575582083 -31] 47.795305755820834]
Test Case:  52 | Input/Output: [[-79.97425986855234 84] 4.025740131447662]
Test Case:  53 | Input/Output: [[-25.115342572926778 18] -7.115342572926778]
Test Case:  54 | Input/Output: [[53.01443691610575 77] 130.01443691610575]
Test Case:  55 | Input/Output: [[90.36559556373288 -16] 74.36559556373288]
Test Case:  56 | Input/Output: [[-53.81864283306241 31] -22.818642833062412]
Test Case:  57 | Input/Output: [[72.34913301286645 -88] -15.650866987133554]
Test Case:  58 | Input/Output: [[70.81433856568722 -79] -8.185661434312777]
Test Case:  59 | Input/Output: [[-67.23352127818231 34] -33.23352127818231]
Test Case:  60 | Input/Output: [[51.621731636383515 -24] 27.621731636383515]
Test Case:  61 | Input/Output: [[98.4527531282094 62] 160.4527531282094]
Test Case:  62 | Input/Output: [[-98.4323707954536 86] -12.432370795453593]
Test Case:  63 | Input/Output: [[90.53256007109414 -7] 83.53256007109414]
Test Case:  64 | Input/Output: [[30.29757490437757 -19] 11.29757490437757]
Test Case:  65 | Input/Output: [[79.88865091409315 -3] 76.88865091409315]
Test Case:  66 | Input/Output: [[11.28386667843482 43] 54.28386667843482]
Test Case:  67 | Input/Output: [[24.818582942666097 83] 107.8185829426661]
Test Case:  68 | Input/Output: [[23.080795129446614 70] 93.08079512944661]
Test Case:  69 | Input/Output: [[64.23368827039761 -93] -28.766311729602393]
Test Case:  70 | Input/Output: [[-85.48598355337545 -59] -144.48598355337543]
Test Case:  71 | Input/Output: [[-3.655388747666038 -28] -31.655388747666038]
Test Case:  72 | Input/Output: [[10.957649357766442 45] 55.95764935776644]
Test Case:  73 | Input/Output: [[79.20598702214286 5] 84.20598702214286]
Test Case:  74 | Input/Output: [[-83.8010453686309 -97] -180.8010453686309]
Test Case:  75 | Input/Output: [[50.54359205655422 35] 85.54359205655422]
Test Case:  76 | Input/Output: [[-50.85158148620958 84] 33.14841851379042]
Test Case:  77 | Input/Output: [[-92.14425150108936 -26] -118.14425150108936]
Test Case:  78 | Input/Output: [[-26.41604202575853 -1] -27.41604202575853]
Test Case:  79 | Input/Output: [[67.94024134884594 -96] -28.059758651154056]
Test Case:  80 | Input/Output: [[94.24849084201696 36] 130.24849084201696]
Test Case:  81 | Input/Output: [[-73.24624879449729 92] 18.75375120550271]
Test Case:  82 | Input/Output: [[-30.461867010088 96] 65.538132989912]
Test Case:  83 | Input/Output: [[60.25554995050345 -77] -16.74445004949655]
Test Case:  84 | Input/Output: [[43.28447253636725 -59] -15.715527463632753]
Test Case:  85 | Input/Output: [[67.69847470706117 4] 71.69847470706117]
Test Case:  86 | Input/Output: [[-77.88838590197781 25] -52.88838590197781]
Test Case:  87 | Input/Output: [[-62.71325722198562 -99] -161.71325722198563]
Test Case:  88 | Input/Output: [[-37.76849281197643 -55] -92.76849281197643]
Test Case:  89 | Input/Output: [[38.62844456309645 99] 137.62844456309645]
Test Case:  90 | Input/Output: [[-95.6514923424191 -92] -187.6514923424191]
Test Case:  91 | Input/Output: [[-21.830881183787525 64] 42.169118816212475]
Test Case:  92 | Input/Output: [[20.24691783308377 -78] -57.75308216691623]
Test Case:  93 | Input/Output: [[-23.30462706080195 -43] -66.30462706080195]
Test Case:  94 | Input/Output: [[-74.79496392793891 -97] -171.7949639279389]
Test Case:  95 | Input/Output: [[-35.285444820137386 -25] -60.285444820137386]
Test Case:  96 | Input/Output: [[77.76197808815414 54] 131.76197808815414]
Test Case:  97 | Input/Output: [[27.32131284158841 -68] -40.67868715841159]
Test Case:  98 | Input/Output: [[89.10795301679875 31] 120.10795301679875]
Test Case:  99 | Input/Output: [[46.33709279422021 -82] -35.66290720577979]
Test Case: 100 | Input/Output: [[19.18761037574859 38] 57.18761037574859]
Test Case: 101 | Input/Output: [[8.315267359656957 -71] -62.68473264034304]
Test Case: 102 | Input/Output: [[62.270219836572096 19] 81.2702198365721]
Test Case: 103 | Input/Output: [[27.87916844957185 21] 48.87916844957185]
Test Case: 104 | Input/Output: [[57.798463308182846 70] 127.79846330818285]
Test Case: 105 | Input/Output: [[0.18801548833233994 2] 2.18801548833234]
Test Case: 106 | Input/Output: [[81.41065453679761 78] 159.4106545367976]
Test Case: 107 | Input/Output: [[-94.28716801152407 66] -28.287168011524074]
Test Case: 108 | Input/Output: [[-95.60650292586543 89] -6.606502925865428]
Test Case: 109 | Input/Output: [[18.975691784774057 48] 66.97569178477406]
Test Case: 110 | Input/Output: [[53.07319868214066 0] 53.07319868214066]
Test Case: 111 | Input/Output: [[7.193125044115462 -2] 5.193125044115462]
Test Case: 112 | Input/Output: [[27.65107050441624 -12] 15.65107050441624]
Test Case: 113 | Input/Output: [[-6.629442595550358 -20] -26.62944259555036]
Test Case: 114 | Input/Output: [[-7.770437416171006 -87] -94.770437416171]
Test Case: 115 | Input/Output: [[-25.817388663901355 88] 62.182611336098645]
Test Case: 116 | Input/Output: [[98.15740740515838 -58] 40.15740740515838]
Test Case: 117 | Input/Output: [[-66.70263522616776 4] -62.70263522616776]
Test Case: 118 | Input/Output: [[5.6488358122862365 49] 54.64883581228624]
Test Case: 119 | Input/Output: [[9.202137142399508 29] 38.20213714239951]
Test Case: 120 | Input/Output: [[15.361933581074226 31] 46.361933581074226]
Test Case: 121 | Input/Output: [[-55.36552419236198 -33] -88.36552419236199]
Test Case: 122 | Input/Output: [[-78.65484616978007 -17] -95.65484616978007]
Test Case: 123 | Input/Output: [[84.48914565082356 -18] 66.48914565082356]
Test Case: 124 | Input/Output: [[-51.92766342449262 88] 36.07233657550738]
Test Case: 125 | Input/Output: [[96.83655749999076 12] 108.83655749999076]
Test Case: 126 | Input/Output: [[-95.36427620030703 -32] -127.36427620030703]
Test Case: 127 | Input/Output: [[-64.40399480446922 -47] -111.40399480446922]
Test Case: 128 | Input/Output: [[53.80871067933032 -79] -25.191289320669682]
Test Case: 129 | Input/Output: [[-31.294688887878692 -36] -67.29468888787869]
Test Case: 130 | Input/Output: [[93.97277569885017 10] 103.97277569885017]
Test Case: 131 | Input/Output: [[-19.739100762120998 73] 53.260899237879]
Test Case: 132 | Input/Output: [[-35.334622529291025 42] 6.665377470708975]
Test Case: 133 | Input/Output: [[26.225392804313813 83] 109.22539280431381]
Test Case: 134 | Input/Output: [[0.9051635507543665 -100] -99.09483644924563]
Test Case: 135 | Input/Output: [[51.637422197271775 -97] -45.362577802728225]
Test Case: 136 | Input/Output: [[-24.34989026886521 -74] -98.34989026886521]
Test Case: 137 | Input/Output: [[80.24655646763853 -69] 11.246556467638527]
Test Case: 138 | Input/Output: [[0.9895704443947011 12] 12.989570444394701]
Test Case: 139 | Input/Output: [[-73.09119091278899 9] -64.09119091278899]
Test Case: 140 | Input/Output: [[-27.172568381095004 -5] -32.172568381095004]
Test Case: 141 | Input/Output: [[-30.140635340559157 -75] -105.14063534055916]
Test Case: 142 | Input/Output: [[85.71606762641292 36] 121.71606762641292]
Test Case: 143 | Input/Output: [[8.47522848137126 -22] -13.52477151862874]
Test Case: 144 | Input/Output: [[-67.74899874595405 48] -19.748998745954054]
Test Case: 145 | Input/Output: [[-32.11713651503547 81] 48.88286348496453]
Test Case: 146 | Input/Output: [[43.42668602336974 48] 91.42668602336974]
Test Case: 147 | Input/Output: [[62.31197198803673 96] 158.31197198803673]
Test Case: 148 | Input/Output: [[40.345033917586164 54] 94.34503391758616]
Test Case: 149 | Input/Output: [[-63.09170155911428 -51] -114.09170155911428]
Test Case: 150 | Input/Output: [[-44.245670721478824 -81] -125.24567072147883]
Test Case: 151 | Input/Output: [[-31.951759357479162 -54] -85.95175935747916]
Test Case: 152 | Input/Output: [[-91.35087272926974 -17] -108.35087272926974]
Test Case: 153 | Input/Output: [[64.43895413552133 -44] 20.43895413552133]
Test Case: 154 | Input/Output: [[-66.99149560612996 59] -7.991495606129959]
Test Case: 155 | Input/Output: [[-30.525019792374295 57] 26.474980207625705]
Test Case: 156 | Input/Output: [[22.411686604948855 35] 57.411686604948855]
Test Case: 157 | Input/Output: [[-72.94711991133009 95] 22.05288008866991]
Test Case: 158 | Input/Output: [[-9.770200976988619 44] 34.22979902301138]
Test Case: 159 | Input/Output: [[37.55161508630957 30] 67.55161508630957]
Test Case: 160 | Input/Output: [[-66.00789550152166 -16] -82.00789550152166]
Test Case: 161 | Input/Output: [[-75.85225064551686 -36] -111.85225064551686]
Test Case: 162 | Input/Output: [[-37.097116288359054 38] 0.9028837116409463]
Test Case: 163 | Input/Output: [[73.29465923475826 23] 96.29465923475826]
Test Case: 164 | Input/Output: [[16.291803303145386 14] 30.291803303145386]
Test Case: 165 | Input/Output: [[-43.55286938042917 48] 4.447130619570828]
Test Case: 166 | Input/Output: [[-39.65735650167077 -21] -60.65735650167077]
Test Case: 167 | Input/Output: [[-54.49516769634754 93] 38.50483230365246]
Test Case: 168 | Input/Output: [[83.81634593241083 8] 91.81634593241083]
Test Case: 169 | Input/Output: [[-15.569035531477198 -21] -36.5690355314772]
Test Case: 170 | Input/Output: [[-23.32624200162212 100] 76.67375799837788]
Test Case: 171 | Input/Output: [[84.52146136583002 1] 85.52146136583002]
Test Case: 172 | Input/Output: [[-74.16057710987121 -67] -141.1605771098712]
Test Case: 173 | Input/Output: [[51.38293420672494 -94] -42.61706579327506]
Test Case: 174 | Input/Output: [[-13.020855029299994 54] 40.979144970700006]
Test Case: 175 | Input/Output: [[-63.37548280559746 28] -35.37548280559746]
Test Case: 176 | Input/Output: [[2.4874883743150917 -46] -43.51251162568491]
Test Case: 177 | Input/Output: [[0.004164845747283152 62] 62.00416484574728]
Test Case: 178 | Input/Output: [[-87.34929789821966 -87] -174.34929789821967]
Test Case: 179 | Input/Output: [[37.71430236147461 -72] -34.28569763852539]
Test Case: 180 | Input/Output: [[24.323626603215345 -93] -68.67637339678465]
Test Case: 181 | Input/Output: [[-83.57450459891271 4] -79.57450459891271]
Test Case: 182 | Input/Output: [[-57.810225715177644 -14] -71.81022571517764]
Test Case: 183 | Input/Output: [[-46.66941814765586 80] 33.33058185234414]
Test Case: 184 | Input/Output: [[-31.05385128220189 -85] -116.05385128220189]
Test Case: 185 | Input/Output: [[-97.90345564724277 -90] -187.90345564724277]
Test Case: 186 | Input/Output: [[71.99837477539467 -46] 25.998374775394666]
Test Case: 187 | Input/Output: [[65.78490989420985 -57] 8.784909894209846]
Test Case: 188 | Input/Output: [[-23.758893672774974 -89] -112.75889367277497]
Test Case: 189 | Input/Output: [[-84.16648020856896 52] -32.166480208568956]
Test Case: 190 | Input/Output: [[-41.34483483904712 -30] -71.34483483904711]
Test Case: 191 | Input/Output: [[-91.73101353076439 -23] -114.73101353076439]
Test Case: 192 | Input/Output: [[-16.303598505339508 -54] -70.30359850533951]
Test Case: 193 | Input/Output: [[-8.234023156517267 -21] -29.234023156517267]
Test Case: 194 | Input/Output: [[97.24940315071751 42] 139.2494031507175]
Test Case: 195 | Input/Output: [[-72.7915464253476 12] -60.791546425347605]
Test Case: 196 | Input/Output: [[78.54236285866551 -53] 25.542362858665513]
Test Case: 197 | Input/Output: [[7.731092144163739 -38] -30.26890785583626]
Test Case: 198 | Input/Output: [[-30.721341920023093 38] 7.278658079976907]
Test Case: 199 | Input/Output: [[23.07163597080195 21] 44.07163597080195]
Test Case: 200 | Input/Output: [[6.076397750075202 -96] -89.9236022499248]
Test Case: 201 | Input/Output: [[73.82937849088913 78] 151.82937849088913]
Test Case: 202 | Input/Output: [[-76.5192470643947 74] -2.5192470643947047]
Test Case: 203 | Input/Output: [[24.81405433250397 75] 99.81405433250397]
Test Case: 204 | Input/Output: [[55.35452273109499 -80] -24.64547726890501]
Test Case: 205 | Input/Output: [[9.286107122499132 63] 72.28610712249913]
Test Case: 206 | Input/Output: [[-9.042606690131507 -51] -60.04260669013151]
Test Case: 207 | Input/Output: [[87.39454391405127 2] 89.39454391405127]
Test Case: 208 | Input/Output: [[77.47694223539975 96] 173.47694223539975]
Test Case: 209 | Input/Output: [[64.22410820238517 68] 132.22410820238517]
Test Case: 210 | Input/Output: [[36.232079787641396 99] 135.2320797876414]
Test Case: 211 | Input/Output: [[-85.4418613145338 95] 9.558138685466204]
Test Case: 212 | Input/Output: [[43.063182930248104 60] 103.0631829302481]
Test Case: 213 | Input/Output: [[-81.64774060791603 43] -38.647740607916035]
Test Case: 214 | Input/Output: [[83.38790922374267 86] 169.38790922374267]
Test Case: 215 | Input/Output: [[0.14759891073235565 -59] -58.852401089267644]
Test Case: 216 | Input/Output: [[-86.67673625775072 -9] -95.67673625775072]
Test Case: 217 | Input/Output: [[-88.38183079126559 25] -63.381830791265585]
Test Case: 218 | Input/Output: [[69.05681189324511 -90] -20.94318810675489]
Test Case: 219 | Input/Output: [[45.067592215895814 15] 60.067592215895814]
Test Case: 220 | Input/Output: [[65.59716653537797 -94] -28.402833464622034]
Test Case: 221 | Input/Output: [[-59.00143003424627 22] -37.00143003424627]
Test Case: 222 | Input/Output: [[-85.65248105091807 -68] -153.65248105091808]
Test Case: 223 | Input/Output: [[-14.369746779009944 -38] -52.369746779009944]
Test Case: 224 | Input/Output: [[73.63680464828215 -43] 30.63680464828215]
Test Case: 225 | Input/Output: [[99.29951776551499 88] 187.299517765515]
Test Case: 226 | Input/Output: [[90.84504589255872 37] 127.84504589255872]
Test Case: 227 | Input/Output: [[-7.894593185820241 3] -4.894593185820241]
Test Case: 228 | Input/Output: [[82.21150202372817 18] 100.21150202372817]
Test Case: 229 | Input/Output: [[-6.76772452722507 63] 56.23227547277493]
Test Case: 230 | Input/Output: [[82.34228372211771 63] 145.3422837221177]
Test Case: 231 | Input/Output: [[71.67732666554804 -25] 46.67732666554804]
Test Case: 232 | Input/Output: [[-2.686898607541437 -6] -8.686898607541437]
Test Case: 233 | Input/Output: [[91.68476538941687 26] 117.68476538941687]
Test Case: 234 | Input/Output: [[15.721351861991437 -5] 10.721351861991437]
Test Case: 235 | Input/Output: [[-21.17098259170372 -59] -80.17098259170372]
Test Case: 236 | Input/Output: [[-14.99985997605387 -43] -57.99985997605387]
Test Case: 237 | Input/Output: [[86.67725407586971 -87] -0.32274592413028813]
Test Case: 238 | Input/Output: [[-6.0668275847246065 40] 33.93317241527539]
Test Case: 239 | Input/Output: [[-80.62802393216785 63] -17.62802393216785]
Test Case: 240 | Input/Output: [[-45.52587714124012 97] 51.47412285875988]
Test Case: 241 | Input/Output: [[-17.564473677265255 -17] -34.564473677265255]
Test Case: 242 | Input/Output: [[56.188746017349274 52] 108.18874601734927]
Test Case: 243 | Input/Output: [[53.80448337627183 -84] -30.195516623728167]
Test Case: 244 | Input/Output: [[-66.92372805375224 45] -21.923728053752242]
Test Case: 245 | Input/Output: [[-97.39434191069638 83] -14.394341910696383]
Test Case: 246 | Input/Output: [[-45.272097029527394 -33] -78.2720970295274]
Test Case: 247 | Input/Output: [[-83.80375324827335 52] -31.803753248273352]
Test Case: 248 | Input/Output: [[-56.121095724558124 88] 31.878904275441876]
Test Case: 249 | Input/Output: [[-85.02136260777966 -11] -96.02136260777966]
Test Case: 250 | Input/Output: [[-15.938160996699494 -15] -30.938160996699494]
Test Case: 251 | Input/Output: [[60.30090070112263 75] 135.30090070112263]
Test Case: 252 | Input/Output: [[-85.70580583966058 87] 1.2941941603394156]
Test Case: 253 | Input/Output: [[-54.97613220139903 29] -25.976132201399032]
Test Case: 254 | Input/Output: [[84.36198881239412 39] 123.36198881239412]
Test Case: 255 | Input/Output: [[-72.63011068801109 -89] -161.6301106880111]
Test Case: 256 | Input/Output: [[3.7191719309103206 -4] -0.2808280690896794]
Test Case: 257 | Input/Output: [[-61.49820905517143 -75] -136.49820905517143]
Test Case: 258 | Input/Output: [[-51.34228300089927 -10] -61.34228300089927]
Test Case: 259 | Input/Output: [[-49.77191533602805 -68] -117.77191533602806]
Test Case: 260 | Input/Output: [[87.14944398823587 88] 175.14944398823587]
Test Case: 261 | Input/Output: [[-18.057253365613974 -42] -60.057253365613974]
Test Case: 262 | Input/Output: [[-91.95651873001648 -100] -191.95651873001648]
Test Case: 263 | Input/Output: [[-25.663679396627856 -84] -109.66367939662786]
Test Case: 264 | Input/Output: [[49.644463112574414 -80] -30.355536887425586]
Test Case: 265 | Input/Output: [[11.845520910374674 -22] -10.154479089625326]
Test Case: 266 | Input/Output: [[10.754882931419615 56] 66.75488293141962]
Test Case: 267 | Input/Output: [[21.712589055789678 -31] -9.287410944210322]
Test Case: 268 | Input/Output: [[19.249098778164964 32] 51.249098778164964]
Test Case: 269 | Input/Output: [[-8.874503582601776 -71] -79.87450358260178]
Test Case: 270 | Input/Output: [[68.05002705171691 -42] 26.05002705171691]
Test Case: 271 | Input/Output: [[4.066735558717127 -39] -34.93326444128287]
Test Case: 272 | Input/Output: [[77.83468375455476 44] 121.83468375455476]
Test Case: 273 | Input/Output: [[58.36797973848056 -69] -10.632020261519443]
Test Case: 274 | Input/Output: [[60.55942912921469 79] 139.5594291292147]
Test Case: 275 | Input/Output: [[-35.259318466024965 -79] -114.25931846602496]
Test Case: 276 | Input/Output: [[-43.67919068903498 14] -29.679190689034982]
Test Case: 277 | Input/Output: [[51.23452043128984 -50] 1.2345204312898375]
Test Case: 278 | Input/Output: [[-39.14465655481971 35] -4.144656554819711]
Test Case: 279 | Input/Output: [[7.626705902605522 -20] -12.373294097394478]
Test Case: 280 | Input/Output: [[-24.282308981962572 9] -15.282308981962572]
Test Case: 281 | Input/Output: [[-35.25160288192728 18] -17.251602881927283]
Test Case: 282 | Input/Output: [[-19.305477784557397 30] 10.694522215442603]
Test Case: 283 | Input/Output: [[-27.25439460479386 66] 38.74560539520614]
Test Case: 284 | Input/Output: [[-92.72186096010114 58] -34.72186096010114]
Test Case: 285 | Input/Output: [[87.31679482048872 -100] -12.683205179511276]
Test Case: 286 | Input/Output: [[34.38018251406473 11] 45.38018251406473]
Test Case: 287 | Input/Output: [[79.66404297543863 43] 122.66404297543863]
Test Case: 288 | Input/Output: [[-15.042066937966652 -32] -47.04206693796665]
Test Case: 289 | Input/Output: [[93.27898523424392 -12] 81.27898523424392]
Test Case: 290 | Input/Output: [[-66.13447553604297 -52] -118.13447553604297]
Test Case: 291 | Input/Output: [[75.70167447377813 78] 153.70167447377813]
Test Case: 292 | Input/Output: [[22.485115515866312 -91] -68.51488448413369]
Test Case: 293 | Input/Output: [[-73.06251306602294 66] -7.0625130660229445]
Test Case: 294 | Input/Output: [[-69.50856938054109 92] 22.49143061945891]
Test Case: 295 | Input/Output: [[-86.05953731988423 16] -70.05953731988423]
Test Case: 296 | Input/Output: [[52.10601294869144 -30] 22.106012948691443]
Test Case: 297 | Input/Output: [[35.55646704428156 -31] 4.556467044281561]
Test Case: 298 | Input/Output: [[16.795407852232387 76] 92.79540785223239]
Test Case: 299 | Input/Output: [[17.676156133049943 58] 75.67615613304994]
Test Case: 300 | Input/Output: [[-47.27679766517818 44] -3.2767976651781794]
Test Case: 301 | Input/Output: [[-28.43456221303194 75] 46.56543778696806]
Test Case: 302 | Input/Output: [[-77.0666647224391 18] -59.0666647224391]
Test Case: 303 | Input/Output: [[-94.67221346789552 44] -50.67221346789552]
Test Case: 304 | Input/Output: [[-41.3205193064482 -14] -55.3205193064482]
Test Case: 305 | Input/Output: [[18.891906511303816 -80] -61.108093488696184]
Test Case: 306 | Input/Output: [[92.43618795570126 12] 104.43618795570126]
Test Case: 307 | Input/Output: [[32.29882673619301 -26] 6.298826736193007]
Test Case: 308 | Input/Output: [[-90.66973877521924 -80] -170.66973877521923]
Test Case: 309 | Input/Output: [[69.61555138537386 -32] 37.61555138537386]
Test Case: 310 | Input/Output: [[5.734898998875977 64] 69.73489899887598]
Test Case: 311 | Input/Output: [[-48.730703080715564 73] 24.269296919284436]
Test Case: 312 | Input/Output: [[47.523896705552914 -39] 8.523896705552914]
Test Case: 313 | Input/Output: [[-94.74378399180732 -16] -110.74378399180732]
Test Case: 314 | Input/Output: [[77.63401943115247 75] 152.63401943115247]
Test Case: 315 | Input/Output: [[-82.17013270239953 49] -33.17013270239953]
Test Case: 316 | Input/Output: [[73.91022315131991 -5] 68.91022315131991]
Test Case: 317 | Input/Output: [[-8.830378759324375 89] 80.16962124067562]
Test Case: 318 | Input/Output: [[-96.83342447758334 -25] -121.83342447758334]
Test Case: 319 | Input/Output: [[-73.0272273388616 43] -30.027227338861593]
Test Case: 320 | Input/Output: [[41.31215228780104 -81] -39.68784771219896]
Test Case: 321 | Input/Output: [[24.1849123914389 94] 118.1849123914389]
Test Case: 322 | Input/Output: [[25.273011116661223 99] 124.27301111666122]
Test Case: 323 | Input/Output: [[-93.90683727804372 3] -90.90683727804372]
Test Case: 324 | Input/Output: [[-15.874686718796127 -23] -38.87468671879613]
Test Case: 325 | Input/Output: [[89.43770140996185 -77] 12.437701409961846]
Test Case: 326 | Input/Output: [[56.58174652679401 48] 104.581746526794]
Test Case: 327 | Input/Output: [[10.61773438811349 11] 21.61773438811349]
Test Case: 328 | Input/Output: [[-92.79527352369554 -79] -171.79527352369553]
Test Case: 329 | Input/Output: [[85.64743881268029 -51] 34.64743881268029]
Test Case: 330 | Input/Output: [[7.4210680511540374 -55] -47.57893194884596]
Test Case: 331 | Input/Output: [[69.76942896878586 11] 80.76942896878586]
Test Case: 332 | Input/Output: [[38.14382882183105 -84] -45.85617117816895]
Test Case: 333 | Input/Output: [[86.14253977007158 -48] 38.14253977007158]
Test Case: 334 | Input/Output: [[63.462045403732446 15] 78.46204540373245]
Test Case: 335 | Input/Output: [[-88.2249089396969 38] -50.2249089396969]
Test Case: 336 | Input/Output: [[-61.84831831031554 6] -55.84831831031554]
Test Case: 337 | Input/Output: [[-31.18301800272023 -79] -110.18301800272023]
Test Case: 338 | Input/Output: [[23.128113821261962 28] 51.12811382126196]
Test Case: 339 | Input/Output: [[-89.68254087453545 -73] -162.68254087453545]
Test Case: 340 | Input/Output: [[-6.506347116629769 -36] -42.50634711662977]
Test Case: 341 | Input/Output: [[1.5198326746652668 43] 44.51983267466527]
Test Case: 342 | Input/Output: [[-57.73034732441833 39] -18.730347324418332]
Test Case: 343 | Input/Output: [[8.780698818887586 -66] -57.219301181112414]
Test Case: 344 | Input/Output: [[-12.744704618354021 48] 35.25529538164598]
Test Case: 345 | Input/Output: [[-11.206071294056215 -81] -92.20607129405622]
Test Case: 346 | Input/Output: [[-81.32131719500227 11] -70.32131719500227]
Test Case: 347 | Input/Output: [[90.95230659146486 76] 166.95230659146486]
Test Case: 348 | Input/Output: [[-91.61249835286614 37] -54.61249835286614]
Test Case: 349 | Input/Output: [[54.93127470384391 25] 79.93127470384391]
Test Case: 350 | Input/Output: [[47.54157979470409 -54] -6.4584202052959085]
Test Case: 351 | Input/Output: [[-59.62711382149926 20] -39.62711382149926]
Test Case: 352 | Input/Output: [[94.25817416743647 83] 177.25817416743647]
Test Case: 353 | Input/Output: [[-23.378116968142265 54] 30.621883031857735]
Test Case: 354 | Input/Output: [[89.51443347486827 -33] 56.51443347486827]
Test Case: 355 | Input/Output: [[18.343563343628276 -35] -16.656436656371724]
Test Case: 356 | Input/Output: [[-85.38490080940433 -13] -98.38490080940433]
Test Case: 357 | Input/Output: [[45.53128842045183 20] 65.53128842045183]
Test Case: 358 | Input/Output: [[24.601292159413617 -49] -24.398707840586383]
Test Case: 359 | Input/Output: [[-82.30152524071642 87] 4.6984747592835845]
Test Case: 360 | Input/Output: [[-22.294290274623222 82] 59.70570972537678]
Test Case: 361 | Input/Output: [[-82.37055892461629 -18] -100.37055892461629]
Test Case: 362 | Input/Output: [[93.17517528016924 -46] 47.17517528016924]
Test Case: 363 | Input/Output: [[-50.03558068961185 -88] -138.03558068961183]
Test Case: 364 | Input/Output: [[-14.6427944980952 -41] -55.6427944980952]
Test Case: 365 | Input/Output: [[34.16467090220286 72] 106.16467090220286]
Test Case: 366 | Input/Output: [[-88.49296709869668 -20] -108.49296709869668]
Test Case: 367 | Input/Output: [[67.11863624693055 48] 115.11863624693055]
Test Case: 368 | Input/Output: [[19.155916090243224 -84] -64.84408390975678]
Test Case: 369 | Input/Output: [[9.00575288932994 21] 30.00575288932994]
Test Case: 370 | Input/Output: [[33.536260956029594 88] 121.5362609560296]
Test Case: 371 | Input/Output: [[63.17639177693201 75] 138.176391776932]
Test Case: 372 | Input/Output: [[-85.5721900498674 39] -46.5721900498674]
Test Case: 373 | Input/Output: [[-58.539589196480854 35] -23.539589196480854]
Test Case: 374 | Input/Output: [[-37.960027764716564 -67] -104.96002776471656]
Test Case: 375 | Input/Output: [[-56.311983819302 -47] -103.311983819302]
Test Case: 376 | Input/Output: [[86.09343884112923 94] 180.09343884112923]
Test Case: 377 | Input/Output: [[-72.22603666099594 -87] -159.22603666099593]
Test Case: 378 | Input/Output: [[-92.3840000847567 68] -24.384000084756707]
Test Case: 379 | Input/Output: [[68.27688590338306 -66] 2.276885903383061]
Test Case: 380 | Input/Output: [[6.404128711434808 57] 63.40412871143481]
Test Case: 381 | Input/Output: [[-93.7370501273451 -64] -157.7370501273451]
Test Case: 382 | Input/Output: [[-96.84947241209665 -76] -172.84947241209665]
Test Case: 383 | Input/Output: [[52.87506834143397 -22] 30.875068341433973]
Test Case: 384 | Input/Output: [[47.147320003306874 6] 53.147320003306874]
Test Case: 385 | Input/Output: [[54.68161811145285 45] 99.68161811145285]
Test Case: 386 | Input/Output: [[23.08184290654644 67] 90.08184290654644]
Test Case: 387 | Input/Output: [[15.951232956998581 4] 19.95123295699858]
Test Case: 388 | Input/Output: [[-57.9346568446077 19] -38.9346568446077]
Test Case: 389 | Input/Output: [[39.87534072937021 -94] -54.12465927062979]
Test Case: 390 | Input/Output: [[3.266299427493479 -15] -11.733700572506521]
Test Case: 391 | Input/Output: [[7.120996804368048 -47] -39.87900319563195]
Test Case: 392 | Input/Output: [[-83.83159109162219 0] -83.83159109162219]
Test Case: 393 | Input/Output: [[-51.554949337992426 -17] -68.55494933799243]
Test Case: 394 | Input/Output: [[53.38257312416488 90] 143.38257312416488]
Test Case: 395 | Input/Output: [[88.53044022472713 -70] 18.53044022472713]
Test Case: 396 | Input/Output: [[-65.06220719638907 -80] -145.06220719638907]
Test Case: 397 | Input/Output: [[77.84970152932996 85] 162.84970152932996]
Test Case: 398 | Input/Output: [[69.87235249581673 -73] -3.1276475041832725]
Test Case: 399 | Input/Output: [[72.64416176102179 84] 156.6441617610218]
Test Case: 400 | Input/Output: [[55.81327733451735 -58] -2.186722665482648]
Test Case: 401 | Input/Output: [[54.94311457277564 -42] 12.943114572775642]
Test Case: 402 | Input/Output: [[2.719979397215269 -13] -10.280020602784731]
Test Case: 403 | Input/Output: [[38.38812076427746 -49] -10.61187923572254]
Test Case: 404 | Input/Output: [[32.6573459920821 -56] -23.3426540079179]
Test Case: 405 | Input/Output: [[-97.04859840622433 10] -87.04859840622433]
Test Case: 406 | Input/Output: [[-56.420257094715495 88] 31.579742905284505]
Test Case: 407 | Input/Output: [[-18.65551971344057 28] 9.344480286559431]
Test Case: 408 | Input/Output: [[52.893480079792056 95] 147.89348007979206]
Test Case: 409 | Input/Output: [[21.856111611389423 -91] -69.14388838861058]
Test Case: 410 | Input/Output: [[52.40689455566928 22] 74.40689455566928]
Test Case: 411 | Input/Output: [[14.536306827509506 -82] -67.4636931724905]
Test Case: 412 | Input/Output: [[-41.720043071509274 -11] -52.720043071509274]
Test Case: 413 | Input/Output: [[11.7555773816689 -65] -53.2444226183311]
Test Case: 414 | Input/Output: [[70.25955518229179 -20] 50.25955518229179]
Test Case: 415 | Input/Output: [[19.596087132232796 73] 92.5960871322328]
Test Case: 416 | Input/Output: [[-77.90573883823531 12] -65.90573883823531]
Test Case: 417 | Input/Output: [[82.14562338347571 -44] 38.14562338347571]
Test Case: 418 | Input/Output: [[-80.2346435141908 81] 0.7653564858092068]
Test Case: 419 | Input/Output: [[90.97062746360513 54] 144.97062746360513]
Test Case: 420 | Input/Output: [[31.887630639122648 -89] -57.11236936087735]
Test Case: 421 | Input/Output: [[-10.588033879087092 -41] -51.58803387908709]
Test Case: 422 | Input/Output: [[-23.24621098533612 81] 57.75378901466388]
Test Case: 423 | Input/Output: [[-31.544858020005947 78] 46.45514197999405]
Test Case: 424 | Input/Output: [[49.884411720919445 -55] -5.115588279080555]
Test Case: 425 | Input/Output: [[31.354344933606285 96] 127.35434493360628]
Test Case: 426 | Input/Output: [[-88.30042823583138 -3] -91.30042823583138]
Test Case: 427 | Input/Output: [[-77.8448202690943 -58] -135.8448202690943]
Test Case: 428 | Input/Output: [[28.17261378573312 -10] 18.17261378573312]
Test Case: 429 | Input/Output: [[-22.871489561720963 56] 33.12851043827904]
Test Case: 430 | Input/Output: [[-75.20801422667245 11] -64.20801422667245]
Test Case: 431 | Input/Output: [[67.06023685314398 -5] 62.06023685314398]
Test Case: 432 | Input/Output: [[17.357618825274685 13] 30.357618825274685]
Test Case: 433 | Input/Output: [[96.80893430261182 -26] 70.80893430261182]
Test Case: 434 | Input/Output: [[60.41381496900169 -3] 57.41381496900169]
Test Case: 435 | Input/Output: [[-92.30583723464395 27] -65.30583723464395]
Test Case: 436 | Input/Output: [[39.91437515543481 -65] -25.08562484456519]
Test Case: 437 | Input/Output: [[75.47440151844827 20] 95.47440151844827]
Test Case: 438 | Input/Output: [[-73.77813030580725 -14] -87.77813030580725]
Test Case: 439 | Input/Output: [[36.23314906080486 -76] -39.76685093919514]
Test Case: 440 | Input/Output: [[98.38092063782756 30] 128.38092063782756]
Test Case: 441 | Input/Output: [[83.22525334613994 -31] 52.22525334613994]
Test Case: 442 | Input/Output: [[58.87106277557419 22] 80.87106277557419]
Test Case: 443 | Input/Output: [[13.610193339511937 75] 88.61019333951194]
Test Case: 444 | Input/Output: [[-57.04026630886321 37] -20.04026630886321]
Test Case: 445 | Input/Output: [[-1.691486579473377 -92] -93.69148657947338]
Test Case: 446 | Input/Output: [[14.482024764772234 -67] -52.517975235227766]
Test Case: 447 | Input/Output: [[70.91796056034454 -54] 16.91796056034454]
Test Case: 448 | Input/Output: [[75.91487810652242 -89] -13.085121893477577]
Test Case: 449 | Input/Output: [[99.51625557866672 -25] 74.51625557866672]
Test Case: 450 | Input/Output: [[-62.8329915960961 -9] -71.8329915960961]
Test Case: 451 | Input/Output: [[-21.95629071226719 58] 36.04370928773281]
Test Case: 452 | Input/Output: [[82.42353367470713 -57] 25.42353367470713]
Test Case: 453 | Input/Output: [[-14.987015437956657 9] -5.987015437956657]
Test Case: 454 | Input/Output: [[-81.76541696985265 46] -35.76541696985265]
Test Case: 455 | Input/Output: [[-2.4296006698517374 70] 67.57039933014826]
Test Case: 456 | Input/Output: [[-62.23375434461167 -45] -107.23375434461167]
Test Case: 457 | Input/Output: [[33.80946611406384 -78] -44.19053388593616]
Test Case: 458 | Input/Output: [[96.33834463374205 -40] 56.338344633742054]
Test Case: 459 | Input/Output: [[29.165223660692163 40] 69.16522366069216]
Test Case: 460 | Input/Output: [[57.08044773684122 -23] 34.08044773684122]
Test Case: 461 | Input/Output: [[-22.11733640019837 -35] -57.11733640019837]
Test Case: 462 | Input/Output: [[47.97046464850774 26] 73.97046464850774]
Test Case: 463 | Input/Output: [[91.40485629631715 -13] 78.40485629631715]
Test Case: 464 | Input/Output: [[-24.321753832049865 57] 32.678246167950135]
Test Case: 465 | Input/Output: [[90.11697131679944 63] 153.11697131679944]
Test Case: 466 | Input/Output: [[-60.91836057564348 -22] -82.91836057564348]
Test Case: 467 | Input/Output: [[68.17647105713738 -56] 12.176471057137377]
Test Case: 468 | Input/Output: [[-47.107058023669765 30] -17.107058023669765]
Test Case: 469 | Input/Output: [[-99.21601684234523 -54] -153.21601684234523]
Test Case: 470 | Input/Output: [[-43.26271240188868 51] 7.7372875981113225]
Test Case: 471 | Input/Output: [[39.59939462625053 10] 49.59939462625053]
Test Case: 472 | Input/Output: [[87.73446082720605 18] 105.73446082720605]
Test Case: 473 | Input/Output: [[33.591083046090944 48] 81.59108304609094]
Test Case: 474 | Input/Output: [[-73.91531594250725 85] 11.084684057492751]
Test Case: 475 | Input/Output: [[-25.25235608867642 87] 61.74764391132358]
Test Case: 476 | Input/Output: [[42.96882604144409 93] 135.9688260414441]
Test Case: 477 | Input/Output: [[-15.2288033186164 -68] -83.2288033186164]
Test Case: 478 | Input/Output: [[85.52618973934389 -53] 32.52618973934389]
Test Case: 479 | Input/Output: [[29.176839512095142 -34] -4.8231604879048575]
Test Case: 480 | Input/Output: [[16.00201773398706 -90] -73.99798226601294]
Test Case: 481 | Input/Output: [[-39.428761491236905 9] -30.428761491236905]
Test Case: 482 | Input/Output: [[67.88971637816434 56] 123.88971637816434]
Test Case: 483 | Input/Output: [[48.32968640636898 74] 122.32968640636898]
Test Case: 484 | Input/Output: [[-91.50549409560804 -59] -150.50549409560804]
Test Case: 485 | Input/Output: [[-73.5634385701732 -84] -157.56343857017322]
Test Case: 486 | Input/Output: [[-4.290482571157469 64] 59.70951742884253]
Test Case: 487 | Input/Output: [[-58.60313663564569 -23] -81.60313663564568]
Test Case: 488 | Input/Output: [[21.241557291945213 66] 87.24155729194521]
Test Case: 489 | Input/Output: [[93.83935470872916 17] 110.83935470872916]
Test Case: 490 | Input/Output: [[5.098214973010258 37] 42.09821497301026]
Test Case: 491 | Input/Output: [[95.35300410962023 28] 123.35300410962023]
Test Case: 492 | Input/Output: [[50.17675741538886 -84] -33.82324258461114]
Test Case: 493 | Input/Output: [[-33.29487945189493 30] -3.2948794518949285]
Test Case: 494 | Input/Output: [[37.76381767272551 99] 136.7638176727255]
Test Case: 495 | Input/Output: [[49.71406167484565 100] 149.71406167484565]
Test Case: 496 | Input/Output: [[-87.64004834702392 -71] -158.64004834702394]
Test Case: 497 | Input/Output: [[-68.15159160081438 24] -44.151591600814385]
Test Case: 498 | Input/Output: [[75.16830271363784 8] 83.16830271363784]
Test Case: 499 | Input/Output: [[-91.71399882092813 -53] -144.7139988209281]
Test Case: 500 | Input/Output: [[8.669773073885906 15] 23.669773073885906]
Test Case: 501 | Input/Output: [[80.09254378887348 -36] 44.092543788873485]
Test Case: 502 | Input/Output: [[-72.1540592664156 -78] -150.1540592664156]
Test Case: 503 | Input/Output: [[-26.41601477656019 -95] -121.41601477656019]
Test Case: 504 | Input/Output: [[-31.49011696426487 -50] -81.49011696426487]
Test Case: 505 | Input/Output: [[95.86293747873057 -79] 16.862937478730572]
Test Case: 506 | Input/Output: [[88.07355782960016 49] 137.07355782960016]
Test Case: 507 | Input/Output: [[16.220184904810452 86] 102.22018490481045]
Test Case: 508 | Input/Output: [[42.37462139175486 59] 101.37462139175486]
Test Case: 509 | Input/Output: [[75.05539126312686 -4] 71.05539126312686]
Test Case: 510 | Input/Output: [[3.194026290083187 60] 63.19402629008319]
Test Case: 511 | Input/Output: [[47.20707164695639 -62] -14.792928353043607]
Test Case: 512 | Input/Output: [[-67.77378351207301 47] -20.77378351207301]
Test Case: 513 | Input/Output: [[-3.56052444054869 0] -3.56052444054869]
Test Case: 514 | Input/Output: [[61.39374020457848 -63] -1.606259795421522]
Test Case: 515 | Input/Output: [[74.72414281350859 55] 129.7241428135086]
Test Case: 516 | Input/Output: [[68.57830154432011 26] 94.57830154432011]
Test Case: 517 | Input/Output: [[56.214497372272234 -93] -36.785502627727766]
Test Case: 518 | Input/Output: [[51.88967769987539 44] 95.88967769987539]
Test Case: 519 | Input/Output: [[-2.0022675125452594 -19] -21.00226751254526]
Test Case: 520 | Input/Output: [[-69.50188913176767 -28] -97.50188913176767]
Test Case: 521 | Input/Output: [[-81.73310586954308 54] -27.73310586954308]
Test Case: 522 | Input/Output: [[-8.324964405040916 99] 90.67503559495908]
Test Case: 523 | Input/Output: [[-2.092129972652998 78] 75.907870027347]
Test Case: 524 | Input/Output: [[11.455711547599947 -61] -49.54428845240005]
Test Case: 525 | Input/Output: [[-35.21475932506124 58] 22.785240674938763]
Test Case: 526 | Input/Output: [[69.28232874943455 -48] 21.282328749434555]
Test Case: 527 | Input/Output: [[-63.262310080616025 93] 29.737689919383975]
Test Case: 528 | Input/Output: [[31.83489811553315 -59] -27.16510188446685]
Test Case: 529 | Input/Output: [[53.38964571616299 -32] 21.38964571616299]
Test Case: 530 | Input/Output: [[-9.063518768781947 -60] -69.06351876878195]
Test Case: 531 | Input/Output: [[-98.16653556679877 -98] -196.16653556679876]
Test Case: 532 | Input/Output: [[34.7262206601317 -34] 0.7262206601317018]
Test Case: 533 | Input/Output: [[-71.74430701723878 32] -39.74430701723878]
Test Case: 534 | Input/Output: [[-58.11684695073631 -59] -117.11684695073632]
Test Case: 535 | Input/Output: [[0.21971037852080144 49] 49.2197103785208]
Test Case: 536 | Input/Output: [[49.37419575488752 37] 86.37419575488752]
Test Case: 537 | Input/Output: [[-52.302403230833704 2] -50.302403230833704]
Test Case: 538 | Input/Output: [[57.497882305663495 -78] -20.502117694336505]
Test Case: 539 | Input/Output: [[76.04996963045221 12] 88.04996963045221]
Test Case: 540 | Input/Output: [[69.87268761869018 -91] -21.12731238130982]
Test Case: 541 | Input/Output: [[-7.3819428069130595 -83] -90.38194280691306]
Test Case: 542 | Input/Output: [[-63.2843767531895 -12] -75.28437675318949]
Test Case: 543 | Input/Output: [[-91.41910018383486 -61] -152.41910018383487]
Test Case: 544 | Input/Output: [[0.9579178758861246 97] 97.95791787588612]
Test Case: 545 | Input/Output: [[-97.37241564375101 12] -85.37241564375101]
Test Case: 546 | Input/Output: [[41.117042951301244 -29] 12.117042951301244]
Test Case: 547 | Input/Output: [[-59.92623652667142 -25] -84.92623652667142]
Test Case: 548 | Input/Output: [[24.675188494897426 75] 99.67518849489743]
Test Case: 549 | Input/Output: [[-66.48851670837988 68] 1.5114832916201237]
Test Case: 550 | Input/Output: [[-92.73092007515262 -87] -179.73092007515262]
Test Case: 551 | Input/Output: [[-77.78717304363474 52] -25.787173043634738]
Test Case: 552 | Input/Output: [[77.10100411146661 87] 164.1010041114666]
Test Case: 553 | Input/Output: [[6.055892568996768 24] 30.055892568996768]
Test Case: 554 | Input/Output: [[15.598407159280029 -90] -74.40159284071997]
Test Case: 555 | Input/Output: [[12.445043217890344 14] 26.445043217890344]
Test Case: 556 | Input/Output: [[13.579158699498734 -78] -64.42084130050127]
Test Case: 557 | Input/Output: [[-68.17467817288608 68] -0.17467817288607534]
Test Case: 558 | Input/Output: [[-17.94375667255119 80] 62.05624332744881]
Test Case: 559 | Input/Output: [[97.48984121654308 64] 161.48984121654308]
Test Case: 560 | Input/Output: [[-91.77211987261964 -62] -153.77211987261964]
Test Case: 561 | Input/Output: [[-39.76279013070445 -34] -73.76279013070445]
Test Case: 562 | Input/Output: [[89.57410504520834 22] 111.57410504520834]
Test Case: 563 | Input/Output: [[84.16152060467292 -8] 76.16152060467292]
Test Case: 564 | Input/Output: [[17.85158210379072 -59] -41.14841789620928]
Test Case: 565 | Input/Output: [[90.64742005042638 19] 109.64742005042638]
Test Case: 566 | Input/Output: [[-48.46456972337849 10] -38.46456972337849]
Test Case: 567 | Input/Output: [[19.786391726340383 46] 65.78639172634038]
Test Case: 568 | Input/Output: [[-47.65830873249088 -31] -78.65830873249088]
Test Case: 569 | Input/Output: [[-76.56006430204478 -54] -130.5600643020448]
Test Case: 570 | Input/Output: [[-96.88363909096793 3] -93.88363909096793]
Test Case: 571 | Input/Output: [[27.10050776427704 57] 84.10050776427704]
Test Case: 572 | Input/Output: [[71.3415281390794 -52] 19.3415281390794]
Test Case: 573 | Input/Output: [[11.81800972965597 -45] -33.18199027034403]
Test Case: 574 | Input/Output: [[46.908594122592774 85] 131.90859412259277]
Test Case: 575 | Input/Output: [[-56.560623245771154 -32] -88.56062324577115]
Test Case: 576 | Input/Output: [[-67.33922255318079 15] -52.33922255318079]
Test Case: 577 | Input/Output: [[75.00338868801214 -9] 66.00338868801214]
Test Case: 578 | Input/Output: [[-52.042505110006765 5] -47.042505110006765]
Test Case: 579 | Input/Output: [[-10.855222648681817 -5] -15.855222648681817]
Test Case: 580 | Input/Output: [[-62.06301973821382 -44] -106.06301973821382]
Test Case: 581 | Input/Output: [[12.693550100515424 45] 57.693550100515424]
Test Case: 582 | Input/Output: [[98.87915272119946 4] 102.87915272119946]
Test Case: 583 | Input/Output: [[-15.35774519401123 -47] -62.35774519401123]
Test Case: 584 | Input/Output: [[-11.852748319504713 45] 33.14725168049529]
Test Case: 585 | Input/Output: [[-15.606502266964895 -76] -91.6065022669649]
Test Case: 586 | Input/Output: [[74.28172538392866 5] 79.28172538392866]
Test Case: 587 | Input/Output: [[60.6012881331728 -81] -20.3987118668272]
Test Case: 588 | Input/Output: [[64.58334812904948 3] 67.58334812904948]
Test Case: 589 | Input/Output: [[44.417905609035785 -14] 30.417905609035785]
Test Case: 590 | Input/Output: [[-51.50819513217464 31] -20.50819513217464]
Test Case: 591 | Input/Output: [[-76.56561038763718 -24] -100.56561038763718]
Test Case: 592 | Input/Output: [[21.4867919693434 79] 100.4867919693434]
Test Case: 593 | Input/Output: [[-23.84439495586976 -28] -51.84439495586976]
Test Case: 594 | Input/Output: [[95.18092952451681 -54] 41.18092952451681]
Test Case: 595 | Input/Output: [[89.28337340009702 38] 127.28337340009702]
Test Case: 596 | Input/Output: [[71.49443242820266 -76] -4.505567571797343]
Test Case: 597 | Input/Output: [[-55.961522477158134 -29] -84.96152247715813]
Test Case: 598 | Input/Output: [[87.13459331922343 -44] 43.13459331922343]
Test Case: 599 | Input/Output: [[63.310611632704195 50] 113.3106116327042]
Test Case: 600 | Input/Output: [[-0.2708584186390084 84] 83.72914158136099]
Test Case: 601 | Input/Output: [[-96.14256851219054 5] -91.14256851219054]
Test Case: 602 | Input/Output: [[79.22436142248895 -35] 44.224361422488954]
Test Case: 603 | Input/Output: [[-86.33426111694587 -86] -172.33426111694587]
Test Case: 604 | Input/Output: [[-98.13978161096723 -73] -171.13978161096725]
Test Case: 605 | Input/Output: [[-57.160315814237414 -46] -103.1603158142374]
Test Case: 606 | Input/Output: [[-82.68522219549604 1] -81.68522219549604]
Test Case: 607 | Input/Output: [[54.543964486119876 16] 70.54396448611988]
Test Case: 608 | Input/Output: [[-61.68800769886704 -40] -101.68800769886704]
Test Case: 609 | Input/Output: [[74.01447152024338 40] 114.01447152024338]
Test Case: 610 | Input/Output: [[83.09326887155615 -81] 2.0932688715561483]
Test Case: 611 | Input/Output: [[-71.92411288463754 20] -51.92411288463754]
Test Case: 612 | Input/Output: [[71.65485599297918 95] 166.65485599297918]
Test Case: 613 | Input/Output: [[-95.29924442096238 -13] -108.29924442096238]
Test Case: 614 | Input/Output: [[55.28925984596964 54] 109.28925984596964]
Test Case: 615 | Input/Output: [[-8.35175086972842 -28] -36.35175086972842]
Test Case: 616 | Input/Output: [[-34.679829625262926 6] -28.679829625262926]
Test Case: 617 | Input/Output: [[-57.53649073724259 -77] -134.5364907372426]
Test Case: 618 | Input/Output: [[95.20344447492752 56] 151.20344447492752]
Test Case: 619 | Input/Output: [[-49.026912905895244 34] -15.026912905895244]
Test Case: 620 | Input/Output: [[-4.442440247018652 10] 5.557559752981348]
Test Case: 621 | Input/Output: [[7.676829878217049 48] 55.67682987821705]
Test Case: 622 | Input/Output: [[19.840986919943163 -51] -31.159013080056837]
Test Case: 623 | Input/Output: [[75.94380387686769 61] 136.9438038768677]
Test Case: 624 | Input/Output: [[10.824928957514544 57] 67.82492895751454]
Test Case: 625 | Input/Output: [[23.300329575936345 59] 82.30032957593635]
Test Case: 626 | Input/Output: [[-96.89752224480135 -41] -137.89752224480134]
Test Case: 627 | Input/Output: [[-42.74505101569741 2] -40.74505101569741]
Test Case: 628 | Input/Output: [[49.10557081819596 14] 63.10557081819596]
Test Case: 629 | Input/Output: [[34.14145427235479 -97] -62.85854572764521]
Test Case: 630 | Input/Output: [[-88.38599462400451 6] -82.38599462400451]
Test Case: 631 | Input/Output: [[-43.06697135924151 98] 54.93302864075849]
Test Case: 632 | Input/Output: [[57.87321919072369 91] 148.8732191907237]
Test Case: 633 | Input/Output: [[-52.912880631206626 79] 26.087119368793374]
Test Case: 634 | Input/Output: [[25.481695110619512 53] 78.48169511061951]
Test Case: 635 | Input/Output: [[48.80495880709918 -4] 44.80495880709918]
Test Case: 636 | Input/Output: [[64.24078038638766 -15] 49.240780386387655]
Test Case: 637 | Input/Output: [[-88.07360577250213 91] 2.926394227497866]
Test Case: 638 | Input/Output: [[-41.059326911239346 -24] -65.05932691123934]
Test Case: 639 | Input/Output: [[20.147210156829985 45] 65.14721015682998]
Test Case: 640 | Input/Output: [[12.756989244461622 -4] 8.756989244461622]
Test Case: 641 | Input/Output: [[-19.84904353127223 84] 64.15095646872777]
Test Case: 642 | Input/Output: [[-69.5358215779053 -42] -111.5358215779053]
Test Case: 643 | Input/Output: [[-25.091787928052398 41] 15.908212071947602]
Test Case: 644 | Input/Output: [[-39.41201420606344 -47] -86.41201420606345]
Test Case: 645 | Input/Output: [[46.2699025473172 -20] 26.2699025473172]
Test Case: 646 | Input/Output: [[-1.3713760205144894 17] 15.62862397948551]
Test Case: 647 | Input/Output: [[98.37957755349697 6] 104.37957755349697]
Test Case: 648 | Input/Output: [[22.500170491916393 -62] -39.49982950808361]
Test Case: 649 | Input/Output: [[-90.58567235184103 23] -67.58567235184103]
Test Case: 650 | Input/Output: [[-51.11381150677694 -38] -89.11381150677694]
Test Case: 651 | Input/Output: [[-23.949201718386348 -70] -93.94920171838635]
Test Case: 652 | Input/Output: [[59.64675196697519 -82] -22.353248033024812]
Test Case: 653 | Input/Output: [[-64.36746224946083 -51] -115.36746224946083]
Test Case: 654 | Input/Output: [[54.56708706581932 51] 105.56708706581932]
Test Case: 655 | Input/Output: [[-7.5198319891078 -88] -95.5198319891078]
Test Case: 656 | Input/Output: [[-85.53755164796351 19] -66.53755164796351]
Test Case: 657 | Input/Output: [[-33.83403584029129 -99] -132.83403584029128]
Test Case: 658 | Input/Output: [[-84.10587782281603 -10] -94.10587782281603]
Test Case: 659 | Input/Output: [[-98.998212923193 -66] -164.998212923193]
Test Case: 660 | Input/Output: [[96.94649742331745 64] 160.94649742331745]
Test Case: 661 | Input/Output: [[-87.53902606036314 -41] -128.53902606036314]
Test Case: 662 | Input/Output: [[36.314680092408025 27] 63.314680092408025]
Test Case: 663 | Input/Output: [[80.37822495825037 59] 139.37822495825037]
Test Case: 664 | Input/Output: [[-95.36479453097961 57] -38.36479453097961]
Test Case: 665 | Input/Output: [[66.24129618643414 39] 105.24129618643414]
Test Case: 666 | Input/Output: [[-56.848248870944175 95] 38.151751129055825]
Test Case: 667 | Input/Output: [[-97.31386787427063 6] -91.31386787427063]
Test Case: 668 | Input/Output: [[-17.603832104748676 -15] -32.603832104748676]
Test Case: 669 | Input/Output: [[-43.929373379206616 91] 47.070626620793384]
Test Case: 670 | Input/Output: [[90.24834931646504 -2] 88.24834931646504]
Test Case: 671 | Input/Output: [[-18.211071336965674 47] 28.788928663034326]
Test Case: 672 | Input/Output: [[56.22384240404031 27] 83.22384240404031]
Test Case: 673 | Input/Output: [[-68.76129364005648 81] 12.23870635994352]
Test Case: 674 | Input/Output: [[43.6216290888367 22] 65.6216290888367]
Test Case: 675 | Input/Output: [[-85.54307125245177 62] -23.543071252451767]
Test Case: 676 | Input/Output: [[-45.454998388123215 70] 24.545001611876785]
Test Case: 677 | Input/Output: [[31.756034672920265 -58] -26.243965327079735]
Test Case: 678 | Input/Output: [[-15.518910476853094 -58] -73.5189104768531]
Test Case: 679 | Input/Output: [[-64.50874319158761 -98] -162.5087431915876]
Test Case: 680 | Input/Output: [[-81.33716156146934 -83] -164.33716156146934]
Test Case: 681 | Input/Output: [[75.31576631461897 -3] 72.31576631461897]
Test Case: 682 | Input/Output: [[55.47633907737804 73] 128.47633907737804]
Test Case: 683 | Input/Output: [[80.25677359413382 73] 153.25677359413382]
Test Case: 684 | Input/Output: [[-73.35008034081707 48] -25.350080340817073]
Test Case: 685 | Input/Output: [[-35.71738725038962 -60] -95.71738725038962]
Test Case: 686 | Input/Output: [[-95.67929121882844 -4] -99.67929121882844]
Test Case: 687 | Input/Output: [[-51.12552523120784 98] 46.87447476879216]
Test Case: 688 | Input/Output: [[68.45998839491415 -82] -13.540011605085851]
Test Case: 689 | Input/Output: [[-98.85017445367954 -62] -160.85017445367953]
Test Case: 690 | Input/Output: [[21.57718168271498 52] 73.57718168271498]
Test Case: 691 | Input/Output: [[-65.57088282864171 -100] -165.57088282864171]
Test Case: 692 | Input/Output: [[73.22603078096398 -47] 26.22603078096398]
Test Case: 693 | Input/Output: [[59.89440071740961 40] 99.89440071740961]
Test Case: 694 | Input/Output: [[-1.083404439890117 20] 18.916595560109883]
Test Case: 695 | Input/Output: [[12.841227655601358 -79] -66.15877234439864]
Test Case: 696 | Input/Output: [[-93.14201433321658 -14] -107.14201433321658]
Test Case: 697 | Input/Output: [[-72.15565845162628 -31] -103.15565845162628]
Test Case: 698 | Input/Output: [[82.38014406048359 42] 124.38014406048359]
Test Case: 699 | Input/Output: [[48.84224261066365 60] 108.84224261066365]
Test Case: 700 | Input/Output: [[54.50957936699814 18] 72.50957936699814]
Test Case: 701 | Input/Output: [[60.60174385133493 -53] 7.6017438513349305]
Test Case: 702 | Input/Output: [[74.73958185396398 20] 94.73958185396398]
Test Case: 703 | Input/Output: [[39.99544204423603 -83] -43.00455795576397]
Test Case: 704 | Input/Output: [[-78.78181711550567 -53] -131.78181711550567]
Test Case: 705 | Input/Output: [[-67.12344400368491 -36] -103.12344400368491]
Test Case: 706 | Input/Output: [[52.912462973808914 -94] -41.087537026191086]
Test Case: 707 | Input/Output: [[78.99775671352995 67] 145.99775671352995]
Test Case: 708 | Input/Output: [[85.68778570770809 -50] 35.68778570770809]
Test Case: 709 | Input/Output: [[-60.85060632220556 -98] -158.85060632220555]
Test Case: 710 | Input/Output: [[-82.21998239545263 -44] -126.21998239545263]
Test Case: 711 | Input/Output: [[66.18828537281644 -33] 33.18828537281644]
Test Case: 712 | Input/Output: [[86.06528247516533 -70] 16.065282475165333]
Test Case: 713 | Input/Output: [[81.22963371459878 20] 101.22963371459878]
Test Case: 714 | Input/Output: [[-58.6974727720679 31] -27.697472772067897]
Test Case: 715 | Input/Output: [[42.361253651639856 -1] 41.361253651639856]
Test Case: 716 | Input/Output: [[-63.89083287514315 2] -61.89083287514315]
Test Case: 717 | Input/Output: [[-70.07321180711905 -79] -149.07321180711904]
Test Case: 718 | Input/Output: [[-30.409945179671126 -98] -128.40994517967113]
Test Case: 719 | Input/Output: [[-79.65578652999399 72] -7.655786529993989]
Test Case: 720 | Input/Output: [[5.461363490636927 -25] -19.538636509363073]
Test Case: 721 | Input/Output: [[-22.957828598182004 99] 76.042171401818]
Test Case: 722 | Input/Output: [[12.60068732192876 -10] 2.60068732192876]
Test Case: 723 | Input/Output: [[14.718829840554548 -99] -84.28117015944545]
Test Case: 724 | Input/Output: [[16.41797360226495 -25] -8.58202639773505]
Test Case: 725 | Input/Output: [[-89.90894766306448 31] -58.90894766306448]
Test Case: 726 | Input/Output: [[21.88582716398406 -94] -72.11417283601594]
Test Case: 727 | Input/Output: [[59.91884554193439 -71] -11.081154458065612]
Test Case: 728 | Input/Output: [[96.22991456668547 95] 191.22991456668547]
Test Case: 729 | Input/Output: [[-29.644231925056204 -35] -64.6442319250562]
Test Case: 730 | Input/Output: [[0.4201072237845551 43] 43.420107223784555]
Test Case: 731 | Input/Output: [[-89.65060766849015 13] -76.65060766849015]
Test Case: 732 | Input/Output: [[88.27031602501651 75] 163.2703160250165]
Test Case: 733 | Input/Output: [[-78.73268939289576 2] -76.73268939289576]
Test Case: 734 | Input/Output: [[25.585840939557585 -39] -13.414159060442415]
Test Case: 735 | Input/Output: [[99.76922045733662 23] 122.76922045733662]
Test Case: 736 | Input/Output: [[-82.13885039695319 -60] -142.1388503969532]
Test Case: 737 | Input/Output: [[-49.180421165328504 -12] -61.180421165328504]
Test Case: 738 | Input/Output: [[-67.15951779893732 23] -44.159517798937316]
Test Case: 739 | Input/Output: [[89.13614754346884 -20] 69.13614754346884]
Test Case: 740 | Input/Output: [[-35.20915978371862 23] -12.209159783718619]
Test Case: 741 | Input/Output: [[-51.099756290184814 -98] -149.0997562901848]
Test Case: 742 | Input/Output: [[-32.15385379906908 92] 59.84614620093092]
Test Case: 743 | Input/Output: [[-67.53248291712674 -72] -139.53248291712674]
Test Case: 744 | Input/Output: [[-48.9471535040257 -13] -61.9471535040257]
Test Case: 745 | Input/Output: [[-72.4361785228893 -32] -104.4361785228893]
Test Case: 746 | Input/Output: [[90.86250265191555 -38] 52.86250265191555]
Test Case: 747 | Input/Output: [[47.12798450498869 55] 102.12798450498869]
Test Case: 748 | Input/Output: [[45.12363348837695 -30] 15.123633488376953]
Test Case: 749 | Input/Output: [[56.08594420625454 -54] 2.0859442062545384]
Test Case: 750 | Input/Output: [[-10.111427451942262 34] 23.888572548057738]
Test Case: 751 | Input/Output: [[-24.249665534897076 -93] -117.24966553489708]
Test Case: 752 | Input/Output: [[71.31551290404767 -17] 54.315512904047665]
Test Case: 753 | Input/Output: [[-76.19428146809686 -43] -119.19428146809686]
Test Case: 754 | Input/Output: [[-33.36104078542688 7] -26.36104078542688]
Test Case: 755 | Input/Output: [[90.22717305217745 57] 147.22717305217745]
Test Case: 756 | Input/Output: [[-94.94175693666675 80] -14.94175693666675]
Test Case: 757 | Input/Output: [[-41.56077279372421 -47] -88.56077279372421]
Test Case: 758 | Input/Output: [[-58.58846951179013 11] -47.58846951179013]
Test Case: 759 | Input/Output: [[-35.4750289863655 75] 39.5249710136345]
Test Case: 760 | Input/Output: [[87.93380392250111 -75] 12.933803922501113]
Test Case: 761 | Input/Output: [[-7.412789641618048 82] 74.58721035838195]
Test Case: 762 | Input/Output: [[-77.38495067994148 66] -11.384950679941483]
Test Case: 763 | Input/Output: [[-34.38502679882673 -65] -99.38502679882673]
Test Case: 764 | Input/Output: [[-18.266004671279433 -39] -57.26600467127943]
Test Case: 765 | Input/Output: [[89.70791945567635 -56] 33.70791945567635]
Test Case: 766 | Input/Output: [[-72.77262081584625 -72] -144.77262081584627]
Test Case: 767 | Input/Output: [[-4.300079104710846 -99] -103.30007910471085]
Test Case: 768 | Input/Output: [[-57.143330409669815 -14] -71.14333040966982]
Test Case: 769 | Input/Output: [[15.616148564642842 50] 65.61614856464284]
Test Case: 770 | Input/Output: [[-48.75795172484922 48] -0.7579517248492209]
Test Case: 771 | Input/Output: [[-22.150682902541433 95] 72.84931709745857]
Test Case: 772 | Input/Output: [[-30.461388362674597 38] 7.538611637325403]
Test Case: 773 | Input/Output: [[-21.58608083373072 96] 74.41391916626928]
Test Case: 774 | Input/Output: [[94.63771712308849 -67] 27.637717123088493]
Test Case: 775 | Input/Output: [[33.28647889786279 -67] -33.71352110213721]
Test Case: 776 | Input/Output: [[-78.58954688447338 -91] -169.58954688447338]
Test Case: 777 | Input/Output: [[-7.41235130573088 60] 52.58764869426912]
Test Case: 778 | Input/Output: [[-33.18081256457128 30] -3.1808125645712835]
Test Case: 779 | Input/Output: [[-25.82628127443627 -85] -110.82628127443627]
Test Case: 780 | Input/Output: [[-77.39539781864974 82] 4.604602181350259]
Test Case: 781 | Input/Output: [[88.42124553968509 -13] 75.42124553968509]
Test Case: 782 | Input/Output: [[-13.71854836591811 72] 58.28145163408189]
Test Case: 783 | Input/Output: [[-44.23438669639466 -59] -103.23438669639467]
Test Case: 784 | Input/Output: [[43.9890855577452 -70] -26.0109144422548]
Test Case: 785 | Input/Output: [[-99.70519109599825 72] -27.705191095998245]
Test Case: 786 | Input/Output: [[35.44047032212728 -59] -23.559529677872717]
Test Case: 787 | Input/Output: [[89.10737557038439 79] 168.1073755703844]
Test Case: 788 | Input/Output: [[-28.604818640314818 -33] -61.60481864031482]
Test Case: 789 | Input/Output: [[5.852862191159275 -65] -59.147137808840725]
Test Case: 790 | Input/Output: [[34.465773026171235 62] 96.46577302617123]
Test Case: 791 | Input/Output: [[65.09157387961884 67] 132.09157387961884]
Test Case: 792 | Input/Output: [[67.45388711394955 44] 111.45388711394955]
Test Case: 793 | Input/Output: [[-7.636857856161612 -93] -100.63685785616161]
Test Case: 794 | Input/Output: [[-93.74384081439129 -76] -169.7438408143913]
Test Case: 795 | Input/Output: [[-8.843627096050866 26] 17.156372903949134]
Test Case: 796 | Input/Output: [[59.326109701026326 17] 76.32610970102633]
Test Case: 797 | Input/Output: [[30.4930124372475 -80] -49.5069875627525]
Test Case: 798 | Input/Output: [[-41.981158151030826 68] 26.018841848969174]
Test Case: 799 | Input/Output: [[30.734303759330913 72] 102.73430375933091]
Test Case: 800 | Input/Output: [[-61.654300940250614 27] -34.654300940250614]
Test Case: 801 | Input/Output: [[-97.61249511731674 -80] -177.61249511731674]
Test Case: 802 | Input/Output: [[-37.85192173171134 50] 12.148078268288657]
Test Case: 803 | Input/Output: [[-2.1183083093366406 78] 75.88169169066336]
Test Case: 804 | Input/Output: [[66.61953244413982 21] 87.61953244413982]
Test Case: 805 | Input/Output: [[77.92392042734957 25] 102.92392042734957]
Test Case: 806 | Input/Output: [[45.076787164014945 3] 48.076787164014945]
Test Case: 807 | Input/Output: [[12.282258018830532 -89] -76.71774198116947]
Test Case: 808 | Input/Output: [[25.89209500535037 72] 97.89209500535037]
Test Case: 809 | Input/Output: [[-94.69808238655102 -87] -181.69808238655102]
Test Case: 810 | Input/Output: [[-82.30431041474094 -32] -114.30431041474094]
Test Case: 811 | Input/Output: [[97.3403150206745 94] 191.3403150206745]
Test Case: 812 | Input/Output: [[-6.427693304509702 -1] -7.427693304509702]
Test Case: 813 | Input/Output: [[44.20018050321406 -93] -48.79981949678594]
Test Case: 814 | Input/Output: [[49.75877959308289 -10] 39.75877959308289]
Test Case: 815 | Input/Output: [[-50.49166862087689 18] -32.49166862087689]
Test Case: 816 | Input/Output: [[-46.30873786384313 -11] -57.30873786384313]
Test Case: 817 | Input/Output: [[76.84021678332533 9] 85.84021678332533]
Test Case: 818 | Input/Output: [[-25.936832620554355 -100] -125.93683262055436]
Test Case: 819 | Input/Output: [[42.65890967054261 7] 49.65890967054261]
Test Case: 820 | Input/Output: [[-75.41212344924762 60] -15.412123449247616]
Test Case: 821 | Input/Output: [[49.49068231850282 7] 56.49068231850282]
Test Case: 822 | Input/Output: [[56.01650409050151 -23] 33.01650409050151]
Test Case: 823 | Input/Output: [[15.54264729911003 7] 22.54264729911003]
Test Case: 824 | Input/Output: [[45.64372381861298 82] 127.64372381861298]
Test Case: 825 | Input/Output: [[5.665253964344828 -52] -46.33474603565517]
Test Case: 826 | Input/Output: [[-67.68781815991427 40] -27.687818159914272]
Test Case: 827 | Input/Output: [[49.824109753166084 52] 101.82410975316608]
Test Case: 828 | Input/Output: [[-59.64624704193409 74] 14.353752958065911]
Test Case: 829 | Input/Output: [[70.31105979997685 84] 154.31105979997685]
Test Case: 830 | Input/Output: [[-92.87313079817724 40] -52.87313079817724]
Test Case: 831 | Input/Output: [[98.45891173099037 85] 183.45891173099037]
Test Case: 832 | Input/Output: [[23.8583438677519 27] 50.8583438677519]
Test Case: 833 | Input/Output: [[-54.54833776465237 -14] -68.54833776465237]
Test Case: 834 | Input/Output: [[5.530622786226601 53] 58.5306227862266]
Test Case: 835 | Input/Output: [[-68.55899459761036 81] 12.441005402389635]
Test Case: 836 | Input/Output: [[1.3296002938390217 -99] -97.67039970616098]
Test Case: 837 | Input/Output: [[29.54741867982179 27] 56.54741867982179]
Test Case: 838 | Input/Output: [[-81.68131638756392 43] -38.681316387563925]
Test Case: 839 | Input/Output: [[-81.26587486665036 79] -2.265874866650364]
Test Case: 840 | Input/Output: [[-61.15727534718667 -10] -71.15727534718667]
Test Case: 841 | Input/Output: [[24.642553490370275 79] 103.64255349037028]
Test Case: 842 | Input/Output: [[54.957720398609666 -88] -33.042279601390334]
Test Case: 843 | Input/Output: [[32.50458221213029 20] 52.50458221213029]
Test Case: 844 | Input/Output: [[-44.64787113189273 -28] -72.64787113189273]
Test Case: 845 | Input/Output: [[-42.66204294707923 -74] -116.66204294707923]
Test Case: 846 | Input/Output: [[-51.79661008713457 38] -13.796610087134567]
Test Case: 847 | Input/Output: [[70.44665080192729 -75] -4.553349198072709]
Test Case: 848 | Input/Output: [[-56.943051246699206 -35] -91.94305124669921]
Test Case: 849 | Input/Output: [[-68.41339511189443 -63] -131.41339511189443]
Test Case: 850 | Input/Output: [[-72.5589037889266 42] -30.5589037889266]
Test Case: 851 | Input/Output: [[58.58175635724808 -93] -34.41824364275192]
Test Case: 852 | Input/Output: [[25.95843604199905 60] 85.95843604199905]
Test Case: 853 | Input/Output: [[-38.22656319850031 14] -24.22656319850031]
Test Case: 854 | Input/Output: [[-80.11747728383816 -44] -124.11747728383816]
Test Case: 855 | Input/Output: [[61.88544203798432 -38] 23.88544203798432]
Test Case: 856 | Input/Output: [[24.24230400542497 -24] 0.24230400542496966]
Test Case: 857 | Input/Output: [[-81.18024084070605 77] -4.180240840706048]
Test Case: 858 | Input/Output: [[28.75101198837004 15] 43.75101198837004]
Test Case: 859 | Input/Output: [[77.83562732523475 82] 159.83562732523475]
Test Case: 860 | Input/Output: [[-62.43157113518749 63] 0.5684288648125104]
Test Case: 861 | Input/Output: [[-21.766477651866367 -69] -90.76647765186637]
Test Case: 862 | Input/Output: [[64.17027616442971 3] 67.17027616442971]
Test Case: 863 | Input/Output: [[80.2547886439136 15] 95.2547886439136]
Test Case: 864 | Input/Output: [[30.002229672439483 -64] -33.99777032756052]
Test Case: 865 | Input/Output: [[-15.891134953549013 1] -14.891134953549013]
Test Case: 866 | Input/Output: [[-73.65785963277355 19] -54.65785963277355]
Test Case: 867 | Input/Output: [[75.95629172545642 -15] 60.956291725456424]
Test Case: 868 | Input/Output: [[-32.12995725208839 60] 27.87004274791161]
Test Case: 869 | Input/Output: [[62.384785820301005 -95] -32.615214179698995]
Test Case: 870 | Input/Output: [[35.66246252822296 9] 44.66246252822296]
Test Case: 871 | Input/Output: [[14.930134957515534 94] 108.93013495751553]
Test Case: 872 | Input/Output: [[64.80519884395565 -25] 39.80519884395565]
Test Case: 873 | Input/Output: [[39.845131497879436 -65] -25.154868502120564]
Test Case: 874 | Input/Output: [[-95.82099602747465 5] -90.82099602747465]
Test Case: 875 | Input/Output: [[96.58045036887125 31] 127.58045036887125]
Test Case: 876 | Input/Output: [[90.08952209657087 -22] 68.08952209657087]
Test Case: 877 | Input/Output: [[-7.7080528963903845 19] 11.291947103609616]
Test Case: 878 | Input/Output: [[-22.270980456971827 -60] -82.27098045697183]
Test Case: 879 | Input/Output: [[-15.047452484576993 -15] -30.047452484576993]
Test Case: 880 | Input/Output: [[-10.476637573224053 -41] -51.47663757322405]
Test Case: 881 | Input/Output: [[99.45645563814878 -15] 84.45645563814878]
Test Case: 882 | Input/Output: [[-91.95431512941296 38] -53.95431512941296]
Test Case: 883 | Input/Output: [[77.05142935406724 67] 144.05142935406724]
Test Case: 884 | Input/Output: [[-90.50809366247063 -30] -120.50809366247063]
Test Case: 885 | Input/Output: [[50.525536685193714 -77] -26.474463314806286]
Test Case: 886 | Input/Output: [[-68.67546746325976 -16] -84.67546746325976]
Test Case: 887 | Input/Output: [[-33.032420448787775 -1] -34.032420448787775]
Test Case: 888 | Input/Output: [[-82.92540910992376 2] -80.92540910992376]
Test Case: 889 | Input/Output: [[73.10636878534146 26] 99.10636878534146]
Test Case: 890 | Input/Output: [[-38.009339629150915 -61] -99.00933962915092]
Test Case: 891 | Input/Output: [[27.036985035811597 12] 39.0369850358116]
Test Case: 892 | Input/Output: [[50.7304068843446 -100] -49.2695931156554]
Test Case: 893 | Input/Output: [[-60.462345133376495 -40] -100.46234513337649]
Test Case: 894 | Input/Output: [[24.098867846954704 47] 71.0988678469547]
Test Case: 895 | Input/Output: [[55.27094148456305 -83] -27.729058515436947]
Test Case: 896 | Input/Output: [[34.446705578290675 16] 50.446705578290675]
Test Case: 897 | Input/Output: [[-42.45273247177881 -40] -82.4527324717788]
Test Case: 898 | Input/Output: [[8.001208439800237 -6] 2.001208439800237]
Test Case: 899 | Input/Output: [[34.207427563623156 20] 54.207427563623156]
Test Case: 900 | Input/Output: [[-13.369816840256405 -96] -109.3698168402564]
Test Case: 901 | Input/Output: [[51.6731956440575 -40] 11.6731956440575]
Test Case: 902 | Input/Output: [[66.21067008280247 38] 104.21067008280247]
Test Case: 903 | Input/Output: [[4.30748057982278 3] 7.30748057982278]
Test Case: 904 | Input/Output: [[54.26353246450313 41] 95.26353246450313]
Test Case: 905 | Input/Output: [[-40.16489233457212 58] 17.835107665427877]
Test Case: 906 | Input/Output: [[6.071313515958352 -88] -81.92868648404165]
Test Case: 907 | Input/Output: [[-86.45562807530266 99] 12.544371924697344]
Test Case: 908 | Input/Output: [[-19.39549066029771 -79] -98.39549066029771]
Test Case: 909 | Input/Output: [[-51.23947932890929 2] -49.23947932890929]
Test Case: 910 | Input/Output: [[-82.68695127638699 -72] -154.686951276387]
Test Case: 911 | Input/Output: [[-88.49097053693878 48] -40.490970536938775]
Test Case: 912 | Input/Output: [[79.92654481485809 17] 96.92654481485809]
Test Case: 913 | Input/Output: [[-41.19315527285063 -8] -49.19315527285063]
Test Case: 914 | Input/Output: [[-62.490274958867055 77] 14.509725041132945]
Test Case: 915 | Input/Output: [[95.22252755022629 -10] 85.22252755022629]
Test Case: 916 | Input/Output: [[38.46297277000198 58] 96.46297277000198]
Test Case: 917 | Input/Output: [[-23.025890990747968 36] 12.974109009252032]
Test Case: 918 | Input/Output: [[26.290148983501325 -72] -45.709851016498675]
Test Case: 919 | Input/Output: [[-85.94744037171766 -95] -180.94744037171768]
Test Case: 920 | Input/Output: [[-11.284626002530459 -17] -28.28462600253046]
Test Case: 921 | Input/Output: [[22.425466688353325 49] 71.42546668835332]
Test Case: 922 | Input/Output: [[-5.520768570591244 75] 69.47923142940876]
Test Case: 923 | Input/Output: [[-40.19395923366274 -19] -59.19395923366274]
Test Case: 924 | Input/Output: [[-69.68118646093203 66] -3.6811864609320253]
Test Case: 925 | Input/Output: [[12.258041667004221 32] 44.25804166700422]
Test Case: 926 | Input/Output: [[-37.80345976496373 -62] -99.80345976496373]
Test Case: 927 | Input/Output: [[-95.8067307082452 27] -68.8067307082452]
Test Case: 928 | Input/Output: [[-92.66528322705705 -96] -188.66528322705705]
Test Case: 929 | Input/Output: [[41.31163362682753 -83] -41.68836637317247]
Test Case: 930 | Input/Output: [[-89.57332068467376 -32] -121.57332068467376]
Test Case: 931 | Input/Output: [[-27.20673402443427 30] 2.793265975565731]
Test Case: 932 | Input/Output: [[-86.9372378944255 -4] -90.9372378944255]
Test Case: 933 | Input/Output: [[62.30980149378033 21] 83.30980149378033]
Test Case: 934 | Input/Output: [[14.623788847649706 44] 58.623788847649706]
Test Case: 935 | Input/Output: [[-99.1284855886575 90] -9.128485588657497]
Test Case: 936 | Input/Output: [[-48.00927234502055 31] -17.00927234502055]
Test Case: 937 | Input/Output: [[-32.64446257882703 -40] -72.64446257882703]
Test Case: 938 | Input/Output: [[72.29047787174372 -67] 5.290477871743718]
Test Case: 939 | Input/Output: [[0.2708914480936073 -4] -3.7291085519063927]
Test Case: 940 | Input/Output: [[-49.85584710182596 1] -48.85584710182596]
Test Case: 941 | Input/Output: [[33.032083477312426 -100] -66.96791652268757]
Test Case: 942 | Input/Output: [[62.05107704460539 -25] 37.05107704460539]
Test Case: 943 | Input/Output: [[2.0537010224848586 92] 94.05370102248486]
Test Case: 944 | Input/Output: [[53.2323165690847 16] 69.2323165690847]
Test Case: 945 | Input/Output: [[-39.70017249008817 -66] -105.70017249008816]
Test Case: 946 | Input/Output: [[14.565942089005858 -8] 6.565942089005858]
Test Case: 947 | Input/Output: [[-90.8805480649177 -45] -135.88054806491772]
Test Case: 948 | Input/Output: [[-16.88843375129474 12] -4.888433751294741]
Test Case: 949 | Input/Output: [[59.4610411376143 -24] 35.4610411376143]
Test Case: 950 | Input/Output: [[-64.45175504883804 -77] -141.45175504883804]
Test Case: 951 | Input/Output: [[60.00810882734024 50] 110.00810882734024]
Test Case: 952 | Input/Output: [[7.079598842308556 17] 24.079598842308556]
Test Case: 953 | Input/Output: [[-42.28609989067655 -60] -102.28609989067655]
Test Case: 954 | Input/Output: [[56.41516510534538 -83] -26.58483489465462]
Test Case: 955 | Input/Output: [[-38.588599453984514 16] -22.588599453984514]
Test Case: 956 | Input/Output: [[-47.17695992245747 25] -22.17695992245747]
Test Case: 957 | Input/Output: [[15.572215280240911 -57] -41.42778471975909]
Test Case: 958 | Input/Output: [[-80.8345029787676 0] -80.8345029787676]
Test Case: 959 | Input/Output: [[-97.75082444933352 27] -70.75082444933352]
Test Case: 960 | Input/Output: [[-4.280683696452897 43] 38.7193163035471]
Test Case: 961 | Input/Output: [[-23.564794317027093 -69] -92.5647943170271]
Test Case: 962 | Input/Output: [[-94.40923515399568 10] -84.40923515399568]
Test Case: 963 | Input/Output: [[42.34861403827338 24] 66.34861403827338]
Test Case: 964 | Input/Output: [[63.45794668556107 38] 101.45794668556107]
Test Case: 965 | Input/Output: [[-6.03020659342603 40] 33.96979340657397]
Test Case: 966 | Input/Output: [[89.9171903288956 -96] -6.0828096711044]
Test Case: 967 | Input/Output: [[42.08923523419642 -30] 12.089235234196423]
Test Case: 968 | Input/Output: [[-47.31184590689168 25] -22.311845906891683]
Test Case: 969 | Input/Output: [[65.94100672455414 -4] 61.94100672455414]
Test Case: 970 | Input/Output: [[78.95766787466374 53] 131.95766787466374]
Test Case: 971 | Input/Output: [[35.68911373472588 20] 55.68911373472588]
Test Case: 972 | Input/Output: [[30.122267754936928 1] 31.122267754936928]
Test Case: 973 | Input/Output: [[44.30792312706018 -24] 20.307923127060178]
Test Case: 974 | Input/Output: [[-70.14124594340166 98] 27.858754056598343]
Test Case: 975 | Input/Output: [[1.9254634911009134 52] 53.92546349110091]
Test Case: 976 | Input/Output: [[69.86035185455955 -22] 47.86035185455955]
Test Case: 977 | Input/Output: [[-58.169117074874286 -21] -79.1691170748743]
Test Case: 978 | Input/Output: [[50.40129682847996 -100] -49.59870317152004]
Test Case: 979 | Input/Output: [[21.751824156658216 56] 77.75182415665822]
Test Case: 980 | Input/Output: [[95.896780077693 67] 162.896780077693]
Test Case: 981 | Input/Output: [[-44.66610615100288 -4] -48.66610615100288]
Test Case: 982 | Input/Output: [[91.45768600312971 -57] 34.45768600312971]
Test Case: 983 | Input/Output: [[95.47632549344652 11] 106.47632549344652]
Test Case: 984 | Input/Output: [[-22.341430059957077 57] 34.65856994004292]
Test Case: 985 | Input/Output: [[-17.17213577068361 -15] -32.17213577068361]
Test Case: 986 | Input/Output: [[-46.57700075213498 -96] -142.57700075213498]
Test Case: 987 | Input/Output: [[-68.17541799224666 -52] -120.17541799224666]
Test Case: 988 | Input/Output: [[-82.28428583835085 55] -27.284285838350854]
Test Case: 989 | Input/Output: [[-16.00816943283283 -4] -20.00816943283283]
Test Case: 990 | Input/Output: [[7.9293020757313 -82] -74.0706979242687]
Test Case: 991 | Input/Output: [[-5.039021564993362 88] 82.96097843500664]
Test Case: 992 | Input/Output: [[63.25597984234909 -8] 55.25597984234909]
Test Case: 993 | Input/Output: [[-63.19191829126287 -26] -89.19191829126288]
Test Case: 994 | Input/Output: [[-46.764136009451065 58] 11.235863990548935]
Test Case: 995 | Input/Output: [[61.04967467711785 -97] -35.95032532288215]
Test Case: 996 | Input/Output: [[18.553969139721204 -53] -34.446030860278796]
Test Case: 997 | Input/Output: [[69.25831829389372 40] 109.25831829389372]
Test Case: 998 | Input/Output: [[-39.695783308178044 -5] -44.695783308178044]
Test Case: 999 | Input/Output: [[-43.94322851427561 -19] -62.94322851427561]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = 75 -94 96 9 24 78 106 -83 92 -15 -72 15 90 30 53 -80
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 52846.0
Test mean error for best: 26.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -10.729718716 
Correct output: -23.5320860074 | Program output: -33.5320860074
Correct output: -3.2945776626  | Program output: -49.2945776626
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -53.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction float_max} {:instruction float_sin} {:instruction integer_min} {:instruction float_mult} {:instruction integer_shove} {:instruction float_add} {:instruction integer_pop} {:instruction float_shove} {:instruction print_integer} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction tag_float_592} {:instruction float_mod} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_rot} {:instruction print_float} {:instruction float_dup_items} {:instruction float_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tagged_250} {:instruction float_yankdup} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_dec} {:instruction print_float} {:instruction float_div} {:instruction float_pop} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_add} {:instruction float_tan} {:instruction float_shove} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_cos} {:instruction float_swap} {:instruction 27} {:instruction in1} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_add} {:instruction float_cos} {:instruction tag_float_474} {:instruction print_float} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction in2} {:instruction float_pop} {:instruction integer_min} {:instruction integer_sub} {:instruction integer_flush} {:instruction float_dup} {:instruction float_pop} {:instruction integer_dup} {:instruction float_frominteger} {:instruction float_sub} {:instruction in2})
Best program: (in2 integer_yank integer_rot integer_dup_times float_div float_mult float_max float_sin integer_min float_mult integer_shove float_add integer_pop float_shove print_integer float_dec float_sub integer_inc tag_float_592 float_mod print_integer float_yankdup float_mult float_div print_float float_flush float_mod integer_rot print_float float_dup_items float_swap in1 integer_fromfloat integer_yank tagged_250 float_yankdup in1 integer_dup_items integer_inc integer_mod float_dec print_float float_div float_pop integer_flush float_flush float_dup_times float_dup_items float_add float_tan float_shove print_integer integer_rot float_pop float_dup_items integer_sub print_integer integer_flush float_cos float_swap 27 in1 integer_swap integer_dup_times integer_div integer_mod float_sin integer_yankdup integer_dup integer_pop float_add float_cos tag_float_474 print_float float_mod integer_stackdepth float_cos in2 float_pop integer_min integer_sub integer_flush float_dup float_pop integer_dup float_frominteger float_sub in2)
Errors: [16.0 2 50.0 2 96.0 2 85.0 2 43.0 2 33.0 11 51.0 3 85.0 3 61.0 10 10.0 1 46.0 2 59.0 3 53.0 2 3.0 1 71.0 3 34.0 2 78.0 3 64.0 3 7.0 2 86.0 3 10.0 1 72.0 3 31.0 3 18.0 2 52.0 2]
Total: 1287.0
Mean: 25.74
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 17898.0900774
Median total errors in population: 25342.0
Error averages by case: (687.3976351999994 11.852 717.4394154999968 14.115 716.004523500002 13.166 698.0326431999991 12.471 699.9376492000026 13.108 689.8847112999996 13.767 717.4965723000009 14.205 730.3540445999968 14.217 690.1313141999984 12.022 683.9845135999997 13.233 685.527354700002 12.533 707.7211123000021 13.444 686.3481128000019 12.375 687.2694710999978 11.724 710.9716528999976 13.222 699.7861482000003 13.256 732.1832509999978 13.978 709.6431427999994 13.311 703.3610266999982 13.235 722.591165299998 14.1 687.7306948000008 12.683 710.3527165000005 12.443 699.3982102999998 12.474 711.0659466999998 13.308 686.7800486999982 12.455)
Error minima by case: (0.2427 2 8.6673 2 0.3828 2 1.095 2 0.6909 2 3.0304 9 11.3715 3 26.6256 3 0.2703 8 0.0825 1 0.0699 2 17.2271 3 0.0078 2 0.1477 1 1.8179 2 6.8421 2 3.4278 3 11.2151 3 0.4417 2 26.9397 3 1.0177 1 4.5649 3 7.9975 2 0.2677 2 0.6715 1)
Average genome size in population (length): 50.346
Average program size in population (points): 51.346
Average percent parens in population: 0.046
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.311
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1262274
--- Timings ---
Current time: 1529614986435 milliseconds
Total Time:           3.6 seconds
Initialization:       0.1 seconds,  3.0%
Reproduction:         0.6 seconds, 15.8%
Fitness Testing:      2.9 seconds, 81.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 52846.0
Test mean error for best: 26.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -10.729718716 
Correct output: -23.5320860074 | Program output: -33.5320860074
Correct output: -3.2945776626  | Program output: -49.2945776626
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -53.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_mult} {:instruction float_max} {:instruction float_sin} {:instruction integer_min} {:instruction float_mult} {:instruction integer_shove} {:instruction float_add} {:instruction integer_pop} {:instruction float_shove} {:instruction print_integer} {:instruction float_dec} {:instruction float_sub} {:instruction integer_inc} {:instruction tag_float_592} {:instruction float_mod} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_div} {:instruction print_float} {:instruction float_flush} {:instruction float_mod} {:instruction integer_rot} {:instruction print_float} {:instruction float_dup_items} {:instruction float_swap} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction tagged_250} {:instruction float_yankdup} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_dec} {:instruction print_float} {:instruction float_div} {:instruction float_pop} {:instruction integer_flush} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction float_add} {:instruction float_tan} {:instruction float_shove} {:instruction print_integer} {:instruction integer_rot} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_cos} {:instruction float_swap} {:instruction 27} {:instruction in1} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction integer_pop} {:instruction float_add} {:instruction float_cos} {:instruction tag_float_474} {:instruction print_float} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction in2} {:instruction float_pop} {:instruction integer_min} {:instruction integer_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times float_div float_mult float_max float_sin integer_min float_mult integer_shove float_add integer_pop float_shove print_integer float_dec float_sub integer_inc tag_float_592 float_mod print_integer float_yankdup float_mult float_div print_float float_flush float_mod integer_rot print_float float_dup_items float_swap in1 integer_fromfloat integer_yank tagged_250 float_yankdup in1 integer_dup_items integer_inc integer_mod float_dec print_float float_div float_pop integer_flush float_flush float_dup_times float_dup_items float_add float_tan float_shove print_integer integer_rot float_pop float_dup_items integer_sub print_integer integer_flush float_cos float_swap 27 in1 integer_swap integer_dup_times integer_div integer_mod float_sin integer_yankdup integer_dup integer_pop float_add float_cos tag_float_474 print_float float_mod integer_stackdepth float_cos in2 float_pop integer_min integer_sub)
Errors: [16.0 2 50.0 2 96.0 2 85.0 2 43.0 2 33.0 11 51.0 3 85.0 3 61.0 10 10.0 1 46.0 2 59.0 3 53.0 2 3.0 1 71.0 3 34.0 2 78.0 3 64.0 3 7.0 2 86.0 3 10.0 1 72.0 3 31.0 3 18.0 2 52.0 2]
Total: 1287.0
Mean: 25.74
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 6209.5340963
Median total errors in population: 2322.6618999999996
Error averages by case: (189.22420990000063 10.261 261.4421863000004 11.921 257.46935339999925 10.944 239.8645717999987 10.536 221.63831969999964 10.902 200.2240109000004 12.637 262.4886295000012 12.122 287.9682641999989 12.236 218.42624760000027 10.902 198.6460929000007 11.273 202.13647549999837 10.625 261.91385829999774 11.619 202.19850239999977 10.276 193.44242990000038 9.999 267.1054132000013 11.159 242.4318845999995 11.18 295.61124460000144 11.672 265.2383865000004 11.274 230.10265400000142 11.163 274.1137116999979 11.939 193.0805038999999 11.021 267.8666445000011 10.511 240.3073863999974 10.556 246.93920469999856 11.271 211.09990990000122 10.555)
Error minima by case: (0.2427 2 8.6673 2 0.3828 2 1.095 2 0.8425 2 3.0304 8 11.3715 3 26.6256 3 1.7297 8 0.0825 1 0.1029 2 17.2271 3 0.0078 2 0.1477 1 1.8179 2 7.439 2 3.4278 3 11.2151 3 1.3359 2 21.9397 3 1.7359 1 4.5649 3 8.5945 2 4.7323 2 0.6715 1)
Average genome size in population (length): 61.289
Average program size in population (points): 62.289
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.266
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2801349
--- Timings ---
Current time: 1529614991910 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.8 seconds, 40.5%
Fitness Testing:      4.6 seconds, 48.8%
Report:               0.9 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 52846.0
Test mean error for best: 26.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -10.729718716 
Correct output: -23.5320860074 | Program output: -33.5320860074
Correct output: -3.2945776626  | Program output: -49.2945776626
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -53.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_sub} {:instruction float_dup_items} {:instruction tagged_587} {:instruction integer_min} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction print_integer} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction integer_dup} {:instruction float_inc} {:instruction print_integer} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction float_flush} {:instruction integer_mod} {:instruction float_dup} {:instruction tag_float_102} {:instruction integer_dup_times} {:instruction float_mod} {:instruction float_div} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_yankdup} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_max} {:instruction float_shove} {:instruction float_min} {:instruction print_float} {:instruction float_tan} {:instruction integer_pop} {:instruction float_dup} {:instruction print_float} {:instruction integer_max} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction float_max} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_div} {:instruction tag_float_212} {:instruction float_mod})
Best program: (float_max float_sub float_dup_items tagged_587 integer_min integer_dec integer_yank float_swap in1 print_integer in1 float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_dup_times integer_swap integer_add float_max integer_dup float_inc print_integer float_stackdepth integer_div in2 float_flush integer_mod float_dup tag_float_102 integer_dup_times float_mod float_div integer_yankdup integer_swap float_yankdup float_div float_dup_items integer_max float_shove float_min print_float float_tan integer_pop float_dup print_float integer_max float_yankdup print_float float_inc float_max integer_swap in1 integer_mod integer_stackdepth integer_pop float_div tag_float_212 float_mod)
Errors: [16.0 2 50.0 2 96.0 2 85.0 2 43.0 2 33.0 11 51.0 3 85.0 3 61.0 10 10.0 1 46.0 2 59.0 3 53.0 2 3.0 1 71.0 3 34.0 2 78.0 3 64.0 3 7.0 2 86.0 3 10.0 1 72.0 3 31.0 3 18.0 2 52.0 2]
Total: 1287.0
Mean: 25.74
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4738.905882700006
Median total errors in population: 1337.0
Error averages by case: (153.3273300000004 6.548 191.60316710000015 7.88 208.43642599999978 6.748 194.5315982999995 6.564 173.32236699999984 6.817 163.89403059999972 12.767 193.28985730000016 7.862 215.68974350000013 8.033 178.83338249999977 10.86 149.81970539999978 7.148 172.7751367999994 6.702 194.65760709999938 7.597 177.48142069999986 6.754 146.59339380000026 5.882 200.75832600000052 7.034 176.13370009999977 7.367 216.77425500000052 7.787 197.81881950000022 7.495 163.28609230000046 7.143 210.35518699999935 7.965 151.7546174999999 6.921 200.98995170000038 7.02 175.1994607999992 6.692 174.53244529999947 7.188 170.12286140000046 6.151)
Error minima by case: (1.2427 2 8.6673 2 0.2998 2 4.3599 2 5.8425 2 6.1459 8 11.3715 3 26.6256 3 8.7297 8 7.4679 1 0.9301 2 17.2271 3 0.0202 2 3.0 1 2.8179 2 7.1305 2 3.4278 3 11.2151 3 7.0 2 33.9397 3 9.7359 1 5.5649 3 8.286 2 18.0 2 3.3285 1)
Average genome size in population (length): 61.409
Average program size in population (points): 62.409
Average percent parens in population: 0.018
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.984
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.148
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4344849
--- Timings ---
Current time: 1529614995999 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.4 seconds, 40.2%
Fitness Testing:      6.4 seconds, 48.3%
Report:               1.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 52846.0
Test mean error for best: 26.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -10.729718716 
Correct output: -23.5320860074 | Program output: -33.5320860074
Correct output: -3.2945776626  | Program output: -49.2945776626
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -53.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_max} {:instruction float_div} {:instruction float_tan} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction print_integer} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (integer_max float_div float_tan integer_dup integer_dec integer_yank float_swap in1 print_integer in1 float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_dup_times integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [16.0 2 50.0 2 96.0 2 85.0 2 43.0 2 33.0 11 51.0 3 85.0 3 61.0 10 10.0 1 46.0 2 59.0 3 53.0 2 3.0 1 71.0 3 34.0 2 78.0 3 64.0 3 7.0 2 86.0 3 10.0 1 72.0 3 31.0 3 18.0 2 52.0 2]
Total: 1287.0
Mean: 25.74
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4722.6377293
Median total errors in population: 1290.0
Error averages by case: (155.1034961 3.812 190.05338890000002 4.701 227.96980619999997 3.968 208.78611339999998 3.635 182.7599959 3.937 169.4894898 12.416 190.9381435 4.956 219.94102140000004 4.981 194.52752519999999 10.767 151.53659989999997 3.679 182.7905767 3.961 189.75491839999998 4.68 188.70118789999998 3.924 142.22226100000003 2.861 199.98250370000002 4.072 168.22996170000002 4.342 214.1487222 4.957 194.03947870000002 4.669 153.36980270000004 4.022 220.60743339999996 4.978 150.26041469999998 3.609 200.82577720000003 4.542 165.69324799999993 4.0 162.86695849999998 4.027 179.33490419999998 3.208)
Error minima by case: (1.2427 2 50.0 2 96.0 2 7.6401 2 43.0 2 20.4047 11 51.0 3 85.0 3 11.7297 9 8.4679 1 2.9051 2 42.0 3 0.0202 2 3.0 1 30.0 2 19.1305 2 78.0 3 37.0 3 7.0 2 86.0 3 10.0 1 29.0 3 20.286 2 18.0 2 5.6715 1)
Average genome size in population (length): 58.202
Average program size in population (points): 59.202
Average percent parens in population: 0.019
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.46575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.056
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5809149
--- Timings ---
Current time: 1529614999992 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.2 seconds, 40.7%
Fitness Testing:      8.2 seconds, 46.5%
Report:               2.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 52274.0
Test mean error for best: 26.13700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_dup_times integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [16.0 2 50.0 2 96.0 2 84.0 2 43.0 2 33.0 11 51.0 3 85.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 3.0 1 70.0 2 33.0 3 78.0 3 63.0 3 7.0 2 86.0 3 10.0 1 71.0 3 30.0 2 18.0 2 51.0 1]
Total: 1274.0
Mean: 25.48
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4038.9930572999997
Median total errors in population: 1287.0
Error averages by case: (128.43321360000002 3.295 159.9226711 3.63 200.2246796 3.402 185.23804109999998 3.221 153.36489749999998 3.381 143.4640235 11.748 160.83360050000002 4.384 190.89562080000002 4.42 168.7688109 10.554 124.00672469999999 2.625 155.4730622 3.435 166.79504389999997 4.263 161.5961414 3.391 113.78451090000003 2.315 177.354639 4.142 144.5991745 3.435 184.8619946 4.404 171.2159358 4.254 121.90035130000001 3.46 191.61657789999998 4.416 123.21667939999999 2.556 178.22491580000002 4.144 141.97857389999996 4.077 131.7258739 3.467 153.93629950000002 3.142)
Error minima by case: (2.2427 2 50.0 2 96.0 2 5.0 2 43.0 2 20.4047 11 51.0 3 85.0 3 22.7297 9 9.0 1 3.2946 2 49.2271 3 0.0202 2 3.0 1 53.1821 2 19.1305 2 78.0 3 53.2151 3 7.0 2 86.0 3 10.0 1 52.4351 3 20.286 2 18.0 2 2.0 1)
Average genome size in population (length): 57.386
Average program size in population (points): 58.386
Average percent parens in population: 0.018
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.913
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.032
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 7258224
--- Timings ---
Current time: 1529615004009 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.6 seconds, 40.0%
Fitness Testing:     10.2 seconds, 47.6%
Report:               2.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 52274.0
Test mean error for best: 26.13700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_dup_times integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [16.0 2 50.0 2 96.0 2 84.0 2 43.0 2 33.0 11 51.0 3 85.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 3.0 1 70.0 2 33.0 3 78.0 3 63.0 3 7.0 2 86.0 3 10.0 1 71.0 3 30.0 2 18.0 2 51.0 1]
Total: 1274.0
Mean: 25.48
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4186.621818799999
Median total errors in population: 1287.0
Error averages by case: (132.30836920000002 3.345 168.0441441 3.59 208.0619083 3.45 190.5731012 3.238 161.71303139999998 3.409 147.2914258 11.712 168.93552279999997 4.417 198.6677289 4.461 176.3532662 10.624 131.86588500000002 2.584 163.2502557 3.494 169.31656980000002 4.282 169.35575369999998 3.442 118.58757990000001 2.351 179.8136395 4.259 147.34144840000002 3.374 192.6366805 4.455 173.70210520000003 4.282 130.4385536 3.512 199.45031840000001 4.459 127.0743569 2.517 180.68366170000002 4.165 144.72846589999997 4.195 140.1148516 3.515 159.9261951 3.255)
Error minima by case: (2.2427 2 50.0 2 1.3828 2 7.6401 2 7.8425 2 12.5953 11 51.0 3 59.3744 3 4.4629 9 9.0 1 3.8591 2 41.0 2 0.9059 2 2.8523 1 29.0 2 33.0 2 78.0 3 36.0 2 7.0 2 35.9397 3 9.2641 1 28.0 2 30.0 2 18.0 2 4.3285 1)
Average genome size in population (length): 57.055
Average program size in population (points): 58.055
Average percent parens in population: 0.018
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.382625
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.03
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8699349
--- Timings ---
Current time: 1529615007812 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.0 seconds, 39.4%
Fitness Testing:     12.2 seconds, 48.0%
Report:               3.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 52274.0
Test mean error for best: 26.13700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_fromfloat float_dup_times integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 integer_inc float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [16.0 2 50.0 2 96.0 2 84.0 2 43.0 2 33.0 11 51.0 3 85.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 3.0 1 70.0 2 33.0 3 78.0 3 63.0 3 7.0 2 86.0 3 10.0 1 71.0 3 30.0 2 18.0 2 51.0 1]
Total: 1274.0
Mean: 25.48
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4159.135208099999
Median total errors in population: 1287.0
Error averages by case: (133.42229909999998 3.279 165.17552460000002 3.501 205.35579649999997 3.379 189.97023049999999 3.193 158.887701 3.344 148.25897220000002 11.634 166.08111469999997 4.347 195.91592900000003 4.384 174.5931098 10.545 129.9599606 2.526 161.3815577 3.405 170.87330509999998 4.229 167.500402 3.363 115.83793750000002 2.289 181.36951000000002 4.184 148.90578969999996 3.346 189.86801600000004 4.379 175.27132189999998 4.215 127.5511638 3.434 196.7061699 4.383 128.442243 2.453 182.24233889999996 4.108 146.23874759999998 4.115 137.22080339999997 3.439 157.44926360000002 3.182)
Error minima by case: (3.2427 2 10.6673 2 0.2531 2 38.4211 1 34.1575 1 20.0282 9 13.3715 2 24.6256 3 3.9487 8 8.0 1 3.2946 2 15.2271 2 0.0202 2 2.0 1 4.8179 2 32.0 2 5.4278 2 9.2151 2 6.0 2 24.81 3 9.0 1 7.5649 2 29.0 2 1.862 1 2.1095 1)
Average genome size in population (length): 56.392
Average program size in population (points): 57.392
Average percent parens in population: 0.018
Minimum age in population: 6.5
Maximum age in population: 10.78125
Average age in population: 8.85621875
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.032
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 10122936
--- Timings ---
Current time: 1529615011286 milliseconds
Total Time:          28.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.4 seconds, 39.4%
Fitness Testing:     13.9 seconds, 48.1%
Report:               3.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 52274.0
Test mean error for best: 26.13700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_div} {:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (float_yank float_div in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank integer_dup_items integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [16.0 2 50.0 2 96.0 2 84.0 2 43.0 2 33.0 11 51.0 3 85.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 3.0 1 70.0 2 33.0 3 78.0 3 63.0 3 7.0 2 86.0 3 10.0 1 71.0 3 30.0 2 18.0 2 51.0 1]
Total: 1274.0
Mean: 25.48
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3749.2500616999996
Median total errors in population: 1287.0
Error averages by case: (115.1080114 3.025 151.662 3.217 191.8365294 3.103 172.3865489 2.939 144.5076618 3.078 130.1424278 11.543 152.555 4.081 182.917 4.117 158.4953971 10.456 113.807 2.344 146.027 3.136 152.23045419999997 3.97 152.292 3.099 99.49221390000004 2.032 162.9783643 3.82 129.795261 3.187 176.666 4.114 156.7134301 3.965 113.263 3.15 183.81 4.114 109.97807019999999 2.169 163.8718701 3.88 127.11257189999999 3.767 123.086 3.159 140.2412496 2.81)
Error minima by case: (15.0 2 49.0 2 95.0 2 18.9885 2 42.0 2 32.0 11 50.0 2 84.0 3 43.3971 9 9.0 1 45.0 2 41.0 2 52.0 2 2.0 1 29.0 2 33.0 2 77.0 3 36.0 2 6.0 2 85.0 3 9.0 1 28.0 2 30.0 2 17.0 2 28.9356 1)
Average genome size in population (length): 55.254
Average program size in population (points): 56.254
Average percent parens in population: 0.019
Minimum age in population: 7.8125
Maximum age in population: 12.15625
Average age in population: 10.343109375
Median age in population: 10.4140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.025
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11519186
--- Timings ---
Current time: 1529615015101 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.8 seconds, 39.2%
Fitness Testing:     15.9 seconds, 48.5%
Report:               3.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 52274.0
Test mean error for best: 26.13700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 19.2427433247 
Correct output: -109.6672675873 | Program output: -59.6672675873
Correct output: -97.3828405386 | Program output: -1.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -7.8424651996 
Correct output: -20.4046895985 | Program output: 12.5953104015 
Correct output: -114.3715424664 | Program output: -63.3715424664
Correct output: -144.3743926958 | Program output: -59.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 25.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -82.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -64.3359015133
Correct output: -121.9396893018 | Program output: -35.9396893018
Correct output: 14.7358583393  | Program output: 24.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -77.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank print_float integer_dup integer_inc integer_mult integer_min float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 integer_inc float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74)
Errors: [16.0 2 50.0 2 96.0 2 84.0 2 43.0 2 33.0 11 51.0 3 85.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 3.0 1 70.0 2 33.0 3 78.0 3 63.0 3 7.0 2 86.0 3 10.0 1 71.0 3 30.0 2 18.0 2 51.0 1]
Total: 1274.0
Mean: 25.48
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 3269.6841766
Median total errors in population: 1274.0
Error averages by case: (97.80989819999999 2.87 129.2106574 3.044 171.21780399999997 2.947 158.4142956 2.832 122.636183 2.94 113.40586959999999 11.424 130.13877010000002 3.938 161.30477869999999 3.966 138.3969259 10.343 91.80325179999998 2.612 124.64653929999999 2.96 136.65188260000002 3.858 131.0347162 2.932 81.52516640000002 1.89 147.62383760000003 3.273 113.77178599999999 3.495 154.95493900000002 3.958 141.2258707 3.847 89.7936633 2.985 162.1514746 3.964 92.3373915 2.003 148.5370907 3.769 111.03094159999999 3.211 99.91945869999999 2.987 125.8399841 2.253)
Error minima by case: (3.2427 2 49.0 2 95.0 2 78.0154 2 42.0 2 20.4047 11 50.0 2 84.0 3 50.2703 9 9.0 1 3.2946 2 36.4284 3 0.0202 2 2.0 1 32.4734 2 33.0 2 77.0 3 32.4405 3 6.0 2 85.0 3 9.0 1 33.2205 3 30.0 2 17.0 2 51.0 1)
Average genome size in population (length): 53.875
Average program size in population (points): 54.875
Average percent parens in population: 0.019
Minimum age in population: 9.0625
Maximum age in population: 13.5234375
Average age in population: 11.865546875
Median age in population: 11.9296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.023
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12886036
--- Timings ---
Current time: 1529615018626 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.3 seconds, 39.4%
Fitness Testing:     17.5 seconds, 48.4%
Report:               4.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 51775.0
Test mean error for best: 25.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 18.2427433247 
Correct output: -109.6672675873 | Program output: -60.6672675873
Correct output: -97.3828405386 | Program output: -2.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -8.8424651996 
Correct output: -20.4046895985 | Program output: 11.5953104015 
Correct output: -114.3715424664 | Program output: -64.3715424664
Correct output: -144.3743926958 | Program output: -60.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 24.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -83.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -65.3359015133
Correct output: -121.9396893018 | Program output: -36.9396893018
Correct output: 14.7358583393  | Program output: 23.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -78.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction tagged_184} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_dup_items} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_flush} {:instruction float_cos} {:instruction float_swap} {:instruction 27} {:instruction in1} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction integer_mult} {:instruction float_max} {:instruction float_dup_items} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_stackdepth})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc tag_float_103 integer_sub float_max float_dup_times integer_swap integer_add float_max float_mod float_max float_dup_times integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush tagged_184 float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup integer_dup_times integer_yank float_dup_items integer_sub print_integer integer_flush float_cos float_swap 27 in1 integer_swap integer_dup_times integer_div integer_mod float_sin integer_yankdup integer_dup float_sin integer_fromfloat float_mult integer_mult float_max float_dup_items in1 integer_stackdepth float_stackdepth)
Errors: [15.0 2 49.0 2 95.0 2 84.0 2 42.0 2 32.0 12 50.0 2 84.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 2.0 1 70.0 2 33.0 3 77.0 3 63.0 3 6.0 2 85.0 3 9.0 2 71.0 3 30.0 2 17.0 2 51.0 1]
Total: 1262.0
Mean: 25.24
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2496.2328593999996
Median total errors in population: 1274.0
Error averages by case: (65.5845628 2.597 98.59981570000001 2.715 140.9246054 2.634 129.0977988 2.566 90.81772190000001 2.614 81.4463482 11.316 99.56575349999999 3.615 131.70861979999998 3.643 106.819901 10.271 59.72000719999999 2.632 93.5404399 2.695 106.511637 3.591 100.1273073 2.665 52.517357000000004 1.599 117.7994391 2.682 82.82307699999998 3.519 125.203107 3.635 111.232926 3.585 57.9465551 2.665 132.53677059999998 3.637 60.200454400000005 1.687 118.7344449 3.537 80.01547210000001 2.65 68.41698370000002 2.669 97.266754 1.656)
Error minima by case: (2.2427 2 49.0 2 0.3828 2 8.6401 2 5.8425 2 13.5953 8 50.0 2 57.3744 3 8.7297 9 9.0 1 1.9051 2 58.0 3 0.8617 2 2.0 1 68.1821 2 33.0 2 77.0 3 63.0 3 6.0 2 33.9397 3 9.0 1 66.4351 3 30.0 2 17.0 2 5.3285 1)
Average genome size in population (length): 52.752
Average program size in population (points): 53.752
Average percent parens in population: 0.019
Minimum age in population: 10.53125
Maximum age in population: 15.328125
Average age in population: 13.37491015625
Median age in population: 13.423828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14228223
--- Timings ---
Current time: 1529615022416 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.7 seconds, 39.3%
Fitness Testing:     19.4 seconds, 48.6%
Report:               4.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 49112.116500000004
Test mean error for best: 24.55606
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 1.0           
Correct output: -109.6672675873 | Program output: -58.6672675873
Correct output: -97.3828405386 | Program output: -0.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -6.8424651996 
Correct output: -20.4046895985 | Program output: 1.0           
Correct output: -114.3715424664 | Program output: -62.3715424664
Correct output: -144.3743926958 | Program output: -58.3743926958
Correct output: 50.270281284   | Program output: -1.0          
Correct output: -23.5320860074 | Program output: -1.0          
Correct output: -3.2945776626  | Program output: -1.0          
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -1.0          
Correct output: 22.147714426   | Program output: 1.0           
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -81.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -63.3359015133
Correct output: -121.9396893018 | Program output: -34.9396893018
Correct output: 14.7358583393  | Program output: 1.0           
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -76.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction float_mod} {:instruction print_float} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank float_mod print_float float_swap integer_inc integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_sub integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [2.2427 11 51.0 3 97.0 2 85.0 2 44.0 2 21.4047 12 52.0 3 86.0 3 51.2703 10 22.5321 11 2.2946 11 59.0 3 0.9798 10 21.1477 11 71.0 3 34.0 2 79.0 3 64.0 3 8.0 2 87.0 3 13.7359 11 72.0 3 31.0 3 19.0 2 52.0 2]
Total: 1257.6077999999998
Mean: 25.152157
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2491.7568642999995
Median total errors in population: 1274.0
Error averages by case: (66.1402293 2.589 98.58514819999999 2.688 142.0187749 2.635 129.5348538 2.529 91.7939969 2.594 82.2560708 11.325 99.5455588 3.592 131.7641555 3.62 106.95124030000001 10.274 58.64523 2.592 92.6580994 2.649 105.37617120000002 3.554 99.2779831 2.623 53.39718440000001 1.595 116.73353180000001 2.63 81.63061929999999 3.498 125.19853430000002 3.612 110.11804250000002 3.547 57.83552469999999 2.637 132.643192 3.618 60.528112199999995 1.677 117.6751857 3.502 78.801256 2.607 68.30203909999999 2.637 97.90913010000001 1.613)
Error minima by case: (2.2427 2 49.0 2 0.3828 2 8.6401 2 6.8425 1 13.5953 11 50.0 2 58.3744 3 9.7297 9 9.0 1 2.2946 2 58.0 3 0.9798 2 2.0 1 68.1821 2 33.0 2 77.0 2 63.0 3 6.0 2 34.9397 3 9.0 1 66.4351 3 30.0 2 17.0 1 5.3285 1)
Average genome size in population (length): 52.262
Average program size in population (points): 53.262
Average percent parens in population: 0.019
Minimum age in population: 12.52734375
Maximum age in population: 17.02734375
Average age in population: 14.8518125
Median age in population: 14.8984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.027
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15557960
--- Timings ---
Current time: 1529615025873 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.1 seconds, 39.2%
Fitness Testing:     21.1 seconds, 48.5%
Report:               5.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 49112.116500000004
Test mean error for best: 24.55606
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 1.0           
Correct output: -109.6672675873 | Program output: -58.6672675873
Correct output: -97.3828405386 | Program output: -0.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -6.8424651996 
Correct output: -20.4046895985 | Program output: 1.0           
Correct output: -114.3715424664 | Program output: -62.3715424664
Correct output: -144.3743926958 | Program output: -58.3743926958
Correct output: 50.270281284   | Program output: -1.0          
Correct output: -23.5320860074 | Program output: -1.0          
Correct output: -3.2945776626  | Program output: -1.0          
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -1.0          
Correct output: 22.147714426   | Program output: 1.0           
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -81.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -63.3359015133
Correct output: -121.9396893018 | Program output: -34.9396893018
Correct output: 14.7358583393  | Program output: 1.0           
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -76.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction float_mod} {:instruction print_float} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank float_mod print_float float_swap integer_inc integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_sub integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_flush integer_inc float_pop integer_yankdup in1 63.01692924572032 in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [2.2427 11 51.0 3 97.0 2 85.0 2 44.0 2 21.4047 12 52.0 3 86.0 3 51.2703 10 22.5321 11 2.2946 11 59.0 3 0.9798 10 21.1477 11 71.0 3 34.0 2 79.0 3 64.0 3 8.0 2 87.0 3 13.7359 11 72.0 3 31.0 3 19.0 2 52.0 2]
Total: 1257.6077999999998
Mean: 25.152157
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2749.3982502999997
Median total errors in population: 1274.0
Error averages by case: (76.30171020000002 2.763 108.9653346 2.84 151.0495294 2.753 138.6502059 2.66 101.4003468 2.731 92.0380701 11.41 109.90974299999999 3.713 141.7597488 3.759 116.286893 10.324 69.66259109999997 2.785 102.88579799999997 2.859 115.7605348 3.685 109.3665186 2.82 64.08318000000001 1.773 126.9858954 2.797 92.28998289999998 3.601 135.2468556 3.75 120.447406 3.684 68.6836718 2.78 142.6498794 3.755 71.06622159999999 1.889 127.91654919999999 3.623 89.4936195 2.77 79.0165354 2.784 107.3974292 1.776)
Error minima by case: (2.2427 2 49.0 2 0.6172 2 9.6401 1 5.8425 2 14.5953 11 50.0 2 57.3744 3 8.7297 8 8.0 1 2.2946 2 57.0 3 0.0202 2 2.0 1 69.0 2 32.0 2 77.0 3 62.0 3 6.0 2 33.9397 3 9.0 1 67.4351 2 29.0 2 17.0 2 6.3285 1)
Average genome size in population (length): 52.468
Average program size in population (points): 53.468
Average percent parens in population: 0.019
Minimum age in population: 13.52734375
Maximum age in population: 18.220703125
Average age in population: 16.3504296875
Median age in population: 16.39404296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.025
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16893085
--- Timings ---
Current time: 1529615029411 milliseconds
Total Time:          47.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.5 seconds, 39.4%
Fitness Testing:     22.8 seconds, 48.5%
Report:               5.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 49112.116500000004
Test mean error for best: 24.55606
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 1.0           
Correct output: -109.6672675873 | Program output: -58.6672675873
Correct output: -97.3828405386 | Program output: -0.3828405386 
Correct output: 92.6401192912  | Program output: 7.6401192912  
Correct output: -50.8424651996 | Program output: -6.8424651996 
Correct output: -20.4046895985 | Program output: 1.0           
Correct output: -114.3715424664 | Program output: -62.3715424664
Correct output: -144.3743926958 | Program output: -58.3743926958
Correct output: 50.270281284   | Program output: -1.0          
Correct output: -23.5320860074 | Program output: -1.0          
Correct output: -3.2945776626  | Program output: -1.0          
Correct output: 134.2271184849 | Program output: 75.2271184849 
Correct output: -0.0202199253  | Program output: -1.0          
Correct output: 22.147714426   | Program output: 1.0           
Correct output: 138.1821302172 | Program output: 67.1821302172 
Correct output: 104.1305174885 | Program output: 70.1305174885 
Correct output: -160.4278073292 | Program output: -81.4278073292
Correct output: 138.2150716868 | Program output: 74.2150716868 
Correct output: -71.3359015133 | Program output: -63.3359015133
Correct output: -121.9396893018 | Program output: -34.9396893018
Correct output: 14.7358583393  | Program output: 1.0           
Correct output: 137.435054132  | Program output: 65.435054132  
Correct output: 105.285953282  | Program output: 74.285953282  
Correct output: -95.2677404455 | Program output: -76.2677404455
Correct output: 56.3284961788  | Program output: 4.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_yank} {:instruction float_mod} {:instruction print_float} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_mod} {:instruction float_max} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_shove} {:instruction float_shove} {:instruction tagged_248} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup} {:instruction float_pop} {:instruction integer_flush} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_items})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_yank float_mod print_float float_swap integer_inc integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub float_yank float_sub integer_swap integer_add float_max float_mod float_max float_yank float_dup_times float_pop integer_shove float_shove tagged_248 integer_stackdepth float_dup float_dup float_pop integer_flush float_flush integer_inc float_dup_items)
Errors: [2.2427 11 51.0 3 97.0 2 85.0 2 44.0 2 21.4047 12 52.0 3 86.0 3 51.2703 10 22.5321 11 2.2946 11 59.0 3 0.9798 10 21.1477 11 71.0 3 34.0 2 79.0 3 64.0 3 8.0 2 87.0 3 13.7359 11 72.0 3 31.0 3 19.0 2 52.0 2]
Total: 1257.6077999999998
Mean: 25.152157
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2524.2801479999994
Median total errors in population: 1274.0
Error averages by case: (65.81404670000006 2.995 99.57871739999999 2.799 141.952186 2.675 130.6856146 2.632 91.78698240000001 2.66 81.81333429999998 11.469 100.5413414 3.534 132.7221442 3.679 107.5027175 10.247 61.292626699999936 3.016 92.82423629999995 3.064 107.70533280000001 3.646 99.07276520000002 2.995 55.25811390000005 2.057 118.99118840000001 2.794 83.97818129999999 3.542 126.20368930000001 3.666 112.43188740000002 3.64 58.8757877 2.697 133.5430765 3.677 61.19648619999999 2.27 119.91891199999999 3.59 81.1814972 2.769 69.3617573 2.698 99.44952530000002 1.787)
Error minima by case: (0.4812 2 48.0 2 0.3828 2 8.6401 1 6.8425 2 13.5953 10 49.0 2 58.3744 3 9.7297 8 8.0 1 2.2946 2 57.0 2 0.0202 2 1.0 1 63.88 2 29.8284 2 76.0 3 62.0 2 5.0 2 34.9397 3 6.4812 1 63.1329 2 29.0 2 16.0 2 5.3285 1)
Average genome size in population (length): 54.576
Average program size in population (points): 55.576
Average percent parens in population: 0.019
Minimum age in population: 14.91015625
Maximum age in population: 19.6845703125
Average age in population: 17.89895361328125
Median age in population: 17.95703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.032
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 18282410
--- Timings ---
Current time: 1529615032866 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.9 seconds, 39.3%
Fitness Testing:     24.5 seconds, 48.6%
Report:               6.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 51265.0
Test mean error for best: 25.63250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 17.2427433247 
Correct output: -109.6672675873 | Program output: -61.6672675873
Correct output: -97.3828405386 | Program output: -3.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -9.8424651996 
Correct output: -20.4046895985 | Program output: 10.5953104015 
Correct output: -114.3715424664 | Program output: -65.3715424664
Correct output: -144.3743926958 | Program output: -61.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 23.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -84.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -66.3359015133
Correct output: -121.9396893018 | Program output: -37.9396893018
Correct output: 14.7358583393  | Program output: 22.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -79.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc tag_float_103 integer_sub float_max float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [14.0 2 48.0 3 94.0 2 84.0 2 41.0 2 31.0 11 49.0 3 83.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 1.0 1 70.0 2 33.0 3 76.0 3 63.0 3 5.0 2 84.0 3 8.0 2 71.0 3 30.0 2 16.0 2 51.0 1]
Total: 1250.0
Mean: 25.0
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2587.4300676999997
Median total errors in population: 1262.0
Error averages by case: (66.13055050000024 4.602 103.5475417 3.059 145.5462755 2.753 132.4020302 2.675 95.58332709999999 2.734 82.62089839999983 11.907 104.5271106 3.337 136.58691860000002 3.754 107.89230980000008 10.238 65.62631119999966 4.636 86.94595519999982 4.651 109.7271772 3.68 91.66876920000014 4.406 60.64736520000022 3.855 121.0814743 3.033 85.7814231 3.44 130.1859578 3.753 114.4917145 3.672 62.9966124 2.781 137.31864750000003 3.756 64.60323809999994 4.359 122.01222480000001 3.615 82.9773835 2.991 73.4956572 2.779 100.55219410000001 2.015)
Error minima by case: (1.2427 2 48.0 2 94.0 2 35.2687 1 41.0 2 19.945 9 49.0 2 83.0 3 48.2703 8 8.0 1 2.2946 2 57.0 2 0.0202 2 1.0 1 69.0 2 32.0 2 76.0 3 62.0 2 5.0 2 84.0 3 8.0 1 70.0 2 29.0 2 16.0 2 38.5926 1)
Average genome size in population (length): 57.854
Average program size in population (points): 58.854
Average percent parens in population: 0.018
Minimum age in population: 16.845703125
Maximum age in population: 21.372314453125
Average age in population: 19.47621728515625
Median age in population: 19.555908203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.042
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19752197
--- Timings ---
Current time: 1529615036573 milliseconds
Total Time:          54.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.5 seconds, 39.6%
Fitness Testing:     26.3 seconds, 48.5%
Report:               6.4 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 51265.0
Test mean error for best: 25.63250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 17.2427433247 
Correct output: -109.6672675873 | Program output: -61.6672675873
Correct output: -97.3828405386 | Program output: -3.3828405386 
Correct output: 92.6401192912  | Program output: 8.6401192912  
Correct output: -50.8424651996 | Program output: -9.8424651996 
Correct output: -20.4046895985 | Program output: 10.5953104015 
Correct output: -114.3715424664 | Program output: -65.3715424664
Correct output: -144.3743926958 | Program output: -61.3743926958
Correct output: 50.270281284   | Program output: -9.729718716  
Correct output: -23.5320860074 | Program output: -32.5320860074
Correct output: -3.2945776626  | Program output: -48.2945776626
Correct output: 134.2271184849 | Program output: 76.2271184849 
Correct output: -0.0202199253  | Program output: -52.0202199253
Correct output: 22.147714426   | Program output: 23.147714426  
Correct output: 138.1821302172 | Program output: 68.1821302172 
Correct output: 104.1305174885 | Program output: 71.1305174885 
Correct output: -160.4278073292 | Program output: -84.4278073292
Correct output: 138.2150716868 | Program output: 75.2150716868 
Correct output: -71.3359015133 | Program output: -66.3359015133
Correct output: -121.9396893018 | Program output: -37.9396893018
Correct output: 14.7358583393  | Program output: 22.7358583393 
Correct output: 137.435054132  | Program output: 66.435054132  
Correct output: 105.285953282  | Program output: 75.285953282  
Correct output: -95.2677404455 | Program output: -79.2677404455
Correct output: 56.3284961788  | Program output: 5.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction integer_max} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 integer_max in1 float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc tag_float_103 integer_sub float_max float_dup_times float_max integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [14.0 2 48.0 3 94.0 2 84.0 2 41.0 2 31.0 11 49.0 3 83.0 3 60.0 10 9.0 2 45.0 2 58.0 3 52.0 2 1.0 1 70.0 2 33.0 3 76.0 3 63.0 3 5.0 2 84.0 3 8.0 2 71.0 3 30.0 2 16.0 2 51.0 1]
Total: 1250.0
Mean: 25.0
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2389.905237099998
Median total errors in population: 1257.6077999999998
Error averages by case: (50.52896360000023 9.375 96.59573060000001 3.49 138.1221528 2.657 124.8457314 2.73 87.7743386 2.648 68.09711789999943 12.067 97.57389959999999 3.511 129.8640513 3.666 94.76407099999987 10.13 64.83287699999921 9.262 56.93512790000042 9.255 103.70429279999998 3.742 57.35037420000032 8.487 62.96546010000066 9.179 114.98840020000003 3.569 79.48231819999998 2.952 123.36689670000001 3.653 108.47573680000002 3.716 55.8891462 2.681 130.68838400000004 3.665 58.63352899999976 9.387 115.83774810000006 3.651 76.79773379999999 3.529 66.4610974 2.686 93.03605790000005 2.606)
Error minima by case: (0.2723 2 8.6673 2 1.6172 2 10.6401 1 4.8425 2 15.5953 10 11.3715 2 26.6256 3 7.7297 9 8.0 1 1.2901 2 17.2271 2 0.0202 2 1.0 1 2.8179 2 32.0 2 3.4278 3 11.2151 2 5.0 2 32.9397 3 6.2723 1 5.5649 2 29.0 2 16.0 2 7.3285 1)
Average genome size in population (length): 52.63
Average program size in population (points): 53.63
Average percent parens in population: 0.019
Minimum age in population: 17.845703125
Maximum age in population: 23.1065673828125
Average age in population: 21.04714428710938
Median age in population: 21.0406494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 21074084
--- Timings ---
Current time: 1529615039895 milliseconds
Total Time:          57.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.9 seconds, 39.8%
Fitness Testing:     27.8 seconds, 48.3%
Report:               6.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 50759.0
Test mean error for best: 25.37950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 17.2427433247 
Correct output: -109.6672675873 | Program output: -61.6672675873
Correct output: -97.3828405386 | Program output: -3.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -9.8424651996 
Correct output: -20.4046895985 | Program output: 10.5953104015 
Correct output: -114.3715424664 | Program output: -65.3715424664
Correct output: -144.3743926958 | Program output: -61.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 23.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -84.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -66.3359015133
Correct output: -121.9396893018 | Program output: -37.9396893018
Correct output: 14.7358583393  | Program output: 22.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -79.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc tag_float_103 integer_sub float_max float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [14.0 2 48.0 3 94.0 2 83.0 1 41.0 2 31.0 11 49.0 3 83.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 1.0 1 69.0 3 32.0 3 76.0 3 62.0 3 5.0 2 84.0 3 8.0 2 70.0 2 29.0 3 16.0 2 50.0 1]
Total: 1238.0
Mean: 24.76
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2122.066411100006
Median total errors in population: 1257.6077999999998
Error averages by case: (37.831180200000034 10.534 84.6936769 3.5 128.4997221 2.505 117.03820780000002 2.649 77.41345499999998 2.492 56.19260919999934 12.021 85.6956246 3.512 118.4658517 3.52 85.12040969999978 10.093 55.783074699999034 10.376 40.36019850000025 10.375 94.29248600000003 3.661 39.67954970000016 9.463 53.863083200000844 10.468 105.62075740000004 3.588 70.00913049999998 2.72 111.9412286 3.495 99.08667470000003 3.631 43.24184559999999 2.523 119.19286030000002 3.513 48.013065999999746 10.539 106.53424410000005 3.563 67.244861 3.56 53.99133499999999 2.523 84.79727860000006 2.64)
Error minima by case: (2.1908 2 48.0 2 94.0 2 83.0 1 41.0 2 20.4047 9 49.0 3 83.0 3 49.1675 9 8.0 1 1.2946 2 57.0 2 0.0202 2 1.0 1 69.0 2 32.0 2 76.0 3 62.0 2 5.0 2 84.0 3 8.0 1 70.0 2 29.0 2 16.0 2 50.0 1)
Average genome size in population (length): 50.28
Average program size in population (points): 51.28
Average percent parens in population: 0.020
Minimum age in population: 19.9801025390625
Maximum age in population: 24.4515380859375
Average age in population: 22.50219506835938
Median age in population: 22.50784301757812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 22332421
--- Timings ---
Current time: 1529615043161 milliseconds
Total Time:          60.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 39.9%
Fitness Testing:     29.3 seconds, 48.2%
Report:               7.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 50759.0
Test mean error for best: 25.37950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 17.2427433247 
Correct output: -109.6672675873 | Program output: -61.6672675873
Correct output: -97.3828405386 | Program output: -3.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -9.8424651996 
Correct output: -20.4046895985 | Program output: 10.5953104015 
Correct output: -114.3715424664 | Program output: -65.3715424664
Correct output: -144.3743926958 | Program output: -61.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 23.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -84.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -66.3359015133
Correct output: -121.9396893018 | Program output: -37.9396893018
Correct output: 14.7358583393  | Program output: 22.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -79.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc integer_sub float_max integer_yankdup 74 integer_dec integer_yankdup)
Errors: [14.0 2 48.0 3 94.0 2 83.0 1 41.0 2 31.0 11 49.0 3 83.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 1.0 1 69.0 3 32.0 3 76.0 3 62.0 3 5.0 2 84.0 3 8.0 2 70.0 2 29.0 3 16.0 2 50.0 1]
Total: 1238.0
Mean: 24.76
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2296.063965700006
Median total errors in population: 1257.6077999999998
Error averages by case: (46.70161880000015 8.94 92.7103694 3.578 133.3971607 2.6 122.3698672 2.592 83.68630919999998 2.583 64.10484779999945 11.849 93.69984829999999 3.585 126.11971910000001 3.599 93.12676819999979 10.106 61.40636049999913 8.884 55.44684660000049 8.891 99.72290579999999 3.607 56.22967540000043 8.16 58.01305850000072 8.695 110.95279380000001 3.393 75.6244157 2.853 119.71013980000002 3.577 104.4270271 3.594 51.64160679999999 2.606 126.8558452 3.59 54.18433729999978 8.954 111.94383680000001 3.532 72.8110874 3.367 62.304175599999986 2.61 90.71034470000002 2.418)
Error minima by case: (0.2869 2 48.0 2 92.1252 2 17.9885 1 35.9861 1 1.0 1 49.0 1 83.0 3 1.0 2 8.0 1 0.7054 2 57.0 2 0.0202 2 1.0 1 69.0 2 32.0 2 76.0 2 62.0 2 5.0 2 84.0 3 8.0 1 70.0 2 29.0 2 16.0 1 27.9356 1)
Average genome size in population (length): 49.013
Average program size in population (points): 50.013
Average percent parens in population: 0.021
Minimum age in population: 21.714111328125
Maximum age in population: 26.13839721679688
Average age in population: 24.08450073242188
Median age in population: 24.1689453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.035
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 23559396
--- Timings ---
Current time: 1529615046473 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 39.9%
Fitness Testing:     31.0 seconds, 48.2%
Report:               7.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 50759.0
Test mean error for best: 25.37950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 17.2427433247 
Correct output: -109.6672675873 | Program output: -61.6672675873
Correct output: -97.3828405386 | Program output: -3.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -9.8424651996 
Correct output: -20.4046895985 | Program output: 10.5953104015 
Correct output: -114.3715424664 | Program output: -65.3715424664
Correct output: -144.3743926958 | Program output: -61.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 23.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -84.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -66.3359015133
Correct output: -121.9396893018 | Program output: -37.9396893018
Correct output: 14.7358583393  | Program output: 22.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -79.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc tag_float_103 integer_sub float_max float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [14.0 2 48.0 3 94.0 2 83.0 1 41.0 2 31.0 11 49.0 3 83.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 1.0 1 69.0 3 32.0 3 76.0 3 62.0 3 5.0 2 84.0 3 8.0 2 70.0 2 29.0 3 16.0 2 50.0 1]
Total: 1238.0
Mean: 24.76
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2489.9136459000038
Median total errors in population: 1250.0
Error averages by case: (62.26853010000016 4.218 97.4976717 3.645 140.7486138 2.664 131.01155880000002 2.577 90.5477084 2.646 78.70894059999986 11.435 98.46758229999999 3.652 130.71073610000002 3.672 106.35077020000004 10.242 62.13542959999975 4.262 85.80235629999987 4.277 107.0032315 3.596 90.88983180000012 4.074 55.924462000000176 3.429 118.31662940000001 2.954 83.2308821 3.422 124.20485870000002 3.67 111.74011820000001 3.617 56.7373528 2.696 131.46400550000004 3.672 59.85904029999995 4.254 119.2510232 3.504 80.42474519999999 2.924 67.23578279999998 2.687 99.67378450000001 1.919)
Error minima by case: (2.2427 2 26.5723 2 14.2879 2 70.7675 1 32.2525 2 18.3471 9 31.2766 2 61.2794 3 28.3977 9 3.7171 1 0.7579 2 57.0 2 0.0202 2 1.0 1 69.0 2 32.0 2 76.0 3 62.0 2 5.0 2 38.8447 3 8.0 1 70.0 2 29.0 2 12.1728 2 34.4559 1)
Average genome size in population (length): 47.756
Average program size in population (points): 48.756
Average percent parens in population: 0.021
Minimum age in population: 23.54421997070312
Maximum age in population: 27.60124206542969
Average age in population: 25.76046192932129
Median age in population: 25.78459930419922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.035
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 24756196
--- Timings ---
Current time: 1529615049782 milliseconds
Total Time:          67.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 39.9%
Fitness Testing:     32.5 seconds, 48.2%
Report:               7.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 49805.0
Test mean error for best: 24.90250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 15.2427433247 
Correct output: -109.6672675873 | Program output: -63.6672675873
Correct output: -97.3828405386 | Program output: -5.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -11.8424651996
Correct output: -20.4046895985 | Program output: 8.5953104015  
Correct output: -114.3715424664 | Program output: -67.3715424664
Correct output: -144.3743926958 | Program output: -63.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 21.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -86.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -68.3359015133
Correct output: -121.9396893018 | Program output: -39.9396893018
Correct output: 14.7358583393  | Program output: 20.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -81.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_sub} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc tag_float_103 integer_sub float_max float_dup_times integer_sub integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [12.0 2 46.0 3 92.0 2 83.0 1 39.0 2 29.0 12 47.0 3 81.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 1.0 1 69.0 3 32.0 3 74.0 2 62.0 3 3.0 2 82.0 3 6.0 2 70.0 2 29.0 3 14.0 2 50.0 1]
Total: 1214.0
Mean: 24.28
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2788.9968233
Median total errors in population: 1250.0
Error averages by case: (76.4889777 2.742 109.36288490000003 3.811 151.12933519999999 2.838 141.25198120000002 2.5 101.638993 2.808 92.2073296 11.315 110.2908764 3.8 142.08706170000002 3.818 118.99994559999999 10.286 72.45253769999998 2.824 105.84897740000001 2.811 118.49894270000001 3.692 112.35035299999998 2.795 64.1727368 1.771 129.6802501 3.078 95.09828919999998 3.705 135.6880766 3.825 123.1698009 3.726 69.18952100000001 2.847 142.88249 3.826 71.18995799999999 2.801 130.60615470000002 3.418 92.3150853 3.025 79.5514324 2.831 110.09083220000001 1.861)
Error minima by case: (2.0783 2 46.0 2 0.6172 2 9.6401 1 5.8425 1 14.5953 8 47.0 2 57.3744 3 8.7297 8 8.0 1 2.2548 2 57.0 2 0.9629 2 0.0 0 69.0 2 32.0 2 74.0 2 62.0 2 3.0 2 33.9397 3 6.0 1 67.4351 2 29.0 2 14.0 1 6.3285 1)
Average genome size in population (length): 47.167
Average program size in population (points): 48.167
Average percent parens in population: 0.021
Minimum age in population: 25.09500122070312
Maximum age in population: 29.2650146484375
Average age in population: 27.39320415496826
Median age in population: 27.43119049072266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.037
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 25939321
--- Timings ---
Current time: 1529615053393 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.4 seconds, 40.1%
Fitness Testing:     34.1 seconds, 48.1%
Report:               8.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 49805.0
Test mean error for best: 24.90250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 15.2427433247 
Correct output: -109.6672675873 | Program output: -63.6672675873
Correct output: -97.3828405386 | Program output: -5.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -11.8424651996
Correct output: -20.4046895985 | Program output: 8.5953104015  
Correct output: -114.3715424664 | Program output: -67.3715424664
Correct output: -144.3743926958 | Program output: -63.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 21.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -86.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -68.3359015133
Correct output: -121.9396893018 | Program output: -39.9396893018
Correct output: 14.7358583393  | Program output: 20.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -81.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_sub} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc tag_float_103 integer_sub float_max float_dup_times integer_sub integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc)
Errors: [12.0 2 46.0 3 92.0 2 83.0 1 39.0 2 29.0 12 47.0 3 81.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 1.0 1 69.0 3 32.0 3 74.0 2 62.0 3 3.0 2 82.0 3 6.0 2 70.0 2 29.0 3 14.0 2 50.0 1]
Total: 1214.0
Mean: 24.28
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2331.1628034
Median total errors in population: 1238.0
Error averages by case: (58.365057699999994 2.523 90.93461880000001 3.556 134.6810649 2.61 124.5551341 1.829 84.1333024 2.538 74.5686429 11.266 91.90143880000001 3.552 124.3046983 3.569 101.63741530000001 10.221 53.1847768 2.591 87.3702532 2.585 100.12187610000001 3.506 94.021195 2.568 46.0986192 1.526 111.49719220000001 3.368 76.28619710000001 3.522 117.6816748 3.562 104.8747913 3.537 50.01729699999999 2.595 125.21179590000001 3.578 52.70455809999999 2.56 112.44245570000001 2.749 73.45928760000001 3.331 60.5410321 2.581 93.0864281 1.659)
Error minima by case: (3.1388 2 9.6673 2 0.6172 2 9.6401 1 5.8425 1 14.5953 9 12.3715 2 25.6256 2 8.7297 9 2.8011 1 3.254 2 16.2271 2 0.0014 1 0.0 0 3.8179 2 31.0 2 4.4278 2 10.2151 2 2.0 2 33.9397 3 5.0 1 6.5649 2 28.0 2 13.0 1 6.3285 1)
Average genome size in population (length): 45.806
Average program size in population (points): 46.806
Average percent parens in population: 0.022
Minimum age in population: 26.83840560913086
Maximum age in population: 30.75059509277344
Average age in population: 29.04085691833496
Median age in population: 29.07189559936523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.032
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 27090421
--- Timings ---
Current time: 1529615056761 milliseconds
Total Time:          74.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.8 seconds, 40.1%
Fitness Testing:     35.7 seconds, 48.0%
Report:               8.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 48892.0
Test mean error for best: 24.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 13.2427433247 
Correct output: -109.6672675873 | Program output: -65.6672675873
Correct output: -97.3828405386 | Program output: -7.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -13.8424651996
Correct output: -20.4046895985 | Program output: 6.5953104015  
Correct output: -114.3715424664 | Program output: -69.3715424664
Correct output: -144.3743926958 | Program output: -65.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 19.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -88.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -70.3359015133
Correct output: -121.9396893018 | Program output: -41.9396893018
Correct output: 14.7358583393  | Program output: 18.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -83.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [10.0 1 44.0 3 90.0 1 83.0 1 37.0 2 27.0 12 45.0 3 79.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 3.0 2 69.0 3 32.0 3 72.0 3 62.0 3 1.0 1 80.0 2 4.0 1 70.0 2 29.0 3 12.0 2 50.0 1]
Total: 1189.0
Mean: 23.78
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2542.0392972
Median total errors in population: 1238.0
Error averages by case: (67.0439659 2.623 99.3275003 3.67 142.55571179999998 2.772 132.4139203 1.803 92.54551579999999 2.549 83.08183030000001 11.482 100.28824519999999 3.647 132.3475649 3.674 110.00445939999999 10.288 61.957128399999995 2.668 95.93217839999998 2.675 108.35213550000002 3.577 102.5410808 2.656 54.47233750000001 1.527 119.62354630000002 3.516 84.7766525 3.587 125.81770760000002 3.611 113.05707550000001 3.6 58.84565789999999 2.712 133.21987310000003 3.686 61.4481628 2.672 120.5623053 2.731 81.97143 3.482 69.2723262 2.686 100.9549855 1.732)
Error minima by case: (0.2427 1 9.6673 2 0.3828 1 6.6401 1 6.8425 1 11.5953 10 12.3715 2 25.6256 3 9.7297 9 7.0 1 5.2946 1 16.2271 2 2.0202 1 0.0 0 3.8179 2 31.0 2 4.4278 2 10.2151 2 1.0 1 34.9397 2 4.0 1 6.5649 2 28.0 2 12.0 1 3.3285 1)
Average genome size in population (length): 45.815
Average program size in population (points): 46.815
Average percent parens in population: 0.022
Minimum age in population: 27.97541809082031
Maximum age in population: 32.27557182312012
Average age in population: 30.59132661247253
Median age in population: 30.6273775100708
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.036
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 28242396
--- Timings ---
Current time: 1529615060135 milliseconds
Total Time:          77.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.0 seconds, 39.9%
Fitness Testing:     37.4 seconds, 48.1%
Report:               9.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 48892.0
Test mean error for best: 24.44600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 13.2427433247 
Correct output: -109.6672675873 | Program output: -65.6672675873
Correct output: -97.3828405386 | Program output: -7.3828405386 
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -13.8424651996
Correct output: -20.4046895985 | Program output: 6.5953104015  
Correct output: -114.3715424664 | Program output: -69.3715424664
Correct output: -144.3743926958 | Program output: -65.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 19.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -88.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -70.3359015133
Correct output: -121.9396893018 | Program output: -41.9396893018
Correct output: 14.7358583393  | Program output: 18.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -83.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_swap} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_swap integer_inc tag_float_103 integer_sub integer_mod integer_inc tag_float_103 integer_sub float_max float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup integer_yankdup float_sub)
Errors: [10.0 1 44.0 3 90.0 1 83.0 1 37.0 2 27.0 12 45.0 3 79.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 3.0 2 69.0 3 32.0 3 72.0 3 62.0 3 1.0 1 80.0 2 4.0 1 70.0 2 29.0 3 12.0 2 50.0 1]
Total: 1189.0
Mean: 23.78
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2351.8310918
Median total errors in population: 1236.0
Error averages by case: (58.6521247 2.582 92.2574776 3.635 134.5462132 2.644 124.80711160000001 1.902 84.2199465 2.276 73.27946269999998 11.915 93.2423731 3.622 125.5226596 3.641 102.651151 10.218 54.28379399999999 2.617 88.38266699999998 2.598 101.39850530000001 3.55 95.02033919999998 2.58 45.8328567 1.259 112.71367940000002 3.308 77.62253209999999 3.545 119.0745095 3.301 106.1333839 3.546 51.492229899999984 2.642 126.25531330000001 3.631 53.3167778 2.617 113.6507002 2.841 74.81709289999999 3.276 62.0844583 2.655 92.50373230000001 1.669)
Error minima by case: (1.6717 1 9.6673 2 0.3828 1 7.6401 1 6.8425 1 12.5953 9 12.3715 2 25.6256 2 9.7297 9 7.0 1 1.254 1 16.2271 2 0.931 1 0.0 0 3.8179 2 31.0 2 4.4278 2 10.2151 2 0.0 0 34.9397 2 3.0 1 6.5649 2 28.0 2 11.0 1 4.3285 1)
Average genome size in population (length): 48.564
Average program size in population (points): 49.564
Average percent parens in population: 0.021
Minimum age in population: 29.77005767822266
Maximum age in population: 33.98703765869141
Average age in population: 32.20850161170959
Median age in population: 32.27484893798828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.05
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 29461971
--- Timings ---
Current time: 1529615063598 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.5 seconds, 40.0%
Fitness Testing:     39.1 seconds, 48.1%
Report:               9.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 47572.0
Test mean error for best: 23.78600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 10.2427433247 
Correct output: -109.6672675873 | Program output: -68.6672675873
Correct output: -97.3828405386 | Program output: -10.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -16.8424651996
Correct output: -20.4046895985 | Program output: 3.5953104015  
Correct output: -114.3715424664 | Program output: -72.3715424664
Correct output: -144.3743926958 | Program output: -68.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 16.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -91.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -73.3359015133
Correct output: -121.9396893018 | Program output: -44.9396893018
Correct output: 14.7358583393  | Program output: 15.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -86.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_sub} {:instruction integer_add})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_sub integer_mod integer_inc integer_dup float_max integer_yankdup 74 integer_dec float_flush integer_inc tag_float_103 integer_sub float_max float_dup_times integer_sub integer_add)
Errors: [7.0 2 41.0 3 87.0 2 83.0 1 34.0 2 24.0 12 42.0 3 76.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 6.0 2 69.0 3 32.0 3 69.0 3 62.0 3 2.0 1 77.0 3 1.0 1 70.0 2 29.0 3 9.0 2 50.0 1]
Total: 1163.0
Mean: 23.26
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2399.9300924000004
Median total errors in population: 1214.0
Error averages by case: (60.56925299999999 2.559 93.23433030000001 3.644 136.5249007 2.605 127.34369660000002 1.67 86.22580310000001 2.564 74.6674815 12.211 94.2115712 3.614 126.48277029999998 3.61 105.28200459999998 10.299 57.018875599999994 2.615 91.06932379999999 2.594 103.6588723 3.538 97.6996363 2.603 48.625148200000005 1.563 115.0275835 3.495 79.8893217 3.522 119.99466740000004 2.848 108.40506119999999 3.534 52.4234951 2.605 127.26542520000001 3.598 54.9343444 2.554 115.97165430000001 2.619 77.05529810000002 3.464 62.964726 2.655 95.121848 1.68)
Error minima by case: (1.9349 1 41.0 2 0.6172 1 9.6401 1 4.974 1 14.5953 11 42.0 2 57.3744 2 8.7297 9 7.0 1 1.5356 1 56.0 2 0.931 1 0.0 0 64.1821 2 30.1305 2 69.0 2 61.0 2 0.0 0 33.9397 2 1.0 1 63.4351 2 28.0 2 9.0 1 6.3285 1)
Average genome size in population (length): 50.096
Average program size in population (points): 51.096
Average percent parens in population: 0.020
Minimum age in population: 31.78621673583984
Maximum age in population: 35.53433799743652
Average age in population: 33.783227394104
Median age in population: 33.82913756370544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.05
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 30716221
--- Timings ---
Current time: 1529615067081 milliseconds
Total Time:          84.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.9 seconds, 40.1%
Fitness Testing:     40.7 seconds, 48.0%
Report:              10.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 47572.0
Test mean error for best: 23.78600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 10.2427433247 
Correct output: -109.6672675873 | Program output: -68.6672675873
Correct output: -97.3828405386 | Program output: -10.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -16.8424651996
Correct output: -20.4046895985 | Program output: 3.5953104015  
Correct output: -114.3715424664 | Program output: -72.3715424664
Correct output: -144.3743926958 | Program output: -68.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 16.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -91.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -73.3359015133
Correct output: -121.9396893018 | Program output: -44.9396893018
Correct output: 14.7358583393  | Program output: 15.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -86.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub integer_mod integer_inc integer_sub float_max integer_yankdup 74 integer_dec integer_yankdup)
Errors: [7.0 2 41.0 3 87.0 2 83.0 1 34.0 2 24.0 12 42.0 3 76.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 6.0 2 69.0 3 32.0 3 69.0 3 62.0 3 2.0 1 77.0 3 1.0 1 70.0 2 29.0 3 9.0 2 50.0 1]
Total: 1163.0
Mean: 23.26
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2612.4302245000003
Median total errors in population: 1214.0
Error averages by case: (67.6474326 2.512 100.29692759999999 3.787 142.9532426 2.582 136.6049175 1.866 93.13899409999999 2.767 81.57352960000003 12.194 101.30107239999998 3.744 133.18093280000002 3.641 114.74741919999998 10.319 67.0596795 2.772 100.65615549999998 2.749 113.3971264 3.694 107.2097301 2.738 57.340400900000006 1.989 124.5604855 3.624 89.96848489999999 3.66 126.85972580000004 3.218 118.0581869 3.675 60.1156708 2.509 133.89237579999997 3.541 62.2380457 2.386 125.48108019999998 2.79 87.20361509999998 3.577 70.56726859999996 2.782 105.25172439999999 2.01)
Error minima by case: (1.7573 1 11.6673 2 0.6172 1 9.6401 1 3.8425 1 13.3769 9 14.3715 2 22.6256 2 6.7297 9 7.0 1 1.8778 1 13.2271 2 0.9749 1 0.0 0 5.8179 2 31.0 2 6.4278 2 7.2151 2 0.0 0 31.9397 2 1.0 1 8.5649 2 28.0 2 9.0 1 6.3285 1)
Average genome size in population (length): 50.001
Average program size in population (points): 51.001
Average percent parens in population: 0.020
Minimum age in population: 32.81429862976074
Maximum age in population: 37.14365530014038
Average age in population: 35.36455209159851
Median age in population: 35.40901505947113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.059
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 31967771
--- Timings ---
Current time: 1529615070375 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.2 seconds, 40.0%
Fitness Testing:     42.3 seconds, 48.1%
Report:              10.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 46033.0
Test mean error for best: 23.01650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 6.2427433247  
Correct output: -109.6672675873 | Program output: -72.6672675873
Correct output: -97.3828405386 | Program output: -14.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -20.8424651996
Correct output: -20.4046895985 | Program output: -0.4046895985 
Correct output: -114.3715424664 | Program output: -76.3715424664
Correct output: -144.3743926958 | Program output: -72.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 12.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -95.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -77.3359015133
Correct output: -121.9396893018 | Program output: -48.9396893018
Correct output: 14.7358583393  | Program output: 11.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -90.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction float_flush} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_inc tag_float_103 integer_sub in1 integer_inc float_flush float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [3.0 1 37.0 3 83.0 2 83.0 1 30.0 1 20.0 1 38.0 3 72.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 10.0 1 69.0 3 32.0 3 65.0 3 62.0 3 6.0 1 73.0 3 3.0 1 70.0 2 29.0 3 5.0 1 50.0 1]
Total: 1118.0
Mean: 22.36
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2751.9934442999997
Median total errors in population: 1189.0
Error averages by case: (72.565333 2.213 106.6107467 3.851 147.29989729999997 2.256 140.7301361 1.996 98.74911310000002 2.831 86.9117361 12.208 107.54908620000002 3.733 139.30946310000002 3.728 119.6209957 10.323 73.0094745 2.834 106.30252370000001 2.818 118.3240187 3.744 112.8086281 2.801 65.59573019999999 2.554 129.4737592 3.672 94.93038469999999 3.701 132.9684721 3.708 122.988699 3.724 66.7965353 1.977 140.05053780000003 3.164 67.34863259999999 1.934 130.3999769 2.844 92.1667947 3.625 76.93679150000001 2.785 111.28097800000002 2.241)
Error minima by case: (1.2427 1 12.6673 2 83.0 1 67.1891 1 30.0 1 14.3016 1 15.3715 2 22.6256 2 48.2703 9 8.0 1 0.2434 1 13.2271 2 0.8996 1 0.0 0 6.8179 2 32.0 2 7.4278 2 7.2151 2 0.0 0 47.0603 2 0.0 0 9.5649 2 29.0 2 5.0 1 50.0 1)
Average genome size in population (length): 50.464
Average program size in population (points): 51.464
Average percent parens in population: 0.020
Minimum age in population: 34.59359121322632
Maximum age in population: 38.58901536464691
Average age in population: 36.96976497328281
Median age in population: 37.02521705627441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.054
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 33230746
--- Timings ---
Current time: 1529615073804 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.5 seconds, 39.9%
Fitness Testing:     44.1 seconds, 48.2%
Report:              10.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 45657.0
Test mean error for best: 22.82850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 5.2427433247  
Correct output: -109.6672675873 | Program output: -73.6672675873
Correct output: -97.3828405386 | Program output: -15.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -21.8424651996
Correct output: -20.4046895985 | Program output: -1.4046895985 
Correct output: -114.3715424664 | Program output: -77.3715424664
Correct output: -144.3743926958 | Program output: -73.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 11.147714426  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -96.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -78.3359015133
Correct output: -121.9396893018 | Program output: -49.9396893018
Correct output: 14.7358583393  | Program output: 10.7358583393 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -91.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction tagged_726} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop tagged_726 in1 63.01692924572032 float_pop float_inc integer_yankdup 74 74 63.01692924572032 float_pop float_inc)
Errors: [2.0 1 36.0 3 82.0 2 83.0 1 29.0 2 19.0 2 37.0 3 71.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 11.0 2 69.0 3 32.0 3 64.0 2 62.0 3 7.0 1 72.0 3 4.0 1 70.0 2 29.0 3 4.0 1 50.0 1]
Total: 1113.0
Mean: 22.26
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2874.1009177
Median total errors in population: 1179.0
Error averages by case: (77.23044850000001 2.554 111.08695279999998 3.825 150.7002445 2.293 144.2465141 2.105 101.59722390000002 2.832 87.00023550000002 12.156 112.0067954 3.461 143.56587670000002 3.806 123.5061088 10.336 79.16661859999999 2.826 112.4112844 2.812 125.02157220000001 3.752 118.88463899999999 2.787 69.55109300000002 2.698 136.09431940000002 3.717 101.7799471 3.715 137.2148974 3.471 129.654371 3.729 72.39736439999999 1.707 144.35508869999998 3.378 72.5246308 1.907 137.0070933 2.832 99.0308921 3.674 81.49844519999999 2.511 115.1892609 2.495)
Error minima by case: (2.0 1 36.0 2 5.6172 1 5.9292 1 0.8425 1 12.9422 1 37.0 2 52.3744 2 3.7297 9 8.0 1 1.7261 1 35.6578 2 1.6008 1 0.0 0 39.6128 2 5.5612 2 64.0 2 39.6457 2 0.0 0 28.9397 2 0.0 0 38.8657 2 6.7166 2 4.0 1 11.3285 1)
Average genome size in population (length): 50.804
Average program size in population (points): 51.804
Average percent parens in population: 0.020
Minimum age in population: 35.59359121322632
Maximum age in population: 40.21819984912872
Average age in population: 38.45916503030062
Median age in population: 38.4714772105217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.071
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 34502096
--- Timings ---
Current time: 1529615077254 milliseconds
Total Time:          94.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.8 seconds, 39.9%
Fitness Testing:     45.8 seconds, 48.2%
Report:              11.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 44036.0
Test mean error for best: 22.01800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 0.2427433247  
Correct output: -109.6672675873 | Program output: -78.6672675873
Correct output: -97.3828405386 | Program output: -20.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -26.8424651996
Correct output: -20.4046895985 | Program output: -6.4046895985 
Correct output: -114.3715424664 | Program output: -82.3715424664
Correct output: -144.3743926958 | Program output: -78.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 6.147714426   
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -101.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -83.3359015133
Correct output: -121.9396893018 | Program output: -54.9396893018
Correct output: 14.7358583393  | Program output: 5.7358583393  
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -96.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [3.0 1 31.0 3 77.0 2 83.0 1 24.0 2 14.0 2 32.0 3 66.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 16.0 2 69.0 3 32.0 3 59.0 2 62.0 3 12.0 2 67.0 3 9.0 2 70.0 2 29.0 3 1.0 1 50.0 1]
Total: 1088.0
Mean: 21.76
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2969.2528291
Median total errors in population: 1168.0
Error averages by case: (81.05730050000003 2.768 113.0880806 3.919 155.04005130000002 2.529 151.1350451 2.616 106.07734919999999 2.943 93.29743690000001 12.039 114.05367489999998 3.464 145.39816129999997 3.951 129.3283563 10.4 82.39455599999997 2.949 115.30841629999996 2.941 128.1010702 3.828 121.7494425 2.909 76.57092140000002 2.781 139.1063801 3.794 105.02524109999999 3.789 139.16785190000004 3.508 132.696537 3.822 76.47182140000001 2.026 146.1042449 3.893 75.94218579999999 1.988 140.01411190000002 2.896 102.30428679999999 3.742 83.91867119999999 2.539 121.09063450000002 2.777)
Error minima by case: (1.0 1 14.6673 2 0.3828 1 8.6401 1 6.8425 1 9.5284 1 17.3715 2 18.6256 2 9.7297 7 7.0 1 0.2946 1 9.2271 2 0.7085 1 0.0 0 8.8179 2 29.1305 2 9.4278 2 3.2151 2 0.0 0 34.9397 2 0.0 0 11.5649 2 28.0 2 1.0 1 5.3285 1)
Average genome size in population (length): 51.532
Average program size in population (points): 52.532
Average percent parens in population: 0.020
Minimum age in population: 37.83721649646759
Maximum age in population: 41.75687167048454
Average age in population: 39.9411677724719
Median age in population: 39.98568499088287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.079
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 35790996
--- Timings ---
Current time: 1529615080987 milliseconds
Total Time:          98.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.2 seconds, 39.9%
Fitness Testing:     47.5 seconds, 48.2%
Report:              11.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 44392.0
Test mean error for best: 22.19600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 1.2427433247  
Correct output: -109.6672675873 | Program output: -77.6672675873
Correct output: -97.3828405386 | Program output: -19.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -25.8424651996
Correct output: -20.4046895985 | Program output: -5.4046895985 
Correct output: -114.3715424664 | Program output: -81.3715424664
Correct output: -144.3743926958 | Program output: -77.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 7.147714426   
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -100.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -82.3359015133
Correct output: -121.9396893018 | Program output: -53.9396893018
Correct output: 14.7358583393  | Program output: 6.7358583393  
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -95.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove in1 float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [2.0 1 32.0 3 78.0 2 83.0 1 25.0 2 15.0 2 33.0 2 67.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 15.0 2 69.0 3 32.0 3 60.0 1 62.0 3 11.0 2 68.0 3 8.0 2 70.0 2 29.0 3 0.0 0 50.0 1]
Total: 1088.0
Mean: 21.76
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2641.7578392000005
Median total errors in population: 1163.0
Error averages by case: (65.2694017 2.389 99.481929 3.629 140.85801990000002 2.794 138.7934907 2.47 91.32249329999998 2.776 79.66058249999999 10.852 100.52361119999999 3.644 132.3256828 3.808 116.1755077 10.345 69.42883349999998 2.772 102.91081029999998 2.779 116.01423799999999 3.685 109.43051299999999 2.746 65.94265960000001 2.656 127.18252830000003 3.619 92.5452564 3.659 126.10771410000004 3.699 120.69340990000002 3.676 65.1711213 1.927 132.9047918 3.805 62.36688740000002 1.802 128.10111570000004 2.799 89.77308749999997 3.573 69.8650654 2.677 107.82508820000001 2.503)
Error minima by case: (0.0 0 28.0 2 0.3828 1 8.6401 1 2.1575 1 8.9624 1 29.0 2 49.3744 2 0.7297 8 7.0 1 2.6041 1 56.0 2 0.1828 1 0.0 0 68.0 2 31.0 2 56.0 1 61.0 2 0.0 0 25.9397 2 0.0 0 66.4351 2 28.0 2 0.0 0 5.3285 1)
Average genome size in population (length): 51.5
Average program size in population (points): 52.5
Average percent parens in population: 0.020
Minimum age in population: 39.09497976303101
Maximum age in population: 43.40213838219643
Average age in population: 41.40498364913464
Median age in population: 41.43983029574156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.082
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 37079421
--- Timings ---
Current time: 1529615084506 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.6 seconds, 39.8%
Fitness Testing:     49.1 seconds, 48.2%
Report:              12.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 42932.0
Test mean error for best: 21.46600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -3.7572566753 
Correct output: -109.6672675873 | Program output: -82.6672675873
Correct output: -97.3828405386 | Program output: -24.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -30.8424651996
Correct output: -20.4046895985 | Program output: -10.4046895985
Correct output: -114.3715424664 | Program output: -86.3715424664
Correct output: -144.3743926958 | Program output: -82.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: 2.147714426   
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -105.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -87.3359015133
Correct output: -121.9396893018 | Program output: -58.9396893018
Correct output: 14.7358583393  | Program output: 1.7358583393  
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -100.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_sub integer_mod integer_inc integer_dup float_max integer_yankdup 74 integer_dec float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [7.0 11 27.0 3 73.0 2 83.0 1 20.0 1 10.0 1 28.0 3 62.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 20.0 1 69.0 3 32.0 3 55.0 2 62.0 3 16.0 2 63.0 3 13.0 1 70.0 2 29.0 3 5.0 3 50.0 1]
Total: 1084.0
Mean: 21.68
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2621.2080822000003
Median total errors in population: 1138.0
Error averages by case: (61.76538080000003 2.205 97.64600349999999 3.673 138.0997182 2.915 138.78850020000002 2.577 88.71118880000002 2.692 77.05322930000003 7.389 98.63476759999999 3.69 130.1616554 3.811 116.3346524 10.372 69.6934625 2.818 103.31933719999999 2.828 115.63507449999999 3.688 109.8740694 2.791 67.6590147 2.583 126.80295339999999 3.639 92.3455019 3.673 124.00624180000003 3.658 120.28504689999998 3.693 68.5588392 2.057 130.86499909999998 3.849 63.141170200000005 2.025 127.7335138 2.824 89.59798939999999 3.604 68.52577919999999 2.462 107.90199279999999 2.552)
Error minima by case: (0.0 0 20.6673 2 0.6172 1 8.6401 1 0.1575 1 4.9546 1 23.0 2 1.6256 2 0.2703 8 7.0 1 1.8343 1 5.2271 2 0.1627 1 1.0 1 14.8179 2 12.1305 2 15.4278 1 0.7849 2 0.0 0 24.9397 2 0.0 0 17.5649 2 19.286 2 0.0 0 5.3285 1)
Average genome size in population (length): 56.657
Average program size in population (points): 57.657
Average percent parens in population: 0.018
Minimum age in population: 40.09497976303101
Maximum age in population: 44.9093769416213
Average age in population: 42.87978262005001
Median age in population: 42.93810604885221
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.105
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 38498121
--- Timings ---
Current time: 1529615088274 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.0 seconds, 39.7%
Fitness Testing:     51.0 seconds, 48.2%
Report:              12.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 41187.0
Test mean error for best: 20.59350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -12.7572566753
Correct output: -109.6672675873 | Program output: -91.6672675873
Correct output: -97.3828405386 | Program output: -33.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -39.8424651996
Correct output: -20.4046895985 | Program output: -19.4046895985
Correct output: -114.3715424664 | Program output: -95.3715424664
Correct output: -144.3743926958 | Program output: -91.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: -6.852285574  
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -114.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -96.3359015133
Correct output: -121.9396893018 | Program output: -67.9396893018
Correct output: 14.7358583393  | Program output: -7.2641416607 
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -109.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [16.0 12 18.0 3 64.0 2 83.0 1 11.0 2 1.0 2 19.0 3 53.0 3 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 29.0 11 69.0 3 32.0 3 46.0 2 62.0 3 25.0 2 54.0 3 22.0 12 70.0 2 29.0 3 14.0 3 50.0 1]
Total: 1081.0
Mean: 21.62
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2556.6369176000003
Median total errors in population: 1113.0
Error averages by case: (59.567296899999995 3.162 92.09981140000002 3.766 132.95825359999998 2.935 137.39634700000002 2.538 83.82410079999998 2.681 73.8473139 3.397 93.2088746 3.678 124.9686301 3.723 114.71705269999998 10.351 67.95631529999999 2.803 101.4907536 2.793 114.5172026 3.723 108.02616809999998 2.767 69.45530630000003 2.68 125.68754160000002 3.676 91.06263519999999 3.697 118.79581010000001 3.233 119.19121810000001 3.712 68.60193899999999 2.309 125.5758747 3.768 63.61995010000001 2.54 126.60781520000002 2.815 88.32007759999996 3.642 63.8389402 1.989 106.32568889999999 2.598)
Error minima by case: (0.0 0 8.5426 2 0.6172 1 9.6401 1 1.8425 1 1.0 1 13.2469 2 7.6256 2 0.8482 8 7.0 1 0.8591 1 1.7729 2 0.7668 1 1.0 1 14.8179 2 18.1305 2 15.4278 1 0.7849 2 0.0 0 20.815 2 0.0 0 17.5649 2 25.286 2 0.0 0 6.3285 1)
Average genome size in population (length): 60.046
Average program size in population (points): 61.046
Average percent parens in population: 0.017
Minimum age in population: 41.93882705271244
Maximum age in population: 45.95433687791228
Average age in population: 44.3004453936629
Median age in population: 44.30715901963413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.116
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 40001383
--- Timings ---
Current time: 1529615092197 milliseconds
Total Time:         109.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 39.6%
Fitness Testing:     52.9 seconds, 48.2%
Report:              13.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 43830.0
Test mean error for best: 21.91500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 1.2427433247  
Correct output: -109.6672675873 | Program output: -77.6672675873
Correct output: -97.3828405386 | Program output: -19.3828405386
Correct output: 92.6401192912  | Program output: 10.6401192912 
Correct output: -50.8424651996 | Program output: -25.8424651996
Correct output: -20.4046895985 | Program output: -5.4046895985 
Correct output: -114.3715424664 | Program output: -81.3715424664
Correct output: -144.3743926958 | Program output: -77.3743926958
Correct output: 50.270281284   | Program output: -7.729718716  
Correct output: -23.5320860074 | Program output: -30.5320860074
Correct output: -3.2945776626  | Program output: -46.2945776626
Correct output: 134.2271184849 | Program output: 78.2271184849 
Correct output: -0.0202199253  | Program output: -50.0202199253
Correct output: 22.147714426   | Program output: 7.147714426   
Correct output: 138.1821302172 | Program output: 70.1821302172 
Correct output: 104.1305174885 | Program output: 73.1305174885 
Correct output: -160.4278073292 | Program output: -100.4278073292
Correct output: 138.2150716868 | Program output: 77.2150716868 
Correct output: -71.3359015133 | Program output: -82.3359015133
Correct output: -121.9396893018 | Program output: -53.9396893018
Correct output: 14.7358583393  | Program output: 6.7358583393  
Correct output: 137.435054132  | Program output: 68.435054132  
Correct output: 105.285953282  | Program output: 77.285953282  
Correct output: -95.2677404455 | Program output: -95.2677404455
Correct output: 56.3284961788  | Program output: 7.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc in1 float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_inc)
Errors: [2.0 1 32.0 3 78.0 2 82.0 2 25.0 2 15.0 2 33.0 2 67.0 3 58.0 10 7.0 2 43.0 2 56.0 3 50.0 1 15.0 2 68.0 3 31.0 3 60.0 1 61.0 3 11.0 2 68.0 3 8.0 2 69.0 3 28.0 3 0.0 0 49.0 2]
Total: 1078.0
Mean: 21.56
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2443.7495248999994
Median total errors in population: 1088.0
Error averages by case: (56.5253401 4.128 87.29606460000002 3.8 126.43677500000003 2.896 132.02737180000003 2.508 76.7616324 2.823 66.89536169999998 3.105 88.39511270000001 3.658 120.29536240000002 3.834 109.24226650000001 10.296 62.9719577 2.7 96.86260909999999 2.682 109.54702280000001 3.607 103.45705500000001 2.631 68.81041250000001 2.841 120.8467911 3.586 85.9347967 3.603 114.3109035 2.959 114.26696200000002 3.611 68.42242009999998 2.748 120.66192460000003 3.762 62.325037599999995 2.887 121.78305430000002 2.721 83.13488849999999 3.549 60.225065499999985 2.04 100.7983367 2.54)
Error minima by case: (0.0 0 18.0 2 1.6172 1 10.6401 1 2.1354 1 1.0 1 19.0 2 8.6256 2 7.7297 9 7.0 1 9.2946 1 0.7729 2 6.0202 1 1.0 1 20.8179 2 19.1305 2 21.4278 1 6.7849 2 0.0 0 32.9397 2 0.0 0 23.5649 2 26.286 2 0.0 0 7.3285 1)
Average genome size in population (length): 64.272
Average program size in population (points): 65.272
Average percent parens in population: 0.016
Minimum age in population: 43.32324847579002
Maximum age in population: 47.83638844266534
Average age in population: 45.73644194541685
Median age in population: 45.77959021553397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.12
Error (vector) diversity:			 0.139
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 41609308
--- Timings ---
Current time: 1529615095772 milliseconds
Total Time:         113.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.7 seconds, 39.4%
Fitness Testing:     54.8 seconds, 48.3%
Report:              13.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 40041.0
Test mean error for best: 20.02050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [27.0 12 7.0 1 53.0 2 83.0 1 0.0 0 10.0 1 8.0 2 42.0 2 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 40.0 12 69.0 3 32.0 3 35.0 2 62.0 3 36.0 3 43.0 3 33.0 12 70.0 2 29.0 3 25.0 3 50.0 1]
Total: 1063.0
Mean: 21.26
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2871.1363557
Median total errors in population: 1088.0
Error averages by case: (73.73876670000001 5.977 102.64525470000002 3.95 139.77239060000002 3.002 147.5671364 2.827 91.189408 2.71 81.5214247 2.882 103.63136079999998 3.805 134.95777250000003 3.955 125.18448640000001 10.357 82.75414429999998 2.934 115.7407659 2.927 128.56660739999998 3.837 122.1774634 2.803 84.50674110000001 2.754 139.59413930000002 3.81 105.425961 3.815 128.8363305 3.051 133.1824922 3.838 87.0014003 2.893 135.57718229999998 3.859 78.29223799999998 2.968 140.5033998 3.013 102.70270269999999 3.759 77.9446837 2.621 116.94810300000002 2.827)
Error minima by case: (0.0 0 7.0 1 5.1144 1 17.6401 1 0.0 0 1.0 1 8.0 2 4.6256 2 0.7297 9 7.0 1 1.7054 1 4.7729 2 4.0202 1 0.0 0 24.8179 2 15.1305 2 25.4278 1 10.7849 2 1.0 1 19.4424 2 1.0 1 27.5649 2 22.286 2 0.0 0 14.3285 1)
Average genome size in population (length): 66.195
Average program size in population (points): 67.195
Average percent parens in population: 0.015
Minimum age in population: 44.45534794777632
Maximum age in population: 49.02425664383918
Average age in population: 47.13905130476411
Median age in population: 47.2088027484715
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.099
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 43265758
--- Timings ---
Current time: 1529615099523 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.0 seconds, 39.3%
Fitness Testing:     56.6 seconds, 48.4%
Report:              14.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 40041.0
Test mean error for best: 20.02050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 9.6401192912  
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: -8.729718716  
Correct output: -23.5320860074 | Program output: -31.5320860074
Correct output: -3.2945776626  | Program output: -47.2945776626
Correct output: 134.2271184849 | Program output: 77.2271184849 
Correct output: -0.0202199253  | Program output: -51.0202199253
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 69.1821302172 
Correct output: 104.1305174885 | Program output: 72.1305174885 
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 76.2150716868 
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 67.435054132  
Correct output: 105.285953282  | Program output: 76.285953282  
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 6.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [27.0 12 7.0 1 53.0 2 83.0 1 0.0 0 10.0 1 8.0 2 42.0 2 59.0 10 8.0 2 44.0 2 57.0 3 51.0 2 40.0 12 69.0 3 32.0 3 35.0 2 62.0 3 36.0 3 43.0 3 33.0 12 70.0 2 29.0 3 25.0 3 50.0 1]
Total: 1063.0
Mean: 21.26
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2490.9018459000004
Median total errors in population: 1084.0
Error averages by case: (60.276972000000015 9.183 85.6200698 3.84 123.6389654 2.936 133.25076700000002 2.863 74.23966820000001 2.389 64.2986407 2.634 86.59401619999998 3.794 118.4427058 3.844 110.79182789999999 10.289 67.23789689999998 2.76 100.71794079999997 2.734 114.1680076 3.71 107.25266780000001 2.552 69.38424320000003 2.786 125.3646666 3.691 90.6077647 3.702 112.57965920000002 3.02 118.8610134 3.709 72.54641269999999 2.828 118.85370680000003 3.789 63.671469099999996 3.089 126.3265733 2.969 87.86284719999996 3.65 63.81072449999998 3.144 101.70261909999999 2.895)
Error minima by case: (0.0 0 7.0 1 2.9937 1 49.6286 1 0.0 0 1.0 1 8.0 2 2.6256 2 31.1269 9 1.5013 1 0.0026 1 3.7729 2 0.6967 1 0.0 0 23.8179 2 13.1305 2 24.4278 1 9.7849 2 0.0 0 27.0603 2 0.7359 1 26.5649 2 20.286 2 0.0 0 42.3285 1)
Average genome size in population (length): 68.799
Average program size in population (points): 69.799
Average percent parens in population: 0.015
Minimum age in population: 46.00948585569859
Maximum age in population: 50.64701515389606
Average age in population: 48.59116522229277
Median age in population: 48.67044094903395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.131
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 44988033
--- Timings ---
Current time: 1529615103594 milliseconds
Total Time:         121.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.4 seconds, 39.2%
Fitness Testing:     58.7 seconds, 48.5%
Report:              14.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 42525.0
Test mean error for best: 21.26250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 0.2427433247  
Correct output: -109.6672675873 | Program output: -78.6672675873
Correct output: -97.3828405386 | Program output: -20.3828405386
Correct output: 92.6401192912  | Program output: 12.6401192912 
Correct output: -50.8424651996 | Program output: -26.8424651996
Correct output: -20.4046895985 | Program output: -6.4046895985 
Correct output: -114.3715424664 | Program output: -82.3715424664
Correct output: -144.3743926958 | Program output: -78.3743926958
Correct output: 50.270281284   | Program output: -5.729718716  
Correct output: -23.5320860074 | Program output: -28.5320860074
Correct output: -3.2945776626  | Program output: -44.2945776626
Correct output: 134.2271184849 | Program output: 80.2271184849 
Correct output: -0.0202199253  | Program output: -48.0202199253
Correct output: 22.147714426   | Program output: 6.147714426   
Correct output: 138.1821302172 | Program output: 72.1821302172 
Correct output: 104.1305174885 | Program output: 75.1305174885 
Correct output: -160.4278073292 | Program output: -101.4278073292
Correct output: 138.2150716868 | Program output: 79.2150716868 
Correct output: -71.3359015133 | Program output: -83.3359015133
Correct output: -121.9396893018 | Program output: -54.9396893018
Correct output: 14.7358583393  | Program output: 5.7358583393  
Correct output: 137.435054132  | Program output: 70.435054132  
Correct output: 105.285953282  | Program output: 79.285953282  
Correct output: -95.2677404455 | Program output: -96.2677404455
Correct output: 56.3284961788  | Program output: 9.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction float_rot} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_sub})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 float_rot float_max float_dup float_flush float_dup_times float_pop integer_yankdup in1 63.01692924572032 float_pop float_pop float_inc integer_yankdup 74 integer_dec integer_yankdup float_sub)
Errors: [3.0 1 31.0 3 77.0 2 80.0 1 24.0 2 14.0 2 32.0 3 66.0 3 56.0 10 5.0 1 41.0 2 54.0 3 48.0 2 16.0 2 66.0 3 29.0 3 59.0 2 59.0 3 12.0 2 67.0 3 9.0 2 67.0 3 26.0 3 1.0 1 47.0 2]
Total: 1053.0
Mean: 21.06
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3064.1247434
Median total errors in population: 1084.0
Error averages by case: (85.3775586 8.424 107.59616500000001 4.053 146.47560409999994 3.248 156.51909339999997 3.613 98.1776449 2.84 89.30207979999999 3.083 108.58162569999996 3.978 139.4881253 4.102 134.3317818 10.425 89.61900429999999 3.064 122.95845629999998 3.052 135.87782660000002 3.987 129.2818429 2.611 92.52759510000001 3.648 146.7193166 3.977 113.1580333 3.965 133.71420300000003 3.247 140.4228454 3.978 95.67295479999999 3.157 139.91908850000002 4.105 86.6491867 4.048 147.60221090000002 3.476 110.43152449999997 3.912 87.03989419999996 3.157 125.90408169999999 3.627)
Error minima by case: (0.0 0 3.0 1 0.6172 1 9.6401 1 0.0 0 0.0 0 4.0 1 7.6256 1 3.2703 8 2.4724 1 0.9376 1 1.7729 2 0.2654 1 0.5019 1 9.8179 1 18.1305 2 17.4278 1 2.7849 2 0.0 0 16.9397 2 0.0 0 10.5649 2 25.286 2 0.0 0 6.3285 1)
Average genome size in population (length): 71.185
Average program size in population (points): 72.185
Average percent parens in population: 0.014
Minimum age in population: 47.77894457429647
Maximum age in population: 52.19068787363358
Average age in population: 50.04878580112476
Median age in population: 50.08697800990194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.139
Error (vector) diversity:			 0.168
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 46770258
--- Timings ---
Current time: 1529615107535 milliseconds
Total Time:         125.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 39.0%
Fitness Testing:     60.8 seconds, 48.6%
Report:              15.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 41396.0
Test mean error for best: 20.69800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -3.7572566753 
Correct output: -109.6672675873 | Program output: -82.6672675873
Correct output: -97.3828405386 | Program output: -24.3828405386
Correct output: 92.6401192912  | Program output: 12.6401192912 
Correct output: -50.8424651996 | Program output: -30.8424651996
Correct output: -20.4046895985 | Program output: -10.4046895985
Correct output: -114.3715424664 | Program output: -86.3715424664
Correct output: -144.3743926958 | Program output: -82.3743926958
Correct output: 50.270281284   | Program output: -5.729718716  
Correct output: -23.5320860074 | Program output: -28.5320860074
Correct output: -3.2945776626  | Program output: -44.2945776626
Correct output: 134.2271184849 | Program output: 80.2271184849 
Correct output: -0.0202199253  | Program output: -48.0202199253
Correct output: 22.147714426   | Program output: 2.147714426   
Correct output: 138.1821302172 | Program output: 72.1821302172 
Correct output: 104.1305174885 | Program output: 75.1305174885 
Correct output: -160.4278073292 | Program output: -105.4278073292
Correct output: 138.2150716868 | Program output: 79.2150716868 
Correct output: -71.3359015133 | Program output: -87.3359015133
Correct output: -121.9396893018 | Program output: -58.9396893018
Correct output: 14.7358583393  | Program output: 1.7358583393  
Correct output: 137.435054132  | Program output: 70.435054132  
Correct output: 105.285953282  | Program output: 79.285953282  
Correct output: -95.2677404455 | Program output: -100.2677404455
Correct output: 56.3284961788  | Program output: 9.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction -71.64999189125112} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction in1} {:instruction tagged_802} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction tagged_726} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float -71.64999189125112 integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_103 integer_sub in1 tagged_802 integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times float_dup_items integer_stackdepth float_max float_dup float_flush float_dup_times float_pop tagged_726 in1 63.01692924572032 float_pop float_inc integer_yankdup 74 74 63.01692924572032 float_pop float_inc)
Errors: [7.0 11 27.0 3 73.0 2 80.0 1 20.0 1 10.0 1 28.0 3 62.0 3 56.0 10 5.0 1 41.0 2 54.0 3 48.0 2 20.0 1 66.0 3 29.0 3 55.0 2 59.0 3 16.0 2 63.0 3 13.0 1 67.0 3 26.0 3 5.0 3 47.0 2]
Total: 1049.0
Mean: 20.98
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3548.349723
Median total errors in population: 1078.0
Error averages by case: (105.22020970000001 7.832 125.7542485 4.152 163.60466160000004 3.4 175.07259459999997 3.863 116.54237210000002 3.098 109.341158 3.252 126.71462089999996 4.086 157.03153010000003 4.24 153.3734638 10.503 109.78995909999999 3.231 141.8139722 3.234 154.18908929999995 4.093 148.05721899999998 2.62 114.74234990000005 5.043 164.845592 4.069 131.80398939999998 4.068 151.3878856 3.441 158.65085000000002 4.084 117.81987150000005 3.465 157.3500999 4.286 108.953561 5.406 165.72461980000003 3.788 129.17315069999998 4.0 109.42435699999997 3.34 145.4592973 3.915)
Error minima by case: (0.0 0 3.0 1 1.6172 1 10.6401 1 0.0 0 0.0 0 4.0 1 10.6256 2 1.2703 7 5.0 1 0.5571 1 1.2271 2 0.2795 1 0.0 0 18.8179 1 21.1305 2 19.4278 1 4.7849 1 0.0 0 18.9397 2 1.0 1 21.5649 1 26.0 2 0.0 0 7.3285 1)
Average genome size in population (length): 74.863
Average program size in population (points): 75.863
Average percent parens in population: 0.013
Minimum age in population: 48.77894457429647
Maximum age in population: 53.59664506884292
Average age in population: 51.53965389961505
Median age in population: 51.58634314831579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.154
Error (vector) diversity:			 0.2
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 48646508
--- Timings ---
Current time: 1529615111731 milliseconds
Total Time:         129.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.2 seconds, 38.9%
Fitness Testing:     62.9 seconds, 48.7%
Report:              15.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 38713.0
Test mean error for best: 19.35650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -20.7572566753
Correct output: -109.6672675873 | Program output: -99.6672675873
Correct output: -97.3828405386 | Program output: -41.3828405386
Correct output: 92.6401192912  | Program output: 12.6401192912 
Correct output: -50.8424651996 | Program output: -47.8424651996
Correct output: -20.4046895985 | Program output: -27.4046895985
Correct output: -114.3715424664 | Program output: -103.3715424664
Correct output: -144.3743926958 | Program output: -99.3743926958
Correct output: 50.270281284   | Program output: -5.729718716  
Correct output: -23.5320860074 | Program output: -28.5320860074
Correct output: -3.2945776626  | Program output: -44.2945776626
Correct output: 134.2271184849 | Program output: 80.2271184849 
Correct output: -0.0202199253  | Program output: -48.0202199253
Correct output: 22.147714426   | Program output: -14.852285574 
Correct output: 138.1821302172 | Program output: 72.1821302172 
Correct output: 104.1305174885 | Program output: 75.1305174885 
Correct output: -160.4278073292 | Program output: -122.4278073292
Correct output: 138.2150716868 | Program output: 79.2150716868 
Correct output: -71.3359015133 | Program output: -104.3359015133
Correct output: -121.9396893018 | Program output: -75.9396893018
Correct output: 14.7358583393  | Program output: -15.2641416607
Correct output: 137.435054132  | Program output: 70.435054132  
Correct output: 105.285953282  | Program output: 79.285953282  
Correct output: -95.2677404455 | Program output: -117.2677404455
Correct output: 56.3284961788  | Program output: 9.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_stackdepth integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [24.0 12 10.0 2 56.0 2 80.0 1 3.0 2 7.0 1 11.0 2 45.0 3 56.0 10 5.0 1 41.0 2 54.0 3 48.0 2 37.0 12 66.0 3 29.0 3 38.0 2 59.0 3 33.0 3 46.0 3 30.0 12 67.0 3 26.0 3 22.0 3 47.0 2]
Total: 1035.0
Mean: 20.7
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3593.828248699999
Median total errors in population: 1074.0
Error averages by case: (111.94449400000003 10.834 124.22293330000001 3.926 153.66967680000002 3.676 173.18899350000004 3.976 108.63440609999996 3.015 105.36101750000002 3.234 125.25238329999998 4.006 155.072707 4.204 151.157454 10.508 112.95398599999999 3.342 144.79253549999996 3.362 157.490804 4.258 151.0087035 2.951 121.47836219999999 7.934 168.1854148 4.25 134.8467024 4.25 149.82197200000002 3.608 161.97568850000002 4.237 128.3429029 3.858 155.19535980000003 4.373 116.52712199999996 8.293 169.0489461 3.767 132.24937729999994 4.209 120.37340089999995 4.136 142.77790530000004 4.048)
Error minima by case: (0.0 0 0.0 0 1.6172 1 10.6401 1 0.0 0 0.0 0 0.0 0 5.3744 1 0.3971 7 0.144 1 0.1636 1 14.7729 1 3.4192 1 1.0 1 34.8179 2 3.8695 2 24.0 1 20.7849 1 0.0 0 8.0603 2 1.0 1 37.5649 1 1.286 2 0.0 0 7.3285 1)
Average genome size in population (length): 81.641
Average program size in population (points): 82.641
Average percent parens in population: 0.012
Minimum age in population: 50.70250507094897
Maximum age in population: 55.02506962814368
Average age in population: 52.92731309117062
Median age in population: 52.97481574429548
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.188
Error (vector) diversity:			 0.244
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 50693083
--- Timings ---
Current time: 1529615116185 milliseconds
Total Time:         133.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 38.8%
Fitness Testing:     65.1 seconds, 48.7%
Report:              16.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 38505.0
Test mean error for best: 19.25250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 12.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: -5.729718716  
Correct output: -23.5320860074 | Program output: -28.5320860074
Correct output: -3.2945776626  | Program output: -44.2945776626
Correct output: 134.2271184849 | Program output: 80.2271184849 
Correct output: -0.0202199253  | Program output: -48.0202199253
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 72.1821302172 
Correct output: 104.1305174885 | Program output: 75.1305174885 
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 79.2150716868 
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 70.435054132  
Correct output: 105.285953282  | Program output: 79.285953282  
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 9.3284961788  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction float_yank} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove integer_min float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc float_stackdepth integer_sub float_yank integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [27.0 12 7.0 1 53.0 2 80.0 1 0.0 0 10.0 1 8.0 2 42.0 2 56.0 10 5.0 1 41.0 2 54.0 3 48.0 2 40.0 12 66.0 3 29.0 3 35.0 2 59.0 3 36.0 3 43.0 3 33.0 12 67.0 3 26.0 3 25.0 3 47.0 2]
Total: 1028.0
Mean: 20.56
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3867.2410068999993
Median total errors in population: 1065.0
Error averages by case: (128.8084211 10.763 128.8837156 3.81 164.2831007 3.782 186.92180750000009 3.956 119.05057109999997 3.17 119.41932089999999 3.375 129.9183750999999 3.964 159.35342970000005 4.22 165.25523789999994 10.525 122.06014169999997 3.357 154.4619813 3.503 167.6947878 4.36 160.58132609999998 3.201 140.4518041999999 9.802 178.1228144 4.357 145.5376072 4.331 154.28071260000002 3.804 172.08257670000003 4.324 140.1805651 4.185 159.30379090000005 4.549 134.4814675 10.205 178.96376290000006 3.891 143.0072505999999 4.305 132.30551899999998 4.258 157.63691930000002 4.197)
Error minima by case: (0.0 0 0.0 0 3.0668 1 14.6401 1 0.0 0 0.0 0 1.0 1 0.6256 1 3.7297 9 0.4344 1 2.2946 1 8.7729 1 0.9798 1 0.0 0 28.8179 1 1.8695 2 22.0 1 14.7849 1 0.0 0 3.0603 2 0.0 0 31.5649 1 0.714 2 0.0 0 11.3285 1)
Average genome size in population (length): 86.576
Average program size in population (points): 87.576
Average percent parens in population: 0.012
Minimum age in population: 51.81734996242449
Maximum age in population: 56.28852936829207
Average age in population: 54.39710797522822
Median age in population: 54.41617745519034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.816
Total error diversity:				 0.204
Error (vector) diversity:			 0.251
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 52861408
--- Timings ---
Current time: 1529615120404 milliseconds
Total Time:         137.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 38.6%
Fitness Testing:     67.4 seconds, 48.9%
Report:              17.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 38212.0
Test mean error for best: 19.10600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -20.7572566753
Correct output: -109.6672675873 | Program output: -99.6672675873
Correct output: -97.3828405386 | Program output: -41.3828405386
Correct output: 92.6401192912  | Program output: 13.6401192912 
Correct output: -50.8424651996 | Program output: -47.8424651996
Correct output: -20.4046895985 | Program output: -27.4046895985
Correct output: -114.3715424664 | Program output: -103.3715424664
Correct output: -144.3743926958 | Program output: -99.3743926958
Correct output: 50.270281284   | Program output: -4.729718716  
Correct output: -23.5320860074 | Program output: -27.5320860074
Correct output: -3.2945776626  | Program output: -43.2945776626
Correct output: 134.2271184849 | Program output: 81.2271184849 
Correct output: -0.0202199253  | Program output: -47.0202199253
Correct output: 22.147714426   | Program output: -14.852285574 
Correct output: 138.1821302172 | Program output: 73.1821302172 
Correct output: 104.1305174885 | Program output: 76.1305174885 
Correct output: -160.4278073292 | Program output: -122.4278073292
Correct output: 138.2150716868 | Program output: 80.2150716868 
Correct output: -71.3359015133 | Program output: -104.3359015133
Correct output: -121.9396893018 | Program output: -75.9396893018
Correct output: 14.7358583393  | Program output: -15.2641416607
Correct output: 137.435054132  | Program output: 71.435054132  
Correct output: 105.285953282  | Program output: 80.285953282  
Correct output: -95.2677404455 | Program output: -117.2677404455
Correct output: 56.3284961788  | Program output: 10.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap integer_dup float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [24.0 12 10.0 2 56.0 2 79.0 2 3.0 2 7.0 1 11.0 2 45.0 3 55.0 10 4.0 1 40.0 1 53.0 3 47.0 2 37.0 12 65.0 2 28.0 3 38.0 2 58.0 3 33.0 3 46.0 3 30.0 12 66.0 3 25.0 2 22.0 3 46.0 2]
Total: 1021.0
Mean: 20.42
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3932.8101560999994
Median total errors in population: 1056.0
Error averages by case: (126.78723020000004 9.485 136.28135580000003 4.116 171.91458239999997 3.804 188.96938929999996 4.201 126.91314790000001 3.342 123.33272129999999 3.637 137.26216639999993 4.157 166.78029439999997 4.391 167.68702370000003 10.667 125.34701689999999 3.082 156.35879809999997 3.567 169.35795419999994 4.392 162.42566539999999 3.311 137.53073440000003 7.871 179.7451504 4.364 147.28698690000002 4.317 161.54808050000003 3.808 173.73217589999996 4.317 138.6528295 3.987 166.88067049999995 4.54 131.8727352 8.249 180.63164520000004 4.205 144.77576509999997 4.314 130.94453639999998 4.0 159.00350010000002 4.664)
Error minima by case: (0.0 0 0.0 0 2.1515 1 6.6401 1 0.0 0 0.0 0 1.0 1 8.6256 1 0.2703 8 0.2923 1 0.7054 1 0.7729 1 1.8013 1 0.0 0 20.8179 1 0.8695 2 19.0 1 6.7849 1 0.0 0 3.9397 2 1.0 1 23.5649 2 4.286 2 0.0 0 3.3285 1)
Average genome size in population (length): 85.212
Average program size in population (points): 86.212
Average percent parens in population: 0.012
Minimum age in population: 53.36823100736365
Maximum age in population: 57.72248144906189
Average age in population: 55.87905779319702
Median age in population: 55.92533874775108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.207
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 54999945
--- Timings ---
Current time: 1529615125091 milliseconds
Total Time:         142.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.9 seconds, 38.6%
Fitness Testing:     69.7 seconds, 48.9%
Report:              17.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 39971.0
Test mean error for best: 19.98550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -3.7572566753 
Correct output: -109.6672675873 | Program output: -82.6672675873
Correct output: -97.3828405386 | Program output: -24.3828405386
Correct output: 92.6401192912  | Program output: 15.6401192912 
Correct output: -50.8424651996 | Program output: -30.8424651996
Correct output: -20.4046895985 | Program output: -10.4046895985
Correct output: -114.3715424664 | Program output: -86.3715424664
Correct output: -144.3743926958 | Program output: -82.3743926958
Correct output: 50.270281284   | Program output: -2.729718716  
Correct output: -23.5320860074 | Program output: -25.5320860074
Correct output: -3.2945776626  | Program output: -41.2945776626
Correct output: 134.2271184849 | Program output: 83.2271184849 
Correct output: -0.0202199253  | Program output: -45.0202199253
Correct output: 22.147714426   | Program output: 2.147714426   
Correct output: 138.1821302172 | Program output: 75.1821302172 
Correct output: 104.1305174885 | Program output: 78.1305174885 
Correct output: -160.4278073292 | Program output: -105.4278073292
Correct output: 138.2150716868 | Program output: 82.2150716868 
Correct output: -71.3359015133 | Program output: -87.3359015133
Correct output: -121.9396893018 | Program output: -58.9396893018
Correct output: 14.7358583393  | Program output: 1.7358583393  
Correct output: 137.435054132  | Program output: 73.435054132  
Correct output: 105.285953282  | Program output: 82.285953282  
Correct output: -95.2677404455 | Program output: -100.2677404455
Correct output: 56.3284961788  | Program output: 12.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction -71.64999189125112} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction print_integer} {:instruction integer_inc} {:instruction tag_float_103} {:instruction integer_sub} {:instruction in1} {:instruction tagged_802} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction tagged_726} {:instruction in1} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc} {:instruction integer_yankdup} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float -71.64999189125112 integer_mod integer_mult integer_min print_integer integer_inc tag_float_103 integer_sub in1 tagged_802 integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times float_dup_items integer_stackdepth float_max float_dup float_flush float_dup_times float_pop tagged_726 in1 63.01692924572032 float_pop float_inc integer_yankdup 74 74 63.01692924572032 float_pop float_inc)
Errors: [7.0 11 27.0 3 73.0 2 77.0 2 20.0 1 10.0 1 28.0 3 62.0 3 53.0 10 2.0 1 38.0 2 51.0 2 45.0 2 20.0 1 63.0 3 26.0 3 55.0 2 56.0 3 16.0 2 63.0 3 13.0 1 64.0 2 23.0 3 5.0 3 44.0 2]
Total: 1012.0
Mean: 20.24
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3599.4781973999998
Median total errors in population: 1049.0
Error averages by case: (114.62621210000002 10.853 123.31602709999997 3.956 155.53777639999996 3.661 173.9994225 3.786 109.53748420000002 3.187 106.87497080000001 3.327 124.33486319999996 3.985 154.20093010000002 4.216 151.58834840000003 10.515 111.56534959999998 2.651 143.59644599999993 3.339 156.1802877 4.223 149.82593469999998 3.288 125.46453960000002 8.878 166.73554190000004 4.193 133.8941965 4.123 148.87115690000002 3.64 160.6106822 4.114 129.29059540000003 3.884 154.3266705 4.384 120.15260269999999 9.294 167.60850219999998 4.068 131.34551569999994 4.144 121.43069639999999 4.14 144.25544459999998 4.459)
Error minima by case: (0.0 0 1.0 1 0.3578 1 5.2121 1 0.0 0 0.0 0 2.0 1 7.3744 1 0.7297 9 2.0 1 1.802 1 16.7729 1 0.0802 1 0.0 0 1.1821 2 0.1305 2 22.0 1 15.2151 1 0.0 0 8.9397 2 0.2641 1 1.5649 1 4.286 2 0.0 0 11.3285 1)
Average genome size in population (length): 89.134
Average program size in population (points): 90.134
Average percent parens in population: 0.011
Minimum age in population: 55.03859436999483
Maximum age in population: 59.25500428428495
Average age in population: 57.39294830416991
Median age in population: 57.39732375224776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.2
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 57237332
--- Timings ---
Current time: 1529615129305 milliseconds
Total Time:         146.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.2 seconds, 38.3%
Fitness Testing:     72.0 seconds, 49.0%
Report:              18.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 37125.0
Test mean error for best: 18.56250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 15.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: -2.729718716  
Correct output: -23.5320860074 | Program output: -25.5320860074
Correct output: -3.2945776626  | Program output: -41.2945776626
Correct output: 134.2271184849 | Program output: 83.2271184849 
Correct output: -0.0202199253  | Program output: -45.0202199253
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 75.1821302172 
Correct output: 104.1305174885 | Program output: 78.1305174885 
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 82.2150716868 
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 73.435054132  
Correct output: 105.285953282  | Program output: 82.285953282  
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 12.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap})
Best program: (in2 integer_yank integer_mod integer_dup_times integer_yank float_swap in1 float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_max float_inc float_inc float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec in2 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub integer_shove integer_sub in1 integer_inc integer_sub integer_stackdepth integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap)
Errors: [27.0 12 7.0 1 53.0 2 77.0 2 0.0 0 10.0 1 8.0 2 42.0 2 53.0 10 2.0 1 38.0 2 51.0 2 45.0 2 40.0 12 63.0 3 26.0 3 35.0 2 56.0 3 36.0 3 43.0 3 33.0 12 64.0 2 23.0 3 25.0 3 44.0 2]
Total: 991.0
Mean: 19.82
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3438.0908038
Median total errors in population: 1036.0
Error averages by case: (115.35036480000004 11.735 111.40762409999999 3.486 145.87000430000006 3.731 169.9707691 3.695 100.91431989999998 3.07 102.7644505 3.302 112.4591693 3.665 142.3464626 3.957 147.8736402 10.502 103.80872269999999 2.462 135.90753069999997 3.186 149.36004599999998 4.102 142.1641844 3.208 124.4885896 10.79 160.0082883 4.049 126.82907939999998 4.067 137.29640039999998 3.624 153.8403158 4.052 127.0713911 4.069 142.22447000000003 4.337 120.16779849999999 11.26 160.87365320000004 3.975 124.21680099999998 4.015 119.32965379999995 4.321 138.48807410000003 4.399)
Error minima by case: (0.0 0 0.0 0 6.6172 1 15.6401 1 0.0 0 0.0 0 0.0 0 3.3744 1 0.7297 9 1.4679 1 2.2946 1 11.7729 1 0.1243 1 0.0 0 31.8179 1 0.8695 2 19.0 1 17.7849 1 0.0 0 0.0603 2 0.0 0 34.5649 1 1.286 2 0.0 0 12.3285 1)
Average genome size in population (length): 92.786
Average program size in population (points): 93.786
Average percent parens in population: 0.011
Minimum age in population: 56.03859436999483
Maximum age in population: 60.96259468950302
Average age in population: 58.85569356072294
Median age in population: 58.89189630104374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.216
Error (vector) diversity:			 0.274
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 59560507
--- Timings ---
Current time: 1529615134125 milliseconds
Total Time:         151.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 38.2%
Fitness Testing:     74.5 seconds, 49.2%
Report:              19.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 36567.0
Test mean error for best: 18.28350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -30.7572566753
Correct output: -109.6672675873 | Program output: -109.6672675873
Correct output: -97.3828405386 | Program output: -51.3828405386
Correct output: 92.6401192912  | Program output: 16.6401192912 
Correct output: -50.8424651996 | Program output: -57.8424651996
Correct output: -20.4046895985 | Program output: -37.4046895985
Correct output: -114.3715424664 | Program output: -113.3715424664
Correct output: -144.3743926958 | Program output: -109.3743926958
Correct output: 50.270281284   | Program output: -1.729718716  
Correct output: -23.5320860074 | Program output: -24.5320860074
Correct output: -3.2945776626  | Program output: -40.2945776626
Correct output: 134.2271184849 | Program output: 84.2271184849 
Correct output: -0.0202199253  | Program output: -44.0202199253
Correct output: 22.147714426   | Program output: -24.852285574 
Correct output: 138.1821302172 | Program output: 76.1821302172 
Correct output: 104.1305174885 | Program output: 79.1305174885 
Correct output: -160.4278073292 | Program output: -132.4278073292
Correct output: 138.2150716868 | Program output: 83.2150716868 
Correct output: -71.3359015133 | Program output: -114.3359015133
Correct output: -121.9396893018 | Program output: -85.9396893018
Correct output: 14.7358583393  | Program output: -25.2641416607
Correct output: 137.435054132  | Program output: 74.435054132  
Correct output: 105.285953282  | Program output: 83.285953282  
Correct output: -95.2677404455 | Program output: -127.2677404455
Correct output: 56.3284961788  | Program output: 13.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_yankdup})
Best program: (in2 integer_yank integer_rot integer_dup_times integer_yank float_swap in1 float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub integer_stackdepth integer_yankdup)
Errors: [34.0 12 0.0 0 46.0 2 76.0 2 7.0 1 17.0 2 1.0 1 35.0 2 52.0 10 1.0 1 37.0 2 50.0 2 44.0 2 47.0 11 62.0 3 25.0 3 28.0 2 55.0 2 43.0 2 36.0 3 40.0 13 63.0 3 22.0 3 32.0 3 43.0 2]
Total: 985.0
Mean: 19.7
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3300.2964484
Median total errors in population: 1031.0
Error averages by case: (108.85432460000001 11.638 107.08643950000001 3.382 139.2083499 3.566 162.99396660000005 3.697 94.1569519 2.842 96.41977420000002 3.189 108.12097459999997 3.617 138.15738199999998 3.88 141.15441289999998 10.485 98.26617279999999 2.487 130.52095759999997 3.061 143.92965780000003 4.047 136.8146712 3.212 120.06213340000001 10.407 154.59967200000008 3.906 121.2691661 4.065 133.01659080000005 3.57 148.4273895 4.038 122.75203110000001 4.021 137.98082980000004 4.314 114.1494158 10.947 155.48194600000002 3.949 118.67918429999995 3.864 115.09009749999997 4.28 132.42895650000003 4.211)
Error minima by case: (0.0 0 0.0 0 0.3828 1 8.6401 1 0.0 0 0.0 0 0.0 0 6.3744 1 0.2703 8 0.7415 1 2.9704 1 15.7729 1 1.9903 1 0.0 0 35.8179 1 3.1305 1 22.0 1 21.7849 1 0.0 0 5.6364 2 0.0 0 38.5649 1 3.286 2 1.0 1 5.3285 1)
Average genome size in population (length): 93.225
Average program size in population (points): 94.225
Average percent parens in population: 0.011
Minimum age in population: 57.600674257832
Maximum age in population: 62.15788696158052
Average age in population: 60.24091795103978
Median age in population: 60.29341966431821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.212
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 61896357
--- Timings ---
Current time: 1529615138644 milliseconds
Total Time:         156.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 37.9%
Fitness Testing:     77.1 seconds, 49.4%
Report:              19.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 37091.0
Test mean error for best: 18.54550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -14.7572566753
Correct output: -109.6672675873 | Program output: -93.6672675873
Correct output: -97.3828405386 | Program output: -35.3828405386
Correct output: 92.6401192912  | Program output: 17.6401192912 
Correct output: -50.8424651996 | Program output: -41.8424651996
Correct output: -20.4046895985 | Program output: -21.4046895985
Correct output: -114.3715424664 | Program output: -97.3715424664
Correct output: -144.3743926958 | Program output: -93.3743926958
Correct output: 50.270281284   | Program output: -0.729718716  
Correct output: -23.5320860074 | Program output: -23.5320860074
Correct output: -3.2945776626  | Program output: -39.2945776626
Correct output: 134.2271184849 | Program output: 85.2271184849 
Correct output: -0.0202199253  | Program output: -43.0202199253
Correct output: 22.147714426   | Program output: -8.852285574  
Correct output: 138.1821302172 | Program output: 77.1821302172 
Correct output: 104.1305174885 | Program output: 80.1305174885 
Correct output: -160.4278073292 | Program output: -116.4278073292
Correct output: 138.2150716868 | Program output: 84.2150716868 
Correct output: -71.3359015133 | Program output: -98.3359015133
Correct output: -121.9396893018 | Program output: -69.9396893018
Correct output: 14.7358583393  | Program output: -9.2641416607 
Correct output: 137.435054132  | Program output: 75.435054132  
Correct output: 105.285953282  | Program output: 84.285953282  
Correct output: -95.2677404455 | Program output: -111.2677404455
Correct output: 56.3284961788  | Program output: 14.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_dup} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction 13} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc integer_dup_times integer_yank float_swap integer_dup float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec 13 integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod float_yankdup integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush float_dup_times)
Errors: [18.0 12 16.0 3 62.0 2 75.0 2 9.0 2 1.0 1 17.0 3 51.0 3 51.0 9 0.0 0 36.0 1 49.0 3 43.0 2 31.0 11 61.0 3 24.0 2 44.0 2 54.0 3 27.0 2 52.0 3 24.0 12 62.0 3 21.0 3 16.0 3 42.0 2]
Total: 978.0
Mean: 19.56
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3806.1421913
Median total errors in population: 1026.0
Error averages by case: (128.7502929 11.733 127.01659980000001 3.925 160.60765650000002 3.934 183.00071590000002 4.508 116.11127219999999 3.307 117.39107770000005 3.481 127.47191949999994 3.948 157.18472600000007 4.309 160.8764484 10.594 119.21633009999996 2.845 150.25616069999995 3.216 164.14069589999997 4.346 156.35383649999994 3.533 139.203497 10.605 174.4391258 4.038 141.98386359999998 4.361 152.49223610000007 3.838 168.5041343 4.368 141.05696180000004 4.285 156.9782299 4.56 133.1613712 11.069 174.82627599999998 4.206 139.53472759999994 3.952 133.64867049999995 4.513 153.77736539999998 4.684)
Error minima by case: (0.0 0 0.0 0 0.3828 1 8.6401 1 0.0 0 0.0 0 0.0 0 0.3744 1 1.2703 2 0.0 0 1.8022 1 9.7729 1 0.2305 1 0.0 0 29.8179 1 0.1305 2 22.0 1 15.7849 1 1.0 1 1.0603 2 0.0 0 32.5649 1 2.286 2 0.0 0 5.3285 1)
Average genome size in population (length): 95.175
Average program size in population (points): 96.175
Average percent parens in population: 0.011
Minimum age in population: 59.4216006219358
Maximum age in population: 63.83121720599866
Average age in population: 61.62445842876484
Median age in population: 61.65765339651171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.229
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 64280382
--- Timings ---
Current time: 1529615143297 milliseconds
Total Time:         160.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.7 seconds, 37.8%
Fitness Testing:     79.5 seconds, 49.5%
Report:              20.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 36348.0
Test mean error for best: 18.17400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -14.7572566753
Correct output: -109.6672675873 | Program output: -93.6672675873
Correct output: -97.3828405386 | Program output: -35.3828405386
Correct output: 92.6401192912  | Program output: 19.6401192912 
Correct output: -50.8424651996 | Program output: -41.8424651996
Correct output: -20.4046895985 | Program output: -21.4046895985
Correct output: -114.3715424664 | Program output: -97.3715424664
Correct output: -144.3743926958 | Program output: -93.3743926958
Correct output: 50.270281284   | Program output: 1.270281284   
Correct output: -23.5320860074 | Program output: -21.5320860074
Correct output: -3.2945776626  | Program output: -37.2945776626
Correct output: 134.2271184849 | Program output: 87.2271184849 
Correct output: -0.0202199253  | Program output: -41.0202199253
Correct output: 22.147714426   | Program output: -8.852285574  
Correct output: 138.1821302172 | Program output: 79.1821302172 
Correct output: 104.1305174885 | Program output: 82.1305174885 
Correct output: -160.4278073292 | Program output: -116.4278073292
Correct output: 138.2150716868 | Program output: 86.2150716868 
Correct output: -71.3359015133 | Program output: -98.3359015133
Correct output: -121.9396893018 | Program output: -69.9396893018
Correct output: 14.7358583393  | Program output: -9.2641416607 
Correct output: 137.435054132  | Program output: 77.435054132  
Correct output: 105.285953282  | Program output: 86.285953282  
Correct output: -95.2677404455 | Program output: -111.2677404455
Correct output: 56.3284961788  | Program output: 16.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_stackdepth integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dup float_dec integer_shove integer_shove integer_shove float_dec integer_mod integer_shove float_dec float_dec integer_dup_times float_dec integer_shove integer_min float_yank print_float integer_dup integer_dup_items integer_shove integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub 74 74 63.01692924572032 float_pop float_inc)
Errors: [18.0 12 16.0 3 62.0 2 73.0 2 9.0 2 1.0 1 17.0 3 51.0 3 49.0 2 2.0 1 34.0 1 47.0 3 41.0 2 31.0 11 59.0 3 22.0 3 44.0 2 52.0 3 27.0 2 52.0 3 24.0 12 60.0 2 19.0 3 16.0 3 40.0 1]
Total: 951.0
Mean: 19.02
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3014.3477703
Median total errors in population: 1016.0
Error averages by case: (98.54809160000002 11.97 94.98170810000002 3.48 128.0788694 3.506 150.3807192 4.199 82.2624315 2.997 84.7434372 3.082 96.02785369999997 3.537 126.2462529 3.884 127.16910760000003 10.414 86.5199397 2.425 118.88710939999996 2.956 132.75135130000004 3.863 125.16884759999999 3.171 110.42410890000002 11.174 143.58629440000007 3.837 109.5586722 4.039 121.14048870000005 3.459 137.3403455 3.996 112.32610490000003 3.997 126.10332609999999 4.203 104.3951168 11.704 144.45472980000002 3.803 106.96080929999995 3.785 104.41450589999997 4.194 119.95454860000002 4.248)
Error minima by case: (0.2427 1 0.0 0 0.3828 1 6.4924 1 0.0 0 0.0 0 0.0 0 2.3744 1 0.7297 2 0.0 0 3.1779 1 11.7729 1 0.4301 1 0.0 0 31.8179 1 1.1305 2 1.5154 1 17.7849 1 0.0 0 6.0603 2 0.0 0 34.5649 2 4.286 2 0.0 1 5.3285 1)
Average genome size in population (length): 97.438
Average program size in population (points): 98.438
Average percent parens in population: 0.010
Minimum age in population: 60.53367889108267
Maximum age in population: 64.83144698789238
Average age in population: 63.02799690579219
Median age in population: 63.06932890846588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.244
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 66718632
--- Timings ---
Current time: 1529615148156 milliseconds
Total Time:         165.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.3 seconds, 37.6%
Fitness Testing:     82.2 seconds, 49.6%
Report:              21.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 34314.0
Test mean error for best: 17.15700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -18.7572566753
Correct output: -109.6672675873 | Program output: -97.6672675873
Correct output: -97.3828405386 | Program output: -39.3828405386
Correct output: 92.6401192912  | Program output: 23.6401192912 
Correct output: -50.8424651996 | Program output: -45.8424651996
Correct output: -20.4046895985 | Program output: -25.4046895985
Correct output: -114.3715424664 | Program output: -101.3715424664
Correct output: -144.3743926958 | Program output: -97.3743926958
Correct output: 50.270281284   | Program output: 5.270281284   
Correct output: -23.5320860074 | Program output: -17.5320860074
Correct output: -3.2945776626  | Program output: -33.2945776626
Correct output: 134.2271184849 | Program output: 91.2271184849 
Correct output: -0.0202199253  | Program output: -37.0202199253
Correct output: 22.147714426   | Program output: -12.852285574 
Correct output: 138.1821302172 | Program output: 83.1821302172 
Correct output: 104.1305174885 | Program output: 86.1305174885 
Correct output: -160.4278073292 | Program output: -120.4278073292
Correct output: 138.2150716868 | Program output: 90.2150716868 
Correct output: -71.3359015133 | Program output: -102.3359015133
Correct output: -121.9396893018 | Program output: -73.9396893018
Correct output: 14.7358583393  | Program output: -13.2641416607
Correct output: 137.435054132  | Program output: 81.435054132  
Correct output: 105.285953282  | Program output: 90.285953282  
Correct output: -95.2677404455 | Program output: -115.2677404455
Correct output: 56.3284961788  | Program output: 20.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_dup_times float_dec integer_shove integer_min float_yank print_float integer_dup integer_dup_items integer_shove integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub 74 74 63.01692924572032 float_pop float_inc)
Errors: [22.0 13 12.0 3 58.0 2 69.0 2 5.0 2 5.0 1 13.0 2 47.0 3 45.0 1 6.0 2 30.0 1 43.0 3 37.0 2 35.0 11 55.0 2 18.0 3 40.0 1 48.0 3 31.0 3 48.0 3 28.0 12 56.0 3 15.0 2 20.0 2 36.0 2]
Total: 906.0
Mean: 18.12
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2911.5923508
Median total errors in population: 1004.0
Error averages by case: (93.40427610000002 11.896 91.11179420000002 3.342 123.37316929999994 3.314 146.2058091 4.123 76.56648129999998 2.886 78.5720207 2.871 92.12115769999997 3.413 122.78283970000005 3.684 123.46210739999998 10.284 83.17462689999998 2.197 116.21976249999997 2.963 129.6011187 3.36 122.5835587 3.017 105.90703820000002 11.072 140.50759280000003 3.822 106.59379659999999 3.804 117.4034145 3.235 134.170856 3.693 106.871644 3.698 122.84431560000004 3.949 100.24971139999997 11.689 141.39018180000002 3.383 103.93616069999996 3.827 98.91318309999997 3.985 115.91773380000001 4.201)
Error minima by case: (0.0 0 0.0 0 0.5294 1 0.4924 1 0.0 0 0.0 0 0.0 0 9.3744 1 3.2703 1 0.0 0 1.2946 1 18.7729 1 0.1589 1 1.356 1 38.8179 1 1.1305 2 18.0 1 24.7849 1 0.0 0 1.0603 2 0.0 0 39.0 1 4.286 2 1.0 1 12.3285 1)
Average genome size in population (length): 98.25
Average program size in population (points): 99.25
Average percent parens in population: 0.010
Minimum age in population: 62.29578016459845
Maximum age in population: 66.63272340716821
Average age in population: 64.47462724041385
Median age in population: 64.5386874922782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.243
Error (vector) diversity:			 0.322
Behavioral diversity:				 0.323
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 69175682
--- Timings ---
Current time: 1529615152593 milliseconds
Total Time:         170.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.6 seconds, 37.4%
Fitness Testing:     84.7 seconds, 49.8%
Report:              21.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 33993.0
Test mean error for best: 16.99650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -22.7572566753
Correct output: -109.6672675873 | Program output: -101.6672675873
Correct output: -97.3828405386 | Program output: -43.3828405386
Correct output: 92.6401192912  | Program output: 23.6401192912 
Correct output: -50.8424651996 | Program output: -49.8424651996
Correct output: -20.4046895985 | Program output: -29.4046895985
Correct output: -114.3715424664 | Program output: -105.3715424664
Correct output: -144.3743926958 | Program output: -101.3743926958
Correct output: 50.270281284   | Program output: 5.270281284   
Correct output: -23.5320860074 | Program output: -17.5320860074
Correct output: -3.2945776626  | Program output: -33.2945776626
Correct output: 134.2271184849 | Program output: 91.2271184849 
Correct output: -0.0202199253  | Program output: -37.0202199253
Correct output: 22.147714426   | Program output: -16.852285574 
Correct output: 138.1821302172 | Program output: 83.1821302172 
Correct output: 104.1305174885 | Program output: 86.1305174885 
Correct output: -160.4278073292 | Program output: -124.4278073292
Correct output: 138.2150716868 | Program output: 90.2150716868 
Correct output: -71.3359015133 | Program output: -106.3359015133
Correct output: -121.9396893018 | Program output: -77.9396893018
Correct output: 14.7358583393  | Program output: -17.2641416607
Correct output: 137.435054132  | Program output: 81.435054132  
Correct output: 105.285953282  | Program output: 90.285953282  
Correct output: -95.2677404455 | Program output: -119.2677404455
Correct output: 56.3284961788  | Program output: 20.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction float_dup} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_dup_times float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 float_dup in1 integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_dup_times float_max float_dup float_flush float_dup_times float_pop float_mult in1 63.01692924572032)
Errors: [26.0 12 8.0 1 54.0 2 69.0 2 1.0 2 9.0 1 9.0 2 43.0 2 45.0 1 6.0 2 30.0 1 43.0 3 37.0 2 39.0 12 55.0 2 18.0 3 36.0 2 48.0 3 35.0 3 44.0 3 32.0 12 56.0 3 15.0 2 24.0 3 36.0 2]
Total: 901.0
Mean: 18.02
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3167.868212
Median total errors in population: 992.0
Error averages by case: (105.09763359999998 11.836 102.02109590000003 3.478 134.73620169999995 3.576 157.5755452 4.517 88.84741990000002 3.069 91.1491126 3.123 103.00082449999998 3.551 133.28426549999995 3.866 133.6283467 9.775 91.92952569999999 2.32 123.77928369999995 2.946 137.7147562 3.552 130.0585499 3.142 117.36646700000001 11.084 148.47783580000004 3.987 114.8111364 3.832 128.1004153000001 3.463 142.22848710000002 3.697 118.73733420000002 3.87 133.1867284 4.175 111.29166040000003 11.743 149.3658782 3.685 112.23455309999996 3.966 110.93247149999998 4.191 127.22668350000001 4.642)
Error minima by case: (0.0 0 0.0 0 10.1002 1 30.6401 1 0.0 0 0.0 0 0.0 0 8.3744 1 5.2703 1 0.0 0 1.757 1 17.7729 1 0.0177 1 0.0 0 37.8179 1 0.1305 2 19.0 1 23.7849 1 0.0 0 0.0603 2 0.0 0 38.0 1 1.286 2 1.0 1 11.3285 1)
Average genome size in population (length): 99.048
Average program size in population (points): 100.048
Average percent parens in population: 0.010
Minimum age in population: 63.48182544270367
Maximum age in population: 67.766731795248
Average age in population: 65.94917081067273
Median age in population: 66.00252351708974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.254
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 71652182
--- Timings ---
Current time: 1529615157864 milliseconds
Total Time:         175.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.2 seconds, 37.3%
Fitness Testing:     87.5 seconds, 50.0%
Report:              22.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 33264.0
Test mean error for best: 16.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -20.7572566753
Correct output: -109.6672675873 | Program output: -99.6672675873
Correct output: -97.3828405386 | Program output: -41.3828405386
Correct output: 92.6401192912  | Program output: 25.6401192912 
Correct output: -50.8424651996 | Program output: -47.8424651996
Correct output: -20.4046895985 | Program output: -27.4046895985
Correct output: -114.3715424664 | Program output: -103.3715424664
Correct output: -144.3743926958 | Program output: -99.3743926958
Correct output: 50.270281284   | Program output: 7.270281284   
Correct output: -23.5320860074 | Program output: -15.5320860074
Correct output: -3.2945776626  | Program output: -31.2945776626
Correct output: 134.2271184849 | Program output: 93.2271184849 
Correct output: -0.0202199253  | Program output: -35.0202199253
Correct output: 22.147714426   | Program output: -14.852285574 
Correct output: 138.1821302172 | Program output: 85.1821302172 
Correct output: 104.1305174885 | Program output: 88.1305174885 
Correct output: -160.4278073292 | Program output: -122.4278073292
Correct output: 138.2150716868 | Program output: 92.2150716868 
Correct output: -71.3359015133 | Program output: -104.3359015133
Correct output: -121.9396893018 | Program output: -75.9396893018
Correct output: 14.7358583393  | Program output: -15.2641416607
Correct output: 137.435054132  | Program output: 83.435054132  
Correct output: 105.285953282  | Program output: 92.285953282  
Correct output: -95.2677404455 | Program output: -117.2677404455
Correct output: 56.3284961788  | Program output: 22.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction tag_integer_470} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction float_div} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_mult} {:instruction in1} {:instruction 63.01692924572032})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap in1 float_inc in1 float_dec float_stackdepth integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove integer_shove float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove integer_dup_times integer_shove float_dec float_dec integer_shove integer_sub float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod tag_integer_470 integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub float_max float_div 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_dup_times float_max float_dup float_flush float_dup_times float_pop float_mult in1 float_max float_dup float_flush float_dup_times integer_add float_mult in1 63.01692924572032)
Errors: [24.0 12 10.0 2 56.0 2 67.0 2 3.0 2 7.0 1 11.0 2 45.0 3 43.0 2 8.0 2 28.0 1 41.0 2 35.0 2 37.0 12 53.0 3 16.0 3 38.0 2 46.0 3 33.0 3 46.0 3 30.0 12 54.0 2 13.0 3 22.0 3 34.0 2]
Total: 886.0
Mean: 17.72
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3069.8712944
Median total errors in population: 978.5
Error averages by case: (99.32476469999999 11.714 99.78074690000001 3.568 132.91860520000003 3.708 153.0959433 4.365 86.5867153 3.261 87.00742949999999 3.26 100.85989049999995 3.612 131.1653742 3.877 129.69022250000003 7.892 88.75031259999997 2.322 118.95205309999994 2.674 133.83703390000005 3.899 125.17988799999999 3.191 110.1393049 10.835 144.54698660000008 3.969 111.37574939999999 3.685 126.04150100000004 3.467 138.39518600000002 3.826 114.17216880000004 3.846 131.04004520000007 4.181 105.13955819999998 11.531 145.40457260000002 3.831 108.35187929999994 3.942 106.60255419999994 4.18 122.53680850000005 4.34)
Error minima by case: (0.0 0 0.0 0 0.3828 1 7.6401 1 0.0 0 0.0 0 0.0 0 2.3744 1 4.2703 1 0.0 0 0.7054 1 5.7729 1 0.5282 1 0.1477 1 25.8179 1 1.8695 2 18.0 1 11.7849 1 2.0 1 10.9397 2 0.2641 1 28.5649 1 5.286 2 1.0 1 4.3285 1)
Average genome size in population (length): 99.016
Average program size in population (points): 100.016
Average percent parens in population: 0.010
Minimum age in population: 65.14181720736224
Maximum age in population: 69.3460463771516
Average age in population: 67.41040197333422
Median age in population: 67.45524017743728
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.289
Error (vector) diversity:			 0.382
Behavioral diversity:				 0.382
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 74128007
--- Timings ---
Current time: 1529615162775 milliseconds
Total Time:         180.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.7 seconds, 37.0%
Fitness Testing:     90.3 seconds, 50.1%
Report:              23.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 32460.0
Test mean error for best: 16.23000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -18.7572566753
Correct output: -109.6672675873 | Program output: -97.6672675873
Correct output: -97.3828405386 | Program output: -39.3828405386
Correct output: 92.6401192912  | Program output: 29.6401192912 
Correct output: -50.8424651996 | Program output: -45.8424651996
Correct output: -20.4046895985 | Program output: -25.4046895985
Correct output: -114.3715424664 | Program output: -101.3715424664
Correct output: -144.3743926958 | Program output: -97.3743926958
Correct output: 50.270281284   | Program output: 11.270281284  
Correct output: -23.5320860074 | Program output: -11.5320860074
Correct output: -3.2945776626  | Program output: -27.2945776626
Correct output: 134.2271184849 | Program output: 97.2271184849 
Correct output: -0.0202199253  | Program output: -31.0202199253
Correct output: 22.147714426   | Program output: -12.852285574 
Correct output: 138.1821302172 | Program output: 89.1821302172 
Correct output: 104.1305174885 | Program output: 92.1305174885 
Correct output: -160.4278073292 | Program output: -120.4278073292
Correct output: 138.2150716868 | Program output: 96.2150716868 
Correct output: -71.3359015133 | Program output: -102.3359015133
Correct output: -121.9396893018 | Program output: -73.9396893018
Correct output: 14.7358583393  | Program output: -13.2641416607
Correct output: 137.435054132  | Program output: 87.435054132  
Correct output: 105.285953282  | Program output: 96.285953282  
Correct output: -95.2677404455 | Program output: -115.2677404455
Correct output: 56.3284961788  | Program output: 26.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_dup_times float_dec integer_shove integer_min float_yank print_float integer_dup integer_dup_items integer_dec integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub 74 74 63.01692924572032 float_pop float_inc)
Errors: [22.0 13 12.0 3 58.0 2 63.0 2 5.0 2 5.0 1 13.0 2 47.0 3 39.0 2 12.0 2 24.0 2 37.0 3 31.0 2 35.0 11 49.0 3 12.0 3 40.0 1 42.0 3 31.0 3 48.0 3 28.0 12 50.0 2 9.0 3 20.0 2 30.0 1]
Total: 848.0
Mean: 16.96
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2847.995810300001
Median total errors in population: 950.0
Error averages by case: (92.21824510000002 11.733 94.00435900000002 3.738 127.78967589999999 3.659 142.1135252 3.933 79.9622007 3.393 80.0372114 3.248 95.08466119999999 3.709 125.52037680000001 3.923 118.11604000000001 4.875 82.1221953 2.608 110.29063890000002 2.328 121.77310479999998 3.894 116.67991430000001 2.98 102.77006500000002 10.725 132.7035113 3.719 98.75984359999998 3.616 120.59418279999998 3.433 126.35947750000001 3.674 105.21986239999998 3.786 125.19288309999999 4.105 97.5905385 11.322 133.59843270000002 3.634 96.1496711 3.718 97.9667193 4.118 111.56847439999999 3.939)
Error minima by case: (1.0 1 0.0 0 0.3828 1 8.6401 1 0.0 0 0.0 0 0.0 0 0.3744 1 0.2703 1 0.0 0 1.7054 1 5.7729 1 0.9944 1 0.0 0 25.8179 1 0.8695 2 17.0 1 11.7849 1 0.0 0 6.9397 1 1.0 1 28.5649 1 6.286 2 0.0 0 5.3285 1)
Average genome size in population (length): 100.099
Average program size in population (points): 101.099
Average percent parens in population: 0.010
Minimum age in population: 66.14181720736224
Maximum age in population: 70.6612845175708
Average age in population: 68.73785231334996
Median age in population: 68.80246353328623
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.303
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 76631394
--- Timings ---
Current time: 1529615167783 milliseconds
Total Time:         185.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 36.8%
Fitness Testing:     93.1 seconds, 50.3%
Report:              23.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 31582.0
Test mean error for best: 15.79100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -18.7572566753
Correct output: -109.6672675873 | Program output: -97.6672675873
Correct output: -97.3828405386 | Program output: -39.3828405386
Correct output: 92.6401192912  | Program output: 32.6401192912 
Correct output: -50.8424651996 | Program output: -45.8424651996
Correct output: -20.4046895985 | Program output: -25.4046895985
Correct output: -114.3715424664 | Program output: -101.3715424664
Correct output: -144.3743926958 | Program output: -97.3743926958
Correct output: 50.270281284   | Program output: 14.270281284  
Correct output: -23.5320860074 | Program output: -8.5320860074 
Correct output: -3.2945776626  | Program output: -24.2945776626
Correct output: 134.2271184849 | Program output: 100.2271184849
Correct output: -0.0202199253  | Program output: -28.0202199253
Correct output: 22.147714426   | Program output: -12.852285574 
Correct output: 138.1821302172 | Program output: 92.1821302172 
Correct output: 104.1305174885 | Program output: 95.1305174885 
Correct output: -160.4278073292 | Program output: -120.4278073292
Correct output: 138.2150716868 | Program output: 99.2150716868 
Correct output: -71.3359015133 | Program output: -102.3359015133
Correct output: -121.9396893018 | Program output: -73.9396893018
Correct output: 14.7358583393  | Program output: -13.2641416607
Correct output: 137.435054132  | Program output: 90.435054132  
Correct output: 105.285953282  | Program output: 99.285953282  
Correct output: -95.2677404455 | Program output: -115.2677404455
Correct output: 56.3284961788  | Program output: 29.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9996} {:instruction float_dup_items} {:instruction in1} {:instruction integer_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_mult float_dec float_dec in2 float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9996 float_dup_items in1 integer_inc)
Errors: [22.0 13 12.0 3 58.0 2 60.0 1 5.0 2 5.0 1 13.0 2 47.0 3 36.0 2 15.0 2 21.0 2 34.0 2 28.0 2 35.0 11 46.0 3 9.0 3 40.0 1 39.0 3 31.0 3 48.0 3 28.0 12 47.0 3 6.0 3 20.0 2 27.0 2]
Total: 818.0
Mean: 16.36
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3407.3040819000007
Median total errors in population: 923.0
Error averages by case: (116.3574005 11.614 113.66130270000005 3.885 152.58750220000002 3.897 165.86852930000006 4.375 105.28849410000001 3.644 104.20805000000001 3.404 115.27355659999994 3.785 145.0406748 4.06 142.42177519999998 4.344 106.57400049999994 3.284 130.45709989999995 2.683 144.24422449999997 4.167 136.6458502 3.322 124.87791200000001 10.724 154.92664340000005 3.907 121.60088619999998 4.004 140.0272549000001 3.478 148.74281699999995 4.025 125.02885980000005 3.909 145.40693969999998 4.194 120.951776 11.305 155.77044090000004 3.989 118.9888581999999 3.88 117.9242536999999 4.174 135.8389796 4.537)
Error minima by case: (0.0 0 0.0 0 7.3828 1 0.6401 1 0.0 0 0.0 0 0.0 0 2.3744 1 1.7297 1 0.0 0 1.2946 1 2.7729 1 0.0187 1 0.0 0 22.8179 1 2.1305 2 14.0 1 8.7849 1 0.8106 1 16.0603 1 0.0 0 25.5649 1 6.0 1 0.0 0 0.5416 1)
Average genome size in population (length): 100.369
Average program size in population (points): 101.369
Average percent parens in population: 0.010
Minimum age in population: 67.90211531662544
Maximum age in population: 72.01457018425195
Average age in population: 70.13023008639568
Median age in population: 70.16156531416588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.889
Total error diversity:				 0.279
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.4
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 79141344
--- Timings ---
Current time: 1529615172691 milliseconds
Total Time:         190.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.6 seconds, 36.6%
Fitness Testing:     96.0 seconds, 50.5%
Report:              24.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 30453.0
Test mean error for best: 15.22650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -31.7572566753
Correct output: -109.6672675873 | Program output: -110.6672675873
Correct output: -97.3828405386 | Program output: -52.3828405386
Correct output: 92.6401192912  | Program output: 35.6401192912 
Correct output: -50.8424651996 | Program output: -58.8424651996
Correct output: -20.4046895985 | Program output: -38.4046895985
Correct output: -114.3715424664 | Program output: -114.3715424664
Correct output: -144.3743926958 | Program output: -110.3743926958
Correct output: 50.270281284   | Program output: 17.270281284  
Correct output: -23.5320860074 | Program output: -5.5320860074 
Correct output: -3.2945776626  | Program output: -21.2945776626
Correct output: 134.2271184849 | Program output: 103.2271184849
Correct output: -0.0202199253  | Program output: -25.0202199253
Correct output: 22.147714426   | Program output: -25.852285574 
Correct output: 138.1821302172 | Program output: 95.1821302172 
Correct output: 104.1305174885 | Program output: 98.1305174885 
Correct output: -160.4278073292 | Program output: -133.4278073292
Correct output: 138.2150716868 | Program output: 102.2150716868
Correct output: -71.3359015133 | Program output: -115.3359015133
Correct output: -121.9396893018 | Program output: -86.9396893018
Correct output: 14.7358583393  | Program output: -26.2641416607
Correct output: 137.435054132  | Program output: 93.435054132  
Correct output: 105.285953282  | Program output: 102.285953282 
Correct output: -95.2677404455 | Program output: -128.2677404455
Correct output: 56.3284961788  | Program output: 32.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction integer_dup} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc integer_dup_times integer_yank float_swap integer_dup float_inc float_yankdup float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_max float_inc float_inc float_inc in1 float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec in2 float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove integer_min float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [35.0 12 1.0 2 45.0 2 57.0 2 8.0 1 18.0 2 0.0 0 34.0 2 33.0 2 18.0 2 18.0 2 31.0 2 25.0 2 48.0 11 43.0 3 6.0 3 27.0 2 36.0 2 44.0 2 35.0 3 41.0 13 44.0 2 3.0 1 33.0 3 24.0 2]
Total: 787.0
Mean: 15.74
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3523.6598449999997
Median total errors in population: 906.0
Error averages by case: (120.83123770000005 11.454 119.9876518 3.798 155.38773160000002 3.975 167.01829089999998 4.451 109.45505769999998 3.632 109.83232560000002 3.614 120.9548011 3.769 150.63442489999997 4.057 143.93792750000003 4.278 114.15960749999999 3.362 135.1743775 2.851 148.694388 4.125 141.31808840000002 3.379 128.7287786 10.61 159.26384529999993 3.917 126.42262299999999 4.142 145.2965295 3.587 153.16888160000002 4.158 132.2864193 3.987 150.899248 4.257 125.4516943 11.196 160.10826299999997 3.999 123.91905289999995 3.859 124.99214049999996 4.264 136.47745879999997 4.538)
Error minima by case: (0.0 0 0.0 0 2.6641 1 16.6401 1 0.0 0 0.0 0 0.0 0 0.3744 1 0.7297 1 0.0 0 0.2802 1 1.7729 1 0.2887 1 0.0 0 17.8179 1 6.0 2 11.0 1 3.7849 1 0.0 0 11.1436 1 0.0 0 20.5649 1 3.0 1 0.0 0 13.3285 1)
Average genome size in population (length): 103.567
Average program size in population (points): 104.567
Average percent parens in population: 0.010
Minimum age in population: 69.33970908140822
Maximum age in population: 73.39708281183908
Average age in population: 71.58071937309143
Median age in population: 71.61335803709689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.292
Error (vector) diversity:			 0.41
Behavioral diversity:				 0.411
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 81730756
--- Timings ---
Current time: 1529615177489 milliseconds
Total Time:         194.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.9 seconds, 36.4%
Fitness Testing:     98.8 seconds, 50.7%
Report:              25.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 30110.0
Test mean error for best: 15.05500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -16.7572566753
Correct output: -109.6672675873 | Program output: -95.6672675873
Correct output: -97.3828405386 | Program output: -37.3828405386
Correct output: 92.6401192912  | Program output: 41.6401192912 
Correct output: -50.8424651996 | Program output: -43.8424651996
Correct output: -20.4046895985 | Program output: -23.4046895985
Correct output: -114.3715424664 | Program output: -99.3715424664
Correct output: -144.3743926958 | Program output: -95.3743926958
Correct output: 50.270281284   | Program output: 23.270281284  
Correct output: -23.5320860074 | Program output: 0.4679139926  
Correct output: -3.2945776626  | Program output: -15.2945776626
Correct output: 134.2271184849 | Program output: 109.2271184849
Correct output: -0.0202199253  | Program output: -19.0202199253
Correct output: 22.147714426   | Program output: -10.852285574 
Correct output: 138.1821302172 | Program output: 101.1821302172
Correct output: 104.1305174885 | Program output: 104.1305174885
Correct output: -160.4278073292 | Program output: -118.4278073292
Correct output: 138.2150716868 | Program output: 108.2150716868
Correct output: -71.3359015133 | Program output: -100.3359015133
Correct output: -121.9396893018 | Program output: -71.9396893018
Correct output: 14.7358583393  | Program output: -11.2641416607
Correct output: 137.435054132  | Program output: 99.435054132  
Correct output: 105.285953282  | Program output: 108.285953282 
Correct output: -95.2677404455 | Program output: -113.2677404455
Correct output: 56.3284961788  | Program output: 38.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_sub float_inc integer_dup_times float_inc float_inc float_inc float_inc float_swap float_inc integer_dup_times float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove in2 float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_dup_times float_rot integer_shove integer_min float_yank print_float integer_dup integer_dup_items integer_dec integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub 74 74 63.01692924572032 float_pop float_inc)
Errors: [20.0 13 14.0 3 60.0 1 51.0 2 7.0 2 3.0 1 15.0 3 49.0 3 27.0 2 24.0 13 12.0 2 25.0 2 19.0 2 33.0 12 37.0 2 0.0 0 42.0 2 30.0 1 29.0 3 50.0 2 26.0 12 38.0 3 3.0 1 18.0 3 18.0 2]
Total: 742.0
Mean: 14.84
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3354.5153849
Median total errors in population: 886.0
Error averages by case: (115.67145580000006 11.592 114.31022550000002 3.701 149.02439909999995 3.77 159.4516843 4.321 103.70705029999999 3.512 103.71200860000003 3.481 115.24680529999998 3.64 145.2220164 4.007 137.21411829999997 4.328 108.15972329999995 3.241 126.26095209999997 3.105 139.98990690000002 4.018 132.4202793 3.32 125.54611950000002 10.632 150.48029620000005 4.027 117.5982273 4.002 139.67165250000002 3.469 144.39206199999998 4.08 127.35409410000001 3.805 144.9694534 4.119 120.5226359 11.353 151.33321640000003 3.89 115.11087569999997 3.956 119.62601979999997 4.152 129.61410690000002 4.385)
Error minima by case: (0.2427 1 0.0 0 0.3828 1 5.6401 1 0.0 0 0.0 0 0.0 0 3.6256 1 0.7297 1 0.0 0 1.7054 1 2.7729 1 0.1254 1 0.0 0 12.8179 1 0.0 0 13.4278 1 1.2151 1 0.0 0 16.9397 1 0.0 0 13.4351 1 0.0 0 0.0 0 2.3285 1)
Average genome size in population (length): 105.619
Average program size in population (points): 106.619
Average percent parens in population: 0.009
Minimum age in population: 70.5035527492541
Maximum age in population: 75.29088806720345
Average age in population: 73.03275031984467
Median age in population: 73.0785211833421
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.287
Error (vector) diversity:			 0.44
Behavioral diversity:				 0.442
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 84371381
--- Timings ---
Current time: 1529615182456 milliseconds
Total Time:         199.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 36.2%
Fitness Testing:    101.6 seconds, 50.9%
Report:              25.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 29875.0
Test mean error for best: 14.93750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -18.7572566753
Correct output: -109.6672675873 | Program output: -97.6672675873
Correct output: -97.3828405386 | Program output: -39.3828405386
Correct output: 92.6401192912  | Program output: 41.6401192912 
Correct output: -50.8424651996 | Program output: -45.8424651996
Correct output: -20.4046895985 | Program output: -25.4046895985
Correct output: -114.3715424664 | Program output: -101.3715424664
Correct output: -144.3743926958 | Program output: -97.3743926958
Correct output: 50.270281284   | Program output: 23.270281284  
Correct output: -23.5320860074 | Program output: 0.4679139926  
Correct output: -3.2945776626  | Program output: -15.2945776626
Correct output: 134.2271184849 | Program output: 109.2271184849
Correct output: -0.0202199253  | Program output: -19.0202199253
Correct output: 22.147714426   | Program output: -12.852285574 
Correct output: 138.1821302172 | Program output: 101.1821302172
Correct output: 104.1305174885 | Program output: 104.1305174885
Correct output: -160.4278073292 | Program output: -120.4278073292
Correct output: 138.2150716868 | Program output: 108.2150716868
Correct output: -71.3359015133 | Program output: -102.3359015133
Correct output: -121.9396893018 | Program output: -73.9396893018
Correct output: 14.7358583393  | Program output: -13.2641416607
Correct output: 137.435054132  | Program output: 99.435054132  
Correct output: 105.285953282  | Program output: 108.285953282 
Correct output: -95.2677404455 | Program output: -115.2677404455
Correct output: 56.3284961788  | Program output: 38.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_sub float_inc integer_dup_times float_inc float_inc float_inc float_inc float_swap float_inc integer_dup_times float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup)
Errors: [22.0 13 12.0 3 58.0 2 51.0 2 5.0 2 5.0 1 13.0 2 47.0 3 27.0 2 24.0 13 12.0 2 25.0 2 19.0 2 35.0 11 37.0 2 0.0 0 40.0 1 30.0 1 31.0 3 48.0 3 28.0 12 38.0 3 3.0 1 20.0 2 18.0 2]
Total: 738.0
Mean: 14.76
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3575.4156761
Median total errors in population: 857.0
Error averages by case: (123.26197320000003 11.388 124.91526590000001 3.923 157.8405022 4.1 165.3886661 4.308 113.44210909999998 3.779 112.46678120000006 3.879 125.83973149999994 3.806 155.4280309 4.187 143.21593609999996 4.461 121.23563569999996 3.58 135.33274019999993 3.555 147.91695580000004 4.185 141.35885059999995 3.48 131.0462945 10.373 158.29633370000005 4.202 125.8568286 4.056 150.22718220000002 3.634 152.28645859999997 4.103 136.9462982000001 3.976 154.59615890000003 4.312 128.5053837 11.162 159.1206878 4.02 123.3745827999999 3.991 130.04798569999994 4.252 136.3693029 4.387)
Error minima by case: (0.0 0 0.0 0 1.3828 1 0.3599 1 0.0 0 0.0 0 0.0 0 2.6256 1 0.6142 1 0.0 0 2.7058 1 3.2271 1 5.0202 1 0.0 0 5.1821 1 0.0 0 4.5722 1 1.2151 1 1.0 1 2.5711 1 0.0 0 2.4351 1 0.0 0 0.0 0 0.6715 1)
Average genome size in population (length): 108.869
Average program size in population (points): 109.869
Average percent parens in population: 0.009
Minimum age in population: 72.27198329426136
Maximum age in population: 76.36840048287866
Average age in population: 74.5121474858314
Median age in population: 74.5419976078703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.326
Error (vector) diversity:			 0.477
Behavioral diversity:				 0.478
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 87093256
--- Timings ---
Current time: 1529615187434 milliseconds
Total Time:         204.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.8 seconds, 36.0%
Fitness Testing:    104.3 seconds, 50.9%
Report:              26.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 29112.0
Test mean error for best: 14.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -21.7572566753
Correct output: -109.6672675873 | Program output: -100.6672675873
Correct output: -97.3828405386 | Program output: -42.3828405386
Correct output: 92.6401192912  | Program output: 45.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -28.4046895985
Correct output: -114.3715424664 | Program output: -104.3715424664
Correct output: -144.3743926958 | Program output: -100.3743926958
Correct output: 50.270281284   | Program output: 27.270281284  
Correct output: -23.5320860074 | Program output: 4.4679139926  
Correct output: -3.2945776626  | Program output: -11.2945776626
Correct output: 134.2271184849 | Program output: 113.2271184849
Correct output: -0.0202199253  | Program output: -15.0202199253
Correct output: 22.147714426   | Program output: -15.852285574 
Correct output: 138.1821302172 | Program output: 105.1821302172
Correct output: 104.1305174885 | Program output: 108.1305174885
Correct output: -160.4278073292 | Program output: -123.4278073292
Correct output: 138.2150716868 | Program output: 112.2150716868
Correct output: -71.3359015133 | Program output: -105.3359015133
Correct output: -121.9396893018 | Program output: -76.9396893018
Correct output: 14.7358583393  | Program output: -16.2641416607
Correct output: 137.435054132  | Program output: 103.435054132 
Correct output: 105.285953282  | Program output: 112.285953282 
Correct output: -95.2677404455 | Program output: -118.2677404455
Correct output: 56.3284961788  | Program output: 42.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tagged_445} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap})
Best program: (in2 integer_yank integer_rot -98 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tagged_445 integer_sub integer_shove integer_sub in1 integer_inc integer_sub integer_stackdepth integer_yankdup 74 integer_dec float_flush integer_inc float_dup_times integer_swap)
Errors: [25.0 12 9.0 1 55.0 2 47.0 2 2.0 2 8.0 1 10.0 1 44.0 2 23.0 2 28.0 13 8.0 2 21.0 2 15.0 2 38.0 12 33.0 2 4.0 1 37.0 2 26.0 2 34.0 3 45.0 3 31.0 12 34.0 2 7.0 2 23.0 3 14.0 2]
Total: 711.0
Mean: 14.22
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3764.3902153000004
Median total errors in population: 838.0
Error averages by case: (134.93916530000007 11.353 133.58650350000002 4.086 168.2713053 4.312 172.68489659999997 4.607 124.210954 4.003 124.95756159999998 4.085 134.56584709999996 3.972 163.82478410000002 4.281 150.41375219999995 4.83 127.60971759999993 3.899 139.14270249999993 3.62 152.46705369999995 4.028 144.88833199999996 3.556 143.06585870000004 10.115 162.70833930000003 4.358 131.29410329999996 4.108 158.72092500000008 3.791 156.79667210000005 4.014 143.17467010000001 4.074 162.91270089999998 4.44 137.8886767 11.114 164.02936570000003 4.176 128.35941579999988 3.762 137.20122019999988 4.345 142.93669200000002 4.81)
Error minima by case: (0.0 0 0.0 0 1.3828 1 4.3599 1 0.0 0 0.0 0 0.0 0 8.6256 1 2.7297 1 0.0 0 5.2551 1 0.7729 1 2.9867 1 1.0 1 11.8179 1 0.0 0 12.4278 1 0.2151 1 1.0 1 0.9397 1 0.0 0 14.5649 1 0.0 0 0.0 0 1.3285 1)
Average genome size in population (length): 110.284
Average program size in population (points): 111.284
Average percent parens in population: 0.009
Minimum age in population: 73.68385423064241
Maximum age in population: 78.02547331856213
Average age in population: 75.98867451343718
Median age in population: 76.06172113374885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.369
Error (vector) diversity:			 0.54
Behavioral diversity:				 0.541
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 89850431
--- Timings ---
Current time: 1529615192787 milliseconds
Total Time:         209.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.4 seconds, 35.9%
Fitness Testing:    107.2 seconds, 51.0%
Report:              27.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 29846.0
Test mean error for best: 14.92300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -13.7572566753
Correct output: -109.6672675873 | Program output: -92.6672675873
Correct output: -97.3828405386 | Program output: -34.3828405386
Correct output: 92.6401192912  | Program output: 48.6401192912 
Correct output: -50.8424651996 | Program output: -40.8424651996
Correct output: -20.4046895985 | Program output: -20.4046895985
Correct output: -114.3715424664 | Program output: -96.3715424664
Correct output: -144.3743926958 | Program output: -92.3743926958
Correct output: 50.270281284   | Program output: 30.270281284  
Correct output: -23.5320860074 | Program output: 7.4679139926  
Correct output: -3.2945776626  | Program output: -8.2945776626 
Correct output: 134.2271184849 | Program output: 116.2271184849
Correct output: -0.0202199253  | Program output: -12.0202199253
Correct output: 22.147714426   | Program output: -7.852285574  
Correct output: 138.1821302172 | Program output: 108.1821302172
Correct output: 104.1305174885 | Program output: 111.1305174885
Correct output: -160.4278073292 | Program output: -115.4278073292
Correct output: 138.2150716868 | Program output: 115.2150716868
Correct output: -71.3359015133 | Program output: -97.3359015133
Correct output: -121.9396893018 | Program output: -68.9396893018
Correct output: 14.7358583393  | Program output: -8.2641416607 
Correct output: 137.435054132  | Program output: 106.435054132 
Correct output: 105.285953282  | Program output: 115.285953282 
Correct output: -95.2677404455 | Program output: -110.2677404455
Correct output: 56.3284961788  | Program output: 45.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction 28} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction 28} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction 63.01692924572032} {:instruction float_pop} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush} {:instruction integer_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction float_dup} {:instruction float_flush})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_inc 28 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_inc 28 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_mod float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod float_dup_times integer_min integer_yankdup integer_inc tag_float_9946 63.01692924572032 float_pop 74 integer_dec float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush integer_inc float_dup_times integer_swap integer_add float_max float_dup float_flush)
Errors: [17.0 12 17.0 3 63.0 2 44.0 2 10.0 1 0.0 0 18.0 3 52.0 3 20.0 1 31.0 13 5.0 1 18.0 2 12.0 2 30.0 11 30.0 1 7.0 2 45.0 2 23.0 2 26.0 2 53.0 3 23.0 12 31.0 2 10.0 1 15.0 3 11.0 2]
Total: 699.0
Mean: 13.98
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3567.2701803
Median total errors in population: 800.0
Error averages by case: (124.27072059999999 11.403 123.58518080000002 3.936 161.07642889999997 4.138 165.39750989999996 4.455 115.89205710000003 3.89 114.1288304 3.784 124.57517089999997 3.869 154.2014059 4.164 142.96695159999996 4.492 125.46222239999996 4.544 132.01328929999997 3.544 147.4448043 3.679 138.0995065 3.528 132.3635766 10.243 157.66503029999998 4.099 125.68366400000001 3.642 149.19784490000006 3.652 151.73019800000003 3.7 133.87661060000002 3.942 152.66343700000004 4.302 129.1087783 11.174 158.48602900000006 4.018 124.13078209999995 3.075 127.10392909999993 4.276 136.03822180000003 4.559)
Error minima by case: (0.0 0 0.0 0 6.6172 1 15.6401 1 0.0 0 0.0 0 0.0 0 13.6256 1 0.2703 1 0.0 0 1.52 1 4.2271 1 0.2982 1 0.0 0 7.8179 1 0.0 0 8.4278 1 1.7849 1 0.0 0 2.0603 1 0.0 0 10.5649 1 0.0 0 0.0 0 2.1911 1)
Average genome size in population (length): 111.148
Average program size in population (points): 112.148
Average percent parens in population: 0.009
Minimum age in population: 75.25999667743851
Maximum age in population: 79.55337556025489
Average age in population: 77.43707277292245
Median age in population: 77.48026186453423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.317
Error (vector) diversity:			 0.505
Behavioral diversity:				 0.506
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 92629367
--- Timings ---
Current time: 1529615198168 milliseconds
Total Time:         215.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.9 seconds, 35.8%
Fitness Testing:    110.0 seconds, 51.1%
Report:              28.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 29157.0
Test mean error for best: 14.57850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -18.7572566753
Correct output: -109.6672675873 | Program output: -97.6672675873
Correct output: -97.3828405386 | Program output: -39.3828405386
Correct output: 92.6401192912  | Program output: 59.6401192912 
Correct output: -50.8424651996 | Program output: -45.8424651996
Correct output: -20.4046895985 | Program output: -25.4046895985
Correct output: -114.3715424664 | Program output: -101.3715424664
Correct output: -144.3743926958 | Program output: -97.3743926958
Correct output: 50.270281284   | Program output: 41.270281284  
Correct output: -23.5320860074 | Program output: 18.4679139926 
Correct output: -3.2945776626  | Program output: 2.7054223374  
Correct output: 134.2271184849 | Program output: 127.2271184849
Correct output: -0.0202199253  | Program output: -1.0202199253 
Correct output: 22.147714426   | Program output: -12.852285574 
Correct output: 138.1821302172 | Program output: 119.1821302172
Correct output: 104.1305174885 | Program output: 122.1305174885
Correct output: -160.4278073292 | Program output: -120.4278073292
Correct output: 138.2150716868 | Program output: 126.2150716868
Correct output: -71.3359015133 | Program output: -102.3359015133
Correct output: -121.9396893018 | Program output: -73.9396893018
Correct output: 14.7358583393  | Program output: -13.2641416607
Correct output: 137.435054132  | Program output: 117.435054132 
Correct output: 105.285953282  | Program output: 126.285953282 
Correct output: -95.2677404455 | Program output: -115.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 integer_yank float_swap float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup)
Errors: [22.0 13 12.0 3 58.0 2 33.0 2 5.0 2 5.0 1 13.0 2 47.0 3 9.0 2 42.0 13 6.0 12 7.0 2 1.0 1 35.0 11 19.0 2 18.0 2 40.0 1 12.0 2 31.0 3 48.0 3 28.0 12 20.0 1 21.0 2 20.0 2 0.0 0]
Total: 651.0
Mean: 13.02
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3353.0456031
Median total errors in population: 770.0
Error averages by case: (117.03899910000003 11.318 120.72266 4.064 154.4643254 4.343 152.53336580000004 4.667 108.78543429999999 4.093 106.81985389999997 4.053 121.79730889999995 3.981 151.60661070000006 4.281 129.7848654 4.676 115.55112839999993 6.044 119.12044269999991 3.504 135.14684340000002 3.752 125.6390559 3.471 125.72955620000002 10.288 144.86358390000007 3.932 114.04775249999997 3.233 146.43069280000006 3.758 139.332794 3.677 127.36253530000005 4.042 148.6317347 4.413 121.67593779999997 10.932 144.67310690000002 3.947 113.79676259999988 3.033 122.01679129999995 4.379 122.88246120000001 4.71)
Error minima by case: (0.0 0 0.0 0 0.3828 1 6.6401 1 0.0 0 0.0 0 0.0 0 10.6256 1 2.2703 1 0.0 0 0.5302 1 7.0 1 1.0 1 0.8523 1 0.1821 1 0.0 0 0.4278 1 2.2151 1 0.0 0 25.9397 2 0.0 0 1.4351 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 113.607
Average program size in population (points): 114.607
Average percent parens in population: 0.009
Minimum age in population: 76.25999667743851
Maximum age in population: 80.8312867688493
Average age in population: 78.95906907763172
Median age in population: 78.96902753866358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.349
Error (vector) diversity:			 0.539
Behavioral diversity:				 0.54
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 95469692
--- Timings ---
Current time: 1529615203418 milliseconds
Total Time:         220.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.4 seconds, 35.5%
Fitness Testing:    113.1 seconds, 51.2%
Report:              29.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 29157.0
Test mean error for best: 14.57850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -18.7572566753
Correct output: -109.6672675873 | Program output: -97.6672675873
Correct output: -97.3828405386 | Program output: -39.3828405386
Correct output: 92.6401192912  | Program output: 59.6401192912 
Correct output: -50.8424651996 | Program output: -45.8424651996
Correct output: -20.4046895985 | Program output: -25.4046895985
Correct output: -114.3715424664 | Program output: -101.3715424664
Correct output: -144.3743926958 | Program output: -97.3743926958
Correct output: 50.270281284   | Program output: 41.270281284  
Correct output: -23.5320860074 | Program output: 18.4679139926 
Correct output: -3.2945776626  | Program output: 2.7054223374  
Correct output: 134.2271184849 | Program output: 127.2271184849
Correct output: -0.0202199253  | Program output: -1.0202199253 
Correct output: 22.147714426   | Program output: -12.852285574 
Correct output: 138.1821302172 | Program output: 119.1821302172
Correct output: 104.1305174885 | Program output: 122.1305174885
Correct output: -160.4278073292 | Program output: -120.4278073292
Correct output: 138.2150716868 | Program output: 126.2150716868
Correct output: -71.3359015133 | Program output: -102.3359015133
Correct output: -121.9396893018 | Program output: -73.9396893018
Correct output: 14.7358583393  | Program output: -13.2641416607
Correct output: 137.435054132  | Program output: 117.435054132 
Correct output: 105.285953282  | Program output: 126.285953282 
Correct output: -95.2677404455 | Program output: -115.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 integer_yank float_swap float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup)
Errors: [22.0 13 12.0 3 58.0 2 33.0 2 5.0 2 5.0 1 13.0 2 47.0 3 9.0 2 42.0 13 6.0 12 7.0 2 1.0 1 35.0 11 19.0 2 18.0 2 40.0 1 12.0 2 31.0 3 48.0 3 28.0 12 20.0 1 21.0 2 20.0 2 0.0 0]
Total: 651.0
Mean: 13.02
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3627.1705518
Median total errors in population: 742.0
Error averages by case: (129.007539 11.523 132.73663950000002 3.986 167.86692680000002 4.137 160.46700559999994 4.725 122.99845620000004 3.959 119.30754690000003 3.822 133.02587009999996 3.94 163.1393676 4.208 139.88613560000002 4.732 129.77605039999997 8.712 128.00719339999998 3.417 143.1191892 3.691 134.2283394 3.429 135.90397230000002 10.53 152.96862010000004 3.723 125.8693105 3.209 157.6193297 3.644 147.52944090000003 3.638 140.80493339999998 3.979 160.0961022 4.441 133.17746929999996 11.117 154.09695690000004 3.696 126.10925859999993 3.295 134.094941 4.279 130.7609572 4.741)
Error minima by case: (0.5243 1 0.0 0 0.3828 1 5.6401 1 0.0 0 0.0 0 0.0 0 6.6256 1 1.7297 1 0.0 0 0.0 0 2.0 1 0.5897 1 0.0 0 3.8179 1 0.0 0 4.4278 1 4.2151 1 0.0 0 0.9397 1 1.2641 1 6.5649 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 117.736
Average program size in population (points): 118.736
Average percent parens in population: 0.009
Minimum age in population: 77.86395251649336
Maximum age in population: 82.63933184570449
Average age in population: 80.2308404178786
Median age in population: 80.25320467309476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.334
Error (vector) diversity:			 0.526
Behavioral diversity:				 0.527
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 98413217
--- Timings ---
Current time: 1529615208680 milliseconds
Total Time:         226.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        80.0 seconds, 35.4%
Fitness Testing:    116.1 seconds, 51.4%
Report:              29.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 28763.0
Test mean error for best: 14.38150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -22.7572566753
Correct output: -109.6672675873 | Program output: -101.6672675873
Correct output: -97.3828405386 | Program output: -43.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -49.8424651996
Correct output: -20.4046895985 | Program output: -29.4046895985
Correct output: -114.3715424664 | Program output: -105.3715424664
Correct output: -144.3743926958 | Program output: -101.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: 17.4679139926 
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -16.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -124.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -106.3359015133
Correct output: -121.9396893018 | Program output: -77.9396893018
Correct output: 14.7358583393  | Program output: -17.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -119.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction in2} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction integer_sub} {:instruction 74} {:instruction 74} {:instruction 62.59779723711451} {:instruction float_pop} {:instruction float_inc})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove in2 float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_dup_times float_rot integer_shove integer_min float_yank print_float integer_dup integer_dup_items integer_dec integer_min integer_yankdup integer_inc tag_float_9946 integer_sub in1 integer_inc integer_sub 74 74 62.59779723711451 float_pop float_inc)
Errors: [26.0 12 8.0 1 54.0 2 34.0 2 1.0 2 9.0 1 9.0 2 43.0 2 10.0 1 41.0 13 5.0 12 8.0 2 2.0 1 39.0 12 20.0 1 17.0 2 36.0 2 13.0 2 35.0 3 44.0 3 32.0 12 21.0 2 20.0 1 24.0 3 1.0 1]
Total: 649.0
Mean: 12.98
Genome size: 143
Size: 144
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3466.8730617999995
Median total errors in population: 723.0
Error averages by case: (122.7498671 11.256 126.52129230000003 4.15 164.35156709999998 4.516 152.7120096 4.572 118.51342269999999 4.281 114.49788720000001 4.099 127.5535274 4.063 157.1074225 4.283 131.69028590000002 4.534 127.11807909999999 10.403 119.18585850000001 3.471 134.3397533 3.62 126.03481130000002 3.443 130.00079770000002 10.054 144.55229839999998 3.571 121.47160589999996 3.317 152.0316715 3.771 138.6423637 3.618 132.9577828 4.053 153.81778350000008 4.67 125.85066769999996 10.744 145.37967720000006 3.506 122.92363129999995 3.433 126.87504189999994 4.355 123.67895620000002 4.532)
Error minima by case: (0.0 0 0.0 0 0.3828 1 8.6401 1 0.0 0 0.0 0 0.0 0 5.6256 1 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 0.8179 1 0.0 0 1.4278 1 2.0 1 3.0 1 0.0603 1 0.0 0 0.4351 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 121.269
Average program size in population (points): 122.269
Average percent parens in population: 0.008
Minimum age in population: 79.21602656161524
Maximum age in population: 83.57266727122091
Average age in population: 81.63956058973073
Median age in population: 81.67595677061834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.948
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.948
Total error diversity:				 0.332
Error (vector) diversity:			 0.564
Behavioral diversity:				 0.566
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 101445567
--- Timings ---
Current time: 1529615214037 milliseconds
Total Time:         231.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.3 seconds, 35.1%
Fitness Testing:    119.4 seconds, 51.6%
Report:              30.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 28755.0
Test mean error for best: 14.37750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -28.7572566753
Correct output: -109.6672675873 | Program output: -107.6672675873
Correct output: -97.3828405386 | Program output: -49.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -55.8424651996
Correct output: -20.4046895985 | Program output: -35.4046895985
Correct output: -114.3715424664 | Program output: -111.3715424664
Correct output: -144.3743926958 | Program output: -107.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 19.4679139926 
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -22.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -130.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -112.3359015133
Correct output: -121.9396893018 | Program output: -83.9396893018
Correct output: 14.7358583393  | Program output: -23.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -125.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction tagged_343} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_flush})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 integer_yank float_swap float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_sub float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush tagged_343 float_dup_times integer_swap integer_add float_max integer_dup_items float_flush)
Errors: [32.0 12 2.0 1 48.0 2 32.0 2 5.0 1 15.0 2 3.0 1 37.0 2 8.0 2 43.0 13 7.0 11 6.0 2 0.0 0 45.0 10 18.0 2 19.0 2 30.0 1 11.0 2 41.0 2 38.0 3 38.0 13 19.0 2 22.0 2 30.0 2 1.0 1]
Total: 643.0
Mean: 12.86
Genome size: 164
Size: 165
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3341.1725895000004
Median total errors in population: 704.0
Error averages by case: (118.8256292 10.969 123.7821478 4.19 160.64846800000007 4.789 145.21467629999998 4.413 114.4791973 4.536 110.88829940000004 4.373 124.94938959999996 4.116 155.0059492 4.344 123.456082 4.46 127.60164869999994 10.851 111.39996069999997 4.134 125.4974923 3.631 116.47252429999999 3.545 126.10015200000005 9.603 135.80125350000006 3.619 117.9285501 3.545 150.06082400000005 3.772 129.9105474 3.613 127.13427890000001 4.022 152.1332698 4.905 122.60979640000001 10.4 136.65797900000007 3.521 119.55388919999993 3.537 121.67680539999995 4.254 116.052779 4.189)
Error minima by case: (0.0 0 0.0 0 1.3828 1 1.9252 1 0.0 0 0.0 0 0.0 0 17.3744 1 0.7297 1 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.1821 1 0.0 0 0.4278 1 0.0 0 1.0 1 6.0603 1 1.0 1 1.4351 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 125.008
Average program size in population (points): 126.008
Average percent parens in population: 0.008
Minimum age in population: 80.68873147002859
Maximum age in population: 85.0599447607358
Average age in population: 83.1815164230168
Median age in population: 83.21207565657942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.319
Error (vector) diversity:			 0.571
Behavioral diversity:				 0.571
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 104571467
--- Timings ---
Current time: 1529615219970 milliseconds
Total Time:         237.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.7 seconds, 34.9%
Fitness Testing:    123.1 seconds, 51.9%
Report:              31.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 28766.0
Test mean error for best: 14.38300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 59.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 41.270281284  
Correct output: -23.5320860074 | Program output: 18.4679139926 
Correct output: -3.2945776626  | Program output: 2.7054223374  
Correct output: 134.2271184849 | Program output: 127.2271184849
Correct output: -0.0202199253  | Program output: -1.0202199253 
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 119.1821302172
Correct output: 104.1305174885 | Program output: 122.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 126.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 117.435054132 
Correct output: 105.285953282  | Program output: 126.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tagged_445} {:instruction integer_sub} {:instruction float_pop})
Best program: (in2 integer_yank integer_rot -98 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tagged_445 integer_sub float_pop)
Errors: [27.0 12 7.0 1 53.0 2 33.0 2 0.0 0 10.0 1 8.0 2 42.0 2 9.0 2 42.0 13 6.0 12 7.0 2 1.0 1 40.0 12 19.0 2 18.0 2 35.0 2 12.0 2 36.0 3 43.0 3 33.0 12 20.0 1 21.0 2 25.0 3 0.0 0]
Total: 643.0
Mean: 12.86
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3388.593291700001
Median total errors in population: 680.0
Error averages by case: (124.32452830000001 11.102 125.48064770000003 4.047 162.53636179999998 4.572 142.2118913 4.581 117.08859869999999 4.409 114.09198520000002 4.162 126.64541849999998 3.963 156.4715747 4.249 122.17337929999998 4.542 130.30606019999993 10.916 110.88367379999997 5.554 125.04725520000004 3.669 114.12736979999997 3.778 132.69452879999997 9.964 134.9127833 3.7 122.18497379999998 3.693 151.4532059 3.688 129.28399919999998 3.685 132.20821840000005 4.004 155.2361584999999 4.921 129.0570175 10.634 135.66370890000002 3.591 123.95656899999989 3.624 126.63632319999992 4.24 114.50406069999998 4.125)
Error minima by case: (0.0 0 0.0 0 0.3828 1 6.6401 1 0.0 0 0.0 0 0.0 0 5.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.1821 1 0.0 0 0.4278 1 1.0 1 0.0619 1 4.9397 1 1.0 1 1.5649 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 129.72
Average program size in population (points): 130.72
Average percent parens in population: 0.008
Minimum age in population: 82.1235549427475
Maximum age in population: 86.6176195653409
Average age in population: 84.68244566839627
Median age in population: 84.73714775997198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.324
Error (vector) diversity:			 0.585
Behavioral diversity:				 0.586
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 107814730
--- Timings ---
Current time: 1529615225735 milliseconds
Total Time:         242.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.1 seconds, 34.6%
Fitness Testing:    126.6 seconds, 52.1%
Report:              32.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 28755.0
Test mean error for best: 14.37750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -28.7572566753
Correct output: -109.6672675873 | Program output: -107.6672675873
Correct output: -97.3828405386 | Program output: -49.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -55.8424651996
Correct output: -20.4046895985 | Program output: -35.4046895985
Correct output: -114.3715424664 | Program output: -111.3715424664
Correct output: -144.3743926958 | Program output: -107.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 19.4679139926 
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -22.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -130.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -112.3359015133
Correct output: -121.9396893018 | Program output: -83.9396893018
Correct output: 14.7358583393  | Program output: -23.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -125.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction tagged_343} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_flush})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 integer_yank float_swap float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_sub float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush tagged_343 float_dup_times integer_swap integer_add float_max integer_dup_items float_flush)
Errors: [32.0 12 2.0 1 48.0 2 32.0 2 5.0 1 15.0 2 3.0 1 37.0 2 8.0 2 43.0 13 7.0 11 6.0 2 0.0 0 45.0 10 18.0 2 19.0 2 30.0 1 11.0 2 41.0 2 38.0 3 38.0 13 19.0 2 22.0 2 30.0 2 1.0 1]
Total: 643.0
Mean: 12.86
Genome size: 164
Size: 165
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3273.1072056
Median total errors in population: 669.0
Error averages by case: (122.10437390000003 11.002 120.4898803 3.746 157.97157819999998 4.717 136.61527590000003 4.468 113.05674809999998 4.361 111.8410521 4.221 121.83653059999997 3.702 151.4356642 4.076 115.7423039 4.5 126.35620539999994 10.717 105.1326117 6.559 118.96679900000001 3.459 107.70412660000001 3.836 128.81459800000002 10.235 129.10950820000005 3.559 117.89992900000001 3.605 146.43591610000007 3.59 123.24312030000002 3.516 130.86589740000005 3.966 149.7262303 4.946 126.04138440000001 10.832 129.92072870000004 3.441 119.54120049999996 3.481 125.06736279999997 4.172 108.50618 3.975)
Error minima by case: (1.0 1 0.0 0 0.3828 1 7.6401 1 0.0 0 0.0 0 0.0 0 11.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.5722 1 0.2151 1 0.0 0 11.9397 2 1.0 1 0.0 0 0.0 0 1.0 1 0.0 0)
Average genome size in population (length): 133.648
Average program size in population (points): 134.648
Average percent parens in population: 0.007
Minimum age in population: 83.56875625582832
Maximum age in population: 88.00440081504021
Average age in population: 86.1434809651826
Median age in population: 86.15439069383518
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.3
Error (vector) diversity:			 0.541
Behavioral diversity:				 0.542
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 111156055
--- Timings ---
Current time: 1529615231803 milliseconds
Total Time:         249.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.7 seconds, 34.4%
Fitness Testing:    130.1 seconds, 52.3%
Report:              33.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 28495.0
Test mean error for best: 14.24750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 19.4679139926 
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9996} {:instruction float_dup_items} {:instruction in1} {:instruction integer_inc})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc tag_float_9996 float_dup_items in1 integer_inc)
Errors: [27.0 12 7.0 1 53.0 2 32.0 2 0.0 0 10.0 1 8.0 2 42.0 2 8.0 2 43.0 13 7.0 11 6.0 2 0.0 0 40.0 12 18.0 2 19.0 2 35.0 2 11.0 2 36.0 3 43.0 3 33.0 12 19.0 2 22.0 2 25.0 3 1.0 1]
Total: 641.0
Mean: 12.82
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3358.3806573
Median total errors in population: 665.0
Error averages by case: (121.32998460000002 10.946 118.23513830000003 3.549 156.69725900000003 4.725 145.1960375 4.748 111.00222310000001 4.231 111.61004409999998 4.254 120.06007799999995 3.635 149.30721470000006 3.971 122.74461750000003 4.64 135.94853169999993 10.614 115.26081779999997 7.532 126.89555980000003 3.486 115.13803430000002 3.955 128.12822310000004 10.381 135.99502310000008 3.587 125.8845368 3.642 144.9148356000001 3.655 130.24586610000003 3.555 131.30867110000005 4.035 148.9922624 4.849 125.66115919999996 10.973 136.83519680000003 3.464 127.46762769999991 3.548 125.75827449999994 4.211 117.37944050000002 4.198)
Error minima by case: (0.0 0 0.0 0 0.3828 1 0.3599 1 0.0 0 0.0 0 0.0 0 20.6256 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.8179 1 0.0 0 1.4278 1 0.0 0 0.0 0 15.9397 1 0.0 0 0.5649 1 0.0 0 1.2911 1 0.0 0)
Average genome size in population (length): 136.175
Average program size in population (points): 137.175
Average percent parens in population: 0.007
Minimum age in population: 84.56875625582832
Maximum age in population: 89.35559210646565
Average age in population: 87.42701696075717
Median age in population: 87.48013757277357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.296
Error (vector) diversity:			 0.51
Behavioral diversity:				 0.51
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 114560655
--- Timings ---
Current time: 1529615237921 milliseconds
Total Time:         255.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.4 seconds, 34.3%
Fitness Testing:    133.6 seconds, 52.4%
Report:              33.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 28871.0
Test mean error for best: 14.43550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 19.4679139926 
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 28} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc})
Best program: (in2 in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc float_inc float_inc 28 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_yank float_swap float_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_swap integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove integer_inc float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc)
Errors: [27.0 12 7.0 1 53.0 2 32.0 2 0.0 0 10.0 1 8.0 2 42.0 2 8.0 2 43.0 13 7.0 11 6.0 2 0.0 0 40.0 12 18.0 2 19.0 2 35.0 2 11.0 2 36.0 3 43.0 3 33.0 12 19.0 2 22.0 2 25.0 3 1.0 1]
Total: 641.0
Mean: 12.82
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3400.9275760000005
Median total errors in population: 662.5
Error averages by case: (126.80497300000002 10.919 122.9276542 3.592 158.96770840000005 4.807 141.56211359999998 4.578 116.48644799999998 4.285 116.7212566 4.384 124.82552889999992 3.74 153.8039989 4.088 121.35716099999999 4.561 134.8344618 10.768 114.18951489999995 8.051 123.52938380000005 3.549 114.31386089999998 4.072 134.7825613 10.458 134.11100740000006 3.637 124.09794769999999 3.711 150.11456040000004 3.813 127.85841700000005 3.614 136.28838450000006 4.181 154.28427830000007 4.998 130.34050310000003 11.081 134.88350710000006 3.494 125.63554979999994 3.538 132.05934219999995 4.368 113.8614532 3.999)
Error minima by case: (1.0 1 0.0 0 0.3828 1 5.3599 1 0.0 0 0.0 0 0.0 0 18.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 3.8179 1 0.0 0 4.4278 1 0.0 0 2.0 1 2.9397 1 2.0 1 2.4351 1 0.0 0 3.0 1 0.0 0)
Average genome size in population (length): 136.443
Average program size in population (points): 137.443
Average percent parens in population: 0.007
Minimum age in population: 85.56875625582832
Maximum age in population: 90.94277203398282
Average age in population: 88.78875184572301
Median age in population: 88.82288281962539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.956
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.956
Total error diversity:				 0.304
Error (vector) diversity:			 0.519
Behavioral diversity:				 0.52
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 117971880
--- Timings ---
Current time: 1529615243557 milliseconds
Total Time:         260.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.0 seconds, 34.1%
Fitness Testing:    137.0 seconds, 52.5%
Report:              34.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 28823.0
Test mean error for best: 14.41150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 19.4679139926 
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction integer_rot} {:instruction -98} {:instruction integer_yank} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction tagged_343} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_flush})
Best program: (in2 integer_yank integer_rot -98 integer_yank integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 integer_yank float_swap float_inc float_inc float_inc float_inc float_min float_inc float_inc integer_stackdepth float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_div float_inc float_inc in1 float_dec float_dec float_dec float_dec integer_yankdup float_dec float_dec float_dec integer_shove float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_sub float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush tagged_343 float_dup_times integer_swap integer_add float_max integer_dup_items float_flush)
Errors: [27.0 12 7.0 1 53.0 2 32.0 2 0.0 0 10.0 1 8.0 2 42.0 2 8.0 2 43.0 13 7.0 11 6.0 2 0.0 0 40.0 12 18.0 2 19.0 2 35.0 2 11.0 2 36.0 3 43.0 3 33.0 12 19.0 2 22.0 2 25.0 3 1.0 1]
Total: 641.0
Mean: 12.82
Genome size: 162
Size: 163
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3739.2859783999997
Median total errors in population: 659.0
Error averages by case: (138.90025610000004 11.134 132.0416217 3.349 169.52233420000002 4.467 159.0812092 4.846 126.611692 3.87 127.12111210000003 4.092 134.30990839999996 3.597 162.32896839999995 3.939 139.95097330000002 4.645 152.60303050000002 10.921 124.46032219999994 8.388 141.59874449999995 3.611 126.65596489999997 3.883 146.00774750000002 10.727 151.44958540000007 3.676 143.08286470000002 3.771 158.498682 3.742 145.67348570000001 3.682 149.85554990000003 4.159 160.92907199999993 4.937 144.30535100000003 11.319 152.2591214 3.49 144.70975759999988 3.629 143.75550579999992 4.352 131.21511790000002 4.132)
Error minima by case: (1.1154 1 0.0 0 0.3828 1 2.3599 1 0.0 0 0.0 0 0.0 0 14.6256 1 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 1.1821 1 0.0 0 0.5722 1 0.0 0 0.0 0 1.825 1 1.9986 1 0.5649 1 0.0 0 1.0 1 0.0 0)
Average genome size in population (length): 136.793
Average program size in population (points): 137.793
Average percent parens in population: 0.007
Minimum age in population: 87.40790826598096
Maximum age in population: 92.19392529949585
Average age in population: 90.12424787706254
Median age in population: 90.180419234213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.287
Error (vector) diversity:			 0.479
Behavioral diversity:				 0.479
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 121391930
--- Timings ---
Current time: 1529615249706 milliseconds
Total Time:         266.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.6 seconds, 33.9%
Fitness Testing:    140.8 seconds, 52.8%
Report:              35.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 28823.0
Test mean error for best: 14.41150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 19.4679139926 
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 28} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction 98} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tagged_445} {:instruction integer_sub} {:instruction float_pop})
Best program: (in2 in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc float_inc float_inc 28 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_yank float_swap float_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_swap integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec 98 integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_yank print_float integer_dup float_mult integer_mult integer_min integer_yankdup integer_inc tagged_445 integer_sub float_pop)
Errors: [27.0 12 7.0 1 53.0 2 32.0 2 0.0 0 10.0 1 8.0 2 42.0 2 8.0 2 43.0 13 7.0 11 6.0 2 0.0 0 40.0 12 18.0 2 19.0 2 35.0 2 11.0 2 36.0 3 43.0 3 33.0 12 19.0 2 22.0 2 25.0 3 1.0 1]
Total: 641.0
Mean: 12.82
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3670.2088178000004
Median total errors in population: 658.0
Error averages by case: (137.92229570000003 10.925 132.6565364 3.368 168.07119329999998 4.777 152.3303471 4.642 126.0046578 4.131 126.77573169999998 4.348 134.66351039999995 3.608 162.95127059999996 3.949 133.72322739999998 4.558 147.8491528 10.949 123.54132259999996 8.501 135.3875729 3.68 123.2398672 3.675 144.67031770000006 10.578 145.4744545000001 3.744 136.99416559999995 3.78 158.984749 3.811 139.7279478 3.71 149.04143599999998 4.193 162.79881429999998 5.085 141.98266860000004 11.19 146.2641269000001 3.505 138.6390947999999 3.641 143.42973909999995 4.381 124.3796176 3.976)
Error minima by case: (2.6363 1 0.0 0 1.5234 1 3.3599 1 0.0 0 0.0 0 0.0 0 16.3744 1 0.2703 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.1821 1 0.0 0 0.5722 1 1.0 1 2.0 1 0.4863 1 1.7359 1 1.5649 1 1.0 1 0.5917 1 0.0 0)
Average genome size in population (length): 137.106
Average program size in population (points): 138.106
Average percent parens in population: 0.007
Minimum age in population: 88.61714739182673
Maximum age in population: 93.25378569035928
Average age in population: 91.40297324062298
Median age in population: 91.43610077336336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.295
Error (vector) diversity:			 0.469
Behavioral diversity:				 0.469
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 124819780
--- Timings ---
Current time: 1529615255632 milliseconds
Total Time:         273.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.0 seconds, 33.7%
Fitness Testing:    144.6 seconds, 53.0%
Report:              36.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 29848.6387
Test mean error for best: 14.92432
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -21.7572566753
Correct output: -109.6672675873 | Program output: -100.6672675873
Correct output: -97.3828405386 | Program output: -42.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -28.4046895985
Correct output: -114.3715424664 | Program output: -104.3715424664
Correct output: -144.3743926958 | Program output: -100.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: 3.0           
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -15.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -123.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -105.3359015133
Correct output: -121.9396893018 | Program output: -76.9396893018
Correct output: 14.7358583393  | Program output: -16.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -118.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_inc float_inc float_inc integer_yank float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [25.0 12 9.0 1 55.0 2 34.0 2 2.0 2 8.0 1 10.0 1 44.0 2 10.0 1 26.5321 11 5.0 12 8.0 2 2.0 1 38.0 12 20.0 1 17.0 2 37.0 2 13.0 2 34.0 3 45.0 3 31.0 12 21.0 2 20.0 1 23.0 3 1.0 1]
Total: 632.5321
Mean: 12.650642
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3543.301716000001
Median total errors in population: 660.0
Error averages by case: (134.00449210000002 10.926 125.47078080000006 3.403 163.29688560000002 4.746 149.77454550000002 4.853 119.6292565 4.073 122.23585529999998 4.392 127.25965779999997 3.658 156.1391289 4.009 128.33178630000003 4.707 141.36807639999995 10.819 118.33621189999995 8.791 131.54417919999995 3.604 118.80655969999997 3.75 139.96399220000004 10.532 141.68336310000007 3.644 132.9711458 3.676 153.15866409999998 3.826 135.81037410000005 3.61 140.1408014 4.227 156.22554590000001 5.187 138.54850230000005 11.17 142.45513980000004 3.425 134.2355412999999 3.606 136.7287433 4.419 121.96248670000001 4.167)
Error minima by case: (0.5997 1 0.0 0 0.3828 1 2.6401 1 0.0 0 0.0 0 0.0 0 15.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.773 1 1.0 1 0.0 0 1.5722 1 0.0 0 1.0 1 3.9397 1 0.0 0 0.0 0 0.0 0 1.9449 1 0.0 0)
Average genome size in population (length): 137.231
Average program size in population (points): 138.231
Average percent parens in population: 0.007
Minimum age in population: 90.75207103515852
Maximum age in population: 94.6773741014563
Average age in population: 92.68941422805226
Median age in population: 92.7069826827284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.299
Error (vector) diversity:			 0.469
Behavioral diversity:				 0.469
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 128250755
--- Timings ---
Current time: 1529615261881 milliseconds
Total Time:         279.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.6 seconds, 33.5%
Fitness Testing:    148.5 seconds, 53.2%
Report:              36.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 29848.6387
Test mean error for best: 14.92432
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -21.7572566753
Correct output: -109.6672675873 | Program output: -100.6672675873
Correct output: -97.3828405386 | Program output: -42.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -28.4046895985
Correct output: -114.3715424664 | Program output: -104.3715424664
Correct output: -144.3743926958 | Program output: -100.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: 3.0           
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -15.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -123.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -105.3359015133
Correct output: -121.9396893018 | Program output: -76.9396893018
Correct output: 14.7358583393  | Program output: -16.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -118.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [25.0 12 9.0 1 55.0 2 34.0 2 2.0 2 8.0 1 10.0 1 44.0 2 10.0 1 26.5321 11 5.0 12 8.0 2 2.0 1 38.0 12 20.0 1 17.0 2 37.0 2 13.0 2 34.0 3 45.0 3 31.0 12 21.0 2 20.0 1 23.0 3 1.0 1]
Total: 632.5321
Mean: 12.650642
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3119.8418739999997
Median total errors in population: 658.0
Error averages by case: (118.71804900000001 10.809 110.71799450000002 3.088 148.257992 4.654 130.83518909999998 4.487 104.2912514 3.824 107.1219606 4.201 112.41780139999997 3.398 142.06281370000002 3.709 110.25547560000003 4.454 123.96294389999998 10.66 101.39558749999995 8.889 111.7797989 3.449 100.56172059999997 3.731 126.81323080000001 10.436 122.18347480000004 3.501 113.96599889999999 3.522 137.31195030000003 3.545 116.12648109999999 3.433 126.60337299999998 3.932 140.6191549 4.926 123.27868609999999 10.999 122.99759160000004 3.314 115.63722419999995 3.441 120.70644569999993 4.112 102.87068440000006 3.835)
Error minima by case: (0.0 0 0.0 0 5.6172 1 12.6401 1 0.0 0 0.0 0 0.0 0 11.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0212 1 0.0 0 1.0 1 5.5722 1 0.0 0 4.0 1 0.2961 1 1.0 1 1.0 1 0.0 0 2.0 1 0.0 0)
Average genome size in population (length): 136.71
Average program size in population (points): 137.71
Average percent parens in population: 0.007
Minimum age in population: 91.93871047386214
Maximum age in population: 96.13309120429474
Average age in population: 93.97880037764895
Median age in population: 94.00866081932035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.291
Error (vector) diversity:			 0.464
Behavioral diversity:				 0.465
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 131668605
--- Timings ---
Current time: 1529615267814 milliseconds
Total Time:         285.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.9 seconds, 33.3%
Fitness Testing:    152.4 seconds, 53.5%
Report:              37.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 29848.6387
Test mean error for best: 14.92432
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -21.7572566753
Correct output: -109.6672675873 | Program output: -100.6672675873
Correct output: -97.3828405386 | Program output: -42.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -28.4046895985
Correct output: -114.3715424664 | Program output: -104.3715424664
Correct output: -144.3743926958 | Program output: -100.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: 3.0           
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -15.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -123.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -105.3359015133
Correct output: -121.9396893018 | Program output: -76.9396893018
Correct output: 14.7358583393  | Program output: -16.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -118.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup float_tan integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [25.0 12 9.0 1 55.0 2 34.0 2 2.0 2 8.0 1 10.0 1 44.0 2 10.0 1 26.5321 11 5.0 12 8.0 2 2.0 1 38.0 12 20.0 1 17.0 2 37.0 2 13.0 2 34.0 3 45.0 3 31.0 12 21.0 2 20.0 1 23.0 3 1.0 1]
Total: 632.5321
Mean: 12.650642
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3385.5424241
Median total errors in population: 656.0
Error averages by case: (125.34570260000002 10.709 120.2432332 3.123 158.17407589999993 4.757 143.263501 4.718 113.38411149999999 3.928 115.42889260000003 4.328 123.01638759999996 3.473 151.307162 3.713 122.0817197 4.49 137.77877969999994 10.612 111.86539669999998 8.841 124.4444006 3.5 111.61227739999997 3.468 132.504443 10.421 134.91117430000003 3.577 126.67364509999999 3.578 147.72784220000003 3.618 129.0484246 3.48 136.05964200000005 4.003 150.8203037 5.077 129.622525 10.918 136.16238670000004 3.336 128.38159389999993 3.491 130.78198019999996 4.158 115.58582289999998 4.0)
Error minima by case: (1.0 1 0.0 0 2.6172 1 0.6401 1 0.0 0 0.0 0 0.0 0 21.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 5.0 1 1.0 1 3.4278 1 0.0 0 0.0 0 2.0603 1 1.0 1 2.4351 1 0.0 0 3.0 1 0.0 0)
Average genome size in population (length): 136.773
Average program size in population (points): 137.773
Average percent parens in population: 0.007
Minimum age in population: 93.35093005537647
Maximum age in population: 97.5601161113237
Average age in population: 95.20741045543392
Median age in population: 95.2352010601795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.293
Error (vector) diversity:			 0.447
Behavioral diversity:				 0.448
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 135088055
--- Timings ---
Current time: 1529615273759 milliseconds
Total Time:         291.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.2 seconds, 33.1%
Fitness Testing:    156.2 seconds, 53.7%
Report:              38.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 29848.6387
Test mean error for best: 14.92432
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -21.7572566753
Correct output: -109.6672675873 | Program output: -100.6672675873
Correct output: -97.3828405386 | Program output: -42.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -28.4046895985
Correct output: -114.3715424664 | Program output: -104.3715424664
Correct output: -144.3743926958 | Program output: -100.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: 3.0           
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -15.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -123.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -105.3359015133
Correct output: -121.9396893018 | Program output: -76.9396893018
Correct output: 14.7358583393  | Program output: -16.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -118.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup float_tan integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [25.0 12 9.0 1 55.0 2 34.0 2 2.0 2 8.0 1 10.0 1 44.0 2 10.0 1 26.5321 11 5.0 12 8.0 2 2.0 1 38.0 12 20.0 1 17.0 2 37.0 2 13.0 2 34.0 3 45.0 3 31.0 12 21.0 2 20.0 1 23.0 3 1.0 1]
Total: 632.5321
Mean: 12.650642
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3376.3134294999995
Median total errors in population: 661.0
Error averages by case: (125.69119200000004 10.609 122.01656230000002 3.47 156.7534536 4.963 140.29792120000008 4.709 112.98462289999996 4.099 115.41370209999998 4.529 123.86278729999994 3.791 152.78838380000002 4.06 120.0480166 4.563 133.96466889999988 10.415 112.30583229999992 9.023 124.00241120000005 3.694 111.48910719999999 3.828 133.0308003 10.347 133.94304790000007 3.777 125.8787586 3.789 148.89204160000008 3.922 128.30892100000003 3.695 134.30630870000005 4.263 151.93473220000007 5.314 129.945953 10.797 134.69115460000006 3.572 127.45037369999991 3.692 130.3260061999999 4.418 112.57467030000002 4.073)
Error minima by case: (0.1388 1 0.0 0 0.6172 1 4.6401 1 0.0 0 0.0 0 0.0 0 21.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.1821 1 0.0 0 0.4278 1 0.0 0 0.0 0 2.0603 1 0.5943 1 1.0 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 136.667
Average program size in population (points): 137.667
Average percent parens in population: 0.007
Minimum age in population: 94.52238161916948
Maximum age in population: 98.5601161113237
Average age in population: 96.48924625212591
Median age in population: 96.48607927836913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.304
Error (vector) diversity:			 0.468
Behavioral diversity:				 0.47
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 138504855
--- Timings ---
Current time: 1529615279944 milliseconds
Total Time:         296.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.6 seconds, 32.9%
Fitness Testing:    159.9 seconds, 53.9%
Report:              39.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 29712.646899999996
Test mean error for best: 14.85632
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -25.7572566753
Correct output: -109.6672675873 | Program output: -104.6672675873
Correct output: -97.3828405386 | Program output: -46.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -52.8424651996
Correct output: -20.4046895985 | Program output: -32.4046895985
Correct output: -114.3715424664 | Program output: -108.3715424664
Correct output: -144.3743926958 | Program output: -104.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: -1.0          
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -19.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -127.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -109.3359015133
Correct output: -121.9396893018 | Program output: -80.9396893018
Correct output: 14.7358583393  | Program output: -20.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -122.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction tag_float_9962} {:instruction integer_sub} {:instruction in1} {:instruction integer_inc} {:instruction float_inc} {:instruction 74} {:instruction 74} {:instruction 63.01692924572032} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction float_yankdup})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec integer_sub float_dec float_dec integer_shove float_dec float_yank print_float integer_dup tag_float_9962 integer_sub in1 integer_inc float_inc 74 74 63.01692924572032 integer_yankdup integer_inc tag_float_9946 float_yankdup)
Errors: [29.0 12 5.0 1 51.0 2 34.0 2 2.0 1 12.0 2 6.0 2 40.0 1 10.0 1 22.5321 11 5.0 12 8.0 2 2.0 1 42.0 12 20.0 1 17.0 2 33.0 2 13.0 2 38.0 3 41.0 3 35.0 13 21.0 2 20.0 1 27.0 3 1.0 1]
Total: 629.5321
Mean: 12.590642
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3160.0800377999994
Median total errors in population: 663.0
Error averages by case: (118.68765490000007 10.628 113.74583610000005 3.535 150.39451789999993 4.883 132.44153630000008 4.623 106.55626979999995 4.045 108.45198150000002 4.428 116.40073429999987 3.834 144.04361460000004 4.099 111.93201210000001 4.529 122.25770809999987 10.079 102.13519209999997 8.77 113.32017260000003 3.494 102.56906249999999 3.696 125.15168820000007 10.358 123.2260444000001 3.548 115.18277739999996 3.583 141.51345180000013 3.888 117.47582520000003 3.457 128.64845060000007 4.256 142.7646145 5.172 122.6813236 10.793 124.01907910000003 3.353 116.80198679999987 3.478 124.00522549999985 4.351 104.76127790000005 4.032)
Error minima by case: (2.0 1 0.0 0 3.6172 1 0.6401 1 0.0 0 0.0 0 0.0 0 13.1443 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 0.4278 1 0.0 0 0.0 0 5.0603 1 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 136.74
Average program size in population (points): 137.74
Average percent parens in population: 0.007
Minimum age in population: 95.71416286599408
Maximum age in population: 99.75384324809535
Average age in population: 97.73935963809264
Median age in population: 97.72775844826803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.345
Error (vector) diversity:			 0.504
Behavioral diversity:				 0.505
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 141923480
--- Timings ---
Current time: 1529615285908 milliseconds
Total Time:         303.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.0 seconds, 32.7%
Fitness Testing:    163.6 seconds, 54.0%
Report:              40.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 30504.841499999995
Test mean error for best: 15.25242
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 68.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 50.270281284  
Correct output: -23.5320860074 | Program output: 3.0           
Correct output: -3.2945776626  | Program output: 11.7054223374 
Correct output: 134.2271184849 | Program output: 136.2271184849
Correct output: -0.0202199253  | Program output: 7.9797800747  
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 128.1821302172
Correct output: 104.1305174885 | Program output: 131.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 135.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 126.435054132 
Correct output: 105.285953282  | Program output: 135.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 65.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction 28} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_flush} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 in1 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_inc float_inc float_inc float_inc float_inc 28 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_yank float_swap float_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup float_flush tag_float_9946 integer_sub in1)
Errors: [27.0 12 7.0 1 53.0 2 24.0 2 0.0 0 10.0 1 8.0 2 42.0 2 0.0 0 26.5321 11 15.0 12 2.0 1 8.0 12 40.0 12 10.0 1 27.0 2 35.0 2 3.0 1 36.0 3 43.0 3 33.0 12 11.0 2 30.0 1 25.0 3 9.0 2]
Total: 626.5321
Mean: 12.530642
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3283.0391909
Median total errors in population: 667.0
Error averages by case: (120.44949170000014 10.812 118.80474820000002 3.754 150.09877239999997 4.955 135.67476990000003 4.781 107.03085199999992 4.17 109.88913620000005 4.488 121.33743799999982 4.049 148.43550530000002 4.28 116.41546839999997 4.669 129.6927989999998 10.347 105.26852409999987 8.82 122.6255805 3.806 107.57535029999995 3.852 125.05699200000005 10.616 131.75393930000013 3.826 123.56023159999995 3.873 146.38235270000015 4.116 126.58297620000003 3.797 133.59957570000012 4.438 146.7699472 5.322 124.9299471 11.005 132.26523310000007 3.68 125.3412183999998 3.726 129.24772329999985 4.573 108.29161830000008 4.204)
Error minima by case: (3.0 1 0.0 0 1.6172 1 7.3599 1 0.0 0 0.0 0 0.0 0 7.6256 1 0.0 0 0.5321 1 0.0 0 0.0 0 0.0 0 1.0 1 0.8179 1 0.0 0 1.4278 1 0.0 0 1.0 1 2.9397 1 0.7359 1 0.4351 1 0.0 0 5.0 1 0.0 0)
Average genome size in population (length): 136.174
Average program size in population (points): 137.174
Average percent parens in population: 0.007
Minimum age in population: 96.89049195243167
Maximum age in population: 101.187105121605
Average age in population: 98.96759221316977
Median age in population: 99.00781688313086
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.319
Error (vector) diversity:			 0.484
Behavioral diversity:				 0.484
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 145327980
--- Timings ---
Current time: 1529615292221 milliseconds
Total Time:         309.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.5 seconds, 32.5%
Fitness Testing:    167.3 seconds, 54.1%
Report:              41.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 29712.143799999998
Test mean error for best: 14.85607
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -25.7572566753
Correct output: -109.6672675873 | Program output: -104.6672675873
Correct output: -97.3828405386 | Program output: -46.3828405386
Correct output: 92.6401192912  | Program output: 58.6401192912 
Correct output: -50.8424651996 | Program output: -52.8424651996
Correct output: -20.4046895985 | Program output: -32.4046895985
Correct output: -114.3715424664 | Program output: -108.3715424664
Correct output: -144.3743926958 | Program output: -104.3743926958
Correct output: 50.270281284   | Program output: 40.270281284  
Correct output: -23.5320860074 | Program output: -2.0          
Correct output: -3.2945776626  | Program output: 1.7054223374  
Correct output: 134.2271184849 | Program output: 126.2271184849
Correct output: -0.0202199253  | Program output: -2.0202199253 
Correct output: 22.147714426   | Program output: -19.852285574 
Correct output: 138.1821302172 | Program output: 118.1821302172
Correct output: 104.1305174885 | Program output: 121.1305174885
Correct output: -160.4278073292 | Program output: -127.4278073292
Correct output: 138.2150716868 | Program output: 125.2150716868
Correct output: -71.3359015133 | Program output: -109.3359015133
Correct output: -121.9396893018 | Program output: -80.9396893018
Correct output: 14.7358583393  | Program output: -20.2641416607
Correct output: 137.435054132  | Program output: 116.435054132 
Correct output: 105.285953282  | Program output: 125.285953282 
Correct output: -95.2677404455 | Program output: -122.2677404455
Correct output: 56.3284961788  | Program output: 55.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_sub} {:instruction float_max} {:instruction integer_yankdup} {:instruction 74} {:instruction integer_dec} {:instruction float_flush} {:instruction tagged_343} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_add} {:instruction float_max} {:instruction integer_dup_items})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_swap float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap integer_shove float_dec float_dec integer_shove float_dec float_dec integer_sub float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_mod integer_mult integer_min integer_yankdup integer_inc integer_sub float_max integer_yankdup 74 integer_dec float_flush tagged_343 float_dup_times integer_swap integer_add float_max integer_dup_items)
Errors: [29.0 12 5.0 1 51.0 2 34.0 2 2.0 1 12.0 2 6.0 2 40.0 1 10.0 1 21.5321 10 5.0 12 8.0 2 2.0 1 42.0 12 20.0 1 17.0 2 33.0 2 13.0 2 38.0 3 41.0 3 35.0 13 21.0 2 20.0 1 27.0 3 1.0 1]
Total: 627.5321
Mean: 12.550642
Genome size: 154
Size: 155
Percent parens: 0.006
--- Population Statistics ---
Average total errors in population: 3363.0751587
Median total errors in population: 657.0
Error averages by case: (129.11866930000008 11.072 121.44475060000005 3.635 157.96056319999988 4.64 139.3117198 4.673 113.54289119999997 3.939 117.80314110000002 4.092 123.08591049999986 3.948 150.72768390000005 4.226 117.65914700000002 4.375 132.10708179999975 10.459 110.80609779999996 8.975 120.41931070000001 3.686 110.38805439999996 3.713 137.96747890000003 10.892 130.2535120000001 3.701 122.92000969999998 3.787 147.60419870000013 4.001 124.61521630000004 3.669 137.20106920000015 4.443 151.30157229999998 5.166 133.3530381 11.241 131.04616450000003 3.547 124.70516229999988 3.654 131.5460765999999 4.53 112.09263880000003 4.03)
Error minima by case: (0.0 0 0.0 0 4.6172 1 0.6401 1 0.0 0 0.0 0 0.0 0 29.0 1 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0 1.0 1 1.1821 1 0.0 0 0.5722 1 0.0 0 2.0 1 5.9397 1 1.6471 1 1.4351 1 0.0 0 2.0 1 0.0 0)
Average genome size in population (length): 135.574
Average program size in population (points): 136.574
Average percent parens in population: 0.007
Minimum age in population: 98.01032592812044
Maximum age in population: 102.2840065619247
Average age in population: 100.1919123498317
Median age in population: 100.1987698212326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.3
Error (vector) diversity:			 0.47
Behavioral diversity:				 0.47
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 148717505
--- Timings ---
Current time: 1529615298256 milliseconds
Total Time:         315.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.0 seconds, 32.3%
Fitness Testing:    170.9 seconds, 54.2%
Report:              42.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 29734.143799999998
Test mean error for best: 14.86707
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -24.7572566753
Correct output: -109.6672675873 | Program output: -103.6672675873
Correct output: -97.3828405386 | Program output: -45.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -51.8424651996
Correct output: -20.4046895985 | Program output: -31.4046895985
Correct output: -114.3715424664 | Program output: -107.3715424664
Correct output: -144.3743926958 | Program output: -103.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: 0.0           
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -18.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -126.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -108.3359015133
Correct output: -121.9396893018 | Program output: -79.9396893018
Correct output: 14.7358583393  | Program output: -19.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -121.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction in1} {:instruction integer_inc})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_sub float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec float_dec integer_shove float_dec integer_shove float_dec float_dec integer_shove float_dec integer_sub float_dec float_dec integer_shove float_dec float_yank print_float integer_dup in1 integer_inc)
Errors: [28.0 11 6.0 1 52.0 2 32.0 2 1.0 1 11.0 2 7.0 2 41.0 2 8.0 2 23.5321 12 7.0 11 6.0 2 0.0 0 41.0 12 18.0 2 19.0 2 34.0 2 11.0 2 37.0 3 42.0 3 34.0 12 19.0 2 22.0 2 26.0 3 1.0 1]
Total: 622.5321
Mean: 12.450642
Genome size: 140
Size: 141
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2748.2333772
Median total errors in population: 665.0
Error averages by case: (101.5273748000001 10.936 99.14850470000002 3.889 131.56842729999988 4.85 112.36863060000003 4.815 88.09331609999995 4.11 90.80399940000001 4.36 101.4594270999998 4.184 128.95799850000003 4.416 91.38805029999999 4.5 104.6970283999997 9.896 84.56804929999988 9.11 97.42536810000004 3.677 84.66480739999996 4.039 110.41924650000007 10.716 106.93469110000017 3.692 99.09913309999997 3.774 127.76112310000016 4.199 101.59073840000006 3.666 113.1449516000001 4.558 128.1267629000001 5.218 105.66544189999996 11.114 107.62641800000007 3.595 100.90977249999983 3.633 109.62835589999982 4.668 84.78176020000008 4.259)
Error minima by case: (1.0 1 0.0 0 3.6172 1 0.3599 1 0.0 0 0.0 0 0.0 0 12.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 2.0 1 0.1821 1 0.0 0 0.4278 1 0.0 0 1.0 1 10.0603 1 1.0 1 0.0 0 0.0 0 1.0 1 0.0 0)
Average genome size in population (length): 135.824
Average program size in population (points): 136.824
Average percent parens in population: 0.007
Minimum age in population: 99.49853206090442
Maximum age in population: 103.7502986112308
Average age in population: 101.522622250529
Median age in population: 101.5918478436142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.365
Error (vector) diversity:			 0.527
Behavioral diversity:				 0.527
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 152113430
--- Timings ---
Current time: 1529615304189 milliseconds
Total Time:         321.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.7 seconds, 32.3%
Fitness Testing:    174.4 seconds, 54.3%
Report:              43.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 26832.0
Test mean error for best: 13.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -19.7572566753
Correct output: -109.6672675873 | Program output: -98.6672675873
Correct output: -97.3828405386 | Program output: -40.3828405386
Correct output: 92.6401192912  | Program output: 57.6401192912 
Correct output: -50.8424651996 | Program output: -46.8424651996
Correct output: -20.4046895985 | Program output: -26.4046895985
Correct output: -114.3715424664 | Program output: -102.3715424664
Correct output: -144.3743926958 | Program output: -98.3743926958
Correct output: 50.270281284   | Program output: 39.270281284  
Correct output: -23.5320860074 | Program output: -34.5320860074
Correct output: -3.2945776626  | Program output: 0.7054223374  
Correct output: 134.2271184849 | Program output: 125.2271184849
Correct output: -0.0202199253  | Program output: -3.0202199253 
Correct output: 22.147714426   | Program output: -13.852285574 
Correct output: 138.1821302172 | Program output: 117.1821302172
Correct output: 104.1305174885 | Program output: 120.1305174885
Correct output: -160.4278073292 | Program output: -121.4278073292
Correct output: 138.2150716868 | Program output: 124.2150716868
Correct output: -71.3359015133 | Program output: -103.3359015133
Correct output: -121.9396893018 | Program output: -74.9396893018
Correct output: 14.7358583393  | Program output: -14.2641416607
Correct output: 137.435054132  | Program output: 115.435054132 
Correct output: 105.285953282  | Program output: 124.285953282 
Correct output: -95.2677404455 | Program output: -116.2677404455
Correct output: 56.3284961788  | Program output: 54.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_add float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [23.0 13 11.0 3 57.0 2 35.0 2 4.0 2 6.0 1 12.0 2 46.0 3 11.0 2 11.0 2 4.0 12 9.0 2 3.0 1 36.0 12 21.0 2 16.0 2 39.0 2 14.0 2 32.0 3 47.0 3 29.0 11 22.0 2 19.0 2 21.0 3 2.0 1]
Total: 622.0
Mean: 12.44
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2787.9638732000003
Median total errors in population: 674.5
Error averages by case: (102.52767500000019 10.881 100.21233170000006 4.129 132.55722429999992 4.957 115.12400470000014 4.934 89.21336569999994 4.362 92.16850460000005 4.452 101.94793949999975 4.349 129.73891220000004 4.622 93.00792270000001 4.569 106.09834829999946 9.761 86.94147969999993 9.024 99.7114735 3.796 87.27554429999996 4.484 111.46697510000013 10.613 108.92634510000022 3.824 101.28560709999996 3.926 128.08553380000023 4.304 103.68456550000006 3.775 113.14134810000023 4.686 128.01302940000022 5.425 107.39424799999998 11.036 109.54912910000019 3.706 103.15789929999968 3.764 109.70158309999974 4.723 88.47688340000016 4.454)
Error minima by case: (0.0 0 0.0 0 0.3828 1 1.6401 1 0.0 0 0.0 0 0.0 0 14.3744 1 0.0 0 0.4968 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.5722 1 0.0 0 0.0 0 8.0603 1 0.0 0 1.0 1 1.0 1 1.0 1 0.0 0)
Average genome size in population (length): 136.243
Average program size in population (points): 137.243
Average percent parens in population: 0.007
Minimum age in population: 100.4985320609044
Maximum age in population: 104.5655032648898
Average age in population: 102.7580262212208
Median age in population: 102.7683873390021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.369
Error (vector) diversity:			 0.556
Behavioral diversity:				 0.556
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 155519930
--- Timings ---
Current time: 1529615310301 milliseconds
Total Time:         327.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.1 seconds, 32.1%
Fitness Testing:    178.3 seconds, 54.4%
Report:              44.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 26188.0
Test mean error for best: 13.09400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -27.7572566753
Correct output: -109.6672675873 | Program output: -106.6672675873
Correct output: -97.3828405386 | Program output: -48.3828405386
Correct output: 92.6401192912  | Program output: 56.6401192912 
Correct output: -50.8424651996 | Program output: -54.8424651996
Correct output: -20.4046895985 | Program output: -34.4046895985
Correct output: -114.3715424664 | Program output: -110.3715424664
Correct output: -144.3743926958 | Program output: -106.3743926958
Correct output: 50.270281284   | Program output: 38.270281284  
Correct output: -23.5320860074 | Program output: -37.5320860074
Correct output: -3.2945776626  | Program output: -0.2945776626 
Correct output: 134.2271184849 | Program output: 124.2271184849
Correct output: -0.0202199253  | Program output: -4.0202199253 
Correct output: 22.147714426   | Program output: -21.852285574 
Correct output: 138.1821302172 | Program output: 116.1821302172
Correct output: 104.1305174885 | Program output: 119.1305174885
Correct output: -160.4278073292 | Program output: -129.4278073292
Correct output: 138.2150716868 | Program output: 123.2150716868
Correct output: -71.3359015133 | Program output: -111.3359015133
Correct output: -121.9396893018 | Program output: -82.9396893018
Correct output: 14.7358583393  | Program output: -22.2641416607
Correct output: 137.435054132  | Program output: 114.435054132 
Correct output: 105.285953282  | Program output: 123.285953282 
Correct output: -95.2677404455 | Program output: -124.2677404455
Correct output: 56.3284961788  | Program output: 53.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_rot float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [31.0 12 3.0 1 49.0 2 36.0 2 4.0 1 14.0 2 4.0 1 38.0 2 12.0 2 14.0 2 3.0 1 10.0 1 4.0 1 44.0 11 22.0 2 15.0 2 31.0 2 15.0 2 40.0 2 39.0 2 37.0 13 23.0 2 18.0 2 29.0 3 3.0 1]
Total: 612.0
Mean: 12.24
Genome size: 147
Size: 148
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3064.801582599999
Median total errors in population: 747.76605
Error averages by case: (111.93807170000025 11.118 115.61952860000015 5.025 139.39332659999974 5.286 121.89862140000017 5.256 99.92733019999996 4.805 102.4630953000001 4.947 117.47119629999953 5.202 141.5665302000001 5.418 100.54642439999999 4.907 108.04288329999915 9.874 97.37925309999986 8.704 111.89960010000007 4.233 98.02797369999998 4.954 121.21852070000017 10.787 119.84651820000025 4.252 112.20300389999991 4.351 142.32276520000042 5.091 115.65518580000007 4.194 127.35241080000036 5.279 138.4503900000002 5.815 116.75771459999993 11.382 120.47881390000016 4.086 114.12067779999961 4.179 124.73937049999952 5.342 96.17237630000022 4.823)
Error minima by case: (0.7573 1 0.0 0 0.3828 1 4.6401 1 0.0 0 0.0 0 0.0 0 15.3744 1 0.0 0 0.4679 1 0.0 0 0.0 0 0.0 0 0.1477 1 1.0 1 0.0 0 5.5722 1 0.0 0 1.0 1 0.9397 1 0.0 0 2.0 1 1.0 1 1.0 1 0.0 0)
Average genome size in population (length): 137.086
Average program size in population (points): 138.086
Average percent parens in population: 0.007
Minimum age in population: 101.4985320609044
Maximum age in population: 105.9577477407628
Average age in population: 104.0645774456001
Median age in population: 104.1152418707795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.415
Error (vector) diversity:			 0.626
Behavioral diversity:				 0.626
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 158947405
--- Timings ---
Current time: 1529615316068 milliseconds
Total Time:         333.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       106.4 seconds, 31.9%
Fitness Testing:    181.8 seconds, 54.6%
Report:              44.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 26188.0
Test mean error for best: 13.09400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -27.7572566753
Correct output: -109.6672675873 | Program output: -106.6672675873
Correct output: -97.3828405386 | Program output: -48.3828405386
Correct output: 92.6401192912  | Program output: 56.6401192912 
Correct output: -50.8424651996 | Program output: -54.8424651996
Correct output: -20.4046895985 | Program output: -34.4046895985
Correct output: -114.3715424664 | Program output: -110.3715424664
Correct output: -144.3743926958 | Program output: -106.3743926958
Correct output: 50.270281284   | Program output: 38.270281284  
Correct output: -23.5320860074 | Program output: -37.5320860074
Correct output: -3.2945776626  | Program output: -0.2945776626 
Correct output: 134.2271184849 | Program output: 124.2271184849
Correct output: -0.0202199253  | Program output: -4.0202199253 
Correct output: 22.147714426   | Program output: -21.852285574 
Correct output: 138.1821302172 | Program output: 116.1821302172
Correct output: 104.1305174885 | Program output: 119.1305174885
Correct output: -160.4278073292 | Program output: -129.4278073292
Correct output: 138.2150716868 | Program output: 123.2150716868
Correct output: -71.3359015133 | Program output: -111.3359015133
Correct output: -121.9396893018 | Program output: -82.9396893018
Correct output: 14.7358583393  | Program output: -22.2641416607
Correct output: 137.435054132  | Program output: 114.435054132 
Correct output: 105.285953282  | Program output: 123.285953282 
Correct output: -95.2677404455 | Program output: -124.2677404455
Correct output: 56.3284961788  | Program output: 53.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_mult float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_rot float_dec float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [31.0 12 3.0 1 49.0 2 36.0 2 4.0 1 14.0 2 4.0 1 38.0 2 12.0 2 14.0 2 3.0 1 10.0 1 4.0 1 44.0 11 22.0 2 15.0 2 31.0 2 15.0 2 40.0 2 39.0 2 37.0 13 23.0 2 18.0 2 29.0 3 3.0 1]
Total: 612.0
Mean: 12.24
Genome size: 147
Size: 148
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3170.036057400001
Median total errors in population: 681.26605
Error averages by case: (118.27599050000028 11.311 119.67276340000014 5.161 141.14464689999983 5.273 125.6071035000002 5.095 103.70785599999994 4.756 108.55728210000008 4.972 121.14943079999959 5.351 145.6569763000001 5.551 104.20582120000002 4.681 110.45884659999899 10.275 102.08281729999989 9.087 114.6212346000001 4.369 102.61278499999993 5.61 127.34152020000023 11.057 122.67381460000033 4.357 116.84037339999992 4.447 145.12631940000048 5.25 118.19642740000012 4.315 132.60383830000032 5.475 141.61972120000013 5.955 122.76648739999996 11.75 123.21121970000021 4.224 118.50919399999952 4.278 129.56283569999957 5.543 100.97175190000026 4.716)
Error minima by case: (0.0 0 0.0 0 0.3828 1 7.6401 1 0.0 0 0.0 0 0.0 0 14.3744 1 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 7.5722 1 0.0 0 1.0 1 3.0603 2 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 138.291
Average program size in population (points): 139.291
Average percent parens in population: 0.007
Minimum age in population: 102.9099840429564
Maximum age in population: 107.1696039970957
Average age in population: 105.335373988097
Median age in population: 105.3560039285057
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.405
Error (vector) diversity:			 0.668
Behavioral diversity:				 0.669
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 162404829
--- Timings ---
Current time: 1529615322350 milliseconds
Total Time:         339.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.0 seconds, 31.8%
Fitness Testing:    185.7 seconds, 54.7%
Report:              45.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 26518.0
Test mean error for best: 13.25900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -24.7572566753
Correct output: -109.6672675873 | Program output: -103.6672675873
Correct output: -97.3828405386 | Program output: -45.3828405386
Correct output: 92.6401192912  | Program output: 59.6401192912 
Correct output: -50.8424651996 | Program output: -51.8424651996
Correct output: -20.4046895985 | Program output: -31.4046895985
Correct output: -114.3715424664 | Program output: -107.3715424664
Correct output: -144.3743926958 | Program output: -103.3743926958
Correct output: 50.270281284   | Program output: 41.270281284  
Correct output: -23.5320860074 | Program output: -36.5320860074
Correct output: -3.2945776626  | Program output: 2.7054223374  
Correct output: 134.2271184849 | Program output: 127.2271184849
Correct output: -0.0202199253  | Program output: -1.0202199253 
Correct output: 22.147714426   | Program output: -18.852285574 
Correct output: 138.1821302172 | Program output: 119.1821302172
Correct output: 104.1305174885 | Program output: 122.1305174885
Correct output: -160.4278073292 | Program output: -126.4278073292
Correct output: 138.2150716868 | Program output: 126.2150716868
Correct output: -71.3359015133 | Program output: -108.3359015133
Correct output: -121.9396893018 | Program output: -79.9396893018
Correct output: 14.7358583393  | Program output: -19.2641416607
Correct output: 137.435054132  | Program output: 117.435054132 
Correct output: 105.285953282  | Program output: 126.285953282 
Correct output: -95.2677404455 | Program output: -121.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_48} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_stackdepth float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_dec integer_shove float_dec float_yank print_float integer_dup integer_add float_dup_items integer_yankdup integer_inc tag_float_48 integer_sub in1)
Errors: [28.0 11 6.0 1 52.0 2 33.0 2 1.0 1 11.0 2 7.0 2 41.0 2 9.0 2 13.0 2 6.0 12 7.0 2 1.0 1 41.0 12 19.0 2 18.0 2 34.0 2 12.0 2 37.0 3 42.0 3 34.0 12 20.0 1 21.0 2 26.0 3 0.0 0]
Total: 605.0
Mean: 12.1
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3592.0560772000013
Median total errors in population: 787.9988000000001
Error averages by case: (137.18309220000032 11.475 137.55095510000018 5.61 157.8008633999999 5.543 139.58392630000006 5.289 121.48336710000001 5.083 127.08764670000014 5.313 139.44490849999954 5.842 162.11224810000013 5.991 118.87921399999995 4.969 121.1682434999986 10.156 116.72895829999973 9.265 131.1410736000001 4.61 116.75626389999992 5.913 145.76038690000024 11.161 138.6410980000003 4.588 133.2423933999999 4.695 162.98602730000056 5.694 134.54579680000015 4.552 151.71589300000048 5.85 157.62695609999983 6.206 141.77857399999994 12.001 139.04450680000028 4.404 135.00939209999956 4.499 149.10664129999952 5.943 116.11665080000031 4.909)
Error minima by case: (1.0 1 0.0 0 0.3828 1 8.6401 1 0.0 0 0.0 0 0.0 0 17.3744 1 0.0 0 0.3858 1 0.0 0 0.0 0 0.0 0 0.1477 1 1.0 1 1.0 1 6.5722 1 0.0 0 0.0 0 0.0603 2 0.0 0 0.0 0 2.0 1 1.7323 1 0.0 0)
Average genome size in population (length): 140.017
Average program size in population (points): 141.017
Average percent parens in population: 0.007
Minimum age in population: 104.4919694772071
Maximum age in population: 108.8409762610432
Average age in population: 106.7469606604563
Median age in population: 106.7669788473669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.96
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.96
Total error diversity:				 0.431
Error (vector) diversity:			 0.696
Behavioral diversity:				 0.697
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 165905291
--- Timings ---
Current time: 1529615328312 milliseconds
Total Time:         345.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.4 seconds, 31.7%
Fitness Testing:    189.4 seconds, 54.8%
Report:              46.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 26213.0
Test mean error for best: 13.10650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -24.7572566753
Correct output: -109.6672675873 | Program output: -103.6672675873
Correct output: -97.3828405386 | Program output: -45.3828405386
Correct output: 92.6401192912  | Program output: 59.6401192912 
Correct output: -50.8424651996 | Program output: -51.8424651996
Correct output: -20.4046895985 | Program output: -31.4046895985
Correct output: -114.3715424664 | Program output: -107.3715424664
Correct output: -144.3743926958 | Program output: -103.3743926958
Correct output: 50.270281284   | Program output: 41.270281284  
Correct output: -23.5320860074 | Program output: -34.5320860074
Correct output: -3.2945776626  | Program output: 2.7054223374  
Correct output: 134.2271184849 | Program output: 127.2271184849
Correct output: -0.0202199253  | Program output: -1.0202199253 
Correct output: 22.147714426   | Program output: -18.852285574 
Correct output: 138.1821302172 | Program output: 119.1821302172
Correct output: 104.1305174885 | Program output: 122.1305174885
Correct output: -160.4278073292 | Program output: -126.4278073292
Correct output: 138.2150716868 | Program output: 126.2150716868
Correct output: -71.3359015133 | Program output: -108.3359015133
Correct output: -121.9396893018 | Program output: -79.9396893018
Correct output: 14.7358583393  | Program output: -19.2641416607
Correct output: 137.435054132  | Program output: 117.435054132 
Correct output: 105.285953282  | Program output: 126.285953282 
Correct output: -95.2677404455 | Program output: -121.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_add float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [28.0 11 6.0 1 52.0 2 33.0 2 1.0 1 11.0 2 7.0 2 41.0 2 9.0 2 11.0 2 6.0 12 7.0 2 1.0 1 41.0 12 19.0 2 18.0 2 34.0 2 12.0 2 37.0 3 42.0 3 34.0 12 20.0 1 21.0 2 26.0 3 0.0 0]
Total: 603.0
Mean: 12.06
Genome size: 145
Size: 146
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3189.6347552000016
Median total errors in population: 671.76605
Error averages by case: (116.96690840000024 11.135 115.8378531000001 4.68 139.14714989999982 4.832 128.94269950000015 4.781 101.16904120000004 4.325 105.81728930000007 4.948 117.39771319999964 4.871 142.81941270000007 5.115 108.09237450000002 4.693 107.96097909999868 9.681 104.78731179999988 9.255 121.37373690000011 4.204 106.85418899999993 5.667 125.91113910000013 10.665 129.39666370000032 4.207 124.28511139999995 4.291 142.10380210000028 4.809 124.75762870000013 4.177 130.48308720000034 5.026 140.36851740000012 5.461 121.71293339999997 11.504 129.9558985000002 4.076 126.35382009999957 4.117 127.13642209999963 5.24 103.89607290000028 4.347)
Error minima by case: (0.0582 1 0.0 0 0.3828 1 8.6401 1 0.0 0 0.0 0 0.0 0 11.3744 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 10.5722 1 0.0 0 0.0 0 0.0603 1 0.0 0 2.0 1 2.0 1 0.0 0 0.0 0)
Average genome size in population (length): 141.449
Average program size in population (points): 142.449
Average percent parens in population: 0.007
Minimum age in population: 105.9152179532292
Maximum age in population: 110.1041180302152
Average age in population: 108.1609152181775
Median age in population: 108.1952425341578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.444
Error (vector) diversity:			 0.752
Behavioral diversity:				 0.752
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 169441541
--- Timings ---
Current time: 1529615334866 milliseconds
Total Time:         351.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.8 seconds, 31.5%
Fitness Testing:    193.3 seconds, 55.0%
Report:              47.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 26158.0
Test mean error for best: 13.07900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -28.7572566753
Correct output: -109.6672675873 | Program output: -107.6672675873
Correct output: -97.3828405386 | Program output: -49.3828405386
Correct output: 92.6401192912  | Program output: 60.6401192912 
Correct output: -50.8424651996 | Program output: -55.8424651996
Correct output: -20.4046895985 | Program output: -35.4046895985
Correct output: -114.3715424664 | Program output: -111.3715424664
Correct output: -144.3743926958 | Program output: -107.3743926958
Correct output: 50.270281284   | Program output: 42.270281284  
Correct output: -23.5320860074 | Program output: -34.5320860074
Correct output: -3.2945776626  | Program output: 3.7054223374  
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: -22.852285574 
Correct output: 138.1821302172 | Program output: 120.1821302172
Correct output: 104.1305174885 | Program output: 123.1305174885
Correct output: -160.4278073292 | Program output: -130.4278073292
Correct output: 138.2150716868 | Program output: 127.2150716868
Correct output: -71.3359015133 | Program output: -112.3359015133
Correct output: -121.9396893018 | Program output: -83.9396893018
Correct output: 14.7358583393  | Program output: -23.2641416607
Correct output: 137.435054132  | Program output: 118.435054132 
Correct output: 105.285953282  | Program output: 127.285953282 
Correct output: -95.2677404455 | Program output: -125.2677404455
Correct output: 56.3284961788  | Program output: 57.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_sub float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_add float_inc float_inc float_inc float_dup_times float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_yank print_float integer_dup integer_add integer_mult)
Errors: [32.0 12 2.0 1 48.0 2 32.0 2 5.0 1 15.0 2 3.0 1 37.0 2 8.0 2 11.0 2 7.0 11 6.0 2 0.0 0 45.0 10 18.0 2 19.0 2 30.0 1 11.0 2 41.0 2 38.0 3 38.0 13 19.0 2 22.0 2 30.0 2 1.0 1]
Total: 600.0
Mean: 12.0
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2945.511551500002
Median total errors in population: 683.26605
Error averages by case: (108.45501650000018 10.702 112.59427730000014 4.644 134.57765389999975 4.787 118.33140160000013 4.39 96.78935660000003 4.3 100.19291220000007 5.324 114.23756409999955 4.845 139.5368808000001 5.059 96.52645659999996 4.463 98.43419229999893 8.538 92.76355499999994 8.616 104.9042287 3.752 93.66012059999994 5.296 115.65320060000019 10.213 113.59320320000018 3.803 107.77133829999993 3.878 139.13340620000034 4.788 108.52661410000009 3.765 123.08750120000035 4.866 137.12016430000023 5.409 112.16428249999994 11.15 114.25878320000014 3.675 109.36564529999976 3.733 121.63839029999967 5.104 93.13440610000018 3.961)
Error minima by case: (0.0 0 0.0 0 0.2343 1 6.3599 1 0.0 0 0.0 0 0.0 0 11.9384 1 0.0 0 0.4344 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 13.0 1 0.0 0 0.0 0 4.0603 1 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 142.826
Average program size in population (points): 143.826
Average percent parens in population: 0.007
Minimum age in population: 107.4543575688785
Maximum age in population: 111.3387014024017
Average age in population: 109.5158544334532
Median age in population: 109.554035234718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.474
Error (vector) diversity:			 0.782
Behavioral diversity:				 0.784
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 173012191
--- Timings ---
Current time: 1529615340898 milliseconds
Total Time:         358.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.2 seconds, 31.3%
Fitness Testing:    197.1 seconds, 55.1%
Report:              48.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 26433.0
Test mean error for best: 13.21650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -23.7572566753
Correct output: -109.6672675873 | Program output: -102.6672675873
Correct output: -97.3828405386 | Program output: -44.3828405386
Correct output: 92.6401192912  | Program output: 59.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -30.4046895985
Correct output: -114.3715424664 | Program output: -106.3715424664
Correct output: -144.3743926958 | Program output: -102.3743926958
Correct output: 50.270281284   | Program output: 41.270281284  
Correct output: -23.5320860074 | Program output: -34.5320860074
Correct output: -3.2945776626  | Program output: 2.7054223374  
Correct output: 134.2271184849 | Program output: 127.2271184849
Correct output: -0.0202199253  | Program output: -1.0202199253 
Correct output: 22.147714426   | Program output: -17.852285574 
Correct output: 138.1821302172 | Program output: 119.1821302172
Correct output: 104.1305174885 | Program output: 122.1305174885
Correct output: -160.4278073292 | Program output: -125.4278073292
Correct output: 138.2150716868 | Program output: 126.2150716868
Correct output: -71.3359015133 | Program output: -107.3359015133
Correct output: -121.9396893018 | Program output: -78.9396893018
Correct output: 14.7358583393  | Program output: -18.2641416607
Correct output: 137.435054132  | Program output: 117.435054132 
Correct output: 105.285953282  | Program output: 126.285953282 
Correct output: -95.2677404455 | Program output: -120.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_add float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_yankdup float_dec integer_swap float_rot float_dec float_yank print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [27.0 12 7.0 1 53.0 2 33.0 2 0.0 0 10.0 1 8.0 2 42.0 2 9.0 2 11.0 2 6.0 12 7.0 2 1.0 1 40.0 12 19.0 2 18.0 2 35.0 2 12.0 2 36.0 3 43.0 3 33.0 12 20.0 1 21.0 2 25.0 3 0.0 0]
Total: 601.0
Mean: 12.02
Genome size: 145
Size: 146
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2860.9186338000013
Median total errors in population: 675.0
Error averages by case: (105.60707070000012 10.32 109.58271570000007 4.234 137.6109434999999 4.353 116.68922030000002 4.104 96.1503134 3.969 96.82516220000007 5.355 110.79419599999981 4.347 138.53808420000007 4.646 94.95087529999998 4.309 94.27160369999939 7.185 91.76060249999996 8.25 100.12932829999997 3.296 93.11234869999997 5.034 111.49969310000009 9.678 109.49908490000006 3.424 103.18457069999997 3.505 135.44432460000027 4.305 103.90496580000007 3.357 117.26027000000008 4.446 135.8459911000001 4.976 109.40945979999998 10.595 110.30743820000005 3.308 104.62482989999992 3.387 114.6830894999998 4.648 90.53945170000006 3.662)
Error minima by case: (0.0 0 0.0 0 1.6172 1 3.6401 1 0.0 0 0.0 0 0.0 0 15.3744 1 0.0 0 3.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 16.0 1 0.0 0 0.0 0 0.0603 2 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 143.561
Average program size in population (points): 144.561
Average percent parens in population: 0.007
Minimum age in population: 108.4746355626581
Maximum age in population: 112.8737522885054
Average age in population: 110.7859812973296
Median age in population: 110.7811533571193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.956
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.956
Total error diversity:				 0.477
Error (vector) diversity:			 0.794
Behavioral diversity:				 0.795
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 176601241
--- Timings ---
Current time: 1529615347294 milliseconds
Total Time:         364.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.7 seconds, 31.2%
Fitness Testing:    201.2 seconds, 55.2%
Report:              49.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 7870.0
Test mean error for best: 3.93500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -2.7572566753 
Correct output: -109.6672675873 | Program output: -115.6672675873
Correct output: -97.3828405386 | Program output: -103.3828405386
Correct output: 92.6401192912  | Program output: 86.6401192912 
Correct output: -50.8424651996 | Program output: -56.8424651996
Correct output: -20.4046895985 | Program output: -26.4046895985
Correct output: -114.3715424664 | Program output: -120.3715424664
Correct output: -144.3743926958 | Program output: -150.3743926958
Correct output: 50.270281284   | Program output: 44.270281284  
Correct output: -23.5320860074 | Program output: -29.5320860074
Correct output: -3.2945776626  | Program output: -9.2945776626 
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -6.0202199253 
Correct output: 22.147714426   | Program output: 16.147714426  
Correct output: 138.1821302172 | Program output: 132.1821302172
Correct output: 104.1305174885 | Program output: 98.1305174885 
Correct output: -160.4278073292 | Program output: -166.4278073292
Correct output: 138.2150716868 | Program output: 132.2150716868
Correct output: -71.3359015133 | Program output: -77.3359015133
Correct output: -121.9396893018 | Program output: -127.9396893018
Correct output: 14.7358583393  | Program output: 8.7358583393  
Correct output: 137.435054132  | Program output: 131.435054132 
Correct output: 105.285953282  | Program output: 99.285953282  
Correct output: -95.2677404455 | Program output: -101.2677404455
Correct output: 56.3284961788  | Program output: 50.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [6.0 12 6.0 2 6.0 3 6.0 2 6.0 1 6.0 1 6.0 2 6.0 2 6.0 2 6.0 1 6.0 1 6.0 2 6.0 1 6.0 2 6.0 1 6.0 3 6.0 1 6.0 1 6.0 1 6.0 1 6.0 2 6.0 1 6.0 3 6.0 3 6.0 1]
Total: 202.0
Mean: 4.04
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3197.2904659000005
Median total errors in population: 667.0158
Error averages by case: (121.71364470000013 10.183 121.59687050000005 3.896 153.43504699999986 4.089 130.39087970000006 4.189 111.47722540000001 3.699 112.73865830000004 5.39 122.72282129999982 4.024 151.07509250000004 4.331 110.33469820000003 4.743 105.2161416999996 6.024 102.62653379999992 8.022 114.19882260000004 3.457 102.74584239999999 5.084 126.52521040000012 9.573 123.69249410000013 3.563 116.37213459999998 3.663 146.91393570000014 4.085 118.10712480000005 3.51 130.41286260000012 4.202 150.14374600000002 4.817 125.28313409999998 10.441 124.3782777000001 3.452 118.09966169999976 3.533 126.59150079999984 4.455 104.2681053000001 3.805)
Error minima by case: (0.2427 1 0.0 0 0.3828 1 3.3599 1 0.0 0 0.0 0 0.0 0 6.0 1 0.0 0 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.5722 1 0.0 0 0.0 0 2.9397 1 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 143.834
Average program size in population (points): 144.834
Average percent parens in population: 0.007
Minimum age in population: 110.0294867280689
Maximum age in population: 113.8187347739266
Average age in population: 112.0202928382805
Median age in population: 112.0883932869242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.46
Error (vector) diversity:			 0.771
Behavioral diversity:				 0.773
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 180197103
--- Timings ---
Current time: 1529615353243 milliseconds
Total Time:         370.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.1 seconds, 31.1%
Fitness Testing:    205.0 seconds, 55.3%
Report:              50.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 7870.0
Test mean error for best: 3.93500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -2.7572566753 
Correct output: -109.6672675873 | Program output: -115.6672675873
Correct output: -97.3828405386 | Program output: -103.3828405386
Correct output: 92.6401192912  | Program output: 86.6401192912 
Correct output: -50.8424651996 | Program output: -56.8424651996
Correct output: -20.4046895985 | Program output: -26.4046895985
Correct output: -114.3715424664 | Program output: -120.3715424664
Correct output: -144.3743926958 | Program output: -150.3743926958
Correct output: 50.270281284   | Program output: 44.270281284  
Correct output: -23.5320860074 | Program output: -29.5320860074
Correct output: -3.2945776626  | Program output: -9.2945776626 
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -6.0202199253 
Correct output: 22.147714426   | Program output: 16.147714426  
Correct output: 138.1821302172 | Program output: 132.1821302172
Correct output: 104.1305174885 | Program output: 98.1305174885 
Correct output: -160.4278073292 | Program output: -166.4278073292
Correct output: 138.2150716868 | Program output: 132.2150716868
Correct output: -71.3359015133 | Program output: -77.3359015133
Correct output: -121.9396893018 | Program output: -127.9396893018
Correct output: 14.7358583393  | Program output: 8.7358583393  
Correct output: 137.435054132  | Program output: 131.435054132 
Correct output: 105.285953282  | Program output: 99.285953282  
Correct output: -95.2677404455 | Program output: -101.2677404455
Correct output: 56.3284961788  | Program output: 50.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [6.0 12 6.0 2 6.0 3 6.0 2 6.0 1 6.0 1 6.0 2 6.0 2 6.0 2 6.0 1 6.0 1 6.0 2 6.0 1 6.0 2 6.0 1 6.0 3 6.0 1 6.0 1 6.0 1 6.0 1 6.0 2 6.0 1 6.0 3 6.0 3 6.0 1]
Total: 202.0
Mean: 4.04
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3301.150681
Median total errors in population: 671.5
Error averages by case: (122.31245310000008 9.9 124.35704700000002 3.901 155.65776259999996 4.155 136.87830469999994 3.984 114.3868137 3.765 115.09631820000003 5.632 125.38180329999983 4.056 153.8067083 4.408 116.65420260000003 4.57 115.70792579999976 5.406 110.72539819999996 8.665 119.41224210000004 3.345 110.98870519999998 5.172 127.29910940000005 9.326 128.82543570000013 3.486 122.95005999999998 3.548 149.54165450000016 4.057 123.29910930000004 3.36 131.40147270000014 4.177 152.9035820999999 4.861 125.73751549999999 10.138 129.56054700000004 3.353 124.79149369999989 3.462 128.44953289999984 4.412 110.34548340000009 3.541)
Error minima by case: (2.0 1 0.0 0 0.3828 1 6.0 1 0.0 0 0.0 0 0.0 0 6.0 1 0.0 0 1.5321 1 0.0 0 0.0 0 0.0 0 0.0 0 0.1821 1 0.0 0 6.0 1 0.0 0 0.0 0 6.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 144.837
Average program size in population (points): 145.837
Average percent parens in population: 0.007
Minimum age in population: 111.0294867280689
Maximum age in population: 115.3443474858387
Average age in population: 113.3016515723587
Median age in population: 113.3334512560813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.452
Error (vector) diversity:			 0.765
Behavioral diversity:				 0.773
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 183818053
--- Timings ---
Current time: 1529615359522 milliseconds
Total Time:         376.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.4 seconds, 30.9%
Fitness Testing:    209.2 seconds, 55.5%
Report:              51.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 7870.0
Test mean error for best: 3.93500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -2.7572566753 
Correct output: -109.6672675873 | Program output: -115.6672675873
Correct output: -97.3828405386 | Program output: -103.3828405386
Correct output: 92.6401192912  | Program output: 86.6401192912 
Correct output: -50.8424651996 | Program output: -56.8424651996
Correct output: -20.4046895985 | Program output: -26.4046895985
Correct output: -114.3715424664 | Program output: -120.3715424664
Correct output: -144.3743926958 | Program output: -150.3743926958
Correct output: 50.270281284   | Program output: 44.270281284  
Correct output: -23.5320860074 | Program output: -29.5320860074
Correct output: -3.2945776626  | Program output: -9.2945776626 
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -6.0202199253 
Correct output: 22.147714426   | Program output: 16.147714426  
Correct output: 138.1821302172 | Program output: 132.1821302172
Correct output: 104.1305174885 | Program output: 98.1305174885 
Correct output: -160.4278073292 | Program output: -166.4278073292
Correct output: 138.2150716868 | Program output: 132.2150716868
Correct output: -71.3359015133 | Program output: -77.3359015133
Correct output: -121.9396893018 | Program output: -127.9396893018
Correct output: 14.7358583393  | Program output: 8.7358583393  
Correct output: 137.435054132  | Program output: 131.435054132 
Correct output: 105.285953282  | Program output: 99.285953282  
Correct output: -95.2677404455 | Program output: -101.2677404455
Correct output: 56.3284961788  | Program output: 50.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [6.0 12 6.0 2 6.0 3 6.0 2 6.0 1 6.0 1 6.0 2 6.0 2 6.0 2 6.0 1 6.0 1 6.0 2 6.0 1 6.0 2 6.0 1 6.0 3 6.0 1 6.0 1 6.0 1 6.0 1 6.0 2 6.0 1 6.0 3 6.0 3 6.0 1]
Total: 202.0
Mean: 4.04
Genome size: 151
Size: 152
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3072.2590842000004
Median total errors in population: 680.6712500000001
Error averages by case: (112.27986830000009 9.824 112.37675930000003 3.602 145.26177 3.897 130.91084480000004 3.744 102.89910589999998 3.464 103.47775670000003 5.591 113.89509499999988 3.768 142.448834 4.193 110.33262960000002 4.599 106.15104339999989 5.085 101.27375459999999 8.851 113.41590120000002 3.318 103.96231399999998 4.76 116.18385970000008 9.141 123.11467270000007 3.437 116.33227609999997 3.487 138.63334830000014 3.842 117.44640870000002 3.312 120.56470770000008 3.966 142.04633030000002 4.646 115.7434555 10.078 123.8857583 3.256 117.92287379999995 3.402 117.4825831999999 4.173 103.51413310000005 3.267)
Error minima by case: (2.0 1 0.0 0 0.1767 1 6.0 1 0.0 0 0.0 0 0.0 0 6.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 6.0 1 0.0 0 0.0 0 2.9397 1 1.0 1 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 145.488
Average program size in population (points): 146.488
Average percent parens in population: 0.007
Minimum age in population: 112.8164572409664
Maximum age in population: 116.6392630315343
Average age in population: 114.7093888575337
Median age in population: 114.7639459432568
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.967
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.967
Total error diversity:				 0.422
Error (vector) diversity:			 0.742
Behavioral diversity:				 0.746
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 187455377
--- Timings ---
Current time: 1529615365536 milliseconds
Total Time:         382.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.7 seconds, 30.8%
Fitness Testing:    213.1 seconds, 55.7%
Report:              51.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 7870.0
Test mean error for best: 3.93500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -2.7572566753 
Correct output: -109.6672675873 | Program output: -115.6672675873
Correct output: -97.3828405386 | Program output: -103.3828405386
Correct output: 92.6401192912  | Program output: 86.6401192912 
Correct output: -50.8424651996 | Program output: -56.8424651996
Correct output: -20.4046895985 | Program output: -26.4046895985
Correct output: -114.3715424664 | Program output: -120.3715424664
Correct output: -144.3743926958 | Program output: -150.3743926958
Correct output: 50.270281284   | Program output: 44.270281284  
Correct output: -23.5320860074 | Program output: -29.5320860074
Correct output: -3.2945776626  | Program output: -9.2945776626 
Correct output: 134.2271184849 | Program output: 128.2271184849
Correct output: -0.0202199253  | Program output: -6.0202199253 
Correct output: 22.147714426   | Program output: 16.147714426  
Correct output: 138.1821302172 | Program output: 132.1821302172
Correct output: 104.1305174885 | Program output: 98.1305174885 
Correct output: -160.4278073292 | Program output: -166.4278073292
Correct output: 138.2150716868 | Program output: 132.2150716868
Correct output: -71.3359015133 | Program output: -77.3359015133
Correct output: -121.9396893018 | Program output: -127.9396893018
Correct output: 14.7358583393  | Program output: 8.7358583393  
Correct output: 137.435054132  | Program output: 131.435054132 
Correct output: 105.285953282  | Program output: 99.285953282  
Correct output: -95.2677404455 | Program output: -101.2677404455
Correct output: 56.3284961788  | Program output: 50.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [6.0 12 6.0 2 6.0 3 6.0 2 6.0 1 6.0 1 6.0 2 6.0 2 6.0 2 6.0 1 6.0 1 6.0 2 6.0 1 6.0 2 6.0 1 6.0 3 6.0 1 6.0 1 6.0 1 6.0 1 6.0 2 6.0 1 6.0 3 6.0 3 6.0 1]
Total: 202.0
Mean: 4.04
Genome size: 151
Size: 152
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3006.0918853
Median total errors in population: 673.76605
Error averages by case: (112.49915570000013 9.85 112.18997950000004 3.565 145.06049259999986 4.037 124.20785970000001 4.061 104.07052649999997 3.512 103.98849230000003 5.589 113.91397039999985 3.788 141.66320119999997 4.218 103.06487510000001 4.707 99.50070229999982 4.862 98.87462769999995 8.899 107.87529220000005 3.468 98.18417119999997 4.472 116.31476030000007 9.183 117.46651440000008 3.496 110.39934879999993 3.675 137.9152414000001 3.894 111.9282158 3.459 122.48233320000008 4.007 140.71734910000012 4.679 115.44700209999998 10.092 118.23275130000003 3.309 112.09006889999988 3.553 119.14378729999989 4.266 96.64516630000004 3.575)
Error minima by case: (0.0 0 0.0 0 0.3828 1 0.0 0 0.0 0 0.0 0 0.0 0 6.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.5722 1 0.0 0 0.0 0 0.9397 1 0.0 0 0.0 0 0.0 0 2.0 1 0.0 0)
Average genome size in population (length): 146.711
Average program size in population (points): 147.711
Average percent parens in population: 0.007
Minimum age in population: 114.2807320961603
Maximum age in population: 118.0626224882571
Average age in population: 116.0860993394717
Median age in population: 116.1301307985043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.961
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.961
Total error diversity:				 0.453
Error (vector) diversity:			 0.752
Behavioral diversity:				 0.756
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 191123177
--- Timings ---
Current time: 1529615371848 milliseconds
Total Time:         389.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.1 seconds, 30.6%
Fitness Testing:    217.3 seconds, 55.8%
Report:              52.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 5556.0
Test mean error for best: 2.77800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: -0.7572566753 
Correct output: -109.6672675873 | Program output: -113.6672675873
Correct output: -97.3828405386 | Program output: -101.3828405386
Correct output: 92.6401192912  | Program output: 88.6401192912 
Correct output: -50.8424651996 | Program output: -54.8424651996
Correct output: -20.4046895985 | Program output: -24.4046895985
Correct output: -114.3715424664 | Program output: -118.3715424664
Correct output: -144.3743926958 | Program output: -148.3743926958
Correct output: 50.270281284   | Program output: 46.270281284  
Correct output: -23.5320860074 | Program output: -27.5320860074
Correct output: -3.2945776626  | Program output: -7.2945776626 
Correct output: 134.2271184849 | Program output: 130.2271184849
Correct output: -0.0202199253  | Program output: -4.0202199253 
Correct output: 22.147714426   | Program output: 18.147714426  
Correct output: 138.1821302172 | Program output: 134.1821302172
Correct output: 104.1305174885 | Program output: 100.1305174885
Correct output: -160.4278073292 | Program output: -164.4278073292
Correct output: 138.2150716868 | Program output: 134.2150716868
Correct output: -71.3359015133 | Program output: -75.3359015133
Correct output: -121.9396893018 | Program output: -125.9396893018
Correct output: 14.7358583393  | Program output: 10.7358583393 
Correct output: 137.435054132  | Program output: 133.435054132 
Correct output: 105.285953282  | Program output: 101.285953282 
Correct output: -95.2677404455 | Program output: -99.2677404455
Correct output: 56.3284961788  | Program output: 52.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_inc float_swap float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_dup_times float_inc float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove integer_rot float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [4.0 12 4.0 2 4.0 3 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1]
Total: 142.0
Mean: 2.84
Genome size: 142
Size: 143
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3009.3616703000002
Median total errors in population: 662.76605
Error averages by case: (110.6181700000001 10.374 108.59889700000004 3.658 137.90833849999984 4.254 126.30856229999998 4.155 99.2836473 3.634 101.68368560000008 5.211 109.62729119999983 3.928 135.70513030000006 4.417 106.69864569999999 4.614 104.07009679999977 5.166 102.0538158999999 8.646 112.40759820000008 3.562 102.64451849999998 4.238 115.49961430000009 9.464 121.12890260000012 3.567 114.8923552 3.758 133.1691315000002 4.023 116.05692980000002 3.516 122.23282840000013 4.145 134.11844380000008 4.838 112.93729809999995 10.387 121.84850250000008 3.353 116.58189309999977 3.68 118.41533219999984 4.43 100.27404150000001 3.58)
Error minima by case: (0.0766 1 0.0 0 1.6172 1 4.0 1 0.0 0 0.0 0 0.0 0 4.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 0.0 0 4.0 1 0.0 0 1.0 1 0.0603 1 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 146.934
Average program size in population (points): 147.934
Average percent parens in population: 0.007
Minimum age in population: 115.2807320961603
Maximum age in population: 120.0626224882571
Average age in population: 117.3701204296463
Median age in population: 117.394808761036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.474
Error (vector) diversity:			 0.728
Behavioral diversity:				 0.73
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 194796602
--- Timings ---
Current time: 1529615378178 milliseconds
Total Time:         395.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.5 seconds, 30.5%
Fitness Testing:    221.5 seconds, 56.0%
Report:              53.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 4469.0
Test mean error for best: 2.23450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 0.2427433247  
Correct output: -109.6672675873 | Program output: -112.6672675873
Correct output: -97.3828405386 | Program output: -100.3828405386
Correct output: 92.6401192912  | Program output: 89.6401192912 
Correct output: -50.8424651996 | Program output: -53.8424651996
Correct output: -20.4046895985 | Program output: -23.4046895985
Correct output: -114.3715424664 | Program output: -117.3715424664
Correct output: -144.3743926958 | Program output: -147.3743926958
Correct output: 50.270281284   | Program output: 47.270281284  
Correct output: -23.5320860074 | Program output: -26.5320860074
Correct output: -3.2945776626  | Program output: -6.2945776626 
Correct output: 134.2271184849 | Program output: 131.2271184849
Correct output: -0.0202199253  | Program output: -3.0202199253 
Correct output: 22.147714426   | Program output: 19.147714426  
Correct output: 138.1821302172 | Program output: 135.1821302172
Correct output: 104.1305174885 | Program output: 101.1305174885
Correct output: -160.4278073292 | Program output: -163.4278073292
Correct output: 138.2150716868 | Program output: 135.2150716868
Correct output: -71.3359015133 | Program output: -74.3359015133
Correct output: -121.9396893018 | Program output: -124.9396893018
Correct output: 14.7358583393  | Program output: 11.7358583393 
Correct output: 137.435054132  | Program output: 134.435054132 
Correct output: 105.285953282  | Program output: 102.285953282 
Correct output: -95.2677404455 | Program output: -98.2677404455
Correct output: 56.3284961788  | Program output: 53.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_min} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup float_swap float_max float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_add float_inc float_inc float_dup_times float_min float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 in2 float_dup float_dec float_dec float_dec integer_yank float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove integer_rot float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove integer_rot float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [3.0 1 3.0 2 3.0 3 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1]
Total: 106.0
Mean: 2.12
Genome size: 149
Size: 150
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2926.9642687
Median total errors in population: 674.45325
Error averages by case: (106.89237450000007 10.555 109.61727610000007 4.017 131.4806517999998 4.679 120.93601940000002 4.484 97.7194554 3.913 98.84815150000006 5.299 110.59470669999988 4.246 133.13237110000006 4.698 102.96868050000002 4.864 98.64989829999985 5.278 100.38815339999996 7.921 107.17344380000004 3.864 99.83945679999997 4.305 111.76242940000002 9.028 114.4363558000001 3.777 108.61806949999993 4.11 130.85859880000018 4.348 110.29204870000005 3.733 121.91709920000014 4.337 131.37518440000008 4.933 110.25628610000003 9.973 115.09216570000007 3.558 110.03148579999974 4.064 118.55970339999979 4.774 96.83020260000004 3.936)
Error minima by case: (1.0 1 0.0 0 2.6172 1 2.6401 1 0.0 0 0.4047 1 0.0 0 3.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.1821 1 0.0493 1 1.8944 1 0.0 0 0.0 0 0.0603 1 0.0 0 0.4351 1 0.286 1 0.9192 1 0.0 0)
Average genome size in population (length): 148.47
Average program size in population (points): 149.47
Average percent parens in population: 0.007
Minimum age in population: 116.2807320961603
Maximum age in population: 120.6462751345706
Average age in population: 118.7059773612286
Median age in population: 118.7753893342721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.507
Error (vector) diversity:			 0.717
Behavioral diversity:				 0.721
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 198508377
--- Timings ---
Current time: 1529615384682 milliseconds
Total Time:         401.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.0 seconds, 30.4%
Fitness Testing:    225.5 seconds, 56.1%
Report:              54.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 3278.0
Test mean error for best: 1.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 5.2427433247  
Correct output: -109.6672675873 | Program output: -107.6672675873
Correct output: -97.3828405386 | Program output: -95.3828405386
Correct output: 92.6401192912  | Program output: 94.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -18.4046895985
Correct output: -114.3715424664 | Program output: -112.3715424664
Correct output: -144.3743926958 | Program output: -142.3743926958
Correct output: 50.270281284   | Program output: 52.270281284  
Correct output: -23.5320860074 | Program output: -21.5320860074
Correct output: -3.2945776626  | Program output: -1.2945776626 
Correct output: 134.2271184849 | Program output: 136.2271184849
Correct output: -0.0202199253  | Program output: 1.9797800747  
Correct output: 22.147714426   | Program output: 24.147714426  
Correct output: 138.1821302172 | Program output: 140.1821302172
Correct output: 104.1305174885 | Program output: 106.1305174885
Correct output: -160.4278073292 | Program output: -158.4278073292
Correct output: 138.2150716868 | Program output: 140.2150716868
Correct output: -71.3359015133 | Program output: -69.3359015133
Correct output: -121.9396893018 | Program output: -119.9396893018
Correct output: 14.7358583393  | Program output: 16.7358583393 
Correct output: 137.435054132  | Program output: 139.435054132 
Correct output: 105.285953282  | Program output: 107.285953282 
Correct output: -95.2677404455 | Program output: -93.2677404455
Correct output: 56.3284961788  | Program output: 58.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_stackdepth float_inc float_inc float_dup_times in1 float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove float_div float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 12 2.0 1 2.0 2 2.0 1 2.0 2 2.0 2 2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1]
Total: 93.0
Mean: 1.86
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3017.208105199999
Median total errors in population: 690.23395
Error averages by case: (104.60682160000005 10.574 109.65166720000012 4.767 123.54357159999951 5.533 124.82017969999991 4.77 97.7112961 4.42 101.35717160000006 5.478 110.52143019999964 4.867 122.62718650000011 5.161 113.53925649999992 5.031 109.16848809999975 5.227 117.17674649999975 6.507 119.77516890000014 4.463 117.91354479999991 4.434 106.64160680000005 7.618 123.65821630000013 4.057 119.98575629999995 4.78 123.46540940000034 4.867 121.46878150000006 4.108 119.50284520000032 4.66 119.88797880000003 5.09 105.39247110000002 8.375 123.96733650000006 3.848 120.70026349999956 4.686 118.0345722999997 5.342 109.15333819999994 4.274)
Error minima by case: (0.2427 1 0.0 0 1.6172 1 2.0 1 0.0 0 0.0 0 0.0 0 0.3744 1 0.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.1821 1 1.0 1 0.5722 1 0.0 0 0.0 0 0.0603 1 0.2641 1 0.4351 1 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 148.895
Average program size in population (points): 149.895
Average percent parens in population: 0.007
Minimum age in population: 117.759095075977
Maximum age in population: 122.0956483749052
Average age in population: 120.0814736080848
Median age in population: 120.1112513695333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.519
Error (vector) diversity:			 0.628
Behavioral diversity:				 0.632
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 202230764
--- Timings ---
Current time: 1529615390913 milliseconds
Total Time:         408.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.4 seconds, 30.2%
Fitness Testing:    229.4 seconds, 56.2%
Report:              55.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 3278.0
Test mean error for best: 1.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 5.2427433247  
Correct output: -109.6672675873 | Program output: -107.6672675873
Correct output: -97.3828405386 | Program output: -95.3828405386
Correct output: 92.6401192912  | Program output: 94.6401192912 
Correct output: -50.8424651996 | Program output: -48.8424651996
Correct output: -20.4046895985 | Program output: -18.4046895985
Correct output: -114.3715424664 | Program output: -112.3715424664
Correct output: -144.3743926958 | Program output: -142.3743926958
Correct output: 50.270281284   | Program output: 52.270281284  
Correct output: -23.5320860074 | Program output: -21.5320860074
Correct output: -3.2945776626  | Program output: -1.2945776626 
Correct output: 134.2271184849 | Program output: 136.2271184849
Correct output: -0.0202199253  | Program output: 1.9797800747  
Correct output: 22.147714426   | Program output: 24.147714426  
Correct output: 138.1821302172 | Program output: 140.1821302172
Correct output: 104.1305174885 | Program output: 106.1305174885
Correct output: -160.4278073292 | Program output: -158.4278073292
Correct output: 138.2150716868 | Program output: 140.2150716868
Correct output: -71.3359015133 | Program output: -69.3359015133
Correct output: -121.9396893018 | Program output: -119.9396893018
Correct output: 14.7358583393  | Program output: 16.7358583393 
Correct output: 137.435054132  | Program output: 139.435054132 
Correct output: 105.285953282  | Program output: 107.285953282 
Correct output: -95.2677404455 | Program output: -93.2677404455
Correct output: 56.3284961788  | Program output: 58.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction in1} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_shove} {:instruction float_div} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc in2 float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_stackdepth float_inc float_inc float_dup_times in1 float_min float_inc float_inc float_inc float_inc float_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove integer_shove float_div float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub)
Errors: [2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 12 2.0 1 2.0 2 2.0 1 2.0 2 2.0 2 2.0 2 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1]
Total: 93.0
Mean: 1.86
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2930.1985763
Median total errors in population: 632.0
Error averages by case: (100.561596 10.639 110.41362070000012 5.558 118.39179069999956 6.097 120.41977459999981 4.947 101.17487379999993 4.701 100.49567520000001 5.399 111.20178949999959 5.466 114.97418330000004 5.39 112.36308879999986 5.199 105.84997379999977 4.926 114.35107459999969 5.124 116.65405500000001 4.818 116.17819539999991 4.586 98.78154539999998 6.106 117.86862560000006 4.29 115.32060819999998 5.17 117.93619650000034 5.301 117.29395619999997 4.365 114.16832500000031 4.978 112.9473761999999 5.091 99.79078019999999 6.606 117.90319910000007 4.071 115.06240209999966 4.915 115.46153619999953 5.884 110.54733419999988 4.46)
Error minima by case: (0.0 0 0.0 0 0.3828 1 0.3599 1 0.0 0 0.0 1 0.3715 1 0.3744 1 0.5368 1 0.086 1 0.0 0 0.0 0 0.0 0 0.0 0 0.1821 1 0.8567 1 1.0 1 1.0 1 0.1976 1 0.0603 1 0.0 0 0.4351 1 0.286 1 0.0992 1 0.0 0)
Average genome size in population (length): 148.636
Average program size in population (points): 149.636
Average percent parens in population: 0.007
Minimum age in population: 119.0043979694998
Maximum age in population: 123.7798853374872
Average age in population: 121.6740014608796
Median age in population: 121.70072754576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.97
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.97
Total error diversity:				 0.472
Error (vector) diversity:			 0.497
Behavioral diversity:				 0.5
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 205946664
--- Timings ---
Current time: 1529615396990 milliseconds
Total Time:         414.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.8 seconds, 30.1%
Fitness Testing:    233.2 seconds, 56.3%
Report:              56.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 160.0
Test mean error for best: 0.08000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:   82.00000000000000 | Levenshtein Distance: 2
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:   44.00000000000000 | Levenshtein Distance: 12
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:   18.00000000000000 | Levenshtein Distance: 2
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 3.2427433247  
Correct output: -109.6672675873 | Program output: -109.6672675873
Correct output: -97.3828405386 | Program output: -97.3828405386
Correct output: 92.6401192912  | Program output: 92.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -20.4046895985
Correct output: -114.3715424664 | Program output: -114.3715424664
Correct output: -144.3743926958 | Program output: -144.3743926958
Correct output: 50.270281284   | Program output: 50.270281284  
Correct output: -23.5320860074 | Program output: -23.5320860074
Correct output: -3.2945776626  | Program output: -3.2945776626 
Correct output: 134.2271184849 | Program output: 134.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: 22.147714426  
Correct output: 138.1821302172 | Program output: 138.1821302172
Correct output: 104.1305174885 | Program output: 104.1305174885
Correct output: -160.4278073292 | Program output: -160.4278073292
Correct output: 138.2150716868 | Program output: 138.2150716868
Correct output: -71.3359015133 | Program output: -71.3359015133
Correct output: -121.9396893018 | Program output: -121.9396893018
Correct output: 14.7358583393  | Program output: 14.7358583393 
Correct output: 137.435054132  | Program output: 137.435054132 
Correct output: 105.285953282  | Program output: 105.285953282 
Correct output: -95.2677404455 | Program output: -95.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction integer_yank} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction integer_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_cos} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_inc} {:instruction in1} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_div} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_sub} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_dec} {:instruction float_add} {:instruction print_float} {:instruction integer_dup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_9946} {:instruction integer_sub} {:instruction in1})
Best program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc in2 float_inc float_inc float_inc integer_fromfloat float_inc integer_dup float_swap float_min float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_add float_inc float_inc float_dup_times float_cos float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_sub integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_add float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 146
Size: 147
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2937.8914646999992
Median total errors in population: 202.0
Error averages by case: (100.09528510000004 10.095 113.55647510000017 5.477 116.01669349999968 6.017 119.32183959999995 4.747 104.31229019999992 4.47 101.1136155000001 5.199 114.36394079999971 5.146 115.62637280000007 5.002 117.50620199999996 4.897 106.6721206999998 4.612 116.75289789999977 4.577 118.23759600000001 4.579 117.72971199999992 4.521 91.63169809999995 5.264 118.12673200000002 4.14 117.37809889999997 4.888 118.5833110000002 5.088 118.35419040000005 4.193 112.95323690000018 4.775 113.23559039999992 4.755 95.73120500000007 5.5 118.14133750000005 3.927 117.76634519999973 4.433 115.61814669999963 5.579 113.02253139999986 4.163)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 148.197
Average program size in population (points): 149.197
Average percent parens in population: 0.007
Minimum age in population: 120.4604321875435
Maximum age in population: 125.2580323917416
Average age in population: 123.1500191891744
Median age in population: 123.1775257864579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.41
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 209651614
--- Timings ---
Current time: 1529615403230 milliseconds
Total Time:         420.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.2 seconds, 30.0%
Fitness Testing:    236.9 seconds, 56.4%
Report:              56.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 86
Successful program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc in2 float_inc float_inc float_inc integer_fromfloat float_inc integer_dup float_swap float_min float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_add float_inc float_inc float_dup_times float_cos float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_sub integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_add float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 147


Auto-simplifying with starting size: 147
step: 0
program: (in2 integer_yank in1 float_inc float_inc float_inc float_inc float_min float_inc float_inc float_inc float_inc integer_dup_times float_inc float_inc in2 float_inc float_inc float_inc integer_fromfloat float_inc integer_dup float_swap float_min float_inc float_inc float_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_swap float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_add float_inc float_inc float_dup_times float_cos float_min float_inc float_inc float_inc float_inc float_inc float_inc integer_inc integer_dup_times integer_yank float_swap float_inc float_inc in1 float_dec float_inc in1 float_dec float_dup float_dec float_dec float_dec float_dec float_dec float_dec integer_div integer_shove float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_sub integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_dec float_add float_dec float_dec integer_shove float_dec float_dec float_dec float_dec integer_shove float_frominteger float_dec integer_shove float_dec float_dec float_dec integer_swap float_rot float_dec float_add print_float integer_dup integer_add integer_mult float_dup_items integer_yankdup integer_inc tag_float_9946 integer_sub in1)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 147

step: 500
program: (in2 in1 integer_fromfloat integer_pop in1 in1 float_dup float_dec float_dec float_dec float_sub float_dec float_add float_dec float_frominteger float_dec float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 19

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.2427433247   | Program output: 3.2427433247  
Correct output: -109.6672675873 | Program output: -109.6672675873
Correct output: -97.3828405386 | Program output: -97.3828405386
Correct output: 92.6401192912  | Program output: 92.6401192912 
Correct output: -50.8424651996 | Program output: -50.8424651996
Correct output: -20.4046895985 | Program output: -20.4046895985
Correct output: -114.3715424664 | Program output: -114.3715424664
Correct output: -144.3743926958 | Program output: -144.3743926958
Correct output: 50.270281284   | Program output: 50.270281284  
Correct output: -23.5320860074 | Program output: -23.5320860074
Correct output: -3.2945776626  | Program output: -3.2945776626 
Correct output: 134.2271184849 | Program output: 134.2271184849
Correct output: -0.0202199253  | Program output: -0.0202199253 
Correct output: 22.147714426   | Program output: 22.147714426  
Correct output: 138.1821302172 | Program output: 138.1821302172
Correct output: 104.1305174885 | Program output: 104.1305174885
Correct output: -160.4278073292 | Program output: -160.4278073292
Correct output: 138.2150716868 | Program output: 138.2150716868
Correct output: -71.3359015133 | Program output: -71.3359015133
Correct output: -121.9396893018 | Program output: -121.9396893018
Correct output: 14.7358583393  | Program output: 14.7358583393 
Correct output: 137.435054132  | Program output: 137.435054132 
Correct output: 105.285953282  | Program output: 105.285953282 
Correct output: -95.2677404455 | Program output: -95.2677404455
Correct output: 56.3284961788  | Program output: 56.3284961788 
;;******************************
